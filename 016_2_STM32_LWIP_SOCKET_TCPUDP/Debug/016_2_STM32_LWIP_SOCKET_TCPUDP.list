
016_2_STM32_LWIP_SOCKET_TCPUDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003de8  08015538  08015538  00025538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019320  08019320  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08019320  08019320  00029320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019328  08019328  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019328  08019328  00029328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801932c  0801932c  0002932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08019330  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff38  20000080  080193b0  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ffb8  080193b0  0003ffb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd0d  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000700c  00000000  00000000  0005cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  00063dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002070  00000000  00000000  00065f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000326ec  00000000  00000000  00067f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033f07  00000000  00000000  0009a66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed3b4  00000000  00000000  000ce573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bb927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009144  00000000  00000000  001bb978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015520 	.word	0x08015520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08015520 	.word	0x08015520

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	200000f0 	.word	0x200000f0

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fb19 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f81b 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f883 	bl	80006d0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 1024);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x3c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 ff21 	bl	8003428 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <main+0x40>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f002 ff05 	bl	80033fa <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x38>
 80005f2:	bf00      	nop
 80005f4:	08015544 	.word	0x08015544
 80005f8:	200002f0 	.word	0x200002f0

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f013 ff30 	bl	8014470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000670:	23a8      	movs	r3, #168	; 0xa8
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fb3b 	bl	8001cfc <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f8d8 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fd9c 	bl	80021ec <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 f8c1 	bl	8000840 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <MX_GPIO_Init+0x84>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_GPIO_Init+0x84>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_GPIO_Init+0x84>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_GPIO_Init+0x84>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_GPIO_Init+0x84>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_GPIO_Init+0x84>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0x84>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <MX_GPIO_Init+0x84>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_GPIO_Init+0x84>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <tcp_client_task>:
    }

}

void tcp_client_task()
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
	char payload[] = "Message from STM32\r\n";
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <tcp_client_task+0xa4>)
 8000760:	f107 0414 	add.w	r4, r7, #20
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076e:	6020      	str	r0, [r4, #0]
 8000770:	3404      	adds	r4, #4
 8000772:	7021      	strb	r1, [r4, #0]

    while (1) {

        struct sockaddr_in dest_addr;
        dest_addr.sin_addr.s_addr = inet_addr("192.168.0.100");
 8000774:	4822      	ldr	r0, [pc, #136]	; (8000800 <tcp_client_task+0xa8>)
 8000776:	f012 fc04 	bl	8012f82 <ipaddr_addr>
 800077a:	4603      	mov	r3, r0
 800077c:	60bb      	str	r3, [r7, #8]
        dest_addr.sin_family = AF_INET;
 800077e:	2302      	movs	r3, #2
 8000780:	717b      	strb	r3, [r7, #5]
        dest_addr.sin_port = htons(5000);
 8000782:	f241 3088 	movw	r0, #5000	; 0x1388
 8000786:	f008 fadd 	bl	8008d44 <lwip_htons>
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]

        int sock =  socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	2002      	movs	r0, #2
 8000794:	f007 ff20 	bl	80085d8 <lwip_socket>
 8000798:	6378      	str	r0, [r7, #52]	; 0x34
        if (sock < 0) {
 800079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079c:	2b00      	cmp	r3, #0
 800079e:	db28      	blt.n	80007f2 <tcp_client_task+0x9a>

            break;
        }


        int err = connect(sock, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr_in));
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2210      	movs	r2, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007a8:	f007 fd86 	bl	80082b8 <lwip_connect>
 80007ac:	6338      	str	r0, [r7, #48]	; 0x30
        if (err != 0) {
 80007ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d004      	beq.n	80007be <tcp_client_task+0x66>
        	osDelay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f002 fe82 	bl	80034c0 <osDelay>
 80007bc:	e7da      	b.n	8000774 <tcp_client_task+0x1c>
            continue;
        }

        while (1) {
            int err = send(sock, payload, strlen(payload), 0);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd04 	bl	80001d0 <strlen>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f107 0114 	add.w	r1, r7, #20
 80007ce:	2300      	movs	r3, #0
 80007d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007d2:	f007 fdf1 	bl	80083b8 <lwip_send>
 80007d6:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err < 0) {
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db04      	blt.n	80007e8 <tcp_client_task+0x90>

                break;
            }

            osDelay(1000); // FOR FREERTOS
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f002 fe6d 	bl	80034c0 <osDelay>
        while (1) {
 80007e6:	e7ea      	b.n	80007be <tcp_client_task+0x66>
                break;
 80007e8:	bf00      	nop
        }

        close(sock);
 80007ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007ec:	f007 fd0e 	bl	800820c <lwip_close>
    while (1) {
 80007f0:	e7c0      	b.n	8000774 <tcp_client_task+0x1c>
    }

}
 80007f2:	bf00      	nop
 80007f4:	3738      	adds	r7, #56	; 0x38
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bdb0      	pop	{r4, r5, r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08015570 	.word	0x08015570
 8000800:	08015560 	.word	0x08015560

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800080c:	f002 f9da 	bl	8002bc4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcp_client_task();
 8000810:	f7ff ffa2 	bl	8000758 <tcp_client_task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f002 fe53 	bl	80034c0 <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x10>

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 fa03 	bl	8000c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010000 	.word	0x40010000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x54>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <HAL_MspInit+0x54>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x54>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_MspInit+0x54>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_MspInit+0x54>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x54>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 facd 	bl	8000e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_InitTick+0xd4>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <HAL_InitTick+0xd4>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6453      	str	r3, [r2, #68]	; 0x44
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_InitTick+0xd4>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 020c 	add.w	r2, r7, #12
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe92 	bl	8002604 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008e0:	f001 fe7c 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 80008e4:	4603      	mov	r3, r0
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	4a23      	ldr	r2, [pc, #140]	; (800097c <HAL_InitTick+0xd8>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_InitTick+0xdc>)
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <HAL_InitTick+0xe0>)
 80008fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_InitTick+0xdc>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_InitTick+0xdc>)
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_InitTick+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_InitTick+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_InitTick+0xdc>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <HAL_InitTick+0xdc>)
 8000920:	f001 fea2 	bl	8002668 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800092a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11b      	bne.n	800096a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <HAL_InitTick+0xdc>)
 8000934:	f001 fef2 	bl	800271c <HAL_TIM_Base_Start_IT>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800093e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000942:	2b00      	cmp	r3, #0
 8000944:	d111      	bne.n	800096a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000946:	2019      	movs	r0, #25
 8000948:	f000 fa8e 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d808      	bhi.n	8000964 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2019      	movs	r0, #25
 8000958:	f000 fa6a 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0xe4>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e002      	b.n	800096a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800096e:	4618      	mov	r0, r3
 8000970:	3730      	adds	r7, #48	; 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	431bde83 	.word	0x431bde83
 8000980:	200002f4 	.word	0x200002f4
 8000984:	40010000 	.word	0x40010000
 8000988:	20000004 	.word	0x20000004

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009be:	f001 ff1d 	bl	80027fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002f4 	.word	0x200002f4

080009cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <ETH_IRQHandler+0x10>)
 80009d2:	f000 fccf 	bl	8001374 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20004e64 	.word	0x20004e64

080009e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_kill>:

int _kill(int pid, int sig)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <_kill+0x20>)
 80009fc:	2216      	movs	r2, #22
 80009fe:	601a      	str	r2, [r3, #0]
	return -1;
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	2000ffa4 	.word	0x2000ffa4

08000a14 <_exit>:

void _exit (int status)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ffe5 	bl	80009f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a26:	e7fe      	b.n	8000a26 <_exit+0x12>

08000a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
	}

return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
	}
	return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d205      	bcs.n	8000b40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <_sbrk+0x6c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	2000033c 	.word	0x2000033c
 8000b6c:	2000ffb8 	.word	0x2000ffb8
 8000b70:	2000ffa4 	.word	0x2000ffa4

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f013 fc0d 	bl	80143ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcf1 	bl	80005b8 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08019330 	.word	0x08019330
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000be8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000bec:	2000ffb8 	.word	0x2000ffb8

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8fc 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fe3e 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe10 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000340 	.word	0x20000340

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000340 	.word	0x20000340

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e06c      	b.n	8000f70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2223      	movs	r2, #35	; 0x23
 8000ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f869 	bl	8000f80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ETH_Init+0xf4>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_ETH_Init+0xf4>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_ETH_Init+0xf4>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_ETH_Init+0xf8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <HAL_ETH_Init+0xf8>)
 8000ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ed4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <HAL_ETH_Init+0xf8>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4927      	ldr	r1, [pc, #156]	; (8000f7c <HAL_ETH_Init+0xf8>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_ETH_Init+0xf8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000efe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f00:	f7ff feae 	bl	8000c60 <HAL_GetTick>
 8000f04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000f06:	e011      	b.n	8000f2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000f08:	f7ff feaa 	bl	8000c60 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f16:	d909      	bls.n	8000f2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	22e0      	movs	r2, #224	; 0xe0
 8000f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e021      	b.n	8000f70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e4      	bne.n	8000f08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fc36 	bl	80017b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 fcdd 	bl	8001904 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fd33 	bl	80019b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	461a      	mov	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fc9b 	bl	8001894 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2210      	movs	r2, #16
 8000f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800

08000f80 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d109      	bne.n	8000fb8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e045      	b.n	8001044 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fbe:	2b23      	cmp	r3, #35	; 0x23
 8000fc0:	d13f      	bne.n	8001042 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fd5e 	bl	8001a90 <ETH_Prepare_Tx_Descriptors>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe0:	f043 0202 	orr.w	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e02a      	b.n	8001044 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fee:	f3bf 8f4f 	dsb	sy
}
 8000ff2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	2b03      	cmp	r3, #3
 8001004:	d904      	bls.n	8001010 <HAL_ETH_Transmit_IT+0x7c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	1f1a      	subs	r2, r3, #4
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00d      	beq.n	800103e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800102a:	461a      	mov	r2, r3
 800102c:	2304      	movs	r3, #4
 800102e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001038:	461a      	mov	r2, r3
 800103a:	2300      	movs	r3, #0
 800103c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
  }
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0a8      	b.n	80011ca <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800107e:	2b23      	cmp	r3, #35	; 0x23
 8001080:	d001      	beq.n	8001086 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0a1      	b.n	80011ca <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	3212      	adds	r2, #18
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800109c:	f1c3 0304 	rsb	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80010a2:	e06a      	b.n	800117a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <HAL_ETH_ReadData+0x88>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d040      	beq.n	8001156 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00c      	beq.n	8001118 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001108:	3b04      	subs	r3, #4
 800110a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001130:	461a      	mov	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	b29b      	uxth	r3, r3
 8001136:	f002 f8eb 	bl	8003310 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	441a      	add	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d902      	bls.n	8001168 <HAL_ETH_ReadData+0x11c>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b04      	subs	r3, #4
 8001166:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	3212      	adds	r2, #18
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db06      	blt.n	8001190 <HAL_ETH_ReadData+0x144>
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	d202      	bcs.n	8001190 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d089      	beq.n	80010a4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	441a      	add	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f815 	bl	80011d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80011e0:	2301      	movs	r3, #1
 80011e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	3212      	adds	r2, #18
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80011fc:	e040      	b.n	8001280 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d112      	bne.n	800122c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4618      	mov	r0, r3
 800120c:	f002 f850 	bl	80032b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	74fb      	strb	r3, [r7, #19]
 800121a:	e007      	b.n	800122c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	461a      	mov	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	461a      	mov	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d026      	beq.n	8001280 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <ETH_UpdateDescriptor+0xe4>)
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	e003      	b.n	800124a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001248:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800124a:	f3bf 8f5f 	dmb	sy
}
 800124e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3301      	adds	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d902      	bls.n	800126e <ETH_UpdateDescriptor+0x9a>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3b04      	subs	r3, #4
 800126c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	3212      	adds	r2, #18
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	617b      	str	r3, [r7, #20]
      desccount--;
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3b01      	subs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <ETH_UpdateDescriptor+0xb8>
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1b8      	bne.n	80011fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	429a      	cmp	r2, r3
 8001294:	d00c      	beq.n	80012b0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129e:	461a      	mov	r2, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	80004600 	.word	0x80004600

080012bc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3318      	adds	r3, #24
 80012c8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80012da:	e03f      	b.n	800135c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80012dc:	2301      	movs	r3, #1
 80012de:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	3304      	adds	r3, #4
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	3301      	adds	r3, #1
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d028      	beq.n	800135c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db1b      	blt.n	8001358 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3304      	adds	r3, #4
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 f82f 	bl	8003390 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	3304      	adds	r3, #4
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	3301      	adds	r3, #1
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
 8001356:	e001      	b.n	800135c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_ETH_ReleaseTxPacket+0xac>
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1b9      	bne.n	80012dc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	2b40      	cmp	r3, #64	; 0x40
 800138c:	d112      	bne.n	80013b4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139c:	2b40      	cmp	r3, #64	; 0x40
 800139e:	d109      	bne.n	80013b4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_ETH_IRQHandler+0x178>)
 80013ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f001 fd58 	bl	8002e64 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d113      	bne.n	80013ee <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10a      	bne.n	80013ee <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	461a      	mov	r2, r3
 80013e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80013e6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 fd4b 	bl	8002e84 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001400:	d14c      	bne.n	800149c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001414:	d142      	bne.n	800149c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141c:	f043 0208 	orr.w	r2, r3, #8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001438:	d11a      	bne.n	8001470 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_ETH_IRQHandler+0x17c>)
 8001446:	4013      	ands	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001464:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	22e0      	movs	r2, #224	; 0xe0
 800146a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800146e:	e012      	b.n	8001496 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	f248 6380 	movw	r3, #34432	; 0x8680
 800147e:	4013      	ands	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148e:	461a      	mov	r2, r3
 8001490:	f248 6380 	movw	r3, #34432	; 0x8680
 8001494:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f001 fd04 	bl	8002ea4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d10e      	bne.n	80014c8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f81c 	bl	80014f8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_ETH_IRQHandler+0x180>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_ETH_IRQHandler+0x180>)
 80014d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014da:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f815 	bl	800150c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	00010040 	.word	0x00010040
 80014f0:	007e2000 	.word	0x007e2000
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <ETH_SetMACConfig+0x15c>)
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7c1b      	ldrb	r3, [r3, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <ETH_SetMACConfig+0x28>
 800155e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x2a>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7c5b      	ldrb	r3, [r3, #17]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <ETH_SetMACConfig+0x38>
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	e000      	b.n	8001576 <ETH_SetMACConfig+0x3a>
 8001574:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001576:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800157c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7fdb      	ldrb	r3, [r3, #31]
 8001582:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001584:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800158a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	7f92      	ldrb	r2, [r2, #30]
 8001590:	2a00      	cmp	r2, #0
 8001592:	d102      	bne.n	800159a <ETH_SetMACConfig+0x5e>
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	e000      	b.n	800159c <ETH_SetMACConfig+0x60>
 800159a:	2200      	movs	r2, #0
                        macconf->Speed |
 800159c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7f1b      	ldrb	r3, [r3, #28]
 80015a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d102      	bne.n	80015c4 <ETH_SetMACConfig+0x88>
 80015be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c2:	e000      	b.n	80015c6 <ETH_SetMACConfig+0x8a>
 80015c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	7bdb      	ldrb	r3, [r3, #15]
 80015cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015de:	4313      	orrs	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fb3e 	bl	8000c78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001622:	2a00      	cmp	r2, #0
 8001624:	d101      	bne.n	800162a <ETH_SetMACConfig+0xee>
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	e000      	b.n	800162c <ETH_SetMACConfig+0xf0>
 800162a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800162c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001632:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800163a:	2a01      	cmp	r2, #1
 800163c:	d101      	bne.n	8001642 <ETH_SetMACConfig+0x106>
 800163e:	2208      	movs	r2, #8
 8001640:	e000      	b.n	8001644 <ETH_SetMACConfig+0x108>
 8001642:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001644:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800164c:	2a01      	cmp	r2, #1
 800164e:	d101      	bne.n	8001654 <ETH_SetMACConfig+0x118>
 8001650:	2204      	movs	r2, #4
 8001652:	e000      	b.n	8001656 <ETH_SetMACConfig+0x11a>
 8001654:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001656:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800165e:	2a01      	cmp	r2, #1
 8001660:	d101      	bne.n	8001666 <ETH_SetMACConfig+0x12a>
 8001662:	2202      	movs	r2, #2
 8001664:	e000      	b.n	8001668 <ETH_SetMACConfig+0x12c>
 8001666:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001668:	4313      	orrs	r3, r2
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff faf9 	bl	8000c78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	ff20810f 	.word	0xff20810f

0800169c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <ETH_SetDMAConfig+0x110>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <ETH_SetDMAConfig+0x2c>
 80016c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016c6:	e000      	b.n	80016ca <ETH_SetDMAConfig+0x2e>
 80016c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	7f52      	ldrb	r2, [r2, #29]
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	d102      	bne.n	80016e0 <ETH_SetDMAConfig+0x44>
 80016da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016de:	e000      	b.n	80016e2 <ETH_SetDMAConfig+0x46>
 80016e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7b9b      	ldrb	r3, [r3, #14]
 80016e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7f1b      	ldrb	r3, [r3, #28]
 80016f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7f9b      	ldrb	r3, [r3, #30]
 80016fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001700:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001706:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001710:	4313      	orrs	r3, r2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff faa0 	bl	8000c78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001750:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001756:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800175c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001764:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001766:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800176e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001774:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fa71 	bl	8000c78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f8de3f23 	.word	0xf8de3f23

080017b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b0a6      	sub	sp, #152	; 0x98
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe86 	bl	800153c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001834:	2301      	movs	r3, #1
 8001836:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001878:	2300      	movs	r3, #0
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff08 	bl	800169c <ETH_SetDMAConfig>
}
 800188c:	bf00      	nop
 800188e:	3798      	adds	r7, #152	; 0x98
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3305      	adds	r3, #5
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	3204      	adds	r2, #4
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <ETH_MACAddressConfig+0x68>)
 80018b6:	4413      	add	r3, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3303      	adds	r3, #3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	061a      	lsls	r2, r3, #24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3302      	adds	r3, #2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <ETH_MACAddressConfig+0x6c>)
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40028040 	.word	0x40028040
 8001900:	40028044 	.word	0x40028044

08001904 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e03e      	b.n	8001990 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68d9      	ldr	r1, [r3, #12]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	3206      	adds	r2, #6
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d80c      	bhi.n	8001974 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e004      	b.n	800197e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d9bd      	bls.n	8001912 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e046      	b.n	8001a52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6919      	ldr	r1, [r3, #16]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001a08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	3212      	adds	r2, #18
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d80c      	bhi.n	8001a42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6919      	ldr	r1, [r3, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	e004      	b.n	8001a4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d9b5      	bls.n	80019c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	60da      	str	r2, [r3, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b08d      	sub	sp, #52	; 0x34
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ad2:	d007      	beq.n	8001ae4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	3304      	adds	r3, #4
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e103      	b.n	8001cf0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	3301      	adds	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001b00:	f023 031f 	bic.w	r3, r3, #31
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	6852      	ldr	r2, [r2, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b6e:	f3bf 8f5f 	dmb	sy
}
 8001b72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001b80:	e084      	b.n	8001c8c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e005      	b.n	8001bae <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d902      	bls.n	8001bc0 <ETH_Prepare_Tx_Descriptors+0x130>
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	3b04      	subs	r3, #4
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001be2:	d007      	beq.n	8001bf4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	3304      	adds	r3, #4
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d029      	beq.n	8001c48 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c06:	e019      	b.n	8001c3c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001c08:	f3bf 8f5f 	dmb	sy
}
 8001c0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d902      	bls.n	8001c2c <ETH_Prepare_Tx_Descriptors+0x19c>
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	3b04      	subs	r3, #4
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	3301      	adds	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3e1      	bcc.n	8001c08 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e053      	b.n	8001cf0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001c66:	f023 031f 	bic.w	r3, r3, #31
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	6852      	ldr	r2, [r2, #4]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c7a:	f3bf 8f5f 	dmb	sy
}
 8001c7e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f af76 	bne.w	8001b82 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e005      	b.n	8001cb6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	3304      	adds	r3, #4
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001cea:	b662      	cpsie	i
}
 8001cec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3734      	adds	r7, #52	; 0x34
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e267      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d075      	beq.n	8001e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d00c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x108>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d157      	bne.n	8001e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e242      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x74>
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x98>
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6f      	ldr	r2, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6c      	ldr	r2, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a68      	ldr	r2, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe ff54 	bl	8000c60 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ff50 	bl	8000c60 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e207      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xc0>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ff40 	bl	8000c60 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe ff3c 	bl	8000c60 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1f3      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0xe8>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d063      	beq.n	8001eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d11c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e1c7      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	e03a      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_OscConfig+0x244>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe fef5 	bl	8000c60 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7fe fef1 	bl	8000c60 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1a8      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4925      	ldr	r1, [pc, #148]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x244>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fed4 	bl	8000c60 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7fe fed0 	bl	8000c60 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e187      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d036      	beq.n	8001f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x248>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7fe feb4 	bl	8000c60 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7fe feb0 	bl	8000c60 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e167      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x200>
 8001f1a:	e01b      	b.n	8001f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x248>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7fe fe9d 	bl	8000c60 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e00e      	b.n	8001f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7fe fe99 	bl	8000c60 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d907      	bls.n	8001f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e150      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470000 	.word	0x42470000
 8001f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ea      	bne.n	8001f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8097 	beq.w	8002090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10f      	bne.n	8001f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b7d      	ldr	r3, [pc, #500]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b7a      	ldr	r3, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b77      	ldr	r3, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d118      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a73      	ldr	r2, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7fe fe59 	bl	8000c60 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7fe fe55 	bl	8000c60 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e10c      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2ea>
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x324>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x30c>
 8001fee:	4b5f      	ldr	r3, [pc, #380]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5e      	ldr	r2, [pc, #376]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0x324>
 8002008:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe fe1a 	bl	8000c60 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe fe16 	bl	8000c60 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0cb      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0ee      	beq.n	8002030 <HAL_RCC_OscConfig+0x334>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe fe04 	bl	8000c60 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7fe fe00 	bl	8000c60 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0b5      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ee      	bne.n	800205c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800208a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a1 	beq.w	80021dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d05c      	beq.n	8002160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d141      	bne.n	8002132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fdd4 	bl	8000c60 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020bc:	f7fe fdd0 	bl	8000c60 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e087      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x470>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	491b      	ldr	r1, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fda9 	bl	8000c60 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fda5 	bl	8000c60 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e05c      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x416>
 8002130:	e054      	b.n	80021dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fd92 	bl	8000c60 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fd8e 	bl	8000c60 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e045      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x444>
 800215e:	e03d      	b.n	80021dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e038      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000
 8002174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d028      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d121      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d111      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fcc0 	bl	8000c60 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe fcbc 	bl	8000c60 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fa86 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08018f3c 	.word	0x08018f3c
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b094      	sub	sp, #80	; 0x50
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
 80023c4:	2300      	movs	r3, #0
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c8:	2300      	movs	r3, #0
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80e1 	bhi.w	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e0db      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023f0:	e0db      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f6:	e0d8      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	2200      	movs	r2, #0
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
 8002418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
 8002426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4621      	mov	r1, r4
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	6139      	str	r1, [r7, #16]
 8002448:	4629      	mov	r1, r5
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800245c:	4659      	mov	r1, fp
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4651      	mov	r1, sl
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4651      	mov	r1, sl
 800246c:	ebb2 0801 	subs.w	r8, r2, r1
 8002470:	4659      	mov	r1, fp
 8002472:	eb63 0901 	sbc.w	r9, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248a:	4690      	mov	r8, r2
 800248c:	4699      	mov	r9, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb18 0303 	adds.w	r3, r8, r3
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	462b      	mov	r3, r5
 8002498:	eb49 0303 	adc.w	r3, r9, r3
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024aa:	4629      	mov	r1, r5
 80024ac:	024b      	lsls	r3, r1, #9
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b4:	4621      	mov	r1, r4
 80024b6:	024a      	lsls	r2, r1, #9
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c8:	f7fd feda 	bl	8000280 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	e058      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	4611      	mov	r1, r2
 80024e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0159      	lsls	r1, r3, #5
 80024fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002502:	0150      	lsls	r0, r2, #5
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4641      	mov	r1, r8
 800250a:	ebb2 0a01 	subs.w	sl, r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	eb63 0b01 	sbc.w	fp, r3, r1
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002528:	ebb2 040a 	subs.w	r4, r2, sl
 800252c:	eb63 050b 	sbc.w	r5, r3, fp
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	464b      	mov	r3, r9
 800254c:	eb45 0303 	adc.w	r3, r5, r3
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255e:	4629      	mov	r1, r5
 8002560:	028b      	lsls	r3, r1, #10
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002568:	4621      	mov	r1, r4
 800256a:	028a      	lsls	r2, r1, #10
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	61fa      	str	r2, [r7, #28]
 8002578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257c:	f7fd fe80 	bl	8000280 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3750      	adds	r7, #80	; 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08018f4c 	.word	0x08018f4c

08002604 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	220f      	movs	r2, #15
 8002612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCC_GetClockConfig+0x60>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0207 	and.w	r2, r3, #7
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f839 	bl	8002706 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 f9d8 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d001      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04e      	b.n	80027d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d01d      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_TIM_Base_Start_IT+0xd0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x80>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d010      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	e007      	b.n	80027d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010400 	.word	0x40010400
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40001800 	.word	0x40001800

080027fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0202 	mvn.w	r2, #2
 8002828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8ee 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8e0 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f8f1 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0204 	mvn.w	r2, #4
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8c4 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8b6 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8c7 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0208 	mvn.w	r2, #8
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f89a 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f88c 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f89d 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2208      	movs	r2, #8
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f870 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f862 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f873 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fd ff4e 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f902 	bl	8002bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f838 	bl	8002a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0220 	mvn.w	r2, #32
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8cc 	bl	8002b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <TIM_Base_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d00f      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <TIM_Base_SetConfig+0x118>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3c      	ldr	r2, [pc, #240]	; (8002b78 <TIM_Base_SetConfig+0x11c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <TIM_Base_SetConfig+0x120>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <TIM_Base_SetConfig+0x124>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <TIM_Base_SetConfig+0x114>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d027      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <TIM_Base_SetConfig+0x118>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d023      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <TIM_Base_SetConfig+0x11c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <TIM_Base_SetConfig+0x120>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <TIM_Base_SetConfig+0x124>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <TIM_Base_SetConfig+0x128>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <TIM_Base_SetConfig+0x12c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <TIM_Base_SetConfig+0x130>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <TIM_Base_SetConfig+0x134>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <TIM_Base_SetConfig+0x138>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <TIM_Base_SetConfig+0x13c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <TIM_Base_SetConfig+0x114>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <TIM_Base_SetConfig+0xf8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <TIM_Base_SetConfig+0x124>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d103      	bne.n	8002b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	615a      	str	r2, [r3, #20]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40010400 	.word	0x40010400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800
 8002b90:	40001800 	.word	0x40001800
 8002b94:	40001c00 	.word	0x40001c00
 8002b98:	40002000 	.word	0x40002000

08002b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002bca:	4b96      	ldr	r3, [pc, #600]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002bcc:	22c0      	movs	r2, #192	; 0xc0
 8002bce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002bd2:	22a8      	movs	r2, #168	; 0xa8
 8002bd4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002bd6:	4b93      	ldr	r3, [pc, #588]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8002bdc:	4b91      	ldr	r3, [pc, #580]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002bde:	220a      	movs	r2, #10
 8002be0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002be2:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002be8:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002bee:	4b8e      	ldr	r3, [pc, #568]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8002bfa:	4b8c      	ldr	r3, [pc, #560]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8002c00:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002c06:	4b89      	ldr	r3, [pc, #548]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8002c0c:	4b87      	ldr	r3, [pc, #540]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f006 f84b 	bl	8008cb0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	061a      	lsls	r2, r3, #24
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	4b7e      	ldr	r3, [pc, #504]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c2a:	789b      	ldrb	r3, [r3, #2]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c32:	78d2      	ldrb	r2, [r2, #3]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	061a      	lsls	r2, r3, #24
 8002c38:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	0619      	lsls	r1, r3, #24
 8002c3e:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	4319      	orrs	r1, r3
 8002c46:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c48:	789b      	ldrb	r3, [r3, #2]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	4975      	ldr	r1, [pc, #468]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c50:	78c9      	ldrb	r1, [r1, #3]
 8002c52:	430b      	orrs	r3, r1
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0619      	lsls	r1, r3, #24
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	4319      	orrs	r1, r3
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c6c:	789b      	ldrb	r3, [r3, #2]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	430b      	orrs	r3, r1
 8002c72:	496c      	ldr	r1, [pc, #432]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c74:	78c9      	ldrb	r1, [r1, #3]
 8002c76:	430b      	orrs	r3, r1
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0619      	lsls	r1, r3, #24
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	4319      	orrs	r1, r3
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c90:	789b      	ldrb	r3, [r3, #2]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	430b      	orrs	r3, r1
 8002c96:	4963      	ldr	r1, [pc, #396]	; (8002e24 <MX_LWIP_Init+0x260>)
 8002c98:	78c9      	ldrb	r1, [r1, #3]
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	0e1b      	lsrs	r3, r3, #24
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	4a63      	ldr	r2, [pc, #396]	; (8002e30 <MX_LWIP_Init+0x26c>)
 8002ca2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002ca4:	4b60      	ldr	r3, [pc, #384]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	061a      	lsls	r2, r3, #24
 8002caa:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cb4:	789b      	ldrb	r3, [r3, #2]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	4a5b      	ldr	r2, [pc, #364]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cbc:	78d2      	ldrb	r2, [r2, #3]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	061a      	lsls	r2, r3, #24
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0619      	lsls	r1, r3, #24
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	4319      	orrs	r1, r3
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cd2:	789b      	ldrb	r3, [r3, #2]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	4953      	ldr	r1, [pc, #332]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cda:	78c9      	ldrb	r1, [r1, #3]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	0619      	lsls	r1, r3, #24
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cee:	785b      	ldrb	r3, [r3, #1]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	4319      	orrs	r1, r3
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cf6:	789b      	ldrb	r3, [r3, #2]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	494a      	ldr	r1, [pc, #296]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002cfe:	78c9      	ldrb	r1, [r1, #3]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0619      	lsls	r1, r3, #24
 8002d10:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	4319      	orrs	r1, r3
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	4941      	ldr	r1, [pc, #260]	; (8002e28 <MX_LWIP_Init+0x264>)
 8002d22:	78c9      	ldrb	r1, [r1, #3]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	0e1b      	lsrs	r3, r3, #24
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	4a42      	ldr	r2, [pc, #264]	; (8002e34 <MX_LWIP_Init+0x270>)
 8002d2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	061a      	lsls	r2, r3, #24
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	4313      	orrs	r3, r2
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d46:	78d2      	ldrb	r2, [r2, #3]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	061a      	lsls	r2, r3, #24
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	0619      	lsls	r1, r3, #24
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4319      	orrs	r1, r3
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d5c:	789b      	ldrb	r3, [r3, #2]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	430b      	orrs	r3, r1
 8002d62:	4932      	ldr	r1, [pc, #200]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d64:	78c9      	ldrb	r1, [r1, #3]
 8002d66:	430b      	orrs	r3, r1
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	0619      	lsls	r1, r3, #24
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	4319      	orrs	r1, r3
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d80:	789b      	ldrb	r3, [r3, #2]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	430b      	orrs	r3, r1
 8002d86:	4929      	ldr	r1, [pc, #164]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d88:	78c9      	ldrb	r1, [r1, #3]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d92:	431a      	orrs	r2, r3
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	0619      	lsls	r1, r3, #24
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	4319      	orrs	r1, r3
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	430b      	orrs	r3, r1
 8002daa:	4920      	ldr	r1, [pc, #128]	; (8002e2c <MX_LWIP_Init+0x268>)
 8002dac:	78c9      	ldrb	r1, [r1, #3]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	0e1b      	lsrs	r3, r3, #24
 8002db2:	4313      	orrs	r3, r2
 8002db4:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <MX_LWIP_Init+0x274>)
 8002db6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <MX_LWIP_Init+0x278>)
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <MX_LWIP_Init+0x27c>)
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <MX_LWIP_Init+0x274>)
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <MX_LWIP_Init+0x270>)
 8002dc8:	4919      	ldr	r1, [pc, #100]	; (8002e30 <MX_LWIP_Init+0x26c>)
 8002dca:	481e      	ldr	r0, [pc, #120]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002dcc:	f006 fd3a 	bl	8009844 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002dd0:	481c      	ldr	r0, [pc, #112]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002dd2:	f006 fee9 	bl	8009ba8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002dd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002de8:	4816      	ldr	r0, [pc, #88]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002dea:	f006 feed 	bl	8009bc8 <netif_set_up>
 8002dee:	e002      	b.n	8002df6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002df0:	4814      	ldr	r0, [pc, #80]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002df2:	f006 ff55 	bl	8009ca0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002df6:	4914      	ldr	r1, [pc, #80]	; (8002e48 <MX_LWIP_Init+0x284>)
 8002df8:	4812      	ldr	r0, [pc, #72]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002dfa:	f006 ff83 	bl	8009d04 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <MX_LWIP_Init+0x288>)
 8002e00:	1d3c      	adds	r4, r7, #4
 8002e02:	461d      	mov	r5, r3
 8002e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	490c      	ldr	r1, [pc, #48]	; (8002e44 <MX_LWIP_Init+0x280>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fb07 	bl	8003428 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000384 	.word	0x20000384
 8002e28:	20000388 	.word	0x20000388
 8002e2c:	2000038c 	.word	0x2000038c
 8002e30:	20000378 	.word	0x20000378
 8002e34:	2000037c 	.word	0x2000037c
 8002e38:	20000380 	.word	0x20000380
 8002e3c:	08008bc1 	.word	0x08008bc1
 8002e40:	080031f5 	.word	0x080031f5
 8002e44:	20000344 	.word	0x20000344
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08015590 	.word	0x08015590

08002e50 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_ETH_RxCpltCallback+0x1c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fc55 	bl	8003720 <osSemaphoreRelease>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20004e5c 	.word	0x20004e5c

08002e84 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_ETH_TxCpltCallback+0x1c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fc45 	bl	8003720 <osSemaphoreRelease>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20004e60 	.word	0x20004e60

08002ea4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe fb37 	bl	8001520 <HAL_ETH_GetDMAError>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d104      	bne.n	8002ec6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_ETH_ErrorCallback+0x2c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fc2d 	bl	8003720 <osSemaphoreRelease>
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20004e5c 	.word	0x20004e5c

08002ed4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <low_level_init+0x14c>)
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <low_level_init+0x150>)
 8002ee6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 8002ef4:	23e1      	movs	r3, #225	; 0xe1
 8002ef6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0x00;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 8002f0c:	4a44      	ldr	r2, [pc, #272]	; (8003020 <low_level_init+0x14c>)
 8002f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f12:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002f14:	4b42      	ldr	r3, [pc, #264]	; (8003020 <low_level_init+0x14c>)
 8002f16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f1a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <low_level_init+0x14c>)
 8002f1e:	4a42      	ldr	r2, [pc, #264]	; (8003028 <low_level_init+0x154>)
 8002f20:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <low_level_init+0x14c>)
 8002f24:	4a41      	ldr	r2, [pc, #260]	; (800302c <low_level_init+0x158>)
 8002f26:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8002f28:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <low_level_init+0x14c>)
 8002f2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002f2e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002f30:	483b      	ldr	r0, [pc, #236]	; (8003020 <low_level_init+0x14c>)
 8002f32:	f7fd ffa7 	bl	8000e84 <HAL_ETH_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002f3c:	2238      	movs	r2, #56	; 0x38
 8002f3e:	2100      	movs	r1, #0
 8002f40:	483b      	ldr	r0, [pc, #236]	; (8003030 <low_level_init+0x15c>)
 8002f42:	f011 fa95 	bl	8014470 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <low_level_init+0x15c>)
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002f4c:	4b38      	ldr	r3, [pc, #224]	; (8003030 <low_level_init+0x15c>)
 8002f4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002f52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <low_level_init+0x15c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8002f5a:	4836      	ldr	r0, [pc, #216]	; (8003034 <low_level_init+0x160>)
 8002f5c:	f006 fb2c 	bl	80095b8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2206      	movs	r2, #6
 8002f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002f68:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <low_level_init+0x14c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <low_level_init+0x14c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	785a      	ldrb	r2, [r3, #1]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <low_level_init+0x14c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	789a      	ldrb	r2, [r3, #2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <low_level_init+0x14c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	78da      	ldrb	r2, [r3, #3]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002f98:	4b21      	ldr	r3, [pc, #132]	; (8003020 <low_level_init+0x14c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	791a      	ldrb	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <low_level_init+0x14c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	795a      	ldrb	r2, [r3, #5]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fb6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fbe:	f043 030a 	orr.w	r3, r3, #10
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8002fca:	2203      	movs	r2, #3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f000 fe8a 	bl	8003ce8 <xQueueGenericCreate>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <low_level_init+0x164>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8002fda:	2203      	movs	r2, #3
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f000 fe82 	bl	8003ce8 <xQueueGenericCreate>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <low_level_init+0x168>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <low_level_init+0x16c>)
 8002fec:	f107 040c 	add.w	r4, r7, #12
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa0f 	bl	8003428 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800300a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8003012:	f7fd fc15 	bl	8000840 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003016:	bf00      	nop
 8003018:	3730      	adds	r7, #48	; 0x30
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	20004e64 	.word	0x20004e64
 8003024:	40028000 	.word	0x40028000
 8003028:	20004dbc 	.word	0x20004dbc
 800302c:	20004d1c 	.word	0x20004d1c
 8003030:	20004f14 	.word	0x20004f14
 8003034:	08018f54 	.word	0x08018f54
 8003038:	20004e5c 	.word	0x20004e5c
 800303c:	20004e60 	.word	0x20004e60
 8003040:	080155b4 	.word	0x080155b4

08003044 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b092      	sub	sp, #72	; 0x48
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	2230      	movs	r2, #48	; 0x30
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f011 fa03 	bl	8014470 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	2230      	movs	r2, #48	; 0x30
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f011 f9fc 	bl	8014470 <memset>

  for(q = p; q != NULL; q = q->next)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	643b      	str	r3, [r7, #64]	; 0x40
 800307c:	e045      	b.n	800310a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	2b03      	cmp	r3, #3
 8003082:	d902      	bls.n	800308a <low_level_output+0x46>
      return ERR_IF;
 8003084:	f06f 030b 	mvn.w	r3, #11
 8003088:	e065      	b.n	8003156 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3348      	adds	r3, #72	; 0x48
 800309a:	443b      	add	r3, r7
 800309c:	3b3c      	subs	r3, #60	; 0x3c
 800309e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80030a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a2:	895b      	ldrh	r3, [r3, #10]
 80030a4:	4619      	mov	r1, r3
 80030a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3348      	adds	r3, #72	; 0x48
 80030b2:	443b      	add	r3, r7
 80030b4:	3b38      	subs	r3, #56	; 0x38
 80030b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80030be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	f107 000c 	add.w	r0, r7, #12
 80030c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030c8:	460b      	mov	r3, r1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	440b      	add	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	18c1      	adds	r1, r0, r3
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	443b      	add	r3, r7
 80030de:	3b34      	subs	r3, #52	; 0x34
 80030e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80030ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3348      	adds	r3, #72	; 0x48
 80030f6:	443b      	add	r3, r7
 80030f8:	3b34      	subs	r3, #52	; 0x34
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80030fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003100:	3301      	adds	r3, #1
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
 800310a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1b6      	bne.n	800307e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	891b      	ldrh	r3, [r3, #8]
 8003114:	461a      	mov	r2, r3
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <low_level_output+0x11c>)
 8003118:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <low_level_output+0x11c>)
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <low_level_output+0x11c>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	f007 fa3f 	bl	800a5ac <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800312e:	490c      	ldr	r1, [pc, #48]	; (8003160 <low_level_output+0x11c>)
 8003130:	480c      	ldr	r0, [pc, #48]	; (8003164 <low_level_output+0x120>)
 8003132:	f7fd ff2f 	bl	8000f94 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003136:	bf00      	nop
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <low_level_output+0x124>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fa9f 	bl	8003684 <osSemaphoreWait>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f5      	bne.n	8003138 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800314c:	4805      	ldr	r0, [pc, #20]	; (8003164 <low_level_output+0x120>)
 800314e:	f7fe f8b5 	bl	80012bc <HAL_ETH_ReleaseTxPacket>

  return errval;
 8003152:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003156:	4618      	mov	r0, r3
 8003158:	3748      	adds	r7, #72	; 0x48
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20004f14 	.word	0x20004f14
 8003164:	20004e64 	.word	0x20004e64
 8003168:	20004e60 	.word	0x20004e60

0800316c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <low_level_input+0x2c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4619      	mov	r1, r3
 8003186:	4805      	ldr	r0, [pc, #20]	; (800319c <low_level_input+0x30>)
 8003188:	f7fd ff60 	bl	800104c <HAL_ETH_ReadData>
  }

  return p;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20004d18 	.word	0x20004d18
 800319c:	20004e64 	.word	0x20004e64

080031a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <ethernetif_input+0x50>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa63 	bl	8003684 <osSemaphoreWait>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f5      	bne.n	80031b0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80031c4:	68b8      	ldr	r0, [r7, #8]
 80031c6:	f7ff ffd1 	bl	800316c <low_level_input>
 80031ca:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	4798      	blx	r3
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f007 f93c 	bl	800a460 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ea      	bne.n	80031c4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80031ee:	e7df      	b.n	80031b0 <ethernetif_input+0x10>
 80031f0:	20004e5c 	.word	0x20004e5c

080031f4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <ethernetif_init+0x1c>
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <ethernetif_init+0x48>)
 8003204:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8003208:	490d      	ldr	r1, [pc, #52]	; (8003240 <ethernetif_init+0x4c>)
 800320a:	480e      	ldr	r0, [pc, #56]	; (8003244 <ethernetif_init+0x50>)
 800320c:	f011 f938 	bl	8014480 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2273      	movs	r2, #115	; 0x73
 8003214:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2274      	movs	r2, #116	; 0x74
 800321c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <ethernetif_init+0x54>)
 8003224:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <ethernetif_init+0x58>)
 800322a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fe51 	bl	8002ed4 <low_level_init>

  return ERR_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	080155d0 	.word	0x080155d0
 8003240:	080155ec 	.word	0x080155ec
 8003244:	080155fc 	.word	0x080155fc
 8003248:	080120b9 	.word	0x080120b9
 800324c:	08003045 	.word	0x08003045

08003250 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	4809      	ldr	r0, [pc, #36]	; (8003284 <pbuf_free_custom+0x34>)
 8003260:	f006 fa9a 	bl	8009798 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <pbuf_free_custom+0x38>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <pbuf_free_custom+0x38>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <pbuf_free_custom+0x3c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa52 	bl	8003720 <osSemaphoreRelease>
  }
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	08018f54 	.word	0x08018f54
 8003288:	20004d18 	.word	0x20004d18
 800328c:	20004e5c 	.word	0x20004e5c

08003290 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003294:	f7fd fce4 	bl	8000c60 <HAL_GetTick>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	bd80      	pop	{r7, pc}

0800329e <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80032a6:	2064      	movs	r0, #100	; 0x64
 80032a8:	f000 f90a 	bl	80034c0 <osDelay>
 80032ac:	e7fb      	b.n	80032a6 <ethernet_link_thread+0x8>
	...

080032b0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80032b8:	4812      	ldr	r0, [pc, #72]	; (8003304 <HAL_ETH_RxAllocateCallback+0x54>)
 80032ba:	f006 f9f9 	bl	80096b0 <memp_malloc_pool>
 80032be:	60f8      	str	r0, [r7, #12]
  if (p)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d014      	beq.n	80032f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f103 0220 	add.w	r2, r3, #32
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_ETH_RxAllocateCallback+0x58>)
 80032d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2241      	movs	r2, #65	; 0x41
 80032e6:	2100      	movs	r1, #0
 80032e8:	2000      	movs	r0, #0
 80032ea:	f006 feff 	bl	800a0ec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80032ee:	e005      	b.n	80032fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_ETH_RxAllocateCallback+0x5c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	08018f54 	.word	0x08018f54
 8003308:	08003251 	.word	0x08003251
 800330c:	20004d18 	.word	0x20004d18

08003310 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3b20      	subs	r3, #32
 800332e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2200      	movs	r2, #0
 800333a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e003      	b.n	800335a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e009      	b.n	800337c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	891a      	ldrh	r2, [r3, #8]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4413      	add	r3, r2
 8003370:	b29a      	uxth	r2, r3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f2      	bne.n	8003368 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3724      	adds	r7, #36	; 0x24
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f007 f861 	bl	800a460 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b8:	2b84      	cmp	r3, #132	; 0x84
 80033ba:	d005      	beq.n	80033c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	3303      	adds	r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033dc:	f3ef 8305 	mrs	r3, IPSR
 80033e0:	607b      	str	r3, [r7, #4]
  return(result);
 80033e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033fe:	f001 fd25 	bl	8004e4c <vTaskStartScheduler>
  
  return osOK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}

08003408 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800340c:	f7ff ffe3 	bl	80033d6 <inHandlerMode>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003416:	f001 fe33 	bl	8005080 <xTaskGetTickCountFromISR>
 800341a:	4603      	mov	r3, r0
 800341c:	e002      	b.n	8003424 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800341e:	f001 fe1f 	bl	8005060 <xTaskGetTickCount>
 8003422:	4603      	mov	r3, r0
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}

08003428 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af04      	add	r7, sp, #16
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <osThreadCreate+0x54>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01c      	beq.n	800347c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685c      	ldr	r4, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681d      	ldr	r5, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691e      	ldr	r6, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ffa6 	bl	80033a6 <makeFreeRtosPriority>
 800345a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003464:	9202      	str	r2, [sp, #8]
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	9100      	str	r1, [sp, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	4632      	mov	r2, r6
 800346e:	4629      	mov	r1, r5
 8003470:	4620      	mov	r0, r4
 8003472:	f001 fb23 	bl	8004abc <xTaskCreateStatic>
 8003476:	4603      	mov	r3, r0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e01c      	b.n	80034b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685c      	ldr	r4, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003488:	b29e      	uxth	r6, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff88 	bl	80033a6 <makeFreeRtosPriority>
 8003496:	4602      	mov	r2, r0
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	9200      	str	r2, [sp, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4632      	mov	r2, r6
 80034a4:	4629      	mov	r1, r5
 80034a6:	4620      	mov	r0, r4
 80034a8:	f001 fb65 	bl	8004b76 <xTaskCreate>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <osDelay+0x16>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	e000      	b.n	80034d8 <osDelay+0x18>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fc83 	bl	8004de4 <vTaskDelay>
  
  return osOK;
 80034de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4619      	mov	r1, r3
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 fc7d 	bl	8003dfe <xQueueCreateMutexStatic>
 8003504:	4603      	mov	r3, r0
 8003506:	e003      	b.n	8003510 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003508:	2001      	movs	r0, #1
 800350a:	f000 fc60 	bl	8003dce <xQueueCreateMutex>
 800350e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <osMutexWait+0x18>
    return osErrorParameter;
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	e03a      	b.n	80035a6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d103      	bne.n	8003544 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e009      	b.n	8003558 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <osMutexWait+0x40>
      ticks = 1;
 8003554:	2301      	movs	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003558:	f7ff ff3d 	bl	80033d6 <inHandlerMode>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d017      	beq.n	8003592 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	461a      	mov	r2, r3
 8003568:	2100      	movs	r1, #0
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 f874 	bl	8004658 <xQueueReceiveFromISR>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <osMutexWait+0x62>
      return osErrorOS;
 8003576:	23ff      	movs	r3, #255	; 0xff
 8003578:	e015      	b.n	80035a6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d011      	beq.n	80035a4 <osMutexWait+0x8c>
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <osMutexWait+0x98>)
 8003582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	e008      	b.n	80035a4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ff53 	bl	8004440 <xQueueSemaphoreTake>
 800359a:	4603      	mov	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <osMutexWait+0x8c>
    return osErrorOS;
 80035a0:	23ff      	movs	r3, #255	; 0xff
 80035a2:	e000      	b.n	80035a6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000ed04 	.word	0xe000ed04

080035b4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80035c4:	f7ff ff07 	bl	80033d6 <inHandlerMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80035ce:	f107 0308 	add.w	r3, r7, #8
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fdc6 	bl	8004166 <xQueueGiveFromISR>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <osMutexRelease+0x30>
      return osErrorOS;
 80035e0:	23ff      	movs	r3, #255	; 0xff
 80035e2:	e017      	b.n	8003614 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <osMutexRelease+0x5e>
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <osMutexRelease+0x68>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	e00a      	b.n	8003612 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80035fc:	2300      	movs	r3, #0
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fc16 	bl	8003e34 <xQueueGenericSend>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800360e:	23ff      	movs	r3, #255	; 0xff
 8003610:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10a      	bne.n	800364e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2203      	movs	r2, #3
 800363e:	9200      	str	r2, [sp, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	2100      	movs	r1, #0
 8003644:	2001      	movs	r0, #1
 8003646:	f000 fad7 	bl	8003bf8 <xQueueGenericCreateStatic>
 800364a:	4603      	mov	r3, r0
 800364c:	e016      	b.n	800367c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	e014      	b.n	800367c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d110      	bne.n	800367a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003658:	2203      	movs	r2, #3
 800365a:	2100      	movs	r1, #0
 800365c:	2001      	movs	r0, #1
 800365e:	f000 fb43 	bl	8003ce8 <xQueueGenericCreate>
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <osSemaphoreCreate+0x56>
 800366a:	2300      	movs	r3, #0
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbdf 	bl	8003e34 <xQueueGenericSend>
      return sema;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e000      	b.n	800367c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800367a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	e03a      	b.n	8003712 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80036a8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e009      	b.n	80036c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80036c4:	f7ff fe87 	bl	80033d6 <inHandlerMode>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	461a      	mov	r2, r3
 80036d4:	2100      	movs	r1, #0
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 ffbe 	bl	8004658 <xQueueReceiveFromISR>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d001      	beq.n	80036e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80036e2:	23ff      	movs	r3, #255	; 0xff
 80036e4:	e015      	b.n	8003712 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d011      	beq.n	8003710 <osSemaphoreWait+0x8c>
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <osSemaphoreWait+0x98>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	e008      	b.n	8003710 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fe9d 	bl	8004440 <xQueueSemaphoreTake>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	e000      	b.n	8003712 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003730:	f7ff fe51 	bl	80033d6 <inHandlerMode>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fd10 	bl	8004166 <xQueueGiveFromISR>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800374c:	23ff      	movs	r3, #255	; 0xff
 800374e:	e017      	b.n	8003780 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <osSemaphoreRelease+0x5e>
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <osSemaphoreRelease+0x68>)
 8003758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	e00a      	b.n	800377e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003768:	2300      	movs	r3, #0
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fb60 	bl	8003e34 <xQueueGenericSend>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800377a:	23ff      	movs	r3, #255	; 0xff
 800377c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003794:	f7ff fe1f 	bl	80033d6 <inHandlerMode>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800379e:	2382      	movs	r3, #130	; 0x82
 80037a0:	e003      	b.n	80037aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 f814 	bl	80047d0 <vQueueDelete>

  return osOK; 
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80037b2:	b590      	push	{r4, r7, lr}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <osMessageCreate+0x36>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2400      	movs	r4, #0
 80037de:	9400      	str	r4, [sp, #0]
 80037e0:	f000 fa0a 	bl	8003bf8 <xQueueGenericCreateStatic>
 80037e4:	4603      	mov	r3, r0
 80037e6:	e008      	b.n	80037fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	4619      	mov	r1, r3
 80037f4:	f000 fa78 	bl	8003ce8 <xQueueGenericCreate>
 80037f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
	...

08003804 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <osMessagePut+0x1e>
    ticks = 1;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003822:	f7ff fdd8 	bl	80033d6 <inHandlerMode>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800382c:	f107 0210 	add.w	r2, r7, #16
 8003830:	f107 0108 	add.w	r1, r7, #8
 8003834:	2300      	movs	r3, #0
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fbfa 	bl	8004030 <xQueueGenericSendFromISR>
 800383c:	4603      	mov	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <osMessagePut+0x42>
      return osErrorOS;
 8003842:	23ff      	movs	r3, #255	; 0xff
 8003844:	e018      	b.n	8003878 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d014      	beq.n	8003876 <osMessagePut+0x72>
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <osMessagePut+0x7c>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	e00b      	b.n	8003876 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800385e:	f107 0108 	add.w	r1, r7, #8
 8003862:	2300      	movs	r3, #0
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fae4 	bl	8003e34 <xQueueGenericSend>
 800386c:	4603      	mov	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	d001      	beq.n	8003876 <osMessagePut+0x72>
      return osErrorOS;
 8003872:	23ff      	movs	r3, #255	; 0xff
 8003874:	e000      	b.n	8003878 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b08b      	sub	sp, #44	; 0x2c
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	617b      	str	r3, [r7, #20]
    return event;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	461c      	mov	r4, r3
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038b2:	e054      	b.n	800395e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d103      	bne.n	80038cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	e009      	b.n	80038e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <osMessageGet+0x5c>
      ticks = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80038e0:	f7ff fd79 	bl	80033d6 <inHandlerMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01c      	beq.n	8003924 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80038ea:	f107 0220 	add.w	r2, r7, #32
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	68b8      	ldr	r0, [r7, #8]
 80038f8:	f000 feae 	bl	8004658 <xQueueReceiveFromISR>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003902:	2310      	movs	r3, #16
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e001      	b.n	800390c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01d      	beq.n	800394e <osMessageGet+0xca>
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <osMessageGet+0xe4>)
 8003914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	e014      	b.n	800394e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	3304      	adds	r3, #4
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	4619      	mov	r1, r3
 800392e:	68b8      	ldr	r0, [r7, #8]
 8003930:	f000 fca6 	bl	8004280 <xQueueReceive>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800393a:	2310      	movs	r3, #16
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e006      	b.n	800394e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <osMessageGet+0xc6>
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <osMessageGet+0xc8>
 800394a:	2340      	movs	r3, #64	; 0x40
 800394c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	461c      	mov	r4, r3
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800395a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	372c      	adds	r7, #44	; 0x2c
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003974:	f7ff fd2f 	bl	80033d6 <inHandlerMode>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 ff08 	bl	8004794 <uxQueueMessagesWaitingFromISR>
 8003984:	4603      	mov	r3, r0
 8003986:	e003      	b.n	8003990 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fee5 	bl	8004758 <uxQueueMessagesWaiting>
 800398e:	4603      	mov	r3, r0
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80039a0:	f7ff fd19 	bl	80033d6 <inHandlerMode>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <osMessageDelete+0x16>
    return osErrorISR;
 80039aa:	2382      	movs	r3, #130	; 0x82
 80039ac:	e003      	b.n	80039b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 ff0e 	bl	80047d0 <vQueueDelete>

  return osOK; 
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f103 0208 	add.w	r2, r3, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0208 	add.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f103 0208 	add.w	r2, r3, #8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d103      	bne.n	8003a80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	e00c      	b.n	8003a9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3308      	adds	r3, #8
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e002      	b.n	8003a8e <vListInsert+0x2e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d2f6      	bcs.n	8003a88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6852      	ldr	r2, [r2, #4]
 8003af2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d103      	bne.n	8003b06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b52:	f002 f8e7 	bl	8005d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	3b01      	subs	r3, #1
 8003b84:	68f9      	ldr	r1, [r7, #12]
 8003b86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d114      	bne.n	8003bd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01a      	beq.n	8003be6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fbad 	bl	8005314 <xTaskRemoveFromEventList>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d012      	beq.n	8003be6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <xQueueGenericReset+0xcc>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	e009      	b.n	8003be6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fef1 	bl	80039be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3324      	adds	r3, #36	; 0x24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff feec 	bl	80039be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003be6:	f002 f8cd 	bl	8005d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	; 0x38
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <xQueueGenericCreateStatic+0x52>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <xQueueGenericCreateStatic+0x56>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueGenericCreateStatic+0x58>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	623b      	str	r3, [r7, #32]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <xQueueGenericCreateStatic+0x7e>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericCreateStatic+0x82>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericCreateStatic+0x84>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	61fb      	str	r3, [r7, #28]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c96:	2348      	movs	r3, #72	; 0x48
 8003c98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b48      	cmp	r3, #72	; 0x48
 8003c9e:	d00a      	beq.n	8003cb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f83f 	bl	8003d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3730      	adds	r7, #48	; 0x30
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	613b      	str	r3, [r7, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3348      	adds	r3, #72	; 0x48
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 f921 	bl	8005f68 <pvPortMalloc>
 8003d26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3348      	adds	r3, #72	; 0x48
 8003d36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d40:	79fa      	ldrb	r2, [r7, #7]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f805 	bl	8003d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d52:	69bb      	ldr	r3, [r7, #24]
	}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e002      	b.n	8003d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	69b8      	ldr	r0, [r7, #24]
 8003d8e:	f7ff fecb 	bl	8003b28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f837 	bl	8003e34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6939      	ldr	r1, [r7, #16]
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f7ff ff7e 	bl	8003ce8 <xQueueGenericCreate>
 8003dec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff ffd3 	bl	8003d9a <prvInitialiseMutex>

		return xNewQueue;
 8003df4:	68fb      	ldr	r3, [r7, #12]
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	4603      	mov	r3, r0
 8003e06:	6039      	str	r1, [r7, #0]
 8003e08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f7ff feeb 	bl	8003bf8 <xQueueGenericCreateStatic>
 8003e22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff ffb8 	bl	8003d9a <prvInitialiseMutex>

		return xNewQueue;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
	}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08e      	sub	sp, #56	; 0x38
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <xQueueGenericSend+0x32>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <xQueueGenericSend+0x40>
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <xQueueGenericSend+0x44>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <xQueueGenericSend+0x46>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xQueueGenericSend+0x60>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d103      	bne.n	8003ea2 <xQueueGenericSend+0x6e>
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <xQueueGenericSend+0x72>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueGenericSend+0x74>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	623b      	str	r3, [r7, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec2:	f001 fbe3 	bl	800568c <xTaskGetSchedulerState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xQueueGenericSend+0x9e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericSend+0xa2>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericSend+0xa4>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61fb      	str	r3, [r7, #28]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef2:	f001 ff17 	bl	8005d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <xQueueGenericSend+0xd4>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d129      	bne.n	8003f5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0e:	f000 fc9a 	bl	8004846 <prvCopyDataToQueue>
 8003f12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 f9f7 	bl	8005314 <xTaskRemoveFromEventList>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	; (800402c <xQueueGenericSend+0x1f8>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	e00a      	b.n	8003f54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <xQueueGenericSend+0x1f8>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f54:	f001 ff16 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e063      	b.n	8004024 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f62:	f001 ff0f 	bl	8005d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e05c      	b.n	8004024 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f70:	f107 0314 	add.w	r3, r7, #20
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 fa2f 	bl	80053d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f7e:	f001 ff01 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f82:	f000 ffc3 	bl	8004f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f86:	f001 fecd 	bl	8005d24 <vPortEnterCritical>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d103      	bne.n	8003fa0 <xQueueGenericSend+0x16c>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSend+0x182>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb6:	f001 fee5 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fba:	1d3a      	adds	r2, r7, #4
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fa1e 	bl	8005404 <xTaskCheckForTimeOut>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d124      	bne.n	8004018 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd0:	f000 fd31 	bl	8004a36 <prvIsQueueFull>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	3310      	adds	r3, #16
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 f972 	bl	80052cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fea:	f000 fcbc 	bl	8004966 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fee:	f000 ff9b 	bl	8004f28 <xTaskResumeAll>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f af7c 	bne.w	8003ef2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <xQueueGenericSend+0x1f8>)
 8003ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	e772      	b.n	8003ef2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800400c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400e:	f000 fcaa 	bl	8004966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004012:	f000 ff89 	bl	8004f28 <xTaskResumeAll>
 8004016:	e76c      	b.n	8003ef2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401a:	f000 fca4 	bl	8004966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800401e:	f000 ff83 	bl	8004f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b090      	sub	sp, #64	; 0x40
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <xQueueGenericSendFromISR+0x3c>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <xQueueGenericSendFromISR+0x40>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <xQueueGenericSendFromISR+0x42>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d103      	bne.n	800409a <xQueueGenericSendFromISR+0x6a>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <xQueueGenericSendFromISR+0x6e>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xQueueGenericSendFromISR+0x70>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	623b      	str	r3, [r7, #32]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040ba:	f001 ff15 	bl	8005ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040be:	f3ef 8211 	mrs	r2, BASEPRI
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	61fa      	str	r2, [r7, #28]
 80040d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <xQueueGenericSendFromISR+0xbc>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d12f      	bne.n	800414c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004102:	f000 fba0 	bl	8004846 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004106:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d112      	bne.n	8004136 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d016      	beq.n	8004146 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	4618      	mov	r0, r3
 800411e:	f001 f8f9 	bl	8005314 <xTaskRemoveFromEventList>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e007      	b.n	8004146 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004136:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800413a:	3301      	adds	r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b25a      	sxtb	r2, r3
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004146:	2301      	movs	r3, #1
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800414a:	e001      	b.n	8004150 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800415a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800415c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800415e:	4618      	mov	r0, r3
 8004160:	3740      	adds	r7, #64	; 0x40
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08e      	sub	sp, #56	; 0x38
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	623b      	str	r3, [r7, #32]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61fb      	str	r3, [r7, #28]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <xQueueGiveFromISR+0x58>
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueGiveFromISR+0x5c>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueGiveFromISR+0x5e>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xQueueGiveFromISR+0x78>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61bb      	str	r3, [r7, #24]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041de:	f001 fe83 	bl	8005ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80041e2:	f3ef 8211 	mrs	r2, BASEPRI
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	617a      	str	r2, [r7, #20]
 80041f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80041fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420a:	429a      	cmp	r2, r3
 800420c:	d22b      	bcs.n	8004266 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d112      	bne.n	8004250 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f86c 	bl	8005314 <xTaskRemoveFromEventList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00e      	beq.n	8004260 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e007      	b.n	8004260 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004254:	3301      	adds	r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	b25a      	sxtb	r2, r3
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004260:	2301      	movs	r3, #1
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
 8004264:	e001      	b.n	800426a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f383 8811 	msr	BASEPRI, r3
}
 8004274:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004278:	4618      	mov	r0, r3
 800427a:	3738      	adds	r7, #56	; 0x38
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08c      	sub	sp, #48	; 0x30
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <xQueueReceive+0x30>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	623b      	str	r3, [r7, #32]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <xQueueReceive+0x3e>
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xQueueReceive+0x42>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <xQueueReceive+0x44>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <xQueueReceive+0x5e>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61fb      	str	r3, [r7, #28]
}
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042de:	f001 f9d5 	bl	800568c <xTaskGetSchedulerState>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <xQueueReceive+0x6e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <xQueueReceive+0x72>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <xQueueReceive+0x74>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueReceive+0x8e>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	61bb      	str	r3, [r7, #24]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800430e:	f001 fd09 	bl	8005d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01f      	beq.n	800435e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004322:	f000 fafa 	bl	800491a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00f      	beq.n	8004356 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	3310      	adds	r3, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ffea 	bl	8005314 <xTaskRemoveFromEventList>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <xQueueReceive+0x1bc>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004356:	f001 fd15 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 800435a:	2301      	movs	r3, #1
 800435c:	e069      	b.n	8004432 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004364:	f001 fd0e 	bl	8005d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004368:	2300      	movs	r3, #0
 800436a:	e062      	b.n	8004432 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f82e 	bl	80053d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004380:	f001 fd00 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004384:	f000 fdc2 	bl	8004f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004388:	f001 fccc 	bl	8005d24 <vPortEnterCritical>
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004392:	b25b      	sxtb	r3, r3
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d103      	bne.n	80043a2 <xQueueReceive+0x122>
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d103      	bne.n	80043b8 <xQueueReceive+0x138>
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b8:	f001 fce4 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043bc:	1d3a      	adds	r2, r7, #4
 80043be:	f107 0310 	add.w	r3, r7, #16
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 f81d 	bl	8005404 <xTaskCheckForTimeOut>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d123      	bne.n	8004418 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d2:	f000 fb1a 	bl	8004a0a <prvIsQueueEmpty>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d017      	beq.n	800440c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	3324      	adds	r3, #36	; 0x24
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ff71 	bl	80052cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ec:	f000 fabb 	bl	8004966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043f0:	f000 fd9a 	bl	8004f28 <xTaskResumeAll>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d189      	bne.n	800430e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <xQueueReceive+0x1bc>)
 80043fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	e780      	b.n	800430e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800440c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440e:	f000 faaa 	bl	8004966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004412:	f000 fd89 	bl	8004f28 <xTaskResumeAll>
 8004416:	e77a      	b.n	800430e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441a:	f000 faa4 	bl	8004966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800441e:	f000 fd83 	bl	8004f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004424:	f000 faf1 	bl	8004a0a <prvIsQueueEmpty>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	f43f af6f 	beq.w	800430e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004432:	4618      	mov	r0, r3
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	623b      	str	r3, [r7, #32]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	61fb      	str	r3, [r7, #28]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004490:	f001 f8fc 	bl	800568c <xTaskGetSchedulerState>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xQueueSemaphoreTake+0x60>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <xQueueSemaphoreTake+0x64>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <xQueueSemaphoreTake+0x66>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61bb      	str	r3, [r7, #24]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044c0:	f001 fc30 	bl	8005d24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d024      	beq.n	800451a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80044e0:	f001 fa7c 	bl	80059dc <pvTaskIncrementMutexHeldCount>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00f      	beq.n	8004512 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	3310      	adds	r3, #16
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ff0c 	bl	8005314 <xTaskRemoveFromEventList>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004502:	4b54      	ldr	r3, [pc, #336]	; (8004654 <xQueueSemaphoreTake+0x214>)
 8004504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004512:	f001 fc37 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8004516:	2301      	movs	r3, #1
 8004518:	e097      	b.n	800464a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	617b      	str	r3, [r7, #20]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800453c:	f001 fc22 	bl	8005d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004540:	2300      	movs	r3, #0
 8004542:	e082      	b.n	800464a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800454a:	f107 030c 	add.w	r3, r7, #12
 800454e:	4618      	mov	r0, r3
 8004550:	f000 ff42 	bl	80053d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004558:	f001 fc14 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800455c:	f000 fcd6 	bl	8004f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004560:	f001 fbe0 	bl	8005d24 <vPortEnterCritical>
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456a:	b25b      	sxtb	r3, r3
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d103      	bne.n	800457a <xQueueSemaphoreTake+0x13a>
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d103      	bne.n	8004590 <xQueueSemaphoreTake+0x150>
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004590:	f001 fbf8 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004594:	463a      	mov	r2, r7
 8004596:	f107 030c 	add.w	r3, r7, #12
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 ff31 	bl	8005404 <xTaskCheckForTimeOut>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d132      	bne.n	800460e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045aa:	f000 fa2e 	bl	8004a0a <prvIsQueueEmpty>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d026      	beq.n	8004602 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80045bc:	f001 fbb2 	bl	8005d24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f87f 	bl	80056c8 <xTaskPriorityInherit>
 80045ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80045cc:	f001 fbda 	bl	8005d84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fe77 	bl	80052cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045e0:	f000 f9c1 	bl	8004966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045e4:	f000 fca0 	bl	8004f28 <xTaskResumeAll>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f47f af68 	bne.w	80044c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80045f0:	4b18      	ldr	r3, [pc, #96]	; (8004654 <xQueueSemaphoreTake+0x214>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	e75e      	b.n	80044c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004604:	f000 f9af 	bl	8004966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004608:	f000 fc8e 	bl	8004f28 <xTaskResumeAll>
 800460c:	e758      	b.n	80044c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800460e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004610:	f000 f9a9 	bl	8004966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004614:	f000 fc88 	bl	8004f28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800461a:	f000 f9f6 	bl	8004a0a <prvIsQueueEmpty>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	f43f af4d 	beq.w	80044c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800462c:	f001 fb7a 	bl	8005d24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004632:	f000 f8f0 	bl	8004816 <prvGetDisinheritPriorityAfterTimeout>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f93e 	bl	80058c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004644:	f001 fb9e 	bl	8005d84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800464a:	4618      	mov	r0, r3
 800464c:	3738      	adds	r7, #56	; 0x38
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	623b      	str	r3, [r7, #32]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueReceiveFromISR+0x3a>
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueReceiveFromISR+0x3e>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueReceiveFromISR+0x40>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	61fb      	str	r3, [r7, #28]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046b2:	f001 fc19 	bl	8005ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80046b6:	f3ef 8211 	mrs	r2, BASEPRI
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	61ba      	str	r2, [r7, #24]
 80046cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02f      	beq.n	800473e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ec:	f000 f915 	bl	800491a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d112      	bne.n	8004728 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	3310      	adds	r3, #16
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fe00 	bl	8005314 <xTaskRemoveFromEventList>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800472c:	3301      	adds	r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	b25a      	sxtb	r2, r3
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004738:	2301      	movs	r3, #1
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
 800473c:	e001      	b.n	8004742 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f383 8811 	msr	BASEPRI, r3
}
 800474c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004750:	4618      	mov	r0, r3
 8004752:	3738      	adds	r7, #56	; 0x38
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800477c:	f001 fad2 	bl	8005d24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004786:	f001 fafd 	bl	8005d84 <vPortExitCritical>

	return uxReturn;
 800478a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60fb      	str	r3, [r7, #12]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80047c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047c4:	4618      	mov	r0, r3
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <vQueueDelete+0x28>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60bb      	str	r3, [r7, #8]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f935 	bl	8004a68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f001 fc79 	bl	8006100 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1c3 0307 	rsb	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e001      	b.n	8004838 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004838:	68fb      	ldr	r3, [r7, #12]
	}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10d      	bne.n	8004880 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d14d      	bne.n	8004908 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 ff9f 	bl	80057b4 <xTaskPriorityDisinherit>
 8004876:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	e043      	b.n	8004908 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d119      	bne.n	80048ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6858      	ldr	r0, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	461a      	mov	r2, r3
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	f00f fddf 	bl	8014454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d32b      	bcc.n	8004908 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	e026      	b.n	8004908 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68d8      	ldr	r0, [r3, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	461a      	mov	r2, r3
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	f00f fdc5 	bl	8014454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	425b      	negs	r3, r3
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d207      	bcs.n	80048f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	425b      	negs	r3, r3
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d105      	bne.n	8004908 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	3b01      	subs	r3, #1
 8004906:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d018      	beq.n	800495e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d303      	bcc.n	800494e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68d9      	ldr	r1, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	461a      	mov	r2, r3
 8004958:	6838      	ldr	r0, [r7, #0]
 800495a:	f00f fd7b 	bl	8014454 <memcpy>
	}
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800496e:	f001 f9d9 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004978:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800497a:	e011      	b.n	80049a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fcc3 	bl	8005314 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004994:	f000 fd98 	bl	80054c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	3b01      	subs	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dce9      	bgt.n	800497c <prvUnlockQueue+0x16>
 80049a8:	e000      	b.n	80049ac <prvUnlockQueue+0x46>
					break;
 80049aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049b4:	f001 f9e6 	bl	8005d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049b8:	f001 f9b4 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049c4:	e011      	b.n	80049ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d012      	beq.n	80049f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fc9e 	bl	8005314 <xTaskRemoveFromEventList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049de:	f000 fd73 	bl	80054c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dce9      	bgt.n	80049c6 <prvUnlockQueue+0x60>
 80049f2:	e000      	b.n	80049f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049fe:	f001 f9c1 	bl	8005d84 <vPortExitCritical>
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a12:	f001 f987 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e001      	b.n	8004a28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a28:	f001 f9ac 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a3e:	f001 f971 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d102      	bne.n	8004a54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e001      	b.n	8004a58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a58:	f001 f994 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e016      	b.n	8004aa4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <vQueueUnregisterQueue+0x50>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10b      	bne.n	8004a9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <vQueueUnregisterQueue+0x50>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <vQueueUnregisterQueue+0x50>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]
				break;
 8004a9c:	e006      	b.n	8004aac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b07      	cmp	r3, #7
 8004aa8:	d9e5      	bls.n	8004a76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20004f4c 	.word	0x20004f4c

08004abc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08e      	sub	sp, #56	; 0x38
 8004ac0:	af04      	add	r7, sp, #16
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xTaskCreateStatic+0x46>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61fb      	str	r3, [r7, #28]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b02:	2354      	movs	r3, #84	; 0x54
 8004b04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b54      	cmp	r3, #84	; 0x54
 8004b0a:	d00a      	beq.n	8004b22 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61bb      	str	r3, [r7, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01e      	beq.n	8004b68 <xTaskCreateStatic+0xac>
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b42:	2300      	movs	r3, #0
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f850 	bl	8004c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b62:	f000 f8d5 	bl	8004d10 <prvAddNewTaskToReadyList>
 8004b66:	e001      	b.n	8004b6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b6c:	697b      	ldr	r3, [r7, #20]
	}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3728      	adds	r7, #40	; 0x28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08c      	sub	sp, #48	; 0x30
 8004b7a:	af04      	add	r7, sp, #16
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f9ec 	bl	8005f68 <pvPortMalloc>
 8004b90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b98:	2054      	movs	r0, #84	; 0x54
 8004b9a:	f001 f9e5 	bl	8005f68 <pvPortMalloc>
 8004b9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
 8004bac:	e005      	b.n	8004bba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bae:	6978      	ldr	r0, [r7, #20]
 8004bb0:	f001 faa6 	bl	8006100 <vPortFree>
 8004bb4:	e001      	b.n	8004bba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9303      	str	r3, [sp, #12]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f80e 	bl	8004c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be4:	69f8      	ldr	r0, [r7, #28]
 8004be6:	f000 f893 	bl	8004d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e002      	b.n	8004bf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	617b      	str	r3, [r7, #20]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01f      	beq.n	8004c8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e012      	b.n	8004c7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	7819      	ldrb	r1, [r3, #0]
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	3334      	adds	r3, #52	; 0x34
 8004c64:	460a      	mov	r2, r1
 8004c66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d9e9      	bls.n	8004c54 <prvInitialiseNewTask+0x54>
 8004c80:	e000      	b.n	8004c84 <prvInitialiseNewTask+0x84>
			{
				break;
 8004c82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8c:	e003      	b.n	8004c96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d901      	bls.n	8004ca0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fea1 	bl	80039fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fe9c 	bl	80039fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f1c3 0207 	rsb	r2, r3, #7
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	69b8      	ldr	r0, [r7, #24]
 8004cf0:	f000 feee 	bl	8005ad0 <pxPortInitialiseStack>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d06:	bf00      	nop
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d18:	f001 f804 	bl	8005d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <prvAddNewTaskToReadyList+0xb8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3301      	adds	r3, #1
 8004d22:	4a29      	ldr	r2, [pc, #164]	; (8004dc8 <prvAddNewTaskToReadyList+0xb8>)
 8004d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d26:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <prvAddNewTaskToReadyList+0xbc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d2e:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <prvAddNewTaskToReadyList+0xbc>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <prvAddNewTaskToReadyList+0xb8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d110      	bne.n	8004d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d3c:	f000 fbe8 	bl	8005510 <prvInitialiseTaskLists>
 8004d40:	e00d      	b.n	8004d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d42:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <prvAddNewTaskToReadyList+0xc0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <prvAddNewTaskToReadyList+0xbc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d802      	bhi.n	8004d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d58:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <prvAddNewTaskToReadyList+0xbc>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <prvAddNewTaskToReadyList+0xc4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <prvAddNewTaskToReadyList+0xc4>)
 8004d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <prvAddNewTaskToReadyList+0xc8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <prvAddNewTaskToReadyList+0xc8>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <prvAddNewTaskToReadyList+0xcc>)
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe fe41 	bl	8003a18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d96:	f000 fff5 	bl	8005d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <prvAddNewTaskToReadyList+0xc0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00e      	beq.n	8004dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <prvAddNewTaskToReadyList+0xbc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d207      	bcs.n	8004dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <prvAddNewTaskToReadyList+0xd0>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000508c 	.word	0x2000508c
 8004dcc:	20004f8c 	.word	0x20004f8c
 8004dd0:	20005098 	.word	0x20005098
 8004dd4:	200050a8 	.word	0x200050a8
 8004dd8:	20005094 	.word	0x20005094
 8004ddc:	20004f90 	.word	0x20004f90
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d017      	beq.n	8004e26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <vTaskDelay+0x60>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <vTaskDelay+0x30>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60bb      	str	r3, [r7, #8]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e14:	f000 f87a 	bl	8004f0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fdf2 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e20:	f000 f882 	bl	8004f28 <xTaskResumeAll>
 8004e24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <vTaskDelay+0x64>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200050b4 	.word	0x200050b4
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e5a:	463a      	mov	r2, r7
 8004e5c:	1d39      	adds	r1, r7, #4
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb8e 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	9202      	str	r2, [sp, #8]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	460a      	mov	r2, r1
 8004e7a:	491e      	ldr	r1, [pc, #120]	; (8004ef4 <vTaskStartScheduler+0xa8>)
 8004e7c:	481e      	ldr	r0, [pc, #120]	; (8004ef8 <vTaskStartScheduler+0xac>)
 8004e7e:	f7ff fe1d 	bl	8004abc <xTaskCreateStatic>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <vTaskStartScheduler+0xb0>)
 8004e86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e88:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <vTaskStartScheduler+0xb0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e001      	b.n	8004e9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d116      	bne.n	8004ece <vTaskStartScheduler+0x82>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <vTaskStartScheduler+0xb4>)
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <vTaskStartScheduler+0xb8>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <vTaskStartScheduler+0xbc>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ec8:	f000 fe8a 	bl	8005be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ecc:	e00e      	b.n	8004eec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d10a      	bne.n	8004eec <vTaskStartScheduler+0xa0>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vTaskStartScheduler+0x9e>
}
 8004eec:	bf00      	nop
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	08015624 	.word	0x08015624
 8004ef8:	080054e1 	.word	0x080054e1
 8004efc:	200050b0 	.word	0x200050b0
 8004f00:	200050ac 	.word	0x200050ac
 8004f04:	20005098 	.word	0x20005098
 8004f08:	20005090 	.word	0x20005090

08004f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <vTaskSuspendAll+0x18>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <vTaskSuspendAll+0x18>)
 8004f18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f1a:	bf00      	nop
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	200050b4 	.word	0x200050b4

08004f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f36:	4b41      	ldr	r3, [pc, #260]	; (800503c <xTaskResumeAll+0x114>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	603b      	str	r3, [r7, #0]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f54:	f000 fee6 	bl	8005d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f58:	4b38      	ldr	r3, [pc, #224]	; (800503c <xTaskResumeAll+0x114>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a37      	ldr	r2, [pc, #220]	; (800503c <xTaskResumeAll+0x114>)
 8004f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <xTaskResumeAll+0x114>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d161      	bne.n	800502e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f6a:	4b35      	ldr	r3, [pc, #212]	; (8005040 <xTaskResumeAll+0x118>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d05d      	beq.n	800502e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f72:	e02e      	b.n	8004fd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f74:	4b33      	ldr	r3, [pc, #204]	; (8005044 <xTaskResumeAll+0x11c>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3318      	adds	r3, #24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe fda6 	bl	8003ad2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fda1 	bl	8003ad2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <xTaskResumeAll+0x120>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <xTaskResumeAll+0x120>)
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4a27      	ldr	r2, [pc, #156]	; (800504c <xTaskResumeAll+0x124>)
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fe fd2d 	bl	8003a18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	4b23      	ldr	r3, [pc, #140]	; (8005050 <xTaskResumeAll+0x128>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <xTaskResumeAll+0x12c>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <xTaskResumeAll+0x11c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1cc      	bne.n	8004f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fe0:	f000 fb34 	bl	800564c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <xTaskResumeAll+0x130>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ff0:	f000 f858 	bl	80050a4 <xTaskIncrementTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <xTaskResumeAll+0x12c>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f1      	bne.n	8004ff0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <xTaskResumeAll+0x130>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <xTaskResumeAll+0x12c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <xTaskResumeAll+0x134>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f000 fea9 	bl	8005d84 <vPortExitCritical>

	return xAlreadyYielded;
 8005032:	68bb      	ldr	r3, [r7, #8]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200050b4 	.word	0x200050b4
 8005040:	2000508c 	.word	0x2000508c
 8005044:	2000504c 	.word	0x2000504c
 8005048:	20005094 	.word	0x20005094
 800504c:	20004f90 	.word	0x20004f90
 8005050:	20004f8c 	.word	0x20004f8c
 8005054:	200050a0 	.word	0x200050a0
 8005058:	2000509c 	.word	0x2000509c
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <xTaskGetTickCount+0x1c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800506c:	687b      	ldr	r3, [r7, #4]
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20005090 	.word	0x20005090

08005080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005086:	f000 ff2f 	bl	8005ee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <xTaskGetTickCountFromISR+0x20>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005094:	683b      	ldr	r3, [r7, #0]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20005090 	.word	0x20005090

080050a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ae:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <xTaskIncrementTick+0x144>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 808e 	bne.w	80051d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <xTaskIncrementTick+0x148>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050c0:	4a4a      	ldr	r2, [pc, #296]	; (80051ec <xTaskIncrementTick+0x148>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d120      	bne.n	800510e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050cc:	4b48      	ldr	r3, [pc, #288]	; (80051f0 <xTaskIncrementTick+0x14c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <xTaskIncrementTick+0x48>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	603b      	str	r3, [r7, #0]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xTaskIncrementTick+0x46>
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <xTaskIncrementTick+0x14c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <xTaskIncrementTick+0x150>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <xTaskIncrementTick+0x14c>)
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <xTaskIncrementTick+0x150>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <xTaskIncrementTick+0x154>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <xTaskIncrementTick+0x154>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	f000 fa9f 	bl	800564c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <xTaskIncrementTick+0x158>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	429a      	cmp	r2, r3
 8005116:	d348      	bcc.n	80051aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005118:	4b35      	ldr	r3, [pc, #212]	; (80051f0 <xTaskIncrementTick+0x14c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	4b36      	ldr	r3, [pc, #216]	; (80051fc <xTaskIncrementTick+0x158>)
 8005124:	f04f 32ff 	mov.w	r2, #4294967295
 8005128:	601a      	str	r2, [r3, #0]
					break;
 800512a:	e03e      	b.n	80051aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512c:	4b30      	ldr	r3, [pc, #192]	; (80051f0 <xTaskIncrementTick+0x14c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d203      	bcs.n	800514c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <xTaskIncrementTick+0x158>)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800514a:	e02e      	b.n	80051aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3304      	adds	r3, #4
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe fcbe 	bl	8003ad2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3318      	adds	r3, #24
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fcb5 	bl	8003ad2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	4b23      	ldr	r3, [pc, #140]	; (8005200 <xTaskIncrementTick+0x15c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <xTaskIncrementTick+0x15c>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <xTaskIncrementTick+0x160>)
 8005188:	441a      	add	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7fe fc41 	bl	8003a18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <xTaskIncrementTick+0x164>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3b9      	bcc.n	8005118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a8:	e7b6      	b.n	8005118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051aa:	4b17      	ldr	r3, [pc, #92]	; (8005208 <xTaskIncrementTick+0x164>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	4914      	ldr	r1, [pc, #80]	; (8005204 <xTaskIncrementTick+0x160>)
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d901      	bls.n	80051c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <xTaskIncrementTick+0x168>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e004      	b.n	80051de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <xTaskIncrementTick+0x16c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <xTaskIncrementTick+0x16c>)
 80051dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200050b4 	.word	0x200050b4
 80051ec:	20005090 	.word	0x20005090
 80051f0:	20005044 	.word	0x20005044
 80051f4:	20005048 	.word	0x20005048
 80051f8:	200050a4 	.word	0x200050a4
 80051fc:	200050ac 	.word	0x200050ac
 8005200:	20005094 	.word	0x20005094
 8005204:	20004f90 	.word	0x20004f90
 8005208:	20004f8c 	.word	0x20004f8c
 800520c:	200050a0 	.word	0x200050a0
 8005210:	2000509c 	.word	0x2000509c

08005214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <vTaskSwitchContext+0xa4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005222:	4b26      	ldr	r3, [pc, #152]	; (80052bc <vTaskSwitchContext+0xa8>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005228:	e03f      	b.n	80052aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <vTaskSwitchContext+0xa8>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005230:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <vTaskSwitchContext+0xac>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	f1c3 031f 	rsb	r3, r3, #31
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	491f      	ldr	r1, [pc, #124]	; (80052c4 <vTaskSwitchContext+0xb0>)
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <vTaskSwitchContext+0x5c>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vTaskSwitchContext+0x5a>
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <vTaskSwitchContext+0xb0>)
 800527c:	4413      	add	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3308      	adds	r3, #8
 8005292:	429a      	cmp	r2, r3
 8005294:	d104      	bne.n	80052a0 <vTaskSwitchContext+0x8c>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <vTaskSwitchContext+0xb4>)
 80052a8:	6013      	str	r3, [r2, #0]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	200050b4 	.word	0x200050b4
 80052bc:	200050a0 	.word	0x200050a0
 80052c0:	20005094 	.word	0x20005094
 80052c4:	20004f90 	.word	0x20004f90
 80052c8:	20004f8c 	.word	0x20004f8c

080052cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <vTaskPlaceOnEventList+0x44>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3318      	adds	r3, #24
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fbb0 	bl	8003a60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005300:	2101      	movs	r1, #1
 8005302:	6838      	ldr	r0, [r7, #0]
 8005304:	f000 fb7e 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20004f8c 	.word	0x20004f8c

08005314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60fb      	str	r3, [r7, #12]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	3318      	adds	r3, #24
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fbc4 	bl	8003ad2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <xTaskRemoveFromEventList+0xac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d11c      	bne.n	800538c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3304      	adds	r3, #4
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe fbbb 	bl	8003ad2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	2201      	movs	r2, #1
 8005362:	409a      	lsls	r2, r3
 8005364:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <xTaskRemoveFromEventList+0xb0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4313      	orrs	r3, r2
 800536a:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <xTaskRemoveFromEventList+0xb0>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <xTaskRemoveFromEventList+0xb4>)
 800537c:	441a      	add	r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7fe fb47 	bl	8003a18 <vListInsertEnd>
 800538a:	e005      	b.n	8005398 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3318      	adds	r3, #24
 8005390:	4619      	mov	r1, r3
 8005392:	480e      	ldr	r0, [pc, #56]	; (80053cc <xTaskRemoveFromEventList+0xb8>)
 8005394:	f7fe fb40 	bl	8003a18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <xTaskRemoveFromEventList+0xbc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d905      	bls.n	80053b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053a6:	2301      	movs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <xTaskRemoveFromEventList+0xc0>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e001      	b.n	80053b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	200050b4 	.word	0x200050b4
 80053c4:	20005094 	.word	0x20005094
 80053c8:	20004f90 	.word	0x20004f90
 80053cc:	2000504c 	.word	0x2000504c
 80053d0:	20004f8c 	.word	0x20004f8c
 80053d4:	200050a0 	.word	0x200050a0

080053d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <vTaskInternalSetTimeOutState+0x24>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <vTaskInternalSetTimeOutState+0x28>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	200050a4 	.word	0x200050a4
 8005400:	20005090 	.word	0x20005090

08005404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	613b      	str	r3, [r7, #16]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005446:	f000 fc6d 	bl	8005d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <xTaskCheckForTimeOut+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d102      	bne.n	800546a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e023      	b.n	80054b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <xTaskCheckForTimeOut+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d007      	beq.n	8005486 <xTaskCheckForTimeOut+0x82>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	e015      	b.n	80054b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	d20b      	bcs.n	80054a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff9b 	bl	80053d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e004      	b.n	80054b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054b2:	f000 fc67 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 80054b6:	69fb      	ldr	r3, [r7, #28]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20005090 	.word	0x20005090
 80054c4:	200050a4 	.word	0x200050a4

080054c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <vTaskMissedYield+0x14>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	200050a0 	.word	0x200050a0

080054e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054e8:	f000 f852 	bl	8005590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <prvIdleTask+0x28>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d9f9      	bls.n	80054e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <prvIdleTask+0x2c>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005504:	e7f0      	b.n	80054e8 <prvIdleTask+0x8>
 8005506:	bf00      	nop
 8005508:	20004f90 	.word	0x20004f90
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	e00c      	b.n	8005536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a12      	ldr	r2, [pc, #72]	; (8005570 <prvInitialiseTaskLists+0x60>)
 8005528:	4413      	add	r3, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fa47 	bl	80039be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3301      	adds	r3, #1
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b06      	cmp	r3, #6
 800553a:	d9ef      	bls.n	800551c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800553c:	480d      	ldr	r0, [pc, #52]	; (8005574 <prvInitialiseTaskLists+0x64>)
 800553e:	f7fe fa3e 	bl	80039be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005542:	480d      	ldr	r0, [pc, #52]	; (8005578 <prvInitialiseTaskLists+0x68>)
 8005544:	f7fe fa3b 	bl	80039be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005548:	480c      	ldr	r0, [pc, #48]	; (800557c <prvInitialiseTaskLists+0x6c>)
 800554a:	f7fe fa38 	bl	80039be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800554e:	480c      	ldr	r0, [pc, #48]	; (8005580 <prvInitialiseTaskLists+0x70>)
 8005550:	f7fe fa35 	bl	80039be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005554:	480b      	ldr	r0, [pc, #44]	; (8005584 <prvInitialiseTaskLists+0x74>)
 8005556:	f7fe fa32 	bl	80039be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <prvInitialiseTaskLists+0x78>)
 800555c:	4a05      	ldr	r2, [pc, #20]	; (8005574 <prvInitialiseTaskLists+0x64>)
 800555e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <prvInitialiseTaskLists+0x7c>)
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <prvInitialiseTaskLists+0x68>)
 8005564:	601a      	str	r2, [r3, #0]
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20004f90 	.word	0x20004f90
 8005574:	2000501c 	.word	0x2000501c
 8005578:	20005030 	.word	0x20005030
 800557c:	2000504c 	.word	0x2000504c
 8005580:	20005060 	.word	0x20005060
 8005584:	20005078 	.word	0x20005078
 8005588:	20005044 	.word	0x20005044
 800558c:	20005048 	.word	0x20005048

08005590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005596:	e019      	b.n	80055cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005598:	f000 fbc4 	bl	8005d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <prvCheckTasksWaitingTermination+0x50>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe fa92 	bl	8003ad2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <prvCheckTasksWaitingTermination+0x54>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <prvCheckTasksWaitingTermination+0x54>)
 80055b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <prvCheckTasksWaitingTermination+0x58>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a0a      	ldr	r2, [pc, #40]	; (80055e8 <prvCheckTasksWaitingTermination+0x58>)
 80055c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055c2:	f000 fbdf 	bl	8005d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f810 	bl	80055ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <prvCheckTasksWaitingTermination+0x58>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e1      	bne.n	8005598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20005060 	.word	0x20005060
 80055e4:	2000508c 	.word	0x2000508c
 80055e8:	20005074 	.word	0x20005074

080055ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fd7c 	bl	8006100 <vPortFree>
				vPortFree( pxTCB );
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd79 	bl	8006100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800560e:	e018      	b.n	8005642 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005616:	2b01      	cmp	r3, #1
 8005618:	d103      	bne.n	8005622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fd70 	bl	8006100 <vPortFree>
	}
 8005620:	e00f      	b.n	8005642 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	2b02      	cmp	r3, #2
 800562a:	d00a      	beq.n	8005642 <prvDeleteTCB+0x56>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	60fb      	str	r3, [r7, #12]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <prvDeleteTCB+0x54>
	}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <prvResetNextTaskUnblockTime+0x38>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvResetNextTaskUnblockTime+0x3c>)
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005664:	e008      	b.n	8005678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <prvResetNextTaskUnblockTime+0x38>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a04      	ldr	r2, [pc, #16]	; (8005688 <prvResetNextTaskUnblockTime+0x3c>)
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20005044 	.word	0x20005044
 8005688:	200050ac 	.word	0x200050ac

0800568c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <xTaskGetSchedulerState+0x34>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800569a:	2301      	movs	r3, #1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	e008      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <xTaskGetSchedulerState+0x38>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056a8:	2302      	movs	r3, #2
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e001      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056b2:	687b      	ldr	r3, [r7, #4]
	}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20005098 	.word	0x20005098
 80056c4:	200050b4 	.word	0x200050b4

080056c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d05e      	beq.n	800579c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <xTaskPriorityInherit+0xe0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d24e      	bcs.n	800578a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	db06      	blt.n	8005702 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f4:	4b2c      	ldr	r3, [pc, #176]	; (80057a8 <xTaskPriorityInherit+0xe0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	f1c3 0207 	rsb	r2, r3, #7
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4a26      	ldr	r2, [pc, #152]	; (80057ac <xTaskPriorityInherit+0xe4>)
 8005714:	4413      	add	r3, r2
 8005716:	4299      	cmp	r1, r3
 8005718:	d12f      	bne.n	800577a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe f9d7 	bl	8003ad2 <uxListRemove>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	2201      	movs	r2, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43da      	mvns	r2, r3
 8005736:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <xTaskPriorityInherit+0xe8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4013      	ands	r3, r2
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <xTaskPriorityInherit+0xe8>)
 800573e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <xTaskPriorityInherit+0xe0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	2201      	movs	r2, #1
 8005750:	409a      	lsls	r2, r3
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <xTaskPriorityInherit+0xe8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <xTaskPriorityInherit+0xe8>)
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a10      	ldr	r2, [pc, #64]	; (80057ac <xTaskPriorityInherit+0xe4>)
 800576a:	441a      	add	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fe f950 	bl	8003a18 <vListInsertEnd>
 8005778:	e004      	b.n	8005784 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <xTaskPriorityInherit+0xe0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e008      	b.n	800579c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <xTaskPriorityInherit+0xe0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	429a      	cmp	r2, r3
 8005796:	d201      	bcs.n	800579c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800579c:	68fb      	ldr	r3, [r7, #12]
	}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20004f8c 	.word	0x20004f8c
 80057ac:	20004f90 	.word	0x20004f90
 80057b0:	20005094 	.word	0x20005094

080057b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d06e      	beq.n	80058a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ca:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <xTaskPriorityDisinherit+0x100>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d00a      	beq.n	80057ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60bb      	str	r3, [r7, #8]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580c:	1e5a      	subs	r2, r3, #1
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	429a      	cmp	r2, r3
 800581c:	d044      	beq.n	80058a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	2b00      	cmp	r3, #0
 8005824:	d140      	bne.n	80058a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe f951 	bl	8003ad2 <uxListRemove>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d115      	bne.n	8005862 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	491f      	ldr	r1, [pc, #124]	; (80058b8 <xTaskPriorityDisinherit+0x104>)
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xTaskPriorityDisinherit+0xae>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	2201      	movs	r2, #1
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43da      	mvns	r2, r3
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <xTaskPriorityDisinherit+0x108>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4013      	ands	r3, r2
 800585e:	4a17      	ldr	r2, [pc, #92]	; (80058bc <xTaskPriorityDisinherit+0x108>)
 8005860:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f1c3 0207 	rsb	r2, r3, #7
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	2201      	movs	r2, #1
 800587c:	409a      	lsls	r2, r3
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskPriorityDisinherit+0x108>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <xTaskPriorityDisinherit+0x108>)
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <xTaskPriorityDisinherit+0x104>)
 8005896:	441a      	add	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fe f8ba 	bl	8003a18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058a8:	697b      	ldr	r3, [r7, #20]
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20004f8c 	.word	0x20004f8c
 80058b8:	20004f90 	.word	0x20004f90
 80058bc:	20005094 	.word	0x20005094

080058c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80058ce:	2301      	movs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d077      	beq.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d902      	bls.n	8005906 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e002      	b.n	800590c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	429a      	cmp	r2, r3
 8005914:	d058      	beq.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	d153      	bne.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005920:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d10a      	bne.n	8005940 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60bb      	str	r3, [r7, #8]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	db04      	blt.n	800595e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0207 	rsb	r2, r3, #7
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	6959      	ldr	r1, [r3, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800596e:	4413      	add	r3, r2
 8005970:	4299      	cmp	r1, r3
 8005972:	d129      	bne.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe f8aa 	bl	8003ad2 <uxListRemove>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43da      	mvns	r2, r3
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4013      	ands	r3, r2
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005998:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	4a0b      	ldr	r2, [pc, #44]	; (80059d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80059ba:	441a      	add	r2, r3
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7fe f828 	bl	8003a18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059c8:	bf00      	nop
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20004f8c 	.word	0x20004f8c
 80059d4:	20004f90 	.word	0x20004f90
 80059d8:	20005094 	.word	0x20005094

080059dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ee:	3201      	adds	r2, #1
 80059f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80059f2:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80059f4:	681b      	ldr	r3, [r3, #0]
	}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20004f8c 	.word	0x20004f8c

08005a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a14:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe f859 	bl	8003ad2 <uxListRemove>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d10a      	bne.n	8005a5c <prvAddCurrentTaskToDelayedList+0x58>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	481a      	ldr	r0, [pc, #104]	; (8005ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a56:	f7fd ffdf 	bl	8003a18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a5a:	e026      	b.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d209      	bcs.n	8005a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fd ffed 	bl	8003a60 <vListInsert>
}
 8005a86:	e010      	b.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fd ffe3 	bl	8003a60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d202      	bcs.n	8005aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20005090 	.word	0x20005090
 8005ab8:	20004f8c 	.word	0x20004f8c
 8005abc:	20005094 	.word	0x20005094
 8005ac0:	20005078 	.word	0x20005078
 8005ac4:	20005048 	.word	0x20005048
 8005ac8:	20005044 	.word	0x20005044
 8005acc:	200050ac 	.word	0x200050ac

08005ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b04      	subs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b00:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <pxPortInitialiseStack+0x64>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b14      	subs	r3, #20
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f06f 0202 	mvn.w	r2, #2
 8005b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b20      	subs	r3, #32
 8005b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	08005b39 	.word	0x08005b39

08005b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <prvTaskExitError+0x54>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d00a      	beq.n	8005b62 <prvTaskExitError+0x2a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <prvTaskExitError+0x28>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60bb      	str	r3, [r7, #8]
}
 8005b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b76:	bf00      	nop
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0fc      	beq.n	8005b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6808      	ldr	r0, [r1, #0]
 8005b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	f380 8809 	msr	PSP, r0
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8811 	msr	BASEPRI, r0
 8005baa:	4770      	bx	lr
 8005bac:	f3af 8000 	nop.w

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	20004f8c 	.word	0x20004f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <prvPortStartFirstTask+0x24>)
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f380 8808 	msr	MSP, r0
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8814 	msr	CONTROL, r0
 8005bca:	b662      	cpsie	i
 8005bcc:	b661      	cpsie	f
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	df00      	svc	0
 8005bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bda:	bf00      	nop
 8005bdc:	e000ed08 	.word	0xe000ed08

08005be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <xPortStartScheduler+0x120>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <xPortStartScheduler+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10a      	bne.n	8005c06 <xPortStartScheduler+0x26>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <xPortStartScheduler+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x46>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <xPortStartScheduler+0x12c>)
 8005c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <xPortStartScheduler+0x130>)
 8005c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c54:	e009      	b.n	8005c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d0ef      	beq.n	8005c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1c3 0307 	rsb	r3, r3, #7
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d00a      	beq.n	8005c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <xPortStartScheduler+0x134>)
 8005cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cce:	f000 f8dd 	bl	8005e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <xPortStartScheduler+0x13c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cd8:	f000 f8fc 	bl	8005ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xPortStartScheduler+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <xPortStartScheduler+0x140>)
 8005ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ce8:	f7ff ff66 	bl	8005bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cec:	f7ff fa92 	bl	8005214 <vTaskSwitchContext>
	prvTaskExitError();
 8005cf0:	f7ff ff22 	bl	8005b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00
 8005d04:	410fc271 	.word	0x410fc271
 8005d08:	410fc270 	.word	0x410fc270
 8005d0c:	e000e400 	.word	0xe000e400
 8005d10:	200050b8 	.word	0x200050b8
 8005d14:	200050bc 	.word	0x200050bc
 8005d18:	e000ed20 	.word	0xe000ed20
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	e000ef34 	.word	0xe000ef34

08005d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortEnterCritical+0x5c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vPortEnterCritical+0x4a>
	}
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	2000000c 	.word	0x2000000c
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <vPortExitCritical+0x50>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <vPortExitCritical+0x24>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	607b      	str	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortExitCritical+0x50>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <vPortExitCritical+0x42>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
}
 8005dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c
	...

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f01e 0f10 	tst.w	lr, #16
 8005df0:	bf08      	it	eq
 8005df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e04:	f380 8811 	msr	BASEPRI, r0
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f7ff fa00 	bl	8005214 <vTaskSwitchContext>
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f380 8811 	msr	BASEPRI, r0
 8005e1c:	bc09      	pop	{r0, r3}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f01e 0f10 	tst.w	lr, #16
 8005e2a:	bf08      	it	eq
 8005e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e30:	f380 8809 	msr	PSP, r0
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst>:
 8005e40:	20004f8c 	.word	0x20004f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e62:	f7ff f91f 	bl	80050a4 <xTaskIncrementTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <SysTick_Handler+0x40>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <vPortSetupTimerInterrupt+0x38>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortSetupTimerInterrupt+0x3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <vPortSetupTimerInterrupt+0x40>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <vPortSetupTimerInterrupt+0x44>)
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010
 8005ec4:	e000e018 	.word	0xe000e018
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	10624dd3 	.word	0x10624dd3
 8005ed0:	e000e014 	.word	0xe000e014

08005ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ee4 <vPortEnableVFP+0x10>
 8005ed8:	6801      	ldr	r1, [r0, #0]
 8005eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ede:	6001      	str	r1, [r0, #0]
 8005ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed88 	.word	0xe000ed88

08005ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eee:	f3ef 8305 	mrs	r3, IPSR
 8005ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d914      	bls.n	8005f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <vPortValidateInterruptPriority+0x70>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <vPortValidateInterruptPriority+0x74>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d20a      	bcs.n	8005f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <vPortValidateInterruptPriority+0x78>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <vPortValidateInterruptPriority+0x7c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d90a      	bls.n	8005f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	603b      	str	r3, [r7, #0]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <vPortValidateInterruptPriority+0x60>
	}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000e3f0 	.word	0xe000e3f0
 8005f5c:	200050b8 	.word	0x200050b8
 8005f60:	e000ed0c 	.word	0xe000ed0c
 8005f64:	200050bc 	.word	0x200050bc

08005f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f74:	f7fe ffca 	bl	8004f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <pvPortMalloc+0x180>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f80:	f000 f920 	bl	80061c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f84:	4b59      	ldr	r3, [pc, #356]	; (80060ec <pvPortMalloc+0x184>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 8093 	bne.w	80060b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01d      	beq.n	8005fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f98:	2208      	movs	r2, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d014      	beq.n	8005fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06e      	beq.n	80060b8 <pvPortMalloc+0x150>
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <pvPortMalloc+0x188>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d869      	bhi.n	80060b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fe8:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fee:	e004      	b.n	8005ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d903      	bls.n	800600c <pvPortMalloc+0xa4>
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f1      	bne.n	8005ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800600c:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <pvPortMalloc+0x180>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	429a      	cmp	r2, r3
 8006014:	d050      	beq.n	80060b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2208      	movs	r2, #8
 800601c:	4413      	add	r3, r2
 800601e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	2308      	movs	r3, #8
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	429a      	cmp	r2, r3
 8006036:	d91f      	bls.n	8006078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <pvPortMalloc+0xf8>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	613b      	str	r3, [r7, #16]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006072:	69b8      	ldr	r0, [r7, #24]
 8006074:	f000 f908 	bl	8006288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <pvPortMalloc+0x188>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <pvPortMalloc+0x188>)
 8006084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <pvPortMalloc+0x188>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <pvPortMalloc+0x190>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d203      	bcs.n	800609a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <pvPortMalloc+0x188>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <pvPortMalloc+0x190>)
 8006098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <pvPortMalloc+0x184>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <pvPortMalloc+0x194>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <pvPortMalloc+0x194>)
 80060b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b8:	f7fe ff36 	bl	8004f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <pvPortMalloc+0x174>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <pvPortMalloc+0x172>
	return pvReturn;
 80060dc:	69fb      	ldr	r3, [r7, #28]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20008cc8 	.word	0x20008cc8
 80060ec:	20008cdc 	.word	0x20008cdc
 80060f0:	20008ccc 	.word	0x20008ccc
 80060f4:	20008cc0 	.word	0x20008cc0
 80060f8:	20008cd0 	.word	0x20008cd0
 80060fc:	20008cd4 	.word	0x20008cd4

08006100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04d      	beq.n	80061ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006112:	2308      	movs	r3, #8
 8006114:	425b      	negs	r3, r3
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <vPortFree+0xb8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <vPortFree+0x44>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <vPortFree+0x62>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60bb      	str	r3, [r7, #8]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <vPortFree+0xb8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11a      	bne.n	80061ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <vPortFree+0xb8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006188:	f7fe fec0 	bl	8004f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <vPortFree+0xbc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4413      	add	r3, r2
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <vPortFree+0xbc>)
 8006198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f000 f874 	bl	8006288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <vPortFree+0xc0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <vPortFree+0xc0>)
 80061a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061aa:	f7fe febd 	bl	8004f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20008cdc 	.word	0x20008cdc
 80061bc:	20008ccc 	.word	0x20008ccc
 80061c0:	20008cd8 	.word	0x20008cd8

080061c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <prvHeapInit+0xac>)
 80061d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3307      	adds	r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <prvHeapInit+0xac>)
 80061f4:	4413      	add	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <prvHeapInit+0xb0>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <prvHeapInit+0xb0>)
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006210:	2208      	movs	r2, #8
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <prvHeapInit+0xb4>)
 8006224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvHeapInit+0xb4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <prvHeapInit+0xb4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <prvHeapInit+0xb4>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <prvHeapInit+0xb8>)
 8006252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <prvHeapInit+0xbc>)
 800625a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <prvHeapInit+0xc0>)
 800625e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	200050c0 	.word	0x200050c0
 8006274:	20008cc0 	.word	0x20008cc0
 8006278:	20008cc8 	.word	0x20008cc8
 800627c:	20008cd0 	.word	0x20008cd0
 8006280:	20008ccc 	.word	0x20008ccc
 8006284:	20008cdc 	.word	0x20008cdc

08006288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <prvInsertBlockIntoFreeList+0xac>)
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	e002      	b.n	800629c <prvInsertBlockIntoFreeList+0x14>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d8f7      	bhi.n	8006296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d108      	bne.n	80062ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d118      	bne.n	8006310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d00d      	beq.n	8006306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e008      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e003      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d002      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20008cc0 	.word	0x20008cc0
 8006338:	20008cc8 	.word	0x20008cc8

0800633c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	461a      	mov	r2, r3
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fc97 	bl	8008c84 <tcpip_send_msg_wait_sem>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800635a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <netconn_apimsg+0x2e>
    return apimsg->err;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006368:	e001      	b.n	800636e <netconn_apimsg+0x32>
  }
  return err;
 800636a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	603a      	str	r2, [r7, #0]
 8006382:	71fb      	strb	r3, [r7, #7]
 8006384:	460b      	mov	r3, r1
 8006386:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fdd5 	bl	8006f3c <netconn_alloc>
 8006392:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d054      	beq.n	8006444 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800639a:	79bb      	ldrb	r3, [r7, #6]
 800639c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	4619      	mov	r1, r3
 80063a8:	4829      	ldr	r0, [pc, #164]	; (8006450 <netconn_new_with_proto_and_callback+0xd8>)
 80063aa:	f7ff ffc7 	bl	800633c <netconn_apimsg>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80063b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d043      	beq.n	8006444 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <netconn_new_with_proto_and_callback+0x58>
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <netconn_new_with_proto_and_callback+0xdc>)
 80063c6:	22a3      	movs	r2, #163	; 0xa3
 80063c8:	4923      	ldr	r1, [pc, #140]	; (8006458 <netconn_new_with_proto_and_callback+0xe0>)
 80063ca:	4824      	ldr	r0, [pc, #144]	; (800645c <netconn_new_with_proto_and_callback+0xe4>)
 80063cc:	f00e f858 	bl	8014480 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f00d fed0 	bl	801417a <sys_mbox_valid>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <netconn_new_with_proto_and_callback+0x74>
 80063e0:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <netconn_new_with_proto_and_callback+0xdc>)
 80063e2:	22a4      	movs	r2, #164	; 0xa4
 80063e4:	491e      	ldr	r1, [pc, #120]	; (8006460 <netconn_new_with_proto_and_callback+0xe8>)
 80063e6:	481d      	ldr	r0, [pc, #116]	; (800645c <netconn_new_with_proto_and_callback+0xe4>)
 80063e8:	f00e f84a 	bl	8014480 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	3314      	adds	r3, #20
 80063f0:	4618      	mov	r0, r3
 80063f2:	f00d fec2 	bl	801417a <sys_mbox_valid>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <netconn_new_with_proto_and_callback+0x90>
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <netconn_new_with_proto_and_callback+0xdc>)
 80063fe:	22a6      	movs	r2, #166	; 0xa6
 8006400:	4918      	ldr	r1, [pc, #96]	; (8006464 <netconn_new_with_proto_and_callback+0xec>)
 8006402:	4816      	ldr	r0, [pc, #88]	; (800645c <netconn_new_with_proto_and_callback+0xe4>)
 8006404:	f00e f83c 	bl	8014480 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	330c      	adds	r3, #12
 800640c:	4618      	mov	r0, r3
 800640e:	f00d ff45 	bl	801429c <sys_sem_valid>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <netconn_new_with_proto_and_callback+0xac>
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <netconn_new_with_proto_and_callback+0xdc>)
 800641a:	22a9      	movs	r2, #169	; 0xa9
 800641c:	4912      	ldr	r1, [pc, #72]	; (8006468 <netconn_new_with_proto_and_callback+0xf0>)
 800641e:	480f      	ldr	r0, [pc, #60]	; (800645c <netconn_new_with_proto_and_callback+0xe4>)
 8006420:	f00e f82e 	bl	8014480 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	330c      	adds	r3, #12
 8006428:	4618      	mov	r0, r3
 800642a:	f00d ff2a 	bl	8014282 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	3310      	adds	r3, #16
 8006432:	4618      	mov	r0, r3
 8006434:	f00d fe1a 	bl	801406c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643a:	2007      	movs	r0, #7
 800643c:	f003 f9d0 	bl	80097e0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006446:	4618      	mov	r0, r3
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	08006f11 	.word	0x08006f11
 8006454:	0801562c 	.word	0x0801562c
 8006458:	08015660 	.word	0x08015660
 800645c:	08015684 	.word	0x08015684
 8006460:	080156ac 	.word	0x080156ac
 8006464:	080156c4 	.word	0x080156c4
 8006468:	080156e8 	.word	0x080156e8

0800646c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e014      	b.n	80064a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006482:	2329      	movs	r3, #41	; 0x29
 8006484:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006486:	f107 030c 	add.w	r3, r7, #12
 800648a:	4619      	mov	r1, r3
 800648c:	4808      	ldr	r0, [pc, #32]	; (80064b0 <netconn_prepare_delete+0x44>)
 800648e:	f7ff ff55 	bl	800633c <netconn_apimsg>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006498:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <netconn_prepare_delete+0x3a>
    return err;
 80064a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80064a4:	e000      	b.n	80064a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3730      	adds	r7, #48	; 0x30
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	0800747d 	.word	0x0800747d

080064b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <netconn_delete+0x12>
    return ERR_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e00d      	b.n	80064e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ffd0 	bl	800646c <netconn_prepare_delete>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80064d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <netconn_delete+0x2a>
    netconn_free(conn);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd9d 	bl	8007018 <netconn_free>
  }
  return err;
 80064de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	; 0x38
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <netconn_connect+0x28>
 8006500:	4b11      	ldr	r3, [pc, #68]	; (8006548 <netconn_connect+0x5c>)
 8006502:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8006506:	4911      	ldr	r1, [pc, #68]	; (800654c <netconn_connect+0x60>)
 8006508:	4811      	ldr	r0, [pc, #68]	; (8006550 <netconn_connect+0x64>)
 800650a:	f00d ffb9 	bl	8014480 <iprintf>
 800650e:	f06f 030f 	mvn.w	r3, #15
 8006512:	e015      	b.n	8006540 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <netconn_connect+0x68>)
 800651c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800652a:	f107 0314 	add.w	r3, r7, #20
 800652e:	4619      	mov	r1, r3
 8006530:	4809      	ldr	r0, [pc, #36]	; (8006558 <netconn_connect+0x6c>)
 8006532:	f7ff ff03 	bl	800633c <netconn_apimsg>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800653c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8006540:	4618      	mov	r0, r3
 8006542:	3738      	adds	r7, #56	; 0x38
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	0801562c 	.word	0x0801562c
 800654c:	080157a0 	.word	0x080157a0
 8006550:	08015684 	.word	0x08015684
 8006554:	080190b8 	.word	0x080190b8
 8006558:	08007765 	.word	0x08007765

0800655c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <netconn_disconnect+0x22>
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <netconn_disconnect+0x44>)
 800656c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006570:	490c      	ldr	r1, [pc, #48]	; (80065a4 <netconn_disconnect+0x48>)
 8006572:	480d      	ldr	r0, [pc, #52]	; (80065a8 <netconn_disconnect+0x4c>)
 8006574:	f00d ff84 	bl	8014480 <iprintf>
 8006578:	f06f 030f 	mvn.w	r3, #15
 800657c:	e00c      	b.n	8006598 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006582:	f107 030c 	add.w	r3, r7, #12
 8006586:	4619      	mov	r1, r3
 8006588:	4808      	ldr	r0, [pc, #32]	; (80065ac <netconn_disconnect+0x50>)
 800658a:	f7ff fed7 	bl	800633c <netconn_apimsg>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8006594:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006598:	4618      	mov	r0, r3
 800659a:	3730      	adds	r7, #48	; 0x30
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	0801562c 	.word	0x0801562c
 80065a4:	080157c0 	.word	0x080157c0
 80065a8:	08015684 	.word	0x08015684
 80065ac:	080078e1 	.word	0x080078e1

080065b0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <netconn_send+0x24>
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <netconn_send+0x4c>)
 80065c2:	f240 32b2 	movw	r2, #946	; 0x3b2
 80065c6:	490e      	ldr	r1, [pc, #56]	; (8006600 <netconn_send+0x50>)
 80065c8:	480e      	ldr	r0, [pc, #56]	; (8006604 <netconn_send+0x54>)
 80065ca:	f00d ff59 	bl	8014480 <iprintf>
 80065ce:	f06f 030f 	mvn.w	r3, #15
 80065d2:	e00e      	b.n	80065f2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	4619      	mov	r1, r3
 80065e2:	4809      	ldr	r0, [pc, #36]	; (8006608 <netconn_send+0x58>)
 80065e4:	f7ff feaa 	bl	800633c <netconn_apimsg>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80065ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	0801562c 	.word	0x0801562c
 8006600:	080158e8 	.word	0x080158e8
 8006604:	08015684 	.word	0x08015684
 8006608:	0800791d 	.word	0x0800791d

0800660c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	f107 0110 	add.w	r1, r7, #16
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	2201      	movs	r2, #1
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f805 	bl	8006640 <netconn_write_vectors_partly>
 8006636:	4603      	mov	r3, r0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b092      	sub	sp, #72	; 0x48
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4611      	mov	r1, r2
 800664c:	461a      	mov	r2, r3
 800664e:	460b      	mov	r3, r1
 8006650:	80fb      	strh	r3, [r7, #6]
 8006652:	4613      	mov	r3, r2
 8006654:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <netconn_write_vectors_partly+0x30>
 800665c:	4b4e      	ldr	r3, [pc, #312]	; (8006798 <netconn_write_vectors_partly+0x158>)
 800665e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006662:	494e      	ldr	r1, [pc, #312]	; (800679c <netconn_write_vectors_partly+0x15c>)
 8006664:	484e      	ldr	r0, [pc, #312]	; (80067a0 <netconn_write_vectors_partly+0x160>)
 8006666:	f00d ff0b 	bl	8014480 <iprintf>
 800666a:	f06f 030f 	mvn.w	r3, #15
 800666e:	e08e      	b.n	800678e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006678:	2b10      	cmp	r3, #16
 800667a:	d009      	beq.n	8006690 <netconn_write_vectors_partly+0x50>
 800667c:	4b46      	ldr	r3, [pc, #280]	; (8006798 <netconn_write_vectors_partly+0x158>)
 800667e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006682:	4948      	ldr	r1, [pc, #288]	; (80067a4 <netconn_write_vectors_partly+0x164>)
 8006684:	4846      	ldr	r0, [pc, #280]	; (80067a0 <netconn_write_vectors_partly+0x160>)
 8006686:	f00d fefb 	bl	8014480 <iprintf>
 800668a:	f06f 0305 	mvn.w	r3, #5
 800668e:	e07e      	b.n	800678e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	7f1b      	ldrb	r3, [r3, #28]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <netconn_write_vectors_partly+0x66>
 800669c:	797b      	ldrb	r3, [r7, #5]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <netconn_write_vectors_partly+0x6a>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <netconn_write_vectors_partly+0x6c>
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80066b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <netconn_write_vectors_partly+0x84>
 80066b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80066be:	f06f 0305 	mvn.w	r3, #5
 80066c2:	e064      	b.n	800678e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80066c8:	2300      	movs	r3, #0
 80066ca:	643b      	str	r3, [r7, #64]	; 0x40
 80066cc:	e015      	b.n	80066fa <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80066ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	4413      	add	r3, r2
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066da:	4413      	add	r3, r2
 80066dc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d202      	bcs.n	80066f4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80066ee:	f06f 0305 	mvn.w	r3, #5
 80066f2:	e04c      	b.n	800678e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	3301      	adds	r3, #1
 80066f8:	643b      	str	r3, [r7, #64]	; 0x40
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066fe:	429a      	cmp	r2, r3
 8006700:	dbe5      	blt.n	80066ce <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e040      	b.n	800678e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800670c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670e:	2b00      	cmp	r3, #0
 8006710:	da0a      	bge.n	8006728 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8006718:	f06f 0305 	mvn.w	r3, #5
 800671c:	e037      	b.n	800678e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800671e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006738:	797b      	ldrb	r3, [r7, #5]
 800673a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800673e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	4619      	mov	r1, r3
 800674c:	4816      	ldr	r0, [pc, #88]	; (80067a8 <netconn_write_vectors_partly+0x168>)
 800674e:	f7ff fdf5 	bl	800633c <netconn_apimsg>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8006758:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800675c:	2b00      	cmp	r3, #0
 800675e:	d114      	bne.n	800678a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8006760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8006766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800676c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006778:	429a      	cmp	r2, r3
 800677a:	d006      	beq.n	800678a <netconn_write_vectors_partly+0x14a>
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <netconn_write_vectors_partly+0x158>)
 800677e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006782:	490a      	ldr	r1, [pc, #40]	; (80067ac <netconn_write_vectors_partly+0x16c>)
 8006784:	4806      	ldr	r0, [pc, #24]	; (80067a0 <netconn_write_vectors_partly+0x160>)
 8006786:	f00d fe7b 	bl	8014480 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800678a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800678e:	4618      	mov	r0, r3
 8006790:	3748      	adds	r7, #72	; 0x48
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	0801562c 	.word	0x0801562c
 800679c:	08015904 	.word	0x08015904
 80067a0:	08015684 	.word	0x08015684
 80067a4:	08015920 	.word	0x08015920
 80067a8:	08007d51 	.word	0x08007d51
 80067ac:	08015944 	.word	0x08015944

080067b0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <netconn_err+0x12>
    return ERR_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	e00d      	b.n	80067de <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80067c2:	f00d fdf5 	bl	80143b0 <sys_arch_protect>
 80067c6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	7a1b      	ldrb	r3, [r3, #8]
 80067cc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f00d fdf9 	bl	80143cc <sys_arch_unprotect>
  return err;
 80067da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	f113 0f0d 	cmn.w	r3, #13
 80067fa:	d009      	beq.n	8006810 <lwip_netconn_err_to_msg+0x28>
 80067fc:	f113 0f0d 	cmn.w	r3, #13
 8006800:	dc0c      	bgt.n	800681c <lwip_netconn_err_to_msg+0x34>
 8006802:	f113 0f0f 	cmn.w	r3, #15
 8006806:	d007      	beq.n	8006818 <lwip_netconn_err_to_msg+0x30>
 8006808:	f113 0f0e 	cmn.w	r3, #14
 800680c:	d002      	beq.n	8006814 <lwip_netconn_err_to_msg+0x2c>
 800680e:	e005      	b.n	800681c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <lwip_netconn_err_to_msg+0x54>)
 8006812:	e00e      	b.n	8006832 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <lwip_netconn_err_to_msg+0x58>)
 8006816:	e00c      	b.n	8006832 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <lwip_netconn_err_to_msg+0x5c>)
 800681a:	e00a      	b.n	8006832 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800681c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <lwip_netconn_err_to_msg+0x48>
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <lwip_netconn_err_to_msg+0x60>)
 8006826:	227d      	movs	r2, #125	; 0x7d
 8006828:	4908      	ldr	r1, [pc, #32]	; (800684c <lwip_netconn_err_to_msg+0x64>)
 800682a:	4809      	ldr	r0, [pc, #36]	; (8006850 <lwip_netconn_err_to_msg+0x68>)
 800682c:	f00d fe28 	bl	8014480 <iprintf>
      return NULL;
 8006830:	2300      	movs	r3, #0
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	08018f60 	.word	0x08018f60
 8006840:	08018f61 	.word	0x08018f61
 8006844:	08018f62 	.word	0x08018f62
 8006848:	08015984 	.word	0x08015984
 800684c:	080159b8 	.word	0x080159b8
 8006850:	080159c8 	.word	0x080159c8

08006854 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <lwip_netconn_is_err_msg+0x1c>
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <lwip_netconn_is_err_msg+0x5c>)
 8006866:	2285      	movs	r2, #133	; 0x85
 8006868:	4912      	ldr	r1, [pc, #72]	; (80068b4 <lwip_netconn_is_err_msg+0x60>)
 800686a:	4813      	ldr	r0, [pc, #76]	; (80068b8 <lwip_netconn_is_err_msg+0x64>)
 800686c:	f00d fe08 	bl	8014480 <iprintf>

  if (msg == &netconn_aborted) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <lwip_netconn_is_err_msg+0x68>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d104      	bne.n	8006882 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	22f3      	movs	r2, #243	; 0xf3
 800687c:	701a      	strb	r2, [r3, #0]
    return 1;
 800687e:	2301      	movs	r3, #1
 8006880:	e012      	b.n	80068a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <lwip_netconn_is_err_msg+0x6c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d104      	bne.n	8006894 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	22f2      	movs	r2, #242	; 0xf2
 800688e:	701a      	strb	r2, [r3, #0]
    return 1;
 8006890:	2301      	movs	r3, #1
 8006892:	e009      	b.n	80068a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a0b      	ldr	r2, [pc, #44]	; (80068c4 <lwip_netconn_is_err_msg+0x70>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d104      	bne.n	80068a6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	22f1      	movs	r2, #241	; 0xf1
 80068a0:	701a      	strb	r2, [r3, #0]
    return 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08015984 	.word	0x08015984
 80068b4:	080159f0 	.word	0x080159f0
 80068b8:	080159c8 	.word	0x080159c8
 80068bc:	08018f60 	.word	0x08018f60
 80068c0:	08018f61 	.word	0x08018f61
 80068c4:	08018f62 	.word	0x08018f62

080068c8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <recv_udp+0x20>
 80068dc:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <recv_udp+0xe8>)
 80068de:	22e5      	movs	r2, #229	; 0xe5
 80068e0:	4934      	ldr	r1, [pc, #208]	; (80069b4 <recv_udp+0xec>)
 80068e2:	4835      	ldr	r0, [pc, #212]	; (80069b8 <recv_udp+0xf0>)
 80068e4:	f00d fdcc 	bl	8014480 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <recv_udp+0x32>
 80068ee:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <recv_udp+0xe8>)
 80068f0:	22e6      	movs	r2, #230	; 0xe6
 80068f2:	4932      	ldr	r1, [pc, #200]	; (80069bc <recv_udp+0xf4>)
 80068f4:	4830      	ldr	r0, [pc, #192]	; (80069b8 <recv_udp+0xf0>)
 80068f6:	f00d fdc3 	bl	8014480 <iprintf>
  conn = (struct netconn *)arg;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <recv_udp+0x44>
    pbuf_free(p);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f003 fdab 	bl	800a460 <pbuf_free>
    return;
 800690a:	e04d      	b.n	80069a8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	d005      	beq.n	8006922 <recv_udp+0x5a>
 8006916:	4b26      	ldr	r3, [pc, #152]	; (80069b0 <recv_udp+0xe8>)
 8006918:	22ee      	movs	r2, #238	; 0xee
 800691a:	4929      	ldr	r1, [pc, #164]	; (80069c0 <recv_udp+0xf8>)
 800691c:	4826      	ldr	r0, [pc, #152]	; (80069b8 <recv_udp+0xf0>)
 800691e:	f00d fdaf 	bl	8014480 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	3310      	adds	r3, #16
 8006926:	4618      	mov	r0, r3
 8006928:	f00d fc27 	bl	801417a <sys_mbox_valid>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f003 fd94 	bl	800a460 <pbuf_free>
    return;
 8006938:	e036      	b.n	80069a8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800693a:	2006      	movs	r0, #6
 800693c:	f002 feda 	bl	80096f4 <memp_malloc>
 8006940:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <recv_udp+0x88>
    pbuf_free(p);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f003 fd89 	bl	800a460 <pbuf_free>
    return;
 800694e:	e02b      	b.n	80069a8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <recv_udp+0xa0>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	e000      	b.n	800696a <recv_udp+0xa2>
 8006968:	2300      	movs	r3, #0
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006972:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	891b      	ldrh	r3, [r3, #8]
 8006978:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3310      	adds	r3, #16
 800697e:	69b9      	ldr	r1, [r7, #24]
 8006980:	4618      	mov	r0, r3
 8006982:	f00d fb85 	bl	8014090 <sys_mbox_trypost>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <recv_udp+0xcc>
    netbuf_delete(buf);
 800698c:	69b8      	ldr	r0, [r7, #24]
 800698e:	f001 fa89 	bl	8007ea4 <netbuf_delete>
    return;
 8006992:	e009      	b.n	80069a8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <recv_udp+0xe0>
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	8afa      	ldrh	r2, [r7, #22]
 80069a2:	2100      	movs	r1, #0
 80069a4:	69f8      	ldr	r0, [r7, #28]
 80069a6:	4798      	blx	r3
  }
}
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	08015984 	.word	0x08015984
 80069b4:	080159fc 	.word	0x080159fc
 80069b8:	080159c8 	.word	0x080159c8
 80069bc:	08015a20 	.word	0x08015a20
 80069c0:	08015a40 	.word	0x08015a40

080069c4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <recv_tcp+0x22>
 80069d8:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <recv_tcp+0xf0>)
 80069da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069de:	4936      	ldr	r1, [pc, #216]	; (8006ab8 <recv_tcp+0xf4>)
 80069e0:	4836      	ldr	r0, [pc, #216]	; (8006abc <recv_tcp+0xf8>)
 80069e2:	f00d fd4d 	bl	8014480 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <recv_tcp+0x36>
 80069ec:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <recv_tcp+0xf0>)
 80069ee:	f240 122d 	movw	r2, #301	; 0x12d
 80069f2:	4933      	ldr	r1, [pc, #204]	; (8006ac0 <recv_tcp+0xfc>)
 80069f4:	4831      	ldr	r0, [pc, #196]	; (8006abc <recv_tcp+0xf8>)
 80069f6:	f00d fd43 	bl	8014480 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80069fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d006      	beq.n	8006a10 <recv_tcp+0x4c>
 8006a02:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <recv_tcp+0xf0>)
 8006a04:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006a08:	492e      	ldr	r1, [pc, #184]	; (8006ac4 <recv_tcp+0x100>)
 8006a0a:	482c      	ldr	r0, [pc, #176]	; (8006abc <recv_tcp+0xf8>)
 8006a0c:	f00d fd38 	bl	8014480 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <recv_tcp+0x5c>
    return ERR_VAL;
 8006a1a:	f06f 0305 	mvn.w	r3, #5
 8006a1e:	e045      	b.n	8006aac <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d006      	beq.n	8006a38 <recv_tcp+0x74>
 8006a2a:	4b22      	ldr	r3, [pc, #136]	; (8006ab4 <recv_tcp+0xf0>)
 8006a2c:	f240 1235 	movw	r2, #309	; 0x135
 8006a30:	4925      	ldr	r1, [pc, #148]	; (8006ac8 <recv_tcp+0x104>)
 8006a32:	4822      	ldr	r0, [pc, #136]	; (8006abc <recv_tcp+0xf8>)
 8006a34:	f00d fd24 	bl	8014480 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	3310      	adds	r3, #16
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f00d fb9c 	bl	801417a <sys_mbox_valid>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	891b      	ldrh	r3, [r3, #8]
 8006a52:	4619      	mov	r1, r3
 8006a54:	68b8      	ldr	r0, [r7, #8]
 8006a56:	f004 fb69 	bl	800b12c <tcp_recved>
      pbuf_free(p);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f003 fd00 	bl	800a460 <pbuf_free>
    }
    return ERR_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	e023      	b.n	8006aac <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <recv_tcp+0xb2>
    msg = p;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	891b      	ldrh	r3, [r3, #8]
 8006a72:	83fb      	strh	r3, [r7, #30]
 8006a74:	e003      	b.n	8006a7e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <recv_tcp+0x108>)
 8006a78:	61bb      	str	r3, [r7, #24]
    len = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3310      	adds	r3, #16
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f00d fb03 	bl	8014090 <sys_mbox_trypost>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	e00a      	b.n	8006aac <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <recv_tcp+0xe6>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	8bfa      	ldrh	r2, [r7, #30]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6978      	ldr	r0, [r7, #20]
 8006aa8:	4798      	blx	r3
  }

  return ERR_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08015984 	.word	0x08015984
 8006ab8:	08015a60 	.word	0x08015a60
 8006abc:	080159c8 	.word	0x080159c8
 8006ac0:	08015a84 	.word	0x08015a84
 8006ac4:	08015aa4 	.word	0x08015aa4
 8006ac8:	08015abc 	.word	0x08015abc
 8006acc:	08018f62 	.word	0x08018f62

08006ad0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <poll_tcp+0x22>
 8006ae4:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <poll_tcp+0xbc>)
 8006ae6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006aea:	4929      	ldr	r1, [pc, #164]	; (8006b90 <poll_tcp+0xc0>)
 8006aec:	4829      	ldr	r0, [pc, #164]	; (8006b94 <poll_tcp+0xc4>)
 8006aee:	f00d fcc7 	bl	8014480 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d104      	bne.n	8006b04 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006afa:	2101      	movs	r1, #1
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 ff5b 	bl	80079b8 <lwip_netconn_do_writemore>
 8006b02:	e016      	b.n	8006b32 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d112      	bne.n	8006b32 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <poll_tcp+0x5a>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	7a5b      	ldrb	r3, [r3, #9]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	7a5a      	ldrb	r2, [r3, #9]
 8006b24:	3a01      	subs	r2, #1
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fb3b 	bl	80071a8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	7f1b      	ldrb	r3, [r3, #28]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01d      	beq.n	8006b82 <poll_tcp+0xb2>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006b4e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006b52:	d316      	bcc.n	8006b82 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d810      	bhi.n	8006b82 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7f1b      	ldrb	r3, [r3, #28]
 8006b64:	f023 0310 	bic.w	r3, r3, #16
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <poll_tcp+0xb2>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2102      	movs	r1, #2
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	08015984 	.word	0x08015984
 8006b90:	08015adc 	.word	0x08015adc
 8006b94:	080159c8 	.word	0x080159c8

08006b98 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <sent_tcp+0x26>
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <sent_tcp+0x9c>)
 8006bb2:	f240 1293 	movw	r2, #403	; 0x193
 8006bb6:	4920      	ldr	r1, [pc, #128]	; (8006c38 <sent_tcp+0xa0>)
 8006bb8:	4820      	ldr	r0, [pc, #128]	; (8006c3c <sent_tcp+0xa4>)
 8006bba:	f00d fc61 	bl	8014480 <iprintf>

  if (conn) {
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d032      	beq.n	8006c2a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d104      	bne.n	8006bd6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f000 fef2 	bl	80079b8 <lwip_netconn_do_writemore>
 8006bd4:	e007      	b.n	8006be6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d103      	bne.n	8006be6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006bde:	2101      	movs	r1, #1
 8006be0:	6978      	ldr	r0, [r7, #20]
 8006be2:	f000 fae1 	bl	80071a8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01d      	beq.n	8006c2a <sent_tcp+0x92>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006bf6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006bfa:	d316      	bcc.n	8006c2a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d810      	bhi.n	8006c2a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	7f1b      	ldrb	r3, [r3, #28]
 8006c0c:	f023 0310 	bic.w	r3, r3, #16
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <sent_tcp+0x92>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	2102      	movs	r1, #2
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08015984 	.word	0x08015984
 8006c38:	08015adc 	.word	0x08015adc
 8006c3c:	080159c8 	.word	0x080159c8

08006c40 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <err_tcp+0x24>
 8006c56:	4b5f      	ldr	r3, [pc, #380]	; (8006dd4 <err_tcp+0x194>)
 8006c58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006c5c:	495e      	ldr	r1, [pc, #376]	; (8006dd8 <err_tcp+0x198>)
 8006c5e:	485f      	ldr	r0, [pc, #380]	; (8006ddc <err_tcp+0x19c>)
 8006c60:	f00d fc0e 	bl	8014480 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8006c64:	f00d fba4 	bl	80143b0 <sys_arch_protect>
 8006c68:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	7f1b      	ldrb	r3, [r3, #28]
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8006c90:	69b8      	ldr	r0, [r7, #24]
 8006c92:	f00d fb9b 	bl	80143cc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <err_tcp+0x6a>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	69f8      	ldr	r0, [r7, #28]
 8006ca8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <err_tcp+0x7e>
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	69f8      	ldr	r0, [r7, #28]
 8006cbc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <err_tcp+0x92>
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2102      	movs	r1, #2
 8006cce:	69f8      	ldr	r0, [r7, #28]
 8006cd0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8006cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fd86 	bl	80067e8 <lwip_netconn_err_to_msg>
 8006cdc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f00d fa49 	bl	801417a <sys_mbox_valid>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	6939      	ldr	r1, [r7, #16]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f00d f9cb 	bl	8014090 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f00d fa3b 	bl	801417a <sys_mbox_valid>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	6939      	ldr	r1, [r7, #16]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f00d f9bd 	bl	8014090 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d005      	beq.n	8006d28 <err_tcp+0xe8>
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d002      	beq.n	8006d28 <err_tcp+0xe8>
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d143      	bne.n	8006db0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	7f1b      	ldrb	r3, [r3, #28]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	7f1b      	ldrb	r3, [r3, #28]
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d13b      	bne.n	8006dc8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <err_tcp+0x126>
 8006d58:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <err_tcp+0x194>)
 8006d5a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006d5e:	4920      	ldr	r1, [pc, #128]	; (8006de0 <err_tcp+0x1a0>)
 8006d60:	481e      	ldr	r0, [pc, #120]	; (8006ddc <err_tcp+0x19c>)
 8006d62:	f00d fb8d 	bl	8014480 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d104      	bne.n	8006d76 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	2200      	movs	r2, #0
 8006d72:	711a      	strb	r2, [r3, #4]
 8006d74:	e003      	b.n	8006d7e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f00d fa87 	bl	801429c <sys_sem_valid>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <err_tcp+0x162>
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <err_tcp+0x194>)
 8006d96:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006d9a:	4912      	ldr	r1, [pc, #72]	; (8006de4 <err_tcp+0x1a4>)
 8006d9c:	480f      	ldr	r0, [pc, #60]	; (8006ddc <err_tcp+0x19c>)
 8006d9e:	f00d fb6f 	bl	8014480 <iprintf>
      conn->current_msg = NULL;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2200      	movs	r2, #0
 8006da6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f00d fa5d 	bl	8014268 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8006dae:	e00b      	b.n	8006dc8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <err_tcp+0x18a>
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <err_tcp+0x194>)
 8006dba:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006dbe:	490a      	ldr	r1, [pc, #40]	; (8006de8 <err_tcp+0x1a8>)
 8006dc0:	4806      	ldr	r0, [pc, #24]	; (8006ddc <err_tcp+0x19c>)
 8006dc2:	f00d fb5d 	bl	8014480 <iprintf>
  }
}
 8006dc6:	e000      	b.n	8006dca <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8006dc8:	bf00      	nop
}
 8006dca:	bf00      	nop
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08015984 	.word	0x08015984
 8006dd8:	08015adc 	.word	0x08015adc
 8006ddc:	080159c8 	.word	0x080159c8
 8006de0:	08015aec 	.word	0x08015aec
 8006de4:	08015b08 	.word	0x08015b08
 8006de8:	08015b24 	.word	0x08015b24

08006dec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f005 f973 	bl	800c0e8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006e02:	490a      	ldr	r1, [pc, #40]	; (8006e2c <setup_tcp+0x40>)
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f005 f981 	bl	800c10c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006e0a:	4909      	ldr	r1, [pc, #36]	; (8006e30 <setup_tcp+0x44>)
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f005 f99f 	bl	800c150 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006e12:	2202      	movs	r2, #2
 8006e14:	4907      	ldr	r1, [pc, #28]	; (8006e34 <setup_tcp+0x48>)
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f005 f9f6 	bl	800c208 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006e1c:	4906      	ldr	r1, [pc, #24]	; (8006e38 <setup_tcp+0x4c>)
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f005 f9b8 	bl	800c194 <tcp_err>
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	080069c5 	.word	0x080069c5
 8006e30:	08006b99 	.word	0x08006b99
 8006e34:	08006ad1 	.word	0x08006ad1
 8006e38:	08006c41 	.word	0x08006c41

08006e3c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <pcb_new+0x24>
 8006e52:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <pcb_new+0xc4>)
 8006e54:	f240 2265 	movw	r2, #613	; 0x265
 8006e58:	492a      	ldr	r1, [pc, #168]	; (8006f04 <pcb_new+0xc8>)
 8006e5a:	482b      	ldr	r0, [pc, #172]	; (8006f08 <pcb_new+0xcc>)
 8006e5c:	f00d fb10 	bl	8014480 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d022      	beq.n	8006eb4 <pcb_new+0x78>
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d133      	bne.n	8006eda <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681c      	ldr	r4, [r3, #0]
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f00a fc94 	bl	80117a6 <udp_new_ip_type>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02a      	beq.n	8006ee2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b22      	cmp	r3, #34	; 0x22
 8006e94:	d104      	bne.n	8006ea0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6858      	ldr	r0, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4917      	ldr	r1, [pc, #92]	; (8006f0c <pcb_new+0xd0>)
 8006eae:	f00a fc01 	bl	80116b4 <udp_recv>
      }
      break;
 8006eb2:	e016      	b.n	8006ee2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681c      	ldr	r4, [r3, #0]
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f005 f906 	bl	800c0cc <tcp_new_ip_type>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff ff8a 	bl	8006dec <setup_tcp>
      }
      break;
 8006ed8:	e005      	b.n	8006ee6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	22fa      	movs	r2, #250	; 0xfa
 8006ede:	711a      	strb	r2, [r3, #4]
      return;
 8006ee0:	e00a      	b.n	8006ef8 <pcb_new+0xbc>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <pcb_new+0xac>
      break;
 8006ee6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d102      	bne.n	8006ef8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	711a      	strb	r2, [r3, #4]
  }
}
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd90      	pop	{r4, r7, pc}
 8006efe:	bf00      	nop
 8006f00:	08015984 	.word	0x08015984
 8006f04:	08015b68 	.word	0x08015b68
 8006f08:	080159c8 	.word	0x080159c8
 8006f0c:	080068c9 	.word	0x080068c9

08006f10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff ff85 	bl	8006e3c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006f4c:	2007      	movs	r0, #7
 8006f4e:	f002 fbd1 	bl	80096f4 <memp_malloc>
 8006f52:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <netconn_alloc+0x22>
    return NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e052      	b.n	8007004 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	79fa      	ldrb	r2, [r7, #7]
 8006f68:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d004      	beq.n	8006f84 <netconn_alloc+0x48>
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d105      	bne.n	8006f8a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8006f7e:	2306      	movs	r3, #6
 8006f80:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8006f82:	e00a      	b.n	8006f9a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8006f84:	2306      	movs	r3, #6
 8006f86:	617b      	str	r3, [r7, #20]
      break;
 8006f88:	e007      	b.n	8006f9a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <netconn_alloc+0xd0>)
 8006f8c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006f90:	491f      	ldr	r1, [pc, #124]	; (8007010 <netconn_alloc+0xd4>)
 8006f92:	4820      	ldr	r0, [pc, #128]	; (8007014 <netconn_alloc+0xd8>)
 8006f94:	f00d fa74 	bl	8014480 <iprintf>
      goto free_and_return;
 8006f98:	e02f      	b.n	8006ffa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f00d f841 	bl	8014028 <sys_mbox_new>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d125      	bne.n	8006ff8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	330c      	adds	r3, #12
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f00d f8ff 	bl	80141b6 <sys_sem_new>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f00d f852 	bl	801406c <sys_mbox_free>
    goto free_and_return;
 8006fc8:	e017      	b.n	8006ffa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f00d f8e4 	bl	801419c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	7cfa      	ldrb	r2, [r7, #19]
 8006ff2:	771a      	strb	r2, [r3, #28]
  return conn;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e005      	b.n	8007004 <netconn_alloc+0xc8>
    goto free_and_return;
 8006ff8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	2007      	movs	r0, #7
 8006ffe:	f002 fbef 	bl	80097e0 <memp_free>
  return NULL;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	08015984 	.word	0x08015984
 8007010:	08015b88 	.word	0x08015b88
 8007014:	080159c8 	.word	0x080159c8

08007018 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <netconn_free+0x1e>
 8007028:	4b1b      	ldr	r3, [pc, #108]	; (8007098 <netconn_free+0x80>)
 800702a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800702e:	491b      	ldr	r1, [pc, #108]	; (800709c <netconn_free+0x84>)
 8007030:	481b      	ldr	r0, [pc, #108]	; (80070a0 <netconn_free+0x88>)
 8007032:	f00d fa25 	bl	8014480 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f00d f89d 	bl	801417a <sys_mbox_valid>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <netconn_free+0x3c>
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <netconn_free+0x80>)
 8007048:	f240 3223 	movw	r2, #803	; 0x323
 800704c:	4915      	ldr	r1, [pc, #84]	; (80070a4 <netconn_free+0x8c>)
 800704e:	4814      	ldr	r0, [pc, #80]	; (80070a0 <netconn_free+0x88>)
 8007050:	f00d fa16 	bl	8014480 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3314      	adds	r3, #20
 8007058:	4618      	mov	r0, r3
 800705a:	f00d f88e 	bl	801417a <sys_mbox_valid>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <netconn_free+0x5a>
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <netconn_free+0x80>)
 8007066:	f240 3226 	movw	r2, #806	; 0x326
 800706a:	490f      	ldr	r1, [pc, #60]	; (80070a8 <netconn_free+0x90>)
 800706c:	480c      	ldr	r0, [pc, #48]	; (80070a0 <netconn_free+0x88>)
 800706e:	f00d fa07 	bl	8014480 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	330c      	adds	r3, #12
 8007076:	4618      	mov	r0, r3
 8007078:	f00d f903 	bl	8014282 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	330c      	adds	r3, #12
 8007080:	4618      	mov	r0, r3
 8007082:	f00d f91c 	bl	80142be <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	2007      	movs	r0, #7
 800708a:	f002 fba9 	bl	80097e0 <memp_free>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	08015984 	.word	0x08015984
 800709c:	08015bb0 	.word	0x08015bb0
 80070a0:	080159c8 	.word	0x080159c8
 80070a4:	08015be0 	.word	0x08015be0
 80070a8:	08015c1c 	.word	0x08015c1c

080070ac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3310      	adds	r3, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	f00d f85e 	bl	801417a <sys_mbox_valid>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02f      	beq.n	8007124 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80070c4:	e018      	b.n	80070f8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d10e      	bne.n	80070f0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f107 020f 	add.w	r2, r7, #15
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fbba 	bl	8006854 <lwip_netconn_is_err_msg>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d108      	bne.n	80070f8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 f9b9 	bl	800a460 <pbuf_free>
 80070ee:	e003      	b.n	80070f8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fed6 	bl	8007ea4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3310      	adds	r3, #16
 80070fc:	f107 0210 	add.w	r2, r7, #16
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f00d f81d 	bl	8014142 <sys_arch_mbox_tryfetch>
 8007108:	4603      	mov	r3, r0
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d1da      	bne.n	80070c6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3310      	adds	r3, #16
 8007114:	4618      	mov	r0, r3
 8007116:	f00c ffa9 	bl	801406c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3310      	adds	r3, #16
 800711e:	4618      	mov	r0, r3
 8007120:	f00d f83c 	bl	801419c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3314      	adds	r3, #20
 8007128:	4618      	mov	r0, r3
 800712a:	f00d f826 	bl	801417a <sys_mbox_valid>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d034      	beq.n	800719e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007134:	e01d      	b.n	8007172 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f107 020e 	add.w	r2, r7, #14
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fb88 	bl	8006854 <lwip_netconn_is_err_msg>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d113      	bne.n	8007172 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800714e:	6978      	ldr	r0, [r7, #20]
 8007150:	f7ff ffac 	bl	80070ac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4618      	mov	r0, r3
 8007162:	f003 ff7d 	bl	800b060 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800716c:	6978      	ldr	r0, [r7, #20]
 800716e:	f7ff ff53 	bl	8007018 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3314      	adds	r3, #20
 8007176:	f107 0210 	add.w	r2, r7, #16
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f00c ffe0 	bl	8014142 <sys_arch_mbox_tryfetch>
 8007182:	4603      	mov	r3, r0
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d1d5      	bne.n	8007136 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3314      	adds	r3, #20
 800718e:	4618      	mov	r0, r3
 8007190:	f00c ff6c 	bl	801406c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3314      	adds	r3, #20
 8007198:	4618      	mov	r0, r3
 800719a:	f00c ffff 	bl	801419c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800719e:	bf00      	nop
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <lwip_netconn_do_close_internal+0x24>
 80071be:	4b87      	ldr	r3, [pc, #540]	; (80073dc <lwip_netconn_do_close_internal+0x234>)
 80071c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80071c4:	4986      	ldr	r1, [pc, #536]	; (80073e0 <lwip_netconn_do_close_internal+0x238>)
 80071c6:	4887      	ldr	r0, [pc, #540]	; (80073e4 <lwip_netconn_do_close_internal+0x23c>)
 80071c8:	f00d f95a 	bl	8014480 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d006      	beq.n	80071e6 <lwip_netconn_do_close_internal+0x3e>
 80071d8:	4b80      	ldr	r3, [pc, #512]	; (80073dc <lwip_netconn_do_close_internal+0x234>)
 80071da:	f240 32a3 	movw	r2, #931	; 0x3a3
 80071de:	4982      	ldr	r1, [pc, #520]	; (80073e8 <lwip_netconn_do_close_internal+0x240>)
 80071e0:	4880      	ldr	r0, [pc, #512]	; (80073e4 <lwip_netconn_do_close_internal+0x23c>)
 80071e2:	f00d f94d 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d006      	beq.n	80071fc <lwip_netconn_do_close_internal+0x54>
 80071ee:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <lwip_netconn_do_close_internal+0x234>)
 80071f0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80071f4:	497d      	ldr	r1, [pc, #500]	; (80073ec <lwip_netconn_do_close_internal+0x244>)
 80071f6:	487b      	ldr	r0, [pc, #492]	; (80073e4 <lwip_netconn_do_close_internal+0x23c>)
 80071f8:	f00d f942 	bl	8014480 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <lwip_netconn_do_close_internal+0x6a>
 8007204:	4b75      	ldr	r3, [pc, #468]	; (80073dc <lwip_netconn_do_close_internal+0x234>)
 8007206:	f240 32a5 	movw	r2, #933	; 0x3a5
 800720a:	4979      	ldr	r1, [pc, #484]	; (80073f0 <lwip_netconn_do_close_internal+0x248>)
 800720c:	4875      	ldr	r0, [pc, #468]	; (80073e4 <lwip_netconn_do_close_internal+0x23c>)
 800720e:	f00d f937 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <lwip_netconn_do_close_internal+0x80>
 800721a:	4b70      	ldr	r3, [pc, #448]	; (80073dc <lwip_netconn_do_close_internal+0x234>)
 800721c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007220:	4974      	ldr	r1, [pc, #464]	; (80073f4 <lwip_netconn_do_close_internal+0x24c>)
 8007222:	4870      	ldr	r0, [pc, #448]	; (80073e4 <lwip_netconn_do_close_internal+0x23c>)
 8007224:	f00d f92c 	bl	8014480 <iprintf>

  tpcb = conn->pcb.tcp;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	7a1b      	ldrb	r3, [r3, #8]
 8007234:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d102      	bne.n	8007252 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800724c:	2301      	movs	r3, #1
 800724e:	75bb      	strb	r3, [r7, #22]
 8007250:	e01f      	b.n	8007292 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800725c:	2b05      	cmp	r3, #5
 800725e:	d007      	beq.n	8007270 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007264:	2b06      	cmp	r3, #6
 8007266:	d003      	beq.n	8007270 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800726c:	2b08      	cmp	r3, #8
 800726e:	d102      	bne.n	8007276 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8007270:	2301      	movs	r3, #1
 8007272:	75bb      	strb	r3, [r7, #22]
 8007274:	e00d      	b.n	8007292 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007276:	7b7b      	ldrb	r3, [r7, #13]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <lwip_netconn_do_close_internal+0xe6>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	8b5b      	ldrh	r3, [r3, #26]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8007288:	2301      	movs	r3, #1
 800728a:	75bb      	strb	r3, [r7, #22]
 800728c:	e001      	b.n	8007292 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8007292:	7dbb      	ldrb	r3, [r7, #22]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8007298:	2100      	movs	r1, #0
 800729a:	6938      	ldr	r0, [r7, #16]
 800729c:	f004 ff24 	bl	800c0e8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d104      	bne.n	80072b2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80072a8:	2100      	movs	r1, #0
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f004 ff94 	bl	800c1d8 <tcp_accept>
 80072b0:	e01d      	b.n	80072ee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80072b8:	2100      	movs	r1, #0
 80072ba:	6938      	ldr	r0, [r7, #16]
 80072bc:	f004 ff26 	bl	800c10c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80072c0:	2100      	movs	r1, #0
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f004 ff88 	bl	800c1d8 <tcp_accept>
    }
    if (shut_tx) {
 80072c8:	7b7b      	ldrb	r3, [r7, #13]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80072ce:	2100      	movs	r1, #0
 80072d0:	6938      	ldr	r0, [r7, #16]
 80072d2:	f004 ff3d 	bl	800c150 <tcp_sent>
    }
    if (shut_close) {
 80072d6:	7dbb      	ldrb	r3, [r7, #22]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80072dc:	2200      	movs	r2, #0
 80072de:	2100      	movs	r1, #0
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f004 ff91 	bl	800c208 <tcp_poll>
      tcp_err(tpcb, NULL);
 80072e6:	2100      	movs	r1, #0
 80072e8:	6938      	ldr	r0, [r7, #16]
 80072ea:	f004 ff53 	bl	800c194 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80072ee:	7dbb      	ldrb	r3, [r7, #22]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80072f4:	6938      	ldr	r0, [r7, #16]
 80072f6:	f003 fd6d 	bl	800add4 <tcp_close>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
 80072fe:	e007      	b.n	8007310 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	7b7a      	ldrb	r2, [r7, #13]
 8007304:	4619      	mov	r1, r3
 8007306:	6938      	ldr	r0, [r7, #16]
 8007308:	f003 fd90 	bl	800ae2c <tcp_shutdown>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8007310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8007318:	2301      	movs	r3, #1
 800731a:	757b      	strb	r3, [r7, #21]
 800731c:	e016      	b.n	800734c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800731e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d10f      	bne.n	8007348 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	7a5b      	ldrb	r3, [r3, #9]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10c      	bne.n	800734c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007332:	2301      	movs	r3, #1
 8007334:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8007336:	7dbb      	ldrb	r3, [r7, #22]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800733c:	6938      	ldr	r0, [r7, #16]
 800733e:	f003 fe8f 	bl	800b060 <tcp_abort>
          err = ERR_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
 8007346:	e001      	b.n	800734c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007348:	2301      	movs	r3, #1
 800734a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800734c:	7d7b      	ldrb	r3, [r7, #21]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d052      	beq.n	80073f8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	7dfa      	ldrb	r2, [r7, #23]
 8007362:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d129      	bne.n	80073cc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8007378:	7dbb      	ldrb	r3, [r7, #22]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00c      	beq.n	8007398 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <lwip_netconn_do_close_internal+0x1f0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2200      	movs	r2, #0
 8007392:	2104      	movs	r1, #4
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
      }
      if (shut_rx) {
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <lwip_netconn_do_close_internal+0x20a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
      }
      if (shut_tx) {
 80073b2:	7b7b      	ldrb	r3, [r7, #13]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <lwip_netconn_do_close_internal+0x224>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2200      	movs	r2, #0
 80073c6:	2102      	movs	r1, #2
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80073d2:	68b8      	ldr	r0, [r7, #8]
 80073d4:	f00c ff48 	bl	8014268 <sys_sem_signal>
    }
    return ERR_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e03c      	b.n	8007456 <lwip_netconn_do_close_internal+0x2ae>
 80073dc:	08015984 	.word	0x08015984
 80073e0:	08015c58 	.word	0x08015c58
 80073e4:	080159c8 	.word	0x080159c8
 80073e8:	08015c68 	.word	0x08015c68
 80073ec:	08015c88 	.word	0x08015c88
 80073f0:	08015cac 	.word	0x08015cac
 80073f4:	08015aec 	.word	0x08015aec
  }
  if (!close_finished) {
 80073f8:	7d7b      	ldrb	r3, [r7, #21]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d11e      	bne.n	800743c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	7d1b      	ldrb	r3, [r3, #20]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d106      	bne.n	8007414 <lwip_netconn_do_close_internal+0x26c>
 8007406:	4b16      	ldr	r3, [pc, #88]	; (8007460 <lwip_netconn_do_close_internal+0x2b8>)
 8007408:	f240 4241 	movw	r2, #1089	; 0x441
 800740c:	4915      	ldr	r1, [pc, #84]	; (8007464 <lwip_netconn_do_close_internal+0x2bc>)
 800740e:	4816      	ldr	r0, [pc, #88]	; (8007468 <lwip_netconn_do_close_internal+0x2c0>)
 8007410:	f00d f836 	bl	8014480 <iprintf>
    if (shut_tx) {
 8007414:	7b7b      	ldrb	r3, [r7, #13]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800741a:	4914      	ldr	r1, [pc, #80]	; (800746c <lwip_netconn_do_close_internal+0x2c4>)
 800741c:	6938      	ldr	r0, [r7, #16]
 800741e:	f004 fe97 	bl	800c150 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8007422:	2201      	movs	r2, #1
 8007424:	4912      	ldr	r1, [pc, #72]	; (8007470 <lwip_netconn_do_close_internal+0x2c8>)
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f004 feee 	bl	800c208 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800742c:	4911      	ldr	r1, [pc, #68]	; (8007474 <lwip_netconn_do_close_internal+0x2cc>)
 800742e:	6938      	ldr	r0, [r7, #16]
 8007430:	f004 feb0 	bl	800c194 <tcp_err>
    tcp_arg(tpcb, conn);
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	6938      	ldr	r0, [r7, #16]
 8007438:	f004 fe56 	bl	800c0e8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800743c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <lwip_netconn_do_close_internal+0x2aa>
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <lwip_netconn_do_close_internal+0x2b8>)
 8007446:	f240 424d 	movw	r2, #1101	; 0x44d
 800744a:	490b      	ldr	r1, [pc, #44]	; (8007478 <lwip_netconn_do_close_internal+0x2d0>)
 800744c:	4806      	ldr	r0, [pc, #24]	; (8007468 <lwip_netconn_do_close_internal+0x2c0>)
 800744e:	f00d f817 	bl	8014480 <iprintf>
  return err;
 8007452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	08015984 	.word	0x08015984
 8007464:	08015cc0 	.word	0x08015cc0
 8007468:	080159c8 	.word	0x080159c8
 800746c:	08006b99 	.word	0x08006b99
 8007470:	08006ad1 	.word	0x08006ad1
 8007474:	08006c41 	.word	0x08006c41
 8007478:	08015ce4 	.word	0x08015ce4

0800747c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <lwip_netconn_do_delconn+0x36>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d006      	beq.n	80074b2 <lwip_netconn_do_delconn+0x36>
 80074a4:	4b60      	ldr	r3, [pc, #384]	; (8007628 <lwip_netconn_do_delconn+0x1ac>)
 80074a6:	f240 425e 	movw	r2, #1118	; 0x45e
 80074aa:	4960      	ldr	r1, [pc, #384]	; (800762c <lwip_netconn_do_delconn+0x1b0>)
 80074ac:	4860      	ldr	r0, [pc, #384]	; (8007630 <lwip_netconn_do_delconn+0x1b4>)
 80074ae:	f00c ffe7 	bl	8014480 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <lwip_netconn_do_delconn+0x48>
 80074b8:	7afb      	ldrb	r3, [r7, #11]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d002      	beq.n	80074c4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d109      	bne.n	80074d8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d10a      	bne.n	80074e0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	7f1b      	ldrb	r3, [r3, #28]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	22fb      	movs	r2, #251	; 0xfb
 80074dc:	711a      	strb	r2, [r3, #4]
 80074de:	e097      	b.n	8007610 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80074e0:	7afb      	ldrb	r3, [r7, #11]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d10d      	bne.n	8007502 <lwip_netconn_do_delconn+0x86>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	7f1b      	ldrb	r3, [r3, #28]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <lwip_netconn_do_delconn+0x86>
 80074f4:	4b4c      	ldr	r3, [pc, #304]	; (8007628 <lwip_netconn_do_delconn+0x1ac>)
 80074f6:	f240 427a 	movw	r2, #1146	; 0x47a
 80074fa:	494e      	ldr	r1, [pc, #312]	; (8007634 <lwip_netconn_do_delconn+0x1b8>)
 80074fc:	484c      	ldr	r0, [pc, #304]	; (8007630 <lwip_netconn_do_delconn+0x1b4>)
 80074fe:	f00c ffbf 	bl	8014480 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fdcd 	bl	80070ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d05f      	beq.n	80075dc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007526:	2b10      	cmp	r3, #16
 8007528:	d00d      	beq.n	8007546 <lwip_netconn_do_delconn+0xca>
 800752a:	2b20      	cmp	r3, #32
 800752c:	d151      	bne.n	80075d2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	f00a f8d8 	bl	80116f4 <udp_remove>
          break;
 8007544:	e046      	b.n	80075d4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <lwip_netconn_do_delconn+0xe2>
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <lwip_netconn_do_delconn+0x1ac>)
 8007552:	f240 4294 	movw	r2, #1172	; 0x494
 8007556:	4938      	ldr	r1, [pc, #224]	; (8007638 <lwip_netconn_do_delconn+0x1bc>)
 8007558:	4835      	ldr	r0, [pc, #212]	; (8007630 <lwip_netconn_do_delconn+0x1b4>)
 800755a:	f00c ff91 	bl	8014480 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2204      	movs	r2, #4
 8007564:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2203      	movs	r2, #3
 800756a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fe14 	bl	80071a8 <lwip_netconn_do_close_internal>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04b      	beq.n	800761e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b04      	cmp	r3, #4
 800758e:	d006      	beq.n	800759e <lwip_netconn_do_delconn+0x122>
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <lwip_netconn_do_delconn+0x1ac>)
 8007592:	f240 429a 	movw	r2, #1178	; 0x49a
 8007596:	4929      	ldr	r1, [pc, #164]	; (800763c <lwip_netconn_do_delconn+0x1c0>)
 8007598:	4825      	ldr	r0, [pc, #148]	; (8007630 <lwip_netconn_do_delconn+0x1b4>)
 800759a:	f00c ff71 	bl	8014480 <iprintf>
            UNLOCK_TCPIP_CORE();
 800759e:	4828      	ldr	r0, [pc, #160]	; (8007640 <lwip_netconn_do_delconn+0x1c4>)
 80075a0:	f00c fed3 	bl	801434a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f00c fe2a 	bl	8014206 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80075b2:	4823      	ldr	r0, [pc, #140]	; (8007640 <lwip_netconn_do_delconn+0x1c4>)
 80075b4:	f00c feba 	bl	801432c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d02d      	beq.n	800761e <lwip_netconn_do_delconn+0x1a2>
 80075c2:	4b19      	ldr	r3, [pc, #100]	; (8007628 <lwip_netconn_do_delconn+0x1ac>)
 80075c4:	f240 429e 	movw	r2, #1182	; 0x49e
 80075c8:	491c      	ldr	r1, [pc, #112]	; (800763c <lwip_netconn_do_delconn+0x1c0>)
 80075ca:	4819      	ldr	r0, [pc, #100]	; (8007630 <lwip_netconn_do_delconn+0x1b4>)
 80075cc:	f00c ff58 	bl	8014480 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80075d0:	e025      	b.n	800761e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80075d2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <lwip_netconn_do_delconn+0x17a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	6810      	ldr	r0, [r2, #0]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <lwip_netconn_do_delconn+0x194>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	6810      	ldr	r0, [r2, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	2102      	movs	r1, #2
 800760e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f00c fe40 	bl	801429c <sys_sem_valid>
 800761c:	e000      	b.n	8007620 <lwip_netconn_do_delconn+0x1a4>
          return;
 800761e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	08015984 	.word	0x08015984
 800762c:	08015cf4 	.word	0x08015cf4
 8007630:	080159c8 	.word	0x080159c8
 8007634:	08015d08 	.word	0x08015d08
 8007638:	08015d28 	.word	0x08015d28
 800763c:	08015d44 	.word	0x08015d44
 8007640:	20008d30 	.word	0x20008d30

08007644 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007660:	f06f 0305 	mvn.w	r3, #5
 8007664:	e070      	b.n	8007748 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b03      	cmp	r3, #3
 800766c:	d006      	beq.n	800767c <lwip_netconn_do_connected+0x38>
 800766e:	4b38      	ldr	r3, [pc, #224]	; (8007750 <lwip_netconn_do_connected+0x10c>)
 8007670:	f240 5223 	movw	r2, #1315	; 0x523
 8007674:	4937      	ldr	r1, [pc, #220]	; (8007754 <lwip_netconn_do_connected+0x110>)
 8007676:	4838      	ldr	r0, [pc, #224]	; (8007758 <lwip_netconn_do_connected+0x114>)
 8007678:	f00c ff02 	bl	8014480 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10c      	bne.n	800769e <lwip_netconn_do_connected+0x5a>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	7f1b      	ldrb	r3, [r3, #28]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <lwip_netconn_do_connected+0x5a>
 8007690:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <lwip_netconn_do_connected+0x10c>)
 8007692:	f240 5224 	movw	r2, #1316	; 0x524
 8007696:	4931      	ldr	r1, [pc, #196]	; (800775c <lwip_netconn_do_connected+0x118>)
 8007698:	482f      	ldr	r0, [pc, #188]	; (8007758 <lwip_netconn_do_connected+0x114>)
 800769a:	f00c fef1 	bl	8014480 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	79fa      	ldrb	r2, [r7, #7]
 80076ac:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c0:	2b10      	cmp	r3, #16
 80076c2:	d106      	bne.n	80076d2 <lwip_netconn_do_connected+0x8e>
 80076c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80076cc:	69b8      	ldr	r0, [r7, #24]
 80076ce:	f7ff fb8d 	bl	8006dec <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	7f1b      	ldrb	r3, [r3, #28]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	7f1b      	ldrb	r3, [r3, #28]
 80076ea:	f023 0304 	bic.w	r3, r3, #4
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <lwip_netconn_do_connected+0xbc>
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10c      	bne.n	800771a <lwip_netconn_do_connected+0xd6>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <lwip_netconn_do_connected+0xc8>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d006      	beq.n	800771a <lwip_netconn_do_connected+0xd6>
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <lwip_netconn_do_connected+0x10c>)
 800770e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8007712:	4913      	ldr	r1, [pc, #76]	; (8007760 <lwip_netconn_do_connected+0x11c>)
 8007714:	4810      	ldr	r0, [pc, #64]	; (8007758 <lwip_netconn_do_connected+0x114>)
 8007716:	f00c feb3 	bl	8014480 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2200      	movs	r2, #0
 800771e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2200      	movs	r2, #0
 8007724:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <lwip_netconn_do_connected+0xf6>
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2200      	movs	r2, #0
 8007734:	2102      	movs	r1, #2
 8007736:	69b8      	ldr	r0, [r7, #24]
 8007738:	4798      	blx	r3

  if (was_blocking) {
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8007740:	69f8      	ldr	r0, [r7, #28]
 8007742:	f00c fd91 	bl	8014268 <sys_sem_signal>
  }
  return ERR_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	08015984 	.word	0x08015984
 8007754:	08015d4c 	.word	0x08015d4c
 8007758:	080159c8 	.word	0x080159c8
 800775c:	08015d6c 	.word	0x08015d6c
 8007760:	08015dac 	.word	0x08015dac

08007764 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800777a:	23f1      	movs	r3, #241	; 0xf1
 800777c:	75fb      	strb	r3, [r7, #23]
 800777e:	e09b      	b.n	80078b8 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800778a:	2b10      	cmp	r3, #16
 800778c:	d00f      	beq.n	80077ae <lwip_netconn_do_connect+0x4a>
 800778e:	2b20      	cmp	r3, #32
 8007790:	f040 8087 	bne.w	80078a2 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6858      	ldr	r0, [r3, #4]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6899      	ldr	r1, [r3, #8]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	899b      	ldrh	r3, [r3, #12]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f009 fef0 	bl	8011588 <udp_connect>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
        break;
 80077ac:	e084      	b.n	80078b8 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d102      	bne.n	80077be <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80077b8:	23f7      	movs	r3, #247	; 0xf7
 80077ba:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80077bc:	e07b      	b.n	80078b6 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80077c8:	23f6      	movs	r3, #246	; 0xf6
 80077ca:	75fb      	strb	r3, [r7, #23]
        break;
 80077cc:	e073      	b.n	80078b6 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff fb0a 	bl	8006dec <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6858      	ldr	r0, [r3, #4]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	6899      	ldr	r1, [r3, #8]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	899a      	ldrh	r2, [r3, #12]
 80077e6:	4b38      	ldr	r3, [pc, #224]	; (80078c8 <lwip_netconn_do_connect+0x164>)
 80077e8:	f003 fd36 	bl	800b258 <tcp_connect>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80077f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d15e      	bne.n	80078b6 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	7f1b      	ldrb	r3, [r3, #28]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	bf14      	ite	ne
 8007806:	2301      	movne	r3, #1
 8007808:	2300      	moveq	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2203      	movs	r2, #3
 8007814:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <lwip_netconn_do_connect+0xcc>
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	7f1a      	ldrb	r2, [r3, #28]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0204 	orr.w	r2, r2, #4
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	771a      	strb	r2, [r3, #28]
 800782e:	e008      	b.n	8007842 <lwip_netconn_do_connect+0xde>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	7f1a      	ldrb	r2, [r3, #28]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0204 	bic.w	r2, r2, #4
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8007848:	23fb      	movs	r3, #251	; 0xfb
 800784a:	75fb      	strb	r3, [r7, #23]
        break;
 800784c:	e033      	b.n	80078b6 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d006      	beq.n	800786e <lwip_netconn_do_connect+0x10a>
 8007860:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <lwip_netconn_do_connect+0x168>)
 8007862:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8007866:	491a      	ldr	r1, [pc, #104]	; (80078d0 <lwip_netconn_do_connect+0x16c>)
 8007868:	481a      	ldr	r0, [pc, #104]	; (80078d4 <lwip_netconn_do_connect+0x170>)
 800786a:	f00c fe09 	bl	8014480 <iprintf>
              UNLOCK_TCPIP_CORE();
 800786e:	481a      	ldr	r0, [pc, #104]	; (80078d8 <lwip_netconn_do_connect+0x174>)
 8007870:	f00c fd6b 	bl	801434a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f00c fcc2 	bl	8014206 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8007882:	4815      	ldr	r0, [pc, #84]	; (80078d8 <lwip_netconn_do_connect+0x174>)
 8007884:	f00c fd52 	bl	801432c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d116      	bne.n	80078c0 <lwip_netconn_do_connect+0x15c>
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <lwip_netconn_do_connect+0x168>)
 8007894:	f240 5274 	movw	r2, #1396	; 0x574
 8007898:	490d      	ldr	r1, [pc, #52]	; (80078d0 <lwip_netconn_do_connect+0x16c>)
 800789a:	480e      	ldr	r0, [pc, #56]	; (80078d4 <lwip_netconn_do_connect+0x170>)
 800789c:	f00c fdf0 	bl	8014480 <iprintf>
              return;
 80078a0:	e00e      	b.n	80078c0 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 80078a2:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <lwip_netconn_do_connect+0x168>)
 80078a4:	f240 527d 	movw	r2, #1405	; 0x57d
 80078a8:	490c      	ldr	r1, [pc, #48]	; (80078dc <lwip_netconn_do_connect+0x178>)
 80078aa:	480a      	ldr	r0, [pc, #40]	; (80078d4 <lwip_netconn_do_connect+0x170>)
 80078ac:	f00c fde8 	bl	8014480 <iprintf>
 80078b0:	23fa      	movs	r3, #250	; 0xfa
 80078b2:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 80078b4:	e000      	b.n	80078b8 <lwip_netconn_do_connect+0x154>
        break;
 80078b6:	bf00      	nop
    }
  }
  msg->err = err;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	7dfa      	ldrb	r2, [r7, #23]
 80078bc:	711a      	strb	r2, [r3, #4]
 80078be:	e000      	b.n	80078c2 <lwip_netconn_do_connect+0x15e>
              return;
 80078c0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08007645 	.word	0x08007645
 80078cc:	08015984 	.word	0x08015984
 80078d0:	08015d44 	.word	0x08015d44
 80078d4:	080159c8 	.word	0x080159c8
 80078d8:	20008d30 	.word	0x20008d30
 80078dc:	08015dcc 	.word	0x08015dcc

080078e0 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d109      	bne.n	800790e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	f009 feaf 	bl	8011664 <udp_disconnect>
    msg->err = ERR_OK;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800790c:	e002      	b.n	8007914 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	22fa      	movs	r2, #250	; 0xfa
 8007912:	711a      	strb	r2, [r3, #4]
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe ff3f 	bl	80067b0 <netconn_err>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d134      	bne.n	80079a8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02d      	beq.n	80079a4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007952:	2b20      	cmp	r3, #32
 8007954:	d123      	bne.n	800799e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f009 fb98 	bl	80110a4 <udp_send>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8007978:	e016      	b.n	80079a8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6858      	ldr	r0, [r3, #4]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	6819      	ldr	r1, [r3, #0]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f103 0208 	add.w	r2, r3, #8
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	899b      	ldrh	r3, [r3, #12]
 8007994:	f009 fbba 	bl	801110c <udp_sendto>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
          break;
 800799c:	e004      	b.n	80079a8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800799e:	23f5      	movs	r3, #245	; 0xf5
 80079a0:	73fb      	strb	r3, [r7, #15]
          break;
 80079a2:	e001      	b.n	80079a8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80079a4:	23f5      	movs	r3, #245	; 0xf5
 80079a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	7bfa      	ldrb	r2, [r7, #15]
 80079ac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <lwip_netconn_do_writemore+0x24>
 80079ce:	4b96      	ldr	r3, [pc, #600]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 80079d0:	f240 6273 	movw	r2, #1651	; 0x673
 80079d4:	4995      	ldr	r1, [pc, #596]	; (8007c2c <lwip_netconn_do_writemore+0x274>)
 80079d6:	4896      	ldr	r0, [pc, #600]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 80079d8:	f00c fd52 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d006      	beq.n	80079f2 <lwip_netconn_do_writemore+0x3a>
 80079e4:	4b90      	ldr	r3, [pc, #576]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 80079e6:	f240 6274 	movw	r2, #1652	; 0x674
 80079ea:	4992      	ldr	r1, [pc, #584]	; (8007c34 <lwip_netconn_do_writemore+0x27c>)
 80079ec:	4890      	ldr	r0, [pc, #576]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 80079ee:	f00c fd47 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <lwip_netconn_do_writemore+0x50>
 80079fa:	4b8b      	ldr	r3, [pc, #556]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 80079fc:	f240 6275 	movw	r2, #1653	; 0x675
 8007a00:	498d      	ldr	r1, [pc, #564]	; (8007c38 <lwip_netconn_do_writemore+0x280>)
 8007a02:	488b      	ldr	r0, [pc, #556]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 8007a04:	f00c fd3c 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <lwip_netconn_do_writemore+0x66>
 8007a10:	4b85      	ldr	r3, [pc, #532]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 8007a12:	f240 6276 	movw	r2, #1654	; 0x676
 8007a16:	4989      	ldr	r1, [pc, #548]	; (8007c3c <lwip_netconn_do_writemore+0x284>)
 8007a18:	4885      	ldr	r0, [pc, #532]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 8007a1a:	f00c fd31 	bl	8014480 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d306      	bcc.n	8007a3c <lwip_netconn_do_writemore+0x84>
 8007a2e:	4b7e      	ldr	r3, [pc, #504]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 8007a30:	f240 6277 	movw	r2, #1655	; 0x677
 8007a34:	4982      	ldr	r1, [pc, #520]	; (8007c40 <lwip_netconn_do_writemore+0x288>)
 8007a36:	487e      	ldr	r0, [pc, #504]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 8007a38:	f00c fd22 	bl	8014480 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	899b      	ldrh	r3, [r3, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <lwip_netconn_do_writemore+0x9c>
 8007a46:	4b78      	ldr	r3, [pc, #480]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 8007a48:	f240 6279 	movw	r2, #1657	; 0x679
 8007a4c:	497d      	ldr	r1, [pc, #500]	; (8007c44 <lwip_netconn_do_writemore+0x28c>)
 8007a4e:	4878      	ldr	r0, [pc, #480]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 8007a50:	f00c fd16 	bl	8014480 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	7f1b      	ldrb	r3, [r3, #28]
 8007a5a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7f1b      	ldrb	r3, [r3, #28]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <lwip_netconn_do_writemore+0xba>
 8007a68:	7ebb      	ldrb	r3, [r7, #26]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <lwip_netconn_do_writemore+0xbe>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <lwip_netconn_do_writemore+0xc0>
 8007a76:	2300      	movs	r3, #0
 8007a78:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	4413      	add	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d307      	bcc.n	8007ab6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8007aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aaa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007aac:	7ebb      	ldrb	r3, [r7, #26]
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	76bb      	strb	r3, [r7, #26]
 8007ab4:	e001      	b.n	8007aba <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007ac2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8007ac4:	89fa      	ldrh	r2, [r7, #14]
 8007ac6:	8bbb      	ldrh	r3, [r7, #28]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d216      	bcs.n	8007afa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8007ad0:	7e3b      	ldrb	r3, [r7, #24]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8007ad6:	8bbb      	ldrh	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10e      	bne.n	8007afa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <lwip_netconn_do_writemore+0x134>
 8007ae6:	f06f 0306 	mvn.w	r3, #6
 8007aea:	e000      	b.n	8007aee <lwip_netconn_do_writemore+0x136>
 8007aec:	2300      	movs	r3, #0
 8007aee:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8007af0:	e07d      	b.n	8007bee <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8007af2:	7ebb      	ldrb	r3, [r7, #26]
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	8bbb      	ldrh	r3, [r7, #28]
 8007b02:	441a      	add	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d906      	bls.n	8007b1e <lwip_netconn_do_writemore+0x166>
 8007b10:	4b45      	ldr	r3, [pc, #276]	; (8007c28 <lwip_netconn_do_writemore+0x270>)
 8007b12:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8007b16:	494c      	ldr	r1, [pc, #304]	; (8007c48 <lwip_netconn_do_writemore+0x290>)
 8007b18:	4845      	ldr	r0, [pc, #276]	; (8007c30 <lwip_netconn_do_writemore+0x278>)
 8007b1a:	f00c fcb1 	bl	8014480 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007b1e:	8bbb      	ldrh	r3, [r7, #28]
 8007b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d103      	bne.n	8007b30 <lwip_netconn_do_writemore+0x178>
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2e:	d209      	bcs.n	8007b44 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007b34:	8bba      	ldrh	r2, [r7, #28]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d10b      	bne.n	8007b52 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	899b      	ldrh	r3, [r3, #12]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d906      	bls.n	8007b52 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8007b44:	2301      	movs	r3, #1
 8007b46:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007b48:	7ebb      	ldrb	r3, [r7, #26]
 8007b4a:	f043 0302 	orr.w	r3, r3, #2
 8007b4e:	76bb      	strb	r3, [r7, #26]
 8007b50:	e001      	b.n	8007b56 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6858      	ldr	r0, [r3, #4]
 8007b5a:	7ebb      	ldrb	r3, [r7, #26]
 8007b5c:	8bba      	ldrh	r2, [r7, #28]
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	f007 fa04 	bl	800ef6c <tcp_write>
 8007b64:	4603      	mov	r3, r0
 8007b66:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8007b68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d12c      	bne.n	8007bca <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	6999      	ldr	r1, [r3, #24]
 8007b76:	8bba      	ldrh	r2, [r7, #28]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	6919      	ldr	r1, [r3, #16]
 8007b86:	8bba      	ldrh	r2, [r7, #28]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d113      	bne.n	8007bca <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	899a      	ldrh	r2, [r3, #12]
 8007ba8:	3a01      	subs	r2, #1
 8007baa:	b292      	uxth	r2, r2
 8007bac:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	899b      	ldrh	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	3208      	adds	r2, #8
 8007bc0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8007bca:	7e7b      	ldrb	r3, [r7, #25]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <lwip_netconn_do_writemore+0x222>
 8007bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f43f af50 	beq.w	8007a7a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <lwip_netconn_do_writemore+0x234>
 8007be2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d146      	bne.n	8007c7a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8007bec:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8007bee:	7e3b      	ldrb	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d02b      	beq.n	8007c4c <lwip_netconn_do_writemore+0x294>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d223      	bcs.n	8007c4c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <lwip_netconn_do_writemore+0x260>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2200      	movs	r2, #0
 8007c12:	2103      	movs	r1, #3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7f1b      	ldrb	r3, [r3, #28]
 8007c1c:	f043 0310 	orr.w	r3, r3, #16
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	771a      	strb	r2, [r3, #28]
 8007c26:	e028      	b.n	8007c7a <lwip_netconn_do_writemore+0x2c2>
 8007c28:	08015984 	.word	0x08015984
 8007c2c:	08015adc 	.word	0x08015adc
 8007c30:	080159c8 	.word	0x080159c8
 8007c34:	08015de4 	.word	0x08015de4
 8007c38:	08015aec 	.word	0x08015aec
 8007c3c:	08015e04 	.word	0x08015e04
 8007c40:	08015e1c 	.word	0x08015e1c
 8007c44:	08015e5c 	.word	0x08015e5c
 8007c48:	08015e84 	.word	0x08015e84
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007c54:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007c58:	d305      	bcc.n	8007c66 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d909      	bls.n	8007c7a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <lwip_netconn_do_writemore+0x2c2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2200      	movs	r2, #0
 8007c74:	2103      	movs	r1, #3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8007c7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d11d      	bne.n	8007cbe <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	699a      	ldr	r2, [r3, #24]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d002      	beq.n	8007c98 <lwip_netconn_do_writemore+0x2e0>
 8007c92:	7e3b      	ldrb	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f007 ff4d 	bl	800fb40 <tcp_output>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8007caa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007cae:	f113 0f04 	cmn.w	r3, #4
 8007cb2:	d12c      	bne.n	8007d0e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007cb4:	7b3b      	ldrb	r3, [r7, #12]
 8007cb6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	76fb      	strb	r3, [r7, #27]
 8007cbc:	e027      	b.n	8007d0e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8007cbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d120      	bne.n	8007d0a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f007 ff37 	bl	800fb40 <tcp_output>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8007cd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007cda:	f113 0f04 	cmn.w	r3, #4
 8007cde:	d104      	bne.n	8007cea <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007ce0:	7b7b      	ldrb	r3, [r7, #13]
 8007ce2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	76fb      	strb	r3, [r7, #27]
 8007ce8:	e011      	b.n	8007d0e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8007cea:	7e3b      	ldrb	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <lwip_netconn_do_writemore+0x348>
 8007cfa:	f06f 0306 	mvn.w	r3, #6
 8007cfe:	e000      	b.n	8007d02 <lwip_netconn_do_writemore+0x34a>
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8007d04:	2301      	movs	r3, #1
 8007d06:	76fb      	strb	r3, [r7, #27]
 8007d08:	e001      	b.n	8007d0e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8007d0e:	7efb      	ldrb	r3, [r7, #27]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d015      	beq.n	8007d40 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	330c      	adds	r3, #12
 8007d1c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	7ffa      	ldrb	r2, [r7, #31]
 8007d24:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d006      	beq.n	8007d46 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f00c fa95 	bl	8014268 <sys_sem_signal>
 8007d3e:	e002      	b.n	8007d46 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	e000      	b.n	8007d48 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fd25 	bl	80067b0 <netconn_err>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d166      	bne.n	8007e40 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d15d      	bne.n	8007e3c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8007d8a:	23fb      	movs	r3, #251	; 0xfb
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e057      	b.n	8007e40 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d04d      	beq.n	8007e36 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <lwip_netconn_do_write+0x6a>
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <lwip_netconn_do_write+0x100>)
 8007dae:	f240 7223 	movw	r2, #1827	; 0x723
 8007db2:	4928      	ldr	r1, [pc, #160]	; (8007e54 <lwip_netconn_do_write+0x104>)
 8007db4:	4828      	ldr	r0, [pc, #160]	; (8007e58 <lwip_netconn_do_write+0x108>)
 8007db6:	f00c fb63 	bl	8014480 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <lwip_netconn_do_write+0x80>
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <lwip_netconn_do_write+0x100>)
 8007dc4:	f240 7224 	movw	r2, #1828	; 0x724
 8007dc8:	4924      	ldr	r1, [pc, #144]	; (8007e5c <lwip_netconn_do_write+0x10c>)
 8007dca:	4823      	ldr	r0, [pc, #140]	; (8007e58 <lwip_netconn_do_write+0x108>)
 8007dcc:	f00c fb58 	bl	8014480 <iprintf>
        msg->conn->current_msg = msg;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fdea 	bl	80079b8 <lwip_netconn_do_writemore>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d02e      	beq.n	8007e48 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d006      	beq.n	8007e02 <lwip_netconn_do_write+0xb2>
 8007df4:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <lwip_netconn_do_write+0x100>)
 8007df6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007dfa:	4919      	ldr	r1, [pc, #100]	; (8007e60 <lwip_netconn_do_write+0x110>)
 8007dfc:	4816      	ldr	r0, [pc, #88]	; (8007e58 <lwip_netconn_do_write+0x108>)
 8007dfe:	f00c fb3f 	bl	8014480 <iprintf>
          UNLOCK_TCPIP_CORE();
 8007e02:	4818      	ldr	r0, [pc, #96]	; (8007e64 <lwip_netconn_do_write+0x114>)
 8007e04:	f00c faa1 	bl	801434a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f00c f9f8 	bl	8014206 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007e16:	4813      	ldr	r0, [pc, #76]	; (8007e64 <lwip_netconn_do_write+0x114>)
 8007e18:	f00c fa88 	bl	801432c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d110      	bne.n	8007e48 <lwip_netconn_do_write+0xf8>
 8007e26:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <lwip_netconn_do_write+0x100>)
 8007e28:	f240 722c 	movw	r2, #1836	; 0x72c
 8007e2c:	490c      	ldr	r1, [pc, #48]	; (8007e60 <lwip_netconn_do_write+0x110>)
 8007e2e:	480a      	ldr	r0, [pc, #40]	; (8007e58 <lwip_netconn_do_write+0x108>)
 8007e30:	f00c fb26 	bl	8014480 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8007e34:	e008      	b.n	8007e48 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8007e36:	23f5      	movs	r3, #245	; 0xf5
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e001      	b.n	8007e40 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007e3c:	23fa      	movs	r3, #250	; 0xfa
 8007e3e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7bfa      	ldrb	r2, [r7, #15]
 8007e44:	711a      	strb	r2, [r3, #4]
 8007e46:	e000      	b.n	8007e4a <lwip_netconn_do_write+0xfa>
        return;
 8007e48:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	08015984 	.word	0x08015984
 8007e54:	08015d28 	.word	0x08015d28
 8007e58:	080159c8 	.word	0x080159c8
 8007e5c:	08015eb0 	.word	0x08015eb0
 8007e60:	08015d44 	.word	0x08015d44
 8007e64:	20008d30 	.word	0x20008d30

08007e68 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8007e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dc04      	bgt.n	8007e84 <err_to_errno+0x1c>
 8007e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7e:	f113 0f10 	cmn.w	r3, #16
 8007e82:	da01      	bge.n	8007e88 <err_to_errno+0x20>
    return EIO;
 8007e84:	2305      	movs	r3, #5
 8007e86:	e005      	b.n	8007e94 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8007e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <err_to_errno+0x38>)
 8007e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	08018f64 	.word	0x08018f64

08007ea4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d013      	beq.n	8007eda <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f002 face 	bl	800a460 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	2006      	movs	r0, #6
 8007ed6:	f001 fc83 	bl	80097e0 <memp_free>
  }
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <netbuf_free+0x1c>
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <netbuf_free+0x44>)
 8007ef4:	2281      	movs	r2, #129	; 0x81
 8007ef6:	490d      	ldr	r1, [pc, #52]	; (8007f2c <netbuf_free+0x48>)
 8007ef8:	480d      	ldr	r0, [pc, #52]	; (8007f30 <netbuf_free+0x4c>)
 8007efa:	f00c fac1 	bl	8014480 <iprintf>
 8007efe:	e00f      	b.n	8007f20 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f002 faa7 	bl	800a460 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	08015edc 	.word	0x08015edc
 8007f2c:	08015f78 	.word	0x08015f78
 8007f30:	08015f2c 	.word	0x08015f2c

08007f34 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d108      	bne.n	8007f5a <netbuf_ref+0x26>
 8007f48:	4b1c      	ldr	r3, [pc, #112]	; (8007fbc <netbuf_ref+0x88>)
 8007f4a:	2299      	movs	r2, #153	; 0x99
 8007f4c:	491c      	ldr	r1, [pc, #112]	; (8007fc0 <netbuf_ref+0x8c>)
 8007f4e:	481d      	ldr	r0, [pc, #116]	; (8007fc4 <netbuf_ref+0x90>)
 8007f50:	f00c fa96 	bl	8014480 <iprintf>
 8007f54:	f06f 030f 	mvn.w	r3, #15
 8007f58:	e02b      	b.n	8007fb2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 fa7a 	bl	800a460 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8007f6c:	2241      	movs	r2, #65	; 0x41
 8007f6e:	2100      	movs	r1, #0
 8007f70:	2036      	movs	r0, #54	; 0x36
 8007f72:	f001 ff91 	bl	8009e98 <pbuf_alloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8007f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8e:	e010      	b.n	8007fb2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	811a      	strh	r2, [r3, #8]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	891b      	ldrh	r3, [r3, #8]
 8007fa6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	08015edc 	.word	0x08015edc
 8007fc0:	08015f94 	.word	0x08015f94
 8007fc4:	08015f2c 	.word	0x08015f2c

08007fc8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db02      	blt.n	8007fe0 <tryget_socket_unconn_nouse+0x18>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	dd01      	ble.n	8007fe4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e003      	b.n	8007fec <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	4a03      	ldr	r2, [pc, #12]	; (8007ff8 <tryget_socket_unconn_nouse+0x30>)
 8007fea:	4413      	add	r3, r2
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20008ce0 	.word	0x20008ce0

08007ffc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ffdf 	bl	8007fc8 <tryget_socket_unconn_nouse>
 800800a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800800c:	68fb      	ldr	r3, [r7, #12]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff ffec 	bl	8007ffc <tryget_socket_unconn>
 8008024:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <tryget_socket+0x22>
    if (sock->conn) {
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <tryget_socket+0x22>
      return sock;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	e000      	b.n	800803a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ffe2 	bl	8008016 <tryget_socket>
 8008052:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <get_socket+0x2c>)
 800805c:	2209      	movs	r2, #9
 800805e:	601a      	str	r2, [r3, #0]
    return NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	e000      	b.n	8008066 <get_socket+0x22>
  }
  return sock;
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000ffa4 	.word	0x2000ffa4

08008074 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e052      	b.n	800812a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8008084:	f00c f994 	bl	80143b0 <sys_arch_protect>
 8008088:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800808a:	4a2c      	ldr	r2, [pc, #176]	; (800813c <alloc_socket+0xc8>)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d142      	bne.n	800811e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8008098:	4a28      	ldr	r2, [pc, #160]	; (800813c <alloc_socket+0xc8>)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	4413      	add	r3, r2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 80080a4:	68b8      	ldr	r0, [r7, #8]
 80080a6:	f00c f991 	bl	80143cc <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 80080aa:	4a24      	ldr	r2, [pc, #144]	; (800813c <alloc_socket+0xc8>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80080b8:	4a20      	ldr	r2, [pc, #128]	; (800813c <alloc_socket+0xc8>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	4413      	add	r3, r2
 80080c0:	330e      	adds	r3, #14
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <alloc_socket+0x62>
 80080c8:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <alloc_socket+0xcc>)
 80080ca:	f240 220e 	movw	r2, #526	; 0x20e
 80080ce:	491d      	ldr	r1, [pc, #116]	; (8008144 <alloc_socket+0xd0>)
 80080d0:	481d      	ldr	r0, [pc, #116]	; (8008148 <alloc_socket+0xd4>)
 80080d2:	f00c f9d5 	bl	8014480 <iprintf>
      sockets[i].rcvevent   = 0;
 80080d6:	4a19      	ldr	r2, [pc, #100]	; (800813c <alloc_socket+0xc8>)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	4413      	add	r3, r2
 80080de:	3308      	adds	r3, #8
 80080e0:	2200      	movs	r2, #0
 80080e2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ec:	2b10      	cmp	r3, #16
 80080ee:	d102      	bne.n	80080f6 <alloc_socket+0x82>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <alloc_socket+0x86>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <alloc_socket+0x88>
 80080fa:	2300      	movs	r3, #0
 80080fc:	b299      	uxth	r1, r3
 80080fe:	4a0f      	ldr	r2, [pc, #60]	; (800813c <alloc_socket+0xc8>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4413      	add	r3, r2
 8008106:	330a      	adds	r3, #10
 8008108:	460a      	mov	r2, r1
 800810a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800810c:	4a0b      	ldr	r2, [pc, #44]	; (800813c <alloc_socket+0xc8>)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	4413      	add	r3, r2
 8008114:	330c      	adds	r3, #12
 8008116:	2200      	movs	r2, #0
 8008118:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	e00a      	b.n	8008134 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800811e:	68b8      	ldr	r0, [r7, #8]
 8008120:	f00c f954 	bl	80143cc <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b03      	cmp	r3, #3
 800812e:	dda9      	ble.n	8008084 <alloc_socket+0x10>
  }
  return -1;
 8008130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20008ce0 	.word	0x20008ce0
 8008140:	08016074 	.word	0x08016074
 8008144:	080160a8 	.word	0x080160a8
 8008148:	080160c8 	.word	0x080160c8

0800814c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6852      	ldr	r2, [r2, #4]
 8008160:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
  return 1;
 8008176:	2301      	movs	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00d      	beq.n	80081b4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f95c 	bl	800a460 <pbuf_free>
 80081a8:	e004      	b.n	80081b4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fe78 	bl	8007ea4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	f7fe f97a 	bl	80064b4 <netconn_delete>
  }
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 80081d2:	f00c f8ed 	bl	80143b0 <sys_arch_protect>
 80081d6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	f107 020c 	add.w	r2, r7, #12
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ffb2 	bl	800814c <free_socket_locked>
 80081e8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	f00c f8ee 	bl	80143cc <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d006      	beq.n	8008204 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f107 0208 	add.w	r2, r7, #8
 80081fc:	4619      	mov	r1, r3
 80081fe:	6838      	ldr	r0, [r7, #0]
 8008200:	f7ff ffc0 	bl	8008184 <free_socket_free_elements>
  }
}
 8008204:	bf00      	nop
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff ff13 	bl	8008044 <get_socket>
 800821e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <lwip_close+0x20>
    return -1;
 8008226:	f04f 33ff 	mov.w	r3, #4294967295
 800822a:	e039      	b.n	80082a0 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800823e:	2b10      	cmp	r3, #16
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	e00a      	b.n	8008262 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d006      	beq.n	8008262 <lwip_close+0x56>
 8008254:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <lwip_close+0x9c>)
 8008256:	f44f 7245 	mov.w	r2, #788	; 0x314
 800825a:	4914      	ldr	r1, [pc, #80]	; (80082ac <lwip_close+0xa0>)
 800825c:	4814      	ldr	r0, [pc, #80]	; (80082b0 <lwip_close+0xa4>)
 800825e:	f00c f90f 	bl	8014480 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe f900 	bl	800646c <netconn_prepare_delete>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00e      	beq.n	8008296 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8008278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fdf3 	bl	8007e68 <err_to_errno>
 8008282:	60b8      	str	r0, [r7, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <lwip_close+0x84>
 800828a:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <lwip_close+0xa8>)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	e004      	b.n	80082a0 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	6938      	ldr	r0, [r7, #16]
 800829a:	f7ff ff95 	bl	80081c8 <free_socket>
  set_errno(0);
  return 0;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	08016074 	.word	0x08016074
 80082ac:	08016134 	.word	0x08016134
 80082b0:	080160c8 	.word	0x080160c8
 80082b4:	2000ffa4 	.word	0x2000ffa4

080082b8 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	; 0x30
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff febd 	bl	8008044 <get_socket>
 80082ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <lwip_connect+0x20>
    return -1;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	e062      	b.n	800839e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d108      	bne.n	80082f2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe f939 	bl	800655c <netconn_disconnect>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082f0:	e039      	b.n	8008366 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d10c      	bne.n	8008312 <lwip_connect+0x5a>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <lwip_connect+0x50>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d104      	bne.n	8008312 <lwip_connect+0x5a>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d014      	beq.n	800833c <lwip_connect+0x84>
 8008312:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <lwip_connect+0xf0>)
 8008314:	f240 3247 	movw	r2, #839	; 0x347
 8008318:	4924      	ldr	r1, [pc, #144]	; (80083ac <lwip_connect+0xf4>)
 800831a:	4825      	ldr	r0, [pc, #148]	; (80083b0 <lwip_connect+0xf8>)
 800831c:	f00c f8b0 	bl	8014480 <iprintf>
 8008320:	f06f 000f 	mvn.w	r0, #15
 8008324:	f7ff fda0 	bl	8007e68 <err_to_errno>
 8008328:	6238      	str	r0, [r7, #32]
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <lwip_connect+0x7e>
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <lwip_connect+0xfc>)
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	e030      	b.n	800839e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	885b      	ldrh	r3, [r3, #2]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fcfc 	bl	8008d44 <lwip_htons>
 800834c:	4603      	mov	r3, r0
 800834e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008356:	f107 0114 	add.w	r1, r7, #20
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe f8c6 	bl	80064ec <netconn_connect>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8008366:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00e      	beq.n	800838c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800836e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fd78 	bl	8007e68 <err_to_errno>
 8008378:	61b8      	str	r0, [r7, #24]
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <lwip_connect+0xce>
 8008380:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <lwip_connect+0xfc>)
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	e008      	b.n	800839e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <lwip_connect+0xe4>
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <lwip_connect+0xfc>)
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3730      	adds	r7, #48	; 0x30
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	08016074 	.word	0x08016074
 80083ac:	0801614c 	.word	0x0801614c
 80083b0:	080160c8 	.word	0x080160c8
 80083b4:	2000ffa4 	.word	0x2000ffa4

080083b8 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff fe3c 	bl	8008044 <get_socket>
 80083cc:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <lwip_send+0x22>
    return -1;
 80083d4:	f04f 33ff 	mov.w	r3, #4294967295
 80083d8:	e046      	b.n	8008468 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d00b      	beq.n	8008400 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80083e8:	2300      	movs	r3, #0
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	2300      	movs	r3, #0
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 f83c 	bl	8008474 <lwip_sendto>
 80083fc:	4603      	mov	r3, r0
 80083fe:	e033      	b.n	8008468 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <lwip_send+0x56>
 800840a:	2203      	movs	r2, #3
 800840c:	e000      	b.n	8008410 <lwip_send+0x58>
 800840e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	105b      	asrs	r3, r3, #1
 8008414:	b25b      	sxtb	r3, r3
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	b25b      	sxtb	r3, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8008420:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	7efa      	ldrb	r2, [r7, #27]
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	f7fe f8e8 	bl	800660c <netconn_write_partly>
 800843c:	4603      	mov	r3, r0
 800843e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8008440:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fd0f 	bl	8007e68 <err_to_errno>
 800844a:	6178      	str	r0, [r7, #20]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <lwip_send+0xa0>
 8008452:	4a07      	ldr	r2, [pc, #28]	; (8008470 <lwip_send+0xb8>)
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8008458:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <lwip_send+0xac>
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	e001      	b.n	8008468 <lwip_send+0xb0>
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	2000ffa4 	.word	0x2000ffa4

08008474 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	; 0x38
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff fdde 	bl	8008044 <get_socket>
 8008488:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <lwip_sendto+0x22>
    return -1;
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	e093      	b.n	80085be <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d107      	bne.n	80084b4 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff ff84 	bl	80083b8 <lwip_send>
 80084b0:	4603      	mov	r3, r0
 80084b2:	e084      	b.n	80085be <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ba:	d30a      	bcc.n	80084d2 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80084bc:	235a      	movs	r3, #90	; 0x5a
 80084be:	623b      	str	r3, [r7, #32]
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <lwip_sendto+0x58>
 80084c6:	4a40      	ldr	r2, [pc, #256]	; (80085c8 <lwip_sendto+0x154>)
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80084cc:	f04f 33ff 	mov.w	r3, #4294967295
 80084d0:	e075      	b.n	80085be <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80084d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <lwip_sendto+0x6e>
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d023      	beq.n	800852a <lwip_sendto+0xb6>
 80084e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d10b      	bne.n	8008500 <lwip_sendto+0x8c>
 80084e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <lwip_sendto+0x8c>
 80084ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d104      	bne.n	8008500 <lwip_sendto+0x8c>
 80084f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d014      	beq.n	800852a <lwip_sendto+0xb6>
 8008500:	4b32      	ldr	r3, [pc, #200]	; (80085cc <lwip_sendto+0x158>)
 8008502:	f240 6252 	movw	r2, #1618	; 0x652
 8008506:	4932      	ldr	r1, [pc, #200]	; (80085d0 <lwip_sendto+0x15c>)
 8008508:	4832      	ldr	r0, [pc, #200]	; (80085d4 <lwip_sendto+0x160>)
 800850a:	f00b ffb9 	bl	8014480 <iprintf>
 800850e:	f06f 000f 	mvn.w	r0, #15
 8008512:	f7ff fca9 	bl	8007e68 <err_to_errno>
 8008516:	62b8      	str	r0, [r7, #40]	; 0x28
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <lwip_sendto+0xb0>
 800851e:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <lwip_sendto+0x154>)
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	f04f 33ff 	mov.w	r3, #4294967295
 8008528:	e049      	b.n	80085be <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008540:	885b      	ldrh	r3, [r3, #2]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fbfe 	bl	8008d44 <lwip_htons>
 8008548:	4603      	mov	r3, r0
 800854a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800854c:	e003      	b.n	8008556 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008552:	2300      	movs	r3, #0
 8008554:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8008556:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008558:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800855a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fce6 	bl	8007f34 <netbuf_ref>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800856e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f107 0210 	add.w	r2, r7, #16
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe f815 	bl	80065b0 <netconn_send>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fca7 	bl	8007ee4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8008596:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fc64 	bl	8007e68 <err_to_errno>
 80085a0:	6278      	str	r0, [r7, #36]	; 0x24
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <lwip_sendto+0x13a>
 80085a8:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <lwip_sendto+0x154>)
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80085ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <lwip_sendto+0x146>
 80085b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085b8:	e001      	b.n	80085be <lwip_sendto+0x14a>
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3738      	adds	r7, #56	; 0x38
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	2000ffa4 	.word	0x2000ffa4
 80085cc:	08016074 	.word	0x08016074
 80085d0:	08016354 	.word	0x08016354
 80085d4:	080160c8 	.word	0x080160c8

080085d8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d009      	beq.n	80085fe <lwip_socket+0x26>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	dc23      	bgt.n	8008638 <lwip_socket+0x60>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d019      	beq.n	800862a <lwip_socket+0x52>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d009      	beq.n	8008610 <lwip_socket+0x38>
 80085fc:	e01c      	b.n	8008638 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	4a22      	ldr	r2, [pc, #136]	; (800868c <lwip_socket+0xb4>)
 8008604:	4619      	mov	r1, r3
 8008606:	2040      	movs	r0, #64	; 0x40
 8008608:	f7fd feb6 	bl	8006378 <netconn_new_with_proto_and_callback>
 800860c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800860e:	e019      	b.n	8008644 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b88      	cmp	r3, #136	; 0x88
 8008614:	d101      	bne.n	800861a <lwip_socket+0x42>
 8008616:	2321      	movs	r3, #33	; 0x21
 8008618:	e000      	b.n	800861c <lwip_socket+0x44>
 800861a:	2320      	movs	r3, #32
 800861c:	4a1b      	ldr	r2, [pc, #108]	; (800868c <lwip_socket+0xb4>)
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f7fd fea9 	bl	8006378 <netconn_new_with_proto_and_callback>
 8008626:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008628:	e00c      	b.n	8008644 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800862a:	4a18      	ldr	r2, [pc, #96]	; (800868c <lwip_socket+0xb4>)
 800862c:	2100      	movs	r1, #0
 800862e:	2010      	movs	r0, #16
 8008630:	f7fd fea2 	bl	8006378 <netconn_new_with_proto_and_callback>
 8008634:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8008636:	e005      	b.n	8008644 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8008638:	4b15      	ldr	r3, [pc, #84]	; (8008690 <lwip_socket+0xb8>)
 800863a:	2216      	movs	r2, #22
 800863c:	601a      	str	r2, [r3, #0]
      return -1;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	e01e      	b.n	8008682 <lwip_socket+0xaa>
  }

  if (!conn) {
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800864a:	4b11      	ldr	r3, [pc, #68]	; (8008690 <lwip_socket+0xb8>)
 800864c:	2269      	movs	r2, #105	; 0x69
 800864e:	601a      	str	r2, [r3, #0]
    return -1;
 8008650:	f04f 33ff 	mov.w	r3, #4294967295
 8008654:	e015      	b.n	8008682 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8008656:	2100      	movs	r1, #0
 8008658:	6978      	ldr	r0, [r7, #20]
 800865a:	f7ff fd0b 	bl	8008074 <alloc_socket>
 800865e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d108      	bne.n	800867a <lwip_socket+0xa2>
    netconn_delete(conn);
 8008668:	6978      	ldr	r0, [r7, #20]
 800866a:	f7fd ff23 	bl	80064b4 <netconn_delete>
    set_errno(ENFILE);
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <lwip_socket+0xb8>)
 8008670:	2217      	movs	r2, #23
 8008672:	601a      	str	r2, [r3, #0]
    return -1;
 8008674:	f04f 33ff 	mov.w	r3, #4294967295
 8008678:	e003      	b.n	8008682 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008680:	693b      	ldr	r3, [r7, #16]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	0800871d 	.word	0x0800871d
 8008690:	2000ffa4 	.word	0x2000ffa4

08008694 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	e02c      	b.n	8008702 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d11e      	bne.n	80086fc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <lwip_poll_should_wake+0x44>
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <lwip_poll_should_wake+0x44>
        return 1;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e01a      	b.n	800870e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <lwip_poll_should_wake+0x5e>
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <lwip_poll_should_wake+0x5e>
        return 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e00d      	b.n	800870e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e008      	b.n	800870e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	3301      	adds	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	429a      	cmp	r2, r3
 800870a:	d3cd      	bcc.n	80086a8 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
 8008728:	4613      	mov	r3, r2
 800872a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 80a4 	beq.w	800887c <event_callback+0x160>
    s = conn->socket;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	da18      	bge.n	8008772 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8008740:	f00b fe36 	bl	80143b0 <sys_arch_protect>
 8008744:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	da0b      	bge.n	8008766 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800875e:	69f8      	ldr	r0, [r7, #28]
 8008760:	f00b fe34 	bl	80143cc <sys_arch_unprotect>
        return;
 8008764:	e08d      	b.n	8008882 <event_callback+0x166>
      }
      s = conn->socket;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800876c:	69f8      	ldr	r0, [r7, #28]
 800876e:	f00b fe2d 	bl	80143cc <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8008772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008774:	f7ff fc66 	bl	8008044 <get_socket>
 8008778:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d07f      	beq.n	8008880 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8008780:	2301      	movs	r3, #1
 8008782:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8008784:	f00b fe14 	bl	80143b0 <sys_arch_protect>
 8008788:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	2b04      	cmp	r3, #4
 800878e:	d83e      	bhi.n	800880e <event_callback+0xf2>
 8008790:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <event_callback+0x7c>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087ad 	.word	0x080087ad
 800879c:	080087cf 	.word	0x080087cf
 80087a0:	080087e7 	.word	0x080087e7
 80087a4:	080087fb 	.word	0x080087fb
 80087a8:	08008807 	.word	0x08008807
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3301      	adds	r3, #1
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	b21a      	sxth	r2, r3
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	dd2a      	ble.n	800881e <event_callback+0x102>
        check_waiters = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	623b      	str	r3, [r7, #32]
      }
      break;
 80087cc:	e027      	b.n	800881e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	b21a      	sxth	r2, r3
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	623b      	str	r3, [r7, #32]
      break;
 80087e4:	e01c      	b.n	8008820 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	895b      	ldrh	r3, [r3, #10]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <event_callback+0xd6>
        check_waiters = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2201      	movs	r2, #1
 80087f6:	815a      	strh	r2, [r3, #10]
      break;
 80087f8:	e012      	b.n	8008820 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2200      	movs	r2, #0
 80087fe:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	623b      	str	r3, [r7, #32]
      break;
 8008804:	e00c      	b.n	8008820 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2201      	movs	r2, #1
 800880a:	819a      	strh	r2, [r3, #12]
      break;
 800880c:	e008      	b.n	8008820 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800880e:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <event_callback+0x16c>)
 8008810:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8008814:	491d      	ldr	r1, [pc, #116]	; (800888c <event_callback+0x170>)
 8008816:	481e      	ldr	r0, [pc, #120]	; (8008890 <event_callback+0x174>)
 8008818:	f00b fe32 	bl	8014480 <iprintf>
      break;
 800881c:	e000      	b.n	8008820 <event_callback+0x104>
      break;
 800881e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	7b9b      	ldrb	r3, [r3, #14]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d025      	beq.n	8008874 <event_callback+0x158>
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d022      	beq.n	8008874 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfcc      	ite	gt
 8008838:	2301      	movgt	r3, #1
 800883a:	2300      	movle	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	895b      	ldrh	r3, [r3, #10]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf14      	ite	ne
 8008848:	2301      	movne	r3, #1
 800884a:	2300      	moveq	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	899b      	ldrh	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	bf14      	ite	ne
 8008858:	2301      	movne	r3, #1
 800885a:	2300      	moveq	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8008860:	69f8      	ldr	r0, [r7, #28]
 8008862:	f00b fdb3 	bl	80143cc <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	6979      	ldr	r1, [r7, #20]
 800886c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800886e:	f000 f811 	bl	8008894 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8008872:	e006      	b.n	8008882 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8008874:	69f8      	ldr	r0, [r7, #28]
 8008876:	f00b fda9 	bl	80143cc <sys_arch_unprotect>
 800887a:	e002      	b.n	8008882 <event_callback+0x166>
    return;
 800887c:	bf00      	nop
 800887e:	e000      	b.n	8008882 <event_callback+0x166>
      return;
 8008880:	bf00      	nop
  }
  done_socket(sock);
}
 8008882:	3728      	adds	r7, #40	; 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	08016074 	.word	0x08016074
 800888c:	080163f0 	.word	0x080163f0
 8008890:	080160c8 	.word	0x080160c8

08008894 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80088a2:	4b4b      	ldr	r3, [pc, #300]	; (80089d0 <select_check_waiters+0x13c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e088      	b.n	80089bc <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 8081 	bne.w	80089b6 <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d009      	beq.n	80088d4 <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f7ff fee2 	bl	8008694 <lwip_poll_should_wake>
 80088d0:	6138      	str	r0, [r7, #16]
 80088d2:	e065      	b.n	80089a0 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d01c      	beq.n	8008914 <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d018      	beq.n	8008914 <select_check_waiters+0x80>
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	da00      	bge.n	80088ee <select_check_waiters+0x5a>
 80088ec:	331f      	adds	r3, #31
 80088ee:	115b      	asrs	r3, r3, #5
 80088f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4259      	negs	r1, r3
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	f001 011f 	and.w	r1, r1, #31
 8008900:	bf58      	it	pl
 8008902:	424b      	negpl	r3, r1
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <select_check_waiters+0x80>
            do_signal = 1;
 8008910:	2301      	movs	r3, #1
 8008912:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d01f      	beq.n	800895a <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11c      	bne.n	800895a <select_check_waiters+0xc6>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d018      	beq.n	800895a <select_check_waiters+0xc6>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da00      	bge.n	8008934 <select_check_waiters+0xa0>
 8008932:	331f      	adds	r3, #31
 8008934:	115b      	asrs	r3, r3, #5
 8008936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4259      	negs	r1, r3
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	f001 011f 	and.w	r1, r1, #31
 8008946:	bf58      	it	pl
 8008948:	424b      	negpl	r3, r1
 800894a:	fa22 f303 	lsr.w	r3, r2, r3
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <select_check_waiters+0xc6>
            do_signal = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01f      	beq.n	80089a0 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d11c      	bne.n	80089a0 <select_check_waiters+0x10c>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <select_check_waiters+0x10c>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da00      	bge.n	800897a <select_check_waiters+0xe6>
 8008978:	331f      	adds	r3, #31
 800897a:	115b      	asrs	r3, r3, #5
 800897c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4259      	negs	r1, r3
 8008984:	f003 031f 	and.w	r3, r3, #31
 8008988:	f001 011f 	and.w	r1, r1, #31
 800898c:	bf58      	it	pl
 800898e:	424b      	negpl	r3, r1
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <select_check_waiters+0x10c>
            do_signal = 1;
 800899c:	2301      	movs	r3, #1
 800899e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2201      	movs	r2, #1
 80089aa:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3320      	adds	r3, #32
 80089b0:	4618      	mov	r0, r3
 80089b2:	f00b fc59 	bl	8014268 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f47f af73 	bne.w	80088aa <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20008d20 	.word	0x20008d20

080089d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80089de:	f008 f967 	bl	8010cb0 <sys_timeouts_sleeptime>
 80089e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d10b      	bne.n	8008a04 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80089ec:	4813      	ldr	r0, [pc, #76]	; (8008a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80089ee:	f00b fcac 	bl	801434a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f00b fb64 	bl	80140c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80089fc:	480f      	ldr	r0, [pc, #60]	; (8008a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80089fe:	f00b fc95 	bl	801432c <sys_mutex_lock>
    return;
 8008a02:	e018      	b.n	8008a36 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008a0a:	f008 f917 	bl	8010c3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008a0e:	e7e6      	b.n	80089de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008a10:	480a      	ldr	r0, [pc, #40]	; (8008a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8008a12:	f00b fc9a 	bl	801434a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f00b fb52 	bl	80140c4 <sys_arch_mbox_fetch>
 8008a20:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008a22:	4806      	ldr	r0, [pc, #24]	; (8008a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8008a24:	f00b fc82 	bl	801432c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d102      	bne.n	8008a36 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008a30:	f008 f904 	bl	8010c3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008a34:	e7d3      	b.n	80089de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20008d30 	.word	0x20008d30

08008a40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008a48:	4810      	ldr	r0, [pc, #64]	; (8008a8c <tcpip_thread+0x4c>)
 8008a4a:	f00b fc6f 	bl	801432c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008a4e:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <tcpip_thread+0x50>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008a56:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <tcpip_thread+0x50>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a0e      	ldr	r2, [pc, #56]	; (8008a94 <tcpip_thread+0x54>)
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008a62:	f107 030c 	add.w	r3, r7, #12
 8008a66:	4619      	mov	r1, r3
 8008a68:	480b      	ldr	r0, [pc, #44]	; (8008a98 <tcpip_thread+0x58>)
 8008a6a:	f7ff ffb3 	bl	80089d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008a74:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <tcpip_thread+0x5c>)
 8008a76:	2291      	movs	r2, #145	; 0x91
 8008a78:	4909      	ldr	r1, [pc, #36]	; (8008aa0 <tcpip_thread+0x60>)
 8008a7a:	480a      	ldr	r0, [pc, #40]	; (8008aa4 <tcpip_thread+0x64>)
 8008a7c:	f00b fd00 	bl	8014480 <iprintf>
      continue;
 8008a80:	e003      	b.n	8008a8a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f80f 	bl	8008aa8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008a8a:	e7ea      	b.n	8008a62 <tcpip_thread+0x22>
 8008a8c:	20008d30 	.word	0x20008d30
 8008a90:	20008d24 	.word	0x20008d24
 8008a94:	20008d28 	.word	0x20008d28
 8008a98:	20008d2c 	.word	0x20008d2c
 8008a9c:	08016444 	.word	0x08016444
 8008aa0:	08016474 	.word	0x08016474
 8008aa4:	08016494 	.word	0x08016494

08008aa8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d026      	beq.n	8008b06 <tcpip_thread_handle_msg+0x5e>
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	dc2b      	bgt.n	8008b14 <tcpip_thread_handle_msg+0x6c>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <tcpip_thread_handle_msg+0x1e>
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d015      	beq.n	8008af0 <tcpip_thread_handle_msg+0x48>
 8008ac4:	e026      	b.n	8008b14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6850      	ldr	r0, [r2, #4]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6892      	ldr	r2, [r2, #8]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4798      	blx	r3
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 fcbd 	bl	800a460 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	2009      	movs	r0, #9
 8008aea:	f000 fe79 	bl	80097e0 <memp_free>
      break;
 8008aee:	e018      	b.n	8008b22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6892      	ldr	r2, [r2, #8]
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	2008      	movs	r0, #8
 8008b00:	f000 fe6e 	bl	80097e0 <memp_free>
      break;
 8008b04:	e00d      	b.n	8008b22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6892      	ldr	r2, [r2, #8]
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
      break;
 8008b12:	e006      	b.n	8008b22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <tcpip_thread_handle_msg+0x84>)
 8008b16:	22cf      	movs	r2, #207	; 0xcf
 8008b18:	4905      	ldr	r1, [pc, #20]	; (8008b30 <tcpip_thread_handle_msg+0x88>)
 8008b1a:	4806      	ldr	r0, [pc, #24]	; (8008b34 <tcpip_thread_handle_msg+0x8c>)
 8008b1c:	f00b fcb0 	bl	8014480 <iprintf>
      break;
 8008b20:	bf00      	nop
  }
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08016444 	.word	0x08016444
 8008b30:	08016474 	.word	0x08016474
 8008b34:	08016494 	.word	0x08016494

08008b38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008b44:	481a      	ldr	r0, [pc, #104]	; (8008bb0 <tcpip_inpkt+0x78>)
 8008b46:	f00b fb18 	bl	801417a <sys_mbox_valid>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <tcpip_inpkt+0x24>
 8008b50:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <tcpip_inpkt+0x7c>)
 8008b52:	22fc      	movs	r2, #252	; 0xfc
 8008b54:	4918      	ldr	r1, [pc, #96]	; (8008bb8 <tcpip_inpkt+0x80>)
 8008b56:	4819      	ldr	r0, [pc, #100]	; (8008bbc <tcpip_inpkt+0x84>)
 8008b58:	f00b fc92 	bl	8014480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008b5c:	2009      	movs	r0, #9
 8008b5e:	f000 fdc9 	bl	80096f4 <memp_malloc>
 8008b62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6e:	e01a      	b.n	8008ba6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2200      	movs	r2, #0
 8008b74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008b88:	6979      	ldr	r1, [r7, #20]
 8008b8a:	4809      	ldr	r0, [pc, #36]	; (8008bb0 <tcpip_inpkt+0x78>)
 8008b8c:	f00b fa80 	bl	8014090 <sys_mbox_trypost>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d006      	beq.n	8008ba4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008b96:	6979      	ldr	r1, [r7, #20]
 8008b98:	2009      	movs	r0, #9
 8008b9a:	f000 fe21 	bl	80097e0 <memp_free>
    return ERR_MEM;
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba2:	e000      	b.n	8008ba6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008ba4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20008d2c 	.word	0x20008d2c
 8008bb4:	08016444 	.word	0x08016444
 8008bb8:	080164bc 	.word	0x080164bc
 8008bbc:	08016494 	.word	0x08016494

08008bc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bd0:	f003 0318 	and.w	r3, r3, #24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <tcpip_input+0x3c>)
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ffab 	bl	8008b38 <tcpip_inpkt>
 8008be2:	4603      	mov	r3, r0
 8008be4:	e005      	b.n	8008bf2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008be6:	4a06      	ldr	r2, [pc, #24]	; (8008c00 <tcpip_input+0x40>)
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff ffa4 	bl	8008b38 <tcpip_inpkt>
 8008bf0:	4603      	mov	r3, r0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08013e7d 	.word	0x08013e7d
 8008c00:	08012b09 	.word	0x08012b09

08008c04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008c0e:	4819      	ldr	r0, [pc, #100]	; (8008c74 <tcpip_try_callback+0x70>)
 8008c10:	f00b fab3 	bl	801417a <sys_mbox_valid>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <tcpip_try_callback+0x24>
 8008c1a:	4b17      	ldr	r3, [pc, #92]	; (8008c78 <tcpip_try_callback+0x74>)
 8008c1c:	f240 125d 	movw	r2, #349	; 0x15d
 8008c20:	4916      	ldr	r1, [pc, #88]	; (8008c7c <tcpip_try_callback+0x78>)
 8008c22:	4817      	ldr	r0, [pc, #92]	; (8008c80 <tcpip_try_callback+0x7c>)
 8008c24:	f00b fc2c 	bl	8014480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008c28:	2008      	movs	r0, #8
 8008c2a:	f000 fd63 	bl	80096f4 <memp_malloc>
 8008c2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	e017      	b.n	8008c6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008c4e:	68f9      	ldr	r1, [r7, #12]
 8008c50:	4808      	ldr	r0, [pc, #32]	; (8008c74 <tcpip_try_callback+0x70>)
 8008c52:	f00b fa1d 	bl	8014090 <sys_mbox_trypost>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d006      	beq.n	8008c6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	2008      	movs	r0, #8
 8008c60:	f000 fdbe 	bl	80097e0 <memp_free>
    return ERR_MEM;
 8008c64:	f04f 33ff 	mov.w	r3, #4294967295
 8008c68:	e000      	b.n	8008c6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20008d2c 	.word	0x20008d2c
 8008c78:	08016444 	.word	0x08016444
 8008c7c:	080164bc 	.word	0x080164bc
 8008c80:	08016494 	.word	0x08016494

08008c84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8008c90:	4806      	ldr	r0, [pc, #24]	; (8008cac <tcpip_send_msg_wait_sem+0x28>)
 8008c92:	f00b fb4b 	bl	801432c <sys_mutex_lock>
  fn(apimsg);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	68b8      	ldr	r0, [r7, #8]
 8008c9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8008c9c:	4803      	ldr	r0, [pc, #12]	; (8008cac <tcpip_send_msg_wait_sem+0x28>)
 8008c9e:	f00b fb54 	bl	801434a <sys_mutex_unlock>
  return ERR_OK;
 8008ca2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20008d30 	.word	0x20008d30

08008cb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008cba:	f000 f871 	bl	8008da0 <lwip_init>

  tcpip_init_done = initfunc;
 8008cbe:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <tcpip_init+0x6c>)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008cc4:	4a16      	ldr	r2, [pc, #88]	; (8008d20 <tcpip_init+0x70>)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008cca:	2106      	movs	r1, #6
 8008ccc:	4815      	ldr	r0, [pc, #84]	; (8008d24 <tcpip_init+0x74>)
 8008cce:	f00b f9ab 	bl	8014028 <sys_mbox_new>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <tcpip_init+0x78>)
 8008cda:	f240 2261 	movw	r2, #609	; 0x261
 8008cde:	4913      	ldr	r1, [pc, #76]	; (8008d2c <tcpip_init+0x7c>)
 8008ce0:	4813      	ldr	r0, [pc, #76]	; (8008d30 <tcpip_init+0x80>)
 8008ce2:	f00b fbcd 	bl	8014480 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008ce6:	4813      	ldr	r0, [pc, #76]	; (8008d34 <tcpip_init+0x84>)
 8008ce8:	f00b fb04 	bl	80142f4 <sys_mutex_new>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d006      	beq.n	8008d00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <tcpip_init+0x78>)
 8008cf4:	f240 2265 	movw	r2, #613	; 0x265
 8008cf8:	490f      	ldr	r1, [pc, #60]	; (8008d38 <tcpip_init+0x88>)
 8008cfa:	480d      	ldr	r0, [pc, #52]	; (8008d30 <tcpip_init+0x80>)
 8008cfc:	f00b fbc0 	bl	8014480 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008d00:	2300      	movs	r3, #0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d08:	2200      	movs	r2, #0
 8008d0a:	490c      	ldr	r1, [pc, #48]	; (8008d3c <tcpip_init+0x8c>)
 8008d0c:	480c      	ldr	r0, [pc, #48]	; (8008d40 <tcpip_init+0x90>)
 8008d0e:	f00b fb29 	bl	8014364 <sys_thread_new>
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20008d24 	.word	0x20008d24
 8008d20:	20008d28 	.word	0x20008d28
 8008d24:	20008d2c 	.word	0x20008d2c
 8008d28:	08016444 	.word	0x08016444
 8008d2c:	080164cc 	.word	0x080164cc
 8008d30:	08016494 	.word	0x08016494
 8008d34:	20008d30 	.word	0x20008d30
 8008d38:	080164f0 	.word	0x080164f0
 8008d3c:	08008a41 	.word	0x08008a41
 8008d40:	08016514 	.word	0x08016514

08008d44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008d4e:	88fb      	ldrh	r3, [r7, #6]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	b21a      	sxth	r2, r3
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	b21b      	sxth	r3, r3
 8008d60:	b29b      	uxth	r3, r3
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	061a      	lsls	r2, r3, #24
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	0a1b      	lsrs	r3, r3, #8
 8008d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	0e1b      	lsrs	r3, r3, #24
 8008d92:	4313      	orrs	r3, r2
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008daa:	f00b fa95 	bl	80142d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008dae:	f000 f8d5 	bl	8008f5c <mem_init>
  memp_init();
 8008db2:	f000 fc31 	bl	8009618 <memp_init>
  pbuf_init();
  netif_init();
 8008db6:	f000 fd3d 	bl	8009834 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008dba:	f007 ffb1 	bl	8010d20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008dbe:	f001 fdf9 	bl	800a9b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008dc2:	f007 fef3 	bl	8010bac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <ptr_to_mem+0x20>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	4413      	add	r3, r2
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	2000cd60 	.word	0x2000cd60

08008df4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <mem_to_ptr+0x20>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	b29b      	uxth	r3, r3
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	2000cd60 	.word	0x2000cd60

08008e18 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008e20:	4b45      	ldr	r3, [pc, #276]	; (8008f38 <plug_holes+0x120>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d206      	bcs.n	8008e38 <plug_holes+0x20>
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <plug_holes+0x124>)
 8008e2c:	f240 12df 	movw	r2, #479	; 0x1df
 8008e30:	4943      	ldr	r1, [pc, #268]	; (8008f40 <plug_holes+0x128>)
 8008e32:	4844      	ldr	r0, [pc, #272]	; (8008f44 <plug_holes+0x12c>)
 8008e34:	f00b fb24 	bl	8014480 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008e38:	4b43      	ldr	r3, [pc, #268]	; (8008f48 <plug_holes+0x130>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d306      	bcc.n	8008e50 <plug_holes+0x38>
 8008e42:	4b3e      	ldr	r3, [pc, #248]	; (8008f3c <plug_holes+0x124>)
 8008e44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008e48:	4940      	ldr	r1, [pc, #256]	; (8008f4c <plug_holes+0x134>)
 8008e4a:	483e      	ldr	r0, [pc, #248]	; (8008f44 <plug_holes+0x12c>)
 8008e4c:	f00b fb18 	bl	8014480 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	791b      	ldrb	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <plug_holes+0x4e>
 8008e58:	4b38      	ldr	r3, [pc, #224]	; (8008f3c <plug_holes+0x124>)
 8008e5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008e5e:	493c      	ldr	r1, [pc, #240]	; (8008f50 <plug_holes+0x138>)
 8008e60:	4838      	ldr	r0, [pc, #224]	; (8008f44 <plug_holes+0x12c>)
 8008e62:	f00b fb0d 	bl	8014480 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e6e:	d906      	bls.n	8008e7e <plug_holes+0x66>
 8008e70:	4b32      	ldr	r3, [pc, #200]	; (8008f3c <plug_holes+0x124>)
 8008e72:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008e76:	4937      	ldr	r1, [pc, #220]	; (8008f54 <plug_holes+0x13c>)
 8008e78:	4832      	ldr	r0, [pc, #200]	; (8008f44 <plug_holes+0x12c>)
 8008e7a:	f00b fb01 	bl	8014480 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff ffa4 	bl	8008dd0 <ptr_to_mem>
 8008e88:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d024      	beq.n	8008edc <plug_holes+0xc4>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d120      	bne.n	8008edc <plug_holes+0xc4>
 8008e9a:	4b2b      	ldr	r3, [pc, #172]	; (8008f48 <plug_holes+0x130>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d01b      	beq.n	8008edc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008ea4:	4b2c      	ldr	r3, [pc, #176]	; (8008f58 <plug_holes+0x140>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d102      	bne.n	8008eb4 <plug_holes+0x9c>
      lfree = mem;
 8008eae:	4a2a      	ldr	r2, [pc, #168]	; (8008f58 <plug_holes+0x140>)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ec4:	d00a      	beq.n	8008edc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff ff80 	bl	8008dd0 <ptr_to_mem>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ff8e 	bl	8008df4 <mem_to_ptr>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	885b      	ldrh	r3, [r3, #2]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff ff75 	bl	8008dd0 <ptr_to_mem>
 8008ee6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d01f      	beq.n	8008f30 <plug_holes+0x118>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	791b      	ldrb	r3, [r3, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11b      	bne.n	8008f30 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008ef8:	4b17      	ldr	r3, [pc, #92]	; (8008f58 <plug_holes+0x140>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d102      	bne.n	8008f08 <plug_holes+0xf0>
      lfree = pmem;
 8008f02:	4a15      	ldr	r2, [pc, #84]	; (8008f58 <plug_holes+0x140>)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	881a      	ldrh	r2, [r3, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f18:	d00a      	beq.n	8008f30 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ff56 	bl	8008dd0 <ptr_to_mem>
 8008f24:	4604      	mov	r4, r0
 8008f26:	68b8      	ldr	r0, [r7, #8]
 8008f28:	f7ff ff64 	bl	8008df4 <mem_to_ptr>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd90      	pop	{r4, r7, pc}
 8008f38:	2000cd60 	.word	0x2000cd60
 8008f3c:	08016524 	.word	0x08016524
 8008f40:	08016554 	.word	0x08016554
 8008f44:	0801656c 	.word	0x0801656c
 8008f48:	2000cd64 	.word	0x2000cd64
 8008f4c:	08016594 	.word	0x08016594
 8008f50:	080165b0 	.word	0x080165b0
 8008f54:	080165cc 	.word	0x080165cc
 8008f58:	2000cd6c 	.word	0x2000cd6c

08008f5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008f62:	4b1f      	ldr	r3, [pc, #124]	; (8008fe0 <mem_init+0x84>)
 8008f64:	3303      	adds	r3, #3
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <mem_init+0x88>)
 8008f6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <mem_init+0x88>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f7c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008f8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008f8e:	f7ff ff1f 	bl	8008dd0 <ptr_to_mem>
 8008f92:	4603      	mov	r3, r0
 8008f94:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <mem_init+0x8c>)
 8008f96:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008f98:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <mem_init+0x8c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <mem_init+0x8c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008fa8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <mem_init+0x8c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008fb2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <mem_init+0x88>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0c      	ldr	r2, [pc, #48]	; (8008fec <mem_init+0x90>)
 8008fba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008fbc:	480c      	ldr	r0, [pc, #48]	; (8008ff0 <mem_init+0x94>)
 8008fbe:	f00b f999 	bl	80142f4 <sys_mutex_new>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <mem_init+0x98>)
 8008fca:	f240 221f 	movw	r2, #543	; 0x21f
 8008fce:	490a      	ldr	r1, [pc, #40]	; (8008ff8 <mem_init+0x9c>)
 8008fd0:	480a      	ldr	r0, [pc, #40]	; (8008ffc <mem_init+0xa0>)
 8008fd2:	f00b fa55 	bl	8014480 <iprintf>
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20008d4c 	.word	0x20008d4c
 8008fe4:	2000cd60 	.word	0x2000cd60
 8008fe8:	2000cd64 	.word	0x2000cd64
 8008fec:	2000cd6c 	.word	0x2000cd6c
 8008ff0:	2000cd68 	.word	0x2000cd68
 8008ff4:	08016524 	.word	0x08016524
 8008ff8:	080165f8 	.word	0x080165f8
 8008ffc:	0801656c 	.word	0x0801656c

08009000 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fef3 	bl	8008df4 <mem_to_ptr>
 800900e:	4603      	mov	r3, r0
 8009010:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff feda 	bl	8008dd0 <ptr_to_mem>
 800901c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fed4 	bl	8008dd0 <ptr_to_mem>
 8009028:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009032:	d818      	bhi.n	8009066 <mem_link_valid+0x66>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	885b      	ldrh	r3, [r3, #2]
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903c:	d813      	bhi.n	8009066 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009042:	8afa      	ldrh	r2, [r7, #22]
 8009044:	429a      	cmp	r2, r3
 8009046:	d004      	beq.n	8009052 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	8afa      	ldrh	r2, [r7, #22]
 800904e:	429a      	cmp	r2, r3
 8009050:	d109      	bne.n	8009066 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009052:	4b08      	ldr	r3, [pc, #32]	; (8009074 <mem_link_valid+0x74>)
 8009054:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	429a      	cmp	r2, r3
 800905a:	d006      	beq.n	800906a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	8afa      	ldrh	r2, [r7, #22]
 8009062:	429a      	cmp	r2, r3
 8009064:	d001      	beq.n	800906a <mem_link_valid+0x6a>
    return 0;
 8009066:	2300      	movs	r3, #0
 8009068:	e000      	b.n	800906c <mem_link_valid+0x6c>
  }
  return 1;
 800906a:	2301      	movs	r3, #1
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	2000cd64 	.word	0x2000cd64

08009078 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d070      	beq.n	8009168 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009090:	4b37      	ldr	r3, [pc, #220]	; (8009170 <mem_free+0xf8>)
 8009092:	f240 2273 	movw	r2, #627	; 0x273
 8009096:	4937      	ldr	r1, [pc, #220]	; (8009174 <mem_free+0xfc>)
 8009098:	4837      	ldr	r0, [pc, #220]	; (8009178 <mem_free+0x100>)
 800909a:	f00b f9f1 	bl	8014480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800909e:	f00b f987 	bl	80143b0 <sys_arch_protect>
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f00b f991 	bl	80143cc <sys_arch_unprotect>
    return;
 80090aa:	e05e      	b.n	800916a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3b08      	subs	r3, #8
 80090b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80090b2:	4b32      	ldr	r3, [pc, #200]	; (800917c <mem_free+0x104>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d306      	bcc.n	80090ca <mem_free+0x52>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f103 020c 	add.w	r2, r3, #12
 80090c2:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <mem_free+0x108>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d90d      	bls.n	80090e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80090ca:	4b29      	ldr	r3, [pc, #164]	; (8009170 <mem_free+0xf8>)
 80090cc:	f240 227f 	movw	r2, #639	; 0x27f
 80090d0:	492c      	ldr	r1, [pc, #176]	; (8009184 <mem_free+0x10c>)
 80090d2:	4829      	ldr	r0, [pc, #164]	; (8009178 <mem_free+0x100>)
 80090d4:	f00b f9d4 	bl	8014480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80090d8:	f00b f96a 	bl	80143b0 <sys_arch_protect>
 80090dc:	6138      	str	r0, [r7, #16]
 80090de:	6938      	ldr	r0, [r7, #16]
 80090e0:	f00b f974 	bl	80143cc <sys_arch_unprotect>
    return;
 80090e4:	e041      	b.n	800916a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80090e6:	4828      	ldr	r0, [pc, #160]	; (8009188 <mem_free+0x110>)
 80090e8:	f00b f920 	bl	801432c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	791b      	ldrb	r3, [r3, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d110      	bne.n	8009116 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80090f4:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <mem_free+0xf8>)
 80090f6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80090fa:	4924      	ldr	r1, [pc, #144]	; (800918c <mem_free+0x114>)
 80090fc:	481e      	ldr	r0, [pc, #120]	; (8009178 <mem_free+0x100>)
 80090fe:	f00b f9bf 	bl	8014480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009102:	4821      	ldr	r0, [pc, #132]	; (8009188 <mem_free+0x110>)
 8009104:	f00b f921 	bl	801434a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009108:	f00b f952 	bl	80143b0 <sys_arch_protect>
 800910c:	6178      	str	r0, [r7, #20]
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f00b f95c 	bl	80143cc <sys_arch_unprotect>
    return;
 8009114:	e029      	b.n	800916a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009116:	69f8      	ldr	r0, [r7, #28]
 8009118:	f7ff ff72 	bl	8009000 <mem_link_valid>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d110      	bne.n	8009144 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <mem_free+0xf8>)
 8009124:	f240 2295 	movw	r2, #661	; 0x295
 8009128:	4919      	ldr	r1, [pc, #100]	; (8009190 <mem_free+0x118>)
 800912a:	4813      	ldr	r0, [pc, #76]	; (8009178 <mem_free+0x100>)
 800912c:	f00b f9a8 	bl	8014480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009130:	4815      	ldr	r0, [pc, #84]	; (8009188 <mem_free+0x110>)
 8009132:	f00b f90a 	bl	801434a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009136:	f00b f93b 	bl	80143b0 <sys_arch_protect>
 800913a:	61b8      	str	r0, [r7, #24]
 800913c:	69b8      	ldr	r0, [r7, #24]
 800913e:	f00b f945 	bl	80143cc <sys_arch_unprotect>
    return;
 8009142:	e012      	b.n	800916a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	2200      	movs	r2, #0
 8009148:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800914a:	4b12      	ldr	r3, [pc, #72]	; (8009194 <mem_free+0x11c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	429a      	cmp	r2, r3
 8009152:	d202      	bcs.n	800915a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009154:	4a0f      	ldr	r2, [pc, #60]	; (8009194 <mem_free+0x11c>)
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800915a:	69f8      	ldr	r0, [r7, #28]
 800915c:	f7ff fe5c 	bl	8008e18 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009160:	4809      	ldr	r0, [pc, #36]	; (8009188 <mem_free+0x110>)
 8009162:	f00b f8f2 	bl	801434a <sys_mutex_unlock>
 8009166:	e000      	b.n	800916a <mem_free+0xf2>
    return;
 8009168:	bf00      	nop
}
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	08016524 	.word	0x08016524
 8009174:	08016614 	.word	0x08016614
 8009178:	0801656c 	.word	0x0801656c
 800917c:	2000cd60 	.word	0x2000cd60
 8009180:	2000cd64 	.word	0x2000cd64
 8009184:	08016638 	.word	0x08016638
 8009188:	2000cd68 	.word	0x2000cd68
 800918c:	08016654 	.word	0x08016654
 8009190:	0801667c 	.word	0x0801667c
 8009194:	2000cd6c 	.word	0x2000cd6c

08009198 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80091a4:	887b      	ldrh	r3, [r7, #2]
 80091a6:	3303      	adds	r3, #3
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80091b0:	8bfb      	ldrh	r3, [r7, #30]
 80091b2:	2b0b      	cmp	r3, #11
 80091b4:	d801      	bhi.n	80091ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80091b6:	230c      	movs	r3, #12
 80091b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80091ba:	8bfb      	ldrh	r3, [r7, #30]
 80091bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091c0:	d803      	bhi.n	80091ca <mem_trim+0x32>
 80091c2:	8bfa      	ldrh	r2, [r7, #30]
 80091c4:	887b      	ldrh	r3, [r7, #2]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d201      	bcs.n	80091ce <mem_trim+0x36>
    return NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e0d8      	b.n	8009380 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80091ce:	4b6e      	ldr	r3, [pc, #440]	; (8009388 <mem_trim+0x1f0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d304      	bcc.n	80091e2 <mem_trim+0x4a>
 80091d8:	4b6c      	ldr	r3, [pc, #432]	; (800938c <mem_trim+0x1f4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d306      	bcc.n	80091f0 <mem_trim+0x58>
 80091e2:	4b6b      	ldr	r3, [pc, #428]	; (8009390 <mem_trim+0x1f8>)
 80091e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80091e8:	496a      	ldr	r1, [pc, #424]	; (8009394 <mem_trim+0x1fc>)
 80091ea:	486b      	ldr	r0, [pc, #428]	; (8009398 <mem_trim+0x200>)
 80091ec:	f00b f948 	bl	8014480 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80091f0:	4b65      	ldr	r3, [pc, #404]	; (8009388 <mem_trim+0x1f0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d304      	bcc.n	8009204 <mem_trim+0x6c>
 80091fa:	4b64      	ldr	r3, [pc, #400]	; (800938c <mem_trim+0x1f4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	429a      	cmp	r2, r3
 8009202:	d307      	bcc.n	8009214 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009204:	f00b f8d4 	bl	80143b0 <sys_arch_protect>
 8009208:	60b8      	str	r0, [r7, #8]
 800920a:	68b8      	ldr	r0, [r7, #8]
 800920c:	f00b f8de 	bl	80143cc <sys_arch_unprotect>
    return rmem;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	e0b5      	b.n	8009380 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3b08      	subs	r3, #8
 8009218:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800921a:	69b8      	ldr	r0, [r7, #24]
 800921c:	f7ff fdea 	bl	8008df4 <mem_to_ptr>
 8009220:	4603      	mov	r3, r0
 8009222:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	881a      	ldrh	r2, [r3, #0]
 8009228:	8afb      	ldrh	r3, [r7, #22]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b08      	subs	r3, #8
 8009230:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009232:	8bfa      	ldrh	r2, [r7, #30]
 8009234:	8abb      	ldrh	r3, [r7, #20]
 8009236:	429a      	cmp	r2, r3
 8009238:	d906      	bls.n	8009248 <mem_trim+0xb0>
 800923a:	4b55      	ldr	r3, [pc, #340]	; (8009390 <mem_trim+0x1f8>)
 800923c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009240:	4956      	ldr	r1, [pc, #344]	; (800939c <mem_trim+0x204>)
 8009242:	4855      	ldr	r0, [pc, #340]	; (8009398 <mem_trim+0x200>)
 8009244:	f00b f91c 	bl	8014480 <iprintf>
  if (newsize > size) {
 8009248:	8bfa      	ldrh	r2, [r7, #30]
 800924a:	8abb      	ldrh	r3, [r7, #20]
 800924c:	429a      	cmp	r2, r3
 800924e:	d901      	bls.n	8009254 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	e095      	b.n	8009380 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009254:	8bfa      	ldrh	r2, [r7, #30]
 8009256:	8abb      	ldrh	r3, [r7, #20]
 8009258:	429a      	cmp	r2, r3
 800925a:	d101      	bne.n	8009260 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	e08f      	b.n	8009380 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009260:	484f      	ldr	r0, [pc, #316]	; (80093a0 <mem_trim+0x208>)
 8009262:	f00b f863 	bl	801432c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff fdb0 	bl	8008dd0 <ptr_to_mem>
 8009270:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	791b      	ldrb	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d13f      	bne.n	80092fa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009282:	d106      	bne.n	8009292 <mem_trim+0xfa>
 8009284:	4b42      	ldr	r3, [pc, #264]	; (8009390 <mem_trim+0x1f8>)
 8009286:	f240 22f5 	movw	r2, #757	; 0x2f5
 800928a:	4946      	ldr	r1, [pc, #280]	; (80093a4 <mem_trim+0x20c>)
 800928c:	4842      	ldr	r0, [pc, #264]	; (8009398 <mem_trim+0x200>)
 800928e:	f00b f8f7 	bl	8014480 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009298:	8afa      	ldrh	r2, [r7, #22]
 800929a:	8bfb      	ldrh	r3, [r7, #30]
 800929c:	4413      	add	r3, r2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3308      	adds	r3, #8
 80092a2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80092a4:	4b40      	ldr	r3, [pc, #256]	; (80093a8 <mem_trim+0x210>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d106      	bne.n	80092bc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80092ae:	89fb      	ldrh	r3, [r7, #14]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fd8d 	bl	8008dd0 <ptr_to_mem>
 80092b6:	4603      	mov	r3, r0
 80092b8:	4a3b      	ldr	r2, [pc, #236]	; (80093a8 <mem_trim+0x210>)
 80092ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80092bc:	89fb      	ldrh	r3, [r7, #14]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fd86 	bl	8008dd0 <ptr_to_mem>
 80092c4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2200      	movs	r2, #0
 80092ca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	89ba      	ldrh	r2, [r7, #12]
 80092d0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	8afa      	ldrh	r2, [r7, #22]
 80092d6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	89fa      	ldrh	r2, [r7, #14]
 80092dc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e6:	d047      	beq.n	8009378 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fd6f 	bl	8008dd0 <ptr_to_mem>
 80092f2:	4602      	mov	r2, r0
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	8053      	strh	r3, [r2, #2]
 80092f8:	e03e      	b.n	8009378 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80092fa:	8bfb      	ldrh	r3, [r7, #30]
 80092fc:	f103 0214 	add.w	r2, r3, #20
 8009300:	8abb      	ldrh	r3, [r7, #20]
 8009302:	429a      	cmp	r2, r3
 8009304:	d838      	bhi.n	8009378 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009306:	8afa      	ldrh	r2, [r7, #22]
 8009308:	8bfb      	ldrh	r3, [r7, #30]
 800930a:	4413      	add	r3, r2
 800930c:	b29b      	uxth	r3, r3
 800930e:	3308      	adds	r3, #8
 8009310:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800931a:	d106      	bne.n	800932a <mem_trim+0x192>
 800931c:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <mem_trim+0x1f8>)
 800931e:	f240 3216 	movw	r2, #790	; 0x316
 8009322:	4920      	ldr	r1, [pc, #128]	; (80093a4 <mem_trim+0x20c>)
 8009324:	481c      	ldr	r0, [pc, #112]	; (8009398 <mem_trim+0x200>)
 8009326:	f00b f8ab 	bl	8014480 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800932a:	89fb      	ldrh	r3, [r7, #14]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fd4f 	bl	8008dd0 <ptr_to_mem>
 8009332:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009334:	4b1c      	ldr	r3, [pc, #112]	; (80093a8 <mem_trim+0x210>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	429a      	cmp	r2, r3
 800933c:	d202      	bcs.n	8009344 <mem_trim+0x1ac>
      lfree = mem2;
 800933e:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <mem_trim+0x210>)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2200      	movs	r2, #0
 8009348:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	881a      	ldrh	r2, [r3, #0]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	8afa      	ldrh	r2, [r7, #22]
 8009356:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	89fa      	ldrh	r2, [r7, #14]
 800935c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009366:	d007      	beq.n	8009378 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fd2f 	bl	8008dd0 <ptr_to_mem>
 8009372:	4602      	mov	r2, r0
 8009374:	89fb      	ldrh	r3, [r7, #14]
 8009376:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009378:	4809      	ldr	r0, [pc, #36]	; (80093a0 <mem_trim+0x208>)
 800937a:	f00a ffe6 	bl	801434a <sys_mutex_unlock>
  return rmem;
 800937e:	687b      	ldr	r3, [r7, #4]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	2000cd60 	.word	0x2000cd60
 800938c:	2000cd64 	.word	0x2000cd64
 8009390:	08016524 	.word	0x08016524
 8009394:	080166b0 	.word	0x080166b0
 8009398:	0801656c 	.word	0x0801656c
 800939c:	080166c8 	.word	0x080166c8
 80093a0:	2000cd68 	.word	0x2000cd68
 80093a4:	080166e8 	.word	0x080166e8
 80093a8:	2000cd6c 	.word	0x2000cd6c

080093ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <mem_malloc+0x14>
    return NULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	e0e2      	b.n	8009586 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80093c0:	88fb      	ldrh	r3, [r7, #6]
 80093c2:	3303      	adds	r3, #3
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80093cc:	8bbb      	ldrh	r3, [r7, #28]
 80093ce:	2b0b      	cmp	r3, #11
 80093d0:	d801      	bhi.n	80093d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80093d2:	230c      	movs	r3, #12
 80093d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80093d6:	8bbb      	ldrh	r3, [r7, #28]
 80093d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093dc:	d803      	bhi.n	80093e6 <mem_malloc+0x3a>
 80093de:	8bba      	ldrh	r2, [r7, #28]
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d201      	bcs.n	80093ea <mem_malloc+0x3e>
    return NULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e0cd      	b.n	8009586 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80093ea:	4869      	ldr	r0, [pc, #420]	; (8009590 <mem_malloc+0x1e4>)
 80093ec:	f00a ff9e 	bl	801432c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80093f0:	4b68      	ldr	r3, [pc, #416]	; (8009594 <mem_malloc+0x1e8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fcfd 	bl	8008df4 <mem_to_ptr>
 80093fa:	4603      	mov	r3, r0
 80093fc:	83fb      	strh	r3, [r7, #30]
 80093fe:	e0b7      	b.n	8009570 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009400:	8bfb      	ldrh	r3, [r7, #30]
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fce4 	bl	8008dd0 <ptr_to_mem>
 8009408:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	791b      	ldrb	r3, [r3, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 80a7 	bne.w	8009562 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	8bfb      	ldrh	r3, [r7, #30]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f1a3 0208 	sub.w	r2, r3, #8
 8009422:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009424:	429a      	cmp	r2, r3
 8009426:	f0c0 809c 	bcc.w	8009562 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	8bfb      	ldrh	r3, [r7, #30]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	f1a3 0208 	sub.w	r2, r3, #8
 8009438:	8bbb      	ldrh	r3, [r7, #28]
 800943a:	3314      	adds	r3, #20
 800943c:	429a      	cmp	r2, r3
 800943e:	d333      	bcc.n	80094a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009440:	8bfa      	ldrh	r2, [r7, #30]
 8009442:	8bbb      	ldrh	r3, [r7, #28]
 8009444:	4413      	add	r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	3308      	adds	r3, #8
 800944a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800944c:	8a7b      	ldrh	r3, [r7, #18]
 800944e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009452:	d106      	bne.n	8009462 <mem_malloc+0xb6>
 8009454:	4b50      	ldr	r3, [pc, #320]	; (8009598 <mem_malloc+0x1ec>)
 8009456:	f240 3287 	movw	r2, #903	; 0x387
 800945a:	4950      	ldr	r1, [pc, #320]	; (800959c <mem_malloc+0x1f0>)
 800945c:	4850      	ldr	r0, [pc, #320]	; (80095a0 <mem_malloc+0x1f4>)
 800945e:	f00b f80f 	bl	8014480 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009462:	8a7b      	ldrh	r3, [r7, #18]
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff fcb3 	bl	8008dd0 <ptr_to_mem>
 800946a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	881a      	ldrh	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8bfa      	ldrh	r2, [r7, #30]
 800947e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	8a7a      	ldrh	r2, [r7, #18]
 8009484:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2201      	movs	r2, #1
 800948a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009494:	d00b      	beq.n	80094ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fc98 	bl	8008dd0 <ptr_to_mem>
 80094a0:	4602      	mov	r2, r0
 80094a2:	8a7b      	ldrh	r3, [r7, #18]
 80094a4:	8053      	strh	r3, [r2, #2]
 80094a6:	e002      	b.n	80094ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2201      	movs	r2, #1
 80094ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80094ae:	4b39      	ldr	r3, [pc, #228]	; (8009594 <mem_malloc+0x1e8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d127      	bne.n	8009508 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80094b8:	4b36      	ldr	r3, [pc, #216]	; (8009594 <mem_malloc+0x1e8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80094be:	e005      	b.n	80094cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fc83 	bl	8008dd0 <ptr_to_mem>
 80094ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	791b      	ldrb	r3, [r3, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <mem_malloc+0x132>
 80094d4:	4b33      	ldr	r3, [pc, #204]	; (80095a4 <mem_malloc+0x1f8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d1f0      	bne.n	80094c0 <mem_malloc+0x114>
          }
          lfree = cur;
 80094de:	4a2d      	ldr	r2, [pc, #180]	; (8009594 <mem_malloc+0x1e8>)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80094e4:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <mem_malloc+0x1e8>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	4b2e      	ldr	r3, [pc, #184]	; (80095a4 <mem_malloc+0x1f8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d00b      	beq.n	8009508 <mem_malloc+0x15c>
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <mem_malloc+0x1e8>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	791b      	ldrb	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <mem_malloc+0x15c>
 80094fa:	4b27      	ldr	r3, [pc, #156]	; (8009598 <mem_malloc+0x1ec>)
 80094fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009500:	4929      	ldr	r1, [pc, #164]	; (80095a8 <mem_malloc+0x1fc>)
 8009502:	4827      	ldr	r0, [pc, #156]	; (80095a0 <mem_malloc+0x1f4>)
 8009504:	f00a ffbc 	bl	8014480 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009508:	4821      	ldr	r0, [pc, #132]	; (8009590 <mem_malloc+0x1e4>)
 800950a:	f00a ff1e 	bl	801434a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800950e:	8bba      	ldrh	r2, [r7, #28]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	4413      	add	r3, r2
 8009514:	3308      	adds	r3, #8
 8009516:	4a23      	ldr	r2, [pc, #140]	; (80095a4 <mem_malloc+0x1f8>)
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	4293      	cmp	r3, r2
 800951c:	d906      	bls.n	800952c <mem_malloc+0x180>
 800951e:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <mem_malloc+0x1ec>)
 8009520:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009524:	4921      	ldr	r1, [pc, #132]	; (80095ac <mem_malloc+0x200>)
 8009526:	481e      	ldr	r0, [pc, #120]	; (80095a0 <mem_malloc+0x1f4>)
 8009528:	f00a ffaa 	bl	8014480 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d006      	beq.n	8009544 <mem_malloc+0x198>
 8009536:	4b18      	ldr	r3, [pc, #96]	; (8009598 <mem_malloc+0x1ec>)
 8009538:	f240 32bb 	movw	r2, #955	; 0x3bb
 800953c:	491c      	ldr	r1, [pc, #112]	; (80095b0 <mem_malloc+0x204>)
 800953e:	4818      	ldr	r0, [pc, #96]	; (80095a0 <mem_malloc+0x1f4>)
 8009540:	f00a ff9e 	bl	8014480 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d006      	beq.n	800955c <mem_malloc+0x1b0>
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <mem_malloc+0x1ec>)
 8009550:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009554:	4917      	ldr	r1, [pc, #92]	; (80095b4 <mem_malloc+0x208>)
 8009556:	4812      	ldr	r0, [pc, #72]	; (80095a0 <mem_malloc+0x1f4>)
 8009558:	f00a ff92 	bl	8014480 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	3308      	adds	r3, #8
 8009560:	e011      	b.n	8009586 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009562:	8bfb      	ldrh	r3, [r7, #30]
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fc33 	bl	8008dd0 <ptr_to_mem>
 800956a:	4603      	mov	r3, r0
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009570:	8bfa      	ldrh	r2, [r7, #30]
 8009572:	8bbb      	ldrh	r3, [r7, #28]
 8009574:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8009578:	429a      	cmp	r2, r3
 800957a:	f4ff af41 	bcc.w	8009400 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800957e:	4804      	ldr	r0, [pc, #16]	; (8009590 <mem_malloc+0x1e4>)
 8009580:	f00a fee3 	bl	801434a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2000cd68 	.word	0x2000cd68
 8009594:	2000cd6c 	.word	0x2000cd6c
 8009598:	08016524 	.word	0x08016524
 800959c:	080166e8 	.word	0x080166e8
 80095a0:	0801656c 	.word	0x0801656c
 80095a4:	2000cd64 	.word	0x2000cd64
 80095a8:	080166fc 	.word	0x080166fc
 80095ac:	08016718 	.word	0x08016718
 80095b0:	08016748 	.word	0x08016748
 80095b4:	08016778 	.word	0x08016778

080095b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	3303      	adds	r3, #3
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	e011      	b.n	80095fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4413      	add	r3, r2
 80095f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	461a      	mov	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4293      	cmp	r3, r2
 8009608:	dbe7      	blt.n	80095da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800961e:	2300      	movs	r3, #0
 8009620:	80fb      	strh	r3, [r7, #6]
 8009622:	e009      	b.n	8009638 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009624:	88fb      	ldrh	r3, [r7, #6]
 8009626:	4a08      	ldr	r2, [pc, #32]	; (8009648 <memp_init+0x30>)
 8009628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff ffc3 	bl	80095b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	3301      	adds	r3, #1
 8009636:	80fb      	strh	r3, [r7, #6]
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	2b0c      	cmp	r3, #12
 800963c:	d9f2      	bls.n	8009624 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	08019044 	.word	0x08019044

0800964c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009654:	f00a feac 	bl	80143b0 <sys_arch_protect>
 8009658:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d015      	beq.n	8009694 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <do_memp_malloc_pool+0x3e>
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <do_memp_malloc_pool+0x58>)
 800967e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009682:	4909      	ldr	r1, [pc, #36]	; (80096a8 <do_memp_malloc_pool+0x5c>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <do_memp_malloc_pool+0x60>)
 8009686:	f00a fefb 	bl	8014480 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f00a fe9e 	bl	80143cc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	e003      	b.n	800969c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f00a fe99 	bl	80143cc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	0801679c 	.word	0x0801679c
 80096a8:	080167cc 	.word	0x080167cc
 80096ac:	080167f0 	.word	0x080167f0

080096b0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <memp_malloc_pool+0x1c>
 80096be:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <memp_malloc_pool+0x38>)
 80096c0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80096c4:	4909      	ldr	r1, [pc, #36]	; (80096ec <memp_malloc_pool+0x3c>)
 80096c6:	480a      	ldr	r0, [pc, #40]	; (80096f0 <memp_malloc_pool+0x40>)
 80096c8:	f00a feda 	bl	8014480 <iprintf>
  if (desc == NULL) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <memp_malloc_pool+0x26>
    return NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e003      	b.n	80096de <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff ffb8 	bl	800964c <do_memp_malloc_pool>
 80096dc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	0801679c 	.word	0x0801679c
 80096ec:	08016818 	.word	0x08016818
 80096f0:	080167f0 	.word	0x080167f0

080096f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	2b0c      	cmp	r3, #12
 8009702:	d908      	bls.n	8009716 <memp_malloc+0x22>
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <memp_malloc+0x3c>)
 8009706:	f240 1257 	movw	r2, #343	; 0x157
 800970a:	490a      	ldr	r1, [pc, #40]	; (8009734 <memp_malloc+0x40>)
 800970c:	480a      	ldr	r0, [pc, #40]	; (8009738 <memp_malloc+0x44>)
 800970e:	f00a feb7 	bl	8014480 <iprintf>
 8009712:	2300      	movs	r3, #0
 8009714:	e008      	b.n	8009728 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	4a08      	ldr	r2, [pc, #32]	; (800973c <memp_malloc+0x48>)
 800971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff ff94 	bl	800964c <do_memp_malloc_pool>
 8009724:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009726:	68fb      	ldr	r3, [r7, #12]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	0801679c 	.word	0x0801679c
 8009734:	0801682c 	.word	0x0801682c
 8009738:	080167f0 	.word	0x080167f0
 800973c:	08019044 	.word	0x08019044

08009740 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f003 0303 	and.w	r3, r3, #3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <do_memp_free_pool+0x22>
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <do_memp_free_pool+0x4c>)
 8009756:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800975a:	490d      	ldr	r1, [pc, #52]	; (8009790 <do_memp_free_pool+0x50>)
 800975c:	480d      	ldr	r0, [pc, #52]	; (8009794 <do_memp_free_pool+0x54>)
 800975e:	f00a fe8f 	bl	8014480 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009766:	f00a fe23 	bl	80143b0 <sys_arch_protect>
 800976a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800977e:	68b8      	ldr	r0, [r7, #8]
 8009780:	f00a fe24 	bl	80143cc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	0801679c 	.word	0x0801679c
 8009790:	0801684c 	.word	0x0801684c
 8009794:	080167f0 	.word	0x080167f0

08009798 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <memp_free_pool+0x1e>
 80097a8:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <memp_free_pool+0x3c>)
 80097aa:	f240 1295 	movw	r2, #405	; 0x195
 80097ae:	490a      	ldr	r1, [pc, #40]	; (80097d8 <memp_free_pool+0x40>)
 80097b0:	480a      	ldr	r0, [pc, #40]	; (80097dc <memp_free_pool+0x44>)
 80097b2:	f00a fe65 	bl	8014480 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d007      	beq.n	80097cc <memp_free_pool+0x34>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d004      	beq.n	80097cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ffbb 	bl	8009740 <do_memp_free_pool>
 80097ca:	e000      	b.n	80097ce <memp_free_pool+0x36>
    return;
 80097cc:	bf00      	nop
}
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	0801679c 	.word	0x0801679c
 80097d8:	08016818 	.word	0x08016818
 80097dc:	080167f0 	.word	0x080167f0

080097e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	2b0c      	cmp	r3, #12
 80097f0:	d907      	bls.n	8009802 <memp_free+0x22>
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <memp_free+0x44>)
 80097f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80097f8:	490b      	ldr	r1, [pc, #44]	; (8009828 <memp_free+0x48>)
 80097fa:	480c      	ldr	r0, [pc, #48]	; (800982c <memp_free+0x4c>)
 80097fc:	f00a fe40 	bl	8014480 <iprintf>
 8009800:	e00c      	b.n	800981c <memp_free+0x3c>

  if (mem == NULL) {
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	4a09      	ldr	r2, [pc, #36]	; (8009830 <memp_free+0x50>)
 800980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff ff94 	bl	8009740 <do_memp_free_pool>
 8009818:	e000      	b.n	800981c <memp_free+0x3c>
    return;
 800981a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	0801679c 	.word	0x0801679c
 8009828:	0801686c 	.word	0x0801686c
 800982c:	080167f0 	.word	0x080167f0
 8009830:	08019044 	.word	0x08019044

08009834 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009838:	bf00      	nop
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d108      	bne.n	800986a <netif_add+0x26>
 8009858:	4b57      	ldr	r3, [pc, #348]	; (80099b8 <netif_add+0x174>)
 800985a:	f240 1227 	movw	r2, #295	; 0x127
 800985e:	4957      	ldr	r1, [pc, #348]	; (80099bc <netif_add+0x178>)
 8009860:	4857      	ldr	r0, [pc, #348]	; (80099c0 <netif_add+0x17c>)
 8009862:	f00a fe0d 	bl	8014480 <iprintf>
 8009866:	2300      	movs	r3, #0
 8009868:	e0a2      	b.n	80099b0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	d108      	bne.n	8009882 <netif_add+0x3e>
 8009870:	4b51      	ldr	r3, [pc, #324]	; (80099b8 <netif_add+0x174>)
 8009872:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009876:	4953      	ldr	r1, [pc, #332]	; (80099c4 <netif_add+0x180>)
 8009878:	4851      	ldr	r0, [pc, #324]	; (80099c0 <netif_add+0x17c>)
 800987a:	f00a fe01 	bl	8014480 <iprintf>
 800987e:	2300      	movs	r3, #0
 8009880:	e096      	b.n	80099b0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009888:	4b4f      	ldr	r3, [pc, #316]	; (80099c8 <netif_add+0x184>)
 800988a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009892:	4b4d      	ldr	r3, [pc, #308]	; (80099c8 <netif_add+0x184>)
 8009894:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800989c:	4b4a      	ldr	r3, [pc, #296]	; (80099c8 <netif_add+0x184>)
 800989e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4a45      	ldr	r2, [pc, #276]	; (80099cc <netif_add+0x188>)
 80098b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a3a      	ldr	r2, [r7, #32]
 80098d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80098d2:	4b3f      	ldr	r3, [pc, #252]	; (80099d0 <netif_add+0x18c>)
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f913 	bl	8009b14 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	4798      	blx	r3
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <netif_add+0xba>
    return NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e058      	b.n	80099b0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009904:	2bff      	cmp	r3, #255	; 0xff
 8009906:	d103      	bne.n	8009910 <netif_add+0xcc>
        netif->num = 0;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009914:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <netif_add+0x190>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e02b      	b.n	8009974 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	429a      	cmp	r2, r3
 8009922:	d106      	bne.n	8009932 <netif_add+0xee>
 8009924:	4b24      	ldr	r3, [pc, #144]	; (80099b8 <netif_add+0x174>)
 8009926:	f240 128b 	movw	r2, #395	; 0x18b
 800992a:	492b      	ldr	r1, [pc, #172]	; (80099d8 <netif_add+0x194>)
 800992c:	4824      	ldr	r0, [pc, #144]	; (80099c0 <netif_add+0x17c>)
 800992e:	f00a fda7 	bl	8014480 <iprintf>
        num_netifs++;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	3301      	adds	r3, #1
 8009936:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2bff      	cmp	r3, #255	; 0xff
 800993c:	dd06      	ble.n	800994c <netif_add+0x108>
 800993e:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <netif_add+0x174>)
 8009940:	f240 128d 	movw	r2, #397	; 0x18d
 8009944:	4925      	ldr	r1, [pc, #148]	; (80099dc <netif_add+0x198>)
 8009946:	481e      	ldr	r0, [pc, #120]	; (80099c0 <netif_add+0x17c>)
 8009948:	f00a fd9a 	bl	8014480 <iprintf>
        if (netif2->num == netif->num) {
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009958:	429a      	cmp	r2, r3
 800995a:	d108      	bne.n	800996e <netif_add+0x12a>
          netif->num++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009962:	3301      	adds	r3, #1
 8009964:	b2da      	uxtb	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800996c:	e005      	b.n	800997a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1d0      	bne.n	800991c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1be      	bne.n	80098fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009986:	2bfe      	cmp	r3, #254	; 0xfe
 8009988:	d103      	bne.n	8009992 <netif_add+0x14e>
    netif_num = 0;
 800998a:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <netif_add+0x18c>)
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	e006      	b.n	80099a0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009998:	3301      	adds	r3, #1
 800999a:	b2da      	uxtb	r2, r3
 800999c:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <netif_add+0x18c>)
 800999e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80099a0:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <netif_add+0x190>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80099a8:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <netif_add+0x190>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80099ae:	68fb      	ldr	r3, [r7, #12]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	08016888 	.word	0x08016888
 80099bc:	0801691c 	.word	0x0801691c
 80099c0:	080168d8 	.word	0x080168d8
 80099c4:	08016938 	.word	0x08016938
 80099c8:	080190b8 	.word	0x080190b8
 80099cc:	08009d27 	.word	0x08009d27
 80099d0:	2000fe44 	.word	0x2000fe44
 80099d4:	2000fe3c 	.word	0x2000fe3c
 80099d8:	0801695c 	.word	0x0801695c
 80099dc:	08016970 	.word	0x08016970

080099e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f002 fdb1 	bl	800c554 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f007 fee3 	bl	80117c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <netif_do_set_ipaddr+0x20>
 8009a16:	4b1d      	ldr	r3, [pc, #116]	; (8009a8c <netif_do_set_ipaddr+0x88>)
 8009a18:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009a1c:	491c      	ldr	r1, [pc, #112]	; (8009a90 <netif_do_set_ipaddr+0x8c>)
 8009a1e:	481d      	ldr	r0, [pc, #116]	; (8009a94 <netif_do_set_ipaddr+0x90>)
 8009a20:	f00a fd2e 	bl	8014480 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <netif_do_set_ipaddr+0x34>
 8009a2a:	4b18      	ldr	r3, [pc, #96]	; (8009a8c <netif_do_set_ipaddr+0x88>)
 8009a2c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009a30:	4917      	ldr	r1, [pc, #92]	; (8009a90 <netif_do_set_ipaddr+0x8c>)
 8009a32:	4818      	ldr	r0, [pc, #96]	; (8009a94 <netif_do_set_ipaddr+0x90>)
 8009a34:	f00a fd24 	bl	8014480 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d01c      	beq.n	8009a80 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009a56:	f107 0314 	add.w	r3, r7, #20
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ffbf 	bl	80099e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <netif_do_set_ipaddr+0x6a>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <netif_do_set_ipaddr+0x6c>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009a74:	2101      	movs	r1, #1
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f8d2 	bl	8009c20 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	08016888 	.word	0x08016888
 8009a90:	080169a0 	.word	0x080169a0
 8009a94:	080168d8 	.word	0x080168d8

08009a98 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d00a      	beq.n	8009ac8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <netif_do_set_netmask+0x26>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	e000      	b.n	8009ac0 <netif_do_set_netmask+0x28>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e000      	b.n	8009aca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d00a      	beq.n	8009b06 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <netif_do_set_gw+0x26>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	e000      	b.n	8009afe <netif_do_set_gw+0x28>
 8009afc:	2300      	movs	r3, #0
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b088      	sub	sp, #32
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009b30:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <netif_set_addr+0x90>)
 8009b32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009b3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ba4 <netif_set_addr+0x90>)
 8009b3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009b44:	4b17      	ldr	r3, [pc, #92]	; (8009ba4 <netif_set_addr+0x90>)
 8009b46:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <netif_set_addr+0x42>
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <netif_set_addr+0x46>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e000      	b.n	8009b5c <netif_set_addr+0x48>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d006      	beq.n	8009b72 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b64:	f107 0310 	add.w	r3, r7, #16
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff ff49 	bl	8009a04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff ff8e 	bl	8009a98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7ff ffa8 	bl	8009ad6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	461a      	mov	r2, r3
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff35 	bl	8009a04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009b9a:	bf00      	nop
 8009b9c:	3720      	adds	r7, #32
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	080190b8 	.word	0x080190b8

08009ba8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009bb0:	4a04      	ldr	r2, [pc, #16]	; (8009bc4 <netif_set_default+0x1c>)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	2000fe40 	.word	0x2000fe40

08009bc8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d107      	bne.n	8009be6 <netif_set_up+0x1e>
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <netif_set_up+0x4c>)
 8009bd8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009bdc:	490e      	ldr	r1, [pc, #56]	; (8009c18 <netif_set_up+0x50>)
 8009bde:	480f      	ldr	r0, [pc, #60]	; (8009c1c <netif_set_up+0x54>)
 8009be0:	f00a fc4e 	bl	8014480 <iprintf>
 8009be4:	e013      	b.n	8009c0e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10c      	bne.n	8009c0e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009c06:	2103      	movs	r1, #3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f809 	bl	8009c20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	08016888 	.word	0x08016888
 8009c18:	08016a10 	.word	0x08016a10
 8009c1c:	080168d8 	.word	0x080168d8

08009c20 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d106      	bne.n	8009c40 <netif_issue_reports+0x20>
 8009c32:	4b18      	ldr	r3, [pc, #96]	; (8009c94 <netif_issue_reports+0x74>)
 8009c34:	f240 326d 	movw	r2, #877	; 0x36d
 8009c38:	4917      	ldr	r1, [pc, #92]	; (8009c98 <netif_issue_reports+0x78>)
 8009c3a:	4818      	ldr	r0, [pc, #96]	; (8009c9c <netif_issue_reports+0x7c>)
 8009c3c:	f00a fc20 	bl	8014480 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01e      	beq.n	8009c8c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c54:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d017      	beq.n	8009c8c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d013      	beq.n	8009c8e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00e      	beq.n	8009c8e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c76:	f003 0308 	and.w	r3, r3, #8
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f008 fd05 	bl	8012694 <etharp_request>
 8009c8a:	e000      	b.n	8009c8e <netif_issue_reports+0x6e>
    return;
 8009c8c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	08016888 	.word	0x08016888
 8009c98:	08016a2c 	.word	0x08016a2c
 8009c9c:	080168d8 	.word	0x080168d8

08009ca0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d107      	bne.n	8009cbe <netif_set_down+0x1e>
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <netif_set_down+0x58>)
 8009cb0:	f240 329b 	movw	r2, #923	; 0x39b
 8009cb4:	4911      	ldr	r1, [pc, #68]	; (8009cfc <netif_set_down+0x5c>)
 8009cb6:	4812      	ldr	r0, [pc, #72]	; (8009d00 <netif_set_down+0x60>)
 8009cb8:	f00a fbe2 	bl	8014480 <iprintf>
 8009cbc:	e019      	b.n	8009cf2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d012      	beq.n	8009cf2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f008 f88f 	bl	8011e10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	08016888 	.word	0x08016888
 8009cfc:	08016a50 	.word	0x08016a50
 8009d00:	080168d8 	.word	0x080168d8

08009d04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	61da      	str	r2, [r3, #28]
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009d32:	f06f 030b 	mvn.w	r3, #11
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
	...

08009d44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <netif_get_by_index+0x48>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	60fb      	str	r3, [r7, #12]
 8009d5a:	e00c      	b.n	8009d76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d62:	3301      	adds	r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	79fa      	ldrb	r2, [r7, #7]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d101      	bne.n	8009d70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	e006      	b.n	8009d7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1ef      	bne.n	8009d5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	2000fe3c 	.word	0x2000fe3c

08009d90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009d96:	f00a fb0b 	bl	80143b0 <sys_arch_protect>
 8009d9a:	6038      	str	r0, [r7, #0]
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <pbuf_free_ooseq+0x44>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	6838      	ldr	r0, [r7, #0]
 8009da4:	f00a fb12 	bl	80143cc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009da8:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <pbuf_free_ooseq+0x48>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	e00a      	b.n	8009dc6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f002 fc09 	bl	800c5d0 <tcp_free_ooseq>
      return;
 8009dbe:	e005      	b.n	8009dcc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f1      	bne.n	8009db0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000fe45 	.word	0x2000fe45
 8009dd8:	2000fe54 	.word	0x2000fe54

08009ddc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009de4:	f7ff ffd4 	bl	8009d90 <pbuf_free_ooseq>
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009df6:	f00a fadb 	bl	80143b0 <sys_arch_protect>
 8009dfa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <pbuf_pool_is_empty+0x4c>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009e02:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <pbuf_pool_is_empty+0x4c>)
 8009e04:	2201      	movs	r2, #1
 8009e06:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f00a fadf 	bl	80143cc <sys_arch_unprotect>

  if (!queued) {
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10f      	bne.n	8009e34 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009e14:	2100      	movs	r1, #0
 8009e16:	480a      	ldr	r0, [pc, #40]	; (8009e40 <pbuf_pool_is_empty+0x50>)
 8009e18:	f7fe fef4 	bl	8008c04 <tcpip_try_callback>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d008      	beq.n	8009e34 <pbuf_pool_is_empty+0x44>
 8009e22:	f00a fac5 	bl	80143b0 <sys_arch_protect>
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <pbuf_pool_is_empty+0x4c>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f00a facc 	bl	80143cc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000fe45 	.word	0x2000fe45
 8009e40:	08009ddd 	.word	0x08009ddd

08009e44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	460b      	mov	r3, r1
 8009e54:	80fb      	strh	r3, [r7, #6]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	88fa      	ldrh	r2, [r7, #6]
 8009e6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	88ba      	ldrh	r2, [r7, #4]
 8009e70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009e72:	8b3b      	ldrh	r3, [r7, #24]
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	7f3a      	ldrb	r2, [r7, #28]
 8009e7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	73da      	strb	r2, [r3, #15]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08c      	sub	sp, #48	; 0x30
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	80bb      	strh	r3, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009eae:	887b      	ldrh	r3, [r7, #2]
 8009eb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009eb4:	d07f      	beq.n	8009fb6 <pbuf_alloc+0x11e>
 8009eb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009eba:	f300 80c8 	bgt.w	800a04e <pbuf_alloc+0x1b6>
 8009ebe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ec2:	d010      	beq.n	8009ee6 <pbuf_alloc+0x4e>
 8009ec4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ec8:	f300 80c1 	bgt.w	800a04e <pbuf_alloc+0x1b6>
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d002      	beq.n	8009ed6 <pbuf_alloc+0x3e>
 8009ed0:	2b41      	cmp	r3, #65	; 0x41
 8009ed2:	f040 80bc 	bne.w	800a04e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009ed6:	887a      	ldrh	r2, [r7, #2]
 8009ed8:	88bb      	ldrh	r3, [r7, #4]
 8009eda:	4619      	mov	r1, r3
 8009edc:	2000      	movs	r0, #0
 8009ede:	f000 f8d1 	bl	800a084 <pbuf_alloc_reference>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009ee4:	e0bd      	b.n	800a062 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009eee:	88bb      	ldrh	r3, [r7, #4]
 8009ef0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009ef2:	200c      	movs	r0, #12
 8009ef4:	f7ff fbfe 	bl	80096f4 <memp_malloc>
 8009ef8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009f00:	f7ff ff76 	bl	8009df0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f0c:	f000 faa8 	bl	800a460 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009f10:	2300      	movs	r3, #0
 8009f12:	e0a7      	b.n	800a064 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f16:	3303      	adds	r3, #3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	8b7a      	ldrh	r2, [r7, #26]
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	bf28      	it	cs
 8009f2c:	4613      	movcs	r3, r2
 8009f2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f32:	3310      	adds	r3, #16
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	3303      	adds	r3, #3
 8009f3a:	f023 0303 	bic.w	r3, r3, #3
 8009f3e:	4618      	mov	r0, r3
 8009f40:	89f9      	ldrh	r1, [r7, #14]
 8009f42:	8b7a      	ldrh	r2, [r7, #26]
 8009f44:	2300      	movs	r3, #0
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	887b      	ldrh	r3, [r7, #2]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4601      	mov	r1, r0
 8009f50:	6938      	ldr	r0, [r7, #16]
 8009f52:	f7ff ff77 	bl	8009e44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <pbuf_alloc+0xd8>
 8009f62:	4b42      	ldr	r3, [pc, #264]	; (800a06c <pbuf_alloc+0x1d4>)
 8009f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f68:	4941      	ldr	r1, [pc, #260]	; (800a070 <pbuf_alloc+0x1d8>)
 8009f6a:	4842      	ldr	r0, [pc, #264]	; (800a074 <pbuf_alloc+0x1dc>)
 8009f6c:	f00a fa88 	bl	8014480 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f72:	3303      	adds	r3, #3
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009f7c:	d106      	bne.n	8009f8c <pbuf_alloc+0xf4>
 8009f7e:	4b3b      	ldr	r3, [pc, #236]	; (800a06c <pbuf_alloc+0x1d4>)
 8009f80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009f84:	493c      	ldr	r1, [pc, #240]	; (800a078 <pbuf_alloc+0x1e0>)
 8009f86:	483b      	ldr	r0, [pc, #236]	; (800a074 <pbuf_alloc+0x1dc>)
 8009f88:	f00a fa7a 	bl	8014480 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
 8009f96:	e002      	b.n	8009f9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009fa2:	8b7a      	ldrh	r2, [r7, #26]
 8009fa4:	89fb      	ldrh	r3, [r7, #14]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009fae:	8b7b      	ldrh	r3, [r7, #26]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d19e      	bne.n	8009ef2 <pbuf_alloc+0x5a>
      break;
 8009fb4:	e055      	b.n	800a062 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fb8:	3303      	adds	r3, #3
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f023 0303 	bic.w	r3, r3, #3
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	88bb      	ldrh	r3, [r7, #4]
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f023 0303 	bic.w	r3, r3, #3
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4413      	add	r3, r2
 8009fd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009fd2:	8b3b      	ldrh	r3, [r7, #24]
 8009fd4:	3310      	adds	r3, #16
 8009fd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009fd8:	8b3a      	ldrh	r2, [r7, #24]
 8009fda:	88bb      	ldrh	r3, [r7, #4]
 8009fdc:	3303      	adds	r3, #3
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d306      	bcc.n	8009ff4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009fe6:	8afa      	ldrh	r2, [r7, #22]
 8009fe8:	88bb      	ldrh	r3, [r7, #4]
 8009fea:	3303      	adds	r3, #3
 8009fec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d201      	bcs.n	8009ff8 <pbuf_alloc+0x160>
        return NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e035      	b.n	800a064 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009ff8:	8afb      	ldrh	r3, [r7, #22]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff f9d6 	bl	80093ac <mem_malloc>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <pbuf_alloc+0x174>
        return NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	e02b      	b.n	800a064 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a00e:	3310      	adds	r3, #16
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	4413      	add	r3, r2
 800a014:	3303      	adds	r3, #3
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	4618      	mov	r0, r3
 800a01c:	88b9      	ldrh	r1, [r7, #4]
 800a01e:	88ba      	ldrh	r2, [r7, #4]
 800a020:	2300      	movs	r3, #0
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	887b      	ldrh	r3, [r7, #2]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	460b      	mov	r3, r1
 800a02a:	4601      	mov	r1, r0
 800a02c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a02e:	f7ff ff09 	bl	8009e44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d010      	beq.n	800a060 <pbuf_alloc+0x1c8>
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <pbuf_alloc+0x1d4>)
 800a040:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a044:	490d      	ldr	r1, [pc, #52]	; (800a07c <pbuf_alloc+0x1e4>)
 800a046:	480b      	ldr	r0, [pc, #44]	; (800a074 <pbuf_alloc+0x1dc>)
 800a048:	f00a fa1a 	bl	8014480 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a04c:	e008      	b.n	800a060 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a04e:	4b07      	ldr	r3, [pc, #28]	; (800a06c <pbuf_alloc+0x1d4>)
 800a050:	f240 1227 	movw	r2, #295	; 0x127
 800a054:	490a      	ldr	r1, [pc, #40]	; (800a080 <pbuf_alloc+0x1e8>)
 800a056:	4807      	ldr	r0, [pc, #28]	; (800a074 <pbuf_alloc+0x1dc>)
 800a058:	f00a fa12 	bl	8014480 <iprintf>
      return NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	e001      	b.n	800a064 <pbuf_alloc+0x1cc>
      break;
 800a060:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a064:	4618      	mov	r0, r3
 800a066:	3728      	adds	r7, #40	; 0x28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08016ab8 	.word	0x08016ab8
 800a070:	08016ae8 	.word	0x08016ae8
 800a074:	08016b18 	.word	0x08016b18
 800a078:	08016b40 	.word	0x08016b40
 800a07c:	08016b74 	.word	0x08016b74
 800a080:	08016ba0 	.word	0x08016ba0

0800a084 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af02      	add	r7, sp, #8
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	807b      	strh	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a094:	883b      	ldrh	r3, [r7, #0]
 800a096:	2b41      	cmp	r3, #65	; 0x41
 800a098:	d009      	beq.n	800a0ae <pbuf_alloc_reference+0x2a>
 800a09a:	883b      	ldrh	r3, [r7, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d006      	beq.n	800a0ae <pbuf_alloc_reference+0x2a>
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <pbuf_alloc_reference+0x5c>)
 800a0a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a0a6:	490f      	ldr	r1, [pc, #60]	; (800a0e4 <pbuf_alloc_reference+0x60>)
 800a0a8:	480f      	ldr	r0, [pc, #60]	; (800a0e8 <pbuf_alloc_reference+0x64>)
 800a0aa:	f00a f9e9 	bl	8014480 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a0ae:	200b      	movs	r0, #11
 800a0b0:	f7ff fb20 	bl	80096f4 <memp_malloc>
 800a0b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e00b      	b.n	800a0d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a0c0:	8879      	ldrh	r1, [r7, #2]
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	883b      	ldrh	r3, [r7, #0]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff feb7 	bl	8009e44 <pbuf_init_alloced_pbuf>
  return p;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	08016ab8 	.word	0x08016ab8
 800a0e4:	08016bbc 	.word	0x08016bbc
 800a0e8:	08016b18 	.word	0x08016b18

0800a0ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	81bb      	strh	r3, [r7, #12]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a104:	8a7b      	ldrh	r3, [r7, #18]
 800a106:	3303      	adds	r3, #3
 800a108:	f023 0203 	bic.w	r2, r3, #3
 800a10c:	89bb      	ldrh	r3, [r7, #12]
 800a10e:	441a      	add	r2, r3
 800a110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	d901      	bls.n	800a11a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	e018      	b.n	800a14c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d007      	beq.n	800a130 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a120:	8a7b      	ldrh	r3, [r7, #18]
 800a122:	3303      	adds	r3, #3
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	4413      	add	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	e001      	b.n	800a134 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	89b9      	ldrh	r1, [r7, #12]
 800a138:	89ba      	ldrh	r2, [r7, #12]
 800a13a:	2302      	movs	r3, #2
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	897b      	ldrh	r3, [r7, #10]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	460b      	mov	r3, r1
 800a144:	6979      	ldr	r1, [r7, #20]
 800a146:	f7ff fe7d 	bl	8009e44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a14a:	687b      	ldr	r3, [r7, #4]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <pbuf_realloc+0x20>
 800a166:	4b3a      	ldr	r3, [pc, #232]	; (800a250 <pbuf_realloc+0xfc>)
 800a168:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a16c:	4939      	ldr	r1, [pc, #228]	; (800a254 <pbuf_realloc+0x100>)
 800a16e:	483a      	ldr	r0, [pc, #232]	; (800a258 <pbuf_realloc+0x104>)
 800a170:	f00a f986 	bl	8014480 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	887a      	ldrh	r2, [r7, #2]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d263      	bcs.n	800a246 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	891a      	ldrh	r2, [r3, #8]
 800a182:	887b      	ldrh	r3, [r7, #2]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a188:	887b      	ldrh	r3, [r7, #2]
 800a18a:	817b      	strh	r3, [r7, #10]
  q = p;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a190:	e018      	b.n	800a1c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	895b      	ldrh	r3, [r3, #10]
 800a196:	897a      	ldrh	r2, [r7, #10]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	891a      	ldrh	r2, [r3, #8]
 800a1a0:	893b      	ldrh	r3, [r7, #8]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <pbuf_realloc+0x70>
 800a1b6:	4b26      	ldr	r3, [pc, #152]	; (800a250 <pbuf_realloc+0xfc>)
 800a1b8:	f240 12af 	movw	r2, #431	; 0x1af
 800a1bc:	4927      	ldr	r1, [pc, #156]	; (800a25c <pbuf_realloc+0x108>)
 800a1be:	4826      	ldr	r0, [pc, #152]	; (800a258 <pbuf_realloc+0x104>)
 800a1c0:	f00a f95e 	bl	8014480 <iprintf>
  while (rem_len > q->len) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	895b      	ldrh	r3, [r3, #10]
 800a1c8:	897a      	ldrh	r2, [r7, #10]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d8e1      	bhi.n	800a192 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7b1b      	ldrb	r3, [r3, #12]
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d121      	bne.n	800a21e <pbuf_realloc+0xca>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	895b      	ldrh	r3, [r3, #10]
 800a1de:	897a      	ldrh	r2, [r7, #10]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d01c      	beq.n	800a21e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	7b5b      	ldrb	r3, [r3, #13]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d116      	bne.n	800a21e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	897b      	ldrh	r3, [r7, #10]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4619      	mov	r1, r3
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7fe ffc8 	bl	8009198 <mem_trim>
 800a208:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <pbuf_realloc+0xca>
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <pbuf_realloc+0xfc>)
 800a212:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a216:	4912      	ldr	r1, [pc, #72]	; (800a260 <pbuf_realloc+0x10c>)
 800a218:	480f      	ldr	r0, [pc, #60]	; (800a258 <pbuf_realloc+0x104>)
 800a21a:	f00a f931 	bl	8014480 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	897a      	ldrh	r2, [r7, #10]
 800a222:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	895a      	ldrh	r2, [r3, #10]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f911 	bl	800a460 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e000      	b.n	800a248 <pbuf_realloc+0xf4>
    return;
 800a246:	bf00      	nop

}
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	08016ab8 	.word	0x08016ab8
 800a254:	08016bd0 	.word	0x08016bd0
 800a258:	08016b18 	.word	0x08016b18
 800a25c:	08016be8 	.word	0x08016be8
 800a260:	08016c00 	.word	0x08016c00

0800a264 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <pbuf_add_header_impl+0x22>
 800a278:	4b2b      	ldr	r3, [pc, #172]	; (800a328 <pbuf_add_header_impl+0xc4>)
 800a27a:	f240 12df 	movw	r2, #479	; 0x1df
 800a27e:	492b      	ldr	r1, [pc, #172]	; (800a32c <pbuf_add_header_impl+0xc8>)
 800a280:	482b      	ldr	r0, [pc, #172]	; (800a330 <pbuf_add_header_impl+0xcc>)
 800a282:	f00a f8fd 	bl	8014480 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <pbuf_add_header_impl+0x30>
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d301      	bcc.n	800a298 <pbuf_add_header_impl+0x34>
    return 1;
 800a294:	2301      	movs	r3, #1
 800a296:	e043      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e03e      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	891a      	ldrh	r2, [r3, #8]
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	8a7a      	ldrh	r2, [r7, #18]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d901      	bls.n	800a2ba <pbuf_add_header_impl+0x56>
    return 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e032      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	7b1b      	ldrb	r3, [r3, #12]
 800a2be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a2c0:	8a3b      	ldrh	r3, [r7, #16]
 800a2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00c      	beq.n	800a2e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	425b      	negs	r3, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3310      	adds	r3, #16
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d20d      	bcs.n	800a2fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e01d      	b.n	800a320 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	425b      	negs	r3, r3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	e001      	b.n	800a2fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e011      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	895a      	ldrh	r2, [r3, #10]
 800a306:	8a7b      	ldrh	r3, [r7, #18]
 800a308:	4413      	add	r3, r2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	891a      	ldrh	r2, [r3, #8]
 800a314:	8a7b      	ldrh	r3, [r7, #18]
 800a316:	4413      	add	r3, r2
 800a318:	b29a      	uxth	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	811a      	strh	r2, [r3, #8]


  return 0;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	08016ab8 	.word	0x08016ab8
 800a32c:	08016c1c 	.word	0x08016c1c
 800a330:	08016b18 	.word	0x08016b18

0800a334 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a33e:	2200      	movs	r2, #0
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff ff8e 	bl	800a264 <pbuf_add_header_impl>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <pbuf_remove_header+0x1e>
 800a364:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <pbuf_remove_header+0x94>)
 800a366:	f240 224b 	movw	r2, #587	; 0x24b
 800a36a:	4920      	ldr	r1, [pc, #128]	; (800a3ec <pbuf_remove_header+0x98>)
 800a36c:	4820      	ldr	r0, [pc, #128]	; (800a3f0 <pbuf_remove_header+0x9c>)
 800a36e:	f00a f887 	bl	8014480 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d003      	beq.n	800a380 <pbuf_remove_header+0x2c>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a37e:	d301      	bcc.n	800a384 <pbuf_remove_header+0x30>
    return 1;
 800a380:	2301      	movs	r3, #1
 800a382:	e02c      	b.n	800a3de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <pbuf_remove_header+0x3a>
    return 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e027      	b.n	800a3de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	895b      	ldrh	r3, [r3, #10]
 800a396:	89fa      	ldrh	r2, [r7, #14]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d908      	bls.n	800a3ae <pbuf_remove_header+0x5a>
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <pbuf_remove_header+0x94>)
 800a39e:	f240 2255 	movw	r2, #597	; 0x255
 800a3a2:	4914      	ldr	r1, [pc, #80]	; (800a3f4 <pbuf_remove_header+0xa0>)
 800a3a4:	4812      	ldr	r0, [pc, #72]	; (800a3f0 <pbuf_remove_header+0x9c>)
 800a3a6:	f00a f86b 	bl	8014480 <iprintf>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e017      	b.n	800a3de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	441a      	add	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	895a      	ldrh	r2, [r3, #10]
 800a3c4:	89fb      	ldrh	r3, [r7, #14]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	891a      	ldrh	r2, [r3, #8]
 800a3d2:	89fb      	ldrh	r3, [r7, #14]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	08016ab8 	.word	0x08016ab8
 800a3ec:	08016c1c 	.word	0x08016c1c
 800a3f0:	08016b18 	.word	0x08016b18
 800a3f4:	08016c28 	.word	0x08016c28

0800a3f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	da08      	bge.n	800a422 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a410:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a414:	425b      	negs	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ff9b 	bl	800a354 <pbuf_remove_header>
 800a41e:	4603      	mov	r3, r0
 800a420:	e007      	b.n	800a432 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a426:	787a      	ldrb	r2, [r7, #1]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff ff1a 	bl	800a264 <pbuf_add_header_impl>
 800a430:	4603      	mov	r3, r0
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a44a:	2201      	movs	r2, #1
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ffd2 	bl	800a3f8 <pbuf_header_impl>
 800a454:	4603      	mov	r3, r0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d106      	bne.n	800a482 <pbuf_free+0x22>
 800a474:	4b3b      	ldr	r3, [pc, #236]	; (800a564 <pbuf_free+0x104>)
 800a476:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a47a:	493b      	ldr	r1, [pc, #236]	; (800a568 <pbuf_free+0x108>)
 800a47c:	483b      	ldr	r0, [pc, #236]	; (800a56c <pbuf_free+0x10c>)
 800a47e:	f009 ffff 	bl	8014480 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a482:	2300      	movs	r3, #0
 800a484:	e069      	b.n	800a55a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a48a:	e062      	b.n	800a552 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a48c:	f009 ff90 	bl	80143b0 <sys_arch_protect>
 800a490:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7b9b      	ldrb	r3, [r3, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <pbuf_free+0x48>
 800a49a:	4b32      	ldr	r3, [pc, #200]	; (800a564 <pbuf_free+0x104>)
 800a49c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a4a0:	4933      	ldr	r1, [pc, #204]	; (800a570 <pbuf_free+0x110>)
 800a4a2:	4832      	ldr	r0, [pc, #200]	; (800a56c <pbuf_free+0x10c>)
 800a4a4:	f009 ffec 	bl	8014480 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7b9b      	ldrb	r3, [r3, #14]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	739a      	strb	r2, [r3, #14]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7b9b      	ldrb	r3, [r3, #14]
 800a4b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a4ba:	69b8      	ldr	r0, [r7, #24]
 800a4bc:	f009 ff86 	bl	80143cc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d143      	bne.n	800a54e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7b1b      	ldrb	r3, [r3, #12]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7b5b      	ldrb	r3, [r3, #13]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d011      	beq.n	800a506 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <pbuf_free+0x9c>
 800a4ee:	4b1d      	ldr	r3, [pc, #116]	; (800a564 <pbuf_free+0x104>)
 800a4f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a4f4:	491f      	ldr	r1, [pc, #124]	; (800a574 <pbuf_free+0x114>)
 800a4f6:	481d      	ldr	r0, [pc, #116]	; (800a56c <pbuf_free+0x10c>)
 800a4f8:	f009 ffc2 	bl	8014480 <iprintf>
        pc->custom_free_function(p);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	4798      	blx	r3
 800a504:	e01d      	b.n	800a542 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d104      	bne.n	800a516 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	200c      	movs	r0, #12
 800a510:	f7ff f966 	bl	80097e0 <memp_free>
 800a514:	e015      	b.n	800a542 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d104      	bne.n	800a526 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	200b      	movs	r0, #11
 800a520:	f7ff f95e 	bl	80097e0 <memp_free>
 800a524:	e00d      	b.n	800a542 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <pbuf_free+0xd4>
          mem_free(p);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fe fda3 	bl	8009078 <mem_free>
 800a532:	e006      	b.n	800a542 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <pbuf_free+0x104>)
 800a536:	f240 320f 	movw	r2, #783	; 0x30f
 800a53a:	490f      	ldr	r1, [pc, #60]	; (800a578 <pbuf_free+0x118>)
 800a53c:	480b      	ldr	r0, [pc, #44]	; (800a56c <pbuf_free+0x10c>)
 800a53e:	f009 ff9f 	bl	8014480 <iprintf>
        }
      }
      count++;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	3301      	adds	r3, #1
 800a546:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	607b      	str	r3, [r7, #4]
 800a54c:	e001      	b.n	800a552 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d199      	bne.n	800a48c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a558:	7ffb      	ldrb	r3, [r7, #31]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3720      	adds	r7, #32
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	08016ab8 	.word	0x08016ab8
 800a568:	08016c1c 	.word	0x08016c1c
 800a56c:	08016b18 	.word	0x08016b18
 800a570:	08016c48 	.word	0x08016c48
 800a574:	08016c60 	.word	0x08016c60
 800a578:	08016c84 	.word	0x08016c84

0800a57c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a588:	e005      	b.n	800a596 <pbuf_clen+0x1a>
    ++len;
 800a58a:	89fb      	ldrh	r3, [r7, #14]
 800a58c:	3301      	adds	r3, #1
 800a58e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f6      	bne.n	800a58a <pbuf_clen+0xe>
  }
  return len;
 800a59c:	89fb      	ldrh	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
	...

0800a5ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d016      	beq.n	800a5e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5ba:	f009 fef9 	bl	80143b0 <sys_arch_protect>
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7b9b      	ldrb	r3, [r3, #14]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	739a      	strb	r2, [r3, #14]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f009 fefd 	bl	80143cc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	7b9b      	ldrb	r3, [r3, #14]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <pbuf_ref+0x3c>
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <pbuf_ref+0x44>)
 800a5dc:	f240 3242 	movw	r2, #834	; 0x342
 800a5e0:	4904      	ldr	r1, [pc, #16]	; (800a5f4 <pbuf_ref+0x48>)
 800a5e2:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <pbuf_ref+0x4c>)
 800a5e4:	f009 ff4c 	bl	8014480 <iprintf>
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	08016ab8 	.word	0x08016ab8
 800a5f4:	08016c98 	.word	0x08016c98
 800a5f8:	08016b18 	.word	0x08016b18

0800a5fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <pbuf_cat+0x16>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d107      	bne.n	800a622 <pbuf_cat+0x26>
 800a612:	4b20      	ldr	r3, [pc, #128]	; (800a694 <pbuf_cat+0x98>)
 800a614:	f240 3259 	movw	r2, #857	; 0x359
 800a618:	491f      	ldr	r1, [pc, #124]	; (800a698 <pbuf_cat+0x9c>)
 800a61a:	4820      	ldr	r0, [pc, #128]	; (800a69c <pbuf_cat+0xa0>)
 800a61c:	f009 ff30 	bl	8014480 <iprintf>
 800a620:	e034      	b.n	800a68c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e00a      	b.n	800a63e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	891a      	ldrh	r2, [r3, #8]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	891b      	ldrh	r3, [r3, #8]
 800a630:	4413      	add	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f0      	bne.n	800a628 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	891a      	ldrh	r2, [r3, #8]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	895b      	ldrh	r3, [r3, #10]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d006      	beq.n	800a660 <pbuf_cat+0x64>
 800a652:	4b10      	ldr	r3, [pc, #64]	; (800a694 <pbuf_cat+0x98>)
 800a654:	f240 3262 	movw	r2, #866	; 0x362
 800a658:	4911      	ldr	r1, [pc, #68]	; (800a6a0 <pbuf_cat+0xa4>)
 800a65a:	4810      	ldr	r0, [pc, #64]	; (800a69c <pbuf_cat+0xa0>)
 800a65c:	f009 ff10 	bl	8014480 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d006      	beq.n	800a676 <pbuf_cat+0x7a>
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <pbuf_cat+0x98>)
 800a66a:	f240 3263 	movw	r2, #867	; 0x363
 800a66e:	490d      	ldr	r1, [pc, #52]	; (800a6a4 <pbuf_cat+0xa8>)
 800a670:	480a      	ldr	r0, [pc, #40]	; (800a69c <pbuf_cat+0xa0>)
 800a672:	f009 ff05 	bl	8014480 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	891a      	ldrh	r2, [r3, #8]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	891b      	ldrh	r3, [r3, #8]
 800a67e:	4413      	add	r3, r2
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	08016ab8 	.word	0x08016ab8
 800a698:	08016cac 	.word	0x08016cac
 800a69c:	08016b18 	.word	0x08016b18
 800a6a0:	08016ce4 	.word	0x08016ce4
 800a6a4:	08016d14 	.word	0x08016d14

0800a6a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff ffa1 	bl	800a5fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a6ba:	6838      	ldr	r0, [r7, #0]
 800a6bc:	f7ff ff76 	bl	800a5ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d008      	beq.n	800a6f2 <pbuf_copy+0x2a>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <pbuf_copy+0x2a>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	891a      	ldrh	r2, [r3, #8]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	891b      	ldrh	r3, [r3, #8]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d209      	bcs.n	800a706 <pbuf_copy+0x3e>
 800a6f2:	4b57      	ldr	r3, [pc, #348]	; (800a850 <pbuf_copy+0x188>)
 800a6f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a6f8:	4956      	ldr	r1, [pc, #344]	; (800a854 <pbuf_copy+0x18c>)
 800a6fa:	4857      	ldr	r0, [pc, #348]	; (800a858 <pbuf_copy+0x190>)
 800a6fc:	f009 fec0 	bl	8014480 <iprintf>
 800a700:	f06f 030f 	mvn.w	r3, #15
 800a704:	e09f      	b.n	800a846 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	895b      	ldrh	r3, [r3, #10]
 800a70a:	461a      	mov	r2, r3
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	895b      	ldrh	r3, [r3, #10]
 800a714:	4619      	mov	r1, r3
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	1acb      	subs	r3, r1, r3
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d306      	bcc.n	800a72c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	895b      	ldrh	r3, [r3, #10]
 800a722:	461a      	mov	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e005      	b.n	800a738 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	895b      	ldrh	r3, [r3, #10]
 800a730:	461a      	mov	r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	18d0      	adds	r0, r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	4413      	add	r3, r2
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4619      	mov	r1, r3
 800a74c:	f009 fe82 	bl	8014454 <memcpy>
    offset_to += len;
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4413      	add	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	895b      	ldrh	r3, [r3, #10]
 800a764:	461a      	mov	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4293      	cmp	r3, r2
 800a76a:	d906      	bls.n	800a77a <pbuf_copy+0xb2>
 800a76c:	4b38      	ldr	r3, [pc, #224]	; (800a850 <pbuf_copy+0x188>)
 800a76e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a772:	493a      	ldr	r1, [pc, #232]	; (800a85c <pbuf_copy+0x194>)
 800a774:	4838      	ldr	r0, [pc, #224]	; (800a858 <pbuf_copy+0x190>)
 800a776:	f009 fe83 	bl	8014480 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	461a      	mov	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	4293      	cmp	r3, r2
 800a784:	d906      	bls.n	800a794 <pbuf_copy+0xcc>
 800a786:	4b32      	ldr	r3, [pc, #200]	; (800a850 <pbuf_copy+0x188>)
 800a788:	f240 32da 	movw	r2, #986	; 0x3da
 800a78c:	4934      	ldr	r1, [pc, #208]	; (800a860 <pbuf_copy+0x198>)
 800a78e:	4832      	ldr	r0, [pc, #200]	; (800a858 <pbuf_copy+0x190>)
 800a790:	f009 fe76 	bl	8014480 <iprintf>
    if (offset_from >= p_from->len) {
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	895b      	ldrh	r3, [r3, #10]
 800a798:	461a      	mov	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d304      	bcc.n	800a7aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	895b      	ldrh	r3, [r3, #10]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d114      	bne.n	800a7e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10c      	bne.n	800a7e0 <pbuf_copy+0x118>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <pbuf_copy+0x118>
 800a7cc:	4b20      	ldr	r3, [pc, #128]	; (800a850 <pbuf_copy+0x188>)
 800a7ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a7d2:	4924      	ldr	r1, [pc, #144]	; (800a864 <pbuf_copy+0x19c>)
 800a7d4:	4820      	ldr	r0, [pc, #128]	; (800a858 <pbuf_copy+0x190>)
 800a7d6:	f009 fe53 	bl	8014480 <iprintf>
 800a7da:	f06f 030f 	mvn.w	r3, #15
 800a7de:	e032      	b.n	800a846 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d013      	beq.n	800a80e <pbuf_copy+0x146>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	895a      	ldrh	r2, [r3, #10]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	891b      	ldrh	r3, [r3, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d10d      	bne.n	800a80e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d009      	beq.n	800a80e <pbuf_copy+0x146>
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <pbuf_copy+0x188>)
 800a7fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a800:	4919      	ldr	r1, [pc, #100]	; (800a868 <pbuf_copy+0x1a0>)
 800a802:	4815      	ldr	r0, [pc, #84]	; (800a858 <pbuf_copy+0x190>)
 800a804:	f009 fe3c 	bl	8014480 <iprintf>
 800a808:	f06f 0305 	mvn.w	r3, #5
 800a80c:	e01b      	b.n	800a846 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d013      	beq.n	800a83c <pbuf_copy+0x174>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	895a      	ldrh	r2, [r3, #10]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	891b      	ldrh	r3, [r3, #8]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d10d      	bne.n	800a83c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d009      	beq.n	800a83c <pbuf_copy+0x174>
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <pbuf_copy+0x188>)
 800a82a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a82e:	490e      	ldr	r1, [pc, #56]	; (800a868 <pbuf_copy+0x1a0>)
 800a830:	4809      	ldr	r0, [pc, #36]	; (800a858 <pbuf_copy+0x190>)
 800a832:	f009 fe25 	bl	8014480 <iprintf>
 800a836:	f06f 0305 	mvn.w	r3, #5
 800a83a:	e004      	b.n	800a846 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f47f af61 	bne.w	800a706 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	08016ab8 	.word	0x08016ab8
 800a854:	08016d60 	.word	0x08016d60
 800a858:	08016b18 	.word	0x08016b18
 800a85c:	08016d90 	.word	0x08016d90
 800a860:	08016da8 	.word	0x08016da8
 800a864:	08016dc4 	.word	0x08016dc4
 800a868:	08016dd4 	.word	0x08016dd4

0800a86c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	460b      	mov	r3, r1
 800a87c:	80fb      	strh	r3, [r7, #6]
 800a87e:	4613      	mov	r3, r2
 800a880:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d108      	bne.n	800a8a2 <pbuf_copy_partial+0x36>
 800a890:	4b2b      	ldr	r3, [pc, #172]	; (800a940 <pbuf_copy_partial+0xd4>)
 800a892:	f240 420a 	movw	r2, #1034	; 0x40a
 800a896:	492b      	ldr	r1, [pc, #172]	; (800a944 <pbuf_copy_partial+0xd8>)
 800a898:	482b      	ldr	r0, [pc, #172]	; (800a948 <pbuf_copy_partial+0xdc>)
 800a89a:	f009 fdf1 	bl	8014480 <iprintf>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e04a      	b.n	800a938 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d108      	bne.n	800a8ba <pbuf_copy_partial+0x4e>
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <pbuf_copy_partial+0xd4>)
 800a8aa:	f240 420b 	movw	r2, #1035	; 0x40b
 800a8ae:	4927      	ldr	r1, [pc, #156]	; (800a94c <pbuf_copy_partial+0xe0>)
 800a8b0:	4825      	ldr	r0, [pc, #148]	; (800a948 <pbuf_copy_partial+0xdc>)
 800a8b2:	f009 fde5 	bl	8014480 <iprintf>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e03e      	b.n	800a938 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	61fb      	str	r3, [r7, #28]
 800a8be:	e034      	b.n	800a92a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a8c0:	88bb      	ldrh	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <pbuf_copy_partial+0x70>
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	895b      	ldrh	r3, [r3, #10]
 800a8ca:	88ba      	ldrh	r2, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d305      	bcc.n	800a8dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	88ba      	ldrh	r2, [r7, #4]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	80bb      	strh	r3, [r7, #4]
 800a8da:	e023      	b.n	800a924 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	895a      	ldrh	r2, [r3, #10]
 800a8e0:	88bb      	ldrh	r3, [r7, #4]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a8e6:	8b3a      	ldrh	r2, [r7, #24]
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d901      	bls.n	800a8f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a8ee:	88fb      	ldrh	r3, [r7, #6]
 800a8f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a8f2:	8b7b      	ldrh	r3, [r7, #26]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	18d0      	adds	r0, r2, r3
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	88bb      	ldrh	r3, [r7, #4]
 800a8fe:	4413      	add	r3, r2
 800a900:	8b3a      	ldrh	r2, [r7, #24]
 800a902:	4619      	mov	r1, r3
 800a904:	f009 fda6 	bl	8014454 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a908:	8afa      	ldrh	r2, [r7, #22]
 800a90a:	8b3b      	ldrh	r3, [r7, #24]
 800a90c:	4413      	add	r3, r2
 800a90e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a910:	8b7a      	ldrh	r2, [r7, #26]
 800a912:	8b3b      	ldrh	r3, [r7, #24]
 800a914:	4413      	add	r3, r2
 800a916:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a918:	88fa      	ldrh	r2, [r7, #6]
 800a91a:	8b3b      	ldrh	r3, [r7, #24]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	88fb      	ldrh	r3, [r7, #6]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <pbuf_copy_partial+0xca>
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1c4      	bne.n	800a8c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a936:	8afb      	ldrh	r3, [r7, #22]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3720      	adds	r7, #32
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	08016ab8 	.word	0x08016ab8
 800a944:	08016e00 	.word	0x08016e00
 800a948:	08016b18 	.word	0x08016b18
 800a94c:	08016e20 	.word	0x08016e20

0800a950 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	603a      	str	r2, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
 800a95c:	460b      	mov	r3, r1
 800a95e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	8919      	ldrh	r1, [r3, #8]
 800a964:	88ba      	ldrh	r2, [r7, #4]
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fa95 	bl	8009e98 <pbuf_alloc>
 800a96e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <pbuf_clone+0x2a>
    return NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	e011      	b.n	800a99e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff fea3 	bl	800a6c8 <pbuf_copy>
 800a982:	4603      	mov	r3, r0
 800a984:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a986:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d006      	beq.n	800a99c <pbuf_clone+0x4c>
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <pbuf_clone+0x58>)
 800a990:	f240 5224 	movw	r2, #1316	; 0x524
 800a994:	4905      	ldr	r1, [pc, #20]	; (800a9ac <pbuf_clone+0x5c>)
 800a996:	4806      	ldr	r0, [pc, #24]	; (800a9b0 <pbuf_clone+0x60>)
 800a998:	f009 fd72 	bl	8014480 <iprintf>
  return q;
 800a99c:	68fb      	ldr	r3, [r7, #12]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	08016ab8 	.word	0x08016ab8
 800a9ac:	08016f2c 	.word	0x08016f2c
 800a9b0:	08016b18 	.word	0x08016b18

0800a9b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a9b8:	f009 fd7a 	bl	80144b0 <rand>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b01      	ldr	r3, [pc, #4]	; (800a9d4 <tcp_init+0x20>)
 800a9ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a9d0:	bf00      	nop
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000010 	.word	0x20000010

0800a9d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7d1b      	ldrb	r3, [r3, #20]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d105      	bne.n	800a9f4 <tcp_free+0x1c>
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <tcp_free+0x2c>)
 800a9ea:	22d4      	movs	r2, #212	; 0xd4
 800a9ec:	4906      	ldr	r1, [pc, #24]	; (800aa08 <tcp_free+0x30>)
 800a9ee:	4807      	ldr	r0, [pc, #28]	; (800aa0c <tcp_free+0x34>)
 800a9f0:	f009 fd46 	bl	8014480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f7fe fef2 	bl	80097e0 <memp_free>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	08016fb8 	.word	0x08016fb8
 800aa08:	08016fe8 	.word	0x08016fe8
 800aa0c:	08016ffc 	.word	0x08016ffc

0800aa10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	7d1b      	ldrb	r3, [r3, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d105      	bne.n	800aa2c <tcp_free_listen+0x1c>
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <tcp_free_listen+0x2c>)
 800aa22:	22df      	movs	r2, #223	; 0xdf
 800aa24:	4906      	ldr	r1, [pc, #24]	; (800aa40 <tcp_free_listen+0x30>)
 800aa26:	4807      	ldr	r0, [pc, #28]	; (800aa44 <tcp_free_listen+0x34>)
 800aa28:	f009 fd2a 	bl	8014480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	2002      	movs	r0, #2
 800aa30:	f7fe fed6 	bl	80097e0 <memp_free>
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	08016fb8 	.word	0x08016fb8
 800aa40:	08017024 	.word	0x08017024
 800aa44:	08016ffc 	.word	0x08016ffc

0800aa48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa4c:	f001 f85c 	bl	800bb08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <tcp_tmr+0x28>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <tcp_tmr+0x28>)
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <tcp_tmr+0x28>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa68:	f000 fd0e 	bl	800b488 <tcp_slowtmr>
  }
}
 800aa6c:	bf00      	nop
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	2000fe5d 	.word	0x2000fe5d

0800aa74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <tcp_remove_listener+0x1c>
 800aa84:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <tcp_remove_listener+0x48>)
 800aa86:	22ff      	movs	r2, #255	; 0xff
 800aa88:	490d      	ldr	r1, [pc, #52]	; (800aac0 <tcp_remove_listener+0x4c>)
 800aa8a:	480e      	ldr	r0, [pc, #56]	; (800aac4 <tcp_remove_listener+0x50>)
 800aa8c:	f009 fcf8 	bl	8014480 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e00a      	b.n	800aaac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d102      	bne.n	800aaa6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f1      	bne.n	800aa96 <tcp_remove_listener+0x22>
    }
  }
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	08016fb8 	.word	0x08016fb8
 800aac0:	08017040 	.word	0x08017040
 800aac4:	08016ffc 	.word	0x08016ffc

0800aac8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <tcp_listen_closed+0x1c>
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <tcp_listen_closed+0x60>)
 800aad8:	f240 1211 	movw	r2, #273	; 0x111
 800aadc:	4913      	ldr	r1, [pc, #76]	; (800ab2c <tcp_listen_closed+0x64>)
 800aade:	4814      	ldr	r0, [pc, #80]	; (800ab30 <tcp_listen_closed+0x68>)
 800aae0:	f009 fcce 	bl	8014480 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7d1b      	ldrb	r3, [r3, #20]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d006      	beq.n	800aafa <tcp_listen_closed+0x32>
 800aaec:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <tcp_listen_closed+0x60>)
 800aaee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aaf2:	4910      	ldr	r1, [pc, #64]	; (800ab34 <tcp_listen_closed+0x6c>)
 800aaf4:	480e      	ldr	r0, [pc, #56]	; (800ab30 <tcp_listen_closed+0x68>)
 800aaf6:	f009 fcc3 	bl	8014480 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aafa:	2301      	movs	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
 800aafe:	e00b      	b.n	800ab18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ab00:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <tcp_listen_closed+0x70>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff ffb1 	bl	800aa74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d9f0      	bls.n	800ab00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	08016fb8 	.word	0x08016fb8
 800ab2c:	08017068 	.word	0x08017068
 800ab30:	08016ffc 	.word	0x08016ffc
 800ab34:	08017074 	.word	0x08017074
 800ab38:	08019090 	.word	0x08019090

0800ab3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ab3c:	b5b0      	push	{r4, r5, r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <tcp_close_shutdown+0x20>
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <tcp_close_shutdown+0x1a0>)
 800ab50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ab54:	4962      	ldr	r1, [pc, #392]	; (800ace0 <tcp_close_shutdown+0x1a4>)
 800ab56:	4863      	ldr	r0, [pc, #396]	; (800ace4 <tcp_close_shutdown+0x1a8>)
 800ab58:	f009 fc92 	bl	8014480 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d066      	beq.n	800ac30 <tcp_close_shutdown+0xf4>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7d1b      	ldrb	r3, [r3, #20]
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d003      	beq.n	800ab72 <tcp_close_shutdown+0x36>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7d1b      	ldrb	r3, [r3, #20]
 800ab6e:	2b07      	cmp	r3, #7
 800ab70:	d15e      	bne.n	800ac30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d104      	bne.n	800ab84 <tcp_close_shutdown+0x48>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab82:	d055      	beq.n	800ac30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8b5b      	ldrh	r3, [r3, #26]
 800ab88:	f003 0310 	and.w	r3, r3, #16
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <tcp_close_shutdown+0x62>
 800ab90:	4b52      	ldr	r3, [pc, #328]	; (800acdc <tcp_close_shutdown+0x1a0>)
 800ab92:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ab96:	4954      	ldr	r1, [pc, #336]	; (800ace8 <tcp_close_shutdown+0x1ac>)
 800ab98:	4852      	ldr	r0, [pc, #328]	; (800ace4 <tcp_close_shutdown+0x1a8>)
 800ab9a:	f009 fc71 	bl	8014480 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aba6:	687d      	ldr	r5, [r7, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3304      	adds	r3, #4
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	8ad2      	ldrh	r2, [r2, #22]
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	8b09      	ldrh	r1, [r1, #24]
 800abb4:	9102      	str	r1, [sp, #8]
 800abb6:	9201      	str	r2, [sp, #4]
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	462b      	mov	r3, r5
 800abbc:	4622      	mov	r2, r4
 800abbe:	4601      	mov	r1, r0
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f005 fd71 	bl	80106a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f001 fb4e 	bl	800c268 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800abcc:	4b47      	ldr	r3, [pc, #284]	; (800acec <tcp_close_shutdown+0x1b0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d105      	bne.n	800abe2 <tcp_close_shutdown+0xa6>
 800abd6:	4b45      	ldr	r3, [pc, #276]	; (800acec <tcp_close_shutdown+0x1b0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4a43      	ldr	r2, [pc, #268]	; (800acec <tcp_close_shutdown+0x1b0>)
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	e013      	b.n	800ac0a <tcp_close_shutdown+0xce>
 800abe2:	4b42      	ldr	r3, [pc, #264]	; (800acec <tcp_close_shutdown+0x1b0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e00c      	b.n	800ac04 <tcp_close_shutdown+0xc8>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d104      	bne.n	800abfe <tcp_close_shutdown+0xc2>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68da      	ldr	r2, [r3, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	60da      	str	r2, [r3, #12]
 800abfc:	e005      	b.n	800ac0a <tcp_close_shutdown+0xce>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1ef      	bne.n	800abea <tcp_close_shutdown+0xae>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	60da      	str	r2, [r3, #12]
 800ac10:	4b37      	ldr	r3, [pc, #220]	; (800acf0 <tcp_close_shutdown+0x1b4>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ac16:	4b37      	ldr	r3, [pc, #220]	; (800acf4 <tcp_close_shutdown+0x1b8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d102      	bne.n	800ac26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ac20:	f003 ffe6 	bl	800ebf0 <tcp_trigger_input_pcb_close>
 800ac24:	e002      	b.n	800ac2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff fed6 	bl	800a9d8 <tcp_free>
      }
      return ERR_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	e050      	b.n	800acd2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7d1b      	ldrb	r3, [r3, #20]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d03b      	beq.n	800acb0 <tcp_close_shutdown+0x174>
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	dc44      	bgt.n	800acc6 <tcp_close_shutdown+0x18a>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <tcp_close_shutdown+0x10a>
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d02a      	beq.n	800ac9a <tcp_close_shutdown+0x15e>
 800ac44:	e03f      	b.n	800acc6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	8adb      	ldrh	r3, [r3, #22]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d021      	beq.n	800ac92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac4e:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <tcp_close_shutdown+0x1bc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d105      	bne.n	800ac64 <tcp_close_shutdown+0x128>
 800ac58:	4b27      	ldr	r3, [pc, #156]	; (800acf8 <tcp_close_shutdown+0x1bc>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	4a26      	ldr	r2, [pc, #152]	; (800acf8 <tcp_close_shutdown+0x1bc>)
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	e013      	b.n	800ac8c <tcp_close_shutdown+0x150>
 800ac64:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <tcp_close_shutdown+0x1bc>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60bb      	str	r3, [r7, #8]
 800ac6a:	e00c      	b.n	800ac86 <tcp_close_shutdown+0x14a>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d104      	bne.n	800ac80 <tcp_close_shutdown+0x144>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	60da      	str	r2, [r3, #12]
 800ac7e:	e005      	b.n	800ac8c <tcp_close_shutdown+0x150>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	60bb      	str	r3, [r7, #8]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1ef      	bne.n	800ac6c <tcp_close_shutdown+0x130>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fea0 	bl	800a9d8 <tcp_free>
      break;
 800ac98:	e01a      	b.n	800acd0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff ff14 	bl	800aac8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4816      	ldr	r0, [pc, #88]	; (800acfc <tcp_close_shutdown+0x1c0>)
 800aca4:	f001 fb30 	bl	800c308 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff feb1 	bl	800aa10 <tcp_free_listen>
      break;
 800acae:	e00f      	b.n	800acd0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	480e      	ldr	r0, [pc, #56]	; (800acec <tcp_close_shutdown+0x1b0>)
 800acb4:	f001 fb28 	bl	800c308 <tcp_pcb_remove>
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <tcp_close_shutdown+0x1b4>)
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff fe8a 	bl	800a9d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800acc4:	e004      	b.n	800acd0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f81a 	bl	800ad00 <tcp_close_shutdown_fin>
 800accc:	4603      	mov	r3, r0
 800acce:	e000      	b.n	800acd2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bdb0      	pop	{r4, r5, r7, pc}
 800acda:	bf00      	nop
 800acdc:	08016fb8 	.word	0x08016fb8
 800ace0:	0801708c 	.word	0x0801708c
 800ace4:	08016ffc 	.word	0x08016ffc
 800ace8:	080170ac 	.word	0x080170ac
 800acec:	2000fe54 	.word	0x2000fe54
 800acf0:	2000fe5c 	.word	0x2000fe5c
 800acf4:	2000fe94 	.word	0x2000fe94
 800acf8:	2000fe4c 	.word	0x2000fe4c
 800acfc:	2000fe50 	.word	0x2000fe50

0800ad00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <tcp_close_shutdown_fin+0x1c>
 800ad0e:	4b2e      	ldr	r3, [pc, #184]	; (800adc8 <tcp_close_shutdown_fin+0xc8>)
 800ad10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ad14:	492d      	ldr	r1, [pc, #180]	; (800adcc <tcp_close_shutdown_fin+0xcc>)
 800ad16:	482e      	ldr	r0, [pc, #184]	; (800add0 <tcp_close_shutdown_fin+0xd0>)
 800ad18:	f009 fbb2 	bl	8014480 <iprintf>

  switch (pcb->state) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7d1b      	ldrb	r3, [r3, #20]
 800ad20:	2b07      	cmp	r3, #7
 800ad22:	d020      	beq.n	800ad66 <tcp_close_shutdown_fin+0x66>
 800ad24:	2b07      	cmp	r3, #7
 800ad26:	dc2b      	bgt.n	800ad80 <tcp_close_shutdown_fin+0x80>
 800ad28:	2b03      	cmp	r3, #3
 800ad2a:	d002      	beq.n	800ad32 <tcp_close_shutdown_fin+0x32>
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d00d      	beq.n	800ad4c <tcp_close_shutdown_fin+0x4c>
 800ad30:	e026      	b.n	800ad80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f004 fdc6 	bl	800f8c4 <tcp_send_fin>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d11f      	bne.n	800ad84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2205      	movs	r2, #5
 800ad48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad4a:	e01b      	b.n	800ad84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f004 fdb9 	bl	800f8c4 <tcp_send_fin>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d114      	bne.n	800ad88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2205      	movs	r2, #5
 800ad62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad64:	e010      	b.n	800ad88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f004 fdac 	bl	800f8c4 <tcp_send_fin>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d109      	bne.n	800ad8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2209      	movs	r2, #9
 800ad7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad7e:	e005      	b.n	800ad8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e01c      	b.n	800adbe <tcp_close_shutdown_fin+0xbe>
      break;
 800ad84:	bf00      	nop
 800ad86:	e002      	b.n	800ad8e <tcp_close_shutdown_fin+0x8e>
      break;
 800ad88:	bf00      	nop
 800ad8a:	e000      	b.n	800ad8e <tcp_close_shutdown_fin+0x8e>
      break;
 800ad8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ad8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f004 fed2 	bl	800fb40 <tcp_output>
 800ad9c:	e00d      	b.n	800adba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ad9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada6:	d108      	bne.n	800adba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	8b5b      	ldrh	r3, [r3, #26]
 800adac:	f043 0308 	orr.w	r3, r3, #8
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	e001      	b.n	800adbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800adba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	08016fb8 	.word	0x08016fb8
 800adcc:	08017068 	.word	0x08017068
 800add0:	08016ffc 	.word	0x08016ffc

0800add4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <tcp_close+0x22>
 800ade2:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <tcp_close+0x4c>)
 800ade4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ade8:	490e      	ldr	r1, [pc, #56]	; (800ae24 <tcp_close+0x50>)
 800adea:	480f      	ldr	r0, [pc, #60]	; (800ae28 <tcp_close+0x54>)
 800adec:	f009 fb48 	bl	8014480 <iprintf>
 800adf0:	f06f 030f 	mvn.w	r3, #15
 800adf4:	e00f      	b.n	800ae16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7d1b      	ldrb	r3, [r3, #20]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d006      	beq.n	800ae0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	8b5b      	ldrh	r3, [r3, #26]
 800ae02:	f043 0310 	orr.w	r3, r3, #16
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff fe94 	bl	800ab3c <tcp_close_shutdown>
 800ae14:	4603      	mov	r3, r0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	08016fb8 	.word	0x08016fb8
 800ae24:	080170c8 	.word	0x080170c8
 800ae28:	08016ffc 	.word	0x08016ffc

0800ae2c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <tcp_shutdown+0x26>
 800ae3e:	4b26      	ldr	r3, [pc, #152]	; (800aed8 <tcp_shutdown+0xac>)
 800ae40:	f240 2207 	movw	r2, #519	; 0x207
 800ae44:	4925      	ldr	r1, [pc, #148]	; (800aedc <tcp_shutdown+0xb0>)
 800ae46:	4826      	ldr	r0, [pc, #152]	; (800aee0 <tcp_shutdown+0xb4>)
 800ae48:	f009 fb1a 	bl	8014480 <iprintf>
 800ae4c:	f06f 030f 	mvn.w	r3, #15
 800ae50:	e03d      	b.n	800aece <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	7d1b      	ldrb	r3, [r3, #20]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d102      	bne.n	800ae60 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ae5a:	f06f 030a 	mvn.w	r3, #10
 800ae5e:	e036      	b.n	800aece <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d01b      	beq.n	800ae9e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	8b5b      	ldrh	r3, [r3, #26]
 800ae6a:	f043 0310 	orr.w	r3, r3, #16
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d005      	beq.n	800ae86 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff fe5d 	bl	800ab3c <tcp_close_shutdown>
 800ae82:	4603      	mov	r3, r0
 800ae84:	e023      	b.n	800aece <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff fae4 	bl	800a460 <pbuf_free>
      pcb->refused_data = NULL;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d013      	beq.n	800aecc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	7d1b      	ldrb	r3, [r3, #20]
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	dc02      	bgt.n	800aeb2 <tcp_shutdown+0x86>
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	da02      	bge.n	800aeb6 <tcp_shutdown+0x8a>
 800aeb0:	e009      	b.n	800aec6 <tcp_shutdown+0x9a>
 800aeb2:	2b07      	cmp	r3, #7
 800aeb4:	d107      	bne.n	800aec6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	4619      	mov	r1, r3
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7ff fe3d 	bl	800ab3c <tcp_close_shutdown>
 800aec2:	4603      	mov	r3, r0
 800aec4:	e003      	b.n	800aece <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800aec6:	f06f 030a 	mvn.w	r3, #10
 800aeca:	e000      	b.n	800aece <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	08016fb8 	.word	0x08016fb8
 800aedc:	080170e0 	.word	0x080170e0
 800aee0:	08016ffc 	.word	0x08016ffc

0800aee4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08e      	sub	sp, #56	; 0x38
 800aee8:	af04      	add	r7, sp, #16
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d107      	bne.n	800af04 <tcp_abandon+0x20>
 800aef4:	4b52      	ldr	r3, [pc, #328]	; (800b040 <tcp_abandon+0x15c>)
 800aef6:	f240 223d 	movw	r2, #573	; 0x23d
 800aefa:	4952      	ldr	r1, [pc, #328]	; (800b044 <tcp_abandon+0x160>)
 800aefc:	4852      	ldr	r0, [pc, #328]	; (800b048 <tcp_abandon+0x164>)
 800aefe:	f009 fabf 	bl	8014480 <iprintf>
 800af02:	e099      	b.n	800b038 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	7d1b      	ldrb	r3, [r3, #20]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d106      	bne.n	800af1a <tcp_abandon+0x36>
 800af0c:	4b4c      	ldr	r3, [pc, #304]	; (800b040 <tcp_abandon+0x15c>)
 800af0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800af12:	494e      	ldr	r1, [pc, #312]	; (800b04c <tcp_abandon+0x168>)
 800af14:	484c      	ldr	r0, [pc, #304]	; (800b048 <tcp_abandon+0x164>)
 800af16:	f009 fab3 	bl	8014480 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7d1b      	ldrb	r3, [r3, #20]
 800af1e:	2b0a      	cmp	r3, #10
 800af20:	d107      	bne.n	800af32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	484a      	ldr	r0, [pc, #296]	; (800b050 <tcp_abandon+0x16c>)
 800af26:	f001 f9ef 	bl	800c308 <tcp_pcb_remove>
    tcp_free(pcb);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff fd54 	bl	800a9d8 <tcp_free>
 800af30:	e082      	b.n	800b038 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7d1b      	ldrb	r3, [r3, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d126      	bne.n	800afaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8adb      	ldrh	r3, [r3, #22]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02e      	beq.n	800afc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af64:	4b3b      	ldr	r3, [pc, #236]	; (800b054 <tcp_abandon+0x170>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d105      	bne.n	800af7a <tcp_abandon+0x96>
 800af6e:	4b39      	ldr	r3, [pc, #228]	; (800b054 <tcp_abandon+0x170>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a37      	ldr	r2, [pc, #220]	; (800b054 <tcp_abandon+0x170>)
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	e013      	b.n	800afa2 <tcp_abandon+0xbe>
 800af7a:	4b36      	ldr	r3, [pc, #216]	; (800b054 <tcp_abandon+0x170>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	e00c      	b.n	800af9c <tcp_abandon+0xb8>
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d104      	bne.n	800af96 <tcp_abandon+0xb2>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	60da      	str	r2, [r3, #12]
 800af94:	e005      	b.n	800afa2 <tcp_abandon+0xbe>
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1ef      	bne.n	800af82 <tcp_abandon+0x9e>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	60da      	str	r2, [r3, #12]
 800afa8:	e00b      	b.n	800afc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	8adb      	ldrh	r3, [r3, #22]
 800afb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4828      	ldr	r0, [pc, #160]	; (800b058 <tcp_abandon+0x174>)
 800afb8:	f001 f9a6 	bl	800c308 <tcp_pcb_remove>
 800afbc:	4b27      	ldr	r3, [pc, #156]	; (800b05c <tcp_abandon+0x178>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 fe7a 	bl	800bcc8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fe71 	bl	800bcc8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fe68 	bl	800bcc8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00e      	beq.n	800b01c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3304      	adds	r3, #4
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	8b12      	ldrh	r2, [r2, #24]
 800b008:	9202      	str	r2, [sp, #8]
 800b00a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	460b      	mov	r3, r1
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	69b9      	ldr	r1, [r7, #24]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f005 fb46 	bl	80106a8 <tcp_rst>
    }
    last_state = pcb->state;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7d1b      	ldrb	r3, [r3, #20]
 800b020:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff fcd8 	bl	800a9d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d004      	beq.n	800b038 <tcp_abandon+0x154>
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f06f 010c 	mvn.w	r1, #12
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	4798      	blx	r3
  }
}
 800b038:	3728      	adds	r7, #40	; 0x28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	08016fb8 	.word	0x08016fb8
 800b044:	080170fc 	.word	0x080170fc
 800b048:	08016ffc 	.word	0x08016ffc
 800b04c:	08017118 	.word	0x08017118
 800b050:	2000fe58 	.word	0x2000fe58
 800b054:	2000fe4c 	.word	0x2000fe4c
 800b058:	2000fe54 	.word	0x2000fe54
 800b05c:	2000fe5c 	.word	0x2000fe5c

0800b060 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b068:	2101      	movs	r1, #1
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff ff3a 	bl	800aee4 <tcp_abandon>
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <tcp_update_rcv_ann_wnd+0x1c>
 800b086:	4b25      	ldr	r3, [pc, #148]	; (800b11c <tcp_update_rcv_ann_wnd+0xa4>)
 800b088:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b08c:	4924      	ldr	r1, [pc, #144]	; (800b120 <tcp_update_rcv_ann_wnd+0xa8>)
 800b08e:	4825      	ldr	r0, [pc, #148]	; (800b124 <tcp_update_rcv_ann_wnd+0xac>)
 800b090:	f009 f9f6 	bl	8014480 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b09c:	4413      	add	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b0a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b0ac:	bf28      	it	cs
 800b0ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b0b2:	b292      	uxth	r2, r2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	db08      	blt.n	800b0d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	e020      	b.n	800b112 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dd03      	ble.n	800b0e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b0e4:	e014      	b.n	800b110 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f8:	d306      	bcc.n	800b108 <tcp_update_rcv_ann_wnd+0x90>
 800b0fa:	4b08      	ldr	r3, [pc, #32]	; (800b11c <tcp_update_rcv_ann_wnd+0xa4>)
 800b0fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b100:	4909      	ldr	r1, [pc, #36]	; (800b128 <tcp_update_rcv_ann_wnd+0xb0>)
 800b102:	4808      	ldr	r0, [pc, #32]	; (800b124 <tcp_update_rcv_ann_wnd+0xac>)
 800b104:	f009 f9bc 	bl	8014480 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b110:	2300      	movs	r3, #0
  }
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08016fb8 	.word	0x08016fb8
 800b120:	08017214 	.word	0x08017214
 800b124:	08016ffc 	.word	0x08016ffc
 800b128:	08017238 	.word	0x08017238

0800b12c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <tcp_recved+0x22>
 800b13e:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <tcp_recved+0x90>)
 800b140:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b144:	491e      	ldr	r1, [pc, #120]	; (800b1c0 <tcp_recved+0x94>)
 800b146:	481f      	ldr	r0, [pc, #124]	; (800b1c4 <tcp_recved+0x98>)
 800b148:	f009 f99a 	bl	8014480 <iprintf>
 800b14c:	e032      	b.n	800b1b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7d1b      	ldrb	r3, [r3, #20]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d106      	bne.n	800b164 <tcp_recved+0x38>
 800b156:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <tcp_recved+0x90>)
 800b158:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b15c:	491a      	ldr	r1, [pc, #104]	; (800b1c8 <tcp_recved+0x9c>)
 800b15e:	4819      	ldr	r0, [pc, #100]	; (800b1c4 <tcp_recved+0x98>)
 800b160:	f009 f98e 	bl	8014480 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b168:	887b      	ldrh	r3, [r7, #2]
 800b16a:	4413      	add	r3, r2
 800b16c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b174:	d804      	bhi.n	800b180 <tcp_recved+0x54>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b17a:	89fa      	ldrh	r2, [r7, #14]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d204      	bcs.n	800b18a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b186:	851a      	strh	r2, [r3, #40]	; 0x28
 800b188:	e002      	b.n	800b190 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	89fa      	ldrh	r2, [r7, #14]
 800b18e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff ff71 	bl	800b078 <tcp_update_rcv_ann_wnd>
 800b196:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b19e:	d309      	bcc.n	800b1b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8b5b      	ldrh	r3, [r3, #26]
 800b1a4:	f043 0302 	orr.w	r3, r3, #2
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f004 fcc6 	bl	800fb40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08016fb8 	.word	0x08016fb8
 800b1c0:	08017254 	.word	0x08017254
 800b1c4:	08016ffc 	.word	0x08016ffc
 800b1c8:	0801726c 	.word	0x0801726c

0800b1cc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b1d6:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <tcp_new_port+0x84>)
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	4b1c      	ldr	r3, [pc, #112]	; (800b250 <tcp_new_port+0x84>)
 800b1e0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b1e2:	4b1b      	ldr	r3, [pc, #108]	; (800b250 <tcp_new_port+0x84>)
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d103      	bne.n	800b1f6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <tcp_new_port+0x84>)
 800b1f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b1f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	71fb      	strb	r3, [r7, #7]
 800b1fa:	e01e      	b.n	800b23a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	4a15      	ldr	r2, [pc, #84]	; (800b254 <tcp_new_port+0x88>)
 800b200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	603b      	str	r3, [r7, #0]
 800b208:	e011      	b.n	800b22e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	8ada      	ldrh	r2, [r3, #22]
 800b20e:	4b10      	ldr	r3, [pc, #64]	; (800b250 <tcp_new_port+0x84>)
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	429a      	cmp	r2, r3
 800b214:	d108      	bne.n	800b228 <tcp_new_port+0x5c>
        n++;
 800b216:	88bb      	ldrh	r3, [r7, #4]
 800b218:	3301      	adds	r3, #1
 800b21a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b21c:	88bb      	ldrh	r3, [r7, #4]
 800b21e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b222:	d3d8      	bcc.n	800b1d6 <tcp_new_port+0xa>
          return 0;
 800b224:	2300      	movs	r3, #0
 800b226:	e00d      	b.n	800b244 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	603b      	str	r3, [r7, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1ea      	bne.n	800b20a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	3301      	adds	r3, #1
 800b238:	71fb      	strb	r3, [r7, #7]
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d9dd      	bls.n	800b1fc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b240:	4b03      	ldr	r3, [pc, #12]	; (800b250 <tcp_new_port+0x84>)
 800b242:	881b      	ldrh	r3, [r3, #0]
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20000010 	.word	0x20000010
 800b254:	08019090 	.word	0x08019090

0800b258 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	; 0x28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	4613      	mov	r3, r2
 800b266:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d109      	bne.n	800b286 <tcp_connect+0x2e>
 800b272:	4b7d      	ldr	r3, [pc, #500]	; (800b468 <tcp_connect+0x210>)
 800b274:	f240 4235 	movw	r2, #1077	; 0x435
 800b278:	497c      	ldr	r1, [pc, #496]	; (800b46c <tcp_connect+0x214>)
 800b27a:	487d      	ldr	r0, [pc, #500]	; (800b470 <tcp_connect+0x218>)
 800b27c:	f009 f900 	bl	8014480 <iprintf>
 800b280:	f06f 030f 	mvn.w	r3, #15
 800b284:	e0ec      	b.n	800b460 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <tcp_connect+0x48>
 800b28c:	4b76      	ldr	r3, [pc, #472]	; (800b468 <tcp_connect+0x210>)
 800b28e:	f240 4236 	movw	r2, #1078	; 0x436
 800b292:	4978      	ldr	r1, [pc, #480]	; (800b474 <tcp_connect+0x21c>)
 800b294:	4876      	ldr	r0, [pc, #472]	; (800b470 <tcp_connect+0x218>)
 800b296:	f009 f8f3 	bl	8014480 <iprintf>
 800b29a:	f06f 030f 	mvn.w	r3, #15
 800b29e:	e0df      	b.n	800b460 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	7d1b      	ldrb	r3, [r3, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <tcp_connect+0x64>
 800b2a8:	4b6f      	ldr	r3, [pc, #444]	; (800b468 <tcp_connect+0x210>)
 800b2aa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800b2ae:	4972      	ldr	r1, [pc, #456]	; (800b478 <tcp_connect+0x220>)
 800b2b0:	486f      	ldr	r0, [pc, #444]	; (800b470 <tcp_connect+0x218>)
 800b2b2:	f009 f8e5 	bl	8014480 <iprintf>
 800b2b6:	f06f 0309 	mvn.w	r3, #9
 800b2ba:	e0d1      	b.n	800b460 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <tcp_connect+0x70>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	e000      	b.n	800b2ca <tcp_connect+0x72>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	88fa      	ldrh	r2, [r7, #6]
 800b2d2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	7a1b      	ldrb	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	7a1b      	ldrb	r3, [r3, #8]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe fd2f 	bl	8009d44 <netif_get_by_index>
 800b2e6:	6278      	str	r0, [r7, #36]	; 0x24
 800b2e8:	e005      	b.n	800b2f6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f007 fb70 	bl	80129d4 <ip4_route>
 800b2f4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800b2fc:	f06f 0303 	mvn.w	r3, #3
 800b300:	e0ae      	b.n	800b460 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <tcp_connect+0xb8>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d111      	bne.n	800b334 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <tcp_connect+0xc4>
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	3304      	adds	r3, #4
 800b31a:	e000      	b.n	800b31e <tcp_connect+0xc6>
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <tcp_connect+0xd4>
      return ERR_RTE;
 800b326:	f06f 0303 	mvn.w	r3, #3
 800b32a:	e099      	b.n	800b460 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8adb      	ldrh	r3, [r3, #22]
 800b338:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	8adb      	ldrh	r3, [r3, #22]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10c      	bne.n	800b35c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800b342:	f7ff ff43 	bl	800b1cc <tcp_new_port>
 800b346:	4603      	mov	r3, r0
 800b348:	461a      	mov	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8adb      	ldrh	r3, [r3, #22]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <tcp_connect+0x104>
      return ERR_BUF;
 800b356:	f06f 0301 	mvn.w	r3, #1
 800b35a:	e081      	b.n	800b460 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f001 f867 	bl	800c430 <tcp_next_iss>
 800b362:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	1e5a      	subs	r2, r3, #1
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	1e5a      	subs	r2, r3, #1
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	1e5a      	subs	r2, r3, #1
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b38e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b3b0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3be:	f001 f85d 	bl	800c47c <tcp_eff_send_mss_netif>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b3da:	2102      	movs	r1, #2
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f004 fac1 	bl	800f964 <tcp_enqueue_flags>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800b3e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d136      	bne.n	800b45c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800b3f4:	8b7b      	ldrh	r3, [r7, #26]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d021      	beq.n	800b43e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b3fa:	4b20      	ldr	r3, [pc, #128]	; (800b47c <tcp_connect+0x224>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	429a      	cmp	r2, r3
 800b402:	d105      	bne.n	800b410 <tcp_connect+0x1b8>
 800b404:	4b1d      	ldr	r3, [pc, #116]	; (800b47c <tcp_connect+0x224>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <tcp_connect+0x224>)
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	e013      	b.n	800b438 <tcp_connect+0x1e0>
 800b410:	4b1a      	ldr	r3, [pc, #104]	; (800b47c <tcp_connect+0x224>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	623b      	str	r3, [r7, #32]
 800b416:	e00c      	b.n	800b432 <tcp_connect+0x1da>
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d104      	bne.n	800b42c <tcp_connect+0x1d4>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	60da      	str	r2, [r3, #12]
 800b42a:	e005      	b.n	800b438 <tcp_connect+0x1e0>
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1ef      	bne.n	800b418 <tcp_connect+0x1c0>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800b43e:	4b10      	ldr	r3, [pc, #64]	; (800b480 <tcp_connect+0x228>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	60da      	str	r2, [r3, #12]
 800b446:	4a0e      	ldr	r2, [pc, #56]	; (800b480 <tcp_connect+0x228>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	f005 faee 	bl	8010a2c <tcp_timer_needed>
 800b450:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <tcp_connect+0x22c>)
 800b452:	2201      	movs	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f004 fb72 	bl	800fb40 <tcp_output>
  }
  return ret;
 800b45c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	; 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	08016fb8 	.word	0x08016fb8
 800b46c:	08017294 	.word	0x08017294
 800b470:	08016ffc 	.word	0x08016ffc
 800b474:	080172b0 	.word	0x080172b0
 800b478:	080172cc 	.word	0x080172cc
 800b47c:	2000fe4c 	.word	0x2000fe4c
 800b480:	2000fe54 	.word	0x2000fe54
 800b484:	2000fe5c 	.word	0x2000fe5c

0800b488 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b488:	b5b0      	push	{r4, r5, r7, lr}
 800b48a:	b090      	sub	sp, #64	; 0x40
 800b48c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b494:	4b94      	ldr	r3, [pc, #592]	; (800b6e8 <tcp_slowtmr+0x260>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3301      	adds	r3, #1
 800b49a:	4a93      	ldr	r2, [pc, #588]	; (800b6e8 <tcp_slowtmr+0x260>)
 800b49c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b49e:	4b93      	ldr	r3, [pc, #588]	; (800b6ec <tcp_slowtmr+0x264>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	4b91      	ldr	r3, [pc, #580]	; (800b6ec <tcp_slowtmr+0x264>)
 800b4a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b4ae:	4b90      	ldr	r3, [pc, #576]	; (800b6f0 <tcp_slowtmr+0x268>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b4b4:	e29f      	b.n	800b9f6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	7d1b      	ldrb	r3, [r3, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <tcp_slowtmr+0x44>
 800b4be:	4b8d      	ldr	r3, [pc, #564]	; (800b6f4 <tcp_slowtmr+0x26c>)
 800b4c0:	f240 42be 	movw	r2, #1214	; 0x4be
 800b4c4:	498c      	ldr	r1, [pc, #560]	; (800b6f8 <tcp_slowtmr+0x270>)
 800b4c6:	488d      	ldr	r0, [pc, #564]	; (800b6fc <tcp_slowtmr+0x274>)
 800b4c8:	f008 ffda 	bl	8014480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	7d1b      	ldrb	r3, [r3, #20]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d106      	bne.n	800b4e2 <tcp_slowtmr+0x5a>
 800b4d4:	4b87      	ldr	r3, [pc, #540]	; (800b6f4 <tcp_slowtmr+0x26c>)
 800b4d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b4da:	4989      	ldr	r1, [pc, #548]	; (800b700 <tcp_slowtmr+0x278>)
 800b4dc:	4887      	ldr	r0, [pc, #540]	; (800b6fc <tcp_slowtmr+0x274>)
 800b4de:	f008 ffcf 	bl	8014480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	7d1b      	ldrb	r3, [r3, #20]
 800b4e6:	2b0a      	cmp	r3, #10
 800b4e8:	d106      	bne.n	800b4f8 <tcp_slowtmr+0x70>
 800b4ea:	4b82      	ldr	r3, [pc, #520]	; (800b6f4 <tcp_slowtmr+0x26c>)
 800b4ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b4f0:	4984      	ldr	r1, [pc, #528]	; (800b704 <tcp_slowtmr+0x27c>)
 800b4f2:	4882      	ldr	r0, [pc, #520]	; (800b6fc <tcp_slowtmr+0x274>)
 800b4f4:	f008 ffc4 	bl	8014480 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fa:	7f9a      	ldrb	r2, [r3, #30]
 800b4fc:	4b7b      	ldr	r3, [pc, #492]	; (800b6ec <tcp_slowtmr+0x264>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d105      	bne.n	800b510 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b50e:	e272      	b.n	800b9f6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b510:	4b76      	ldr	r3, [pc, #472]	; (800b6ec <tcp_slowtmr+0x264>)
 800b512:	781a      	ldrb	r2, [r3, #0]
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	7d1b      	ldrb	r3, [r3, #20]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d10a      	bne.n	800b542 <tcp_slowtmr+0xba>
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b532:	2b05      	cmp	r3, #5
 800b534:	d905      	bls.n	800b542 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53a:	3301      	adds	r3, #1
 800b53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b540:	e11e      	b.n	800b780 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b548:	2b0b      	cmp	r3, #11
 800b54a:	d905      	bls.n	800b558 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b550:	3301      	adds	r3, #1
 800b552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b556:	e113      	b.n	800b780 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d075      	beq.n	800b64e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b566:	2b00      	cmp	r3, #0
 800b568:	d006      	beq.n	800b578 <tcp_slowtmr+0xf0>
 800b56a:	4b62      	ldr	r3, [pc, #392]	; (800b6f4 <tcp_slowtmr+0x26c>)
 800b56c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b570:	4965      	ldr	r1, [pc, #404]	; (800b708 <tcp_slowtmr+0x280>)
 800b572:	4862      	ldr	r0, [pc, #392]	; (800b6fc <tcp_slowtmr+0x274>)
 800b574:	f008 ff84 	bl	8014480 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <tcp_slowtmr+0x106>
 800b580:	4b5c      	ldr	r3, [pc, #368]	; (800b6f4 <tcp_slowtmr+0x26c>)
 800b582:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b586:	4961      	ldr	r1, [pc, #388]	; (800b70c <tcp_slowtmr+0x284>)
 800b588:	485c      	ldr	r0, [pc, #368]	; (800b6fc <tcp_slowtmr+0x274>)
 800b58a:	f008 ff79 	bl	8014480 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b594:	2b0b      	cmp	r3, #11
 800b596:	d905      	bls.n	800b5a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b59c:	3301      	adds	r3, #1
 800b59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5a2:	e0ed      	b.n	800b780 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	4a58      	ldr	r2, [pc, #352]	; (800b710 <tcp_slowtmr+0x288>)
 800b5ae:	5cd3      	ldrb	r3, [r2, r3]
 800b5b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5b8:	7c7a      	ldrb	r2, [r7, #17]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d907      	bls.n	800b5ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5d4:	7c7a      	ldrb	r2, [r7, #17]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	f200 80d2 	bhi.w	800b780 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b5dc:	2301      	movs	r3, #1
 800b5de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d108      	bne.n	800b5fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ec:	f005 f950 	bl	8010890 <tcp_zero_window_probe>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d014      	beq.n	800b620 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	623b      	str	r3, [r7, #32]
 800b5fa:	e011      	b.n	800b620 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b602:	4619      	mov	r1, r3
 800b604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b606:	f004 f815 	bl	800f634 <tcp_split_unsent_seg>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d107      	bne.n	800b620 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b612:	f004 fa95 	bl	800fb40 <tcp_output>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 80ac 	beq.w	800b780 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b636:	2b06      	cmp	r3, #6
 800b638:	f200 80a2 	bhi.w	800b780 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b642:	3301      	adds	r3, #1
 800b644:	b2da      	uxtb	r2, r3
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b64c:	e098      	b.n	800b780 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b654:	2b00      	cmp	r3, #0
 800b656:	db0f      	blt.n	800b678 <tcp_slowtmr+0x1f0>
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b65e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b662:	4293      	cmp	r3, r2
 800b664:	d008      	beq.n	800b678 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	3301      	adds	r3, #1
 800b670:	b29b      	uxth	r3, r3
 800b672:	b21a      	sxth	r2, r3
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b684:	429a      	cmp	r2, r3
 800b686:	db7b      	blt.n	800b780 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b68a:	f004 fd4b 	bl	8010124 <tcp_rexmit_rto_prepare>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d007      	beq.n	800b6a4 <tcp_slowtmr+0x21c>
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d171      	bne.n	800b780 <tcp_slowtmr+0x2f8>
 800b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d06d      	beq.n	800b780 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d03a      	beq.n	800b722 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6b2:	2b0c      	cmp	r3, #12
 800b6b4:	bf28      	it	cs
 800b6b6:	230c      	movcs	r3, #12
 800b6b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6c0:	10db      	asrs	r3, r3, #3
 800b6c2:	b21b      	sxth	r3, r3
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6cc:	4413      	add	r3, r2
 800b6ce:	7efa      	ldrb	r2, [r7, #27]
 800b6d0:	4910      	ldr	r1, [pc, #64]	; (800b714 <tcp_slowtmr+0x28c>)
 800b6d2:	5c8a      	ldrb	r2, [r1, r2]
 800b6d4:	4093      	lsls	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	dc1a      	bgt.n	800b718 <tcp_slowtmr+0x290>
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	b21a      	sxth	r2, r3
 800b6e6:	e019      	b.n	800b71c <tcp_slowtmr+0x294>
 800b6e8:	2000fe48 	.word	0x2000fe48
 800b6ec:	2000fe5e 	.word	0x2000fe5e
 800b6f0:	2000fe54 	.word	0x2000fe54
 800b6f4:	08016fb8 	.word	0x08016fb8
 800b6f8:	080172fc 	.word	0x080172fc
 800b6fc:	08016ffc 	.word	0x08016ffc
 800b700:	08017328 	.word	0x08017328
 800b704:	08017354 	.word	0x08017354
 800b708:	08017384 	.word	0x08017384
 800b70c:	080173b8 	.word	0x080173b8
 800b710:	08019088 	.word	0x08019088
 800b714:	08019078 	.word	0x08019078
 800b718:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	2200      	movs	r2, #0
 800b726:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b734:	4293      	cmp	r3, r2
 800b736:	bf28      	it	cs
 800b738:	4613      	movcs	r3, r2
 800b73a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b73c:	8a7b      	ldrh	r3, [r7, #18]
 800b73e:	085b      	lsrs	r3, r3, #1
 800b740:	b29a      	uxth	r2, r3
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	b29b      	uxth	r3, r3
 800b756:	429a      	cmp	r2, r3
 800b758:	d206      	bcs.n	800b768 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	2200      	movs	r2, #0
 800b776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b77a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b77c:	f004 fd42 	bl	8010204 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	7d1b      	ldrb	r3, [r3, #20]
 800b784:	2b06      	cmp	r3, #6
 800b786:	d111      	bne.n	800b7ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	8b5b      	ldrh	r3, [r3, #26]
 800b78c:	f003 0310 	and.w	r3, r3, #16
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b794:	4b9d      	ldr	r3, [pc, #628]	; (800ba0c <tcp_slowtmr+0x584>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	6a1b      	ldr	r3, [r3, #32]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	2b28      	cmp	r3, #40	; 0x28
 800b7a0:	d904      	bls.n	800b7ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	7a5b      	ldrb	r3, [r3, #9]
 800b7b0:	f003 0308 	and.w	r3, r3, #8
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d04c      	beq.n	800b852 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7bc:	2b04      	cmp	r3, #4
 800b7be:	d003      	beq.n	800b7c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b7c4:	2b07      	cmp	r3, #7
 800b7c6:	d144      	bne.n	800b852 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7c8:	4b90      	ldr	r3, [pc, #576]	; (800ba0c <tcp_slowtmr+0x584>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	6a1b      	ldr	r3, [r3, #32]
 800b7d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7d8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b7dc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b7e0:	498b      	ldr	r1, [pc, #556]	; (800ba10 <tcp_slowtmr+0x588>)
 800b7e2:	fba1 1303 	umull	r1, r3, r1, r3
 800b7e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d90a      	bls.n	800b802 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b7f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b800:	e027      	b.n	800b852 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b802:	4b82      	ldr	r3, [pc, #520]	; (800ba0c <tcp_slowtmr+0x584>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b818:	4618      	mov	r0, r3
 800b81a:	4b7e      	ldr	r3, [pc, #504]	; (800ba14 <tcp_slowtmr+0x58c>)
 800b81c:	fb00 f303 	mul.w	r3, r0, r3
 800b820:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b822:	497b      	ldr	r1, [pc, #492]	; (800ba10 <tcp_slowtmr+0x588>)
 800b824:	fba1 1303 	umull	r1, r3, r1, r3
 800b828:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d911      	bls.n	800b852 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b82e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b830:	f004 ffee 	bl	8010810 <tcp_keepalive>
 800b834:	4603      	mov	r3, r0
 800b836:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b83a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d107      	bne.n	800b852 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b848:	3301      	adds	r3, #1
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b856:	2b00      	cmp	r3, #0
 800b858:	d011      	beq.n	800b87e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b85a:	4b6c      	ldr	r3, [pc, #432]	; (800ba0c <tcp_slowtmr+0x584>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b86a:	4619      	mov	r1, r3
 800b86c:	460b      	mov	r3, r1
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	440b      	add	r3, r1
 800b872:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87a:	f000 fea9 	bl	800c5d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	7d1b      	ldrb	r3, [r3, #20]
 800b882:	2b03      	cmp	r3, #3
 800b884:	d10b      	bne.n	800b89e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b886:	4b61      	ldr	r3, [pc, #388]	; (800ba0c <tcp_slowtmr+0x584>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b28      	cmp	r3, #40	; 0x28
 800b892:	d904      	bls.n	800b89e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	3301      	adds	r3, #1
 800b89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	7d1b      	ldrb	r3, [r3, #20]
 800b8a2:	2b09      	cmp	r3, #9
 800b8a4:	d10b      	bne.n	800b8be <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b8a6:	4b59      	ldr	r3, [pc, #356]	; (800ba0c <tcp_slowtmr+0x584>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2bf0      	cmp	r3, #240	; 0xf0
 800b8b2:	d904      	bls.n	800b8be <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b8be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d060      	beq.n	800b988 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b8ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8d0:	f000 fcca 	bl	800c268 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d010      	beq.n	800b8fc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b8da:	4b4f      	ldr	r3, [pc, #316]	; (800ba18 <tcp_slowtmr+0x590>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d106      	bne.n	800b8f2 <tcp_slowtmr+0x46a>
 800b8e4:	4b4d      	ldr	r3, [pc, #308]	; (800ba1c <tcp_slowtmr+0x594>)
 800b8e6:	f240 526d 	movw	r2, #1389	; 0x56d
 800b8ea:	494d      	ldr	r1, [pc, #308]	; (800ba20 <tcp_slowtmr+0x598>)
 800b8ec:	484d      	ldr	r0, [pc, #308]	; (800ba24 <tcp_slowtmr+0x59c>)
 800b8ee:	f008 fdc7 	bl	8014480 <iprintf>
        prev->next = pcb->next;
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	68da      	ldr	r2, [r3, #12]
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	60da      	str	r2, [r3, #12]
 800b8fa:	e00f      	b.n	800b91c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b8fc:	4b46      	ldr	r3, [pc, #280]	; (800ba18 <tcp_slowtmr+0x590>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b902:	429a      	cmp	r2, r3
 800b904:	d006      	beq.n	800b914 <tcp_slowtmr+0x48c>
 800b906:	4b45      	ldr	r3, [pc, #276]	; (800ba1c <tcp_slowtmr+0x594>)
 800b908:	f240 5271 	movw	r2, #1393	; 0x571
 800b90c:	4946      	ldr	r1, [pc, #280]	; (800ba28 <tcp_slowtmr+0x5a0>)
 800b90e:	4845      	ldr	r0, [pc, #276]	; (800ba24 <tcp_slowtmr+0x59c>)
 800b910:	f008 fdb6 	bl	8014480 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	4a3f      	ldr	r2, [pc, #252]	; (800ba18 <tcp_slowtmr+0x590>)
 800b91a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b91c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b920:	2b00      	cmp	r3, #0
 800b922:	d013      	beq.n	800b94c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b92c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	3304      	adds	r3, #4
 800b932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b934:	8ad2      	ldrh	r2, [r2, #22]
 800b936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b938:	8b09      	ldrh	r1, [r1, #24]
 800b93a:	9102      	str	r1, [sp, #8]
 800b93c:	9201      	str	r2, [sp, #4]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	462b      	mov	r3, r5
 800b942:	4622      	mov	r2, r4
 800b944:	4601      	mov	r1, r0
 800b946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b948:	f004 feae 	bl	80106a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	7d1b      	ldrb	r3, [r3, #20]
 800b956:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b962:	6838      	ldr	r0, [r7, #0]
 800b964:	f7ff f838 	bl	800a9d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b968:	4b30      	ldr	r3, [pc, #192]	; (800ba2c <tcp_slowtmr+0x5a4>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d004      	beq.n	800b97e <tcp_slowtmr+0x4f6>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f06f 010c 	mvn.w	r1, #12
 800b97a:	68b8      	ldr	r0, [r7, #8]
 800b97c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b97e:	4b2b      	ldr	r3, [pc, #172]	; (800ba2c <tcp_slowtmr+0x5a4>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d037      	beq.n	800b9f6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b986:	e590      	b.n	800b4aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	7f1b      	ldrb	r3, [r3, #28]
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	7f1a      	ldrb	r2, [r3, #28]
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	7f5b      	ldrb	r3, [r3, #29]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d325      	bcc.n	800b9f6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <tcp_slowtmr+0x5a4>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00b      	beq.n	800b9d8 <tcp_slowtmr+0x550>
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c8:	6912      	ldr	r2, [r2, #16]
 800b9ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4798      	blx	r3
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b9d6:	e002      	b.n	800b9de <tcp_slowtmr+0x556>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <tcp_slowtmr+0x5a4>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d000      	beq.n	800b9e8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b9e6:	e560      	b.n	800b4aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b9e8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f2:	f004 f8a5 	bl	800fb40 <tcp_output>
  while (pcb != NULL) {
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f47f ad5c 	bne.w	800b4b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <tcp_slowtmr+0x5a8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba08:	e067      	b.n	800bada <tcp_slowtmr+0x652>
 800ba0a:	bf00      	nop
 800ba0c:	2000fe48 	.word	0x2000fe48
 800ba10:	10624dd3 	.word	0x10624dd3
 800ba14:	000124f8 	.word	0x000124f8
 800ba18:	2000fe54 	.word	0x2000fe54
 800ba1c:	08016fb8 	.word	0x08016fb8
 800ba20:	080173f0 	.word	0x080173f0
 800ba24:	08016ffc 	.word	0x08016ffc
 800ba28:	0801741c 	.word	0x0801741c
 800ba2c:	2000fe5c 	.word	0x2000fe5c
 800ba30:	2000fe58 	.word	0x2000fe58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	7d1b      	ldrb	r3, [r3, #20]
 800ba38:	2b0a      	cmp	r3, #10
 800ba3a:	d006      	beq.n	800ba4a <tcp_slowtmr+0x5c2>
 800ba3c:	4b2b      	ldr	r3, [pc, #172]	; (800baec <tcp_slowtmr+0x664>)
 800ba3e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ba42:	492b      	ldr	r1, [pc, #172]	; (800baf0 <tcp_slowtmr+0x668>)
 800ba44:	482b      	ldr	r0, [pc, #172]	; (800baf4 <tcp_slowtmr+0x66c>)
 800ba46:	f008 fd1b 	bl	8014480 <iprintf>
    pcb_remove = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ba50:	4b29      	ldr	r3, [pc, #164]	; (800baf8 <tcp_slowtmr+0x670>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	2bf0      	cmp	r3, #240	; 0xf0
 800ba5c:	d904      	bls.n	800ba68 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ba5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba62:	3301      	adds	r3, #1
 800ba64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d02f      	beq.n	800bad0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba72:	f000 fbf9 	bl	800c268 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d010      	beq.n	800ba9e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ba7c:	4b1f      	ldr	r3, [pc, #124]	; (800bafc <tcp_slowtmr+0x674>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d106      	bne.n	800ba94 <tcp_slowtmr+0x60c>
 800ba86:	4b19      	ldr	r3, [pc, #100]	; (800baec <tcp_slowtmr+0x664>)
 800ba88:	f240 52af 	movw	r2, #1455	; 0x5af
 800ba8c:	491c      	ldr	r1, [pc, #112]	; (800bb00 <tcp_slowtmr+0x678>)
 800ba8e:	4819      	ldr	r0, [pc, #100]	; (800baf4 <tcp_slowtmr+0x66c>)
 800ba90:	f008 fcf6 	bl	8014480 <iprintf>
        prev->next = pcb->next;
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	68da      	ldr	r2, [r3, #12]
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	60da      	str	r2, [r3, #12]
 800ba9c:	e00f      	b.n	800babe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ba9e:	4b17      	ldr	r3, [pc, #92]	; (800bafc <tcp_slowtmr+0x674>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d006      	beq.n	800bab6 <tcp_slowtmr+0x62e>
 800baa8:	4b10      	ldr	r3, [pc, #64]	; (800baec <tcp_slowtmr+0x664>)
 800baaa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800baae:	4915      	ldr	r1, [pc, #84]	; (800bb04 <tcp_slowtmr+0x67c>)
 800bab0:	4810      	ldr	r0, [pc, #64]	; (800baf4 <tcp_slowtmr+0x66c>)
 800bab2:	f008 fce5 	bl	8014480 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <tcp_slowtmr+0x674>)
 800babc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bac8:	69f8      	ldr	r0, [r7, #28]
 800baca:	f7fe ff85 	bl	800a9d8 <tcp_free>
 800bace:	e004      	b.n	800bada <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1a9      	bne.n	800ba34 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	3730      	adds	r7, #48	; 0x30
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bdb0      	pop	{r4, r5, r7, pc}
 800baea:	bf00      	nop
 800baec:	08016fb8 	.word	0x08016fb8
 800baf0:	08017448 	.word	0x08017448
 800baf4:	08016ffc 	.word	0x08016ffc
 800baf8:	2000fe48 	.word	0x2000fe48
 800bafc:	2000fe58 	.word	0x2000fe58
 800bb00:	08017478 	.word	0x08017478
 800bb04:	080174a0 	.word	0x080174a0

0800bb08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bb0e:	4b2d      	ldr	r3, [pc, #180]	; (800bbc4 <tcp_fasttmr+0xbc>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	3301      	adds	r3, #1
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	4b2b      	ldr	r3, [pc, #172]	; (800bbc4 <tcp_fasttmr+0xbc>)
 800bb18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bb1a:	4b2b      	ldr	r3, [pc, #172]	; (800bbc8 <tcp_fasttmr+0xc0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb20:	e048      	b.n	800bbb4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	7f9a      	ldrb	r2, [r3, #30]
 800bb26:	4b27      	ldr	r3, [pc, #156]	; (800bbc4 <tcp_fasttmr+0xbc>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d03f      	beq.n	800bbae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bb2e:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <tcp_fasttmr+0xbc>)
 800bb30:	781a      	ldrb	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	8b5b      	ldrh	r3, [r3, #26]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d010      	beq.n	800bb64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8b5b      	ldrh	r3, [r3, #26]
 800bb46:	f043 0302 	orr.w	r3, r3, #2
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f003 fff5 	bl	800fb40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8b5b      	ldrh	r3, [r3, #26]
 800bb5a:	f023 0303 	bic.w	r3, r3, #3
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8b5b      	ldrh	r3, [r3, #26]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d009      	beq.n	800bb84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8b5b      	ldrh	r3, [r3, #26]
 800bb74:	f023 0308 	bic.w	r3, r3, #8
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff f8be 	bl	800ad00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bb92:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <tcp_fasttmr+0xc4>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f819 	bl	800bbd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <tcp_fasttmr+0xc4>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d000      	beq.n	800bba8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bba6:	e7b8      	b.n	800bb1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	607b      	str	r3, [r7, #4]
 800bbac:	e002      	b.n	800bbb4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1b3      	bne.n	800bb22 <tcp_fasttmr+0x1a>
    }
  }
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	2000fe5e 	.word	0x2000fe5e
 800bbc8:	2000fe54 	.word	0x2000fe54
 800bbcc:	2000fe5c 	.word	0x2000fe5c

0800bbd0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bbd0:	b590      	push	{r4, r7, lr}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d109      	bne.n	800bbf2 <tcp_process_refused_data+0x22>
 800bbde:	4b37      	ldr	r3, [pc, #220]	; (800bcbc <tcp_process_refused_data+0xec>)
 800bbe0:	f240 6209 	movw	r2, #1545	; 0x609
 800bbe4:	4936      	ldr	r1, [pc, #216]	; (800bcc0 <tcp_process_refused_data+0xf0>)
 800bbe6:	4837      	ldr	r0, [pc, #220]	; (800bcc4 <tcp_process_refused_data+0xf4>)
 800bbe8:	f008 fc4a 	bl	8014480 <iprintf>
 800bbec:	f06f 030f 	mvn.w	r3, #15
 800bbf0:	e060      	b.n	800bcb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf6:	7b5b      	ldrb	r3, [r3, #13]
 800bbf8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbfe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <tcp_process_refused_data+0x58>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6918      	ldr	r0, [r3, #16]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	47a0      	blx	r4
 800bc22:	4603      	mov	r3, r0
 800bc24:	73fb      	strb	r3, [r7, #15]
 800bc26:	e007      	b.n	800bc38 <tcp_process_refused_data+0x68>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f000 f8a4 	bl	800bd7c <tcp_recv_null>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d12a      	bne.n	800bc96 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	f003 0320 	and.w	r3, r3, #32
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d033      	beq.n	800bcb2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc52:	d005      	beq.n	800bc60 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc58:	3301      	adds	r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00b      	beq.n	800bc82 <tcp_process_refused_data+0xb2>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6918      	ldr	r0, [r3, #16]
 800bc74:	2300      	movs	r3, #0
 800bc76:	2200      	movs	r2, #0
 800bc78:	6879      	ldr	r1, [r7, #4]
 800bc7a:	47a0      	blx	r4
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]
 800bc80:	e001      	b.n	800bc86 <tcp_process_refused_data+0xb6>
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc8a:	f113 0f0d 	cmn.w	r3, #13
 800bc8e:	d110      	bne.n	800bcb2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bc90:	f06f 030c 	mvn.w	r3, #12
 800bc94:	e00e      	b.n	800bcb4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc9a:	f113 0f0d 	cmn.w	r3, #13
 800bc9e:	d102      	bne.n	800bca6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bca0:	f06f 030c 	mvn.w	r3, #12
 800bca4:	e006      	b.n	800bcb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bcac:	f06f 0304 	mvn.w	r3, #4
 800bcb0:	e000      	b.n	800bcb4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd90      	pop	{r4, r7, pc}
 800bcbc:	08016fb8 	.word	0x08016fb8
 800bcc0:	080174c8 	.word	0x080174c8
 800bcc4:	08016ffc 	.word	0x08016ffc

0800bcc8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bcd0:	e007      	b.n	800bce2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f80a 	bl	800bcf2 <tcp_seg_free>
    seg = next;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1f4      	bne.n	800bcd2 <tcp_segs_free+0xa>
  }
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00c      	beq.n	800bd1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fba7 	bl	800a460 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	2003      	movs	r0, #3
 800bd16:	f7fd fd63 	bl	80097e0 <memp_free>
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
	...

0800bd24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <tcp_seg_copy+0x1c>
 800bd32:	4b0f      	ldr	r3, [pc, #60]	; (800bd70 <tcp_seg_copy+0x4c>)
 800bd34:	f240 6282 	movw	r2, #1666	; 0x682
 800bd38:	490e      	ldr	r1, [pc, #56]	; (800bd74 <tcp_seg_copy+0x50>)
 800bd3a:	480f      	ldr	r0, [pc, #60]	; (800bd78 <tcp_seg_copy+0x54>)
 800bd3c:	f008 fba0 	bl	8014480 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bd40:	2003      	movs	r0, #3
 800bd42:	f7fd fcd7 	bl	80096f4 <memp_malloc>
 800bd46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <tcp_seg_copy+0x2e>
    return NULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e00a      	b.n	800bd68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bd52:	2210      	movs	r2, #16
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f008 fb7c 	bl	8014454 <memcpy>
  pbuf_ref(cseg->p);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fc23 	bl	800a5ac <pbuf_ref>
  return cseg;
 800bd66:	68fb      	ldr	r3, [r7, #12]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	08016fb8 	.word	0x08016fb8
 800bd74:	0801750c 	.word	0x0801750c
 800bd78:	08016ffc 	.word	0x08016ffc

0800bd7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d109      	bne.n	800bda4 <tcp_recv_null+0x28>
 800bd90:	4b12      	ldr	r3, [pc, #72]	; (800bddc <tcp_recv_null+0x60>)
 800bd92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd96:	4912      	ldr	r1, [pc, #72]	; (800bde0 <tcp_recv_null+0x64>)
 800bd98:	4812      	ldr	r0, [pc, #72]	; (800bde4 <tcp_recv_null+0x68>)
 800bd9a:	f008 fb71 	bl	8014480 <iprintf>
 800bd9e:	f06f 030f 	mvn.w	r3, #15
 800bda2:	e016      	b.n	800bdd2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	891b      	ldrh	r3, [r3, #8]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68b8      	ldr	r0, [r7, #8]
 800bdb2:	f7ff f9bb 	bl	800b12c <tcp_recved>
    pbuf_free(p);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7fe fb52 	bl	800a460 <pbuf_free>
 800bdbc:	e008      	b.n	800bdd0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bdbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d104      	bne.n	800bdd0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bdc6:	68b8      	ldr	r0, [r7, #8]
 800bdc8:	f7ff f804 	bl	800add4 <tcp_close>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	e000      	b.n	800bdd2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	08016fb8 	.word	0x08016fb8
 800bde0:	08017528 	.word	0x08017528
 800bde4:	08016ffc 	.word	0x08016ffc

0800bde8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bdf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	db01      	blt.n	800bdfe <tcp_kill_prio+0x16>
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	e000      	b.n	800be00 <tcp_kill_prio+0x18>
 800bdfe:	237f      	movs	r3, #127	; 0x7f
 800be00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800be02:	7afb      	ldrb	r3, [r7, #11]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d034      	beq.n	800be72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800be08:	7afb      	ldrb	r3, [r7, #11]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be16:	4b19      	ldr	r3, [pc, #100]	; (800be7c <tcp_kill_prio+0x94>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	e01f      	b.n	800be5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	7d5b      	ldrb	r3, [r3, #21]
 800be22:	7afa      	ldrb	r2, [r7, #11]
 800be24:	429a      	cmp	r2, r3
 800be26:	d80c      	bhi.n	800be42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800be2c:	7afa      	ldrb	r2, [r7, #11]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d112      	bne.n	800be58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be32:	4b13      	ldr	r3, [pc, #76]	; (800be80 <tcp_kill_prio+0x98>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d80a      	bhi.n	800be58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800be42:	4b0f      	ldr	r3, [pc, #60]	; (800be80 <tcp_kill_prio+0x98>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	7d5b      	ldrb	r3, [r3, #21]
 800be56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1dc      	bne.n	800be1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be6a:	6938      	ldr	r0, [r7, #16]
 800be6c:	f7ff f8f8 	bl	800b060 <tcp_abort>
 800be70:	e000      	b.n	800be74 <tcp_kill_prio+0x8c>
    return;
 800be72:	bf00      	nop
  }
}
 800be74:	3718      	adds	r7, #24
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	2000fe54 	.word	0x2000fe54
 800be80:	2000fe48 	.word	0x2000fe48

0800be84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	2b08      	cmp	r3, #8
 800be92:	d009      	beq.n	800bea8 <tcp_kill_state+0x24>
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b09      	cmp	r3, #9
 800be98:	d006      	beq.n	800bea8 <tcp_kill_state+0x24>
 800be9a:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <tcp_kill_state+0x80>)
 800be9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bea0:	4919      	ldr	r1, [pc, #100]	; (800bf08 <tcp_kill_state+0x84>)
 800bea2:	481a      	ldr	r0, [pc, #104]	; (800bf0c <tcp_kill_state+0x88>)
 800bea4:	f008 faec 	bl	8014480 <iprintf>

  inactivity = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800beb0:	4b17      	ldr	r3, [pc, #92]	; (800bf10 <tcp_kill_state+0x8c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	e017      	b.n	800bee8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	7d1b      	ldrb	r3, [r3, #20]
 800bebc:	79fa      	ldrb	r2, [r7, #7]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d10f      	bne.n	800bee2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bec2:	4b14      	ldr	r3, [pc, #80]	; (800bf14 <tcp_kill_state+0x90>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d807      	bhi.n	800bee2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bed2:	4b10      	ldr	r3, [pc, #64]	; (800bf14 <tcp_kill_state+0x90>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	6a1b      	ldr	r3, [r3, #32]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1e4      	bne.n	800beb8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bef4:	2100      	movs	r1, #0
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f7fe fff4 	bl	800aee4 <tcp_abandon>
  }
}
 800befc:	bf00      	nop
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	08016fb8 	.word	0x08016fb8
 800bf08:	08017544 	.word	0x08017544
 800bf0c:	08016ffc 	.word	0x08016ffc
 800bf10:	2000fe54 	.word	0x2000fe54
 800bf14:	2000fe48 	.word	0x2000fe48

0800bf18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf26:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <tcp_kill_timewait+0x58>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	e012      	b.n	800bf54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf2e:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <tcp_kill_timewait+0x5c>)
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d807      	bhi.n	800bf4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <tcp_kill_timewait+0x5c>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e9      	bne.n	800bf2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf60:	68b8      	ldr	r0, [r7, #8]
 800bf62:	f7ff f87d 	bl	800b060 <tcp_abort>
  }
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	2000fe58 	.word	0x2000fe58
 800bf74:	2000fe48 	.word	0x2000fe48

0800bf78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bf7e:	4b10      	ldr	r3, [pc, #64]	; (800bfc0 <tcp_handle_closepend+0x48>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf84:	e014      	b.n	800bfb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	8b5b      	ldrh	r3, [r3, #26]
 800bf90:	f003 0308 	and.w	r3, r3, #8
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d009      	beq.n	800bfac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	8b5b      	ldrh	r3, [r3, #26]
 800bf9c:	f023 0308 	bic.w	r3, r3, #8
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7fe feaa 	bl	800ad00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e7      	bne.n	800bf86 <tcp_handle_closepend+0xe>
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	2000fe54 	.word	0x2000fe54

0800bfc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfce:	2001      	movs	r0, #1
 800bfd0:	f7fd fb90 	bl	80096f4 <memp_malloc>
 800bfd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d126      	bne.n	800c02a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bfdc:	f7ff ffcc 	bl	800bf78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bfe0:	f7ff ff9a 	bl	800bf18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	f7fd fb85 	bl	80096f4 <memp_malloc>
 800bfea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d11b      	bne.n	800c02a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bff2:	2009      	movs	r0, #9
 800bff4:	f7ff ff46 	bl	800be84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7fd fb7b 	bl	80096f4 <memp_malloc>
 800bffe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d111      	bne.n	800c02a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c006:	2008      	movs	r0, #8
 800c008:	f7ff ff3c 	bl	800be84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c00c:	2001      	movs	r0, #1
 800c00e:	f7fd fb71 	bl	80096f4 <memp_malloc>
 800c012:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d107      	bne.n	800c02a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fee3 	bl	800bde8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c022:	2001      	movs	r0, #1
 800c024:	f7fd fb66 	bl	80096f4 <memp_malloc>
 800c028:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d03f      	beq.n	800c0b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c030:	229c      	movs	r2, #156	; 0x9c
 800c032:	2100      	movs	r1, #0
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f008 fa1b 	bl	8014470 <memset>
    pcb->prio = prio;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	79fa      	ldrb	r2, [r7, #7]
 800c03e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c046:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c050:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	; 0xff
 800c05e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c066:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2206      	movs	r2, #6
 800c06c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2206      	movs	r2, #6
 800c074:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c07c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2201      	movs	r2, #1
 800c082:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c086:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <tcp_alloc+0xf8>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <tcp_alloc+0xfc>)
 800c090:	781a      	ldrb	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c09c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4a08      	ldr	r2, [pc, #32]	; (800c0c4 <tcp_alloc+0x100>)
 800c0a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4a07      	ldr	r2, [pc, #28]	; (800c0c8 <tcp_alloc+0x104>)
 800c0ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000fe48 	.word	0x2000fe48
 800c0c0:	2000fe5e 	.word	0x2000fe5e
 800c0c4:	0800bd7d 	.word	0x0800bd7d
 800c0c8:	006ddd00 	.word	0x006ddd00

0800c0cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c0d6:	2040      	movs	r0, #64	; 0x40
 800c0d8:	f7ff ff74 	bl	800bfc4 <tcp_alloc>
 800c0dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c0de:	68fb      	ldr	r3, [r7, #12]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	611a      	str	r2, [r3, #16]
  }
}
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
	...

0800c10c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00e      	beq.n	800c13a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d106      	bne.n	800c132 <tcp_recv+0x26>
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <tcp_recv+0x38>)
 800c126:	f240 72df 	movw	r2, #2015	; 0x7df
 800c12a:	4907      	ldr	r1, [pc, #28]	; (800c148 <tcp_recv+0x3c>)
 800c12c:	4807      	ldr	r0, [pc, #28]	; (800c14c <tcp_recv+0x40>)
 800c12e:	f008 f9a7 	bl	8014480 <iprintf>
    pcb->recv = recv;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	08016fb8 	.word	0x08016fb8
 800c148:	08017554 	.word	0x08017554
 800c14c:	08016ffc 	.word	0x08016ffc

0800c150 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00e      	beq.n	800c17e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d106      	bne.n	800c176 <tcp_sent+0x26>
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <tcp_sent+0x38>)
 800c16a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c16e:	4907      	ldr	r1, [pc, #28]	; (800c18c <tcp_sent+0x3c>)
 800c170:	4807      	ldr	r0, [pc, #28]	; (800c190 <tcp_sent+0x40>)
 800c172:	f008 f985 	bl	8014480 <iprintf>
    pcb->sent = sent;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c17e:	bf00      	nop
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	08016fb8 	.word	0x08016fb8
 800c18c:	0801757c 	.word	0x0801757c
 800c190:	08016ffc 	.word	0x08016ffc

0800c194 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00e      	beq.n	800c1c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d106      	bne.n	800c1ba <tcp_err+0x26>
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <tcp_err+0x38>)
 800c1ae:	f640 020d 	movw	r2, #2061	; 0x80d
 800c1b2:	4907      	ldr	r1, [pc, #28]	; (800c1d0 <tcp_err+0x3c>)
 800c1b4:	4807      	ldr	r0, [pc, #28]	; (800c1d4 <tcp_err+0x40>)
 800c1b6:	f008 f963 	bl	8014480 <iprintf>
    pcb->errf = err;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	08016fb8 	.word	0x08016fb8
 800c1d0:	080175a4 	.word	0x080175a4
 800c1d4:	08016ffc 	.word	0x08016ffc

0800c1d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d008      	beq.n	800c1fa <tcp_accept+0x22>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7d1b      	ldrb	r3, [r3, #20]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d104      	bne.n	800c1fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	619a      	str	r2, [r3, #24]
  }
}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
	...

0800c208 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4613      	mov	r3, r2
 800c214:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d107      	bne.n	800c22c <tcp_poll+0x24>
 800c21c:	4b0e      	ldr	r3, [pc, #56]	; (800c258 <tcp_poll+0x50>)
 800c21e:	f640 023d 	movw	r2, #2109	; 0x83d
 800c222:	490e      	ldr	r1, [pc, #56]	; (800c25c <tcp_poll+0x54>)
 800c224:	480e      	ldr	r0, [pc, #56]	; (800c260 <tcp_poll+0x58>)
 800c226:	f008 f92b 	bl	8014480 <iprintf>
 800c22a:	e011      	b.n	800c250 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	7d1b      	ldrb	r3, [r3, #20]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d106      	bne.n	800c242 <tcp_poll+0x3a>
 800c234:	4b08      	ldr	r3, [pc, #32]	; (800c258 <tcp_poll+0x50>)
 800c236:	f640 023e 	movw	r2, #2110	; 0x83e
 800c23a:	490a      	ldr	r1, [pc, #40]	; (800c264 <tcp_poll+0x5c>)
 800c23c:	4808      	ldr	r0, [pc, #32]	; (800c260 <tcp_poll+0x58>)
 800c23e:	f008 f91f 	bl	8014480 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	79fa      	ldrb	r2, [r7, #7]
 800c24e:	775a      	strb	r2, [r3, #29]
}
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	08016fb8 	.word	0x08016fb8
 800c25c:	080175cc 	.word	0x080175cc
 800c260:	08016ffc 	.word	0x08016ffc
 800c264:	080175e4 	.word	0x080175e4

0800c268 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d107      	bne.n	800c286 <tcp_pcb_purge+0x1e>
 800c276:	4b21      	ldr	r3, [pc, #132]	; (800c2fc <tcp_pcb_purge+0x94>)
 800c278:	f640 0251 	movw	r2, #2129	; 0x851
 800c27c:	4920      	ldr	r1, [pc, #128]	; (800c300 <tcp_pcb_purge+0x98>)
 800c27e:	4821      	ldr	r0, [pc, #132]	; (800c304 <tcp_pcb_purge+0x9c>)
 800c280:	f008 f8fe 	bl	8014480 <iprintf>
 800c284:	e037      	b.n	800c2f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7d1b      	ldrb	r3, [r3, #20]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d033      	beq.n	800c2f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c292:	2b0a      	cmp	r3, #10
 800c294:	d02f      	beq.n	800c2f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d02b      	beq.n	800c2f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d007      	beq.n	800c2b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe f8d8 	bl	800a460 <pbuf_free>
      pcb->refused_data = NULL;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f986 	bl	800c5d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fcf9 	bl	800bcc8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fcf4 	bl	800bcc8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	08016fb8 	.word	0x08016fb8
 800c300:	08017604 	.word	0x08017604
 800c304:	08016ffc 	.word	0x08016ffc

0800c308 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d106      	bne.n	800c326 <tcp_pcb_remove+0x1e>
 800c318:	4b3e      	ldr	r3, [pc, #248]	; (800c414 <tcp_pcb_remove+0x10c>)
 800c31a:	f640 0283 	movw	r2, #2179	; 0x883
 800c31e:	493e      	ldr	r1, [pc, #248]	; (800c418 <tcp_pcb_remove+0x110>)
 800c320:	483e      	ldr	r0, [pc, #248]	; (800c41c <tcp_pcb_remove+0x114>)
 800c322:	f008 f8ad 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <tcp_pcb_remove+0x32>
 800c32c:	4b39      	ldr	r3, [pc, #228]	; (800c414 <tcp_pcb_remove+0x10c>)
 800c32e:	f640 0284 	movw	r2, #2180	; 0x884
 800c332:	493b      	ldr	r1, [pc, #236]	; (800c420 <tcp_pcb_remove+0x118>)
 800c334:	4839      	ldr	r0, [pc, #228]	; (800c41c <tcp_pcb_remove+0x114>)
 800c336:	f008 f8a3 	bl	8014480 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d105      	bne.n	800c350 <tcp_pcb_remove+0x48>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	e013      	b.n	800c378 <tcp_pcb_remove+0x70>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	e00c      	b.n	800c372 <tcp_pcb_remove+0x6a>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d104      	bne.n	800c36c <tcp_pcb_remove+0x64>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	60da      	str	r2, [r3, #12]
 800c36a:	e005      	b.n	800c378 <tcp_pcb_remove+0x70>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1ef      	bne.n	800c358 <tcp_pcb_remove+0x50>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2200      	movs	r2, #0
 800c37c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c37e:	6838      	ldr	r0, [r7, #0]
 800c380:	f7ff ff72 	bl	800c268 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	7d1b      	ldrb	r3, [r3, #20]
 800c388:	2b0a      	cmp	r3, #10
 800c38a:	d013      	beq.n	800c3b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c390:	2b01      	cmp	r3, #1
 800c392:	d00f      	beq.n	800c3b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	8b5b      	ldrh	r3, [r3, #26]
 800c398:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	8b5b      	ldrh	r3, [r3, #26]
 800c3a4:	f043 0302 	orr.w	r3, r3, #2
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c3ae:	6838      	ldr	r0, [r7, #0]
 800c3b0:	f003 fbc6 	bl	800fb40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	7d1b      	ldrb	r3, [r3, #20]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d020      	beq.n	800c3fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d006      	beq.n	800c3d2 <tcp_pcb_remove+0xca>
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <tcp_pcb_remove+0x10c>)
 800c3c6:	f640 0293 	movw	r2, #2195	; 0x893
 800c3ca:	4916      	ldr	r1, [pc, #88]	; (800c424 <tcp_pcb_remove+0x11c>)
 800c3cc:	4813      	ldr	r0, [pc, #76]	; (800c41c <tcp_pcb_remove+0x114>)
 800c3ce:	f008 f857 	bl	8014480 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d006      	beq.n	800c3e8 <tcp_pcb_remove+0xe0>
 800c3da:	4b0e      	ldr	r3, [pc, #56]	; (800c414 <tcp_pcb_remove+0x10c>)
 800c3dc:	f640 0294 	movw	r2, #2196	; 0x894
 800c3e0:	4911      	ldr	r1, [pc, #68]	; (800c428 <tcp_pcb_remove+0x120>)
 800c3e2:	480e      	ldr	r0, [pc, #56]	; (800c41c <tcp_pcb_remove+0x114>)
 800c3e4:	f008 f84c 	bl	8014480 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <tcp_pcb_remove+0xf6>
 800c3f0:	4b08      	ldr	r3, [pc, #32]	; (800c414 <tcp_pcb_remove+0x10c>)
 800c3f2:	f640 0296 	movw	r2, #2198	; 0x896
 800c3f6:	490d      	ldr	r1, [pc, #52]	; (800c42c <tcp_pcb_remove+0x124>)
 800c3f8:	4808      	ldr	r0, [pc, #32]	; (800c41c <tcp_pcb_remove+0x114>)
 800c3fa:	f008 f841 	bl	8014480 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2200      	movs	r2, #0
 800c402:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08016fb8 	.word	0x08016fb8
 800c418:	08017620 	.word	0x08017620
 800c41c:	08016ffc 	.word	0x08016ffc
 800c420:	0801763c 	.word	0x0801763c
 800c424:	0801765c 	.word	0x0801765c
 800c428:	08017674 	.word	0x08017674
 800c42c:	08017690 	.word	0x08017690

0800c430 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <tcp_next_iss+0x1c>
 800c43e:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <tcp_next_iss+0x38>)
 800c440:	f640 02af 	movw	r2, #2223	; 0x8af
 800c444:	4909      	ldr	r1, [pc, #36]	; (800c46c <tcp_next_iss+0x3c>)
 800c446:	480a      	ldr	r0, [pc, #40]	; (800c470 <tcp_next_iss+0x40>)
 800c448:	f008 f81a 	bl	8014480 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <tcp_next_iss+0x44>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	4b09      	ldr	r3, [pc, #36]	; (800c478 <tcp_next_iss+0x48>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4413      	add	r3, r2
 800c456:	4a07      	ldr	r2, [pc, #28]	; (800c474 <tcp_next_iss+0x44>)
 800c458:	6013      	str	r3, [r2, #0]
  return iss;
 800c45a:	4b06      	ldr	r3, [pc, #24]	; (800c474 <tcp_next_iss+0x44>)
 800c45c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	08016fb8 	.word	0x08016fb8
 800c46c:	080176a8 	.word	0x080176a8
 800c470:	08016ffc 	.word	0x08016ffc
 800c474:	20000014 	.word	0x20000014
 800c478:	2000fe48 	.word	0x2000fe48

0800c47c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d106      	bne.n	800c49e <tcp_eff_send_mss_netif+0x22>
 800c490:	4b14      	ldr	r3, [pc, #80]	; (800c4e4 <tcp_eff_send_mss_netif+0x68>)
 800c492:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c496:	4914      	ldr	r1, [pc, #80]	; (800c4e8 <tcp_eff_send_mss_netif+0x6c>)
 800c498:	4814      	ldr	r0, [pc, #80]	; (800c4ec <tcp_eff_send_mss_netif+0x70>)
 800c49a:	f007 fff1 	bl	8014480 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c4a4:	89fb      	ldrh	r3, [r7, #14]
 800c4a6:	e019      	b.n	800c4dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c4ae:	8afb      	ldrh	r3, [r7, #22]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d012      	beq.n	800c4da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c4b4:	2328      	movs	r3, #40	; 0x28
 800c4b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c4b8:	8afa      	ldrh	r2, [r7, #22]
 800c4ba:	8abb      	ldrh	r3, [r7, #20]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d904      	bls.n	800c4ca <tcp_eff_send_mss_netif+0x4e>
 800c4c0:	8afa      	ldrh	r2, [r7, #22]
 800c4c2:	8abb      	ldrh	r3, [r7, #20]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	e000      	b.n	800c4cc <tcp_eff_send_mss_netif+0x50>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c4ce:	8a7a      	ldrh	r2, [r7, #18]
 800c4d0:	89fb      	ldrh	r3, [r7, #14]
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	bf28      	it	cs
 800c4d6:	4613      	movcs	r3, r2
 800c4d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c4da:	89fb      	ldrh	r3, [r7, #14]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	08016fb8 	.word	0x08016fb8
 800c4e8:	080176c4 	.word	0x080176c4
 800c4ec:	08016ffc 	.word	0x08016ffc

0800c4f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d119      	bne.n	800c538 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c504:	4b10      	ldr	r3, [pc, #64]	; (800c548 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c506:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c50a:	4910      	ldr	r1, [pc, #64]	; (800c54c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c50c:	4810      	ldr	r0, [pc, #64]	; (800c550 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c50e:	f007 ffb7 	bl	8014480 <iprintf>

  while (pcb != NULL) {
 800c512:	e011      	b.n	800c538 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d108      	bne.n	800c532 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7fe fd9a 	bl	800b060 <tcp_abort>
      pcb = next;
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	e002      	b.n	800c538 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1ea      	bne.n	800c514 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	08016fb8 	.word	0x08016fb8
 800c54c:	080176ec 	.word	0x080176ec
 800c550:	08016ffc 	.word	0x08016ffc

0800c554 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d02a      	beq.n	800c5ba <tcp_netif_ip_addr_changed+0x66>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d026      	beq.n	800c5ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c56c:	4b15      	ldr	r3, [pc, #84]	; (800c5c4 <tcp_netif_ip_addr_changed+0x70>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ffbc 	bl	800c4f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c578:	4b13      	ldr	r3, [pc, #76]	; (800c5c8 <tcp_netif_ip_addr_changed+0x74>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff ffb6 	bl	800c4f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d017      	beq.n	800c5ba <tcp_netif_ip_addr_changed+0x66>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d013      	beq.n	800c5ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c592:	4b0e      	ldr	r3, [pc, #56]	; (800c5cc <tcp_netif_ip_addr_changed+0x78>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e00c      	b.n	800c5b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d103      	bne.n	800c5ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1ef      	bne.n	800c59a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2000fe54 	.word	0x2000fe54
 800c5c8:	2000fe4c 	.word	0x2000fe4c
 800c5cc:	2000fe50 	.word	0x2000fe50

0800c5d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fb6f 	bl	800bcc8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c5f8:	b590      	push	{r4, r7, lr}
 800c5fa:	b08d      	sub	sp, #52	; 0x34
 800c5fc:	af04      	add	r7, sp, #16
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d105      	bne.n	800c614 <tcp_input+0x1c>
 800c608:	4b9b      	ldr	r3, [pc, #620]	; (800c878 <tcp_input+0x280>)
 800c60a:	2283      	movs	r2, #131	; 0x83
 800c60c:	499b      	ldr	r1, [pc, #620]	; (800c87c <tcp_input+0x284>)
 800c60e:	489c      	ldr	r0, [pc, #624]	; (800c880 <tcp_input+0x288>)
 800c610:	f007 ff36 	bl	8014480 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	4a9a      	ldr	r2, [pc, #616]	; (800c884 <tcp_input+0x28c>)
 800c61a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	895b      	ldrh	r3, [r3, #10]
 800c620:	2b13      	cmp	r3, #19
 800c622:	f240 83d1 	bls.w	800cdc8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c626:	4b98      	ldr	r3, [pc, #608]	; (800c888 <tcp_input+0x290>)
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	4a97      	ldr	r2, [pc, #604]	; (800c888 <tcp_input+0x290>)
 800c62c:	6812      	ldr	r2, [r2, #0]
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f006 fc65 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f040 83c7 	bne.w	800cdcc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c63e:	4b92      	ldr	r3, [pc, #584]	; (800c888 <tcp_input+0x290>)
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c646:	2be0      	cmp	r3, #224	; 0xe0
 800c648:	f000 83c0 	beq.w	800cdcc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c64c:	4b8d      	ldr	r3, [pc, #564]	; (800c884 <tcp_input+0x28c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	899b      	ldrh	r3, [r3, #12]
 800c652:	b29b      	uxth	r3, r3
 800c654:	4618      	mov	r0, r3
 800c656:	f7fc fb75 	bl	8008d44 <lwip_htons>
 800c65a:	4603      	mov	r3, r0
 800c65c:	0b1b      	lsrs	r3, r3, #12
 800c65e:	b29b      	uxth	r3, r3
 800c660:	b2db      	uxtb	r3, r3
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c666:	7cbb      	ldrb	r3, [r7, #18]
 800c668:	2b13      	cmp	r3, #19
 800c66a:	f240 83b1 	bls.w	800cdd0 <tcp_input+0x7d8>
 800c66e:	7cbb      	ldrb	r3, [r7, #18]
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	891b      	ldrh	r3, [r3, #8]
 800c676:	429a      	cmp	r2, r3
 800c678:	f200 83aa 	bhi.w	800cdd0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c67c:	7cbb      	ldrb	r3, [r7, #18]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	3b14      	subs	r3, #20
 800c682:	b29a      	uxth	r2, r3
 800c684:	4b81      	ldr	r3, [pc, #516]	; (800c88c <tcp_input+0x294>)
 800c686:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c688:	4b81      	ldr	r3, [pc, #516]	; (800c890 <tcp_input+0x298>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	895a      	ldrh	r2, [r3, #10]
 800c692:	7cbb      	ldrb	r3, [r7, #18]
 800c694:	b29b      	uxth	r3, r3
 800c696:	429a      	cmp	r2, r3
 800c698:	d309      	bcc.n	800c6ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c69a:	4b7c      	ldr	r3, [pc, #496]	; (800c88c <tcp_input+0x294>)
 800c69c:	881a      	ldrh	r2, [r3, #0]
 800c69e:	4b7d      	ldr	r3, [pc, #500]	; (800c894 <tcp_input+0x29c>)
 800c6a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c6a2:	7cbb      	ldrb	r3, [r7, #18]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7fd fe54 	bl	800a354 <pbuf_remove_header>
 800c6ac:	e04e      	b.n	800c74c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d105      	bne.n	800c6c2 <tcp_input+0xca>
 800c6b6:	4b70      	ldr	r3, [pc, #448]	; (800c878 <tcp_input+0x280>)
 800c6b8:	22c2      	movs	r2, #194	; 0xc2
 800c6ba:	4977      	ldr	r1, [pc, #476]	; (800c898 <tcp_input+0x2a0>)
 800c6bc:	4870      	ldr	r0, [pc, #448]	; (800c880 <tcp_input+0x288>)
 800c6be:	f007 fedf 	bl	8014480 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c6c2:	2114      	movs	r1, #20
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fd fe45 	bl	800a354 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	895a      	ldrh	r2, [r3, #10]
 800c6ce:	4b71      	ldr	r3, [pc, #452]	; (800c894 <tcp_input+0x29c>)
 800c6d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c6d2:	4b6e      	ldr	r3, [pc, #440]	; (800c88c <tcp_input+0x294>)
 800c6d4:	881a      	ldrh	r2, [r3, #0]
 800c6d6:	4b6f      	ldr	r3, [pc, #444]	; (800c894 <tcp_input+0x29c>)
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c6de:	4b6d      	ldr	r3, [pc, #436]	; (800c894 <tcp_input+0x29c>)
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fd fe35 	bl	800a354 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	895b      	ldrh	r3, [r3, #10]
 800c6f0:	8a3a      	ldrh	r2, [r7, #16]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	f200 836e 	bhi.w	800cdd4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	4a64      	ldr	r2, [pc, #400]	; (800c890 <tcp_input+0x298>)
 800c700:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	8a3a      	ldrh	r2, [r7, #16]
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fd fe22 	bl	800a354 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	891a      	ldrh	r2, [r3, #8]
 800c714:	8a3b      	ldrh	r3, [r7, #16]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	895b      	ldrh	r3, [r3, #10]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <tcp_input+0x13a>
 800c726:	4b54      	ldr	r3, [pc, #336]	; (800c878 <tcp_input+0x280>)
 800c728:	22df      	movs	r2, #223	; 0xdf
 800c72a:	495c      	ldr	r1, [pc, #368]	; (800c89c <tcp_input+0x2a4>)
 800c72c:	4854      	ldr	r0, [pc, #336]	; (800c880 <tcp_input+0x288>)
 800c72e:	f007 fea7 	bl	8014480 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	891a      	ldrh	r2, [r3, #8]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	891b      	ldrh	r3, [r3, #8]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d005      	beq.n	800c74c <tcp_input+0x154>
 800c740:	4b4d      	ldr	r3, [pc, #308]	; (800c878 <tcp_input+0x280>)
 800c742:	22e0      	movs	r2, #224	; 0xe0
 800c744:	4956      	ldr	r1, [pc, #344]	; (800c8a0 <tcp_input+0x2a8>)
 800c746:	484e      	ldr	r0, [pc, #312]	; (800c880 <tcp_input+0x288>)
 800c748:	f007 fe9a 	bl	8014480 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c74c:	4b4d      	ldr	r3, [pc, #308]	; (800c884 <tcp_input+0x28c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	b29b      	uxth	r3, r3
 800c754:	4a4b      	ldr	r2, [pc, #300]	; (800c884 <tcp_input+0x28c>)
 800c756:	6814      	ldr	r4, [r2, #0]
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fc faf3 	bl	8008d44 <lwip_htons>
 800c75e:	4603      	mov	r3, r0
 800c760:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c762:	4b48      	ldr	r3, [pc, #288]	; (800c884 <tcp_input+0x28c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	4a46      	ldr	r2, [pc, #280]	; (800c884 <tcp_input+0x28c>)
 800c76c:	6814      	ldr	r4, [r2, #0]
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fae8 	bl	8008d44 <lwip_htons>
 800c774:	4603      	mov	r3, r0
 800c776:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c778:	4b42      	ldr	r3, [pc, #264]	; (800c884 <tcp_input+0x28c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	4a41      	ldr	r2, [pc, #260]	; (800c884 <tcp_input+0x28c>)
 800c780:	6814      	ldr	r4, [r2, #0]
 800c782:	4618      	mov	r0, r3
 800c784:	f7fc faf3 	bl	8008d6e <lwip_htonl>
 800c788:	4603      	mov	r3, r0
 800c78a:	6063      	str	r3, [r4, #4]
 800c78c:	6863      	ldr	r3, [r4, #4]
 800c78e:	4a45      	ldr	r2, [pc, #276]	; (800c8a4 <tcp_input+0x2ac>)
 800c790:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c792:	4b3c      	ldr	r3, [pc, #240]	; (800c884 <tcp_input+0x28c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	4a3a      	ldr	r2, [pc, #232]	; (800c884 <tcp_input+0x28c>)
 800c79a:	6814      	ldr	r4, [r2, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fc fae6 	bl	8008d6e <lwip_htonl>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	60a3      	str	r3, [r4, #8]
 800c7a6:	68a3      	ldr	r3, [r4, #8]
 800c7a8:	4a3f      	ldr	r2, [pc, #252]	; (800c8a8 <tcp_input+0x2b0>)
 800c7aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c7ac:	4b35      	ldr	r3, [pc, #212]	; (800c884 <tcp_input+0x28c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	89db      	ldrh	r3, [r3, #14]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	4a33      	ldr	r2, [pc, #204]	; (800c884 <tcp_input+0x28c>)
 800c7b6:	6814      	ldr	r4, [r2, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fc fac3 	bl	8008d44 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c7c2:	4b30      	ldr	r3, [pc, #192]	; (800c884 <tcp_input+0x28c>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	899b      	ldrh	r3, [r3, #12]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fc faba 	bl	8008d44 <lwip_htons>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	4b34      	ldr	r3, [pc, #208]	; (800c8ac <tcp_input+0x2b4>)
 800c7dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	891a      	ldrh	r2, [r3, #8]
 800c7e2:	4b33      	ldr	r3, [pc, #204]	; (800c8b0 <tcp_input+0x2b8>)
 800c7e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c7e6:	4b31      	ldr	r3, [pc, #196]	; (800c8ac <tcp_input+0x2b4>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00c      	beq.n	800c80c <tcp_input+0x214>
    tcplen++;
 800c7f2:	4b2f      	ldr	r3, [pc, #188]	; (800c8b0 <tcp_input+0x2b8>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	4b2d      	ldr	r3, [pc, #180]	; (800c8b0 <tcp_input+0x2b8>)
 800c7fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	891a      	ldrh	r2, [r3, #8]
 800c802:	4b2b      	ldr	r3, [pc, #172]	; (800c8b0 <tcp_input+0x2b8>)
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	f200 82e6 	bhi.w	800cdd8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c80c:	2300      	movs	r3, #0
 800c80e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <tcp_input+0x2bc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	61fb      	str	r3, [r7, #28]
 800c816:	e09d      	b.n	800c954 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	7d1b      	ldrb	r3, [r3, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <tcp_input+0x234>
 800c820:	4b15      	ldr	r3, [pc, #84]	; (800c878 <tcp_input+0x280>)
 800c822:	22fb      	movs	r2, #251	; 0xfb
 800c824:	4924      	ldr	r1, [pc, #144]	; (800c8b8 <tcp_input+0x2c0>)
 800c826:	4816      	ldr	r0, [pc, #88]	; (800c880 <tcp_input+0x288>)
 800c828:	f007 fe2a 	bl	8014480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	2b0a      	cmp	r3, #10
 800c832:	d105      	bne.n	800c840 <tcp_input+0x248>
 800c834:	4b10      	ldr	r3, [pc, #64]	; (800c878 <tcp_input+0x280>)
 800c836:	22fc      	movs	r2, #252	; 0xfc
 800c838:	4920      	ldr	r1, [pc, #128]	; (800c8bc <tcp_input+0x2c4>)
 800c83a:	4811      	ldr	r0, [pc, #68]	; (800c880 <tcp_input+0x288>)
 800c83c:	f007 fe20 	bl	8014480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	7d1b      	ldrb	r3, [r3, #20]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d105      	bne.n	800c854 <tcp_input+0x25c>
 800c848:	4b0b      	ldr	r3, [pc, #44]	; (800c878 <tcp_input+0x280>)
 800c84a:	22fd      	movs	r2, #253	; 0xfd
 800c84c:	491c      	ldr	r1, [pc, #112]	; (800c8c0 <tcp_input+0x2c8>)
 800c84e:	480c      	ldr	r0, [pc, #48]	; (800c880 <tcp_input+0x288>)
 800c850:	f007 fe16 	bl	8014480 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	7a1b      	ldrb	r3, [r3, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d033      	beq.n	800c8c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	7a1a      	ldrb	r2, [r3, #8]
 800c860:	4b09      	ldr	r3, [pc, #36]	; (800c888 <tcp_input+0x290>)
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c868:	3301      	adds	r3, #1
 800c86a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d029      	beq.n	800c8c4 <tcp_input+0x2cc>
      prev = pcb;
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	61bb      	str	r3, [r7, #24]
      continue;
 800c874:	e06b      	b.n	800c94e <tcp_input+0x356>
 800c876:	bf00      	nop
 800c878:	08017720 	.word	0x08017720
 800c87c:	08017754 	.word	0x08017754
 800c880:	0801776c 	.word	0x0801776c
 800c884:	2000fe70 	.word	0x2000fe70
 800c888:	20008d34 	.word	0x20008d34
 800c88c:	2000fe74 	.word	0x2000fe74
 800c890:	2000fe78 	.word	0x2000fe78
 800c894:	2000fe76 	.word	0x2000fe76
 800c898:	08017794 	.word	0x08017794
 800c89c:	080177a4 	.word	0x080177a4
 800c8a0:	080177b0 	.word	0x080177b0
 800c8a4:	2000fe80 	.word	0x2000fe80
 800c8a8:	2000fe84 	.word	0x2000fe84
 800c8ac:	2000fe8c 	.word	0x2000fe8c
 800c8b0:	2000fe8a 	.word	0x2000fe8a
 800c8b4:	2000fe54 	.word	0x2000fe54
 800c8b8:	080177d0 	.word	0x080177d0
 800c8bc:	080177f8 	.word	0x080177f8
 800c8c0:	08017824 	.word	0x08017824
    }

    if (pcb->remote_port == tcphdr->src &&
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	8b1a      	ldrh	r2, [r3, #24]
 800c8c8:	4b72      	ldr	r3, [pc, #456]	; (800ca94 <tcp_input+0x49c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d13a      	bne.n	800c94a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	8ada      	ldrh	r2, [r3, #22]
 800c8d8:	4b6e      	ldr	r3, [pc, #440]	; (800ca94 <tcp_input+0x49c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d132      	bne.n	800c94a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	4b6b      	ldr	r3, [pc, #428]	; (800ca98 <tcp_input+0x4a0>)
 800c8ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d12c      	bne.n	800c94a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	4b68      	ldr	r3, [pc, #416]	; (800ca98 <tcp_input+0x4a0>)
 800c8f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d126      	bne.n	800c94a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	429a      	cmp	r2, r3
 800c904:	d106      	bne.n	800c914 <tcp_input+0x31c>
 800c906:	4b65      	ldr	r3, [pc, #404]	; (800ca9c <tcp_input+0x4a4>)
 800c908:	f240 120d 	movw	r2, #269	; 0x10d
 800c90c:	4964      	ldr	r1, [pc, #400]	; (800caa0 <tcp_input+0x4a8>)
 800c90e:	4865      	ldr	r0, [pc, #404]	; (800caa4 <tcp_input+0x4ac>)
 800c910:	f007 fdb6 	bl	8014480 <iprintf>
      if (prev != NULL) {
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <tcp_input+0x338>
        prev->next = pcb->next;
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c922:	4b61      	ldr	r3, [pc, #388]	; (800caa8 <tcp_input+0x4b0>)
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c92a:	4a5f      	ldr	r2, [pc, #380]	; (800caa8 <tcp_input+0x4b0>)
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	69fa      	ldr	r2, [r7, #28]
 800c936:	429a      	cmp	r2, r3
 800c938:	d111      	bne.n	800c95e <tcp_input+0x366>
 800c93a:	4b58      	ldr	r3, [pc, #352]	; (800ca9c <tcp_input+0x4a4>)
 800c93c:	f240 1215 	movw	r2, #277	; 0x115
 800c940:	495a      	ldr	r1, [pc, #360]	; (800caac <tcp_input+0x4b4>)
 800c942:	4858      	ldr	r0, [pc, #352]	; (800caa4 <tcp_input+0x4ac>)
 800c944:	f007 fd9c 	bl	8014480 <iprintf>
      break;
 800c948:	e009      	b.n	800c95e <tcp_input+0x366>
    }
    prev = pcb;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	61fb      	str	r3, [r7, #28]
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f47f af5e 	bne.w	800c818 <tcp_input+0x220>
 800c95c:	e000      	b.n	800c960 <tcp_input+0x368>
      break;
 800c95e:	bf00      	nop
  }

  if (pcb == NULL) {
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 80aa 	bne.w	800cabc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c968:	4b51      	ldr	r3, [pc, #324]	; (800cab0 <tcp_input+0x4b8>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	e03f      	b.n	800c9f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	7d1b      	ldrb	r3, [r3, #20]
 800c974:	2b0a      	cmp	r3, #10
 800c976:	d006      	beq.n	800c986 <tcp_input+0x38e>
 800c978:	4b48      	ldr	r3, [pc, #288]	; (800ca9c <tcp_input+0x4a4>)
 800c97a:	f240 121f 	movw	r2, #287	; 0x11f
 800c97e:	494d      	ldr	r1, [pc, #308]	; (800cab4 <tcp_input+0x4bc>)
 800c980:	4848      	ldr	r0, [pc, #288]	; (800caa4 <tcp_input+0x4ac>)
 800c982:	f007 fd7d 	bl	8014480 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	7a1b      	ldrb	r3, [r3, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d009      	beq.n	800c9a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	7a1a      	ldrb	r2, [r3, #8]
 800c992:	4b41      	ldr	r3, [pc, #260]	; (800ca98 <tcp_input+0x4a0>)
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c99a:	3301      	adds	r3, #1
 800c99c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d122      	bne.n	800c9e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	8b1a      	ldrh	r2, [r3, #24]
 800c9a6:	4b3b      	ldr	r3, [pc, #236]	; (800ca94 <tcp_input+0x49c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d11b      	bne.n	800c9ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	8ada      	ldrh	r2, [r3, #22]
 800c9b6:	4b37      	ldr	r3, [pc, #220]	; (800ca94 <tcp_input+0x49c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	885b      	ldrh	r3, [r3, #2]
 800c9bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d113      	bne.n	800c9ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	4b34      	ldr	r3, [pc, #208]	; (800ca98 <tcp_input+0x4a0>)
 800c9c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d10d      	bne.n	800c9ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	4b31      	ldr	r3, [pc, #196]	; (800ca98 <tcp_input+0x4a0>)
 800c9d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d107      	bne.n	800c9ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c9da:	69f8      	ldr	r0, [r7, #28]
 800c9dc:	f000 fb56 	bl	800d08c <tcp_timewait_input>
        }
        pbuf_free(p);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7fd fd3d 	bl	800a460 <pbuf_free>
        return;
 800c9e6:	e1fd      	b.n	800cde4 <tcp_input+0x7ec>
        continue;
 800c9e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	61fb      	str	r3, [r7, #28]
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1bc      	bne.n	800c970 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9fa:	4b2f      	ldr	r3, [pc, #188]	; (800cab8 <tcp_input+0x4c0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e02a      	b.n	800ca58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	7a1b      	ldrb	r3, [r3, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00c      	beq.n	800ca24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	7a1a      	ldrb	r2, [r3, #8]
 800ca0e:	4b22      	ldr	r3, [pc, #136]	; (800ca98 <tcp_input+0x4a0>)
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca16:	3301      	adds	r3, #1
 800ca18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d002      	beq.n	800ca24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	61bb      	str	r3, [r7, #24]
        continue;
 800ca22:	e016      	b.n	800ca52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	8ada      	ldrh	r2, [r3, #22]
 800ca28:	4b1a      	ldr	r3, [pc, #104]	; (800ca94 <tcp_input+0x49c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	885b      	ldrh	r3, [r3, #2]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d10c      	bne.n	800ca4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <tcp_input+0x4a0>)
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d00f      	beq.n	800ca60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00d      	beq.n	800ca62 <tcp_input+0x46a>
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d009      	beq.n	800ca62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1d1      	bne.n	800ca02 <tcp_input+0x40a>
 800ca5e:	e000      	b.n	800ca62 <tcp_input+0x46a>
            break;
 800ca60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d029      	beq.n	800cabc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00a      	beq.n	800ca84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ca76:	4b10      	ldr	r3, [pc, #64]	; (800cab8 <tcp_input+0x4c0>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ca7e:	4a0e      	ldr	r2, [pc, #56]	; (800cab8 <tcp_input+0x4c0>)
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ca84:	6978      	ldr	r0, [r7, #20]
 800ca86:	f000 fa03 	bl	800ce90 <tcp_listen_input>
      }
      pbuf_free(p);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7fd fce8 	bl	800a460 <pbuf_free>
      return;
 800ca90:	e1a8      	b.n	800cde4 <tcp_input+0x7ec>
 800ca92:	bf00      	nop
 800ca94:	2000fe70 	.word	0x2000fe70
 800ca98:	20008d34 	.word	0x20008d34
 800ca9c:	08017720 	.word	0x08017720
 800caa0:	0801784c 	.word	0x0801784c
 800caa4:	0801776c 	.word	0x0801776c
 800caa8:	2000fe54 	.word	0x2000fe54
 800caac:	08017878 	.word	0x08017878
 800cab0:	2000fe58 	.word	0x2000fe58
 800cab4:	080178a4 	.word	0x080178a4
 800cab8:	2000fe50 	.word	0x2000fe50
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 8158 	beq.w	800cd74 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cac4:	4b95      	ldr	r3, [pc, #596]	; (800cd1c <tcp_input+0x724>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	891a      	ldrh	r2, [r3, #8]
 800cace:	4b93      	ldr	r3, [pc, #588]	; (800cd1c <tcp_input+0x724>)
 800cad0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cad2:	4a92      	ldr	r2, [pc, #584]	; (800cd1c <tcp_input+0x724>)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cad8:	4b91      	ldr	r3, [pc, #580]	; (800cd20 <tcp_input+0x728>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a8f      	ldr	r2, [pc, #572]	; (800cd1c <tcp_input+0x724>)
 800cade:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cae0:	4b90      	ldr	r3, [pc, #576]	; (800cd24 <tcp_input+0x72c>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cae6:	4b90      	ldr	r3, [pc, #576]	; (800cd28 <tcp_input+0x730>)
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800caec:	4b8f      	ldr	r3, [pc, #572]	; (800cd2c <tcp_input+0x734>)
 800caee:	2200      	movs	r2, #0
 800caf0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800caf2:	4b8f      	ldr	r3, [pc, #572]	; (800cd30 <tcp_input+0x738>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0308 	and.w	r3, r3, #8
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	7b5b      	ldrb	r3, [r3, #13]
 800cb02:	f043 0301 	orr.w	r3, r3, #1
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d017      	beq.n	800cb44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cb14:	69f8      	ldr	r0, [r7, #28]
 800cb16:	f7ff f85b 	bl	800bbd0 <tcp_process_refused_data>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f113 0f0d 	cmn.w	r3, #13
 800cb20:	d007      	beq.n	800cb32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00c      	beq.n	800cb44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb2a:	4b82      	ldr	r3, [pc, #520]	; (800cd34 <tcp_input+0x73c>)
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d008      	beq.n	800cb44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 80e3 	bne.w	800cd02 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cb3c:	69f8      	ldr	r0, [r7, #28]
 800cb3e:	f003 fe05 	bl	801074c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cb42:	e0de      	b.n	800cd02 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cb44:	4a7c      	ldr	r2, [pc, #496]	; (800cd38 <tcp_input+0x740>)
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cb4a:	69f8      	ldr	r0, [r7, #28]
 800cb4c:	f000 fb18 	bl	800d180 <tcp_process>
 800cb50:	4603      	mov	r3, r0
 800cb52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cb54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb58:	f113 0f0d 	cmn.w	r3, #13
 800cb5c:	f000 80d3 	beq.w	800cd06 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cb60:	4b71      	ldr	r3, [pc, #452]	; (800cd28 <tcp_input+0x730>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d015      	beq.n	800cb98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d008      	beq.n	800cb88 <tcp_input+0x590>
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb7c:	69fa      	ldr	r2, [r7, #28]
 800cb7e:	6912      	ldr	r2, [r2, #16]
 800cb80:	f06f 010d 	mvn.w	r1, #13
 800cb84:	4610      	mov	r0, r2
 800cb86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb88:	69f9      	ldr	r1, [r7, #28]
 800cb8a:	486c      	ldr	r0, [pc, #432]	; (800cd3c <tcp_input+0x744>)
 800cb8c:	f7ff fbbc 	bl	800c308 <tcp_pcb_remove>
        tcp_free(pcb);
 800cb90:	69f8      	ldr	r0, [r7, #28]
 800cb92:	f7fd ff21 	bl	800a9d8 <tcp_free>
 800cb96:	e0da      	b.n	800cd4e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cb9c:	4b63      	ldr	r3, [pc, #396]	; (800cd2c <tcp_input+0x734>)
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01d      	beq.n	800cbe0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cba4:	4b61      	ldr	r3, [pc, #388]	; (800cd2c <tcp_input+0x734>)
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <tcp_input+0x5d2>
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbba:	69fa      	ldr	r2, [r7, #28]
 800cbbc:	6910      	ldr	r0, [r2, #16]
 800cbbe:	89fa      	ldrh	r2, [r7, #14]
 800cbc0:	69f9      	ldr	r1, [r7, #28]
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	74fb      	strb	r3, [r7, #19]
 800cbc8:	e001      	b.n	800cbce <tcp_input+0x5d6>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cbce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbd2:	f113 0f0d 	cmn.w	r3, #13
 800cbd6:	f000 8098 	beq.w	800cd0a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cbda:	4b54      	ldr	r3, [pc, #336]	; (800cd2c <tcp_input+0x734>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cbe0:	69f8      	ldr	r0, [r7, #28]
 800cbe2:	f000 f915 	bl	800ce10 <tcp_input_delayed_close>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f040 8090 	bne.w	800cd0e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cbee:	4b4d      	ldr	r3, [pc, #308]	; (800cd24 <tcp_input+0x72c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d041      	beq.n	800cc7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d006      	beq.n	800cc0c <tcp_input+0x614>
 800cbfe:	4b50      	ldr	r3, [pc, #320]	; (800cd40 <tcp_input+0x748>)
 800cc00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cc04:	494f      	ldr	r1, [pc, #316]	; (800cd44 <tcp_input+0x74c>)
 800cc06:	4850      	ldr	r0, [pc, #320]	; (800cd48 <tcp_input+0x750>)
 800cc08:	f007 fc3a 	bl	8014480 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	8b5b      	ldrh	r3, [r3, #26]
 800cc10:	f003 0310 	and.w	r3, r3, #16
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d008      	beq.n	800cc2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cc18:	4b42      	ldr	r3, [pc, #264]	; (800cd24 <tcp_input+0x72c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fd fc1f 	bl	800a460 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cc22:	69f8      	ldr	r0, [r7, #28]
 800cc24:	f7fe fa1c 	bl	800b060 <tcp_abort>
            goto aborted;
 800cc28:	e091      	b.n	800cd4e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00c      	beq.n	800cc4e <tcp_input+0x656>
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	6918      	ldr	r0, [r3, #16]
 800cc3e:	4b39      	ldr	r3, [pc, #228]	; (800cd24 <tcp_input+0x72c>)
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	2300      	movs	r3, #0
 800cc44:	69f9      	ldr	r1, [r7, #28]
 800cc46:	47a0      	blx	r4
 800cc48:	4603      	mov	r3, r0
 800cc4a:	74fb      	strb	r3, [r7, #19]
 800cc4c:	e008      	b.n	800cc60 <tcp_input+0x668>
 800cc4e:	4b35      	ldr	r3, [pc, #212]	; (800cd24 <tcp_input+0x72c>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	69f9      	ldr	r1, [r7, #28]
 800cc56:	2000      	movs	r0, #0
 800cc58:	f7ff f890 	bl	800bd7c <tcp_recv_null>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cc60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc64:	f113 0f0d 	cmn.w	r3, #13
 800cc68:	d053      	beq.n	800cd12 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cc6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cc72:	4b2c      	ldr	r3, [pc, #176]	; (800cd24 <tcp_input+0x72c>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cc7a:	4b2b      	ldr	r3, [pc, #172]	; (800cd28 <tcp_input+0x730>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	f003 0320 	and.w	r3, r3, #32
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d030      	beq.n	800cce8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d009      	beq.n	800cca2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc92:	7b5a      	ldrb	r2, [r3, #13]
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc98:	f042 0220 	orr.w	r2, r2, #32
 800cc9c:	b2d2      	uxtb	r2, r2
 800cc9e:	735a      	strb	r2, [r3, #13]
 800cca0:	e022      	b.n	800cce8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cca6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccaa:	d005      	beq.n	800ccb8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00b      	beq.n	800ccda <tcp_input+0x6e2>
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	6918      	ldr	r0, [r3, #16]
 800cccc:	2300      	movs	r3, #0
 800ccce:	2200      	movs	r2, #0
 800ccd0:	69f9      	ldr	r1, [r7, #28]
 800ccd2:	47a0      	blx	r4
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	74fb      	strb	r3, [r7, #19]
 800ccd8:	e001      	b.n	800ccde <tcp_input+0x6e6>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ccde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cce2:	f113 0f0d 	cmn.w	r3, #13
 800cce6:	d016      	beq.n	800cd16 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cce8:	4b13      	ldr	r3, [pc, #76]	; (800cd38 <tcp_input+0x740>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ccee:	69f8      	ldr	r0, [r7, #28]
 800ccf0:	f000 f88e 	bl	800ce10 <tcp_input_delayed_close>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d128      	bne.n	800cd4c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ccfa:	69f8      	ldr	r0, [r7, #28]
 800ccfc:	f002 ff20 	bl	800fb40 <tcp_output>
 800cd00:	e025      	b.n	800cd4e <tcp_input+0x756>
        goto aborted;
 800cd02:	bf00      	nop
 800cd04:	e023      	b.n	800cd4e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cd06:	bf00      	nop
 800cd08:	e021      	b.n	800cd4e <tcp_input+0x756>
              goto aborted;
 800cd0a:	bf00      	nop
 800cd0c:	e01f      	b.n	800cd4e <tcp_input+0x756>
          goto aborted;
 800cd0e:	bf00      	nop
 800cd10:	e01d      	b.n	800cd4e <tcp_input+0x756>
            goto aborted;
 800cd12:	bf00      	nop
 800cd14:	e01b      	b.n	800cd4e <tcp_input+0x756>
              goto aborted;
 800cd16:	bf00      	nop
 800cd18:	e019      	b.n	800cd4e <tcp_input+0x756>
 800cd1a:	bf00      	nop
 800cd1c:	2000fe60 	.word	0x2000fe60
 800cd20:	2000fe70 	.word	0x2000fe70
 800cd24:	2000fe90 	.word	0x2000fe90
 800cd28:	2000fe8d 	.word	0x2000fe8d
 800cd2c:	2000fe88 	.word	0x2000fe88
 800cd30:	2000fe8c 	.word	0x2000fe8c
 800cd34:	2000fe8a 	.word	0x2000fe8a
 800cd38:	2000fe94 	.word	0x2000fe94
 800cd3c:	2000fe54 	.word	0x2000fe54
 800cd40:	08017720 	.word	0x08017720
 800cd44:	080178d4 	.word	0x080178d4
 800cd48:	0801776c 	.word	0x0801776c
          goto aborted;
 800cd4c:	bf00      	nop
    tcp_input_pcb = NULL;
 800cd4e:	4b27      	ldr	r3, [pc, #156]	; (800cdec <tcp_input+0x7f4>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cd54:	4b26      	ldr	r3, [pc, #152]	; (800cdf0 <tcp_input+0x7f8>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cd5a:	4b26      	ldr	r3, [pc, #152]	; (800cdf4 <tcp_input+0x7fc>)
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d03f      	beq.n	800cde2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cd62:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <tcp_input+0x7fc>)
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fd fb7a 	bl	800a460 <pbuf_free>
      inseg.p = NULL;
 800cd6c:	4b21      	ldr	r3, [pc, #132]	; (800cdf4 <tcp_input+0x7fc>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cd72:	e036      	b.n	800cde2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd74:	4b20      	ldr	r3, [pc, #128]	; (800cdf8 <tcp_input+0x800>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	899b      	ldrh	r3, [r3, #12]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fb ffe1 	bl	8008d44 <lwip_htons>
 800cd82:	4603      	mov	r3, r0
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	f003 0304 	and.w	r3, r3, #4
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d118      	bne.n	800cdc0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd8e:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <tcp_input+0x804>)
 800cd90:	6819      	ldr	r1, [r3, #0]
 800cd92:	4b1b      	ldr	r3, [pc, #108]	; (800ce00 <tcp_input+0x808>)
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <tcp_input+0x80c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd9e:	4b16      	ldr	r3, [pc, #88]	; (800cdf8 <tcp_input+0x800>)
 800cda0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cda2:	885b      	ldrh	r3, [r3, #2]
 800cda4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cda6:	4a14      	ldr	r2, [pc, #80]	; (800cdf8 <tcp_input+0x800>)
 800cda8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdaa:	8812      	ldrh	r2, [r2, #0]
 800cdac:	b292      	uxth	r2, r2
 800cdae:	9202      	str	r2, [sp, #8]
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <tcp_input+0x810>)
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	4b15      	ldr	r3, [pc, #84]	; (800ce0c <tcp_input+0x814>)
 800cdb8:	4602      	mov	r2, r0
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f003 fc74 	bl	80106a8 <tcp_rst>
    pbuf_free(p);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7fd fb4d 	bl	800a460 <pbuf_free>
  return;
 800cdc6:	e00c      	b.n	800cde2 <tcp_input+0x7ea>
    goto dropped;
 800cdc8:	bf00      	nop
 800cdca:	e006      	b.n	800cdda <tcp_input+0x7e2>
    goto dropped;
 800cdcc:	bf00      	nop
 800cdce:	e004      	b.n	800cdda <tcp_input+0x7e2>
    goto dropped;
 800cdd0:	bf00      	nop
 800cdd2:	e002      	b.n	800cdda <tcp_input+0x7e2>
      goto dropped;
 800cdd4:	bf00      	nop
 800cdd6:	e000      	b.n	800cdda <tcp_input+0x7e2>
      goto dropped;
 800cdd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7fd fb40 	bl	800a460 <pbuf_free>
 800cde0:	e000      	b.n	800cde4 <tcp_input+0x7ec>
  return;
 800cde2:	bf00      	nop
}
 800cde4:	3724      	adds	r7, #36	; 0x24
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd90      	pop	{r4, r7, pc}
 800cdea:	bf00      	nop
 800cdec:	2000fe94 	.word	0x2000fe94
 800cdf0:	2000fe90 	.word	0x2000fe90
 800cdf4:	2000fe60 	.word	0x2000fe60
 800cdf8:	2000fe70 	.word	0x2000fe70
 800cdfc:	2000fe84 	.word	0x2000fe84
 800ce00:	2000fe8a 	.word	0x2000fe8a
 800ce04:	2000fe80 	.word	0x2000fe80
 800ce08:	20008d44 	.word	0x20008d44
 800ce0c:	20008d48 	.word	0x20008d48

0800ce10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <tcp_input_delayed_close+0x1c>
 800ce1e:	4b17      	ldr	r3, [pc, #92]	; (800ce7c <tcp_input_delayed_close+0x6c>)
 800ce20:	f240 225a 	movw	r2, #602	; 0x25a
 800ce24:	4916      	ldr	r1, [pc, #88]	; (800ce80 <tcp_input_delayed_close+0x70>)
 800ce26:	4817      	ldr	r0, [pc, #92]	; (800ce84 <tcp_input_delayed_close+0x74>)
 800ce28:	f007 fb2a 	bl	8014480 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ce2c:	4b16      	ldr	r3, [pc, #88]	; (800ce88 <tcp_input_delayed_close+0x78>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f003 0310 	and.w	r3, r3, #16
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d01c      	beq.n	800ce72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	8b5b      	ldrh	r3, [r3, #26]
 800ce3c:	f003 0310 	and.w	r3, r3, #16
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10d      	bne.n	800ce60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d008      	beq.n	800ce60 <tcp_input_delayed_close+0x50>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	6912      	ldr	r2, [r2, #16]
 800ce58:	f06f 010e 	mvn.w	r1, #14
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	480a      	ldr	r0, [pc, #40]	; (800ce8c <tcp_input_delayed_close+0x7c>)
 800ce64:	f7ff fa50 	bl	800c308 <tcp_pcb_remove>
    tcp_free(pcb);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7fd fdb5 	bl	800a9d8 <tcp_free>
    return 1;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	08017720 	.word	0x08017720
 800ce80:	080178f0 	.word	0x080178f0
 800ce84:	0801776c 	.word	0x0801776c
 800ce88:	2000fe8d 	.word	0x2000fe8d
 800ce8c:	2000fe54 	.word	0x2000fe54

0800ce90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b08b      	sub	sp, #44	; 0x2c
 800ce94:	af04      	add	r7, sp, #16
 800ce96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ce98:	4b6f      	ldr	r3, [pc, #444]	; (800d058 <tcp_listen_input+0x1c8>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 80d2 	bne.w	800d04a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <tcp_listen_input+0x2a>
 800ceac:	4b6b      	ldr	r3, [pc, #428]	; (800d05c <tcp_listen_input+0x1cc>)
 800ceae:	f240 2281 	movw	r2, #641	; 0x281
 800ceb2:	496b      	ldr	r1, [pc, #428]	; (800d060 <tcp_listen_input+0x1d0>)
 800ceb4:	486b      	ldr	r0, [pc, #428]	; (800d064 <tcp_listen_input+0x1d4>)
 800ceb6:	f007 fae3 	bl	8014480 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ceba:	4b67      	ldr	r3, [pc, #412]	; (800d058 <tcp_listen_input+0x1c8>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	f003 0310 	and.w	r3, r3, #16
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d019      	beq.n	800cefa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cec6:	4b68      	ldr	r3, [pc, #416]	; (800d068 <tcp_listen_input+0x1d8>)
 800cec8:	6819      	ldr	r1, [r3, #0]
 800ceca:	4b68      	ldr	r3, [pc, #416]	; (800d06c <tcp_listen_input+0x1dc>)
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	4b67      	ldr	r3, [pc, #412]	; (800d070 <tcp_listen_input+0x1e0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ced6:	4b67      	ldr	r3, [pc, #412]	; (800d074 <tcp_listen_input+0x1e4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceda:	885b      	ldrh	r3, [r3, #2]
 800cedc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cede:	4a65      	ldr	r2, [pc, #404]	; (800d074 <tcp_listen_input+0x1e4>)
 800cee0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cee2:	8812      	ldrh	r2, [r2, #0]
 800cee4:	b292      	uxth	r2, r2
 800cee6:	9202      	str	r2, [sp, #8]
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	4b63      	ldr	r3, [pc, #396]	; (800d078 <tcp_listen_input+0x1e8>)
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	4b63      	ldr	r3, [pc, #396]	; (800d07c <tcp_listen_input+0x1ec>)
 800cef0:	4602      	mov	r2, r0
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f003 fbd8 	bl	80106a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cef8:	e0a9      	b.n	800d04e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cefa:	4b57      	ldr	r3, [pc, #348]	; (800d058 <tcp_listen_input+0x1c8>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 80a3 	beq.w	800d04e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7d5b      	ldrb	r3, [r3, #21]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff f859 	bl	800bfc4 <tcp_alloc>
 800cf12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d111      	bne.n	800cf3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <tcp_listen_input+0xa8>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	6910      	ldr	r0, [r2, #16]
 800cf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2e:	2100      	movs	r1, #0
 800cf30:	4798      	blx	r3
 800cf32:	4603      	mov	r3, r0
 800cf34:	73bb      	strb	r3, [r7, #14]
      return;
 800cf36:	e08b      	b.n	800d050 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cf38:	23f0      	movs	r3, #240	; 0xf0
 800cf3a:	73bb      	strb	r3, [r7, #14]
      return;
 800cf3c:	e088      	b.n	800d050 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cf3e:	4b50      	ldr	r3, [pc, #320]	; (800d080 <tcp_listen_input+0x1f0>)
 800cf40:	695a      	ldr	r2, [r3, #20]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cf46:	4b4e      	ldr	r3, [pc, #312]	; (800d080 <tcp_listen_input+0x1f0>)
 800cf48:	691a      	ldr	r2, [r3, #16]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	8ada      	ldrh	r2, [r3, #22]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cf56:	4b47      	ldr	r3, [pc, #284]	; (800d074 <tcp_listen_input+0x1e4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2203      	movs	r2, #3
 800cf66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cf68:	4b41      	ldr	r3, [pc, #260]	; (800d070 <tcp_listen_input+0x1e0>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f7ff fa58 	bl	800c430 <tcp_next_iss>
 800cf80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cf9a:	4b35      	ldr	r3, [pc, #212]	; (800d070 <tcp_listen_input+0x1e0>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	1e5a      	subs	r2, r3, #1
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7a5b      	ldrb	r3, [r3, #9]
 800cfb6:	f003 030c 	and.w	r3, r3, #12
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7a1a      	ldrb	r2, [r3, #8]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cfc8:	4b2e      	ldr	r3, [pc, #184]	; (800d084 <tcp_listen_input+0x1f4>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	60da      	str	r2, [r3, #12]
 800cfd0:	4a2c      	ldr	r2, [pc, #176]	; (800d084 <tcp_listen_input+0x1f4>)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	f003 fd29 	bl	8010a2c <tcp_timer_needed>
 800cfda:	4b2b      	ldr	r3, [pc, #172]	; (800d088 <tcp_listen_input+0x1f8>)
 800cfdc:	2201      	movs	r2, #1
 800cfde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cfe0:	6978      	ldr	r0, [r7, #20]
 800cfe2:	f001 fd8f 	bl	800eb04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cfe6:	4b23      	ldr	r3, [pc, #140]	; (800d074 <tcp_listen_input+0x1e4>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	89db      	ldrh	r3, [r3, #14]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	3304      	adds	r3, #4
 800d008:	4618      	mov	r0, r3
 800d00a:	f005 fce3 	bl	80129d4 <ip4_route>
 800d00e:	4601      	mov	r1, r0
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	3304      	adds	r3, #4
 800d014:	461a      	mov	r2, r3
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff fa30 	bl	800c47c <tcp_eff_send_mss_netif>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d024:	2112      	movs	r1, #18
 800d026:	6978      	ldr	r0, [r7, #20]
 800d028:	f002 fc9c 	bl	800f964 <tcp_enqueue_flags>
 800d02c:	4603      	mov	r3, r0
 800d02e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d004      	beq.n	800d042 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d038:	2100      	movs	r1, #0
 800d03a:	6978      	ldr	r0, [r7, #20]
 800d03c:	f7fd ff52 	bl	800aee4 <tcp_abandon>
      return;
 800d040:	e006      	b.n	800d050 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d042:	6978      	ldr	r0, [r7, #20]
 800d044:	f002 fd7c 	bl	800fb40 <tcp_output>
  return;
 800d048:	e001      	b.n	800d04e <tcp_listen_input+0x1be>
    return;
 800d04a:	bf00      	nop
 800d04c:	e000      	b.n	800d050 <tcp_listen_input+0x1c0>
  return;
 800d04e:	bf00      	nop
}
 800d050:	371c      	adds	r7, #28
 800d052:	46bd      	mov	sp, r7
 800d054:	bd90      	pop	{r4, r7, pc}
 800d056:	bf00      	nop
 800d058:	2000fe8c 	.word	0x2000fe8c
 800d05c:	08017720 	.word	0x08017720
 800d060:	08017918 	.word	0x08017918
 800d064:	0801776c 	.word	0x0801776c
 800d068:	2000fe84 	.word	0x2000fe84
 800d06c:	2000fe8a 	.word	0x2000fe8a
 800d070:	2000fe80 	.word	0x2000fe80
 800d074:	2000fe70 	.word	0x2000fe70
 800d078:	20008d44 	.word	0x20008d44
 800d07c:	20008d48 	.word	0x20008d48
 800d080:	20008d34 	.word	0x20008d34
 800d084:	2000fe54 	.word	0x2000fe54
 800d088:	2000fe5c 	.word	0x2000fe5c

0800d08c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af04      	add	r7, sp, #16
 800d092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d094:	4b2f      	ldr	r3, [pc, #188]	; (800d154 <tcp_timewait_input+0xc8>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 0304 	and.w	r3, r3, #4
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d153      	bne.n	800d148 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d106      	bne.n	800d0b4 <tcp_timewait_input+0x28>
 800d0a6:	4b2c      	ldr	r3, [pc, #176]	; (800d158 <tcp_timewait_input+0xcc>)
 800d0a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d0ac:	492b      	ldr	r1, [pc, #172]	; (800d15c <tcp_timewait_input+0xd0>)
 800d0ae:	482c      	ldr	r0, [pc, #176]	; (800d160 <tcp_timewait_input+0xd4>)
 800d0b0:	f007 f9e6 	bl	8014480 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d0b4:	4b27      	ldr	r3, [pc, #156]	; (800d154 <tcp_timewait_input+0xc8>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d02a      	beq.n	800d116 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d0c0:	4b28      	ldr	r3, [pc, #160]	; (800d164 <tcp_timewait_input+0xd8>)
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	db2d      	blt.n	800d12a <tcp_timewait_input+0x9e>
 800d0ce:	4b25      	ldr	r3, [pc, #148]	; (800d164 <tcp_timewait_input+0xd8>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0da:	440b      	add	r3, r1
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dc23      	bgt.n	800d12a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0e2:	4b21      	ldr	r3, [pc, #132]	; (800d168 <tcp_timewait_input+0xdc>)
 800d0e4:	6819      	ldr	r1, [r3, #0]
 800d0e6:	4b21      	ldr	r3, [pc, #132]	; (800d16c <tcp_timewait_input+0xe0>)
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	4b1d      	ldr	r3, [pc, #116]	; (800d164 <tcp_timewait_input+0xd8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0f2:	4b1f      	ldr	r3, [pc, #124]	; (800d170 <tcp_timewait_input+0xe4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0f6:	885b      	ldrh	r3, [r3, #2]
 800d0f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0fa:	4a1d      	ldr	r2, [pc, #116]	; (800d170 <tcp_timewait_input+0xe4>)
 800d0fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0fe:	8812      	ldrh	r2, [r2, #0]
 800d100:	b292      	uxth	r2, r2
 800d102:	9202      	str	r2, [sp, #8]
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	4b1b      	ldr	r3, [pc, #108]	; (800d174 <tcp_timewait_input+0xe8>)
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	4b1b      	ldr	r3, [pc, #108]	; (800d178 <tcp_timewait_input+0xec>)
 800d10c:	4602      	mov	r2, r0
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f003 faca 	bl	80106a8 <tcp_rst>
      return;
 800d114:	e01b      	b.n	800d14e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d116:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <tcp_timewait_input+0xc8>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d122:	4b16      	ldr	r3, [pc, #88]	; (800d17c <tcp_timewait_input+0xf0>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <tcp_timewait_input+0xe0>)
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00c      	beq.n	800d14c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	8b5b      	ldrh	r3, [r3, #26]
 800d136:	f043 0302 	orr.w	r3, r3, #2
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f002 fcfd 	bl	800fb40 <tcp_output>
  }
  return;
 800d146:	e001      	b.n	800d14c <tcp_timewait_input+0xc0>
    return;
 800d148:	bf00      	nop
 800d14a:	e000      	b.n	800d14e <tcp_timewait_input+0xc2>
  return;
 800d14c:	bf00      	nop
}
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	2000fe8c 	.word	0x2000fe8c
 800d158:	08017720 	.word	0x08017720
 800d15c:	08017938 	.word	0x08017938
 800d160:	0801776c 	.word	0x0801776c
 800d164:	2000fe80 	.word	0x2000fe80
 800d168:	2000fe84 	.word	0x2000fe84
 800d16c:	2000fe8a 	.word	0x2000fe8a
 800d170:	2000fe70 	.word	0x2000fe70
 800d174:	20008d44 	.word	0x20008d44
 800d178:	20008d48 	.word	0x20008d48
 800d17c:	2000fe48 	.word	0x2000fe48

0800d180 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b08d      	sub	sp, #52	; 0x34
 800d184:	af04      	add	r7, sp, #16
 800d186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d106      	bne.n	800d1a4 <tcp_process+0x24>
 800d196:	4b9d      	ldr	r3, [pc, #628]	; (800d40c <tcp_process+0x28c>)
 800d198:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d19c:	499c      	ldr	r1, [pc, #624]	; (800d410 <tcp_process+0x290>)
 800d19e:	489d      	ldr	r0, [pc, #628]	; (800d414 <tcp_process+0x294>)
 800d1a0:	f007 f96e 	bl	8014480 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d1a4:	4b9c      	ldr	r3, [pc, #624]	; (800d418 <tcp_process+0x298>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d04e      	beq.n	800d24e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7d1b      	ldrb	r3, [r3, #20]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d108      	bne.n	800d1ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1bc:	4b97      	ldr	r3, [pc, #604]	; (800d41c <tcp_process+0x29c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d123      	bne.n	800d20c <tcp_process+0x8c>
        acceptable = 1;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	76fb      	strb	r3, [r7, #27]
 800d1c8:	e020      	b.n	800d20c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1ce:	4b94      	ldr	r3, [pc, #592]	; (800d420 <tcp_process+0x2a0>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d102      	bne.n	800d1dc <tcp_process+0x5c>
        acceptable = 1;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	76fb      	strb	r3, [r7, #27]
 800d1da:	e017      	b.n	800d20c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d1dc:	4b90      	ldr	r3, [pc, #576]	; (800d420 <tcp_process+0x2a0>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	db10      	blt.n	800d20c <tcp_process+0x8c>
 800d1ea:	4b8d      	ldr	r3, [pc, #564]	; (800d420 <tcp_process+0x2a0>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1f6:	440b      	add	r3, r1
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	dc06      	bgt.n	800d20c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8b5b      	ldrh	r3, [r3, #26]
 800d202:	f043 0302 	orr.w	r3, r3, #2
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d20c:	7efb      	ldrb	r3, [r7, #27]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d01b      	beq.n	800d24a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7d1b      	ldrb	r3, [r3, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <tcp_process+0xa8>
 800d21a:	4b7c      	ldr	r3, [pc, #496]	; (800d40c <tcp_process+0x28c>)
 800d21c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d220:	4980      	ldr	r1, [pc, #512]	; (800d424 <tcp_process+0x2a4>)
 800d222:	487c      	ldr	r0, [pc, #496]	; (800d414 <tcp_process+0x294>)
 800d224:	f007 f92c 	bl	8014480 <iprintf>
      recv_flags |= TF_RESET;
 800d228:	4b7f      	ldr	r3, [pc, #508]	; (800d428 <tcp_process+0x2a8>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	f043 0308 	orr.w	r3, r3, #8
 800d230:	b2da      	uxtb	r2, r3
 800d232:	4b7d      	ldr	r3, [pc, #500]	; (800d428 <tcp_process+0x2a8>)
 800d234:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8b5b      	ldrh	r3, [r3, #26]
 800d23a:	f023 0301 	bic.w	r3, r3, #1
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d244:	f06f 030d 	mvn.w	r3, #13
 800d248:	e37a      	b.n	800d940 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e378      	b.n	800d940 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d24e:	4b72      	ldr	r3, [pc, #456]	; (800d418 <tcp_process+0x298>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d010      	beq.n	800d27c <tcp_process+0xfc>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	7d1b      	ldrb	r3, [r3, #20]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d00c      	beq.n	800d27c <tcp_process+0xfc>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	7d1b      	ldrb	r3, [r3, #20]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d008      	beq.n	800d27c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8b5b      	ldrh	r3, [r3, #26]
 800d26e:	f043 0302 	orr.w	r3, r3, #2
 800d272:	b29a      	uxth	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	e361      	b.n	800d940 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	8b5b      	ldrh	r3, [r3, #26]
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	d103      	bne.n	800d290 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d288:	4b68      	ldr	r3, [pc, #416]	; (800d42c <tcp_process+0x2ac>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f001 fc2f 	bl	800eb04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7d1b      	ldrb	r3, [r3, #20]
 800d2aa:	3b02      	subs	r3, #2
 800d2ac:	2b07      	cmp	r3, #7
 800d2ae:	f200 8337 	bhi.w	800d920 <tcp_process+0x7a0>
 800d2b2:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <tcp_process+0x138>)
 800d2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b8:	0800d2d9 	.word	0x0800d2d9
 800d2bc:	0800d509 	.word	0x0800d509
 800d2c0:	0800d681 	.word	0x0800d681
 800d2c4:	0800d6ab 	.word	0x0800d6ab
 800d2c8:	0800d7cf 	.word	0x0800d7cf
 800d2cc:	0800d681 	.word	0x0800d681
 800d2d0:	0800d85b 	.word	0x0800d85b
 800d2d4:	0800d8eb 	.word	0x0800d8eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d2d8:	4b4f      	ldr	r3, [pc, #316]	; (800d418 <tcp_process+0x298>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f003 0310 	and.w	r3, r3, #16
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 80e4 	beq.w	800d4ae <tcp_process+0x32e>
 800d2e6:	4b4c      	ldr	r3, [pc, #304]	; (800d418 <tcp_process+0x298>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f003 0302 	and.w	r3, r3, #2
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80dd 	beq.w	800d4ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	4b48      	ldr	r3, [pc, #288]	; (800d41c <tcp_process+0x29c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	f040 80d5 	bne.w	800d4ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d304:	4b46      	ldr	r3, [pc, #280]	; (800d420 <tcp_process+0x2a0>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d316:	4b41      	ldr	r3, [pc, #260]	; (800d41c <tcp_process+0x29c>)
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d31e:	4b44      	ldr	r3, [pc, #272]	; (800d430 <tcp_process+0x2b0>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	89db      	ldrh	r3, [r3, #14]
 800d324:	b29a      	uxth	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d338:	4b39      	ldr	r3, [pc, #228]	; (800d420 <tcp_process+0x2a0>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	1e5a      	subs	r2, r3, #1
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2204      	movs	r2, #4
 800d346:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3304      	adds	r3, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f005 fb3f 	bl	80129d4 <ip4_route>
 800d356:	4601      	mov	r1, r0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3304      	adds	r3, #4
 800d35c:	461a      	mov	r2, r3
 800d35e:	4620      	mov	r0, r4
 800d360:	f7ff f88c 	bl	800c47c <tcp_eff_send_mss_netif>
 800d364:	4603      	mov	r3, r0
 800d366:	461a      	mov	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d370:	009a      	lsls	r2, r3, #2
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	f241 111c 	movw	r1, #4380	; 0x111c
 800d37c:	428b      	cmp	r3, r1
 800d37e:	bf38      	it	cc
 800d380:	460b      	movcc	r3, r1
 800d382:	429a      	cmp	r2, r3
 800d384:	d204      	bcs.n	800d390 <tcp_process+0x210>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	e00d      	b.n	800d3ac <tcp_process+0x22c>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d394:	005b      	lsls	r3, r3, #1
 800d396:	f241 121c 	movw	r2, #4380	; 0x111c
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d904      	bls.n	800d3a8 <tcp_process+0x228>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	e001      	b.n	800d3ac <tcp_process+0x22c>
 800d3a8:	f241 131c 	movw	r3, #4380	; 0x111c
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <tcp_process+0x24a>
 800d3bc:	4b13      	ldr	r3, [pc, #76]	; (800d40c <tcp_process+0x28c>)
 800d3be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d3c2:	491c      	ldr	r1, [pc, #112]	; (800d434 <tcp_process+0x2b4>)
 800d3c4:	4813      	ldr	r0, [pc, #76]	; (800d414 <tcp_process+0x294>)
 800d3c6:	f007 f85b 	bl	8014480 <iprintf>
        --pcb->snd_queuelen;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d12a      	bne.n	800d43c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <tcp_process+0x280>
 800d3f2:	4b06      	ldr	r3, [pc, #24]	; (800d40c <tcp_process+0x28c>)
 800d3f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d3f8:	490f      	ldr	r1, [pc, #60]	; (800d438 <tcp_process+0x2b8>)
 800d3fa:	4806      	ldr	r0, [pc, #24]	; (800d414 <tcp_process+0x294>)
 800d3fc:	f007 f840 	bl	8014480 <iprintf>
          pcb->unsent = rseg->next;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	66da      	str	r2, [r3, #108]	; 0x6c
 800d408:	e01c      	b.n	800d444 <tcp_process+0x2c4>
 800d40a:	bf00      	nop
 800d40c:	08017720 	.word	0x08017720
 800d410:	08017958 	.word	0x08017958
 800d414:	0801776c 	.word	0x0801776c
 800d418:	2000fe8c 	.word	0x2000fe8c
 800d41c:	2000fe84 	.word	0x2000fe84
 800d420:	2000fe80 	.word	0x2000fe80
 800d424:	08017974 	.word	0x08017974
 800d428:	2000fe8d 	.word	0x2000fe8d
 800d42c:	2000fe48 	.word	0x2000fe48
 800d430:	2000fe70 	.word	0x2000fe70
 800d434:	08017994 	.word	0x08017994
 800d438:	080179ac 	.word	0x080179ac
        } else {
          pcb->unacked = rseg->next;
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d444:	69f8      	ldr	r0, [r7, #28]
 800d446:	f7fe fc54 	bl	800bcf2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d104      	bne.n	800d45c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d458:	861a      	strh	r2, [r3, #48]	; 0x30
 800d45a:	e006      	b.n	800d46a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00a      	beq.n	800d48a <tcp_process+0x30a>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6910      	ldr	r0, [r2, #16]
 800d47e:	2200      	movs	r2, #0
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4798      	blx	r3
 800d484:	4603      	mov	r3, r0
 800d486:	76bb      	strb	r3, [r7, #26]
 800d488:	e001      	b.n	800d48e <tcp_process+0x30e>
 800d48a:	2300      	movs	r3, #0
 800d48c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d48e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d492:	f113 0f0d 	cmn.w	r3, #13
 800d496:	d102      	bne.n	800d49e <tcp_process+0x31e>
          return ERR_ABRT;
 800d498:	f06f 030c 	mvn.w	r3, #12
 800d49c:	e250      	b.n	800d940 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	8b5b      	ldrh	r3, [r3, #26]
 800d4a2:	f043 0302 	orr.w	r3, r3, #2
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d4ac:	e23a      	b.n	800d924 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d4ae:	4b98      	ldr	r3, [pc, #608]	; (800d710 <tcp_process+0x590>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	f003 0310 	and.w	r3, r3, #16
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 8234 	beq.w	800d924 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4bc:	4b95      	ldr	r3, [pc, #596]	; (800d714 <tcp_process+0x594>)
 800d4be:	6819      	ldr	r1, [r3, #0]
 800d4c0:	4b95      	ldr	r3, [pc, #596]	; (800d718 <tcp_process+0x598>)
 800d4c2:	881b      	ldrh	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b95      	ldr	r3, [pc, #596]	; (800d71c <tcp_process+0x59c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4cc:	4b94      	ldr	r3, [pc, #592]	; (800d720 <tcp_process+0x5a0>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4d0:	885b      	ldrh	r3, [r3, #2]
 800d4d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4d4:	4a92      	ldr	r2, [pc, #584]	; (800d720 <tcp_process+0x5a0>)
 800d4d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4d8:	8812      	ldrh	r2, [r2, #0]
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	9202      	str	r2, [sp, #8]
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	4b90      	ldr	r3, [pc, #576]	; (800d724 <tcp_process+0x5a4>)
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	4b90      	ldr	r3, [pc, #576]	; (800d728 <tcp_process+0x5a8>)
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f003 f8dd 	bl	80106a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4f4:	2b05      	cmp	r3, #5
 800d4f6:	f200 8215 	bhi.w	800d924 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f002 fea7 	bl	8010254 <tcp_rexmit_rto>
      break;
 800d506:	e20d      	b.n	800d924 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d508:	4b81      	ldr	r3, [pc, #516]	; (800d710 <tcp_process+0x590>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f003 0310 	and.w	r3, r3, #16
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 80a1 	beq.w	800d658 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d516:	4b7f      	ldr	r3, [pc, #508]	; (800d714 <tcp_process+0x594>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	3b01      	subs	r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	db7e      	blt.n	800d624 <tcp_process+0x4a4>
 800d526:	4b7b      	ldr	r3, [pc, #492]	; (800d714 <tcp_process+0x594>)
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	dc77      	bgt.n	800d624 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2204      	movs	r2, #4
 800d538:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d102      	bne.n	800d548 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d542:	23fa      	movs	r3, #250	; 0xfa
 800d544:	76bb      	strb	r3, [r7, #26]
 800d546:	e01d      	b.n	800d584 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <tcp_process+0x3e0>
 800d552:	4b76      	ldr	r3, [pc, #472]	; (800d72c <tcp_process+0x5ac>)
 800d554:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d558:	4975      	ldr	r1, [pc, #468]	; (800d730 <tcp_process+0x5b0>)
 800d55a:	4876      	ldr	r0, [pc, #472]	; (800d734 <tcp_process+0x5b4>)
 800d55c:	f006 ff90 	bl	8014480 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <tcp_process+0x400>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6910      	ldr	r0, [r2, #16]
 800d574:	2200      	movs	r2, #0
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4798      	blx	r3
 800d57a:	4603      	mov	r3, r0
 800d57c:	76bb      	strb	r3, [r7, #26]
 800d57e:	e001      	b.n	800d584 <tcp_process+0x404>
 800d580:	23f0      	movs	r3, #240	; 0xf0
 800d582:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d584:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d58c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d590:	f113 0f0d 	cmn.w	r3, #13
 800d594:	d002      	beq.n	800d59c <tcp_process+0x41c>
              tcp_abort(pcb);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7fd fd62 	bl	800b060 <tcp_abort>
            }
            return ERR_ABRT;
 800d59c:	f06f 030c 	mvn.w	r3, #12
 800d5a0:	e1ce      	b.n	800d940 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fae0 	bl	800db68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d5a8:	4b63      	ldr	r3, [pc, #396]	; (800d738 <tcp_process+0x5b8>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <tcp_process+0x43c>
            recv_acked--;
 800d5b0:	4b61      	ldr	r3, [pc, #388]	; (800d738 <tcp_process+0x5b8>)
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	4b5f      	ldr	r3, [pc, #380]	; (800d738 <tcp_process+0x5b8>)
 800d5ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5c0:	009a      	lsls	r2, r3, #2
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	f241 111c 	movw	r1, #4380	; 0x111c
 800d5cc:	428b      	cmp	r3, r1
 800d5ce:	bf38      	it	cc
 800d5d0:	460b      	movcc	r3, r1
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d204      	bcs.n	800d5e0 <tcp_process+0x460>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	e00d      	b.n	800d5fc <tcp_process+0x47c>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	f241 121c 	movw	r2, #4380	; 0x111c
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d904      	bls.n	800d5f8 <tcp_process+0x478>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	e001      	b.n	800d5fc <tcp_process+0x47c>
 800d5f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d602:	4b4e      	ldr	r3, [pc, #312]	; (800d73c <tcp_process+0x5bc>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d037      	beq.n	800d67e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	8b5b      	ldrh	r3, [r3, #26]
 800d612:	f043 0302 	orr.w	r3, r3, #2
 800d616:	b29a      	uxth	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2207      	movs	r2, #7
 800d620:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d622:	e02c      	b.n	800d67e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d624:	4b3b      	ldr	r3, [pc, #236]	; (800d714 <tcp_process+0x594>)
 800d626:	6819      	ldr	r1, [r3, #0]
 800d628:	4b3b      	ldr	r3, [pc, #236]	; (800d718 <tcp_process+0x598>)
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	4b3b      	ldr	r3, [pc, #236]	; (800d71c <tcp_process+0x59c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d634:	4b3a      	ldr	r3, [pc, #232]	; (800d720 <tcp_process+0x5a0>)
 800d636:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d638:	885b      	ldrh	r3, [r3, #2]
 800d63a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d63c:	4a38      	ldr	r2, [pc, #224]	; (800d720 <tcp_process+0x5a0>)
 800d63e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d640:	8812      	ldrh	r2, [r2, #0]
 800d642:	b292      	uxth	r2, r2
 800d644:	9202      	str	r2, [sp, #8]
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	4b36      	ldr	r3, [pc, #216]	; (800d724 <tcp_process+0x5a4>)
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	4b36      	ldr	r3, [pc, #216]	; (800d728 <tcp_process+0x5a8>)
 800d64e:	4602      	mov	r2, r0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f003 f829 	bl	80106a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d656:	e167      	b.n	800d928 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d658:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <tcp_process+0x590>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	f003 0302 	and.w	r3, r3, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 8161 	beq.w	800d928 <tcp_process+0x7a8>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66a:	1e5a      	subs	r2, r3, #1
 800d66c:	4b2b      	ldr	r3, [pc, #172]	; (800d71c <tcp_process+0x59c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	f040 8159 	bne.w	800d928 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f002 fe0e 	bl	8010298 <tcp_rexmit>
      break;
 800d67c:	e154      	b.n	800d928 <tcp_process+0x7a8>
 800d67e:	e153      	b.n	800d928 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fa71 	bl	800db68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d686:	4b2d      	ldr	r3, [pc, #180]	; (800d73c <tcp_process+0x5bc>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	f003 0320 	and.w	r3, r3, #32
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 814c 	beq.w	800d92c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	8b5b      	ldrh	r3, [r3, #26]
 800d698:	f043 0302 	orr.w	r3, r3, #2
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2207      	movs	r2, #7
 800d6a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6a8:	e140      	b.n	800d92c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fa5c 	bl	800db68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d6b0:	4b22      	ldr	r3, [pc, #136]	; (800d73c <tcp_process+0x5bc>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d071      	beq.n	800d7a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d6bc:	4b14      	ldr	r3, [pc, #80]	; (800d710 <tcp_process+0x590>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	f003 0310 	and.w	r3, r3, #16
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d060      	beq.n	800d78a <tcp_process+0x60a>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6cc:	4b11      	ldr	r3, [pc, #68]	; (800d714 <tcp_process+0x594>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d15a      	bne.n	800d78a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d156      	bne.n	800d78a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8b5b      	ldrh	r3, [r3, #26]
 800d6e0:	f043 0302 	orr.w	r3, r3, #2
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7fe fdbc 	bl	800c268 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d6f0:	4b13      	ldr	r3, [pc, #76]	; (800d740 <tcp_process+0x5c0>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d105      	bne.n	800d706 <tcp_process+0x586>
 800d6fa:	4b11      	ldr	r3, [pc, #68]	; (800d740 <tcp_process+0x5c0>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	4a0f      	ldr	r2, [pc, #60]	; (800d740 <tcp_process+0x5c0>)
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	e02e      	b.n	800d764 <tcp_process+0x5e4>
 800d706:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <tcp_process+0x5c0>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	e027      	b.n	800d75e <tcp_process+0x5de>
 800d70e:	bf00      	nop
 800d710:	2000fe8c 	.word	0x2000fe8c
 800d714:	2000fe84 	.word	0x2000fe84
 800d718:	2000fe8a 	.word	0x2000fe8a
 800d71c:	2000fe80 	.word	0x2000fe80
 800d720:	2000fe70 	.word	0x2000fe70
 800d724:	20008d44 	.word	0x20008d44
 800d728:	20008d48 	.word	0x20008d48
 800d72c:	08017720 	.word	0x08017720
 800d730:	080179c0 	.word	0x080179c0
 800d734:	0801776c 	.word	0x0801776c
 800d738:	2000fe88 	.word	0x2000fe88
 800d73c:	2000fe8d 	.word	0x2000fe8d
 800d740:	2000fe54 	.word	0x2000fe54
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d104      	bne.n	800d758 <tcp_process+0x5d8>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68da      	ldr	r2, [r3, #12]
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	60da      	str	r2, [r3, #12]
 800d756:	e005      	b.n	800d764 <tcp_process+0x5e4>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1ef      	bne.n	800d744 <tcp_process+0x5c4>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	60da      	str	r2, [r3, #12]
 800d76a:	4b77      	ldr	r3, [pc, #476]	; (800d948 <tcp_process+0x7c8>)
 800d76c:	2201      	movs	r2, #1
 800d76e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	220a      	movs	r2, #10
 800d774:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d776:	4b75      	ldr	r3, [pc, #468]	; (800d94c <tcp_process+0x7cc>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	4a73      	ldr	r2, [pc, #460]	; (800d94c <tcp_process+0x7cc>)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	f003 f952 	bl	8010a2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d788:	e0d2      	b.n	800d930 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	8b5b      	ldrh	r3, [r3, #26]
 800d78e:	f043 0302 	orr.w	r3, r3, #2
 800d792:	b29a      	uxth	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2208      	movs	r2, #8
 800d79c:	751a      	strb	r2, [r3, #20]
      break;
 800d79e:	e0c7      	b.n	800d930 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7a0:	4b6b      	ldr	r3, [pc, #428]	; (800d950 <tcp_process+0x7d0>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 80c1 	beq.w	800d930 <tcp_process+0x7b0>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7b2:	4b68      	ldr	r3, [pc, #416]	; (800d954 <tcp_process+0x7d4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	f040 80ba 	bne.w	800d930 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f040 80b5 	bne.w	800d930 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2206      	movs	r2, #6
 800d7ca:	751a      	strb	r2, [r3, #20]
      break;
 800d7cc:	e0b0      	b.n	800d930 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f9ca 	bl	800db68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d7d4:	4b60      	ldr	r3, [pc, #384]	; (800d958 <tcp_process+0x7d8>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 80a9 	beq.w	800d934 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	8b5b      	ldrh	r3, [r3, #26]
 800d7e6:	f043 0302 	orr.w	r3, r3, #2
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7fe fd39 	bl	800c268 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d7f6:	4b59      	ldr	r3, [pc, #356]	; (800d95c <tcp_process+0x7dc>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d105      	bne.n	800d80c <tcp_process+0x68c>
 800d800:	4b56      	ldr	r3, [pc, #344]	; (800d95c <tcp_process+0x7dc>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	4a55      	ldr	r2, [pc, #340]	; (800d95c <tcp_process+0x7dc>)
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	e013      	b.n	800d834 <tcp_process+0x6b4>
 800d80c:	4b53      	ldr	r3, [pc, #332]	; (800d95c <tcp_process+0x7dc>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	613b      	str	r3, [r7, #16]
 800d812:	e00c      	b.n	800d82e <tcp_process+0x6ae>
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d104      	bne.n	800d828 <tcp_process+0x6a8>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68da      	ldr	r2, [r3, #12]
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	60da      	str	r2, [r3, #12]
 800d826:	e005      	b.n	800d834 <tcp_process+0x6b4>
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	613b      	str	r3, [r7, #16]
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1ef      	bne.n	800d814 <tcp_process+0x694>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	60da      	str	r2, [r3, #12]
 800d83a:	4b43      	ldr	r3, [pc, #268]	; (800d948 <tcp_process+0x7c8>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	220a      	movs	r2, #10
 800d844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d846:	4b41      	ldr	r3, [pc, #260]	; (800d94c <tcp_process+0x7cc>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	60da      	str	r2, [r3, #12]
 800d84e:	4a3f      	ldr	r2, [pc, #252]	; (800d94c <tcp_process+0x7cc>)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	f003 f8ea 	bl	8010a2c <tcp_timer_needed>
      }
      break;
 800d858:	e06c      	b.n	800d934 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f984 	bl	800db68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d860:	4b3b      	ldr	r3, [pc, #236]	; (800d950 <tcp_process+0x7d0>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	f003 0310 	and.w	r3, r3, #16
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d065      	beq.n	800d938 <tcp_process+0x7b8>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d870:	4b38      	ldr	r3, [pc, #224]	; (800d954 <tcp_process+0x7d4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d15f      	bne.n	800d938 <tcp_process+0x7b8>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d15b      	bne.n	800d938 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7fe fcf1 	bl	800c268 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d886:	4b35      	ldr	r3, [pc, #212]	; (800d95c <tcp_process+0x7dc>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d105      	bne.n	800d89c <tcp_process+0x71c>
 800d890:	4b32      	ldr	r3, [pc, #200]	; (800d95c <tcp_process+0x7dc>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	4a31      	ldr	r2, [pc, #196]	; (800d95c <tcp_process+0x7dc>)
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	e013      	b.n	800d8c4 <tcp_process+0x744>
 800d89c:	4b2f      	ldr	r3, [pc, #188]	; (800d95c <tcp_process+0x7dc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	e00c      	b.n	800d8be <tcp_process+0x73e>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d104      	bne.n	800d8b8 <tcp_process+0x738>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	60da      	str	r2, [r3, #12]
 800d8b6:	e005      	b.n	800d8c4 <tcp_process+0x744>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1ef      	bne.n	800d8a4 <tcp_process+0x724>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	60da      	str	r2, [r3, #12]
 800d8ca:	4b1f      	ldr	r3, [pc, #124]	; (800d948 <tcp_process+0x7c8>)
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	220a      	movs	r2, #10
 800d8d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d8d6:	4b1d      	ldr	r3, [pc, #116]	; (800d94c <tcp_process+0x7cc>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	60da      	str	r2, [r3, #12]
 800d8de:	4a1b      	ldr	r2, [pc, #108]	; (800d94c <tcp_process+0x7cc>)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	f003 f8a2 	bl	8010a2c <tcp_timer_needed>
      }
      break;
 800d8e8:	e026      	b.n	800d938 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f93c 	bl	800db68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d8f0:	4b17      	ldr	r3, [pc, #92]	; (800d950 <tcp_process+0x7d0>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	f003 0310 	and.w	r3, r3, #16
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01f      	beq.n	800d93c <tcp_process+0x7bc>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d900:	4b14      	ldr	r3, [pc, #80]	; (800d954 <tcp_process+0x7d4>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	429a      	cmp	r2, r3
 800d906:	d119      	bne.n	800d93c <tcp_process+0x7bc>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d115      	bne.n	800d93c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d910:	4b11      	ldr	r3, [pc, #68]	; (800d958 <tcp_process+0x7d8>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f043 0310 	orr.w	r3, r3, #16
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <tcp_process+0x7d8>)
 800d91c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d91e:	e00d      	b.n	800d93c <tcp_process+0x7bc>
    default:
      break;
 800d920:	bf00      	nop
 800d922:	e00c      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d924:	bf00      	nop
 800d926:	e00a      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d928:	bf00      	nop
 800d92a:	e008      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d92c:	bf00      	nop
 800d92e:	e006      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d930:	bf00      	nop
 800d932:	e004      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d934:	bf00      	nop
 800d936:	e002      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d938:	bf00      	nop
 800d93a:	e000      	b.n	800d93e <tcp_process+0x7be>
      break;
 800d93c:	bf00      	nop
  }
  return ERR_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3724      	adds	r7, #36	; 0x24
 800d944:	46bd      	mov	sp, r7
 800d946:	bd90      	pop	{r4, r7, pc}
 800d948:	2000fe5c 	.word	0x2000fe5c
 800d94c:	2000fe58 	.word	0x2000fe58
 800d950:	2000fe8c 	.word	0x2000fe8c
 800d954:	2000fe84 	.word	0x2000fe84
 800d958:	2000fe8d 	.word	0x2000fe8d
 800d95c:	2000fe54 	.word	0x2000fe54

0800d960 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d106      	bne.n	800d97e <tcp_oos_insert_segment+0x1e>
 800d970:	4b3b      	ldr	r3, [pc, #236]	; (800da60 <tcp_oos_insert_segment+0x100>)
 800d972:	f240 421f 	movw	r2, #1055	; 0x41f
 800d976:	493b      	ldr	r1, [pc, #236]	; (800da64 <tcp_oos_insert_segment+0x104>)
 800d978:	483b      	ldr	r0, [pc, #236]	; (800da68 <tcp_oos_insert_segment+0x108>)
 800d97a:	f006 fd81 	bl	8014480 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	899b      	ldrh	r3, [r3, #12]
 800d984:	b29b      	uxth	r3, r3
 800d986:	4618      	mov	r0, r3
 800d988:	f7fb f9dc 	bl	8008d44 <lwip_htons>
 800d98c:	4603      	mov	r3, r0
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d028      	beq.n	800d9ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d998:	6838      	ldr	r0, [r7, #0]
 800d99a:	f7fe f995 	bl	800bcc8 <tcp_segs_free>
    next = NULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	603b      	str	r3, [r7, #0]
 800d9a2:	e056      	b.n	800da52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	899b      	ldrh	r3, [r3, #12]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fb f9c9 	bl	8008d44 <lwip_htons>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00d      	beq.n	800d9da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	899b      	ldrh	r3, [r3, #12]
 800d9c4:	b29c      	uxth	r4, r3
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	f7fb f9bc 	bl	8008d44 <lwip_htons>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	4322      	orrs	r2, r4
 800d9d6:	b292      	uxth	r2, r2
 800d9d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7fe f984 	bl	800bcf2 <tcp_seg_free>
    while (next &&
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00e      	beq.n	800da0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	891b      	ldrh	r3, [r3, #8]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <tcp_oos_insert_segment+0x10c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	441a      	add	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	8909      	ldrh	r1, [r1, #8]
 800da06:	440b      	add	r3, r1
 800da08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	daca      	bge.n	800d9a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01e      	beq.n	800da52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	891b      	ldrh	r3, [r3, #8]
 800da18:	461a      	mov	r2, r3
 800da1a:	4b14      	ldr	r3, [pc, #80]	; (800da6c <tcp_oos_insert_segment+0x10c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	441a      	add	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800da28:	2b00      	cmp	r3, #0
 800da2a:	dd12      	ble.n	800da52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	b29a      	uxth	r2, r3
 800da34:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <tcp_oos_insert_segment+0x10c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	891b      	ldrh	r3, [r3, #8]
 800da4a:	4619      	mov	r1, r3
 800da4c:	4610      	mov	r0, r2
 800da4e:	f7fc fb81 	bl	800a154 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	601a      	str	r2, [r3, #0]
}
 800da58:	bf00      	nop
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}
 800da60:	08017720 	.word	0x08017720
 800da64:	080179e0 	.word	0x080179e0
 800da68:	0801776c 	.word	0x0801776c
 800da6c:	2000fe80 	.word	0x2000fe80

0800da70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800da70:	b5b0      	push	{r4, r5, r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800da7e:	e03e      	b.n	800dafe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fc fd74 	bl	800a57c <pbuf_clen>
 800da94:	4603      	mov	r3, r0
 800da96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da9e:	8a7a      	ldrh	r2, [r7, #18]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d906      	bls.n	800dab2 <tcp_free_acked_segments+0x42>
 800daa4:	4b2a      	ldr	r3, [pc, #168]	; (800db50 <tcp_free_acked_segments+0xe0>)
 800daa6:	f240 4257 	movw	r2, #1111	; 0x457
 800daaa:	492a      	ldr	r1, [pc, #168]	; (800db54 <tcp_free_acked_segments+0xe4>)
 800daac:	482a      	ldr	r0, [pc, #168]	; (800db58 <tcp_free_acked_segments+0xe8>)
 800daae:	f006 fce7 	bl	8014480 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dab8:	8a7b      	ldrh	r3, [r7, #18]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	891a      	ldrh	r2, [r3, #8]
 800dac8:	4b24      	ldr	r3, [pc, #144]	; (800db5c <tcp_free_acked_segments+0xec>)
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	4413      	add	r3, r2
 800dace:	b29a      	uxth	r2, r3
 800dad0:	4b22      	ldr	r3, [pc, #136]	; (800db5c <tcp_free_acked_segments+0xec>)
 800dad2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dad4:	6978      	ldr	r0, [r7, #20]
 800dad6:	f7fe f90c 	bl	800bcf2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00c      	beq.n	800dafe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d109      	bne.n	800dafe <tcp_free_acked_segments+0x8e>
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <tcp_free_acked_segments+0x8e>
 800daf0:	4b17      	ldr	r3, [pc, #92]	; (800db50 <tcp_free_acked_segments+0xe0>)
 800daf2:	f240 4261 	movw	r2, #1121	; 0x461
 800daf6:	491a      	ldr	r1, [pc, #104]	; (800db60 <tcp_free_acked_segments+0xf0>)
 800daf8:	4817      	ldr	r0, [pc, #92]	; (800db58 <tcp_free_acked_segments+0xe8>)
 800dafa:	f006 fcc1 	bl	8014480 <iprintf>
  while (seg_list != NULL &&
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d020      	beq.n	800db46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fb f92f 	bl	8008d6e <lwip_htonl>
 800db10:	4604      	mov	r4, r0
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	891b      	ldrh	r3, [r3, #8]
 800db16:	461d      	mov	r5, r3
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	899b      	ldrh	r3, [r3, #12]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	4618      	mov	r0, r3
 800db22:	f7fb f90f 	bl	8008d44 <lwip_htons>
 800db26:	4603      	mov	r3, r0
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 0303 	and.w	r3, r3, #3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <tcp_free_acked_segments+0xc6>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <tcp_free_acked_segments+0xc8>
 800db36:	2300      	movs	r3, #0
 800db38:	442b      	add	r3, r5
 800db3a:	18e2      	adds	r2, r4, r3
 800db3c:	4b09      	ldr	r3, [pc, #36]	; (800db64 <tcp_free_acked_segments+0xf4>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800db42:	2b00      	cmp	r3, #0
 800db44:	dd9c      	ble.n	800da80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800db46:	68bb      	ldr	r3, [r7, #8]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bdb0      	pop	{r4, r5, r7, pc}
 800db50:	08017720 	.word	0x08017720
 800db54:	08017a08 	.word	0x08017a08
 800db58:	0801776c 	.word	0x0801776c
 800db5c:	2000fe88 	.word	0x2000fe88
 800db60:	08017a30 	.word	0x08017a30
 800db64:	2000fe84 	.word	0x2000fe84

0800db68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800db68:	b5b0      	push	{r4, r5, r7, lr}
 800db6a:	b094      	sub	sp, #80	; 0x50
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_receive+0x20>
 800db7a:	4b91      	ldr	r3, [pc, #580]	; (800ddc0 <tcp_receive+0x258>)
 800db7c:	f240 427b 	movw	r2, #1147	; 0x47b
 800db80:	4990      	ldr	r1, [pc, #576]	; (800ddc4 <tcp_receive+0x25c>)
 800db82:	4891      	ldr	r0, [pc, #580]	; (800ddc8 <tcp_receive+0x260>)
 800db84:	f006 fc7c 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7d1b      	ldrb	r3, [r3, #20]
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	d806      	bhi.n	800db9e <tcp_receive+0x36>
 800db90:	4b8b      	ldr	r3, [pc, #556]	; (800ddc0 <tcp_receive+0x258>)
 800db92:	f240 427c 	movw	r2, #1148	; 0x47c
 800db96:	498d      	ldr	r1, [pc, #564]	; (800ddcc <tcp_receive+0x264>)
 800db98:	488b      	ldr	r0, [pc, #556]	; (800ddc8 <tcp_receive+0x260>)
 800db9a:	f006 fc71 	bl	8014480 <iprintf>

  if (flags & TCP_ACK) {
 800db9e:	4b8c      	ldr	r3, [pc, #560]	; (800ddd0 <tcp_receive+0x268>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f000 8264 	beq.w	800e074 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb8:	4413      	add	r3, r2
 800dbba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbc0:	4b84      	ldr	r3, [pc, #528]	; (800ddd4 <tcp_receive+0x26c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	db1b      	blt.n	800dc02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbce:	4b81      	ldr	r3, [pc, #516]	; (800ddd4 <tcp_receive+0x26c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d106      	bne.n	800dbe4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dbda:	4b7f      	ldr	r3, [pc, #508]	; (800ddd8 <tcp_receive+0x270>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	db0e      	blt.n	800dc02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dbe8:	4b7b      	ldr	r3, [pc, #492]	; (800ddd8 <tcp_receive+0x270>)
 800dbea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d125      	bne.n	800dc3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dbf0:	4b7a      	ldr	r3, [pc, #488]	; (800dddc <tcp_receive+0x274>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	89db      	ldrh	r3, [r3, #14]
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d91c      	bls.n	800dc3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800dc02:	4b76      	ldr	r3, [pc, #472]	; (800dddc <tcp_receive+0x274>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	89db      	ldrh	r3, [r3, #14]
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d205      	bcs.n	800dc2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dc2c:	4b69      	ldr	r3, [pc, #420]	; (800ddd4 <tcp_receive+0x26c>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dc34:	4b68      	ldr	r3, [pc, #416]	; (800ddd8 <tcp_receive+0x270>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dc3c:	4b66      	ldr	r3, [pc, #408]	; (800ddd8 <tcp_receive+0x270>)
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc58      	bgt.n	800dcfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dc4a:	4b65      	ldr	r3, [pc, #404]	; (800dde0 <tcp_receive+0x278>)
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d14b      	bne.n	800dcea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dc5c:	4413      	add	r3, r2
 800dc5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d142      	bne.n	800dcea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	db3d      	blt.n	800dcea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc72:	4b59      	ldr	r3, [pc, #356]	; (800ddd8 <tcp_receive+0x270>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d137      	bne.n	800dcea <tcp_receive+0x182>
              found_dupack = 1;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc84:	2bff      	cmp	r3, #255	; 0xff
 800dc86:	d007      	beq.n	800dc98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc8e:	3301      	adds	r3, #1
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d91b      	bls.n	800dcda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcac:	4413      	add	r3, r2
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d30a      	bcc.n	800dcd0 <tcp_receive+0x168>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcc4:	4413      	add	r3, r2
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dcce:	e004      	b.n	800dcda <tcp_receive+0x172>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d902      	bls.n	800dcea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f002 fb43 	bl	8010370 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f040 8161 	bne.w	800dfb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcfa:	e15b      	b.n	800dfb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dcfc:	4b36      	ldr	r3, [pc, #216]	; (800ddd8 <tcp_receive+0x270>)
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	3b01      	subs	r3, #1
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f2c0 814e 	blt.w	800dfaa <tcp_receive+0x442>
 800dd0e:	4b32      	ldr	r3, [pc, #200]	; (800ddd8 <tcp_receive+0x270>)
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f300 8146 	bgt.w	800dfaa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8b5b      	ldrh	r3, [r3, #26]
 800dd22:	f003 0304 	and.w	r3, r3, #4
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d010      	beq.n	800dd4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8b5b      	ldrh	r3, [r3, #26]
 800dd2e:	f023 0304 	bic.w	r3, r3, #4
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd5a:	10db      	asrs	r3, r3, #3
 800dd5c:	b21b      	sxth	r3, r3
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	4413      	add	r3, r2
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	b21a      	sxth	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dd74:	4b18      	ldr	r3, [pc, #96]	; (800ddd8 <tcp_receive+0x270>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dd8c:	4b12      	ldr	r3, [pc, #72]	; (800ddd8 <tcp_receive+0x270>)
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	f240 8097 	bls.w	800decc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d245      	bcs.n	800de3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8b5b      	ldrh	r3, [r3, #26]
 800ddb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d014      	beq.n	800dde4 <tcp_receive+0x27c>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e013      	b.n	800dde6 <tcp_receive+0x27e>
 800ddbe:	bf00      	nop
 800ddc0:	08017720 	.word	0x08017720
 800ddc4:	08017a50 	.word	0x08017a50
 800ddc8:	0801776c 	.word	0x0801776c
 800ddcc:	08017a6c 	.word	0x08017a6c
 800ddd0:	2000fe8c 	.word	0x2000fe8c
 800ddd4:	2000fe80 	.word	0x2000fe80
 800ddd8:	2000fe84 	.word	0x2000fe84
 800dddc:	2000fe70 	.word	0x2000fe70
 800dde0:	2000fe8a 	.word	0x2000fe8a
 800dde4:	2302      	movs	r3, #2
 800dde6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ddea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddf4:	fb12 f303 	smulbb	r3, r2, r3
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	bf28      	it	cs
 800de00:	4613      	movcs	r3, r2
 800de02:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de0c:	4413      	add	r3, r2
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de16:	429a      	cmp	r2, r3
 800de18:	d309      	bcc.n	800de2e <tcp_receive+0x2c6>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de22:	4413      	add	r3, r2
 800de24:	b29a      	uxth	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de2c:	e04e      	b.n	800decc <tcp_receive+0x364>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de38:	e048      	b.n	800decc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de42:	4413      	add	r3, r2
 800de44:	b29a      	uxth	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d309      	bcc.n	800de64 <tcp_receive+0x2fc>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de58:	4413      	add	r3, r2
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de62:	e004      	b.n	800de6e <tcp_receive+0x306>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d326      	bcc.n	800decc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de9e:	4413      	add	r3, r2
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d30a      	bcc.n	800dec2 <tcp_receive+0x35a>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deb6:	4413      	add	r3, r2
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dec0:	e004      	b.n	800decc <tcp_receive+0x364>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dec8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded4:	4a98      	ldr	r2, [pc, #608]	; (800e138 <tcp_receive+0x5d0>)
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff fdca 	bl	800da70 <tcp_free_acked_segments>
 800dedc:	4602      	mov	r2, r0
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deea:	4a94      	ldr	r2, [pc, #592]	; (800e13c <tcp_receive+0x5d4>)
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fdbf 	bl	800da70 <tcp_free_acked_segments>
 800def2:	4602      	mov	r2, r0
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defc:	2b00      	cmp	r3, #0
 800defe:	d104      	bne.n	800df0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df06:	861a      	strh	r2, [r3, #48]	; 0x30
 800df08:	e002      	b.n	800df10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d103      	bne.n	800df26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800df2c:	4b84      	ldr	r3, [pc, #528]	; (800e140 <tcp_receive+0x5d8>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	4413      	add	r3, r2
 800df32:	b29a      	uxth	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	8b5b      	ldrh	r3, [r3, #26]
 800df3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df42:	2b00      	cmp	r3, #0
 800df44:	d035      	beq.n	800dfb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d118      	bne.n	800df80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00c      	beq.n	800df70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fa ff03 	bl	8008d6e <lwip_htonl>
 800df68:	4603      	mov	r3, r0
 800df6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dc20      	bgt.n	800dfb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8b5b      	ldrh	r3, [r3, #26]
 800df74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df78:	b29a      	uxth	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df7e:	e018      	b.n	800dfb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fa feee 	bl	8008d6e <lwip_htonl>
 800df92:	4603      	mov	r3, r0
 800df94:	1ae3      	subs	r3, r4, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	dc0b      	bgt.n	800dfb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	8b5b      	ldrh	r3, [r3, #26]
 800df9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfa8:	e003      	b.n	800dfb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f002 fbce 	bl	801074c <tcp_send_empty_ack>
 800dfb0:	e000      	b.n	800dfb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d05b      	beq.n	800e074 <tcp_receive+0x50c>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfc0:	4b60      	ldr	r3, [pc, #384]	; (800e144 <tcp_receive+0x5dc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	da54      	bge.n	800e074 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dfca:	4b5f      	ldr	r3, [pc, #380]	; (800e148 <tcp_receive+0x5e0>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dfde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dfe8:	10db      	asrs	r3, r3, #3
 800dfea:	b21b      	sxth	r3, r3
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e002:	4413      	add	r3, r2
 800e004:	b29b      	uxth	r3, r3
 800e006:	b21a      	sxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e00c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e010:	2b00      	cmp	r3, #0
 800e012:	da05      	bge.n	800e020 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e014:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e018:	425b      	negs	r3, r3
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e020:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e02a:	109b      	asrs	r3, r3, #2
 800e02c:	b21b      	sxth	r3, r3
 800e02e:	b29b      	uxth	r3, r3
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	b29b      	uxth	r3, r3
 800e034:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e03e:	b29a      	uxth	r2, r3
 800e040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e044:	4413      	add	r3, r2
 800e046:	b29b      	uxth	r3, r3
 800e048:	b21a      	sxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e054:	10db      	asrs	r3, r3, #3
 800e056:	b21b      	sxth	r3, r3
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e060:	b29b      	uxth	r3, r3
 800e062:	4413      	add	r3, r2
 800e064:	b29b      	uxth	r3, r3
 800e066:	b21a      	sxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e074:	4b35      	ldr	r3, [pc, #212]	; (800e14c <tcp_receive+0x5e4>)
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 84e2 	beq.w	800ea42 <tcp_receive+0xeda>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	7d1b      	ldrb	r3, [r3, #20]
 800e082:	2b06      	cmp	r3, #6
 800e084:	f200 84dd 	bhi.w	800ea42 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e08c:	4b30      	ldr	r3, [pc, #192]	; (800e150 <tcp_receive+0x5e8>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	3b01      	subs	r3, #1
 800e094:	2b00      	cmp	r3, #0
 800e096:	f2c0 808f 	blt.w	800e1b8 <tcp_receive+0x650>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e09e:	4b2b      	ldr	r3, [pc, #172]	; (800e14c <tcp_receive+0x5e4>)
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4b2a      	ldr	r3, [pc, #168]	; (800e150 <tcp_receive+0x5e8>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	440b      	add	r3, r1
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f300 8082 	bgt.w	800e1b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e0b4:	4b27      	ldr	r3, [pc, #156]	; (800e154 <tcp_receive+0x5ec>)
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0be:	4b24      	ldr	r3, [pc, #144]	; (800e150 <tcp_receive+0x5e8>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e0c6:	4b23      	ldr	r3, [pc, #140]	; (800e154 <tcp_receive+0x5ec>)
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d106      	bne.n	800e0dc <tcp_receive+0x574>
 800e0ce:	4b22      	ldr	r3, [pc, #136]	; (800e158 <tcp_receive+0x5f0>)
 800e0d0:	f240 5294 	movw	r2, #1428	; 0x594
 800e0d4:	4921      	ldr	r1, [pc, #132]	; (800e15c <tcp_receive+0x5f4>)
 800e0d6:	4822      	ldr	r0, [pc, #136]	; (800e160 <tcp_receive+0x5f8>)
 800e0d8:	f006 f9d2 	bl	8014480 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d906      	bls.n	800e0f4 <tcp_receive+0x58c>
 800e0e6:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <tcp_receive+0x5f0>)
 800e0e8:	f240 5295 	movw	r2, #1429	; 0x595
 800e0ec:	491d      	ldr	r1, [pc, #116]	; (800e164 <tcp_receive+0x5fc>)
 800e0ee:	481c      	ldr	r0, [pc, #112]	; (800e160 <tcp_receive+0x5f8>)
 800e0f0:	f006 f9c6 	bl	8014480 <iprintf>
      off = (u16_t)off32;
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e0fa:	4b16      	ldr	r3, [pc, #88]	; (800e154 <tcp_receive+0x5ec>)
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	891b      	ldrh	r3, [r3, #8]
 800e100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e104:	429a      	cmp	r2, r3
 800e106:	d906      	bls.n	800e116 <tcp_receive+0x5ae>
 800e108:	4b13      	ldr	r3, [pc, #76]	; (800e158 <tcp_receive+0x5f0>)
 800e10a:	f240 5297 	movw	r2, #1431	; 0x597
 800e10e:	4916      	ldr	r1, [pc, #88]	; (800e168 <tcp_receive+0x600>)
 800e110:	4813      	ldr	r0, [pc, #76]	; (800e160 <tcp_receive+0x5f8>)
 800e112:	f006 f9b5 	bl	8014480 <iprintf>
      inseg.len -= off;
 800e116:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <tcp_receive+0x5ec>)
 800e118:	891a      	ldrh	r2, [r3, #8]
 800e11a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	b29a      	uxth	r2, r3
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <tcp_receive+0x5ec>)
 800e124:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e126:	4b0b      	ldr	r3, [pc, #44]	; (800e154 <tcp_receive+0x5ec>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	891a      	ldrh	r2, [r3, #8]
 800e12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e134:	e02a      	b.n	800e18c <tcp_receive+0x624>
 800e136:	bf00      	nop
 800e138:	08017a88 	.word	0x08017a88
 800e13c:	08017a90 	.word	0x08017a90
 800e140:	2000fe88 	.word	0x2000fe88
 800e144:	2000fe84 	.word	0x2000fe84
 800e148:	2000fe48 	.word	0x2000fe48
 800e14c:	2000fe8a 	.word	0x2000fe8a
 800e150:	2000fe80 	.word	0x2000fe80
 800e154:	2000fe60 	.word	0x2000fe60
 800e158:	08017720 	.word	0x08017720
 800e15c:	08017a98 	.word	0x08017a98
 800e160:	0801776c 	.word	0x0801776c
 800e164:	08017aa8 	.word	0x08017aa8
 800e168:	08017ab8 	.word	0x08017ab8
        off -= p->len;
 800e16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e16e:	895b      	ldrh	r3, [r3, #10]
 800e170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e17c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e17e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e182:	2200      	movs	r2, #0
 800e184:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e18e:	895b      	ldrh	r3, [r3, #10]
 800e190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e194:	429a      	cmp	r2, r3
 800e196:	d8e9      	bhi.n	800e16c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e19c:	4619      	mov	r1, r3
 800e19e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e1a0:	f7fc f8d8 	bl	800a354 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	4a91      	ldr	r2, [pc, #580]	; (800e3f0 <tcp_receive+0x888>)
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	4b91      	ldr	r3, [pc, #580]	; (800e3f4 <tcp_receive+0x88c>)
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	4a8f      	ldr	r2, [pc, #572]	; (800e3f0 <tcp_receive+0x888>)
 800e1b2:	6812      	ldr	r2, [r2, #0]
 800e1b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e1b6:	e00d      	b.n	800e1d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e1b8:	4b8d      	ldr	r3, [pc, #564]	; (800e3f0 <tcp_receive+0x888>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	da06      	bge.n	800e1d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ca:	f043 0302 	orr.w	r3, r3, #2
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e1d4:	4b86      	ldr	r3, [pc, #536]	; (800e3f0 <tcp_receive+0x888>)
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1dc:	1ad3      	subs	r3, r2, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f2c0 842a 	blt.w	800ea38 <tcp_receive+0xed0>
 800e1e4:	4b82      	ldr	r3, [pc, #520]	; (800e3f0 <tcp_receive+0x888>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	6879      	ldr	r1, [r7, #4]
 800e1ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1f0:	440b      	add	r3, r1
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f300 841e 	bgt.w	800ea38 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e200:	4b7b      	ldr	r3, [pc, #492]	; (800e3f0 <tcp_receive+0x888>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	f040 829a 	bne.w	800e73e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e20a:	4b7a      	ldr	r3, [pc, #488]	; (800e3f4 <tcp_receive+0x88c>)
 800e20c:	891c      	ldrh	r4, [r3, #8]
 800e20e:	4b79      	ldr	r3, [pc, #484]	; (800e3f4 <tcp_receive+0x88c>)
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	899b      	ldrh	r3, [r3, #12]
 800e214:	b29b      	uxth	r3, r3
 800e216:	4618      	mov	r0, r3
 800e218:	f7fa fd94 	bl	8008d44 <lwip_htons>
 800e21c:	4603      	mov	r3, r0
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	f003 0303 	and.w	r3, r3, #3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d001      	beq.n	800e22c <tcp_receive+0x6c4>
 800e228:	2301      	movs	r3, #1
 800e22a:	e000      	b.n	800e22e <tcp_receive+0x6c6>
 800e22c:	2300      	movs	r3, #0
 800e22e:	4423      	add	r3, r4
 800e230:	b29a      	uxth	r2, r3
 800e232:	4b71      	ldr	r3, [pc, #452]	; (800e3f8 <tcp_receive+0x890>)
 800e234:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e23a:	4b6f      	ldr	r3, [pc, #444]	; (800e3f8 <tcp_receive+0x890>)
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d275      	bcs.n	800e32e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e242:	4b6c      	ldr	r3, [pc, #432]	; (800e3f4 <tcp_receive+0x88c>)
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	899b      	ldrh	r3, [r3, #12]
 800e248:	b29b      	uxth	r3, r3
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fa fd7a 	bl	8008d44 <lwip_htons>
 800e250:	4603      	mov	r3, r0
 800e252:	b2db      	uxtb	r3, r3
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01f      	beq.n	800e29c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e25c:	4b65      	ldr	r3, [pc, #404]	; (800e3f4 <tcp_receive+0x88c>)
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	899b      	ldrh	r3, [r3, #12]
 800e262:	b29b      	uxth	r3, r3
 800e264:	b21b      	sxth	r3, r3
 800e266:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e26a:	b21c      	sxth	r4, r3
 800e26c:	4b61      	ldr	r3, [pc, #388]	; (800e3f4 <tcp_receive+0x88c>)
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	899b      	ldrh	r3, [r3, #12]
 800e272:	b29b      	uxth	r3, r3
 800e274:	4618      	mov	r0, r3
 800e276:	f7fa fd65 	bl	8008d44 <lwip_htons>
 800e27a:	4603      	mov	r3, r0
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e284:	b29b      	uxth	r3, r3
 800e286:	4618      	mov	r0, r3
 800e288:	f7fa fd5c 	bl	8008d44 <lwip_htons>
 800e28c:	4603      	mov	r3, r0
 800e28e:	b21b      	sxth	r3, r3
 800e290:	4323      	orrs	r3, r4
 800e292:	b21a      	sxth	r2, r3
 800e294:	4b57      	ldr	r3, [pc, #348]	; (800e3f4 <tcp_receive+0x88c>)
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	b292      	uxth	r2, r2
 800e29a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2a0:	4b54      	ldr	r3, [pc, #336]	; (800e3f4 <tcp_receive+0x88c>)
 800e2a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e2a4:	4b53      	ldr	r3, [pc, #332]	; (800e3f4 <tcp_receive+0x88c>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	899b      	ldrh	r3, [r3, #12]
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fa fd49 	bl	8008d44 <lwip_htons>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	f003 0302 	and.w	r3, r3, #2
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d005      	beq.n	800e2ca <tcp_receive+0x762>
            inseg.len -= 1;
 800e2be:	4b4d      	ldr	r3, [pc, #308]	; (800e3f4 <tcp_receive+0x88c>)
 800e2c0:	891b      	ldrh	r3, [r3, #8]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	4b4b      	ldr	r3, [pc, #300]	; (800e3f4 <tcp_receive+0x88c>)
 800e2c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e2ca:	4b4a      	ldr	r3, [pc, #296]	; (800e3f4 <tcp_receive+0x88c>)
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	4a49      	ldr	r2, [pc, #292]	; (800e3f4 <tcp_receive+0x88c>)
 800e2d0:	8912      	ldrh	r2, [r2, #8]
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fb ff3d 	bl	800a154 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e2da:	4b46      	ldr	r3, [pc, #280]	; (800e3f4 <tcp_receive+0x88c>)
 800e2dc:	891c      	ldrh	r4, [r3, #8]
 800e2de:	4b45      	ldr	r3, [pc, #276]	; (800e3f4 <tcp_receive+0x88c>)
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	899b      	ldrh	r3, [r3, #12]
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fa fd2c 	bl	8008d44 <lwip_htons>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	f003 0303 	and.w	r3, r3, #3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <tcp_receive+0x794>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <tcp_receive+0x796>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	4423      	add	r3, r4
 800e300:	b29a      	uxth	r2, r3
 800e302:	4b3d      	ldr	r3, [pc, #244]	; (800e3f8 <tcp_receive+0x890>)
 800e304:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e306:	4b3c      	ldr	r3, [pc, #240]	; (800e3f8 <tcp_receive+0x890>)
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	461a      	mov	r2, r3
 800e30c:	4b38      	ldr	r3, [pc, #224]	; (800e3f0 <tcp_receive+0x888>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	441a      	add	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e31a:	440b      	add	r3, r1
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d006      	beq.n	800e32e <tcp_receive+0x7c6>
 800e320:	4b36      	ldr	r3, [pc, #216]	; (800e3fc <tcp_receive+0x894>)
 800e322:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e326:	4936      	ldr	r1, [pc, #216]	; (800e400 <tcp_receive+0x898>)
 800e328:	4836      	ldr	r0, [pc, #216]	; (800e404 <tcp_receive+0x89c>)
 800e32a:	f006 f8a9 	bl	8014480 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 80e7 	beq.w	800e506 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e338:	4b2e      	ldr	r3, [pc, #184]	; (800e3f4 <tcp_receive+0x88c>)
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	899b      	ldrh	r3, [r3, #12]
 800e33e:	b29b      	uxth	r3, r3
 800e340:	4618      	mov	r0, r3
 800e342:	f7fa fcff 	bl	8008d44 <lwip_htons>
 800e346:	4603      	mov	r3, r0
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	f003 0301 	and.w	r3, r3, #1
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d010      	beq.n	800e374 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e352:	e00a      	b.n	800e36a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e358:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f7fd fcc4 	bl	800bcf2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1f0      	bne.n	800e354 <tcp_receive+0x7ec>
 800e372:	e0c8      	b.n	800e506 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e378:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e37a:	e052      	b.n	800e422 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	899b      	ldrh	r3, [r3, #12]
 800e382:	b29b      	uxth	r3, r3
 800e384:	4618      	mov	r0, r3
 800e386:	f7fa fcdd 	bl	8008d44 <lwip_htons>
 800e38a:	4603      	mov	r3, r0
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	2b00      	cmp	r3, #0
 800e394:	d03d      	beq.n	800e412 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e396:	4b17      	ldr	r3, [pc, #92]	; (800e3f4 <tcp_receive+0x88c>)
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	899b      	ldrh	r3, [r3, #12]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fa fcd0 	bl	8008d44 <lwip_htons>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d130      	bne.n	800e412 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e3b0:	4b10      	ldr	r3, [pc, #64]	; (800e3f4 <tcp_receive+0x88c>)
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	899b      	ldrh	r3, [r3, #12]
 800e3b6:	b29c      	uxth	r4, r3
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	f7fa fcc3 	bl	8008d44 <lwip_htons>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4b0c      	ldr	r3, [pc, #48]	; (800e3f4 <tcp_receive+0x88c>)
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	4322      	orrs	r2, r4
 800e3c8:	b292      	uxth	r2, r2
 800e3ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e3cc:	4b09      	ldr	r3, [pc, #36]	; (800e3f4 <tcp_receive+0x88c>)
 800e3ce:	891c      	ldrh	r4, [r3, #8]
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <tcp_receive+0x88c>)
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	899b      	ldrh	r3, [r3, #12]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fa fcb3 	bl	8008d44 <lwip_htons>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f003 0303 	and.w	r3, r3, #3
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00e      	beq.n	800e408 <tcp_receive+0x8a0>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e00d      	b.n	800e40a <tcp_receive+0x8a2>
 800e3ee:	bf00      	nop
 800e3f0:	2000fe80 	.word	0x2000fe80
 800e3f4:	2000fe60 	.word	0x2000fe60
 800e3f8:	2000fe8a 	.word	0x2000fe8a
 800e3fc:	08017720 	.word	0x08017720
 800e400:	08017ac8 	.word	0x08017ac8
 800e404:	0801776c 	.word	0x0801776c
 800e408:	2300      	movs	r3, #0
 800e40a:	4423      	add	r3, r4
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	4b98      	ldr	r3, [pc, #608]	; (800e670 <tcp_receive+0xb08>)
 800e410:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e414:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e41c:	6938      	ldr	r0, [r7, #16]
 800e41e:	f7fd fc68 	bl	800bcf2 <tcp_seg_free>
            while (next &&
 800e422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00e      	beq.n	800e446 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e428:	4b91      	ldr	r3, [pc, #580]	; (800e670 <tcp_receive+0xb08>)
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	461a      	mov	r2, r3
 800e42e:	4b91      	ldr	r3, [pc, #580]	; (800e674 <tcp_receive+0xb0c>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	441a      	add	r2, r3
 800e434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e43c:	8909      	ldrh	r1, [r1, #8]
 800e43e:	440b      	add	r3, r1
 800e440:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e442:	2b00      	cmp	r3, #0
 800e444:	da9a      	bge.n	800e37c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d059      	beq.n	800e500 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e44c:	4b88      	ldr	r3, [pc, #544]	; (800e670 <tcp_receive+0xb08>)
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	461a      	mov	r2, r3
 800e452:	4b88      	ldr	r3, [pc, #544]	; (800e674 <tcp_receive+0xb0c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	441a      	add	r2, r3
 800e458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e460:	2b00      	cmp	r3, #0
 800e462:	dd4d      	ble.n	800e500 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	4b81      	ldr	r3, [pc, #516]	; (800e674 <tcp_receive+0xb0c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	b29b      	uxth	r3, r3
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	b29a      	uxth	r2, r3
 800e476:	4b80      	ldr	r3, [pc, #512]	; (800e678 <tcp_receive+0xb10>)
 800e478:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e47a:	4b7f      	ldr	r3, [pc, #508]	; (800e678 <tcp_receive+0xb10>)
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	899b      	ldrh	r3, [r3, #12]
 800e480:	b29b      	uxth	r3, r3
 800e482:	4618      	mov	r0, r3
 800e484:	f7fa fc5e 	bl	8008d44 <lwip_htons>
 800e488:	4603      	mov	r3, r0
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	f003 0302 	and.w	r3, r3, #2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d005      	beq.n	800e4a0 <tcp_receive+0x938>
                inseg.len -= 1;
 800e494:	4b78      	ldr	r3, [pc, #480]	; (800e678 <tcp_receive+0xb10>)
 800e496:	891b      	ldrh	r3, [r3, #8]
 800e498:	3b01      	subs	r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	4b76      	ldr	r3, [pc, #472]	; (800e678 <tcp_receive+0xb10>)
 800e49e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e4a0:	4b75      	ldr	r3, [pc, #468]	; (800e678 <tcp_receive+0xb10>)
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	4a74      	ldr	r2, [pc, #464]	; (800e678 <tcp_receive+0xb10>)
 800e4a6:	8912      	ldrh	r2, [r2, #8]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fb fe52 	bl	800a154 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e4b0:	4b71      	ldr	r3, [pc, #452]	; (800e678 <tcp_receive+0xb10>)
 800e4b2:	891c      	ldrh	r4, [r3, #8]
 800e4b4:	4b70      	ldr	r3, [pc, #448]	; (800e678 <tcp_receive+0xb10>)
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	899b      	ldrh	r3, [r3, #12]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fa fc41 	bl	8008d44 <lwip_htons>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	f003 0303 	and.w	r3, r3, #3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <tcp_receive+0x96a>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e000      	b.n	800e4d4 <tcp_receive+0x96c>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	4423      	add	r3, r4
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	4b65      	ldr	r3, [pc, #404]	; (800e670 <tcp_receive+0xb08>)
 800e4da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e4dc:	4b64      	ldr	r3, [pc, #400]	; (800e670 <tcp_receive+0xb08>)
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	4b64      	ldr	r3, [pc, #400]	; (800e674 <tcp_receive+0xb0c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	441a      	add	r2, r3
 800e4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d006      	beq.n	800e500 <tcp_receive+0x998>
 800e4f2:	4b62      	ldr	r3, [pc, #392]	; (800e67c <tcp_receive+0xb14>)
 800e4f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e4f8:	4961      	ldr	r1, [pc, #388]	; (800e680 <tcp_receive+0xb18>)
 800e4fa:	4862      	ldr	r0, [pc, #392]	; (800e684 <tcp_receive+0xb1c>)
 800e4fc:	f005 ffc0 	bl	8014480 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e504:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e506:	4b5a      	ldr	r3, [pc, #360]	; (800e670 <tcp_receive+0xb08>)
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	4b59      	ldr	r3, [pc, #356]	; (800e674 <tcp_receive+0xb0c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	441a      	add	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e51a:	4b55      	ldr	r3, [pc, #340]	; (800e670 <tcp_receive+0xb08>)
 800e51c:	881b      	ldrh	r3, [r3, #0]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d206      	bcs.n	800e530 <tcp_receive+0x9c8>
 800e522:	4b56      	ldr	r3, [pc, #344]	; (800e67c <tcp_receive+0xb14>)
 800e524:	f240 6207 	movw	r2, #1543	; 0x607
 800e528:	4957      	ldr	r1, [pc, #348]	; (800e688 <tcp_receive+0xb20>)
 800e52a:	4856      	ldr	r0, [pc, #344]	; (800e684 <tcp_receive+0xb1c>)
 800e52c:	f005 ffa8 	bl	8014480 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e534:	4b4e      	ldr	r3, [pc, #312]	; (800e670 <tcp_receive+0xb08>)
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7fc fd99 	bl	800b078 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e546:	4b4c      	ldr	r3, [pc, #304]	; (800e678 <tcp_receive+0xb10>)
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	891b      	ldrh	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e550:	4b49      	ldr	r3, [pc, #292]	; (800e678 <tcp_receive+0xb10>)
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	4a4d      	ldr	r2, [pc, #308]	; (800e68c <tcp_receive+0xb24>)
 800e556:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e558:	4b47      	ldr	r3, [pc, #284]	; (800e678 <tcp_receive+0xb10>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e55e:	4b46      	ldr	r3, [pc, #280]	; (800e678 <tcp_receive+0xb10>)
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	899b      	ldrh	r3, [r3, #12]
 800e564:	b29b      	uxth	r3, r3
 800e566:	4618      	mov	r0, r3
 800e568:	f7fa fbec 	bl	8008d44 <lwip_htons>
 800e56c:	4603      	mov	r3, r0
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 80b8 	beq.w	800e6ea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e57a:	4b45      	ldr	r3, [pc, #276]	; (800e690 <tcp_receive+0xb28>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f043 0320 	orr.w	r3, r3, #32
 800e582:	b2da      	uxtb	r2, r3
 800e584:	4b42      	ldr	r3, [pc, #264]	; (800e690 <tcp_receive+0xb28>)
 800e586:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e588:	e0af      	b.n	800e6ea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e58e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	4a36      	ldr	r2, [pc, #216]	; (800e674 <tcp_receive+0xb0c>)
 800e59a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	891b      	ldrh	r3, [r3, #8]
 800e5a0:	461c      	mov	r4, r3
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	899b      	ldrh	r3, [r3, #12]
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fa fbca 	bl	8008d44 <lwip_htons>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0303 	and.w	r3, r3, #3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d001      	beq.n	800e5c0 <tcp_receive+0xa58>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e000      	b.n	800e5c2 <tcp_receive+0xa5a>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	191a      	adds	r2, r3, r4
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c8:	441a      	add	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5d2:	461c      	mov	r4, r3
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	891b      	ldrh	r3, [r3, #8]
 800e5d8:	461d      	mov	r5, r3
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	899b      	ldrh	r3, [r3, #12]
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fa fbae 	bl	8008d44 <lwip_htons>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	f003 0303 	and.w	r3, r3, #3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <tcp_receive+0xa90>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e000      	b.n	800e5fa <tcp_receive+0xa92>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	442b      	add	r3, r5
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	d206      	bcs.n	800e60e <tcp_receive+0xaa6>
 800e600:	4b1e      	ldr	r3, [pc, #120]	; (800e67c <tcp_receive+0xb14>)
 800e602:	f240 622b 	movw	r2, #1579	; 0x62b
 800e606:	4923      	ldr	r1, [pc, #140]	; (800e694 <tcp_receive+0xb2c>)
 800e608:	481e      	ldr	r0, [pc, #120]	; (800e684 <tcp_receive+0xb1c>)
 800e60a:	f005 ff39 	bl	8014480 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	891b      	ldrh	r3, [r3, #8]
 800e612:	461c      	mov	r4, r3
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	899b      	ldrh	r3, [r3, #12]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fa fb91 	bl	8008d44 <lwip_htons>
 800e622:	4603      	mov	r3, r0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	f003 0303 	and.w	r3, r3, #3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <tcp_receive+0xaca>
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <tcp_receive+0xacc>
 800e632:	2300      	movs	r3, #0
 800e634:	1919      	adds	r1, r3, r4
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e63a:	b28b      	uxth	r3, r1
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7fc fd17 	bl	800b078 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	891b      	ldrh	r3, [r3, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d028      	beq.n	800e6a6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e654:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <tcp_receive+0xb24>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d01d      	beq.n	800e698 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e65c:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <tcp_receive+0xb24>)
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fb ffc8 	bl	800a5fc <pbuf_cat>
 800e66c:	e018      	b.n	800e6a0 <tcp_receive+0xb38>
 800e66e:	bf00      	nop
 800e670:	2000fe8a 	.word	0x2000fe8a
 800e674:	2000fe80 	.word	0x2000fe80
 800e678:	2000fe60 	.word	0x2000fe60
 800e67c:	08017720 	.word	0x08017720
 800e680:	08017b00 	.word	0x08017b00
 800e684:	0801776c 	.word	0x0801776c
 800e688:	08017b3c 	.word	0x08017b3c
 800e68c:	2000fe90 	.word	0x2000fe90
 800e690:	2000fe8d 	.word	0x2000fe8d
 800e694:	08017b5c 	.word	0x08017b5c
            } else {
              recv_data = cseg->p;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4a70      	ldr	r2, [pc, #448]	; (800e860 <tcp_receive+0xcf8>)
 800e69e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	899b      	ldrh	r3, [r3, #12]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fa fb48 	bl	8008d44 <lwip_htons>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00d      	beq.n	800e6dc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e6c0:	4b68      	ldr	r3, [pc, #416]	; (800e864 <tcp_receive+0xcfc>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	f043 0320 	orr.w	r3, r3, #32
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	4b66      	ldr	r3, [pc, #408]	; (800e864 <tcp_receive+0xcfc>)
 800e6cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d102      	bne.n	800e6dc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2207      	movs	r2, #7
 800e6da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e6e4:	68b8      	ldr	r0, [r7, #8]
 800e6e6:	f7fd fb04 	bl	800bcf2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d008      	beq.n	800e704 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e6fe:	429a      	cmp	r2, r3
 800e700:	f43f af43 	beq.w	800e58a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	8b5b      	ldrh	r3, [r3, #26]
 800e708:	f003 0301 	and.w	r3, r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00e      	beq.n	800e72e <tcp_receive+0xbc6>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8b5b      	ldrh	r3, [r3, #26]
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	b29a      	uxth	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	835a      	strh	r2, [r3, #26]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	8b5b      	ldrh	r3, [r3, #26]
 800e722:	f043 0302 	orr.w	r3, r3, #2
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e72c:	e188      	b.n	800ea40 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	8b5b      	ldrh	r3, [r3, #26]
 800e732:	f043 0301 	orr.w	r3, r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e73c:	e180      	b.n	800ea40 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e746:	4848      	ldr	r0, [pc, #288]	; (800e868 <tcp_receive+0xd00>)
 800e748:	f7fd faec 	bl	800bd24 <tcp_seg_copy>
 800e74c:	4602      	mov	r2, r0
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	675a      	str	r2, [r3, #116]	; 0x74
 800e752:	e16d      	b.n	800ea30 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e754:	2300      	movs	r3, #0
 800e756:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e75c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e75e:	e157      	b.n	800ea10 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	4b41      	ldr	r3, [pc, #260]	; (800e86c <tcp_receive+0xd04>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d11d      	bne.n	800e7aa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e76e:	4b3e      	ldr	r3, [pc, #248]	; (800e868 <tcp_receive+0xd00>)
 800e770:	891a      	ldrh	r2, [r3, #8]
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	891b      	ldrh	r3, [r3, #8]
 800e776:	429a      	cmp	r2, r3
 800e778:	f240 814f 	bls.w	800ea1a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e77c:	483a      	ldr	r0, [pc, #232]	; (800e868 <tcp_receive+0xd00>)
 800e77e:	f7fd fad1 	bl	800bd24 <tcp_seg_copy>
 800e782:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f000 8149 	beq.w	800ea1e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d003      	beq.n	800e79a <tcp_receive+0xc32>
                    prev->next = cseg;
 800e792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	601a      	str	r2, [r3, #0]
 800e798:	e002      	b.n	800e7a0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e7a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7a2:	6978      	ldr	r0, [r7, #20]
 800e7a4:	f7ff f8dc 	bl	800d960 <tcp_oos_insert_segment>
                }
                break;
 800e7a8:	e139      	b.n	800ea1e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d117      	bne.n	800e7e0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e7b0:	4b2e      	ldr	r3, [pc, #184]	; (800e86c <tcp_receive+0xd04>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	da57      	bge.n	800e870 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e7c0:	4829      	ldr	r0, [pc, #164]	; (800e868 <tcp_receive+0xd00>)
 800e7c2:	f7fd faaf 	bl	800bd24 <tcp_seg_copy>
 800e7c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 8129 	beq.w	800ea22 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e7d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7d8:	69b8      	ldr	r0, [r7, #24]
 800e7da:	f7ff f8c1 	bl	800d960 <tcp_oos_insert_segment>
                  }
                  break;
 800e7de:	e120      	b.n	800ea22 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e7e0:	4b22      	ldr	r3, [pc, #136]	; (800e86c <tcp_receive+0xd04>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	db3e      	blt.n	800e870 <tcp_receive+0xd08>
 800e7f2:	4b1e      	ldr	r3, [pc, #120]	; (800e86c <tcp_receive+0xd04>)
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	3301      	adds	r3, #1
 800e800:	2b00      	cmp	r3, #0
 800e802:	dc35      	bgt.n	800e870 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e804:	4818      	ldr	r0, [pc, #96]	; (800e868 <tcp_receive+0xd00>)
 800e806:	f7fd fa8d 	bl	800bd24 <tcp_seg_copy>
 800e80a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 8109 	beq.w	800ea26 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e81c:	8912      	ldrh	r2, [r2, #8]
 800e81e:	441a      	add	r2, r3
 800e820:	4b12      	ldr	r3, [pc, #72]	; (800e86c <tcp_receive+0xd04>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	dd12      	ble.n	800e850 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e82a:	4b10      	ldr	r3, [pc, #64]	; (800e86c <tcp_receive+0xd04>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	b29a      	uxth	r2, r3
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	b29b      	uxth	r3, r3
 800e838:	1ad3      	subs	r3, r2, r3
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e83e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e846:	891b      	ldrh	r3, [r3, #8]
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fb fc82 	bl	800a154 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e852:	69fa      	ldr	r2, [r7, #28]
 800e854:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e858:	69f8      	ldr	r0, [r7, #28]
 800e85a:	f7ff f881 	bl	800d960 <tcp_oos_insert_segment>
                  }
                  break;
 800e85e:	e0e2      	b.n	800ea26 <tcp_receive+0xebe>
 800e860:	2000fe90 	.word	0x2000fe90
 800e864:	2000fe8d 	.word	0x2000fe8d
 800e868:	2000fe60 	.word	0x2000fe60
 800e86c:	2000fe80 	.word	0x2000fe80
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f040 80c6 	bne.w	800ea0a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e87e:	4b80      	ldr	r3, [pc, #512]	; (800ea80 <tcp_receive+0xf18>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f340 80bd 	ble.w	800ea0a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	899b      	ldrh	r3, [r3, #12]
 800e896:	b29b      	uxth	r3, r3
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fa fa53 	bl	8008d44 <lwip_htons>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f040 80bf 	bne.w	800ea2a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e8ac:	4875      	ldr	r0, [pc, #468]	; (800ea84 <tcp_receive+0xf1c>)
 800e8ae:	f7fd fa39 	bl	800bd24 <tcp_seg_copy>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 80b6 	beq.w	800ea2e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ca:	8912      	ldrh	r2, [r2, #8]
 800e8cc:	441a      	add	r2, r3
 800e8ce:	4b6c      	ldr	r3, [pc, #432]	; (800ea80 <tcp_receive+0xf18>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	dd12      	ble.n	800e8fe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e8d8:	4b69      	ldr	r3, [pc, #420]	; (800ea80 <tcp_receive+0xf18>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	891b      	ldrh	r3, [r3, #8]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	f7fb fc2b 	bl	800a154 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e8fe:	4b62      	ldr	r3, [pc, #392]	; (800ea88 <tcp_receive+0xf20>)
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	461a      	mov	r2, r3
 800e904:	4b5e      	ldr	r3, [pc, #376]	; (800ea80 <tcp_receive+0xf18>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	441a      	add	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e912:	440b      	add	r3, r1
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	f340 8089 	ble.w	800ea2e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	899b      	ldrh	r3, [r3, #12]
 800e924:	b29b      	uxth	r3, r3
 800e926:	4618      	mov	r0, r3
 800e928:	f7fa fa0c 	bl	8008d44 <lwip_htons>
 800e92c:	4603      	mov	r3, r0
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	2b00      	cmp	r3, #0
 800e936:	d022      	beq.n	800e97e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	899b      	ldrh	r3, [r3, #12]
 800e940:	b29b      	uxth	r3, r3
 800e942:	b21b      	sxth	r3, r3
 800e944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e948:	b21c      	sxth	r4, r3
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	899b      	ldrh	r3, [r3, #12]
 800e952:	b29b      	uxth	r3, r3
 800e954:	4618      	mov	r0, r3
 800e956:	f7fa f9f5 	bl	8008d44 <lwip_htons>
 800e95a:	4603      	mov	r3, r0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	b29b      	uxth	r3, r3
 800e960:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e964:	b29b      	uxth	r3, r3
 800e966:	4618      	mov	r0, r3
 800e968:	f7fa f9ec 	bl	8008d44 <lwip_htons>
 800e96c:	4603      	mov	r3, r0
 800e96e:	b21b      	sxth	r3, r3
 800e970:	4323      	orrs	r3, r4
 800e972:	b21a      	sxth	r2, r3
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	b292      	uxth	r2, r2
 800e97c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e982:	b29a      	uxth	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e988:	4413      	add	r3, r2
 800e98a:	b299      	uxth	r1, r3
 800e98c:	4b3c      	ldr	r3, [pc, #240]	; (800ea80 <tcp_receive+0xf18>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	b29a      	uxth	r2, r3
 800e992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	1a8a      	subs	r2, r1, r2
 800e998:	b292      	uxth	r2, r2
 800e99a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685a      	ldr	r2, [r3, #4]
 800e9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	891b      	ldrh	r3, [r3, #8]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	f7fb fbd2 	bl	800a154 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	891c      	ldrh	r4, [r3, #8]
 800e9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	899b      	ldrh	r3, [r3, #12]
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fa f9bf 	bl	8008d44 <lwip_htons>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	f003 0303 	and.w	r3, r3, #3
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <tcp_receive+0xe6e>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e000      	b.n	800e9d8 <tcp_receive+0xe70>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	4423      	add	r3, r4
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	4b2a      	ldr	r3, [pc, #168]	; (800ea88 <tcp_receive+0xf20>)
 800e9de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e9e0:	4b29      	ldr	r3, [pc, #164]	; (800ea88 <tcp_receive+0xf20>)
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b26      	ldr	r3, [pc, #152]	; (800ea80 <tcp_receive+0xf18>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	441a      	add	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9f4:	440b      	add	r3, r1
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d019      	beq.n	800ea2e <tcp_receive+0xec6>
 800e9fa:	4b24      	ldr	r3, [pc, #144]	; (800ea8c <tcp_receive+0xf24>)
 800e9fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ea00:	4923      	ldr	r1, [pc, #140]	; (800ea90 <tcp_receive+0xf28>)
 800ea02:	4824      	ldr	r0, [pc, #144]	; (800ea94 <tcp_receive+0xf2c>)
 800ea04:	f005 fd3c 	bl	8014480 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ea08:	e011      	b.n	800ea2e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f47f aea4 	bne.w	800e760 <tcp_receive+0xbf8>
 800ea18:	e00a      	b.n	800ea30 <tcp_receive+0xec8>
                break;
 800ea1a:	bf00      	nop
 800ea1c:	e008      	b.n	800ea30 <tcp_receive+0xec8>
                break;
 800ea1e:	bf00      	nop
 800ea20:	e006      	b.n	800ea30 <tcp_receive+0xec8>
                  break;
 800ea22:	bf00      	nop
 800ea24:	e004      	b.n	800ea30 <tcp_receive+0xec8>
                  break;
 800ea26:	bf00      	nop
 800ea28:	e002      	b.n	800ea30 <tcp_receive+0xec8>
                  break;
 800ea2a:	bf00      	nop
 800ea2c:	e000      	b.n	800ea30 <tcp_receive+0xec8>
                break;
 800ea2e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f001 fe8b 	bl	801074c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ea36:	e003      	b.n	800ea40 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f001 fe87 	bl	801074c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea3e:	e01a      	b.n	800ea76 <tcp_receive+0xf0e>
 800ea40:	e019      	b.n	800ea76 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ea42:	4b0f      	ldr	r3, [pc, #60]	; (800ea80 <tcp_receive+0xf18>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	db0a      	blt.n	800ea66 <tcp_receive+0xefe>
 800ea50:	4b0b      	ldr	r3, [pc, #44]	; (800ea80 <tcp_receive+0xf18>)
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea5c:	440b      	add	r3, r1
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	3301      	adds	r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dd07      	ble.n	800ea76 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	8b5b      	ldrh	r3, [r3, #26]
 800ea6a:	f043 0302 	orr.w	r3, r3, #2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ea74:	e7ff      	b.n	800ea76 <tcp_receive+0xf0e>
 800ea76:	bf00      	nop
 800ea78:	3750      	adds	r7, #80	; 0x50
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	2000fe80 	.word	0x2000fe80
 800ea84:	2000fe60 	.word	0x2000fe60
 800ea88:	2000fe8a 	.word	0x2000fe8a
 800ea8c:	08017720 	.word	0x08017720
 800ea90:	08017ac8 	.word	0x08017ac8
 800ea94:	0801776c 	.word	0x0801776c

0800ea98 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ea9e:	4b15      	ldr	r3, [pc, #84]	; (800eaf4 <tcp_get_next_optbyte+0x5c>)
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	b291      	uxth	r1, r2
 800eaa6:	4a13      	ldr	r2, [pc, #76]	; (800eaf4 <tcp_get_next_optbyte+0x5c>)
 800eaa8:	8011      	strh	r1, [r2, #0]
 800eaaa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800eaac:	4b12      	ldr	r3, [pc, #72]	; (800eaf8 <tcp_get_next_optbyte+0x60>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d004      	beq.n	800eabe <tcp_get_next_optbyte+0x26>
 800eab4:	4b11      	ldr	r3, [pc, #68]	; (800eafc <tcp_get_next_optbyte+0x64>)
 800eab6:	881b      	ldrh	r3, [r3, #0]
 800eab8:	88fa      	ldrh	r2, [r7, #6]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d208      	bcs.n	800ead0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800eabe:	4b10      	ldr	r3, [pc, #64]	; (800eb00 <tcp_get_next_optbyte+0x68>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3314      	adds	r3, #20
 800eac4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800eac6:	88fb      	ldrh	r3, [r7, #6]
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	4413      	add	r3, r2
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	e00b      	b.n	800eae8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ead0:	88fb      	ldrh	r3, [r7, #6]
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	4b09      	ldr	r3, [pc, #36]	; (800eafc <tcp_get_next_optbyte+0x64>)
 800ead6:	881b      	ldrh	r3, [r3, #0]
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800eade:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <tcp_get_next_optbyte+0x60>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	797b      	ldrb	r3, [r7, #5]
 800eae4:	4413      	add	r3, r2
 800eae6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	2000fe7c 	.word	0x2000fe7c
 800eaf8:	2000fe78 	.word	0x2000fe78
 800eafc:	2000fe76 	.word	0x2000fe76
 800eb00:	2000fe70 	.word	0x2000fe70

0800eb04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d106      	bne.n	800eb20 <tcp_parseopt+0x1c>
 800eb12:	4b32      	ldr	r3, [pc, #200]	; (800ebdc <tcp_parseopt+0xd8>)
 800eb14:	f240 727d 	movw	r2, #1917	; 0x77d
 800eb18:	4931      	ldr	r1, [pc, #196]	; (800ebe0 <tcp_parseopt+0xdc>)
 800eb1a:	4832      	ldr	r0, [pc, #200]	; (800ebe4 <tcp_parseopt+0xe0>)
 800eb1c:	f005 fcb0 	bl	8014480 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800eb20:	4b31      	ldr	r3, [pc, #196]	; (800ebe8 <tcp_parseopt+0xe4>)
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d055      	beq.n	800ebd4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eb28:	4b30      	ldr	r3, [pc, #192]	; (800ebec <tcp_parseopt+0xe8>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	801a      	strh	r2, [r3, #0]
 800eb2e:	e045      	b.n	800ebbc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800eb30:	f7ff ffb2 	bl	800ea98 <tcp_get_next_optbyte>
 800eb34:	4603      	mov	r3, r0
 800eb36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d006      	beq.n	800eb4c <tcp_parseopt+0x48>
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	dc2b      	bgt.n	800eb9a <tcp_parseopt+0x96>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d041      	beq.n	800ebca <tcp_parseopt+0xc6>
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d127      	bne.n	800eb9a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800eb4a:	e037      	b.n	800ebbc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800eb4c:	f7ff ffa4 	bl	800ea98 <tcp_get_next_optbyte>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b04      	cmp	r3, #4
 800eb54:	d13b      	bne.n	800ebce <tcp_parseopt+0xca>
 800eb56:	4b25      	ldr	r3, [pc, #148]	; (800ebec <tcp_parseopt+0xe8>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	4a22      	ldr	r2, [pc, #136]	; (800ebe8 <tcp_parseopt+0xe4>)
 800eb5e:	8812      	ldrh	r2, [r2, #0]
 800eb60:	4293      	cmp	r3, r2
 800eb62:	da34      	bge.n	800ebce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800eb64:	f7ff ff98 	bl	800ea98 <tcp_get_next_optbyte>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800eb70:	f7ff ff92 	bl	800ea98 <tcp_get_next_optbyte>
 800eb74:	4603      	mov	r3, r0
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	89bb      	ldrh	r3, [r7, #12]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800eb7e:	89bb      	ldrh	r3, [r7, #12]
 800eb80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb84:	d804      	bhi.n	800eb90 <tcp_parseopt+0x8c>
 800eb86:	89bb      	ldrh	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <tcp_parseopt+0x8c>
 800eb8c:	89ba      	ldrh	r2, [r7, #12]
 800eb8e:	e001      	b.n	800eb94 <tcp_parseopt+0x90>
 800eb90:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800eb98:	e010      	b.n	800ebbc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800eb9a:	f7ff ff7d 	bl	800ea98 <tcp_get_next_optbyte>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800eba2:	7afb      	ldrb	r3, [r7, #11]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d914      	bls.n	800ebd2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800eba8:	7afb      	ldrb	r3, [r7, #11]
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <tcp_parseopt+0xe8>)
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	3b02      	subs	r3, #2
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	4b0c      	ldr	r3, [pc, #48]	; (800ebec <tcp_parseopt+0xe8>)
 800ebba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ebbc:	4b0b      	ldr	r3, [pc, #44]	; (800ebec <tcp_parseopt+0xe8>)
 800ebbe:	881a      	ldrh	r2, [r3, #0]
 800ebc0:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <tcp_parseopt+0xe4>)
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d3b3      	bcc.n	800eb30 <tcp_parseopt+0x2c>
 800ebc8:	e004      	b.n	800ebd4 <tcp_parseopt+0xd0>
          return;
 800ebca:	bf00      	nop
 800ebcc:	e002      	b.n	800ebd4 <tcp_parseopt+0xd0>
            return;
 800ebce:	bf00      	nop
 800ebd0:	e000      	b.n	800ebd4 <tcp_parseopt+0xd0>
            return;
 800ebd2:	bf00      	nop
      }
    }
  }
}
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	08017720 	.word	0x08017720
 800ebe0:	08017b84 	.word	0x08017b84
 800ebe4:	0801776c 	.word	0x0801776c
 800ebe8:	2000fe74 	.word	0x2000fe74
 800ebec:	2000fe7c 	.word	0x2000fe7c

0800ebf0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <tcp_trigger_input_pcb_close+0x1c>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f043 0310 	orr.w	r3, r3, #16
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <tcp_trigger_input_pcb_close+0x1c>)
 800ec00:	701a      	strb	r2, [r3, #0]
}
 800ec02:	bf00      	nop
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	2000fe8d 	.word	0x2000fe8d

0800ec10 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00a      	beq.n	800ec38 <tcp_route+0x28>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7a1b      	ldrb	r3, [r3, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d006      	beq.n	800ec38 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	7a1b      	ldrb	r3, [r3, #8]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fb f888 	bl	8009d44 <netif_get_by_index>
 800ec34:	4603      	mov	r3, r0
 800ec36:	e003      	b.n	800ec40 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f003 fecb 	bl	80129d4 <ip4_route>
 800ec3e:	4603      	mov	r3, r0
  }
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ec48:	b590      	push	{r4, r7, lr}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	603b      	str	r3, [r7, #0]
 800ec54:	4613      	mov	r3, r2
 800ec56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <tcp_create_segment+0x22>
 800ec5e:	4b44      	ldr	r3, [pc, #272]	; (800ed70 <tcp_create_segment+0x128>)
 800ec60:	22a3      	movs	r2, #163	; 0xa3
 800ec62:	4944      	ldr	r1, [pc, #272]	; (800ed74 <tcp_create_segment+0x12c>)
 800ec64:	4844      	ldr	r0, [pc, #272]	; (800ed78 <tcp_create_segment+0x130>)
 800ec66:	f005 fc0b 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d105      	bne.n	800ec7c <tcp_create_segment+0x34>
 800ec70:	4b3f      	ldr	r3, [pc, #252]	; (800ed70 <tcp_create_segment+0x128>)
 800ec72:	22a4      	movs	r2, #164	; 0xa4
 800ec74:	4941      	ldr	r1, [pc, #260]	; (800ed7c <tcp_create_segment+0x134>)
 800ec76:	4840      	ldr	r0, [pc, #256]	; (800ed78 <tcp_create_segment+0x130>)
 800ec78:	f005 fc02 	bl	8014480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ec7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	f003 0304 	and.w	r3, r3, #4
 800ec88:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ec8a:	2003      	movs	r0, #3
 800ec8c:	f7fa fd32 	bl	80096f4 <memp_malloc>
 800ec90:	6138      	str	r0, [r7, #16]
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d104      	bne.n	800eca2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ec98:	68b8      	ldr	r0, [r7, #8]
 800ec9a:	f7fb fbe1 	bl	800a460 <pbuf_free>
    return NULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e061      	b.n	800ed66 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eca8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2200      	movs	r2, #0
 800ecae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	68ba      	ldr	r2, [r7, #8]
 800ecb4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	891a      	ldrh	r2, [r3, #8]
 800ecba:	7dfb      	ldrb	r3, [r7, #23]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d205      	bcs.n	800ecce <tcp_create_segment+0x86>
 800ecc2:	4b2b      	ldr	r3, [pc, #172]	; (800ed70 <tcp_create_segment+0x128>)
 800ecc4:	22b0      	movs	r2, #176	; 0xb0
 800ecc6:	492e      	ldr	r1, [pc, #184]	; (800ed80 <tcp_create_segment+0x138>)
 800ecc8:	482b      	ldr	r0, [pc, #172]	; (800ed78 <tcp_create_segment+0x130>)
 800ecca:	f005 fbd9 	bl	8014480 <iprintf>
  seg->len = p->tot_len - optlen;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	891a      	ldrh	r2, [r3, #8]
 800ecd2:	7dfb      	ldrb	r3, [r7, #23]
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ecde:	2114      	movs	r1, #20
 800ece0:	68b8      	ldr	r0, [r7, #8]
 800ece2:	f7fb fb27 	bl	800a334 <pbuf_add_header>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ecec:	6938      	ldr	r0, [r7, #16]
 800ecee:	f7fd f800 	bl	800bcf2 <tcp_seg_free>
    return NULL;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	e037      	b.n	800ed66 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	8ada      	ldrh	r2, [r3, #22]
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	68dc      	ldr	r4, [r3, #12]
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7fa f81b 	bl	8008d44 <lwip_htons>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	8b1a      	ldrh	r2, [r3, #24]
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	68dc      	ldr	r4, [r3, #12]
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	f7fa f812 	bl	8008d44 <lwip_htons>
 800ed20:	4603      	mov	r3, r0
 800ed22:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	68dc      	ldr	r4, [r3, #12]
 800ed28:	6838      	ldr	r0, [r7, #0]
 800ed2a:	f7fa f820 	bl	8008d6e <lwip_htonl>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	089b      	lsrs	r3, r3, #2
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	3305      	adds	r3, #5
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	031b      	lsls	r3, r3, #12
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	4313      	orrs	r3, r2
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	68dc      	ldr	r4, [r3, #12]
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7f9 fff8 	bl	8008d44 <lwip_htons>
 800ed54:	4603      	mov	r3, r0
 800ed56:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	749a      	strb	r2, [r3, #18]
 800ed60:	2200      	movs	r2, #0
 800ed62:	74da      	strb	r2, [r3, #19]
  return seg;
 800ed64:	693b      	ldr	r3, [r7, #16]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	371c      	adds	r7, #28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd90      	pop	{r4, r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	08017ba0 	.word	0x08017ba0
 800ed74:	08017bd4 	.word	0x08017bd4
 800ed78:	08017bf4 	.word	0x08017bf4
 800ed7c:	08017c1c 	.word	0x08017c1c
 800ed80:	08017c40 	.word	0x08017c40

0800ed84 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	607b      	str	r3, [r7, #4]
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73fb      	strb	r3, [r7, #15]
 800ed90:	460b      	mov	r3, r1
 800ed92:	81bb      	strh	r3, [r7, #12]
 800ed94:	4613      	mov	r3, r2
 800ed96:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ed98:	89bb      	ldrh	r3, [r7, #12]
 800ed9a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d105      	bne.n	800edae <tcp_pbuf_prealloc+0x2a>
 800eda2:	4b30      	ldr	r3, [pc, #192]	; (800ee64 <tcp_pbuf_prealloc+0xe0>)
 800eda4:	22e8      	movs	r2, #232	; 0xe8
 800eda6:	4930      	ldr	r1, [pc, #192]	; (800ee68 <tcp_pbuf_prealloc+0xe4>)
 800eda8:	4830      	ldr	r0, [pc, #192]	; (800ee6c <tcp_pbuf_prealloc+0xe8>)
 800edaa:	f005 fb69 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d105      	bne.n	800edc0 <tcp_pbuf_prealloc+0x3c>
 800edb4:	4b2b      	ldr	r3, [pc, #172]	; (800ee64 <tcp_pbuf_prealloc+0xe0>)
 800edb6:	22e9      	movs	r2, #233	; 0xe9
 800edb8:	492d      	ldr	r1, [pc, #180]	; (800ee70 <tcp_pbuf_prealloc+0xec>)
 800edba:	482c      	ldr	r0, [pc, #176]	; (800ee6c <tcp_pbuf_prealloc+0xe8>)
 800edbc:	f005 fb60 	bl	8014480 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800edc0:	89ba      	ldrh	r2, [r7, #12]
 800edc2:	897b      	ldrh	r3, [r7, #10]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d221      	bcs.n	800ee0c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800edc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800edcc:	f003 0302 	and.w	r3, r3, #2
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d111      	bne.n	800edf8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	8b5b      	ldrh	r3, [r3, #26]
 800edd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d115      	bne.n	800ee0c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ede0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d007      	beq.n	800edf8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800edec:	2b00      	cmp	r3, #0
 800edee:	d103      	bne.n	800edf8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d009      	beq.n	800ee0c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800edf8:	89bb      	ldrh	r3, [r7, #12]
 800edfa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800edfe:	f023 0203 	bic.w	r2, r3, #3
 800ee02:	897b      	ldrh	r3, [r7, #10]
 800ee04:	4293      	cmp	r3, r2
 800ee06:	bf28      	it	cs
 800ee08:	4613      	movcs	r3, r2
 800ee0a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ee0c:	8af9      	ldrh	r1, [r7, #22]
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
 800ee10:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fb f83f 	bl	8009e98 <pbuf_alloc>
 800ee1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ee22:	2300      	movs	r3, #0
 800ee24:	e019      	b.n	800ee5a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d006      	beq.n	800ee3c <tcp_pbuf_prealloc+0xb8>
 800ee2e:	4b0d      	ldr	r3, [pc, #52]	; (800ee64 <tcp_pbuf_prealloc+0xe0>)
 800ee30:	f240 120b 	movw	r2, #267	; 0x10b
 800ee34:	490f      	ldr	r1, [pc, #60]	; (800ee74 <tcp_pbuf_prealloc+0xf0>)
 800ee36:	480d      	ldr	r0, [pc, #52]	; (800ee6c <tcp_pbuf_prealloc+0xe8>)
 800ee38:	f005 fb22 	bl	8014480 <iprintf>
  *oversize = p->len - length;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	895a      	ldrh	r2, [r3, #10]
 800ee40:	89bb      	ldrh	r3, [r7, #12]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	89ba      	ldrh	r2, [r7, #12]
 800ee4e:	811a      	strh	r2, [r3, #8]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	891a      	ldrh	r2, [r3, #8]
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	815a      	strh	r2, [r3, #10]
  return p;
 800ee58:	693b      	ldr	r3, [r7, #16]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	08017ba0 	.word	0x08017ba0
 800ee68:	08017c58 	.word	0x08017c58
 800ee6c:	08017bf4 	.word	0x08017bf4
 800ee70:	08017c7c 	.word	0x08017c7c
 800ee74:	08017c9c 	.word	0x08017c9c

0800ee78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	460b      	mov	r3, r1
 800ee82:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d106      	bne.n	800ee98 <tcp_write_checks+0x20>
 800ee8a:	4b33      	ldr	r3, [pc, #204]	; (800ef58 <tcp_write_checks+0xe0>)
 800ee8c:	f240 1233 	movw	r2, #307	; 0x133
 800ee90:	4932      	ldr	r1, [pc, #200]	; (800ef5c <tcp_write_checks+0xe4>)
 800ee92:	4833      	ldr	r0, [pc, #204]	; (800ef60 <tcp_write_checks+0xe8>)
 800ee94:	f005 faf4 	bl	8014480 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	2b04      	cmp	r3, #4
 800ee9e:	d00e      	beq.n	800eebe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800eea4:	2b07      	cmp	r3, #7
 800eea6:	d00a      	beq.n	800eebe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d006      	beq.n	800eebe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d002      	beq.n	800eebe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800eeb8:	f06f 030a 	mvn.w	r3, #10
 800eebc:	e048      	b.n	800ef50 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800eebe:	887b      	ldrh	r3, [r7, #2]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d101      	bne.n	800eec8 <tcp_write_checks+0x50>
    return ERR_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	e043      	b.n	800ef50 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eece:	887a      	ldrh	r2, [r7, #2]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d909      	bls.n	800eee8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800eee2:	f04f 33ff 	mov.w	r3, #4294967295
 800eee6:	e033      	b.n	800ef50 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eeee:	2b08      	cmp	r3, #8
 800eef0:	d909      	bls.n	800ef06 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ef00:	f04f 33ff 	mov.w	r3, #4294967295
 800ef04:	e024      	b.n	800ef50 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00f      	beq.n	800ef30 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d11a      	bne.n	800ef4e <tcp_write_checks+0xd6>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d116      	bne.n	800ef4e <tcp_write_checks+0xd6>
 800ef20:	4b0d      	ldr	r3, [pc, #52]	; (800ef58 <tcp_write_checks+0xe0>)
 800ef22:	f240 1255 	movw	r2, #341	; 0x155
 800ef26:	490f      	ldr	r1, [pc, #60]	; (800ef64 <tcp_write_checks+0xec>)
 800ef28:	480d      	ldr	r0, [pc, #52]	; (800ef60 <tcp_write_checks+0xe8>)
 800ef2a:	f005 faa9 	bl	8014480 <iprintf>
 800ef2e:	e00e      	b.n	800ef4e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d103      	bne.n	800ef40 <tcp_write_checks+0xc8>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d006      	beq.n	800ef4e <tcp_write_checks+0xd6>
 800ef40:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <tcp_write_checks+0xe0>)
 800ef42:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ef46:	4908      	ldr	r1, [pc, #32]	; (800ef68 <tcp_write_checks+0xf0>)
 800ef48:	4805      	ldr	r0, [pc, #20]	; (800ef60 <tcp_write_checks+0xe8>)
 800ef4a:	f005 fa99 	bl	8014480 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	08017ba0 	.word	0x08017ba0
 800ef5c:	08017cb0 	.word	0x08017cb0
 800ef60:	08017bf4 	.word	0x08017bf4
 800ef64:	08017cd0 	.word	0x08017cd0
 800ef68:	08017d0c 	.word	0x08017d0c

0800ef6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ef6c:	b590      	push	{r4, r7, lr}
 800ef6e:	b09b      	sub	sp, #108	; 0x6c
 800ef70:	af04      	add	r7, sp, #16
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	80fb      	strh	r3, [r7, #6]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	653b      	str	r3, [r7, #80]	; 0x50
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef8e:	2300      	movs	r3, #0
 800ef90:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef92:	2300      	movs	r3, #0
 800ef94:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ef96:	2300      	movs	r3, #0
 800ef98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d109      	bne.n	800efc8 <tcp_write+0x5c>
 800efb4:	4ba4      	ldr	r3, [pc, #656]	; (800f248 <tcp_write+0x2dc>)
 800efb6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800efba:	49a4      	ldr	r1, [pc, #656]	; (800f24c <tcp_write+0x2e0>)
 800efbc:	48a4      	ldr	r0, [pc, #656]	; (800f250 <tcp_write+0x2e4>)
 800efbe:	f005 fa5f 	bl	8014480 <iprintf>
 800efc2:	f06f 030f 	mvn.w	r3, #15
 800efc6:	e32a      	b.n	800f61e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efce:	085b      	lsrs	r3, r3, #1
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efd6:	4293      	cmp	r3, r2
 800efd8:	bf28      	it	cs
 800efda:	4613      	movcs	r3, r2
 800efdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800efde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d102      	bne.n	800efea <tcp_write+0x7e>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efe8:	e000      	b.n	800efec <tcp_write+0x80>
 800efea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d109      	bne.n	800f008 <tcp_write+0x9c>
 800eff4:	4b94      	ldr	r3, [pc, #592]	; (800f248 <tcp_write+0x2dc>)
 800eff6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800effa:	4996      	ldr	r1, [pc, #600]	; (800f254 <tcp_write+0x2e8>)
 800effc:	4894      	ldr	r0, [pc, #592]	; (800f250 <tcp_write+0x2e4>)
 800effe:	f005 fa3f 	bl	8014480 <iprintf>
 800f002:	f06f 030f 	mvn.w	r3, #15
 800f006:	e30a      	b.n	800f61e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	4619      	mov	r1, r3
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f7ff ff33 	bl	800ee78 <tcp_write_checks>
 800f012:	4603      	mov	r3, r0
 800f014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f018:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <tcp_write+0xba>
    return err;
 800f020:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f024:	e2fb      	b.n	800f61e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f02c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f030:	2300      	movs	r3, #0
 800f032:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 80f6 	beq.w	800f22c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f044:	653b      	str	r3, [r7, #80]	; 0x50
 800f046:	e002      	b.n	800f04e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d1f8      	bne.n	800f048 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f058:	7a9b      	ldrb	r3, [r3, #10]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	f003 0304 	and.w	r3, r3, #4
 800f062:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f068:	891b      	ldrh	r3, [r3, #8]
 800f06a:	4619      	mov	r1, r3
 800f06c:	8c3b      	ldrh	r3, [r7, #32]
 800f06e:	440b      	add	r3, r1
 800f070:	429a      	cmp	r2, r3
 800f072:	da06      	bge.n	800f082 <tcp_write+0x116>
 800f074:	4b74      	ldr	r3, [pc, #464]	; (800f248 <tcp_write+0x2dc>)
 800f076:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f07a:	4977      	ldr	r1, [pc, #476]	; (800f258 <tcp_write+0x2ec>)
 800f07c:	4874      	ldr	r0, [pc, #464]	; (800f250 <tcp_write+0x2e4>)
 800f07e:	f005 f9ff 	bl	8014480 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f084:	891a      	ldrh	r2, [r3, #8]
 800f086:	8c3b      	ldrh	r3, [r7, #32]
 800f088:	4413      	add	r3, r2
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f098:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f09a:	8a7b      	ldrh	r3, [r7, #18]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d026      	beq.n	800f0ee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f0a0:	8a7b      	ldrh	r3, [r7, #18]
 800f0a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d206      	bcs.n	800f0b6 <tcp_write+0x14a>
 800f0a8:	4b67      	ldr	r3, [pc, #412]	; (800f248 <tcp_write+0x2dc>)
 800f0aa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f0ae:	496b      	ldr	r1, [pc, #428]	; (800f25c <tcp_write+0x2f0>)
 800f0b0:	4867      	ldr	r0, [pc, #412]	; (800f250 <tcp_write+0x2e4>)
 800f0b2:	f005 f9e5 	bl	8014480 <iprintf>
      seg = last_unsent;
 800f0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f0ba:	8a7b      	ldrh	r3, [r7, #18]
 800f0bc:	88fa      	ldrh	r2, [r7, #6]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	bf28      	it	cs
 800f0c2:	4613      	movcs	r3, r2
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	bf28      	it	cs
 800f0cc:	4613      	movcs	r3, r2
 800f0ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f0d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f0dc:	8a7a      	ldrh	r2, [r7, #18]
 800f0de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f0e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f0e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f0ee:	8a7b      	ldrh	r3, [r7, #18]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00b      	beq.n	800f10c <tcp_write+0x1a0>
 800f0f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0f8:	88fb      	ldrh	r3, [r7, #6]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d006      	beq.n	800f10c <tcp_write+0x1a0>
 800f0fe:	4b52      	ldr	r3, [pc, #328]	; (800f248 <tcp_write+0x2dc>)
 800f100:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f104:	4956      	ldr	r1, [pc, #344]	; (800f260 <tcp_write+0x2f4>)
 800f106:	4852      	ldr	r0, [pc, #328]	; (800f250 <tcp_write+0x2e4>)
 800f108:	f005 f9ba 	bl	8014480 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f10c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f110:	88fb      	ldrh	r3, [r7, #6]
 800f112:	429a      	cmp	r2, r3
 800f114:	f080 8167 	bcs.w	800f3e6 <tcp_write+0x47a>
 800f118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 8163 	beq.w	800f3e6 <tcp_write+0x47a>
 800f120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f122:	891b      	ldrh	r3, [r3, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 815e 	beq.w	800f3e6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f12a:	88fa      	ldrh	r2, [r7, #6]
 800f12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f130:	1ad2      	subs	r2, r2, r3
 800f132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f134:	4293      	cmp	r3, r2
 800f136:	bfa8      	it	ge
 800f138:	4613      	movge	r3, r2
 800f13a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f13e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f140:	797b      	ldrb	r3, [r7, #5]
 800f142:	f003 0301 	and.w	r3, r3, #1
 800f146:	2b00      	cmp	r3, #0
 800f148:	d027      	beq.n	800f19a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f14a:	f107 0012 	add.w	r0, r7, #18
 800f14e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f150:	8bf9      	ldrh	r1, [r7, #30]
 800f152:	2301      	movs	r3, #1
 800f154:	9302      	str	r3, [sp, #8]
 800f156:	797b      	ldrb	r3, [r7, #5]
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	4603      	mov	r3, r0
 800f160:	2000      	movs	r0, #0
 800f162:	f7ff fe0f 	bl	800ed84 <tcp_pbuf_prealloc>
 800f166:	6578      	str	r0, [r7, #84]	; 0x54
 800f168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 8225 	beq.w	800f5ba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f172:	6858      	ldr	r0, [r3, #4]
 800f174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	4413      	add	r3, r2
 800f17c:	8bfa      	ldrh	r2, [r7, #30]
 800f17e:	4619      	mov	r1, r3
 800f180:	f005 f968 	bl	8014454 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f184:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f186:	f7fb f9f9 	bl	800a57c <pbuf_clen>
 800f18a:	4603      	mov	r3, r0
 800f18c:	461a      	mov	r2, r3
 800f18e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f192:	4413      	add	r3, r2
 800f194:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f198:	e041      	b.n	800f21e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	637b      	str	r3, [r7, #52]	; 0x34
 800f1a0:	e002      	b.n	800f1a8 <tcp_write+0x23c>
 800f1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800f1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1f8      	bne.n	800f1a2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b2:	7b1b      	ldrb	r3, [r3, #12]
 800f1b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d115      	bne.n	800f1e8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1c2:	8952      	ldrh	r2, [r2, #10]
 800f1c4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f1c6:	68ba      	ldr	r2, [r7, #8]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d10d      	bne.n	800f1e8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f1cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d006      	beq.n	800f1e2 <tcp_write+0x276>
 800f1d4:	4b1c      	ldr	r3, [pc, #112]	; (800f248 <tcp_write+0x2dc>)
 800f1d6:	f240 2231 	movw	r2, #561	; 0x231
 800f1da:	4922      	ldr	r1, [pc, #136]	; (800f264 <tcp_write+0x2f8>)
 800f1dc:	481c      	ldr	r0, [pc, #112]	; (800f250 <tcp_write+0x2e4>)
 800f1de:	f005 f94f 	bl	8014480 <iprintf>
          extendlen = seglen;
 800f1e2:	8bfb      	ldrh	r3, [r7, #30]
 800f1e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f1e6:	e01a      	b.n	800f21e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f1e8:	8bfb      	ldrh	r3, [r7, #30]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	f7fa fe52 	bl	8009e98 <pbuf_alloc>
 800f1f4:	6578      	str	r0, [r7, #84]	; 0x54
 800f1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 81e0 	beq.w	800f5be <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f1fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	441a      	add	r2, r3
 800f206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f208:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f20a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f20c:	f7fb f9b6 	bl	800a57c <pbuf_clen>
 800f210:	4603      	mov	r3, r0
 800f212:	461a      	mov	r2, r3
 800f214:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f218:	4413      	add	r3, r2
 800f21a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f21e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f222:	8bfb      	ldrh	r3, [r7, #30]
 800f224:	4413      	add	r3, r2
 800f226:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f22a:	e0dc      	b.n	800f3e6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 80d7 	beq.w	800f3e6 <tcp_write+0x47a>
 800f238:	4b03      	ldr	r3, [pc, #12]	; (800f248 <tcp_write+0x2dc>)
 800f23a:	f240 224a 	movw	r2, #586	; 0x24a
 800f23e:	490a      	ldr	r1, [pc, #40]	; (800f268 <tcp_write+0x2fc>)
 800f240:	4803      	ldr	r0, [pc, #12]	; (800f250 <tcp_write+0x2e4>)
 800f242:	f005 f91d 	bl	8014480 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f246:	e0ce      	b.n	800f3e6 <tcp_write+0x47a>
 800f248:	08017ba0 	.word	0x08017ba0
 800f24c:	08017d40 	.word	0x08017d40
 800f250:	08017bf4 	.word	0x08017bf4
 800f254:	08017d58 	.word	0x08017d58
 800f258:	08017d8c 	.word	0x08017d8c
 800f25c:	08017da4 	.word	0x08017da4
 800f260:	08017dc4 	.word	0x08017dc4
 800f264:	08017de4 	.word	0x08017de4
 800f268:	08017e10 	.word	0x08017e10
    struct pbuf *p;
    u16_t left = len - pos;
 800f26c:	88fa      	ldrh	r2, [r7, #6]
 800f26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f276:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f282:	8b7a      	ldrh	r2, [r7, #26]
 800f284:	8bbb      	ldrh	r3, [r7, #28]
 800f286:	4293      	cmp	r3, r2
 800f288:	bf28      	it	cs
 800f28a:	4613      	movcs	r3, r2
 800f28c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f28e:	797b      	ldrb	r3, [r7, #5]
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	d036      	beq.n	800f306 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	8b3b      	ldrh	r3, [r7, #24]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	b299      	uxth	r1, r3
 800f2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	bf0c      	ite	eq
 800f2aa:	2301      	moveq	r3, #1
 800f2ac:	2300      	movne	r3, #0
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	f107 0012 	add.w	r0, r7, #18
 800f2b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2b6:	9302      	str	r3, [sp, #8]
 800f2b8:	797b      	ldrb	r3, [r7, #5]
 800f2ba:	9301      	str	r3, [sp, #4]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2036      	movs	r0, #54	; 0x36
 800f2c4:	f7ff fd5e 	bl	800ed84 <tcp_pbuf_prealloc>
 800f2c8:	6338      	str	r0, [r7, #48]	; 0x30
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 8178 	beq.w	800f5c2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	895b      	ldrh	r3, [r3, #10]
 800f2d6:	8b3a      	ldrh	r2, [r7, #24]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d906      	bls.n	800f2ea <tcp_write+0x37e>
 800f2dc:	4b8c      	ldr	r3, [pc, #560]	; (800f510 <tcp_write+0x5a4>)
 800f2de:	f240 2266 	movw	r2, #614	; 0x266
 800f2e2:	498c      	ldr	r1, [pc, #560]	; (800f514 <tcp_write+0x5a8>)
 800f2e4:	488c      	ldr	r0, [pc, #560]	; (800f518 <tcp_write+0x5ac>)
 800f2e6:	f005 f8cb 	bl	8014480 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	685a      	ldr	r2, [r3, #4]
 800f2ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f2f2:	18d0      	adds	r0, r2, r3
 800f2f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	8b3a      	ldrh	r2, [r7, #24]
 800f2fe:	4619      	mov	r1, r3
 800f300:	f005 f8a8 	bl	8014454 <memcpy>
 800f304:	e02f      	b.n	800f366 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f306:	8a7b      	ldrh	r3, [r7, #18]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d006      	beq.n	800f31a <tcp_write+0x3ae>
 800f30c:	4b80      	ldr	r3, [pc, #512]	; (800f510 <tcp_write+0x5a4>)
 800f30e:	f240 2271 	movw	r2, #625	; 0x271
 800f312:	4982      	ldr	r1, [pc, #520]	; (800f51c <tcp_write+0x5b0>)
 800f314:	4880      	ldr	r0, [pc, #512]	; (800f518 <tcp_write+0x5ac>)
 800f316:	f005 f8b3 	bl	8014480 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f31a:	8b3b      	ldrh	r3, [r7, #24]
 800f31c:	2201      	movs	r2, #1
 800f31e:	4619      	mov	r1, r3
 800f320:	2036      	movs	r0, #54	; 0x36
 800f322:	f7fa fdb9 	bl	8009e98 <pbuf_alloc>
 800f326:	6178      	str	r0, [r7, #20]
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f000 814b 	beq.w	800f5c6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	441a      	add	r2, r3
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f33c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f340:	b29b      	uxth	r3, r3
 800f342:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f346:	4619      	mov	r1, r3
 800f348:	2036      	movs	r0, #54	; 0x36
 800f34a:	f7fa fda5 	bl	8009e98 <pbuf_alloc>
 800f34e:	6338      	str	r0, [r7, #48]	; 0x30
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	d103      	bne.n	800f35e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f7fb f882 	bl	800a460 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f35c:	e136      	b.n	800f5cc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f35e:	6979      	ldr	r1, [r7, #20]
 800f360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f362:	f7fb f94b 	bl	800a5fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f368:	f7fb f908 	bl	800a57c <pbuf_clen>
 800f36c:	4603      	mov	r3, r0
 800f36e:	461a      	mov	r2, r3
 800f370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f374:	4413      	add	r3, r2
 800f376:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f37a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f37e:	2b09      	cmp	r3, #9
 800f380:	d903      	bls.n	800f38a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f384:	f7fb f86c 	bl	800a460 <pbuf_free>
      goto memerr;
 800f388:	e120      	b.n	800f5cc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f38e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f392:	441a      	add	r2, r3
 800f394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4613      	mov	r3, r2
 800f39c:	2200      	movs	r2, #0
 800f39e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fc51 	bl	800ec48 <tcp_create_segment>
 800f3a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 810d 	beq.w	800f5ca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d102      	bne.n	800f3bc <tcp_write+0x450>
      queue = seg;
 800f3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3b8:	647b      	str	r3, [r7, #68]	; 0x44
 800f3ba:	e00c      	b.n	800f3d6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <tcp_write+0x464>
 800f3c2:	4b53      	ldr	r3, [pc, #332]	; (800f510 <tcp_write+0x5a4>)
 800f3c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f3c8:	4955      	ldr	r1, [pc, #340]	; (800f520 <tcp_write+0x5b4>)
 800f3ca:	4853      	ldr	r0, [pc, #332]	; (800f518 <tcp_write+0x5ac>)
 800f3cc:	f005 f858 	bl	8014480 <iprintf>
      prev_seg->next = seg;
 800f3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3d4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f3da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f3de:	8b3b      	ldrh	r3, [r7, #24]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f3e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f3ea:	88fb      	ldrh	r3, [r7, #6]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	f4ff af3d 	bcc.w	800f26c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f3f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d02c      	beq.n	800f452 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3fe:	e01e      	b.n	800f43e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	891a      	ldrh	r2, [r3, #8]
 800f404:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f406:	4413      	add	r3, r2
 800f408:	b29a      	uxth	r2, r3
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d110      	bne.n	800f438 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f41c:	8952      	ldrh	r2, [r2, #10]
 800f41e:	4413      	add	r3, r2
 800f420:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f422:	68b9      	ldr	r1, [r7, #8]
 800f424:	4618      	mov	r0, r3
 800f426:	f005 f815 	bl	8014454 <memcpy>
        p->len += oversize_used;
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	895a      	ldrh	r2, [r3, #10]
 800f42e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f430:	4413      	add	r3, r2
 800f432:	b29a      	uxth	r2, r3
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1dd      	bne.n	800f400 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800f444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f446:	891a      	ldrh	r2, [r3, #8]
 800f448:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f44a:	4413      	add	r3, r2
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f450:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f452:	8a7a      	ldrh	r2, [r7, #18]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d018      	beq.n	800f492 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f462:	2b00      	cmp	r3, #0
 800f464:	d106      	bne.n	800f474 <tcp_write+0x508>
 800f466:	4b2a      	ldr	r3, [pc, #168]	; (800f510 <tcp_write+0x5a4>)
 800f468:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f46c:	492d      	ldr	r1, [pc, #180]	; (800f524 <tcp_write+0x5b8>)
 800f46e:	482a      	ldr	r0, [pc, #168]	; (800f518 <tcp_write+0x5ac>)
 800f470:	f005 f806 	bl	8014480 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb f8be 	bl	800a5fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f482:	891a      	ldrh	r2, [r3, #8]
 800f484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f486:	891b      	ldrh	r3, [r3, #8]
 800f488:	4413      	add	r3, r2
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48e:	811a      	strh	r2, [r3, #8]
 800f490:	e037      	b.n	800f502 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800f492:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d034      	beq.n	800f502 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d003      	beq.n	800f4a6 <tcp_write+0x53a>
 800f49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <tcp_write+0x548>
 800f4a6:	4b1a      	ldr	r3, [pc, #104]	; (800f510 <tcp_write+0x5a4>)
 800f4a8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f4ac:	491e      	ldr	r1, [pc, #120]	; (800f528 <tcp_write+0x5bc>)
 800f4ae:	481a      	ldr	r0, [pc, #104]	; (800f518 <tcp_write+0x5ac>)
 800f4b0:	f004 ffe6 	bl	8014480 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4ba:	e009      	b.n	800f4d0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	891a      	ldrh	r2, [r3, #8]
 800f4c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4c2:	4413      	add	r3, r2
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1f1      	bne.n	800f4bc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	891a      	ldrh	r2, [r3, #8]
 800f4dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4de:	4413      	add	r3, r2
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	895a      	ldrh	r2, [r3, #10]
 800f4ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4ec:	4413      	add	r3, r2
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f6:	891a      	ldrh	r2, [r3, #8]
 800f4f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4fa:	4413      	add	r3, r2
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f500:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f504:	2b00      	cmp	r3, #0
 800f506:	d111      	bne.n	800f52c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f50c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f50e:	e010      	b.n	800f532 <tcp_write+0x5c6>
 800f510:	08017ba0 	.word	0x08017ba0
 800f514:	08017e40 	.word	0x08017e40
 800f518:	08017bf4 	.word	0x08017bf4
 800f51c:	08017e80 	.word	0x08017e80
 800f520:	08017e90 	.word	0x08017e90
 800f524:	08017ea4 	.word	0x08017ea4
 800f528:	08017edc 	.word	0x08017edc
  } else {
    last_unsent->next = queue;
 800f52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f530:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f536:	88fb      	ldrh	r3, [r7, #6]
 800f538:	441a      	add	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f544:	88fb      	ldrh	r3, [r7, #6]
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	b29a      	uxth	r2, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f556:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00e      	beq.n	800f582 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10a      	bne.n	800f582 <tcp_write+0x616>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f570:	2b00      	cmp	r3, #0
 800f572:	d106      	bne.n	800f582 <tcp_write+0x616>
 800f574:	4b2c      	ldr	r3, [pc, #176]	; (800f628 <tcp_write+0x6bc>)
 800f576:	f240 3212 	movw	r2, #786	; 0x312
 800f57a:	492c      	ldr	r1, [pc, #176]	; (800f62c <tcp_write+0x6c0>)
 800f57c:	482c      	ldr	r0, [pc, #176]	; (800f630 <tcp_write+0x6c4>)
 800f57e:	f004 ff7f 	bl	8014480 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f584:	2b00      	cmp	r3, #0
 800f586:	d016      	beq.n	800f5b6 <tcp_write+0x64a>
 800f588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d012      	beq.n	800f5b6 <tcp_write+0x64a>
 800f590:	797b      	ldrb	r3, [r7, #5]
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10d      	bne.n	800f5b6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29c      	uxth	r4, r3
 800f5a2:	2008      	movs	r0, #8
 800f5a4:	f7f9 fbce 	bl	8008d44 <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	4322      	orrs	r2, r4
 800f5b2:	b292      	uxth	r2, r2
 800f5b4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	e031      	b.n	800f61e <tcp_write+0x6b2>
          goto memerr;
 800f5ba:	bf00      	nop
 800f5bc:	e006      	b.n	800f5cc <tcp_write+0x660>
            goto memerr;
 800f5be:	bf00      	nop
 800f5c0:	e004      	b.n	800f5cc <tcp_write+0x660>
        goto memerr;
 800f5c2:	bf00      	nop
 800f5c4:	e002      	b.n	800f5cc <tcp_write+0x660>
        goto memerr;
 800f5c6:	bf00      	nop
 800f5c8:	e000      	b.n	800f5cc <tcp_write+0x660>
      goto memerr;
 800f5ca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	8b5b      	ldrh	r3, [r3, #26]
 800f5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d002      	beq.n	800f5e6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f5e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f5e2:	f7fa ff3d 	bl	800a460 <pbuf_free>
  }
  if (queue != NULL) {
 800f5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800f5ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f5ee:	f7fc fb6b 	bl	800bcc8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00e      	beq.n	800f61a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10a      	bne.n	800f61a <tcp_write+0x6ae>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d106      	bne.n	800f61a <tcp_write+0x6ae>
 800f60c:	4b06      	ldr	r3, [pc, #24]	; (800f628 <tcp_write+0x6bc>)
 800f60e:	f240 3227 	movw	r2, #807	; 0x327
 800f612:	4906      	ldr	r1, [pc, #24]	; (800f62c <tcp_write+0x6c0>)
 800f614:	4806      	ldr	r0, [pc, #24]	; (800f630 <tcp_write+0x6c4>)
 800f616:	f004 ff33 	bl	8014480 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f61a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f61e:	4618      	mov	r0, r3
 800f620:	375c      	adds	r7, #92	; 0x5c
 800f622:	46bd      	mov	sp, r7
 800f624:	bd90      	pop	{r4, r7, pc}
 800f626:	bf00      	nop
 800f628:	08017ba0 	.word	0x08017ba0
 800f62c:	08017f14 	.word	0x08017f14
 800f630:	08017bf4 	.word	0x08017bf4

0800f634 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f634:	b590      	push	{r4, r7, lr}
 800f636:	b08b      	sub	sp, #44	; 0x2c
 800f638:	af02      	add	r7, sp, #8
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	460b      	mov	r3, r1
 800f63e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f640:	2300      	movs	r3, #0
 800f642:	61fb      	str	r3, [r7, #28]
 800f644:	2300      	movs	r3, #0
 800f646:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f648:	2300      	movs	r3, #0
 800f64a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <tcp_split_unsent_seg+0x2c>
 800f652:	4b95      	ldr	r3, [pc, #596]	; (800f8a8 <tcp_split_unsent_seg+0x274>)
 800f654:	f240 324b 	movw	r2, #843	; 0x34b
 800f658:	4994      	ldr	r1, [pc, #592]	; (800f8ac <tcp_split_unsent_seg+0x278>)
 800f65a:	4895      	ldr	r0, [pc, #596]	; (800f8b0 <tcp_split_unsent_seg+0x27c>)
 800f65c:	f004 ff10 	bl	8014480 <iprintf>

  useg = pcb->unsent;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d102      	bne.n	800f672 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f66c:	f04f 33ff 	mov.w	r3, #4294967295
 800f670:	e116      	b.n	800f8a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f672:	887b      	ldrh	r3, [r7, #2]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f678:	4b8b      	ldr	r3, [pc, #556]	; (800f8a8 <tcp_split_unsent_seg+0x274>)
 800f67a:	f240 3253 	movw	r2, #851	; 0x353
 800f67e:	498d      	ldr	r1, [pc, #564]	; (800f8b4 <tcp_split_unsent_seg+0x280>)
 800f680:	488b      	ldr	r0, [pc, #556]	; (800f8b0 <tcp_split_unsent_seg+0x27c>)
 800f682:	f004 fefd 	bl	8014480 <iprintf>
    return ERR_VAL;
 800f686:	f06f 0305 	mvn.w	r3, #5
 800f68a:	e109      	b.n	800f8a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	891b      	ldrh	r3, [r3, #8]
 800f690:	887a      	ldrh	r2, [r7, #2]
 800f692:	429a      	cmp	r2, r3
 800f694:	d301      	bcc.n	800f69a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	e102      	b.n	800f8a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f69e:	887a      	ldrh	r2, [r7, #2]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d906      	bls.n	800f6b2 <tcp_split_unsent_seg+0x7e>
 800f6a4:	4b80      	ldr	r3, [pc, #512]	; (800f8a8 <tcp_split_unsent_seg+0x274>)
 800f6a6:	f240 325b 	movw	r2, #859	; 0x35b
 800f6aa:	4983      	ldr	r1, [pc, #524]	; (800f8b8 <tcp_split_unsent_seg+0x284>)
 800f6ac:	4880      	ldr	r0, [pc, #512]	; (800f8b0 <tcp_split_unsent_seg+0x27c>)
 800f6ae:	f004 fee7 	bl	8014480 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	891b      	ldrh	r3, [r3, #8]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <tcp_split_unsent_seg+0x94>
 800f6ba:	4b7b      	ldr	r3, [pc, #492]	; (800f8a8 <tcp_split_unsent_seg+0x274>)
 800f6bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f6c0:	497e      	ldr	r1, [pc, #504]	; (800f8bc <tcp_split_unsent_seg+0x288>)
 800f6c2:	487b      	ldr	r0, [pc, #492]	; (800f8b0 <tcp_split_unsent_seg+0x27c>)
 800f6c4:	f004 fedc 	bl	8014480 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	7a9b      	ldrb	r3, [r3, #10]
 800f6cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f6ce:	7bfb      	ldrb	r3, [r7, #15]
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	f003 0304 	and.w	r3, r3, #4
 800f6d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	891a      	ldrh	r2, [r3, #8]
 800f6de:	887b      	ldrh	r3, [r7, #2]
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f6e4:	7bbb      	ldrb	r3, [r7, #14]
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	89bb      	ldrh	r3, [r7, #12]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	2036      	movs	r0, #54	; 0x36
 800f6f6:	f7fa fbcf 	bl	8009e98 <pbuf_alloc>
 800f6fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 80b7 	beq.w	800f872 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	891a      	ldrh	r2, [r3, #8]
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	891b      	ldrh	r3, [r3, #8]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	b29a      	uxth	r2, r3
 800f712:	887b      	ldrh	r3, [r7, #2]
 800f714:	4413      	add	r3, r2
 800f716:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	6858      	ldr	r0, [r3, #4]
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	685a      	ldr	r2, [r3, #4]
 800f720:	7bbb      	ldrb	r3, [r7, #14]
 800f722:	18d1      	adds	r1, r2, r3
 800f724:	897b      	ldrh	r3, [r7, #10]
 800f726:	89ba      	ldrh	r2, [r7, #12]
 800f728:	f7fb f8a0 	bl	800a86c <pbuf_copy_partial>
 800f72c:	4603      	mov	r3, r0
 800f72e:	461a      	mov	r2, r3
 800f730:	89bb      	ldrh	r3, [r7, #12]
 800f732:	4293      	cmp	r3, r2
 800f734:	f040 809f 	bne.w	800f876 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	899b      	ldrh	r3, [r3, #12]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	4618      	mov	r0, r3
 800f742:	f7f9 faff 	bl	8008d44 <lwip_htons>
 800f746:	4603      	mov	r3, r0
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f74e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f750:	2300      	movs	r3, #0
 800f752:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f754:	7efb      	ldrb	r3, [r7, #27]
 800f756:	f003 0308 	and.w	r3, r3, #8
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d007      	beq.n	800f76e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f75e:	7efb      	ldrb	r3, [r7, #27]
 800f760:	f023 0308 	bic.w	r3, r3, #8
 800f764:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f766:	7ebb      	ldrb	r3, [r7, #26]
 800f768:	f043 0308 	orr.w	r3, r3, #8
 800f76c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f76e:	7efb      	ldrb	r3, [r7, #27]
 800f770:	f003 0301 	and.w	r3, r3, #1
 800f774:	2b00      	cmp	r3, #0
 800f776:	d007      	beq.n	800f788 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f778:	7efb      	ldrb	r3, [r7, #27]
 800f77a:	f023 0301 	bic.w	r3, r3, #1
 800f77e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f780:	7ebb      	ldrb	r3, [r7, #26]
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7f9 faed 	bl	8008d6e <lwip_htonl>
 800f794:	4602      	mov	r2, r0
 800f796:	887b      	ldrh	r3, [r7, #2]
 800f798:	18d1      	adds	r1, r2, r3
 800f79a:	7eba      	ldrb	r2, [r7, #26]
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	6939      	ldr	r1, [r7, #16]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff fa4f 	bl	800ec48 <tcp_create_segment>
 800f7aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d063      	beq.n	800f87a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fa fee0 	bl	800a57c <pbuf_clen>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7c6:	1a9b      	subs	r3, r3, r2
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	6858      	ldr	r0, [r3, #4]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	891a      	ldrh	r2, [r3, #8]
 800f7da:	89bb      	ldrh	r3, [r7, #12]
 800f7dc:	1ad3      	subs	r3, r2, r3
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	f7fa fcb7 	bl	800a154 <pbuf_realloc>
  useg->len -= remainder;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	891a      	ldrh	r2, [r3, #8]
 800f7ea:	89bb      	ldrh	r3, [r7, #12]
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	899b      	ldrh	r3, [r3, #12]
 800f7fa:	b29c      	uxth	r4, r3
 800f7fc:	7efb      	ldrb	r3, [r7, #27]
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4618      	mov	r0, r3
 800f802:	f7f9 fa9f 	bl	8008d44 <lwip_htons>
 800f806:	4603      	mov	r3, r0
 800f808:	461a      	mov	r2, r3
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	4322      	orrs	r2, r4
 800f810:	b292      	uxth	r2, r2
 800f812:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fa feaf 	bl	800a57c <pbuf_clen>
 800f81e:	4603      	mov	r3, r0
 800f820:	461a      	mov	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f828:	4413      	add	r3, r2
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	4618      	mov	r0, r3
 800f838:	f7fa fea0 	bl	800a57c <pbuf_clen>
 800f83c:	4603      	mov	r3, r0
 800f83e:	461a      	mov	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f846:	4413      	add	r3, r2
 800f848:	b29a      	uxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d103      	bne.n	800f86e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	e016      	b.n	800f8a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f872:	bf00      	nop
 800f874:	e002      	b.n	800f87c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f876:	bf00      	nop
 800f878:	e000      	b.n	800f87c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f87a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d006      	beq.n	800f890 <tcp_split_unsent_seg+0x25c>
 800f882:	4b09      	ldr	r3, [pc, #36]	; (800f8a8 <tcp_split_unsent_seg+0x274>)
 800f884:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f888:	490d      	ldr	r1, [pc, #52]	; (800f8c0 <tcp_split_unsent_seg+0x28c>)
 800f88a:	4809      	ldr	r0, [pc, #36]	; (800f8b0 <tcp_split_unsent_seg+0x27c>)
 800f88c:	f004 fdf8 	bl	8014480 <iprintf>
  if (p != NULL) {
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f896:	6938      	ldr	r0, [r7, #16]
 800f898:	f7fa fde2 	bl	800a460 <pbuf_free>
  }

  return ERR_MEM;
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3724      	adds	r7, #36	; 0x24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd90      	pop	{r4, r7, pc}
 800f8a8:	08017ba0 	.word	0x08017ba0
 800f8ac:	08017f34 	.word	0x08017f34
 800f8b0:	08017bf4 	.word	0x08017bf4
 800f8b4:	08017f58 	.word	0x08017f58
 800f8b8:	08017f7c 	.word	0x08017f7c
 800f8bc:	08017f8c 	.word	0x08017f8c
 800f8c0:	08017f9c 	.word	0x08017f9c

0800f8c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f8c4:	b590      	push	{r4, r7, lr}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_send_fin+0x1c>
 800f8d2:	4b21      	ldr	r3, [pc, #132]	; (800f958 <tcp_send_fin+0x94>)
 800f8d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f8d8:	4920      	ldr	r1, [pc, #128]	; (800f95c <tcp_send_fin+0x98>)
 800f8da:	4821      	ldr	r0, [pc, #132]	; (800f960 <tcp_send_fin+0x9c>)
 800f8dc:	f004 fdd0 	bl	8014480 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d02e      	beq.n	800f946 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ec:	60fb      	str	r3, [r7, #12]
 800f8ee:	e002      	b.n	800f8f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d1f8      	bne.n	800f8f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	899b      	ldrh	r3, [r3, #12]
 800f904:	b29b      	uxth	r3, r3
 800f906:	4618      	mov	r0, r3
 800f908:	f7f9 fa1c 	bl	8008d44 <lwip_htons>
 800f90c:	4603      	mov	r3, r0
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	f003 0307 	and.w	r3, r3, #7
 800f914:	2b00      	cmp	r3, #0
 800f916:	d116      	bne.n	800f946 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	899b      	ldrh	r3, [r3, #12]
 800f91e:	b29c      	uxth	r4, r3
 800f920:	2001      	movs	r0, #1
 800f922:	f7f9 fa0f 	bl	8008d44 <lwip_htons>
 800f926:	4603      	mov	r3, r0
 800f928:	461a      	mov	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	4322      	orrs	r2, r4
 800f930:	b292      	uxth	r2, r2
 800f932:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	8b5b      	ldrh	r3, [r3, #26]
 800f938:	f043 0320 	orr.w	r3, r3, #32
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	e004      	b.n	800f950 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f946:	2101      	movs	r1, #1
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f80b 	bl	800f964 <tcp_enqueue_flags>
 800f94e:	4603      	mov	r3, r0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	bd90      	pop	{r4, r7, pc}
 800f958:	08017ba0 	.word	0x08017ba0
 800f95c:	08017fa8 	.word	0x08017fa8
 800f960:	08017bf4 	.word	0x08017bf4

0800f964 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b08a      	sub	sp, #40	; 0x28
 800f968:	af02      	add	r7, sp, #8
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	460b      	mov	r3, r1
 800f96e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f970:	2300      	movs	r3, #0
 800f972:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f978:	78fb      	ldrb	r3, [r7, #3]
 800f97a:	f003 0303 	and.w	r3, r3, #3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <tcp_enqueue_flags+0x2c>
 800f982:	4b67      	ldr	r3, [pc, #412]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800f984:	f240 4211 	movw	r2, #1041	; 0x411
 800f988:	4966      	ldr	r1, [pc, #408]	; (800fb24 <tcp_enqueue_flags+0x1c0>)
 800f98a:	4867      	ldr	r0, [pc, #412]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800f98c:	f004 fd78 	bl	8014480 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d106      	bne.n	800f9a4 <tcp_enqueue_flags+0x40>
 800f996:	4b62      	ldr	r3, [pc, #392]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800f998:	f240 4213 	movw	r2, #1043	; 0x413
 800f99c:	4963      	ldr	r1, [pc, #396]	; (800fb2c <tcp_enqueue_flags+0x1c8>)
 800f99e:	4862      	ldr	r0, [pc, #392]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800f9a0:	f004 fd6e 	bl	8014480 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f9a4:	78fb      	ldrb	r3, [r7, #3]
 800f9a6:	f003 0302 	and.w	r3, r3, #2
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9b2:	7ffb      	ldrb	r3, [r7, #31]
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	f003 0304 	and.w	r3, r3, #4
 800f9bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f9be:	7dfb      	ldrb	r3, [r7, #23]
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	2036      	movs	r0, #54	; 0x36
 800f9ca:	f7fa fa65 	bl	8009e98 <pbuf_alloc>
 800f9ce:	6138      	str	r0, [r7, #16]
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d109      	bne.n	800f9ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e8:	e095      	b.n	800fb16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	895a      	ldrh	r2, [r3, #10]
 800f9ee:	7dfb      	ldrb	r3, [r7, #23]
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d206      	bcs.n	800fa04 <tcp_enqueue_flags+0xa0>
 800f9f6:	4b4a      	ldr	r3, [pc, #296]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800f9f8:	f240 4239 	movw	r2, #1081	; 0x439
 800f9fc:	494c      	ldr	r1, [pc, #304]	; (800fb30 <tcp_enqueue_flags+0x1cc>)
 800f9fe:	484a      	ldr	r0, [pc, #296]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800fa00:	f004 fd3e 	bl	8014480 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fa08:	78fa      	ldrb	r2, [r7, #3]
 800fa0a:	7ffb      	ldrb	r3, [r7, #31]
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	460b      	mov	r3, r1
 800fa10:	6939      	ldr	r1, [r7, #16]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff f918 	bl	800ec48 <tcp_create_segment>
 800fa18:	60f8      	str	r0, [r7, #12]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d109      	bne.n	800fa34 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa32:	e070      	b.n	800fb16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	f003 0303 	and.w	r3, r3, #3
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d006      	beq.n	800fa4e <tcp_enqueue_flags+0xea>
 800fa40:	4b37      	ldr	r3, [pc, #220]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800fa42:	f240 4242 	movw	r2, #1090	; 0x442
 800fa46:	493b      	ldr	r1, [pc, #236]	; (800fb34 <tcp_enqueue_flags+0x1d0>)
 800fa48:	4837      	ldr	r0, [pc, #220]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800fa4a:	f004 fd19 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	891b      	ldrh	r3, [r3, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d006      	beq.n	800fa64 <tcp_enqueue_flags+0x100>
 800fa56:	4b32      	ldr	r3, [pc, #200]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800fa58:	f240 4243 	movw	r2, #1091	; 0x443
 800fa5c:	4936      	ldr	r1, [pc, #216]	; (800fb38 <tcp_enqueue_flags+0x1d4>)
 800fa5e:	4832      	ldr	r0, [pc, #200]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800fa60:	f004 fd0e 	bl	8014480 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d103      	bne.n	800fa74 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa72:	e00d      	b.n	800fa90 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa78:	61bb      	str	r3, [r7, #24]
 800fa7a:	e002      	b.n	800fa82 <tcp_enqueue_flags+0x11e>
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	61bb      	str	r3, [r7, #24]
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1f8      	bne.n	800fa7c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	f003 0302 	and.w	r3, r3, #2
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d104      	bne.n	800faac <tcp_enqueue_flags+0x148>
 800faa2:	78fb      	ldrb	r3, [r7, #3]
 800faa4:	f003 0301 	and.w	r3, r3, #1
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d004      	beq.n	800fab6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fab6:	78fb      	ldrb	r3, [r7, #3]
 800fab8:	f003 0301 	and.w	r3, r3, #1
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	8b5b      	ldrh	r3, [r3, #26]
 800fac4:	f043 0320 	orr.w	r3, r3, #32
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fa fd52 	bl	800a57c <pbuf_clen>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fae2:	4413      	add	r3, r2
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00e      	beq.n	800fb14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10a      	bne.n	800fb14 <tcp_enqueue_flags+0x1b0>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <tcp_enqueue_flags+0x1b0>
 800fb06:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <tcp_enqueue_flags+0x1bc>)
 800fb08:	f240 4265 	movw	r2, #1125	; 0x465
 800fb0c:	490b      	ldr	r1, [pc, #44]	; (800fb3c <tcp_enqueue_flags+0x1d8>)
 800fb0e:	4806      	ldr	r0, [pc, #24]	; (800fb28 <tcp_enqueue_flags+0x1c4>)
 800fb10:	f004 fcb6 	bl	8014480 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3720      	adds	r7, #32
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	08017ba0 	.word	0x08017ba0
 800fb24:	08017fc4 	.word	0x08017fc4
 800fb28:	08017bf4 	.word	0x08017bf4
 800fb2c:	0801801c 	.word	0x0801801c
 800fb30:	0801803c 	.word	0x0801803c
 800fb34:	08018078 	.word	0x08018078
 800fb38:	08018090 	.word	0x08018090
 800fb3c:	080180bc 	.word	0x080180bc

0800fb40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fb40:	b5b0      	push	{r4, r5, r7, lr}
 800fb42:	b08a      	sub	sp, #40	; 0x28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <tcp_output+0x1c>
 800fb4e:	4b8a      	ldr	r3, [pc, #552]	; (800fd78 <tcp_output+0x238>)
 800fb50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fb54:	4989      	ldr	r1, [pc, #548]	; (800fd7c <tcp_output+0x23c>)
 800fb56:	488a      	ldr	r0, [pc, #552]	; (800fd80 <tcp_output+0x240>)
 800fb58:	f004 fc92 	bl	8014480 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d106      	bne.n	800fb72 <tcp_output+0x32>
 800fb64:	4b84      	ldr	r3, [pc, #528]	; (800fd78 <tcp_output+0x238>)
 800fb66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fb6a:	4986      	ldr	r1, [pc, #536]	; (800fd84 <tcp_output+0x244>)
 800fb6c:	4884      	ldr	r0, [pc, #528]	; (800fd80 <tcp_output+0x240>)
 800fb6e:	f004 fc87 	bl	8014480 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fb72:	4b85      	ldr	r3, [pc, #532]	; (800fd88 <tcp_output+0x248>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d101      	bne.n	800fb80 <tcp_output+0x40>
    return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e1ce      	b.n	800ff1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	bf28      	it	cs
 800fb90:	4613      	movcs	r3, r2
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10b      	bne.n	800fbba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	8b5b      	ldrh	r3, [r3, #26]
 800fba6:	f003 0302 	and.w	r3, r3, #2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f000 81aa 	beq.w	800ff04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fdcb 	bl	801074c <tcp_send_empty_ack>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	e1b1      	b.n	800ff1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7ff f824 	bl	800ec10 <tcp_route>
 800fbc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <tcp_output+0x96>
    return ERR_RTE;
 800fbd0:	f06f 0303 	mvn.w	r3, #3
 800fbd4:	e1a3      	b.n	800ff1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d003      	beq.n	800fbe4 <tcp_output+0xa4>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d111      	bne.n	800fc08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <tcp_output+0xb0>
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	3304      	adds	r3, #4
 800fbee:	e000      	b.n	800fbf2 <tcp_output+0xb2>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d102      	bne.n	800fc00 <tcp_output+0xc0>
      return ERR_RTE;
 800fbfa:	f06f 0303 	mvn.w	r3, #3
 800fbfe:	e18e      	b.n	800ff1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7f9 f8ad 	bl	8008d6e <lwip_htonl>
 800fc14:	4602      	mov	r2, r0
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc1e:	8912      	ldrh	r2, [r2, #8]
 800fc20:	4413      	add	r3, r2
 800fc22:	69ba      	ldr	r2, [r7, #24]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d227      	bcs.n	800fc78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc2e:	461a      	mov	r2, r3
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d114      	bne.n	800fc60 <tcp_output+0x120>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d110      	bne.n	800fc60 <tcp_output+0x120>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10b      	bne.n	800fc60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	8b5b      	ldrh	r3, [r3, #26]
 800fc64:	f003 0302 	and.w	r3, r3, #2
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 814d 	beq.w	800ff08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fd6c 	bl	801074c <tcp_send_empty_ack>
 800fc74:	4603      	mov	r3, r0
 800fc76:	e152      	b.n	800ff1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 811c 	beq.w	800fec6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fc8e:	e002      	b.n	800fc96 <tcp_output+0x156>
 800fc90:	6a3b      	ldr	r3, [r7, #32]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	623b      	str	r3, [r7, #32]
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d1f8      	bne.n	800fc90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fc9e:	e112      	b.n	800fec6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	899b      	ldrh	r3, [r3, #12]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7f9 f84b 	bl	8008d44 <lwip_htons>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	f003 0304 	and.w	r3, r3, #4
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d006      	beq.n	800fcc8 <tcp_output+0x188>
 800fcba:	4b2f      	ldr	r3, [pc, #188]	; (800fd78 <tcp_output+0x238>)
 800fcbc:	f240 5236 	movw	r2, #1334	; 0x536
 800fcc0:	4932      	ldr	r1, [pc, #200]	; (800fd8c <tcp_output+0x24c>)
 800fcc2:	482f      	ldr	r0, [pc, #188]	; (800fd80 <tcp_output+0x240>)
 800fcc4:	f004 fbdc 	bl	8014480 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d01f      	beq.n	800fd10 <tcp_output+0x1d0>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	8b5b      	ldrh	r3, [r3, #26]
 800fcd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d119      	bne.n	800fd10 <tcp_output+0x1d0>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00b      	beq.n	800fcfc <tcp_output+0x1bc>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d110      	bne.n	800fd10 <tcp_output+0x1d0>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcf2:	891a      	ldrh	r2, [r3, #8]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d209      	bcs.n	800fd10 <tcp_output+0x1d0>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d004      	beq.n	800fd10 <tcp_output+0x1d0>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd0c:	2b08      	cmp	r3, #8
 800fd0e:	d901      	bls.n	800fd14 <tcp_output+0x1d4>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e000      	b.n	800fd16 <tcp_output+0x1d6>
 800fd14:	2300      	movs	r3, #0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8b5b      	ldrh	r3, [r3, #26]
 800fd1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 80e4 	beq.w	800fef0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	7d1b      	ldrb	r3, [r3, #20]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d00d      	beq.n	800fd4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	b29c      	uxth	r4, r3
 800fd38:	2010      	movs	r0, #16
 800fd3a:	f7f9 f803 	bl	8008d44 <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	461a      	mov	r2, r3
 800fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	4322      	orrs	r2, r4
 800fd48:	b292      	uxth	r2, r2
 800fd4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd52:	f000 f909 	bl	800ff68 <tcp_output_segment>
 800fd56:	4603      	mov	r3, r0
 800fd58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d016      	beq.n	800fd90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8b5b      	ldrh	r3, [r3, #26]
 800fd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	835a      	strh	r2, [r3, #26]
      return err;
 800fd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd74:	e0d3      	b.n	800ff1e <tcp_output+0x3de>
 800fd76:	bf00      	nop
 800fd78:	08017ba0 	.word	0x08017ba0
 800fd7c:	080180e4 	.word	0x080180e4
 800fd80:	08017bf4 	.word	0x08017bf4
 800fd84:	080180fc 	.word	0x080180fc
 800fd88:	2000fe94 	.word	0x2000fe94
 800fd8c:	08018124 	.word	0x08018124
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	7d1b      	ldrb	r3, [r3, #20]
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d006      	beq.n	800fdae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8b5b      	ldrh	r3, [r3, #26]
 800fda4:	f023 0303 	bic.w	r3, r3, #3
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7f8 ffda 	bl	8008d6e <lwip_htonl>
 800fdba:	4604      	mov	r4, r0
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	891b      	ldrh	r3, [r3, #8]
 800fdc0:	461d      	mov	r5, r3
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	899b      	ldrh	r3, [r3, #12]
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7f8 ffba 	bl	8008d44 <lwip_htons>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	f003 0303 	and.w	r3, r3, #3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <tcp_output+0x2a0>
 800fddc:	2301      	movs	r3, #1
 800fdde:	e000      	b.n	800fde2 <tcp_output+0x2a2>
 800fde0:	2300      	movs	r3, #0
 800fde2:	442b      	add	r3, r5
 800fde4:	4423      	add	r3, r4
 800fde6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	da02      	bge.n	800fdfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	891b      	ldrh	r3, [r3, #8]
 800fdfe:	461c      	mov	r4, r3
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	899b      	ldrh	r3, [r3, #12]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f8 ff9b 	bl	8008d44 <lwip_htons>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	f003 0303 	and.w	r3, r3, #3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <tcp_output+0x2de>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e000      	b.n	800fe20 <tcp_output+0x2e0>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	4423      	add	r3, r4
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d049      	beq.n	800feba <tcp_output+0x37a>
      seg->next = NULL;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d105      	bne.n	800fe40 <tcp_output+0x300>
        pcb->unacked = seg;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	623b      	str	r3, [r7, #32]
 800fe3e:	e03f      	b.n	800fec0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7f8 ff91 	bl	8008d6e <lwip_htonl>
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7f8 ff8a 	bl	8008d6e <lwip_htonl>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	1ae3      	subs	r3, r4, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	da24      	bge.n	800feac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	3370      	adds	r3, #112	; 0x70
 800fe66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe68:	e002      	b.n	800fe70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d011      	beq.n	800fe9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7f8 ff74 	bl	8008d6e <lwip_htonl>
 800fe86:	4604      	mov	r4, r0
 800fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f8 ff6d 	bl	8008d6e <lwip_htonl>
 800fe94:	4603      	mov	r3, r0
 800fe96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dbe6      	blt.n	800fe6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	e009      	b.n	800fec0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800feac:	6a3b      	ldr	r3, [r7, #32]
 800feae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	623b      	str	r3, [r7, #32]
 800feb8:	e002      	b.n	800fec0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800feba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800febc:	f7fb ff19 	bl	800bcf2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fec4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d012      	beq.n	800fef2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f8 ff4b 	bl	8008d6e <lwip_htonl>
 800fed8:	4602      	mov	r2, r0
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fee2:	8912      	ldrh	r2, [r2, #8]
 800fee4:	4413      	add	r3, r2
  while (seg != NULL &&
 800fee6:	69ba      	ldr	r2, [r7, #24]
 800fee8:	429a      	cmp	r2, r3
 800feea:	f4bf aed9 	bcs.w	800fca0 <tcp_output+0x160>
 800feee:	e000      	b.n	800fef2 <tcp_output+0x3b2>
      break;
 800fef0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d108      	bne.n	800ff0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ff02:	e004      	b.n	800ff0e <tcp_output+0x3ce>
    goto output_done;
 800ff04:	bf00      	nop
 800ff06:	e002      	b.n	800ff0e <tcp_output+0x3ce>
    goto output_done;
 800ff08:	bf00      	nop
 800ff0a:	e000      	b.n	800ff0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ff0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	8b5b      	ldrh	r3, [r3, #26]
 800ff12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3728      	adds	r7, #40	; 0x28
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bdb0      	pop	{r4, r5, r7, pc}
 800ff26:	bf00      	nop

0800ff28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d106      	bne.n	800ff44 <tcp_output_segment_busy+0x1c>
 800ff36:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <tcp_output_segment_busy+0x34>)
 800ff38:	f240 529a 	movw	r2, #1434	; 0x59a
 800ff3c:	4908      	ldr	r1, [pc, #32]	; (800ff60 <tcp_output_segment_busy+0x38>)
 800ff3e:	4809      	ldr	r0, [pc, #36]	; (800ff64 <tcp_output_segment_busy+0x3c>)
 800ff40:	f004 fa9e 	bl	8014480 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	7b9b      	ldrb	r3, [r3, #14]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d001      	beq.n	800ff52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e000      	b.n	800ff54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	08017ba0 	.word	0x08017ba0
 800ff60:	0801813c 	.word	0x0801813c
 800ff64:	08017bf4 	.word	0x08017bf4

0800ff68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ff68:	b5b0      	push	{r4, r5, r7, lr}
 800ff6a:	b08c      	sub	sp, #48	; 0x30
 800ff6c:	af04      	add	r7, sp, #16
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d106      	bne.n	800ff88 <tcp_output_segment+0x20>
 800ff7a:	4b63      	ldr	r3, [pc, #396]	; (8010108 <tcp_output_segment+0x1a0>)
 800ff7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ff80:	4962      	ldr	r1, [pc, #392]	; (801010c <tcp_output_segment+0x1a4>)
 800ff82:	4863      	ldr	r0, [pc, #396]	; (8010110 <tcp_output_segment+0x1a8>)
 800ff84:	f004 fa7c 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <tcp_output_segment+0x34>
 800ff8e:	4b5e      	ldr	r3, [pc, #376]	; (8010108 <tcp_output_segment+0x1a0>)
 800ff90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ff94:	495f      	ldr	r1, [pc, #380]	; (8010114 <tcp_output_segment+0x1ac>)
 800ff96:	485e      	ldr	r0, [pc, #376]	; (8010110 <tcp_output_segment+0x1a8>)
 800ff98:	f004 fa72 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <tcp_output_segment+0x48>
 800ffa2:	4b59      	ldr	r3, [pc, #356]	; (8010108 <tcp_output_segment+0x1a0>)
 800ffa4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ffa8:	495b      	ldr	r1, [pc, #364]	; (8010118 <tcp_output_segment+0x1b0>)
 800ffaa:	4859      	ldr	r0, [pc, #356]	; (8010110 <tcp_output_segment+0x1a8>)
 800ffac:	f004 fa68 	bl	8014480 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7ff ffb9 	bl	800ff28 <tcp_output_segment_busy>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	e09f      	b.n	8010100 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68dc      	ldr	r4, [r3, #12]
 800ffc8:	4610      	mov	r0, r2
 800ffca:	f7f8 fed0 	bl	8008d6e <lwip_htonl>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	68dc      	ldr	r4, [r3, #12]
 800ffda:	4610      	mov	r0, r2
 800ffdc:	f7f8 feb2 	bl	8008d44 <lwip_htons>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe8:	68ba      	ldr	r2, [r7, #8]
 800ffea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ffec:	441a      	add	r2, r3
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	3314      	adds	r3, #20
 800fff8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	7a9b      	ldrb	r3, [r3, #10]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d015      	beq.n	8010032 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	3304      	adds	r3, #4
 801000a:	461a      	mov	r2, r3
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010012:	f7fc fa33 	bl	800c47c <tcp_eff_send_mss_netif>
 8010016:	4603      	mov	r3, r0
 8010018:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801001a:	8b7b      	ldrh	r3, [r7, #26]
 801001c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010020:	4618      	mov	r0, r3
 8010022:	f7f8 fea4 	bl	8008d6e <lwip_htonl>
 8010026:	4602      	mov	r2, r0
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	3304      	adds	r3, #4
 8010030:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010038:	2b00      	cmp	r3, #0
 801003a:	da02      	bge.n	8010042 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	2200      	movs	r2, #0
 8010040:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10c      	bne.n	8010064 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801004a:	4b34      	ldr	r3, [pc, #208]	; (801011c <tcp_output_segment+0x1b4>)
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	f7f8 fe88 	bl	8008d6e <lwip_htonl>
 801005e:	4602      	mov	r2, r0
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68da      	ldr	r2, [r3, #12]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	8959      	ldrh	r1, [r3, #10]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	8b3a      	ldrh	r2, [r7, #24]
 801007e:	1a8a      	subs	r2, r1, r2
 8010080:	b292      	uxth	r2, r2
 8010082:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	8919      	ldrh	r1, [r3, #8]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	8b3a      	ldrh	r2, [r7, #24]
 8010090:	1a8a      	subs	r2, r1, r2
 8010092:	b292      	uxth	r2, r2
 8010094:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	68d2      	ldr	r2, [r2, #12]
 801009e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	741a      	strb	r2, [r3, #16]
 80100a8:	2200      	movs	r2, #0
 80100aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	f103 0214 	add.w	r2, r3, #20
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	7a9b      	ldrb	r3, [r3, #10]
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	f003 0304 	and.w	r3, r3, #4
 80100be:	4413      	add	r3, r2
 80100c0:	69fa      	ldr	r2, [r7, #28]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d006      	beq.n	80100d4 <tcp_output_segment+0x16c>
 80100c6:	4b10      	ldr	r3, [pc, #64]	; (8010108 <tcp_output_segment+0x1a0>)
 80100c8:	f240 621c 	movw	r2, #1564	; 0x61c
 80100cc:	4914      	ldr	r1, [pc, #80]	; (8010120 <tcp_output_segment+0x1b8>)
 80100ce:	4810      	ldr	r0, [pc, #64]	; (8010110 <tcp_output_segment+0x1a8>)
 80100d0:	f004 f9d6 	bl	8014480 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6858      	ldr	r0, [r3, #4]
 80100d8:	68b9      	ldr	r1, [r7, #8]
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	1d1c      	adds	r4, r3, #4
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	7add      	ldrb	r5, [r3, #11]
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	7a9b      	ldrb	r3, [r3, #10]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	9202      	str	r2, [sp, #8]
 80100ea:	2206      	movs	r2, #6
 80100ec:	9201      	str	r2, [sp, #4]
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	462b      	mov	r3, r5
 80100f2:	4622      	mov	r2, r4
 80100f4:	f002 fe2c 	bl	8012d50 <ip4_output_if>
 80100f8:	4603      	mov	r3, r0
 80100fa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80100fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3720      	adds	r7, #32
 8010104:	46bd      	mov	sp, r7
 8010106:	bdb0      	pop	{r4, r5, r7, pc}
 8010108:	08017ba0 	.word	0x08017ba0
 801010c:	08018164 	.word	0x08018164
 8010110:	08017bf4 	.word	0x08017bf4
 8010114:	08018184 	.word	0x08018184
 8010118:	080181a4 	.word	0x080181a4
 801011c:	2000fe48 	.word	0x2000fe48
 8010120:	080181c8 	.word	0x080181c8

08010124 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010124:	b5b0      	push	{r4, r5, r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d106      	bne.n	8010140 <tcp_rexmit_rto_prepare+0x1c>
 8010132:	4b31      	ldr	r3, [pc, #196]	; (80101f8 <tcp_rexmit_rto_prepare+0xd4>)
 8010134:	f240 6263 	movw	r2, #1635	; 0x663
 8010138:	4930      	ldr	r1, [pc, #192]	; (80101fc <tcp_rexmit_rto_prepare+0xd8>)
 801013a:	4831      	ldr	r0, [pc, #196]	; (8010200 <tcp_rexmit_rto_prepare+0xdc>)
 801013c:	f004 f9a0 	bl	8014480 <iprintf>

  if (pcb->unacked == NULL) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010144:	2b00      	cmp	r3, #0
 8010146:	d102      	bne.n	801014e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010148:	f06f 0305 	mvn.w	r3, #5
 801014c:	e050      	b.n	80101f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010152:	60fb      	str	r3, [r7, #12]
 8010154:	e00b      	b.n	801016e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f7ff fee6 	bl	800ff28 <tcp_output_segment_busy>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010162:	f06f 0305 	mvn.w	r3, #5
 8010166:	e043      	b.n	80101f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1ef      	bne.n	8010156 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f7ff fed6 	bl	800ff28 <tcp_output_segment_busy>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010182:	f06f 0305 	mvn.w	r3, #5
 8010186:	e033      	b.n	80101f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8b5b      	ldrh	r3, [r3, #26]
 80101a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7f8 fddb 	bl	8008d6e <lwip_htonl>
 80101b8:	4604      	mov	r4, r0
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	891b      	ldrh	r3, [r3, #8]
 80101be:	461d      	mov	r5, r3
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	899b      	ldrh	r3, [r3, #12]
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f8 fdbb 	bl	8008d44 <lwip_htons>
 80101ce:	4603      	mov	r3, r0
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	f003 0303 	and.w	r3, r3, #3
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d001      	beq.n	80101de <tcp_rexmit_rto_prepare+0xba>
 80101da:	2301      	movs	r3, #1
 80101dc:	e000      	b.n	80101e0 <tcp_rexmit_rto_prepare+0xbc>
 80101de:	2300      	movs	r3, #0
 80101e0:	442b      	add	r3, r5
 80101e2:	18e2      	adds	r2, r4, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bdb0      	pop	{r4, r5, r7, pc}
 80101f8:	08017ba0 	.word	0x08017ba0
 80101fc:	080181dc 	.word	0x080181dc
 8010200:	08017bf4 	.word	0x08017bf4

08010204 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <tcp_rexmit_rto_commit+0x1c>
 8010212:	4b0d      	ldr	r3, [pc, #52]	; (8010248 <tcp_rexmit_rto_commit+0x44>)
 8010214:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010218:	490c      	ldr	r1, [pc, #48]	; (801024c <tcp_rexmit_rto_commit+0x48>)
 801021a:	480d      	ldr	r0, [pc, #52]	; (8010250 <tcp_rexmit_rto_commit+0x4c>)
 801021c:	f004 f930 	bl	8014480 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010226:	2bff      	cmp	r3, #255	; 0xff
 8010228:	d007      	beq.n	801023a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010230:	3301      	adds	r3, #1
 8010232:	b2da      	uxtb	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fc80 	bl	800fb40 <tcp_output>
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	08017ba0 	.word	0x08017ba0
 801024c:	08018200 	.word	0x08018200
 8010250:	08017bf4 	.word	0x08017bf4

08010254 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d106      	bne.n	8010270 <tcp_rexmit_rto+0x1c>
 8010262:	4b0a      	ldr	r3, [pc, #40]	; (801028c <tcp_rexmit_rto+0x38>)
 8010264:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010268:	4909      	ldr	r1, [pc, #36]	; (8010290 <tcp_rexmit_rto+0x3c>)
 801026a:	480a      	ldr	r0, [pc, #40]	; (8010294 <tcp_rexmit_rto+0x40>)
 801026c:	f004 f908 	bl	8014480 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7ff ff57 	bl	8010124 <tcp_rexmit_rto_prepare>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffc1 	bl	8010204 <tcp_rexmit_rto_commit>
  }
}
 8010282:	bf00      	nop
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	08017ba0 	.word	0x08017ba0
 8010290:	08018224 	.word	0x08018224
 8010294:	08017bf4 	.word	0x08017bf4

08010298 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010298:	b590      	push	{r4, r7, lr}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <tcp_rexmit+0x1c>
 80102a6:	4b2f      	ldr	r3, [pc, #188]	; (8010364 <tcp_rexmit+0xcc>)
 80102a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80102ac:	492e      	ldr	r1, [pc, #184]	; (8010368 <tcp_rexmit+0xd0>)
 80102ae:	482f      	ldr	r0, [pc, #188]	; (801036c <tcp_rexmit+0xd4>)
 80102b0:	f004 f8e6 	bl	8014480 <iprintf>

  if (pcb->unacked == NULL) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d102      	bne.n	80102c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80102bc:	f06f 0305 	mvn.w	r3, #5
 80102c0:	e04c      	b.n	801035c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80102c8:	68b8      	ldr	r0, [r7, #8]
 80102ca:	f7ff fe2d 	bl	800ff28 <tcp_output_segment_busy>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80102d4:	f06f 0305 	mvn.w	r3, #5
 80102d8:	e040      	b.n	801035c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	336c      	adds	r3, #108	; 0x6c
 80102e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80102e8:	e002      	b.n	80102f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d011      	beq.n	801031c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	4618      	mov	r0, r3
 8010302:	f7f8 fd34 	bl	8008d6e <lwip_htonl>
 8010306:	4604      	mov	r4, r0
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4618      	mov	r0, r3
 8010310:	f7f8 fd2d 	bl	8008d6e <lwip_htonl>
 8010314:	4603      	mov	r3, r0
 8010316:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010318:	2b00      	cmp	r3, #0
 801031a:	dbe6      	blt.n	80102ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d103      	bne.n	801033a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010340:	2bff      	cmp	r3, #255	; 0xff
 8010342:	d007      	beq.n	8010354 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801034a:	3301      	adds	r3, #1
 801034c:	b2da      	uxtb	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3714      	adds	r7, #20
 8010360:	46bd      	mov	sp, r7
 8010362:	bd90      	pop	{r4, r7, pc}
 8010364:	08017ba0 	.word	0x08017ba0
 8010368:	08018240 	.word	0x08018240
 801036c:	08017bf4 	.word	0x08017bf4

08010370 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <tcp_rexmit_fast+0x1c>
 801037e:	4b2a      	ldr	r3, [pc, #168]	; (8010428 <tcp_rexmit_fast+0xb8>)
 8010380:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010384:	4929      	ldr	r1, [pc, #164]	; (801042c <tcp_rexmit_fast+0xbc>)
 8010386:	482a      	ldr	r0, [pc, #168]	; (8010430 <tcp_rexmit_fast+0xc0>)
 8010388:	f004 f87a 	bl	8014480 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010390:	2b00      	cmp	r3, #0
 8010392:	d044      	beq.n	801041e <tcp_rexmit_fast+0xae>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	8b5b      	ldrh	r3, [r3, #26]
 8010398:	f003 0304 	and.w	r3, r3, #4
 801039c:	2b00      	cmp	r3, #0
 801039e:	d13e      	bne.n	801041e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7ff ff79 	bl	8010298 <tcp_rexmit>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d138      	bne.n	801041e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103b8:	4293      	cmp	r3, r2
 80103ba:	bf28      	it	cs
 80103bc:	4613      	movcs	r3, r2
 80103be:	b29b      	uxth	r3, r3
 80103c0:	0fda      	lsrs	r2, r3, #31
 80103c2:	4413      	add	r3, r2
 80103c4:	105b      	asrs	r3, r3, #1
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80103d4:	461a      	mov	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	429a      	cmp	r2, r3
 80103de:	d206      	bcs.n	80103ee <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103e4:	005b      	lsls	r3, r3, #1
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103f8:	4619      	mov	r1, r3
 80103fa:	0049      	lsls	r1, r1, #1
 80103fc:	440b      	add	r3, r1
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4413      	add	r3, r2
 8010402:	b29a      	uxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	8b5b      	ldrh	r3, [r3, #26]
 801040e:	f043 0304 	orr.w	r3, r3, #4
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801041e:	bf00      	nop
 8010420:	3708      	adds	r7, #8
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	08017ba0 	.word	0x08017ba0
 801042c:	08018258 	.word	0x08018258
 8010430:	08017bf4 	.word	0x08017bf4

08010434 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	607b      	str	r3, [r7, #4]
 801043e:	460b      	mov	r3, r1
 8010440:	817b      	strh	r3, [r7, #10]
 8010442:	4613      	mov	r3, r2
 8010444:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010446:	897a      	ldrh	r2, [r7, #10]
 8010448:	893b      	ldrh	r3, [r7, #8]
 801044a:	4413      	add	r3, r2
 801044c:	b29b      	uxth	r3, r3
 801044e:	3314      	adds	r3, #20
 8010450:	b29b      	uxth	r3, r3
 8010452:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010456:	4619      	mov	r1, r3
 8010458:	2022      	movs	r0, #34	; 0x22
 801045a:	f7f9 fd1d 	bl	8009e98 <pbuf_alloc>
 801045e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d04d      	beq.n	8010502 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010466:	897b      	ldrh	r3, [r7, #10]
 8010468:	3313      	adds	r3, #19
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	8952      	ldrh	r2, [r2, #10]
 801046e:	4293      	cmp	r3, r2
 8010470:	db06      	blt.n	8010480 <tcp_output_alloc_header_common+0x4c>
 8010472:	4b26      	ldr	r3, [pc, #152]	; (801050c <tcp_output_alloc_header_common+0xd8>)
 8010474:	f240 7223 	movw	r2, #1827	; 0x723
 8010478:	4925      	ldr	r1, [pc, #148]	; (8010510 <tcp_output_alloc_header_common+0xdc>)
 801047a:	4826      	ldr	r0, [pc, #152]	; (8010514 <tcp_output_alloc_header_common+0xe0>)
 801047c:	f004 f800 	bl	8014480 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010486:	8c3b      	ldrh	r3, [r7, #32]
 8010488:	4618      	mov	r0, r3
 801048a:	f7f8 fc5b 	bl	8008d44 <lwip_htons>
 801048e:	4603      	mov	r3, r0
 8010490:	461a      	mov	r2, r3
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010498:	4618      	mov	r0, r3
 801049a:	f7f8 fc53 	bl	8008d44 <lwip_htons>
 801049e:	4603      	mov	r3, r0
 80104a0:	461a      	mov	r2, r3
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7f8 fc5e 	bl	8008d6e <lwip_htonl>
 80104b2:	4602      	mov	r2, r0
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80104b8:	897b      	ldrh	r3, [r7, #10]
 80104ba:	089b      	lsrs	r3, r3, #2
 80104bc:	b29b      	uxth	r3, r3
 80104be:	3305      	adds	r3, #5
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	031b      	lsls	r3, r3, #12
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	4313      	orrs	r3, r2
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f8 fc37 	bl	8008d44 <lwip_htons>
 80104d6:	4603      	mov	r3, r0
 80104d8:	461a      	mov	r2, r3
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80104de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f8 fc2f 	bl	8008d44 <lwip_htons>
 80104e6:	4603      	mov	r3, r0
 80104e8:	461a      	mov	r2, r3
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	2200      	movs	r2, #0
 80104f2:	741a      	strb	r2, [r3, #16]
 80104f4:	2200      	movs	r2, #0
 80104f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	2200      	movs	r2, #0
 80104fc:	749a      	strb	r2, [r3, #18]
 80104fe:	2200      	movs	r2, #0
 8010500:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010502:	697b      	ldr	r3, [r7, #20]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	08017ba0 	.word	0x08017ba0
 8010510:	08018278 	.word	0x08018278
 8010514:	08017bf4 	.word	0x08017bf4

08010518 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010518:	b5b0      	push	{r4, r5, r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af04      	add	r7, sp, #16
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	607b      	str	r3, [r7, #4]
 8010522:	460b      	mov	r3, r1
 8010524:	817b      	strh	r3, [r7, #10]
 8010526:	4613      	mov	r3, r2
 8010528:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d106      	bne.n	801053e <tcp_output_alloc_header+0x26>
 8010530:	4b15      	ldr	r3, [pc, #84]	; (8010588 <tcp_output_alloc_header+0x70>)
 8010532:	f240 7242 	movw	r2, #1858	; 0x742
 8010536:	4915      	ldr	r1, [pc, #84]	; (801058c <tcp_output_alloc_header+0x74>)
 8010538:	4815      	ldr	r0, [pc, #84]	; (8010590 <tcp_output_alloc_header+0x78>)
 801053a:	f003 ffa1 	bl	8014480 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	8adb      	ldrh	r3, [r3, #22]
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	8b12      	ldrh	r2, [r2, #24]
 801054a:	68f9      	ldr	r1, [r7, #12]
 801054c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801054e:	893d      	ldrh	r5, [r7, #8]
 8010550:	897c      	ldrh	r4, [r7, #10]
 8010552:	9103      	str	r1, [sp, #12]
 8010554:	2110      	movs	r1, #16
 8010556:	9102      	str	r1, [sp, #8]
 8010558:	9201      	str	r2, [sp, #4]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	462a      	mov	r2, r5
 8010560:	4621      	mov	r1, r4
 8010562:	f7ff ff67 	bl	8010434 <tcp_output_alloc_header_common>
 8010566:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d006      	beq.n	801057c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010576:	441a      	add	r2, r3
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801057c:	697b      	ldr	r3, [r7, #20]
}
 801057e:	4618      	mov	r0, r3
 8010580:	3718      	adds	r7, #24
 8010582:	46bd      	mov	sp, r7
 8010584:	bdb0      	pop	{r4, r5, r7, pc}
 8010586:	bf00      	nop
 8010588:	08017ba0 	.word	0x08017ba0
 801058c:	080182a8 	.word	0x080182a8
 8010590:	08017bf4 	.word	0x08017bf4

08010594 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b088      	sub	sp, #32
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	4611      	mov	r1, r2
 80105a0:	461a      	mov	r2, r3
 80105a2:	460b      	mov	r3, r1
 80105a4:	71fb      	strb	r3, [r7, #7]
 80105a6:	4613      	mov	r3, r2
 80105a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d106      	bne.n	80105c2 <tcp_output_fill_options+0x2e>
 80105b4:	4b13      	ldr	r3, [pc, #76]	; (8010604 <tcp_output_fill_options+0x70>)
 80105b6:	f240 7256 	movw	r2, #1878	; 0x756
 80105ba:	4913      	ldr	r1, [pc, #76]	; (8010608 <tcp_output_fill_options+0x74>)
 80105bc:	4813      	ldr	r0, [pc, #76]	; (801060c <tcp_output_fill_options+0x78>)
 80105be:	f003 ff5f 	bl	8014480 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	3314      	adds	r3, #20
 80105cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	f103 0214 	add.w	r2, r3, #20
 80105d4:	8bfb      	ldrh	r3, [r7, #30]
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	4619      	mov	r1, r3
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	f003 0304 	and.w	r3, r3, #4
 80105e2:	440b      	add	r3, r1
 80105e4:	4413      	add	r3, r2
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d006      	beq.n	80105fa <tcp_output_fill_options+0x66>
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <tcp_output_fill_options+0x70>)
 80105ee:	f240 7275 	movw	r2, #1909	; 0x775
 80105f2:	4907      	ldr	r1, [pc, #28]	; (8010610 <tcp_output_fill_options+0x7c>)
 80105f4:	4805      	ldr	r0, [pc, #20]	; (801060c <tcp_output_fill_options+0x78>)
 80105f6:	f003 ff43 	bl	8014480 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80105fa:	bf00      	nop
 80105fc:	3720      	adds	r7, #32
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	08017ba0 	.word	0x08017ba0
 8010608:	080182d0 	.word	0x080182d0
 801060c:	08017bf4 	.word	0x08017bf4
 8010610:	080181c8 	.word	0x080181c8

08010614 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08a      	sub	sp, #40	; 0x28
 8010618:	af04      	add	r7, sp, #16
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
 8010620:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d106      	bne.n	8010636 <tcp_output_control_segment+0x22>
 8010628:	4b1c      	ldr	r3, [pc, #112]	; (801069c <tcp_output_control_segment+0x88>)
 801062a:	f240 7287 	movw	r2, #1927	; 0x787
 801062e:	491c      	ldr	r1, [pc, #112]	; (80106a0 <tcp_output_control_segment+0x8c>)
 8010630:	481c      	ldr	r0, [pc, #112]	; (80106a4 <tcp_output_control_segment+0x90>)
 8010632:	f003 ff25 	bl	8014480 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	6879      	ldr	r1, [r7, #4]
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7fe fae8 	bl	800ec10 <tcp_route>
 8010640:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d102      	bne.n	801064e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010648:	23fc      	movs	r3, #252	; 0xfc
 801064a:	75fb      	strb	r3, [r7, #23]
 801064c:	e01c      	b.n	8010688 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d006      	beq.n	8010662 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	7adb      	ldrb	r3, [r3, #11]
 8010658:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	7a9b      	ldrb	r3, [r3, #10]
 801065e:	757b      	strb	r3, [r7, #21]
 8010660:	e003      	b.n	801066a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010662:	23ff      	movs	r3, #255	; 0xff
 8010664:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801066a:	7dba      	ldrb	r2, [r7, #22]
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	9302      	str	r3, [sp, #8]
 8010670:	2306      	movs	r3, #6
 8010672:	9301      	str	r3, [sp, #4]
 8010674:	7d7b      	ldrb	r3, [r7, #21]
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	4613      	mov	r3, r2
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	68b8      	ldr	r0, [r7, #8]
 8010680:	f002 fb66 	bl	8012d50 <ip4_output_if>
 8010684:	4603      	mov	r3, r0
 8010686:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010688:	68b8      	ldr	r0, [r7, #8]
 801068a:	f7f9 fee9 	bl	800a460 <pbuf_free>
  return err;
 801068e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3718      	adds	r7, #24
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	08017ba0 	.word	0x08017ba0
 80106a0:	080182f8 	.word	0x080182f8
 80106a4:	08017bf4 	.word	0x08017bf4

080106a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80106a8:	b590      	push	{r4, r7, lr}
 80106aa:	b08b      	sub	sp, #44	; 0x2c
 80106ac:	af04      	add	r7, sp, #16
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d106      	bne.n	80106ca <tcp_rst+0x22>
 80106bc:	4b1f      	ldr	r3, [pc, #124]	; (801073c <tcp_rst+0x94>)
 80106be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80106c2:	491f      	ldr	r1, [pc, #124]	; (8010740 <tcp_rst+0x98>)
 80106c4:	481f      	ldr	r0, [pc, #124]	; (8010744 <tcp_rst+0x9c>)
 80106c6:	f003 fedb 	bl	8014480 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d106      	bne.n	80106de <tcp_rst+0x36>
 80106d0:	4b1a      	ldr	r3, [pc, #104]	; (801073c <tcp_rst+0x94>)
 80106d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80106d6:	491c      	ldr	r1, [pc, #112]	; (8010748 <tcp_rst+0xa0>)
 80106d8:	481a      	ldr	r0, [pc, #104]	; (8010744 <tcp_rst+0x9c>)
 80106da:	f003 fed1 	bl	8014480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80106de:	2300      	movs	r3, #0
 80106e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80106e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80106e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80106e8:	7dfb      	ldrb	r3, [r7, #23]
 80106ea:	b29c      	uxth	r4, r3
 80106ec:	68b8      	ldr	r0, [r7, #8]
 80106ee:	f7f8 fb3e 	bl	8008d6e <lwip_htonl>
 80106f2:	4602      	mov	r2, r0
 80106f4:	8abb      	ldrh	r3, [r7, #20]
 80106f6:	9303      	str	r3, [sp, #12]
 80106f8:	2314      	movs	r3, #20
 80106fa:	9302      	str	r3, [sp, #8]
 80106fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	4613      	mov	r3, r2
 8010706:	2200      	movs	r2, #0
 8010708:	4621      	mov	r1, r4
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff fe92 	bl	8010434 <tcp_output_alloc_header_common>
 8010710:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00c      	beq.n	8010732 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2200      	movs	r2, #0
 801071c:	6939      	ldr	r1, [r7, #16]
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f7ff ff38 	bl	8010594 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	683a      	ldr	r2, [r7, #0]
 8010728:	6939      	ldr	r1, [r7, #16]
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f7ff ff72 	bl	8010614 <tcp_output_control_segment>
 8010730:	e000      	b.n	8010734 <tcp_rst+0x8c>
    return;
 8010732:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010734:	371c      	adds	r7, #28
 8010736:	46bd      	mov	sp, r7
 8010738:	bd90      	pop	{r4, r7, pc}
 801073a:	bf00      	nop
 801073c:	08017ba0 	.word	0x08017ba0
 8010740:	08018324 	.word	0x08018324
 8010744:	08017bf4 	.word	0x08017bf4
 8010748:	08018340 	.word	0x08018340

0801074c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801074c:	b590      	push	{r4, r7, lr}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010754:	2300      	movs	r3, #0
 8010756:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <tcp_send_empty_ack+0x24>
 8010762:	4b28      	ldr	r3, [pc, #160]	; (8010804 <tcp_send_empty_ack+0xb8>)
 8010764:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010768:	4927      	ldr	r1, [pc, #156]	; (8010808 <tcp_send_empty_ack+0xbc>)
 801076a:	4828      	ldr	r0, [pc, #160]	; (801080c <tcp_send_empty_ack+0xc0>)
 801076c:	f003 fe88 	bl	8014480 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010770:	7dfb      	ldrb	r3, [r7, #23]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801077c:	7d7b      	ldrb	r3, [r7, #21]
 801077e:	b29c      	uxth	r4, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010784:	4618      	mov	r0, r3
 8010786:	f7f8 faf2 	bl	8008d6e <lwip_htonl>
 801078a:	4603      	mov	r3, r0
 801078c:	2200      	movs	r2, #0
 801078e:	4621      	mov	r1, r4
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7ff fec1 	bl	8010518 <tcp_output_alloc_header>
 8010796:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d109      	bne.n	80107b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8b5b      	ldrh	r3, [r3, #26]
 80107a2:	f043 0303 	orr.w	r3, r3, #3
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80107ac:	f06f 0301 	mvn.w	r3, #1
 80107b0:	e023      	b.n	80107fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80107b2:	7dbb      	ldrb	r3, [r7, #22]
 80107b4:	7dfa      	ldrb	r2, [r7, #23]
 80107b6:	6939      	ldr	r1, [r7, #16]
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff feeb 	bl	8010594 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	3304      	adds	r3, #4
 80107c4:	6939      	ldr	r1, [r7, #16]
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f7ff ff24 	bl	8010614 <tcp_output_control_segment>
 80107cc:	4603      	mov	r3, r0
 80107ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80107d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f043 0303 	orr.w	r3, r3, #3
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	835a      	strh	r2, [r3, #26]
 80107e6:	e006      	b.n	80107f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8b5b      	ldrh	r3, [r3, #26]
 80107ec:	f023 0303 	bic.w	r3, r3, #3
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80107f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	371c      	adds	r7, #28
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd90      	pop	{r4, r7, pc}
 8010802:	bf00      	nop
 8010804:	08017ba0 	.word	0x08017ba0
 8010808:	0801835c 	.word	0x0801835c
 801080c:	08017bf4 	.word	0x08017bf4

08010810 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010810:	b590      	push	{r4, r7, lr}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010818:	2300      	movs	r3, #0
 801081a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d106      	bne.n	8010830 <tcp_keepalive+0x20>
 8010822:	4b18      	ldr	r3, [pc, #96]	; (8010884 <tcp_keepalive+0x74>)
 8010824:	f640 0224 	movw	r2, #2084	; 0x824
 8010828:	4917      	ldr	r1, [pc, #92]	; (8010888 <tcp_keepalive+0x78>)
 801082a:	4818      	ldr	r0, [pc, #96]	; (801088c <tcp_keepalive+0x7c>)
 801082c:	f003 fe28 	bl	8014480 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010830:	7dfb      	ldrb	r3, [r7, #23]
 8010832:	b29c      	uxth	r4, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010838:	3b01      	subs	r3, #1
 801083a:	4618      	mov	r0, r3
 801083c:	f7f8 fa97 	bl	8008d6e <lwip_htonl>
 8010840:	4603      	mov	r3, r0
 8010842:	2200      	movs	r2, #0
 8010844:	4621      	mov	r1, r4
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7ff fe66 	bl	8010518 <tcp_output_alloc_header>
 801084c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d102      	bne.n	801085a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010854:	f04f 33ff 	mov.w	r3, #4294967295
 8010858:	e010      	b.n	801087c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	2200      	movs	r2, #0
 801085e:	6939      	ldr	r1, [r7, #16]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff fe97 	bl	8010594 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3304      	adds	r3, #4
 801086c:	6939      	ldr	r1, [r7, #16]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff fed0 	bl	8010614 <tcp_output_control_segment>
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801087c:	4618      	mov	r0, r3
 801087e:	371c      	adds	r7, #28
 8010880:	46bd      	mov	sp, r7
 8010882:	bd90      	pop	{r4, r7, pc}
 8010884:	08017ba0 	.word	0x08017ba0
 8010888:	0801837c 	.word	0x0801837c
 801088c:	08017bf4 	.word	0x08017bf4

08010890 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010890:	b590      	push	{r4, r7, lr}
 8010892:	b08b      	sub	sp, #44	; 0x2c
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010898:	2300      	movs	r3, #0
 801089a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d106      	bne.n	80108b2 <tcp_zero_window_probe+0x22>
 80108a4:	4b4c      	ldr	r3, [pc, #304]	; (80109d8 <tcp_zero_window_probe+0x148>)
 80108a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80108aa:	494c      	ldr	r1, [pc, #304]	; (80109dc <tcp_zero_window_probe+0x14c>)
 80108ac:	484c      	ldr	r0, [pc, #304]	; (80109e0 <tcp_zero_window_probe+0x150>)
 80108ae:	f003 fde7 	bl	8014480 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	e086      	b.n	80109d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80108c8:	2bff      	cmp	r3, #255	; 0xff
 80108ca:	d007      	beq.n	80108dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80108d2:	3301      	adds	r3, #1
 80108d4:	b2da      	uxtb	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	899b      	ldrh	r3, [r3, #12]
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7f8 fa2d 	bl	8008d44 <lwip_htons>
 80108ea:	4603      	mov	r3, r0
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	f003 0301 	and.w	r3, r3, #1
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d005      	beq.n	8010902 <tcp_zero_window_probe+0x72>
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	891b      	ldrh	r3, [r3, #8]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <tcp_zero_window_probe+0x72>
 80108fe:	2301      	movs	r3, #1
 8010900:	e000      	b.n	8010904 <tcp_zero_window_probe+0x74>
 8010902:	2300      	movs	r3, #0
 8010904:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010906:	7ffb      	ldrb	r3, [r7, #31]
 8010908:	2b00      	cmp	r3, #0
 801090a:	bf0c      	ite	eq
 801090c:	2301      	moveq	r3, #1
 801090e:	2300      	movne	r3, #0
 8010910:	b2db      	uxtb	r3, r3
 8010912:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010918:	b299      	uxth	r1, r3
 801091a:	6a3b      	ldr	r3, [r7, #32]
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	8bba      	ldrh	r2, [r7, #28]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff fdf8 	bl	8010518 <tcp_output_alloc_header>
 8010928:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d102      	bne.n	8010936 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010930:	f04f 33ff 	mov.w	r3, #4294967295
 8010934:	e04c      	b.n	80109d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801093c:	7ffb      	ldrb	r3, [r7, #31]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d011      	beq.n	8010966 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	899b      	ldrh	r3, [r3, #12]
 8010946:	b29b      	uxth	r3, r3
 8010948:	b21b      	sxth	r3, r3
 801094a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801094e:	b21c      	sxth	r4, r3
 8010950:	2011      	movs	r0, #17
 8010952:	f7f8 f9f7 	bl	8008d44 <lwip_htons>
 8010956:	4603      	mov	r3, r0
 8010958:	b21b      	sxth	r3, r3
 801095a:	4323      	orrs	r3, r4
 801095c:	b21b      	sxth	r3, r3
 801095e:	b29a      	uxth	r2, r3
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	819a      	strh	r2, [r3, #12]
 8010964:	e010      	b.n	8010988 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	3314      	adds	r3, #20
 801096c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801096e:	6a3b      	ldr	r3, [r7, #32]
 8010970:	6858      	ldr	r0, [r3, #4]
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	891a      	ldrh	r2, [r3, #8]
 8010978:	6a3b      	ldr	r3, [r7, #32]
 801097a:	891b      	ldrh	r3, [r3, #8]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	b29b      	uxth	r3, r3
 8010980:	2201      	movs	r2, #1
 8010982:	6939      	ldr	r1, [r7, #16]
 8010984:	f7f9 ff72 	bl	800a86c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	4618      	mov	r0, r3
 8010990:	f7f8 f9ed 	bl	8008d6e <lwip_htonl>
 8010994:	4603      	mov	r3, r0
 8010996:	3301      	adds	r3, #1
 8010998:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	da02      	bge.n	80109ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109b0:	2200      	movs	r2, #0
 80109b2:	69b9      	ldr	r1, [r7, #24]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff fded 	bl	8010594 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	3304      	adds	r3, #4
 80109c0:	69b9      	ldr	r1, [r7, #24]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7ff fe26 	bl	8010614 <tcp_output_control_segment>
 80109c8:	4603      	mov	r3, r0
 80109ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80109cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	372c      	adds	r7, #44	; 0x2c
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd90      	pop	{r4, r7, pc}
 80109d8:	08017ba0 	.word	0x08017ba0
 80109dc:	08018398 	.word	0x08018398
 80109e0:	08017bf4 	.word	0x08017bf4

080109e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80109ec:	f7fa f82c 	bl	800aa48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80109f0:	4b0a      	ldr	r3, [pc, #40]	; (8010a1c <tcpip_tcp_timer+0x38>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d103      	bne.n	8010a00 <tcpip_tcp_timer+0x1c>
 80109f8:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <tcpip_tcp_timer+0x3c>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d005      	beq.n	8010a0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a00:	2200      	movs	r2, #0
 8010a02:	4908      	ldr	r1, [pc, #32]	; (8010a24 <tcpip_tcp_timer+0x40>)
 8010a04:	20fa      	movs	r0, #250	; 0xfa
 8010a06:	f000 f8f3 	bl	8010bf0 <sys_timeout>
 8010a0a:	e003      	b.n	8010a14 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010a0c:	4b06      	ldr	r3, [pc, #24]	; (8010a28 <tcpip_tcp_timer+0x44>)
 8010a0e:	2200      	movs	r2, #0
 8010a10:	601a      	str	r2, [r3, #0]
  }
}
 8010a12:	bf00      	nop
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	2000fe54 	.word	0x2000fe54
 8010a20:	2000fe58 	.word	0x2000fe58
 8010a24:	080109e5 	.word	0x080109e5
 8010a28:	2000fea0 	.word	0x2000fea0

08010a2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010a30:	4b0a      	ldr	r3, [pc, #40]	; (8010a5c <tcp_timer_needed+0x30>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d10f      	bne.n	8010a58 <tcp_timer_needed+0x2c>
 8010a38:	4b09      	ldr	r3, [pc, #36]	; (8010a60 <tcp_timer_needed+0x34>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d103      	bne.n	8010a48 <tcp_timer_needed+0x1c>
 8010a40:	4b08      	ldr	r3, [pc, #32]	; (8010a64 <tcp_timer_needed+0x38>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d007      	beq.n	8010a58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010a48:	4b04      	ldr	r3, [pc, #16]	; (8010a5c <tcp_timer_needed+0x30>)
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a4e:	2200      	movs	r2, #0
 8010a50:	4905      	ldr	r1, [pc, #20]	; (8010a68 <tcp_timer_needed+0x3c>)
 8010a52:	20fa      	movs	r0, #250	; 0xfa
 8010a54:	f000 f8cc 	bl	8010bf0 <sys_timeout>
  }
}
 8010a58:	bf00      	nop
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	2000fea0 	.word	0x2000fea0
 8010a60:	2000fe54 	.word	0x2000fe54
 8010a64:	2000fe58 	.word	0x2000fe58
 8010a68:	080109e5 	.word	0x080109e5

08010a6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010a78:	200a      	movs	r0, #10
 8010a7a:	f7f8 fe3b 	bl	80096f4 <memp_malloc>
 8010a7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d109      	bne.n	8010a9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d151      	bne.n	8010b30 <sys_timeout_abs+0xc4>
 8010a8c:	4b2a      	ldr	r3, [pc, #168]	; (8010b38 <sys_timeout_abs+0xcc>)
 8010a8e:	22be      	movs	r2, #190	; 0xbe
 8010a90:	492a      	ldr	r1, [pc, #168]	; (8010b3c <sys_timeout_abs+0xd0>)
 8010a92:	482b      	ldr	r0, [pc, #172]	; (8010b40 <sys_timeout_abs+0xd4>)
 8010a94:	f003 fcf4 	bl	8014480 <iprintf>
    return;
 8010a98:	e04a      	b.n	8010b30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	68ba      	ldr	r2, [r7, #8]
 8010aa4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010ab2:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d103      	bne.n	8010ac2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010aba:	4a22      	ldr	r2, [pc, #136]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	6013      	str	r3, [r2, #0]
    return;
 8010ac0:	e037      	b.n	8010b32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	4b1f      	ldr	r3, [pc, #124]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	0fdb      	lsrs	r3, r3, #31
 8010ad0:	f003 0301 	and.w	r3, r3, #1
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d007      	beq.n	8010aea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010ada:	4b1a      	ldr	r3, [pc, #104]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010ae2:	4a18      	ldr	r2, [pc, #96]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	6013      	str	r3, [r2, #0]
 8010ae8:	e023      	b.n	8010b32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010aea:	4b16      	ldr	r3, [pc, #88]	; (8010b44 <sys_timeout_abs+0xd8>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	617b      	str	r3, [r7, #20]
 8010af0:	e01a      	b.n	8010b28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00b      	beq.n	8010b12 <sys_timeout_abs+0xa6>
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	0fdb      	lsrs	r3, r3, #31
 8010b08:	f003 0301 	and.w	r3, r3, #1
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d007      	beq.n	8010b22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	693a      	ldr	r2, [r7, #16]
 8010b1e:	601a      	str	r2, [r3, #0]
        break;
 8010b20:	e007      	b.n	8010b32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	617b      	str	r3, [r7, #20]
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1e1      	bne.n	8010af2 <sys_timeout_abs+0x86>
 8010b2e:	e000      	b.n	8010b32 <sys_timeout_abs+0xc6>
    return;
 8010b30:	bf00      	nop
      }
    }
  }
}
 8010b32:	3718      	adds	r7, #24
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	080183bc 	.word	0x080183bc
 8010b3c:	080183f0 	.word	0x080183f0
 8010b40:	08018430 	.word	0x08018430
 8010b44:	2000fe98 	.word	0x2000fe98

08010b48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	4798      	blx	r3

  now = sys_now();
 8010b5a:	f7f2 fb99 	bl	8003290 <sys_now>
 8010b5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <lwip_cyclic_timer+0x5c>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4413      	add	r3, r2
 8010b6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	0fdb      	lsrs	r3, r3, #31
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d009      	beq.n	8010b92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	4413      	add	r3, r2
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	4907      	ldr	r1, [pc, #28]	; (8010ba8 <lwip_cyclic_timer+0x60>)
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ff ff6e 	bl	8010a6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010b90:	e004      	b.n	8010b9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	4904      	ldr	r1, [pc, #16]	; (8010ba8 <lwip_cyclic_timer+0x60>)
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7ff ff68 	bl	8010a6c <sys_timeout_abs>
}
 8010b9c:	bf00      	nop
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	2000fe9c 	.word	0x2000fe9c
 8010ba8:	08010b49 	.word	0x08010b49

08010bac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	607b      	str	r3, [r7, #4]
 8010bb6:	e00e      	b.n	8010bd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010bb8:	4a0b      	ldr	r2, [pc, #44]	; (8010be8 <sys_timeouts_init+0x3c>)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	4a08      	ldr	r2, [pc, #32]	; (8010be8 <sys_timeouts_init+0x3c>)
 8010bc6:	4413      	add	r3, r2
 8010bc8:	461a      	mov	r2, r3
 8010bca:	4908      	ldr	r1, [pc, #32]	; (8010bec <sys_timeouts_init+0x40>)
 8010bcc:	f000 f810 	bl	8010bf0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	3301      	adds	r3, #1
 8010bd4:	607b      	str	r3, [r7, #4]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d9ed      	bls.n	8010bb8 <sys_timeouts_init+0xc>
  }
}
 8010bdc:	bf00      	nop
 8010bde:	bf00      	nop
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	080190a0 	.word	0x080190a0
 8010bec:	08010b49 	.word	0x08010b49

08010bf0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c02:	d306      	bcc.n	8010c12 <sys_timeout+0x22>
 8010c04:	4b0a      	ldr	r3, [pc, #40]	; (8010c30 <sys_timeout+0x40>)
 8010c06:	f240 1229 	movw	r2, #297	; 0x129
 8010c0a:	490a      	ldr	r1, [pc, #40]	; (8010c34 <sys_timeout+0x44>)
 8010c0c:	480a      	ldr	r0, [pc, #40]	; (8010c38 <sys_timeout+0x48>)
 8010c0e:	f003 fc37 	bl	8014480 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010c12:	f7f2 fb3d 	bl	8003290 <sys_now>
 8010c16:	4602      	mov	r2, r0
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	68b9      	ldr	r1, [r7, #8]
 8010c22:	6978      	ldr	r0, [r7, #20]
 8010c24:	f7ff ff22 	bl	8010a6c <sys_timeout_abs>
#endif
}
 8010c28:	bf00      	nop
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	080183bc 	.word	0x080183bc
 8010c34:	08018458 	.word	0x08018458
 8010c38:	08018430 	.word	0x08018430

08010c3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010c42:	f7f2 fb25 	bl	8003290 <sys_now>
 8010c46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8010c48:	4b17      	ldr	r3, [pc, #92]	; (8010ca8 <sys_check_timeouts+0x6c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d022      	beq.n	8010c9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	0fdb      	lsrs	r3, r3, #31
 8010c5e:	f003 0301 	and.w	r3, r3, #1
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d11a      	bne.n	8010c9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4a0e      	ldr	r2, [pc, #56]	; (8010ca8 <sys_check_timeouts+0x6c>)
 8010c6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	4a0a      	ldr	r2, [pc, #40]	; (8010cac <sys_check_timeouts+0x70>)
 8010c82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010c84:	68b9      	ldr	r1, [r7, #8]
 8010c86:	200a      	movs	r0, #10
 8010c88:	f7f8 fdaa 	bl	80097e0 <memp_free>
    if (handler != NULL) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d0da      	beq.n	8010c48 <sys_check_timeouts+0xc>
      handler(arg);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6838      	ldr	r0, [r7, #0]
 8010c96:	4798      	blx	r3
  do {
 8010c98:	e7d6      	b.n	8010c48 <sys_check_timeouts+0xc>
      return;
 8010c9a:	bf00      	nop
 8010c9c:	e000      	b.n	8010ca0 <sys_check_timeouts+0x64>
      return;
 8010c9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	2000fe98 	.word	0x2000fe98
 8010cac:	2000fe9c 	.word	0x2000fe9c

08010cb0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010cb6:	4b16      	ldr	r3, [pc, #88]	; (8010d10 <sys_timeouts_sleeptime+0x60>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d102      	bne.n	8010cc4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc2:	e020      	b.n	8010d06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010cc4:	f7f2 fae4 	bl	8003290 <sys_now>
 8010cc8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010cca:	4b11      	ldr	r3, [pc, #68]	; (8010d10 <sys_timeouts_sleeptime+0x60>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	0fdb      	lsrs	r3, r3, #31
 8010cd6:	f003 0301 	and.w	r3, r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	e010      	b.n	8010d06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010ce4:	4b0a      	ldr	r3, [pc, #40]	; (8010d10 <sys_timeouts_sleeptime+0x60>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	685a      	ldr	r2, [r3, #4]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	da06      	bge.n	8010d04 <sys_timeouts_sleeptime+0x54>
 8010cf6:	4b07      	ldr	r3, [pc, #28]	; (8010d14 <sys_timeouts_sleeptime+0x64>)
 8010cf8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010cfc:	4906      	ldr	r1, [pc, #24]	; (8010d18 <sys_timeouts_sleeptime+0x68>)
 8010cfe:	4807      	ldr	r0, [pc, #28]	; (8010d1c <sys_timeouts_sleeptime+0x6c>)
 8010d00:	f003 fbbe 	bl	8014480 <iprintf>
    return ret;
 8010d04:	683b      	ldr	r3, [r7, #0]
  }
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	2000fe98 	.word	0x2000fe98
 8010d14:	080183bc 	.word	0x080183bc
 8010d18:	08018490 	.word	0x08018490
 8010d1c:	08018430 	.word	0x08018430

08010d20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d24:	f003 fbc4 	bl	80144b0 <rand>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	4b01      	ldr	r3, [pc, #4]	; (8010d40 <udp_init+0x20>)
 8010d3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d3c:	bf00      	nop
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	20000018 	.word	0x20000018

08010d44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010d4e:	4b17      	ldr	r3, [pc, #92]	; (8010dac <udp_new_port+0x68>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	1c5a      	adds	r2, r3, #1
 8010d54:	b291      	uxth	r1, r2
 8010d56:	4a15      	ldr	r2, [pc, #84]	; (8010dac <udp_new_port+0x68>)
 8010d58:	8011      	strh	r1, [r2, #0]
 8010d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d103      	bne.n	8010d6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010d62:	4b12      	ldr	r3, [pc, #72]	; (8010dac <udp_new_port+0x68>)
 8010d64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010d68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d6a:	4b11      	ldr	r3, [pc, #68]	; (8010db0 <udp_new_port+0x6c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	e011      	b.n	8010d96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	8a5a      	ldrh	r2, [r3, #18]
 8010d76:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <udp_new_port+0x68>)
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d108      	bne.n	8010d90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010d7e:	88fb      	ldrh	r3, [r7, #6]
 8010d80:	3301      	adds	r3, #1
 8010d82:	80fb      	strh	r3, [r7, #6]
 8010d84:	88fb      	ldrh	r3, [r7, #6]
 8010d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d8a:	d3e0      	bcc.n	8010d4e <udp_new_port+0xa>
        return 0;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	e007      	b.n	8010da0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	603b      	str	r3, [r7, #0]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1ea      	bne.n	8010d72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010d9c:	4b03      	ldr	r3, [pc, #12]	; (8010dac <udp_new_port+0x68>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	20000018 	.word	0x20000018
 8010db0:	2000fea4 	.word	0x2000fea4

08010db4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d105      	bne.n	8010dd4 <udp_input_local_match+0x20>
 8010dc8:	4b27      	ldr	r3, [pc, #156]	; (8010e68 <udp_input_local_match+0xb4>)
 8010dca:	2287      	movs	r2, #135	; 0x87
 8010dcc:	4927      	ldr	r1, [pc, #156]	; (8010e6c <udp_input_local_match+0xb8>)
 8010dce:	4828      	ldr	r0, [pc, #160]	; (8010e70 <udp_input_local_match+0xbc>)
 8010dd0:	f003 fb56 	bl	8014480 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d105      	bne.n	8010de6 <udp_input_local_match+0x32>
 8010dda:	4b23      	ldr	r3, [pc, #140]	; (8010e68 <udp_input_local_match+0xb4>)
 8010ddc:	2288      	movs	r2, #136	; 0x88
 8010dde:	4925      	ldr	r1, [pc, #148]	; (8010e74 <udp_input_local_match+0xc0>)
 8010de0:	4823      	ldr	r0, [pc, #140]	; (8010e70 <udp_input_local_match+0xbc>)
 8010de2:	f003 fb4d 	bl	8014480 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	7a1b      	ldrb	r3, [r3, #8]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00b      	beq.n	8010e06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	7a1a      	ldrb	r2, [r3, #8]
 8010df2:	4b21      	ldr	r3, [pc, #132]	; (8010e78 <udp_input_local_match+0xc4>)
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d001      	beq.n	8010e06 <udp_input_local_match+0x52>
    return 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	e02b      	b.n	8010e5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d018      	beq.n	8010e3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d013      	beq.n	8010e3a <udp_input_local_match+0x86>
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00f      	beq.n	8010e3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e1a:	4b17      	ldr	r3, [pc, #92]	; (8010e78 <udp_input_local_match+0xc4>)
 8010e1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e22:	d00a      	beq.n	8010e3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	4b13      	ldr	r3, [pc, #76]	; (8010e78 <udp_input_local_match+0xc4>)
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	405a      	eors	r2, r3
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	3308      	adds	r3, #8
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d110      	bne.n	8010e5c <udp_input_local_match+0xa8>
          return 1;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e00f      	b.n	8010e5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d009      	beq.n	8010e58 <udp_input_local_match+0xa4>
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d005      	beq.n	8010e58 <udp_input_local_match+0xa4>
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	4b09      	ldr	r3, [pc, #36]	; (8010e78 <udp_input_local_match+0xc4>)
 8010e52:	695b      	ldr	r3, [r3, #20]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d101      	bne.n	8010e5c <udp_input_local_match+0xa8>
        return 1;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	e000      	b.n	8010e5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	080184a4 	.word	0x080184a4
 8010e6c:	080184d4 	.word	0x080184d4
 8010e70:	080184f8 	.word	0x080184f8
 8010e74:	08018520 	.word	0x08018520
 8010e78:	20008d34 	.word	0x20008d34

08010e7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010e7c:	b590      	push	{r4, r7, lr}
 8010e7e:	b08d      	sub	sp, #52	; 0x34
 8010e80:	af02      	add	r7, sp, #8
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d105      	bne.n	8010e9c <udp_input+0x20>
 8010e90:	4b7c      	ldr	r3, [pc, #496]	; (8011084 <udp_input+0x208>)
 8010e92:	22cf      	movs	r2, #207	; 0xcf
 8010e94:	497c      	ldr	r1, [pc, #496]	; (8011088 <udp_input+0x20c>)
 8010e96:	487d      	ldr	r0, [pc, #500]	; (801108c <udp_input+0x210>)
 8010e98:	f003 faf2 	bl	8014480 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d105      	bne.n	8010eae <udp_input+0x32>
 8010ea2:	4b78      	ldr	r3, [pc, #480]	; (8011084 <udp_input+0x208>)
 8010ea4:	22d0      	movs	r2, #208	; 0xd0
 8010ea6:	497a      	ldr	r1, [pc, #488]	; (8011090 <udp_input+0x214>)
 8010ea8:	4878      	ldr	r0, [pc, #480]	; (801108c <udp_input+0x210>)
 8010eaa:	f003 fae9 	bl	8014480 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	895b      	ldrh	r3, [r3, #10]
 8010eb2:	2b07      	cmp	r3, #7
 8010eb4:	d803      	bhi.n	8010ebe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7f9 fad2 	bl	800a460 <pbuf_free>
    goto end;
 8010ebc:	e0de      	b.n	801107c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010ec4:	4b73      	ldr	r3, [pc, #460]	; (8011094 <udp_input+0x218>)
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	4a72      	ldr	r2, [pc, #456]	; (8011094 <udp_input+0x218>)
 8010eca:	6812      	ldr	r2, [r2, #0]
 8010ecc:	4611      	mov	r1, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f002 f816 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f7 ff30 	bl	8008d44 <lwip_htons>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	885b      	ldrh	r3, [r3, #2]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7f7 ff28 	bl	8008d44 <lwip_htons>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010efc:	2300      	movs	r3, #0
 8010efe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010f00:	2300      	movs	r3, #0
 8010f02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f04:	4b64      	ldr	r3, [pc, #400]	; (8011098 <udp_input+0x21c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	627b      	str	r3, [r7, #36]	; 0x24
 8010f0a:	e054      	b.n	8010fb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	8a5b      	ldrh	r3, [r3, #18]
 8010f10:	89fa      	ldrh	r2, [r7, #14]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d14a      	bne.n	8010fac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010f16:	7cfb      	ldrb	r3, [r7, #19]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	6839      	ldr	r1, [r7, #0]
 8010f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f1e:	f7ff ff49 	bl	8010db4 <udp_input_local_match>
 8010f22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d041      	beq.n	8010fac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	7c1b      	ldrb	r3, [r3, #16]
 8010f2c:	f003 0304 	and.w	r3, r3, #4
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d11d      	bne.n	8010f70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d102      	bne.n	8010f40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	61fb      	str	r3, [r7, #28]
 8010f3e:	e017      	b.n	8010f70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010f40:	7cfb      	ldrb	r3, [r7, #19]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d014      	beq.n	8010f70 <udp_input+0xf4>
 8010f46:	4b53      	ldr	r3, [pc, #332]	; (8011094 <udp_input+0x218>)
 8010f48:	695b      	ldr	r3, [r3, #20]
 8010f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4e:	d10f      	bne.n	8010f70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	3304      	adds	r3, #4
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d008      	beq.n	8010f70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	3304      	adds	r3, #4
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d101      	bne.n	8010f70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f72:	8a9b      	ldrh	r3, [r3, #20]
 8010f74:	8a3a      	ldrh	r2, [r7, #16]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d118      	bne.n	8010fac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d005      	beq.n	8010f8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	4b43      	ldr	r3, [pc, #268]	; (8011094 <udp_input+0x218>)
 8010f88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d10e      	bne.n	8010fac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d014      	beq.n	8010fbe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	68da      	ldr	r2, [r3, #12]
 8010f98:	6a3b      	ldr	r3, [r7, #32]
 8010f9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010f9c:	4b3e      	ldr	r3, [pc, #248]	; (8011098 <udp_input+0x21c>)
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010fa4:	4a3c      	ldr	r2, [pc, #240]	; (8011098 <udp_input+0x21c>)
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010faa:	e008      	b.n	8010fbe <udp_input+0x142>
      }
    }

    prev = pcb;
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1a7      	bne.n	8010f0c <udp_input+0x90>
 8010fbc:	e000      	b.n	8010fc0 <udp_input+0x144>
        break;
 8010fbe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <udp_input+0x14e>
    pcb = uncon_pcb;
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <udp_input+0x15a>
    for_us = 1;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	76fb      	strb	r3, [r7, #27]
 8010fd4:	e00a      	b.n	8010fec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	3304      	adds	r3, #4
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	4b2d      	ldr	r3, [pc, #180]	; (8011094 <udp_input+0x218>)
 8010fde:	695b      	ldr	r3, [r3, #20]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	bf0c      	ite	eq
 8010fe4:	2301      	moveq	r3, #1
 8010fe6:	2300      	movne	r3, #0
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010fec:	7efb      	ldrb	r3, [r7, #27]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d041      	beq.n	8011076 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010ff2:	2108      	movs	r1, #8
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7f9 f9ad 	bl	800a354 <pbuf_remove_header>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00a      	beq.n	8011016 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011000:	4b20      	ldr	r3, [pc, #128]	; (8011084 <udp_input+0x208>)
 8011002:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011006:	4925      	ldr	r1, [pc, #148]	; (801109c <udp_input+0x220>)
 8011008:	4820      	ldr	r0, [pc, #128]	; (801108c <udp_input+0x210>)
 801100a:	f003 fa39 	bl	8014480 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7f9 fa26 	bl	800a460 <pbuf_free>
      goto end;
 8011014:	e032      	b.n	801107c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	2b00      	cmp	r3, #0
 801101a:	d012      	beq.n	8011042 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	699b      	ldr	r3, [r3, #24]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00a      	beq.n	801103a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	699c      	ldr	r4, [r3, #24]
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	69d8      	ldr	r0, [r3, #28]
 801102c:	8a3b      	ldrh	r3, [r7, #16]
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	4b1b      	ldr	r3, [pc, #108]	; (80110a0 <udp_input+0x224>)
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011036:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011038:	e021      	b.n	801107e <udp_input+0x202>
        pbuf_free(p);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7f9 fa10 	bl	800a460 <pbuf_free>
        goto end;
 8011040:	e01c      	b.n	801107c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011042:	7cfb      	ldrb	r3, [r7, #19]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d112      	bne.n	801106e <udp_input+0x1f2>
 8011048:	4b12      	ldr	r3, [pc, #72]	; (8011094 <udp_input+0x218>)
 801104a:	695b      	ldr	r3, [r3, #20]
 801104c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011050:	2be0      	cmp	r3, #224	; 0xe0
 8011052:	d00c      	beq.n	801106e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011054:	4b0f      	ldr	r3, [pc, #60]	; (8011094 <udp_input+0x218>)
 8011056:	899b      	ldrh	r3, [r3, #12]
 8011058:	3308      	adds	r3, #8
 801105a:	b29b      	uxth	r3, r3
 801105c:	b21b      	sxth	r3, r3
 801105e:	4619      	mov	r1, r3
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f7f9 f9ea 	bl	800a43a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011066:	2103      	movs	r1, #3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f001 fc29 	bl	80128c0 <icmp_dest_unreach>
      pbuf_free(p);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7f9 f9f6 	bl	800a460 <pbuf_free>
  return;
 8011074:	e003      	b.n	801107e <udp_input+0x202>
    pbuf_free(p);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7f9 f9f2 	bl	800a460 <pbuf_free>
  return;
 801107c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801107e:	372c      	adds	r7, #44	; 0x2c
 8011080:	46bd      	mov	sp, r7
 8011082:	bd90      	pop	{r4, r7, pc}
 8011084:	080184a4 	.word	0x080184a4
 8011088:	08018548 	.word	0x08018548
 801108c:	080184f8 	.word	0x080184f8
 8011090:	08018560 	.word	0x08018560
 8011094:	20008d34 	.word	0x20008d34
 8011098:	2000fea4 	.word	0x2000fea4
 801109c:	0801857c 	.word	0x0801857c
 80110a0:	20008d44 	.word	0x20008d44

080110a4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d109      	bne.n	80110c8 <udp_send+0x24>
 80110b4:	4b11      	ldr	r3, [pc, #68]	; (80110fc <udp_send+0x58>)
 80110b6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80110ba:	4911      	ldr	r1, [pc, #68]	; (8011100 <udp_send+0x5c>)
 80110bc:	4811      	ldr	r0, [pc, #68]	; (8011104 <udp_send+0x60>)
 80110be:	f003 f9df 	bl	8014480 <iprintf>
 80110c2:	f06f 030f 	mvn.w	r3, #15
 80110c6:	e015      	b.n	80110f4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d109      	bne.n	80110e2 <udp_send+0x3e>
 80110ce:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <udp_send+0x58>)
 80110d0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80110d4:	490c      	ldr	r1, [pc, #48]	; (8011108 <udp_send+0x64>)
 80110d6:	480b      	ldr	r0, [pc, #44]	; (8011104 <udp_send+0x60>)
 80110d8:	f003 f9d2 	bl	8014480 <iprintf>
 80110dc:	f06f 030f 	mvn.w	r3, #15
 80110e0:	e008      	b.n	80110f4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	1d1a      	adds	r2, r3, #4
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	8a9b      	ldrh	r3, [r3, #20]
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 f80d 	bl	801110c <udp_sendto>
 80110f2:	4603      	mov	r3, r0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	080184a4 	.word	0x080184a4
 8011100:	08018598 	.word	0x08018598
 8011104:	080184f8 	.word	0x080184f8
 8011108:	080185b0 	.word	0x080185b0

0801110c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b088      	sub	sp, #32
 8011110:	af02      	add	r7, sp, #8
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
 8011118:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d109      	bne.n	8011134 <udp_sendto+0x28>
 8011120:	4b23      	ldr	r3, [pc, #140]	; (80111b0 <udp_sendto+0xa4>)
 8011122:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011126:	4923      	ldr	r1, [pc, #140]	; (80111b4 <udp_sendto+0xa8>)
 8011128:	4823      	ldr	r0, [pc, #140]	; (80111b8 <udp_sendto+0xac>)
 801112a:	f003 f9a9 	bl	8014480 <iprintf>
 801112e:	f06f 030f 	mvn.w	r3, #15
 8011132:	e038      	b.n	80111a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d109      	bne.n	801114e <udp_sendto+0x42>
 801113a:	4b1d      	ldr	r3, [pc, #116]	; (80111b0 <udp_sendto+0xa4>)
 801113c:	f240 2219 	movw	r2, #537	; 0x219
 8011140:	491e      	ldr	r1, [pc, #120]	; (80111bc <udp_sendto+0xb0>)
 8011142:	481d      	ldr	r0, [pc, #116]	; (80111b8 <udp_sendto+0xac>)
 8011144:	f003 f99c 	bl	8014480 <iprintf>
 8011148:	f06f 030f 	mvn.w	r3, #15
 801114c:	e02b      	b.n	80111a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d109      	bne.n	8011168 <udp_sendto+0x5c>
 8011154:	4b16      	ldr	r3, [pc, #88]	; (80111b0 <udp_sendto+0xa4>)
 8011156:	f240 221a 	movw	r2, #538	; 0x21a
 801115a:	4919      	ldr	r1, [pc, #100]	; (80111c0 <udp_sendto+0xb4>)
 801115c:	4816      	ldr	r0, [pc, #88]	; (80111b8 <udp_sendto+0xac>)
 801115e:	f003 f98f 	bl	8014480 <iprintf>
 8011162:	f06f 030f 	mvn.w	r3, #15
 8011166:	e01e      	b.n	80111a6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	7a1b      	ldrb	r3, [r3, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d006      	beq.n	801117e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	7a1b      	ldrb	r3, [r3, #8]
 8011174:	4618      	mov	r0, r3
 8011176:	f7f8 fde5 	bl	8009d44 <netif_get_by_index>
 801117a:	6178      	str	r0, [r7, #20]
 801117c:	e003      	b.n	8011186 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f001 fc28 	bl	80129d4 <ip4_route>
 8011184:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d102      	bne.n	8011192 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801118c:	f06f 0303 	mvn.w	r3, #3
 8011190:	e009      	b.n	80111a6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011192:	887a      	ldrh	r2, [r7, #2]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	4613      	mov	r3, r2
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	68b9      	ldr	r1, [r7, #8]
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f000 f810 	bl	80111c4 <udp_sendto_if>
 80111a4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	080184a4 	.word	0x080184a4
 80111b4:	080185c8 	.word	0x080185c8
 80111b8:	080184f8 	.word	0x080184f8
 80111bc:	080185e0 	.word	0x080185e0
 80111c0:	080185fc 	.word	0x080185fc

080111c4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b088      	sub	sp, #32
 80111c8:	af02      	add	r7, sp, #8
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
 80111d0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d109      	bne.n	80111ec <udp_sendto_if+0x28>
 80111d8:	4b2e      	ldr	r3, [pc, #184]	; (8011294 <udp_sendto_if+0xd0>)
 80111da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111de:	492e      	ldr	r1, [pc, #184]	; (8011298 <udp_sendto_if+0xd4>)
 80111e0:	482e      	ldr	r0, [pc, #184]	; (801129c <udp_sendto_if+0xd8>)
 80111e2:	f003 f94d 	bl	8014480 <iprintf>
 80111e6:	f06f 030f 	mvn.w	r3, #15
 80111ea:	e04f      	b.n	801128c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d109      	bne.n	8011206 <udp_sendto_if+0x42>
 80111f2:	4b28      	ldr	r3, [pc, #160]	; (8011294 <udp_sendto_if+0xd0>)
 80111f4:	f240 2281 	movw	r2, #641	; 0x281
 80111f8:	4929      	ldr	r1, [pc, #164]	; (80112a0 <udp_sendto_if+0xdc>)
 80111fa:	4828      	ldr	r0, [pc, #160]	; (801129c <udp_sendto_if+0xd8>)
 80111fc:	f003 f940 	bl	8014480 <iprintf>
 8011200:	f06f 030f 	mvn.w	r3, #15
 8011204:	e042      	b.n	801128c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d109      	bne.n	8011220 <udp_sendto_if+0x5c>
 801120c:	4b21      	ldr	r3, [pc, #132]	; (8011294 <udp_sendto_if+0xd0>)
 801120e:	f240 2282 	movw	r2, #642	; 0x282
 8011212:	4924      	ldr	r1, [pc, #144]	; (80112a4 <udp_sendto_if+0xe0>)
 8011214:	4821      	ldr	r0, [pc, #132]	; (801129c <udp_sendto_if+0xd8>)
 8011216:	f003 f933 	bl	8014480 <iprintf>
 801121a:	f06f 030f 	mvn.w	r3, #15
 801121e:	e035      	b.n	801128c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d109      	bne.n	801123a <udp_sendto_if+0x76>
 8011226:	4b1b      	ldr	r3, [pc, #108]	; (8011294 <udp_sendto_if+0xd0>)
 8011228:	f240 2283 	movw	r2, #643	; 0x283
 801122c:	491e      	ldr	r1, [pc, #120]	; (80112a8 <udp_sendto_if+0xe4>)
 801122e:	481b      	ldr	r0, [pc, #108]	; (801129c <udp_sendto_if+0xd8>)
 8011230:	f003 f926 	bl	8014480 <iprintf>
 8011234:	f06f 030f 	mvn.w	r3, #15
 8011238:	e028      	b.n	801128c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d009      	beq.n	8011254 <udp_sendto_if+0x90>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d005      	beq.n	8011254 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011250:	2be0      	cmp	r3, #224	; 0xe0
 8011252:	d103      	bne.n	801125c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	3304      	adds	r3, #4
 8011258:	617b      	str	r3, [r7, #20]
 801125a:	e00b      	b.n	8011274 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	6a3b      	ldr	r3, [r7, #32]
 8011262:	3304      	adds	r3, #4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	429a      	cmp	r2, r3
 8011268:	d002      	beq.n	8011270 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801126a:	f06f 0303 	mvn.w	r3, #3
 801126e:	e00d      	b.n	801128c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011274:	887a      	ldrh	r2, [r7, #2]
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	9301      	str	r3, [sp, #4]
 801127a:	6a3b      	ldr	r3, [r7, #32]
 801127c:	9300      	str	r3, [sp, #0]
 801127e:	4613      	mov	r3, r2
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	68b9      	ldr	r1, [r7, #8]
 8011284:	68f8      	ldr	r0, [r7, #12]
 8011286:	f000 f811 	bl	80112ac <udp_sendto_if_src>
 801128a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801128c:	4618      	mov	r0, r3
 801128e:	3718      	adds	r7, #24
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	080184a4 	.word	0x080184a4
 8011298:	08018618 	.word	0x08018618
 801129c:	080184f8 	.word	0x080184f8
 80112a0:	08018634 	.word	0x08018634
 80112a4:	08018650 	.word	0x08018650
 80112a8:	08018670 	.word	0x08018670

080112ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b08c      	sub	sp, #48	; 0x30
 80112b0:	af04      	add	r7, sp, #16
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
 80112b8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d109      	bne.n	80112d4 <udp_sendto_if_src+0x28>
 80112c0:	4b65      	ldr	r3, [pc, #404]	; (8011458 <udp_sendto_if_src+0x1ac>)
 80112c2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80112c6:	4965      	ldr	r1, [pc, #404]	; (801145c <udp_sendto_if_src+0x1b0>)
 80112c8:	4865      	ldr	r0, [pc, #404]	; (8011460 <udp_sendto_if_src+0x1b4>)
 80112ca:	f003 f8d9 	bl	8014480 <iprintf>
 80112ce:	f06f 030f 	mvn.w	r3, #15
 80112d2:	e0bc      	b.n	801144e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d109      	bne.n	80112ee <udp_sendto_if_src+0x42>
 80112da:	4b5f      	ldr	r3, [pc, #380]	; (8011458 <udp_sendto_if_src+0x1ac>)
 80112dc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80112e0:	4960      	ldr	r1, [pc, #384]	; (8011464 <udp_sendto_if_src+0x1b8>)
 80112e2:	485f      	ldr	r0, [pc, #380]	; (8011460 <udp_sendto_if_src+0x1b4>)
 80112e4:	f003 f8cc 	bl	8014480 <iprintf>
 80112e8:	f06f 030f 	mvn.w	r3, #15
 80112ec:	e0af      	b.n	801144e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d109      	bne.n	8011308 <udp_sendto_if_src+0x5c>
 80112f4:	4b58      	ldr	r3, [pc, #352]	; (8011458 <udp_sendto_if_src+0x1ac>)
 80112f6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80112fa:	495b      	ldr	r1, [pc, #364]	; (8011468 <udp_sendto_if_src+0x1bc>)
 80112fc:	4858      	ldr	r0, [pc, #352]	; (8011460 <udp_sendto_if_src+0x1b4>)
 80112fe:	f003 f8bf 	bl	8014480 <iprintf>
 8011302:	f06f 030f 	mvn.w	r3, #15
 8011306:	e0a2      	b.n	801144e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130a:	2b00      	cmp	r3, #0
 801130c:	d109      	bne.n	8011322 <udp_sendto_if_src+0x76>
 801130e:	4b52      	ldr	r3, [pc, #328]	; (8011458 <udp_sendto_if_src+0x1ac>)
 8011310:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011314:	4955      	ldr	r1, [pc, #340]	; (801146c <udp_sendto_if_src+0x1c0>)
 8011316:	4852      	ldr	r0, [pc, #328]	; (8011460 <udp_sendto_if_src+0x1b4>)
 8011318:	f003 f8b2 	bl	8014480 <iprintf>
 801131c:	f06f 030f 	mvn.w	r3, #15
 8011320:	e095      	b.n	801144e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011324:	2b00      	cmp	r3, #0
 8011326:	d109      	bne.n	801133c <udp_sendto_if_src+0x90>
 8011328:	4b4b      	ldr	r3, [pc, #300]	; (8011458 <udp_sendto_if_src+0x1ac>)
 801132a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801132e:	4950      	ldr	r1, [pc, #320]	; (8011470 <udp_sendto_if_src+0x1c4>)
 8011330:	484b      	ldr	r0, [pc, #300]	; (8011460 <udp_sendto_if_src+0x1b4>)
 8011332:	f003 f8a5 	bl	8014480 <iprintf>
 8011336:	f06f 030f 	mvn.w	r3, #15
 801133a:	e088      	b.n	801144e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	8a5b      	ldrh	r3, [r3, #18]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10f      	bne.n	8011364 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011344:	68f9      	ldr	r1, [r7, #12]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	8a5b      	ldrh	r3, [r3, #18]
 801134a:	461a      	mov	r2, r3
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f000 f893 	bl	8011478 <udp_bind>
 8011352:	4603      	mov	r3, r0
 8011354:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011356:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d002      	beq.n	8011364 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801135e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011362:	e074      	b.n	801144e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	891b      	ldrh	r3, [r3, #8]
 8011368:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801136c:	4293      	cmp	r3, r2
 801136e:	d902      	bls.n	8011376 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011370:	f04f 33ff 	mov.w	r3, #4294967295
 8011374:	e06b      	b.n	801144e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011376:	2108      	movs	r1, #8
 8011378:	68b8      	ldr	r0, [r7, #8]
 801137a:	f7f8 ffdb 	bl	800a334 <pbuf_add_header>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d015      	beq.n	80113b0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011384:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011388:	2108      	movs	r1, #8
 801138a:	2022      	movs	r0, #34	; 0x22
 801138c:	f7f8 fd84 	bl	8009e98 <pbuf_alloc>
 8011390:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d102      	bne.n	801139e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011398:	f04f 33ff 	mov.w	r3, #4294967295
 801139c:	e057      	b.n	801144e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	891b      	ldrh	r3, [r3, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80113a6:	68b9      	ldr	r1, [r7, #8]
 80113a8:	69f8      	ldr	r0, [r7, #28]
 80113aa:	f7f9 f97d 	bl	800a6a8 <pbuf_chain>
 80113ae:	e001      	b.n	80113b4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	895b      	ldrh	r3, [r3, #10]
 80113b8:	2b07      	cmp	r3, #7
 80113ba:	d806      	bhi.n	80113ca <udp_sendto_if_src+0x11e>
 80113bc:	4b26      	ldr	r3, [pc, #152]	; (8011458 <udp_sendto_if_src+0x1ac>)
 80113be:	f240 320d 	movw	r2, #781	; 0x30d
 80113c2:	492c      	ldr	r1, [pc, #176]	; (8011474 <udp_sendto_if_src+0x1c8>)
 80113c4:	4826      	ldr	r0, [pc, #152]	; (8011460 <udp_sendto_if_src+0x1b4>)
 80113c6:	f003 f85b 	bl	8014480 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	8a5b      	ldrh	r3, [r3, #18]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7f7 fcb5 	bl	8008d44 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	461a      	mov	r2, r3
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80113e2:	887b      	ldrh	r3, [r7, #2]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7f7 fcad 	bl	8008d44 <lwip_htons>
 80113ea:	4603      	mov	r3, r0
 80113ec:	461a      	mov	r2, r3
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	2200      	movs	r2, #0
 80113f6:	719a      	strb	r2, [r3, #6]
 80113f8:	2200      	movs	r2, #0
 80113fa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	891b      	ldrh	r3, [r3, #8]
 8011400:	4618      	mov	r0, r3
 8011402:	f7f7 fc9f 	bl	8008d44 <lwip_htons>
 8011406:	4603      	mov	r3, r0
 8011408:	461a      	mov	r2, r3
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801140e:	2311      	movs	r3, #17
 8011410:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	7adb      	ldrb	r3, [r3, #11]
 8011416:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	7a9b      	ldrb	r3, [r3, #10]
 801141c:	7cb9      	ldrb	r1, [r7, #18]
 801141e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011420:	9202      	str	r2, [sp, #8]
 8011422:	7cfa      	ldrb	r2, [r7, #19]
 8011424:	9201      	str	r2, [sp, #4]
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	460b      	mov	r3, r1
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801142e:	69f8      	ldr	r0, [r7, #28]
 8011430:	f001 fcb8 	bl	8012da4 <ip4_output_if_src>
 8011434:	4603      	mov	r3, r0
 8011436:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011438:	69fa      	ldr	r2, [r7, #28]
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	429a      	cmp	r2, r3
 801143e:	d004      	beq.n	801144a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011440:	69f8      	ldr	r0, [r7, #28]
 8011442:	f7f9 f80d 	bl	800a460 <pbuf_free>
    q = NULL;
 8011446:	2300      	movs	r3, #0
 8011448:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801144a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3720      	adds	r7, #32
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	080184a4 	.word	0x080184a4
 801145c:	08018690 	.word	0x08018690
 8011460:	080184f8 	.word	0x080184f8
 8011464:	080186b0 	.word	0x080186b0
 8011468:	080186d0 	.word	0x080186d0
 801146c:	080186f4 	.word	0x080186f4
 8011470:	08018718 	.word	0x08018718
 8011474:	0801873c 	.word	0x0801873c

08011478 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	4613      	mov	r3, r2
 8011484:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d101      	bne.n	8011490 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801148c:	4b39      	ldr	r3, [pc, #228]	; (8011574 <udp_bind+0xfc>)
 801148e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d109      	bne.n	80114aa <udp_bind+0x32>
 8011496:	4b38      	ldr	r3, [pc, #224]	; (8011578 <udp_bind+0x100>)
 8011498:	f240 32b7 	movw	r2, #951	; 0x3b7
 801149c:	4937      	ldr	r1, [pc, #220]	; (801157c <udp_bind+0x104>)
 801149e:	4838      	ldr	r0, [pc, #224]	; (8011580 <udp_bind+0x108>)
 80114a0:	f002 ffee 	bl	8014480 <iprintf>
 80114a4:	f06f 030f 	mvn.w	r3, #15
 80114a8:	e060      	b.n	801156c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80114ae:	4b35      	ldr	r3, [pc, #212]	; (8011584 <udp_bind+0x10c>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e009      	b.n	80114ca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d102      	bne.n	80114c4 <udp_bind+0x4c>
      rebind = 1;
 80114be:	2301      	movs	r3, #1
 80114c0:	74fb      	strb	r3, [r7, #19]
      break;
 80114c2:	e005      	b.n	80114d0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	617b      	str	r3, [r7, #20]
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1f2      	bne.n	80114b6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80114d0:	88fb      	ldrh	r3, [r7, #6]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d109      	bne.n	80114ea <udp_bind+0x72>
    port = udp_new_port();
 80114d6:	f7ff fc35 	bl	8010d44 <udp_new_port>
 80114da:	4603      	mov	r3, r0
 80114dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80114de:	88fb      	ldrh	r3, [r7, #6]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d12c      	bne.n	801153e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80114e4:	f06f 0307 	mvn.w	r3, #7
 80114e8:	e040      	b.n	801156c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80114ea:	4b26      	ldr	r3, [pc, #152]	; (8011584 <udp_bind+0x10c>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	617b      	str	r3, [r7, #20]
 80114f0:	e022      	b.n	8011538 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d01b      	beq.n	8011532 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	8a5b      	ldrh	r3, [r3, #18]
 80114fe:	88fa      	ldrh	r2, [r7, #6]
 8011500:	429a      	cmp	r2, r3
 8011502:	d116      	bne.n	8011532 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801150c:	429a      	cmp	r2, r3
 801150e:	d00d      	beq.n	801152c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d00a      	beq.n	801152c <udp_bind+0xb4>
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d006      	beq.n	801152c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801151e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011520:	2b00      	cmp	r3, #0
 8011522:	d003      	beq.n	801152c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d102      	bne.n	8011532 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801152c:	f06f 0307 	mvn.w	r3, #7
 8011530:	e01c      	b.n	801156c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1d9      	bne.n	80114f2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d002      	beq.n	801154a <udp_bind+0xd2>
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	e000      	b.n	801154c <udp_bind+0xd4>
 801154a:	2300      	movs	r3, #0
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	88fa      	ldrh	r2, [r7, #6]
 8011554:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011556:	7cfb      	ldrb	r3, [r7, #19]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d106      	bne.n	801156a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801155c:	4b09      	ldr	r3, [pc, #36]	; (8011584 <udp_bind+0x10c>)
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011564:	4a07      	ldr	r2, [pc, #28]	; (8011584 <udp_bind+0x10c>)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801156a:	2300      	movs	r3, #0
}
 801156c:	4618      	mov	r0, r3
 801156e:	3718      	adds	r7, #24
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	080190b8 	.word	0x080190b8
 8011578:	080184a4 	.word	0x080184a4
 801157c:	0801876c 	.word	0x0801876c
 8011580:	080184f8 	.word	0x080184f8
 8011584:	2000fea4 	.word	0x2000fea4

08011588 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b086      	sub	sp, #24
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	4613      	mov	r3, r2
 8011594:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d109      	bne.n	80115b0 <udp_connect+0x28>
 801159c:	4b2c      	ldr	r3, [pc, #176]	; (8011650 <udp_connect+0xc8>)
 801159e:	f240 4235 	movw	r2, #1077	; 0x435
 80115a2:	492c      	ldr	r1, [pc, #176]	; (8011654 <udp_connect+0xcc>)
 80115a4:	482c      	ldr	r0, [pc, #176]	; (8011658 <udp_connect+0xd0>)
 80115a6:	f002 ff6b 	bl	8014480 <iprintf>
 80115aa:	f06f 030f 	mvn.w	r3, #15
 80115ae:	e04b      	b.n	8011648 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d109      	bne.n	80115ca <udp_connect+0x42>
 80115b6:	4b26      	ldr	r3, [pc, #152]	; (8011650 <udp_connect+0xc8>)
 80115b8:	f240 4236 	movw	r2, #1078	; 0x436
 80115bc:	4927      	ldr	r1, [pc, #156]	; (801165c <udp_connect+0xd4>)
 80115be:	4826      	ldr	r0, [pc, #152]	; (8011658 <udp_connect+0xd0>)
 80115c0:	f002 ff5e 	bl	8014480 <iprintf>
 80115c4:	f06f 030f 	mvn.w	r3, #15
 80115c8:	e03e      	b.n	8011648 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	8a5b      	ldrh	r3, [r3, #18]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10f      	bne.n	80115f2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80115d2:	68f9      	ldr	r1, [r7, #12]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	8a5b      	ldrh	r3, [r3, #18]
 80115d8:	461a      	mov	r2, r3
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7ff ff4c 	bl	8011478 <udp_bind>
 80115e0:	4603      	mov	r3, r0
 80115e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80115e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <udp_connect+0x6a>
      return err;
 80115ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115f0:	e02a      	b.n	8011648 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <udp_connect+0x76>
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	e000      	b.n	8011600 <udp_connect+0x78>
 80115fe:	2300      	movs	r3, #0
 8011600:	68fa      	ldr	r2, [r7, #12]
 8011602:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	88fa      	ldrh	r2, [r7, #6]
 8011608:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	7c1b      	ldrb	r3, [r3, #16]
 801160e:	f043 0304 	orr.w	r3, r3, #4
 8011612:	b2da      	uxtb	r2, r3
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011618:	4b11      	ldr	r3, [pc, #68]	; (8011660 <udp_connect+0xd8>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	617b      	str	r3, [r7, #20]
 801161e:	e008      	b.n	8011632 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	429a      	cmp	r2, r3
 8011626:	d101      	bne.n	801162c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	e00d      	b.n	8011648 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	617b      	str	r3, [r7, #20]
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1f3      	bne.n	8011620 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011638:	4b09      	ldr	r3, [pc, #36]	; (8011660 <udp_connect+0xd8>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011640:	4a07      	ldr	r2, [pc, #28]	; (8011660 <udp_connect+0xd8>)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3718      	adds	r7, #24
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	080184a4 	.word	0x080184a4
 8011654:	08018784 	.word	0x08018784
 8011658:	080184f8 	.word	0x080184f8
 801165c:	080187a0 	.word	0x080187a0
 8011660:	2000fea4 	.word	0x2000fea4

08011664 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d107      	bne.n	8011682 <udp_disconnect+0x1e>
 8011672:	4b0d      	ldr	r3, [pc, #52]	; (80116a8 <udp_disconnect+0x44>)
 8011674:	f240 426a 	movw	r2, #1130	; 0x46a
 8011678:	490c      	ldr	r1, [pc, #48]	; (80116ac <udp_disconnect+0x48>)
 801167a:	480d      	ldr	r0, [pc, #52]	; (80116b0 <udp_disconnect+0x4c>)
 801167c:	f002 ff00 	bl	8014480 <iprintf>
 8011680:	e00f      	b.n	80116a2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	7c1b      	ldrb	r3, [r3, #16]
 8011698:	f023 0304 	bic.w	r3, r3, #4
 801169c:	b2da      	uxtb	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	741a      	strb	r2, [r3, #16]
}
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	080184a4 	.word	0x080184a4
 80116ac:	080187bc 	.word	0x080187bc
 80116b0:	080184f8 	.word	0x080184f8

080116b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d107      	bne.n	80116d6 <udp_recv+0x22>
 80116c6:	4b08      	ldr	r3, [pc, #32]	; (80116e8 <udp_recv+0x34>)
 80116c8:	f240 428a 	movw	r2, #1162	; 0x48a
 80116cc:	4907      	ldr	r1, [pc, #28]	; (80116ec <udp_recv+0x38>)
 80116ce:	4808      	ldr	r0, [pc, #32]	; (80116f0 <udp_recv+0x3c>)
 80116d0:	f002 fed6 	bl	8014480 <iprintf>
 80116d4:	e005      	b.n	80116e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	68ba      	ldr	r2, [r7, #8]
 80116da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	61da      	str	r2, [r3, #28]
}
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	080184a4 	.word	0x080184a4
 80116ec:	080187d8 	.word	0x080187d8
 80116f0:	080184f8 	.word	0x080184f8

080116f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <udp_remove+0x1e>
 8011702:	4b19      	ldr	r3, [pc, #100]	; (8011768 <udp_remove+0x74>)
 8011704:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011708:	4918      	ldr	r1, [pc, #96]	; (801176c <udp_remove+0x78>)
 801170a:	4819      	ldr	r0, [pc, #100]	; (8011770 <udp_remove+0x7c>)
 801170c:	f002 feb8 	bl	8014480 <iprintf>
 8011710:	e026      	b.n	8011760 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011712:	4b18      	ldr	r3, [pc, #96]	; (8011774 <udp_remove+0x80>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	429a      	cmp	r2, r3
 801171a:	d105      	bne.n	8011728 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801171c:	4b15      	ldr	r3, [pc, #84]	; (8011774 <udp_remove+0x80>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	4a14      	ldr	r2, [pc, #80]	; (8011774 <udp_remove+0x80>)
 8011724:	6013      	str	r3, [r2, #0]
 8011726:	e017      	b.n	8011758 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011728:	4b12      	ldr	r3, [pc, #72]	; (8011774 <udp_remove+0x80>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e010      	b.n	8011752 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d009      	beq.n	801174c <udp_remove+0x58>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d104      	bne.n	801174c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	68da      	ldr	r2, [r3, #12]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	60da      	str	r2, [r3, #12]
        break;
 801174a:	e005      	b.n	8011758 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	60fb      	str	r3, [r7, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d1eb      	bne.n	8011730 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011758:	6879      	ldr	r1, [r7, #4]
 801175a:	2000      	movs	r0, #0
 801175c:	f7f8 f840 	bl	80097e0 <memp_free>
}
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	080184a4 	.word	0x080184a4
 801176c:	080187f0 	.word	0x080187f0
 8011770:	080184f8 	.word	0x080184f8
 8011774:	2000fea4 	.word	0x2000fea4

08011778 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801177e:	2000      	movs	r0, #0
 8011780:	f7f7 ffb8 	bl	80096f4 <memp_malloc>
 8011784:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d007      	beq.n	801179c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801178c:	2220      	movs	r2, #32
 801178e:	2100      	movs	r1, #0
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f002 fe6d 	bl	8014470 <memset>
    pcb->ttl = UDP_TTL;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	22ff      	movs	r2, #255	; 0xff
 801179a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801179c:	687b      	ldr	r3, [r7, #4]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	4603      	mov	r3, r0
 80117ae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80117b0:	f7ff ffe2 	bl	8011778 <udp_new>
 80117b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80117b6:	68fb      	ldr	r3, [r7, #12]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d01e      	beq.n	801180e <udp_netif_ip_addr_changed+0x4e>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d01a      	beq.n	801180e <udp_netif_ip_addr_changed+0x4e>
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d017      	beq.n	801180e <udp_netif_ip_addr_changed+0x4e>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d013      	beq.n	801180e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117e6:	4b0d      	ldr	r3, [pc, #52]	; (801181c <udp_netif_ip_addr_changed+0x5c>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
 80117ec:	e00c      	b.n	8011808 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d103      	bne.n	8011802 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	60fb      	str	r3, [r7, #12]
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1ef      	bne.n	80117ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801180e:	bf00      	nop
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	2000fea4 	.word	0x2000fea4

08011820 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011828:	4915      	ldr	r1, [pc, #84]	; (8011880 <etharp_free_entry+0x60>)
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	4613      	mov	r3, r2
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	4413      	add	r3, r2
 8011832:	00db      	lsls	r3, r3, #3
 8011834:	440b      	add	r3, r1
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d013      	beq.n	8011864 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801183c:	4910      	ldr	r1, [pc, #64]	; (8011880 <etharp_free_entry+0x60>)
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	4613      	mov	r3, r2
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	4413      	add	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	440b      	add	r3, r1
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4618      	mov	r0, r3
 801184e:	f7f8 fe07 	bl	800a460 <pbuf_free>
    arp_table[i].q = NULL;
 8011852:	490b      	ldr	r1, [pc, #44]	; (8011880 <etharp_free_entry+0x60>)
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	4613      	mov	r3, r2
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	4413      	add	r3, r2
 801185c:	00db      	lsls	r3, r3, #3
 801185e:	440b      	add	r3, r1
 8011860:	2200      	movs	r2, #0
 8011862:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011864:	4906      	ldr	r1, [pc, #24]	; (8011880 <etharp_free_entry+0x60>)
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	4613      	mov	r3, r2
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	4413      	add	r3, r2
 801186e:	00db      	lsls	r3, r3, #3
 8011870:	440b      	add	r3, r1
 8011872:	3314      	adds	r3, #20
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	2000fea8 	.word	0x2000fea8

08011884 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801188a:	2300      	movs	r3, #0
 801188c:	607b      	str	r3, [r7, #4]
 801188e:	e096      	b.n	80119be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011890:	494f      	ldr	r1, [pc, #316]	; (80119d0 <etharp_tmr+0x14c>)
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	4613      	mov	r3, r2
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	4413      	add	r3, r2
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	440b      	add	r3, r1
 801189e:	3314      	adds	r3, #20
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80118a4:	78fb      	ldrb	r3, [r7, #3]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	f000 8086 	beq.w	80119b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80118ac:	4948      	ldr	r1, [pc, #288]	; (80119d0 <etharp_tmr+0x14c>)
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	4613      	mov	r3, r2
 80118b2:	005b      	lsls	r3, r3, #1
 80118b4:	4413      	add	r3, r2
 80118b6:	00db      	lsls	r3, r3, #3
 80118b8:	440b      	add	r3, r1
 80118ba:	3312      	adds	r3, #18
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	3301      	adds	r3, #1
 80118c0:	b298      	uxth	r0, r3
 80118c2:	4943      	ldr	r1, [pc, #268]	; (80119d0 <etharp_tmr+0x14c>)
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	440b      	add	r3, r1
 80118d0:	3312      	adds	r3, #18
 80118d2:	4602      	mov	r2, r0
 80118d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118d6:	493e      	ldr	r1, [pc, #248]	; (80119d0 <etharp_tmr+0x14c>)
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	4613      	mov	r3, r2
 80118dc:	005b      	lsls	r3, r3, #1
 80118de:	4413      	add	r3, r2
 80118e0:	00db      	lsls	r3, r3, #3
 80118e2:	440b      	add	r3, r1
 80118e4:	3312      	adds	r3, #18
 80118e6:	881b      	ldrh	r3, [r3, #0]
 80118e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80118ec:	d215      	bcs.n	801191a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118ee:	4938      	ldr	r1, [pc, #224]	; (80119d0 <etharp_tmr+0x14c>)
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	4613      	mov	r3, r2
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	440b      	add	r3, r1
 80118fc:	3314      	adds	r3, #20
 80118fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011900:	2b01      	cmp	r3, #1
 8011902:	d10e      	bne.n	8011922 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011904:	4932      	ldr	r1, [pc, #200]	; (80119d0 <etharp_tmr+0x14c>)
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	4613      	mov	r3, r2
 801190a:	005b      	lsls	r3, r3, #1
 801190c:	4413      	add	r3, r2
 801190e:	00db      	lsls	r3, r3, #3
 8011910:	440b      	add	r3, r1
 8011912:	3312      	adds	r3, #18
 8011914:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011916:	2b04      	cmp	r3, #4
 8011918:	d903      	bls.n	8011922 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff ff80 	bl	8011820 <etharp_free_entry>
 8011920:	e04a      	b.n	80119b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011922:	492b      	ldr	r1, [pc, #172]	; (80119d0 <etharp_tmr+0x14c>)
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	4613      	mov	r3, r2
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4413      	add	r3, r2
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	440b      	add	r3, r1
 8011930:	3314      	adds	r3, #20
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b03      	cmp	r3, #3
 8011936:	d10a      	bne.n	801194e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011938:	4925      	ldr	r1, [pc, #148]	; (80119d0 <etharp_tmr+0x14c>)
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	4613      	mov	r3, r2
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	4413      	add	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	440b      	add	r3, r1
 8011946:	3314      	adds	r3, #20
 8011948:	2204      	movs	r2, #4
 801194a:	701a      	strb	r2, [r3, #0]
 801194c:	e034      	b.n	80119b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801194e:	4920      	ldr	r1, [pc, #128]	; (80119d0 <etharp_tmr+0x14c>)
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	4613      	mov	r3, r2
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	4413      	add	r3, r2
 8011958:	00db      	lsls	r3, r3, #3
 801195a:	440b      	add	r3, r1
 801195c:	3314      	adds	r3, #20
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b04      	cmp	r3, #4
 8011962:	d10a      	bne.n	801197a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011964:	491a      	ldr	r1, [pc, #104]	; (80119d0 <etharp_tmr+0x14c>)
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	4613      	mov	r3, r2
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	4413      	add	r3, r2
 801196e:	00db      	lsls	r3, r3, #3
 8011970:	440b      	add	r3, r1
 8011972:	3314      	adds	r3, #20
 8011974:	2202      	movs	r2, #2
 8011976:	701a      	strb	r2, [r3, #0]
 8011978:	e01e      	b.n	80119b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801197a:	4915      	ldr	r1, [pc, #84]	; (80119d0 <etharp_tmr+0x14c>)
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	4613      	mov	r3, r2
 8011980:	005b      	lsls	r3, r3, #1
 8011982:	4413      	add	r3, r2
 8011984:	00db      	lsls	r3, r3, #3
 8011986:	440b      	add	r3, r1
 8011988:	3314      	adds	r3, #20
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d113      	bne.n	80119b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011990:	490f      	ldr	r1, [pc, #60]	; (80119d0 <etharp_tmr+0x14c>)
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	4613      	mov	r3, r2
 8011996:	005b      	lsls	r3, r3, #1
 8011998:	4413      	add	r3, r2
 801199a:	00db      	lsls	r3, r3, #3
 801199c:	440b      	add	r3, r1
 801199e:	3308      	adds	r3, #8
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	4613      	mov	r3, r2
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	4413      	add	r3, r2
 80119aa:	00db      	lsls	r3, r3, #3
 80119ac:	4a08      	ldr	r2, [pc, #32]	; (80119d0 <etharp_tmr+0x14c>)
 80119ae:	4413      	add	r3, r2
 80119b0:	3304      	adds	r3, #4
 80119b2:	4619      	mov	r1, r3
 80119b4:	f000 fe6e 	bl	8012694 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	3301      	adds	r3, #1
 80119bc:	607b      	str	r3, [r7, #4]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2b09      	cmp	r3, #9
 80119c2:	f77f af65 	ble.w	8011890 <etharp_tmr+0xc>
      }
    }
  }
}
 80119c6:	bf00      	nop
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	2000fea8 	.word	0x2000fea8

080119d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08a      	sub	sp, #40	; 0x28
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	460b      	mov	r3, r1
 80119de:	607a      	str	r2, [r7, #4]
 80119e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80119e2:	230a      	movs	r3, #10
 80119e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80119e6:	230a      	movs	r3, #10
 80119e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80119ea:	230a      	movs	r3, #10
 80119ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80119f2:	230a      	movs	r3, #10
 80119f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80119f6:	2300      	movs	r3, #0
 80119f8:	83bb      	strh	r3, [r7, #28]
 80119fa:	2300      	movs	r3, #0
 80119fc:	837b      	strh	r3, [r7, #26]
 80119fe:	2300      	movs	r3, #0
 8011a00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a02:	2300      	movs	r3, #0
 8011a04:	843b      	strh	r3, [r7, #32]
 8011a06:	e0ae      	b.n	8011b66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a0c:	49a6      	ldr	r1, [pc, #664]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011a0e:	4613      	mov	r3, r2
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	4413      	add	r3, r2
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	440b      	add	r3, r1
 8011a18:	3314      	adds	r3, #20
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a22:	2b0a      	cmp	r3, #10
 8011a24:	d105      	bne.n	8011a32 <etharp_find_entry+0x5e>
 8011a26:	7dfb      	ldrb	r3, [r7, #23]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d102      	bne.n	8011a32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011a2c:	8c3b      	ldrh	r3, [r7, #32]
 8011a2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011a30:	e095      	b.n	8011b5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011a32:	7dfb      	ldrb	r3, [r7, #23]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f000 8092 	beq.w	8011b5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011a3a:	7dfb      	ldrb	r3, [r7, #23]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d009      	beq.n	8011a54 <etharp_find_entry+0x80>
 8011a40:	7dfb      	ldrb	r3, [r7, #23]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d806      	bhi.n	8011a54 <etharp_find_entry+0x80>
 8011a46:	4b99      	ldr	r3, [pc, #612]	; (8011cac <etharp_find_entry+0x2d8>)
 8011a48:	f240 1223 	movw	r2, #291	; 0x123
 8011a4c:	4998      	ldr	r1, [pc, #608]	; (8011cb0 <etharp_find_entry+0x2dc>)
 8011a4e:	4899      	ldr	r0, [pc, #612]	; (8011cb4 <etharp_find_entry+0x2e0>)
 8011a50:	f002 fd16 	bl	8014480 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d020      	beq.n	8011a9c <etharp_find_entry+0xc8>
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6819      	ldr	r1, [r3, #0]
 8011a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a62:	4891      	ldr	r0, [pc, #580]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011a64:	4613      	mov	r3, r2
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	4413      	add	r3, r2
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	4403      	add	r3, r0
 8011a6e:	3304      	adds	r3, #4
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4299      	cmp	r1, r3
 8011a74:	d112      	bne.n	8011a9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00c      	beq.n	8011a96 <etharp_find_entry+0xc2>
 8011a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a80:	4989      	ldr	r1, [pc, #548]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011a82:	4613      	mov	r3, r2
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	4413      	add	r3, r2
 8011a88:	00db      	lsls	r3, r3, #3
 8011a8a:	440b      	add	r3, r1
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d102      	bne.n	8011a9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a9a:	e100      	b.n	8011c9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a9c:	7dfb      	ldrb	r3, [r7, #23]
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d140      	bne.n	8011b24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aa6:	4980      	ldr	r1, [pc, #512]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	4413      	add	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	440b      	add	r3, r1
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d01a      	beq.n	8011aee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011abc:	497a      	ldr	r1, [pc, #488]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011abe:	4613      	mov	r3, r2
 8011ac0:	005b      	lsls	r3, r3, #1
 8011ac2:	4413      	add	r3, r2
 8011ac4:	00db      	lsls	r3, r3, #3
 8011ac6:	440b      	add	r3, r1
 8011ac8:	3312      	adds	r3, #18
 8011aca:	881b      	ldrh	r3, [r3, #0]
 8011acc:	8bba      	ldrh	r2, [r7, #28]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d845      	bhi.n	8011b5e <etharp_find_entry+0x18a>
            old_queue = i;
 8011ad2:	8c3b      	ldrh	r3, [r7, #32]
 8011ad4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011ad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ada:	4973      	ldr	r1, [pc, #460]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011adc:	4613      	mov	r3, r2
 8011ade:	005b      	lsls	r3, r3, #1
 8011ae0:	4413      	add	r3, r2
 8011ae2:	00db      	lsls	r3, r3, #3
 8011ae4:	440b      	add	r3, r1
 8011ae6:	3312      	adds	r3, #18
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	83bb      	strh	r3, [r7, #28]
 8011aec:	e037      	b.n	8011b5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011af2:	496d      	ldr	r1, [pc, #436]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011af4:	4613      	mov	r3, r2
 8011af6:	005b      	lsls	r3, r3, #1
 8011af8:	4413      	add	r3, r2
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	440b      	add	r3, r1
 8011afe:	3312      	adds	r3, #18
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	8b7a      	ldrh	r2, [r7, #26]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d82a      	bhi.n	8011b5e <etharp_find_entry+0x18a>
            old_pending = i;
 8011b08:	8c3b      	ldrh	r3, [r7, #32]
 8011b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b10:	4965      	ldr	r1, [pc, #404]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	4413      	add	r3, r2
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	440b      	add	r3, r1
 8011b1c:	3312      	adds	r3, #18
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	837b      	strh	r3, [r7, #26]
 8011b22:	e01c      	b.n	8011b5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011b24:	7dfb      	ldrb	r3, [r7, #23]
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d919      	bls.n	8011b5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b2e:	495e      	ldr	r1, [pc, #376]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011b30:	4613      	mov	r3, r2
 8011b32:	005b      	lsls	r3, r3, #1
 8011b34:	4413      	add	r3, r2
 8011b36:	00db      	lsls	r3, r3, #3
 8011b38:	440b      	add	r3, r1
 8011b3a:	3312      	adds	r3, #18
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	8b3a      	ldrh	r2, [r7, #24]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d80c      	bhi.n	8011b5e <etharp_find_entry+0x18a>
            old_stable = i;
 8011b44:	8c3b      	ldrh	r3, [r7, #32]
 8011b46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011b48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b4c:	4956      	ldr	r1, [pc, #344]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011b4e:	4613      	mov	r3, r2
 8011b50:	005b      	lsls	r3, r3, #1
 8011b52:	4413      	add	r3, r2
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	440b      	add	r3, r1
 8011b58:	3312      	adds	r3, #18
 8011b5a:	881b      	ldrh	r3, [r3, #0]
 8011b5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b5e:	8c3b      	ldrh	r3, [r7, #32]
 8011b60:	3301      	adds	r3, #1
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	843b      	strh	r3, [r7, #32]
 8011b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b6a:	2b09      	cmp	r3, #9
 8011b6c:	f77f af4c 	ble.w	8011a08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b70:	7afb      	ldrb	r3, [r7, #11]
 8011b72:	f003 0302 	and.w	r3, r3, #2
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d108      	bne.n	8011b8c <etharp_find_entry+0x1b8>
 8011b7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b7e:	2b0a      	cmp	r3, #10
 8011b80:	d107      	bne.n	8011b92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b82:	7afb      	ldrb	r3, [r7, #11]
 8011b84:	f003 0301 	and.w	r3, r3, #1
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b90:	e085      	b.n	8011c9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b96:	2b09      	cmp	r3, #9
 8011b98:	dc02      	bgt.n	8011ba0 <etharp_find_entry+0x1cc>
    i = empty;
 8011b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b9c:	843b      	strh	r3, [r7, #32]
 8011b9e:	e039      	b.n	8011c14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011ba4:	2b09      	cmp	r3, #9
 8011ba6:	dc14      	bgt.n	8011bd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011baa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bb0:	493d      	ldr	r1, [pc, #244]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	005b      	lsls	r3, r3, #1
 8011bb6:	4413      	add	r3, r2
 8011bb8:	00db      	lsls	r3, r3, #3
 8011bba:	440b      	add	r3, r1
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d018      	beq.n	8011bf4 <etharp_find_entry+0x220>
 8011bc2:	4b3a      	ldr	r3, [pc, #232]	; (8011cac <etharp_find_entry+0x2d8>)
 8011bc4:	f240 126d 	movw	r2, #365	; 0x16d
 8011bc8:	493b      	ldr	r1, [pc, #236]	; (8011cb8 <etharp_find_entry+0x2e4>)
 8011bca:	483a      	ldr	r0, [pc, #232]	; (8011cb4 <etharp_find_entry+0x2e0>)
 8011bcc:	f002 fc58 	bl	8014480 <iprintf>
 8011bd0:	e010      	b.n	8011bf4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011bd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011bd6:	2b09      	cmp	r3, #9
 8011bd8:	dc02      	bgt.n	8011be0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bdc:	843b      	strh	r3, [r7, #32]
 8011bde:	e009      	b.n	8011bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011be0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011be4:	2b09      	cmp	r3, #9
 8011be6:	dc02      	bgt.n	8011bee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011be8:	8bfb      	ldrh	r3, [r7, #30]
 8011bea:	843b      	strh	r3, [r7, #32]
 8011bec:	e002      	b.n	8011bf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011bee:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf2:	e054      	b.n	8011c9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bf8:	2b09      	cmp	r3, #9
 8011bfa:	dd06      	ble.n	8011c0a <etharp_find_entry+0x236>
 8011bfc:	4b2b      	ldr	r3, [pc, #172]	; (8011cac <etharp_find_entry+0x2d8>)
 8011bfe:	f240 127f 	movw	r2, #383	; 0x17f
 8011c02:	492e      	ldr	r1, [pc, #184]	; (8011cbc <etharp_find_entry+0x2e8>)
 8011c04:	482b      	ldr	r0, [pc, #172]	; (8011cb4 <etharp_find_entry+0x2e0>)
 8011c06:	f002 fc3b 	bl	8014480 <iprintf>
    etharp_free_entry(i);
 8011c0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff fe06 	bl	8011820 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011c14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c18:	2b09      	cmp	r3, #9
 8011c1a:	dd06      	ble.n	8011c2a <etharp_find_entry+0x256>
 8011c1c:	4b23      	ldr	r3, [pc, #140]	; (8011cac <etharp_find_entry+0x2d8>)
 8011c1e:	f240 1283 	movw	r2, #387	; 0x183
 8011c22:	4926      	ldr	r1, [pc, #152]	; (8011cbc <etharp_find_entry+0x2e8>)
 8011c24:	4823      	ldr	r0, [pc, #140]	; (8011cb4 <etharp_find_entry+0x2e0>)
 8011c26:	f002 fc2b 	bl	8014480 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c2e:	491e      	ldr	r1, [pc, #120]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011c30:	4613      	mov	r3, r2
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	4413      	add	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	440b      	add	r3, r1
 8011c3a:	3314      	adds	r3, #20
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d006      	beq.n	8011c50 <etharp_find_entry+0x27c>
 8011c42:	4b1a      	ldr	r3, [pc, #104]	; (8011cac <etharp_find_entry+0x2d8>)
 8011c44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011c48:	491d      	ldr	r1, [pc, #116]	; (8011cc0 <etharp_find_entry+0x2ec>)
 8011c4a:	481a      	ldr	r0, [pc, #104]	; (8011cb4 <etharp_find_entry+0x2e0>)
 8011c4c:	f002 fc18 	bl	8014480 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00b      	beq.n	8011c6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6819      	ldr	r1, [r3, #0]
 8011c5e:	4812      	ldr	r0, [pc, #72]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011c60:	4613      	mov	r3, r2
 8011c62:	005b      	lsls	r3, r3, #1
 8011c64:	4413      	add	r3, r2
 8011c66:	00db      	lsls	r3, r3, #3
 8011c68:	4403      	add	r3, r0
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c72:	490d      	ldr	r1, [pc, #52]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011c74:	4613      	mov	r3, r2
 8011c76:	005b      	lsls	r3, r3, #1
 8011c78:	4413      	add	r3, r2
 8011c7a:	00db      	lsls	r3, r3, #3
 8011c7c:	440b      	add	r3, r1
 8011c7e:	3312      	adds	r3, #18
 8011c80:	2200      	movs	r2, #0
 8011c82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011c84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c88:	4907      	ldr	r1, [pc, #28]	; (8011ca8 <etharp_find_entry+0x2d4>)
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	4413      	add	r3, r2
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	440b      	add	r3, r1
 8011c94:	3308      	adds	r3, #8
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011c9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3728      	adds	r7, #40	; 0x28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	2000fea8 	.word	0x2000fea8
 8011cac:	08018808 	.word	0x08018808
 8011cb0:	08018840 	.word	0x08018840
 8011cb4:	08018880 	.word	0x08018880
 8011cb8:	080188a8 	.word	0x080188a8
 8011cbc:	080188c0 	.word	0x080188c0
 8011cc0:	080188d4 	.word	0x080188d4

08011cc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b088      	sub	sp, #32
 8011cc8:	af02      	add	r7, sp, #8
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011cd8:	2b06      	cmp	r3, #6
 8011cda:	d006      	beq.n	8011cea <etharp_update_arp_entry+0x26>
 8011cdc:	4b48      	ldr	r3, [pc, #288]	; (8011e00 <etharp_update_arp_entry+0x13c>)
 8011cde:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011ce2:	4948      	ldr	r1, [pc, #288]	; (8011e04 <etharp_update_arp_entry+0x140>)
 8011ce4:	4848      	ldr	r0, [pc, #288]	; (8011e08 <etharp_update_arp_entry+0x144>)
 8011ce6:	f002 fbcb 	bl	8014480 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d012      	beq.n	8011d16 <etharp_update_arp_entry+0x52>
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00e      	beq.n	8011d16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	68f9      	ldr	r1, [r7, #12]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f001 f8fe 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8011d04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d105      	bne.n	8011d16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d12:	2be0      	cmp	r3, #224	; 0xe0
 8011d14:	d102      	bne.n	8011d1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011d16:	f06f 030f 	mvn.w	r3, #15
 8011d1a:	e06c      	b.n	8011df6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011d1c:	78fb      	ldrb	r3, [r7, #3]
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	4619      	mov	r1, r3
 8011d22:	68b8      	ldr	r0, [r7, #8]
 8011d24:	f7ff fe56 	bl	80119d4 <etharp_find_entry>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011d2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	da02      	bge.n	8011d3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011d34:	8afb      	ldrh	r3, [r7, #22]
 8011d36:	b25b      	sxtb	r3, r3
 8011d38:	e05d      	b.n	8011df6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d3e:	4933      	ldr	r1, [pc, #204]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011d40:	4613      	mov	r3, r2
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	4413      	add	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	440b      	add	r3, r1
 8011d4a:	3314      	adds	r3, #20
 8011d4c:	2202      	movs	r2, #2
 8011d4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011d50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d54:	492d      	ldr	r1, [pc, #180]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011d56:	4613      	mov	r3, r2
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	4413      	add	r3, r2
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	440b      	add	r3, r1
 8011d60:	3308      	adds	r3, #8
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011d66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d6a:	4613      	mov	r3, r2
 8011d6c:	005b      	lsls	r3, r3, #1
 8011d6e:	4413      	add	r3, r2
 8011d70:	00db      	lsls	r3, r3, #3
 8011d72:	3308      	adds	r3, #8
 8011d74:	4a25      	ldr	r2, [pc, #148]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011d76:	4413      	add	r3, r2
 8011d78:	3304      	adds	r3, #4
 8011d7a:	2206      	movs	r2, #6
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f002 fb68 	bl	8014454 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d88:	4920      	ldr	r1, [pc, #128]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	440b      	add	r3, r1
 8011d94:	3312      	adds	r3, #18
 8011d96:	2200      	movs	r2, #0
 8011d98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d9e:	491b      	ldr	r1, [pc, #108]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011da0:	4613      	mov	r3, r2
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	4413      	add	r3, r2
 8011da6:	00db      	lsls	r3, r3, #3
 8011da8:	440b      	add	r3, r1
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d021      	beq.n	8011df4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011db4:	4915      	ldr	r1, [pc, #84]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011db6:	4613      	mov	r3, r2
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	4413      	add	r3, r2
 8011dbc:	00db      	lsls	r3, r3, #3
 8011dbe:	440b      	add	r3, r1
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011dc8:	4910      	ldr	r1, [pc, #64]	; (8011e0c <etharp_update_arp_entry+0x148>)
 8011dca:	4613      	mov	r3, r2
 8011dcc:	005b      	lsls	r3, r3, #1
 8011dce:	4413      	add	r3, r2
 8011dd0:	00db      	lsls	r3, r3, #3
 8011dd2:	440b      	add	r3, r1
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6939      	ldr	r1, [r7, #16]
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f002 f8d5 	bl	8013f98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011dee:	6938      	ldr	r0, [r7, #16]
 8011df0:	f7f8 fb36 	bl	800a460 <pbuf_free>
  }
  return ERR_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	08018808 	.word	0x08018808
 8011e04:	08018900 	.word	0x08018900
 8011e08:	08018880 	.word	0x08018880
 8011e0c:	2000fea8 	.word	0x2000fea8

08011e10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e18:	2300      	movs	r3, #0
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	e01e      	b.n	8011e5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011e1e:	4913      	ldr	r1, [pc, #76]	; (8011e6c <etharp_cleanup_netif+0x5c>)
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	4613      	mov	r3, r2
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	4413      	add	r3, r2
 8011e28:	00db      	lsls	r3, r3, #3
 8011e2a:	440b      	add	r3, r1
 8011e2c:	3314      	adds	r3, #20
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011e32:	7afb      	ldrb	r3, [r7, #11]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00e      	beq.n	8011e56 <etharp_cleanup_netif+0x46>
 8011e38:	490c      	ldr	r1, [pc, #48]	; (8011e6c <etharp_cleanup_netif+0x5c>)
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	440b      	add	r3, r1
 8011e46:	3308      	adds	r3, #8
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d102      	bne.n	8011e56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7ff fce5 	bl	8011820 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b09      	cmp	r3, #9
 8011e60:	dddd      	ble.n	8011e1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8011e62:	bf00      	nop
 8011e64:	bf00      	nop
 8011e66:	3710      	adds	r7, #16
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	2000fea8 	.word	0x2000fea8

08011e70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e70:	b5b0      	push	{r4, r5, r7, lr}
 8011e72:	b08a      	sub	sp, #40	; 0x28
 8011e74:	af04      	add	r7, sp, #16
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d107      	bne.n	8011e90 <etharp_input+0x20>
 8011e80:	4b3d      	ldr	r3, [pc, #244]	; (8011f78 <etharp_input+0x108>)
 8011e82:	f240 228a 	movw	r2, #650	; 0x28a
 8011e86:	493d      	ldr	r1, [pc, #244]	; (8011f7c <etharp_input+0x10c>)
 8011e88:	483d      	ldr	r0, [pc, #244]	; (8011f80 <etharp_input+0x110>)
 8011e8a:	f002 faf9 	bl	8014480 <iprintf>
 8011e8e:	e06f      	b.n	8011f70 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	881b      	ldrh	r3, [r3, #0]
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ea0:	d10c      	bne.n	8011ebc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011ea6:	2b06      	cmp	r3, #6
 8011ea8:	d108      	bne.n	8011ebc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011eae:	2b04      	cmp	r3, #4
 8011eb0:	d104      	bne.n	8011ebc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	885b      	ldrh	r3, [r3, #2]
 8011eb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	d003      	beq.n	8011ec4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f7f8 facf 	bl	800a460 <pbuf_free>
    return;
 8011ec2:	e055      	b.n	8011f70 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	330e      	adds	r3, #14
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	3318      	adds	r3, #24
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d102      	bne.n	8011ee4 <etharp_input+0x74>
    for_us = 0;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	75fb      	strb	r3, [r7, #23]
 8011ee2:	e009      	b.n	8011ef8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	3304      	adds	r3, #4
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	bf0c      	ite	eq
 8011ef0:	2301      	moveq	r3, #1
 8011ef2:	2300      	movne	r3, #0
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	f103 0208 	add.w	r2, r3, #8
 8011efe:	7dfb      	ldrb	r3, [r7, #23]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <etharp_input+0x98>
 8011f04:	2301      	movs	r3, #1
 8011f06:	e000      	b.n	8011f0a <etharp_input+0x9a>
 8011f08:	2302      	movs	r3, #2
 8011f0a:	f107 010c 	add.w	r1, r7, #12
 8011f0e:	6838      	ldr	r0, [r7, #0]
 8011f10:	f7ff fed8 	bl	8011cc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	88db      	ldrh	r3, [r3, #6]
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f1e:	d003      	beq.n	8011f28 <etharp_input+0xb8>
 8011f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f24:	d01e      	beq.n	8011f64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011f26:	e020      	b.n	8011f6a <etharp_input+0xfa>
      if (for_us) {
 8011f28:	7dfb      	ldrb	r3, [r7, #23]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d01c      	beq.n	8011f68 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011f44:	693a      	ldr	r2, [r7, #16]
 8011f46:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011f48:	2102      	movs	r1, #2
 8011f4a:	9103      	str	r1, [sp, #12]
 8011f4c:	f107 010c 	add.w	r1, r7, #12
 8011f50:	9102      	str	r1, [sp, #8]
 8011f52:	9201      	str	r2, [sp, #4]
 8011f54:	9300      	str	r3, [sp, #0]
 8011f56:	462b      	mov	r3, r5
 8011f58:	4622      	mov	r2, r4
 8011f5a:	4601      	mov	r1, r0
 8011f5c:	6838      	ldr	r0, [r7, #0]
 8011f5e:	f000 faeb 	bl	8012538 <etharp_raw>
      break;
 8011f62:	e001      	b.n	8011f68 <etharp_input+0xf8>
      break;
 8011f64:	bf00      	nop
 8011f66:	e000      	b.n	8011f6a <etharp_input+0xfa>
      break;
 8011f68:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7f8 fa78 	bl	800a460 <pbuf_free>
}
 8011f70:	3718      	adds	r7, #24
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bdb0      	pop	{r4, r5, r7, pc}
 8011f76:	bf00      	nop
 8011f78:	08018808 	.word	0x08018808
 8011f7c:	08018958 	.word	0x08018958
 8011f80:	08018880 	.word	0x08018880

08011f84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b086      	sub	sp, #24
 8011f88:	af02      	add	r7, sp, #8
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f92:	79fa      	ldrb	r2, [r7, #7]
 8011f94:	4944      	ldr	r1, [pc, #272]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8011f96:	4613      	mov	r3, r2
 8011f98:	005b      	lsls	r3, r3, #1
 8011f9a:	4413      	add	r3, r2
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	440b      	add	r3, r1
 8011fa0:	3314      	adds	r3, #20
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d806      	bhi.n	8011fb6 <etharp_output_to_arp_index+0x32>
 8011fa8:	4b40      	ldr	r3, [pc, #256]	; (80120ac <etharp_output_to_arp_index+0x128>)
 8011faa:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011fae:	4940      	ldr	r1, [pc, #256]	; (80120b0 <etharp_output_to_arp_index+0x12c>)
 8011fb0:	4840      	ldr	r0, [pc, #256]	; (80120b4 <etharp_output_to_arp_index+0x130>)
 8011fb2:	f002 fa65 	bl	8014480 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011fb6:	79fa      	ldrb	r2, [r7, #7]
 8011fb8:	493b      	ldr	r1, [pc, #236]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8011fba:	4613      	mov	r3, r2
 8011fbc:	005b      	lsls	r3, r3, #1
 8011fbe:	4413      	add	r3, r2
 8011fc0:	00db      	lsls	r3, r3, #3
 8011fc2:	440b      	add	r3, r1
 8011fc4:	3314      	adds	r3, #20
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	2b02      	cmp	r3, #2
 8011fca:	d153      	bne.n	8012074 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011fcc:	79fa      	ldrb	r2, [r7, #7]
 8011fce:	4936      	ldr	r1, [pc, #216]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	005b      	lsls	r3, r3, #1
 8011fd4:	4413      	add	r3, r2
 8011fd6:	00db      	lsls	r3, r3, #3
 8011fd8:	440b      	add	r3, r1
 8011fda:	3312      	adds	r3, #18
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011fe2:	d919      	bls.n	8012018 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011fe4:	79fa      	ldrb	r2, [r7, #7]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	4413      	add	r3, r2
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	4a2e      	ldr	r2, [pc, #184]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8011ff0:	4413      	add	r3, r2
 8011ff2:	3304      	adds	r3, #4
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f000 fb4c 	bl	8012694 <etharp_request>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d138      	bne.n	8012074 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012002:	79fa      	ldrb	r2, [r7, #7]
 8012004:	4928      	ldr	r1, [pc, #160]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	440b      	add	r3, r1
 8012010:	3314      	adds	r3, #20
 8012012:	2203      	movs	r2, #3
 8012014:	701a      	strb	r2, [r3, #0]
 8012016:	e02d      	b.n	8012074 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012018:	79fa      	ldrb	r2, [r7, #7]
 801201a:	4923      	ldr	r1, [pc, #140]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	440b      	add	r3, r1
 8012026:	3312      	adds	r3, #18
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801202e:	d321      	bcc.n	8012074 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012030:	79fa      	ldrb	r2, [r7, #7]
 8012032:	4613      	mov	r3, r2
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	4413      	add	r3, r2
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	4a1b      	ldr	r2, [pc, #108]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 801203c:	4413      	add	r3, r2
 801203e:	1d19      	adds	r1, r3, #4
 8012040:	79fa      	ldrb	r2, [r7, #7]
 8012042:	4613      	mov	r3, r2
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	4413      	add	r3, r2
 8012048:	00db      	lsls	r3, r3, #3
 801204a:	3308      	adds	r3, #8
 801204c:	4a16      	ldr	r2, [pc, #88]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 801204e:	4413      	add	r3, r2
 8012050:	3304      	adds	r3, #4
 8012052:	461a      	mov	r2, r3
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f000 fafb 	bl	8012650 <etharp_request_dst>
 801205a:	4603      	mov	r3, r0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d109      	bne.n	8012074 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012060:	79fa      	ldrb	r2, [r7, #7]
 8012062:	4911      	ldr	r1, [pc, #68]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	440b      	add	r3, r1
 801206e:	3314      	adds	r3, #20
 8012070:	2203      	movs	r2, #3
 8012072:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801207a:	79fa      	ldrb	r2, [r7, #7]
 801207c:	4613      	mov	r3, r2
 801207e:	005b      	lsls	r3, r3, #1
 8012080:	4413      	add	r3, r2
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	3308      	adds	r3, #8
 8012086:	4a08      	ldr	r2, [pc, #32]	; (80120a8 <etharp_output_to_arp_index+0x124>)
 8012088:	4413      	add	r3, r2
 801208a:	3304      	adds	r3, #4
 801208c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012090:	9200      	str	r2, [sp, #0]
 8012092:	460a      	mov	r2, r1
 8012094:	68b9      	ldr	r1, [r7, #8]
 8012096:	68f8      	ldr	r0, [r7, #12]
 8012098:	f001 ff7e 	bl	8013f98 <ethernet_output>
 801209c:	4603      	mov	r3, r0
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	2000fea8 	.word	0x2000fea8
 80120ac:	08018808 	.word	0x08018808
 80120b0:	08018978 	.word	0x08018978
 80120b4:	08018880 	.word	0x08018880

080120b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b08a      	sub	sp, #40	; 0x28
 80120bc:	af02      	add	r7, sp, #8
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <etharp_output+0x24>
 80120ce:	4b73      	ldr	r3, [pc, #460]	; (801229c <etharp_output+0x1e4>)
 80120d0:	f240 321e 	movw	r2, #798	; 0x31e
 80120d4:	4972      	ldr	r1, [pc, #456]	; (80122a0 <etharp_output+0x1e8>)
 80120d6:	4873      	ldr	r0, [pc, #460]	; (80122a4 <etharp_output+0x1ec>)
 80120d8:	f002 f9d2 	bl	8014480 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d106      	bne.n	80120f0 <etharp_output+0x38>
 80120e2:	4b6e      	ldr	r3, [pc, #440]	; (801229c <etharp_output+0x1e4>)
 80120e4:	f240 321f 	movw	r2, #799	; 0x31f
 80120e8:	496f      	ldr	r1, [pc, #444]	; (80122a8 <etharp_output+0x1f0>)
 80120ea:	486e      	ldr	r0, [pc, #440]	; (80122a4 <etharp_output+0x1ec>)
 80120ec:	f002 f9c8 	bl	8014480 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d106      	bne.n	8012104 <etharp_output+0x4c>
 80120f6:	4b69      	ldr	r3, [pc, #420]	; (801229c <etharp_output+0x1e4>)
 80120f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80120fc:	496b      	ldr	r1, [pc, #428]	; (80122ac <etharp_output+0x1f4>)
 80120fe:	4869      	ldr	r0, [pc, #420]	; (80122a4 <etharp_output+0x1ec>)
 8012100:	f002 f9be 	bl	8014480 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	68f9      	ldr	r1, [r7, #12]
 801210a:	4618      	mov	r0, r3
 801210c:	f000 fef8 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d002      	beq.n	801211c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012116:	4b66      	ldr	r3, [pc, #408]	; (80122b0 <etharp_output+0x1f8>)
 8012118:	61fb      	str	r3, [r7, #28]
 801211a:	e0af      	b.n	801227c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012124:	2be0      	cmp	r3, #224	; 0xe0
 8012126:	d118      	bne.n	801215a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012128:	2301      	movs	r3, #1
 801212a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801212c:	2300      	movs	r3, #0
 801212e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012130:	235e      	movs	r3, #94	; 0x5e
 8012132:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	3301      	adds	r3, #1
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801213e:	b2db      	uxtb	r3, r3
 8012140:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	3302      	adds	r3, #2
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3303      	adds	r3, #3
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012152:	f107 0310 	add.w	r3, r7, #16
 8012156:	61fb      	str	r3, [r7, #28]
 8012158:	e090      	b.n	801227c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3304      	adds	r3, #4
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	405a      	eors	r2, r3
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	3308      	adds	r3, #8
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4013      	ands	r3, r2
 801216e:	2b00      	cmp	r3, #0
 8012170:	d012      	beq.n	8012198 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012178:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801217c:	4293      	cmp	r3, r2
 801217e:	d00b      	beq.n	8012198 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	330c      	adds	r3, #12
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d003      	beq.n	8012192 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	330c      	adds	r3, #12
 801218e:	61bb      	str	r3, [r7, #24]
 8012190:	e002      	b.n	8012198 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012192:	f06f 0303 	mvn.w	r3, #3
 8012196:	e07d      	b.n	8012294 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012198:	4b46      	ldr	r3, [pc, #280]	; (80122b4 <etharp_output+0x1fc>)
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	4619      	mov	r1, r3
 801219e:	4a46      	ldr	r2, [pc, #280]	; (80122b8 <etharp_output+0x200>)
 80121a0:	460b      	mov	r3, r1
 80121a2:	005b      	lsls	r3, r3, #1
 80121a4:	440b      	add	r3, r1
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	4413      	add	r3, r2
 80121aa:	3314      	adds	r3, #20
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d925      	bls.n	80121fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80121b2:	4b40      	ldr	r3, [pc, #256]	; (80122b4 <etharp_output+0x1fc>)
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	4619      	mov	r1, r3
 80121b8:	4a3f      	ldr	r2, [pc, #252]	; (80122b8 <etharp_output+0x200>)
 80121ba:	460b      	mov	r3, r1
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	440b      	add	r3, r1
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	4413      	add	r3, r2
 80121c4:	3308      	adds	r3, #8
 80121c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d117      	bne.n	80121fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	4b38      	ldr	r3, [pc, #224]	; (80122b4 <etharp_output+0x1fc>)
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	4618      	mov	r0, r3
 80121d8:	4937      	ldr	r1, [pc, #220]	; (80122b8 <etharp_output+0x200>)
 80121da:	4603      	mov	r3, r0
 80121dc:	005b      	lsls	r3, r3, #1
 80121de:	4403      	add	r3, r0
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	440b      	add	r3, r1
 80121e4:	3304      	adds	r3, #4
 80121e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d108      	bne.n	80121fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80121ec:	4b31      	ldr	r3, [pc, #196]	; (80122b4 <etharp_output+0x1fc>)
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	461a      	mov	r2, r3
 80121f2:	68b9      	ldr	r1, [r7, #8]
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7ff fec5 	bl	8011f84 <etharp_output_to_arp_index>
 80121fa:	4603      	mov	r3, r0
 80121fc:	e04a      	b.n	8012294 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121fe:	2300      	movs	r3, #0
 8012200:	75fb      	strb	r3, [r7, #23]
 8012202:	e031      	b.n	8012268 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012204:	7dfa      	ldrb	r2, [r7, #23]
 8012206:	492c      	ldr	r1, [pc, #176]	; (80122b8 <etharp_output+0x200>)
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	440b      	add	r3, r1
 8012212:	3314      	adds	r3, #20
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	2b01      	cmp	r3, #1
 8012218:	d923      	bls.n	8012262 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801221a:	7dfa      	ldrb	r2, [r7, #23]
 801221c:	4926      	ldr	r1, [pc, #152]	; (80122b8 <etharp_output+0x200>)
 801221e:	4613      	mov	r3, r2
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	4413      	add	r3, r2
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	440b      	add	r3, r1
 8012228:	3308      	adds	r3, #8
 801222a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	429a      	cmp	r2, r3
 8012230:	d117      	bne.n	8012262 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	6819      	ldr	r1, [r3, #0]
 8012236:	7dfa      	ldrb	r2, [r7, #23]
 8012238:	481f      	ldr	r0, [pc, #124]	; (80122b8 <etharp_output+0x200>)
 801223a:	4613      	mov	r3, r2
 801223c:	005b      	lsls	r3, r3, #1
 801223e:	4413      	add	r3, r2
 8012240:	00db      	lsls	r3, r3, #3
 8012242:	4403      	add	r3, r0
 8012244:	3304      	adds	r3, #4
 8012246:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012248:	4299      	cmp	r1, r3
 801224a:	d10a      	bne.n	8012262 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801224c:	4a19      	ldr	r2, [pc, #100]	; (80122b4 <etharp_output+0x1fc>)
 801224e:	7dfb      	ldrb	r3, [r7, #23]
 8012250:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012252:	7dfb      	ldrb	r3, [r7, #23]
 8012254:	461a      	mov	r2, r3
 8012256:	68b9      	ldr	r1, [r7, #8]
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f7ff fe93 	bl	8011f84 <etharp_output_to_arp_index>
 801225e:	4603      	mov	r3, r0
 8012260:	e018      	b.n	8012294 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012262:	7dfb      	ldrb	r3, [r7, #23]
 8012264:	3301      	adds	r3, #1
 8012266:	75fb      	strb	r3, [r7, #23]
 8012268:	7dfb      	ldrb	r3, [r7, #23]
 801226a:	2b09      	cmp	r3, #9
 801226c:	d9ca      	bls.n	8012204 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801226e:	68ba      	ldr	r2, [r7, #8]
 8012270:	69b9      	ldr	r1, [r7, #24]
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f000 f822 	bl	80122bc <etharp_query>
 8012278:	4603      	mov	r3, r0
 801227a:	e00b      	b.n	8012294 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	68b9      	ldr	r1, [r7, #8]
 801228c:	68f8      	ldr	r0, [r7, #12]
 801228e:	f001 fe83 	bl	8013f98 <ethernet_output>
 8012292:	4603      	mov	r3, r0
}
 8012294:	4618      	mov	r0, r3
 8012296:	3720      	adds	r7, #32
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}
 801229c:	08018808 	.word	0x08018808
 80122a0:	08018958 	.word	0x08018958
 80122a4:	08018880 	.word	0x08018880
 80122a8:	080189a8 	.word	0x080189a8
 80122ac:	08018948 	.word	0x08018948
 80122b0:	080190bc 	.word	0x080190bc
 80122b4:	2000ff98 	.word	0x2000ff98
 80122b8:	2000fea8 	.word	0x2000fea8

080122bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08c      	sub	sp, #48	; 0x30
 80122c0:	af02      	add	r7, sp, #8
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	3326      	adds	r3, #38	; 0x26
 80122cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80122ce:	23ff      	movs	r3, #255	; 0xff
 80122d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80122d4:	2300      	movs	r3, #0
 80122d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68f9      	ldr	r1, [r7, #12]
 80122de:	4618      	mov	r0, r3
 80122e0:	f000 fe0e 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d10c      	bne.n	8012304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122f2:	2be0      	cmp	r3, #224	; 0xe0
 80122f4:	d006      	beq.n	8012304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d003      	beq.n	8012304 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d102      	bne.n	801230a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012304:	f06f 030f 	mvn.w	r3, #15
 8012308:	e101      	b.n	801250e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	2101      	movs	r1, #1
 801230e:	68b8      	ldr	r0, [r7, #8]
 8012310:	f7ff fb60 	bl	80119d4 <etharp_find_entry>
 8012314:	4603      	mov	r3, r0
 8012316:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012318:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801231c:	2b00      	cmp	r3, #0
 801231e:	da02      	bge.n	8012326 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012320:	8a7b      	ldrh	r3, [r7, #18]
 8012322:	b25b      	sxtb	r3, r3
 8012324:	e0f3      	b.n	801250e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012326:	8a7b      	ldrh	r3, [r7, #18]
 8012328:	2b7e      	cmp	r3, #126	; 0x7e
 801232a:	d906      	bls.n	801233a <etharp_query+0x7e>
 801232c:	4b7a      	ldr	r3, [pc, #488]	; (8012518 <etharp_query+0x25c>)
 801232e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012332:	497a      	ldr	r1, [pc, #488]	; (801251c <etharp_query+0x260>)
 8012334:	487a      	ldr	r0, [pc, #488]	; (8012520 <etharp_query+0x264>)
 8012336:	f002 f8a3 	bl	8014480 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801233a:	8a7b      	ldrh	r3, [r7, #18]
 801233c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801233e:	7c7a      	ldrb	r2, [r7, #17]
 8012340:	4978      	ldr	r1, [pc, #480]	; (8012524 <etharp_query+0x268>)
 8012342:	4613      	mov	r3, r2
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	4413      	add	r3, r2
 8012348:	00db      	lsls	r3, r3, #3
 801234a:	440b      	add	r3, r1
 801234c:	3314      	adds	r3, #20
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d115      	bne.n	8012380 <etharp_query+0xc4>
    is_new_entry = 1;
 8012354:	2301      	movs	r3, #1
 8012356:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012358:	7c7a      	ldrb	r2, [r7, #17]
 801235a:	4972      	ldr	r1, [pc, #456]	; (8012524 <etharp_query+0x268>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	2201      	movs	r2, #1
 801236a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801236c:	7c7a      	ldrb	r2, [r7, #17]
 801236e:	496d      	ldr	r1, [pc, #436]	; (8012524 <etharp_query+0x268>)
 8012370:	4613      	mov	r3, r2
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	4413      	add	r3, r2
 8012376:	00db      	lsls	r3, r3, #3
 8012378:	440b      	add	r3, r1
 801237a:	3308      	adds	r3, #8
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012380:	7c7a      	ldrb	r2, [r7, #17]
 8012382:	4968      	ldr	r1, [pc, #416]	; (8012524 <etharp_query+0x268>)
 8012384:	4613      	mov	r3, r2
 8012386:	005b      	lsls	r3, r3, #1
 8012388:	4413      	add	r3, r2
 801238a:	00db      	lsls	r3, r3, #3
 801238c:	440b      	add	r3, r1
 801238e:	3314      	adds	r3, #20
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	2b01      	cmp	r3, #1
 8012394:	d011      	beq.n	80123ba <etharp_query+0xfe>
 8012396:	7c7a      	ldrb	r2, [r7, #17]
 8012398:	4962      	ldr	r1, [pc, #392]	; (8012524 <etharp_query+0x268>)
 801239a:	4613      	mov	r3, r2
 801239c:	005b      	lsls	r3, r3, #1
 801239e:	4413      	add	r3, r2
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	440b      	add	r3, r1
 80123a4:	3314      	adds	r3, #20
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d806      	bhi.n	80123ba <etharp_query+0xfe>
 80123ac:	4b5a      	ldr	r3, [pc, #360]	; (8012518 <etharp_query+0x25c>)
 80123ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 80123b2:	495d      	ldr	r1, [pc, #372]	; (8012528 <etharp_query+0x26c>)
 80123b4:	485a      	ldr	r0, [pc, #360]	; (8012520 <etharp_query+0x264>)
 80123b6:	f002 f863 	bl	8014480 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80123ba:	6a3b      	ldr	r3, [r7, #32]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d102      	bne.n	80123c6 <etharp_query+0x10a>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10c      	bne.n	80123e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f000 f963 	bl	8012694 <etharp_request>
 80123ce:	4603      	mov	r3, r0
 80123d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d102      	bne.n	80123e0 <etharp_query+0x124>
      return result;
 80123da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80123de:	e096      	b.n	801250e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d106      	bne.n	80123f4 <etharp_query+0x138>
 80123e6:	4b4c      	ldr	r3, [pc, #304]	; (8012518 <etharp_query+0x25c>)
 80123e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80123ec:	494f      	ldr	r1, [pc, #316]	; (801252c <etharp_query+0x270>)
 80123ee:	484c      	ldr	r0, [pc, #304]	; (8012520 <etharp_query+0x264>)
 80123f0:	f002 f846 	bl	8014480 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80123f4:	7c7a      	ldrb	r2, [r7, #17]
 80123f6:	494b      	ldr	r1, [pc, #300]	; (8012524 <etharp_query+0x268>)
 80123f8:	4613      	mov	r3, r2
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	4413      	add	r3, r2
 80123fe:	00db      	lsls	r3, r3, #3
 8012400:	440b      	add	r3, r1
 8012402:	3314      	adds	r3, #20
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	2b01      	cmp	r3, #1
 8012408:	d917      	bls.n	801243a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801240a:	4a49      	ldr	r2, [pc, #292]	; (8012530 <etharp_query+0x274>)
 801240c:	7c7b      	ldrb	r3, [r7, #17]
 801240e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012410:	7c7a      	ldrb	r2, [r7, #17]
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	3308      	adds	r3, #8
 801241c:	4a41      	ldr	r2, [pc, #260]	; (8012524 <etharp_query+0x268>)
 801241e:	4413      	add	r3, r2
 8012420:	3304      	adds	r3, #4
 8012422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012426:	9200      	str	r2, [sp, #0]
 8012428:	697a      	ldr	r2, [r7, #20]
 801242a:	6879      	ldr	r1, [r7, #4]
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f001 fdb3 	bl	8013f98 <ethernet_output>
 8012432:	4603      	mov	r3, r0
 8012434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012438:	e067      	b.n	801250a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801243a:	7c7a      	ldrb	r2, [r7, #17]
 801243c:	4939      	ldr	r1, [pc, #228]	; (8012524 <etharp_query+0x268>)
 801243e:	4613      	mov	r3, r2
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	4413      	add	r3, r2
 8012444:	00db      	lsls	r3, r3, #3
 8012446:	440b      	add	r3, r1
 8012448:	3314      	adds	r3, #20
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	2b01      	cmp	r3, #1
 801244e:	d15c      	bne.n	801250a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012450:	2300      	movs	r3, #0
 8012452:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012458:	e01c      	b.n	8012494 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	895a      	ldrh	r2, [r3, #10]
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	891b      	ldrh	r3, [r3, #8]
 8012462:	429a      	cmp	r2, r3
 8012464:	d10a      	bne.n	801247c <etharp_query+0x1c0>
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d006      	beq.n	801247c <etharp_query+0x1c0>
 801246e:	4b2a      	ldr	r3, [pc, #168]	; (8012518 <etharp_query+0x25c>)
 8012470:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012474:	492f      	ldr	r1, [pc, #188]	; (8012534 <etharp_query+0x278>)
 8012476:	482a      	ldr	r0, [pc, #168]	; (8012520 <etharp_query+0x264>)
 8012478:	f002 f802 	bl	8014480 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	7b1b      	ldrb	r3, [r3, #12]
 8012480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <etharp_query+0x1d2>
        copy_needed = 1;
 8012488:	2301      	movs	r3, #1
 801248a:	61bb      	str	r3, [r7, #24]
        break;
 801248c:	e005      	b.n	801249a <etharp_query+0x1de>
      }
      p = p->next;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d1df      	bne.n	801245a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d007      	beq.n	80124b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80124a6:	200e      	movs	r0, #14
 80124a8:	f7f8 fa52 	bl	800a950 <pbuf_clone>
 80124ac:	61f8      	str	r0, [r7, #28]
 80124ae:	e004      	b.n	80124ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80124b4:	69f8      	ldr	r0, [r7, #28]
 80124b6:	f7f8 f879 	bl	800a5ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d021      	beq.n	8012504 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80124c0:	7c7a      	ldrb	r2, [r7, #17]
 80124c2:	4918      	ldr	r1, [pc, #96]	; (8012524 <etharp_query+0x268>)
 80124c4:	4613      	mov	r3, r2
 80124c6:	005b      	lsls	r3, r3, #1
 80124c8:	4413      	add	r3, r2
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	440b      	add	r3, r1
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00a      	beq.n	80124ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80124d4:	7c7a      	ldrb	r2, [r7, #17]
 80124d6:	4913      	ldr	r1, [pc, #76]	; (8012524 <etharp_query+0x268>)
 80124d8:	4613      	mov	r3, r2
 80124da:	005b      	lsls	r3, r3, #1
 80124dc:	4413      	add	r3, r2
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	440b      	add	r3, r1
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f7 ffbb 	bl	800a460 <pbuf_free>
      }
      arp_table[i].q = p;
 80124ea:	7c7a      	ldrb	r2, [r7, #17]
 80124ec:	490d      	ldr	r1, [pc, #52]	; (8012524 <etharp_query+0x268>)
 80124ee:	4613      	mov	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	69fa      	ldr	r2, [r7, #28]
 80124fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80124fc:	2300      	movs	r3, #0
 80124fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012502:	e002      	b.n	801250a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012504:	23ff      	movs	r3, #255	; 0xff
 8012506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801250a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801250e:	4618      	mov	r0, r3
 8012510:	3728      	adds	r7, #40	; 0x28
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	08018808 	.word	0x08018808
 801251c:	080189b4 	.word	0x080189b4
 8012520:	08018880 	.word	0x08018880
 8012524:	2000fea8 	.word	0x2000fea8
 8012528:	080189c4 	.word	0x080189c4
 801252c:	080189a8 	.word	0x080189a8
 8012530:	2000ff98 	.word	0x2000ff98
 8012534:	080189ec 	.word	0x080189ec

08012538 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b08a      	sub	sp, #40	; 0x28
 801253c:	af02      	add	r7, sp, #8
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012546:	2300      	movs	r3, #0
 8012548:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d106      	bne.n	801255e <etharp_raw+0x26>
 8012550:	4b3a      	ldr	r3, [pc, #232]	; (801263c <etharp_raw+0x104>)
 8012552:	f240 4257 	movw	r2, #1111	; 0x457
 8012556:	493a      	ldr	r1, [pc, #232]	; (8012640 <etharp_raw+0x108>)
 8012558:	483a      	ldr	r0, [pc, #232]	; (8012644 <etharp_raw+0x10c>)
 801255a:	f001 ff91 	bl	8014480 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801255e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012562:	211c      	movs	r1, #28
 8012564:	200e      	movs	r0, #14
 8012566:	f7f7 fc97 	bl	8009e98 <pbuf_alloc>
 801256a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d102      	bne.n	8012578 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012572:	f04f 33ff 	mov.w	r3, #4294967295
 8012576:	e05d      	b.n	8012634 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	895b      	ldrh	r3, [r3, #10]
 801257c:	2b1b      	cmp	r3, #27
 801257e:	d806      	bhi.n	801258e <etharp_raw+0x56>
 8012580:	4b2e      	ldr	r3, [pc, #184]	; (801263c <etharp_raw+0x104>)
 8012582:	f240 4262 	movw	r2, #1122	; 0x462
 8012586:	4930      	ldr	r1, [pc, #192]	; (8012648 <etharp_raw+0x110>)
 8012588:	482e      	ldr	r0, [pc, #184]	; (8012644 <etharp_raw+0x10c>)
 801258a:	f001 ff79 	bl	8014480 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012594:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012596:	4618      	mov	r0, r3
 8012598:	f7f6 fbd4 	bl	8008d44 <lwip_htons>
 801259c:	4603      	mov	r3, r0
 801259e:	461a      	mov	r2, r3
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80125aa:	2b06      	cmp	r3, #6
 80125ac:	d006      	beq.n	80125bc <etharp_raw+0x84>
 80125ae:	4b23      	ldr	r3, [pc, #140]	; (801263c <etharp_raw+0x104>)
 80125b0:	f240 4269 	movw	r2, #1129	; 0x469
 80125b4:	4925      	ldr	r1, [pc, #148]	; (801264c <etharp_raw+0x114>)
 80125b6:	4823      	ldr	r0, [pc, #140]	; (8012644 <etharp_raw+0x10c>)
 80125b8:	f001 ff62 	bl	8014480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	3308      	adds	r3, #8
 80125c0:	2206      	movs	r2, #6
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	4618      	mov	r0, r3
 80125c6:	f001 ff45 	bl	8014454 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	3312      	adds	r3, #18
 80125ce:	2206      	movs	r2, #6
 80125d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125d2:	4618      	mov	r0, r3
 80125d4:	f001 ff3e 	bl	8014454 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	330e      	adds	r3, #14
 80125dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125de:	6812      	ldr	r2, [r2, #0]
 80125e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	3318      	adds	r3, #24
 80125e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125e8:	6812      	ldr	r2, [r2, #0]
 80125ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	2200      	movs	r2, #0
 80125f0:	701a      	strb	r2, [r3, #0]
 80125f2:	2200      	movs	r2, #0
 80125f4:	f042 0201 	orr.w	r2, r2, #1
 80125f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	2200      	movs	r2, #0
 80125fe:	f042 0208 	orr.w	r2, r2, #8
 8012602:	709a      	strb	r2, [r3, #2]
 8012604:	2200      	movs	r2, #0
 8012606:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2206      	movs	r2, #6
 801260c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2204      	movs	r2, #4
 8012612:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012614:	f640 0306 	movw	r3, #2054	; 0x806
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	69b9      	ldr	r1, [r7, #24]
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f001 fcb9 	bl	8013f98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012626:	69b8      	ldr	r0, [r7, #24]
 8012628:	f7f7 ff1a 	bl	800a460 <pbuf_free>
  p = NULL;
 801262c:	2300      	movs	r3, #0
 801262e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012630:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3720      	adds	r7, #32
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	08018808 	.word	0x08018808
 8012640:	08018958 	.word	0x08018958
 8012644:	08018880 	.word	0x08018880
 8012648:	08018a08 	.word	0x08018a08
 801264c:	08018a3c 	.word	0x08018a3c

08012650 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b088      	sub	sp, #32
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801266c:	2201      	movs	r2, #1
 801266e:	9203      	str	r2, [sp, #12]
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	9202      	str	r2, [sp, #8]
 8012674:	4a06      	ldr	r2, [pc, #24]	; (8012690 <etharp_request_dst+0x40>)
 8012676:	9201      	str	r2, [sp, #4]
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	4603      	mov	r3, r0
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f7ff ff5a 	bl	8012538 <etharp_raw>
 8012684:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	080190c4 	.word	0x080190c4

08012694 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801269e:	4a05      	ldr	r2, [pc, #20]	; (80126b4 <etharp_request+0x20>)
 80126a0:	6839      	ldr	r1, [r7, #0]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff ffd4 	bl	8012650 <etharp_request_dst>
 80126a8:	4603      	mov	r3, r0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	080190bc 	.word	0x080190bc

080126b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b08e      	sub	sp, #56	; 0x38
 80126bc:	af04      	add	r7, sp, #16
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80126c2:	4b79      	ldr	r3, [pc, #484]	; (80128a8 <icmp_input+0x1f0>)
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80126c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	f003 030f 	and.w	r3, r3, #15
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80126d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126da:	2b13      	cmp	r3, #19
 80126dc:	f240 80cd 	bls.w	801287a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	895b      	ldrh	r3, [r3, #10]
 80126e4:	2b03      	cmp	r3, #3
 80126e6:	f240 80ca 	bls.w	801287e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80126f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 80b7 	beq.w	801286c <icmp_input+0x1b4>
 80126fe:	2b08      	cmp	r3, #8
 8012700:	f040 80b7 	bne.w	8012872 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012704:	4b69      	ldr	r3, [pc, #420]	; (80128ac <icmp_input+0x1f4>)
 8012706:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012708:	4b67      	ldr	r3, [pc, #412]	; (80128a8 <icmp_input+0x1f0>)
 801270a:	695b      	ldr	r3, [r3, #20]
 801270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012710:	2be0      	cmp	r3, #224	; 0xe0
 8012712:	f000 80bb 	beq.w	801288c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012716:	4b64      	ldr	r3, [pc, #400]	; (80128a8 <icmp_input+0x1f0>)
 8012718:	695b      	ldr	r3, [r3, #20]
 801271a:	4a63      	ldr	r2, [pc, #396]	; (80128a8 <icmp_input+0x1f0>)
 801271c:	6812      	ldr	r2, [r2, #0]
 801271e:	4611      	mov	r1, r2
 8012720:	4618      	mov	r0, r3
 8012722:	f000 fbed 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	f040 80b1 	bne.w	8012890 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	891b      	ldrh	r3, [r3, #8]
 8012732:	2b07      	cmp	r3, #7
 8012734:	f240 80a5 	bls.w	8012882 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801273a:	330e      	adds	r3, #14
 801273c:	4619      	mov	r1, r3
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7f7 fdf8 	bl	800a334 <pbuf_add_header>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d04b      	beq.n	80127e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	891a      	ldrh	r2, [r3, #8]
 801274e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012750:	4413      	add	r3, r2
 8012752:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	891b      	ldrh	r3, [r3, #8]
 8012758:	8b7a      	ldrh	r2, [r7, #26]
 801275a:	429a      	cmp	r2, r3
 801275c:	f0c0 809a 	bcc.w	8012894 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012760:	8b7b      	ldrh	r3, [r7, #26]
 8012762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012766:	4619      	mov	r1, r3
 8012768:	200e      	movs	r0, #14
 801276a:	f7f7 fb95 	bl	8009e98 <pbuf_alloc>
 801276e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	2b00      	cmp	r3, #0
 8012774:	f000 8090 	beq.w	8012898 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	895b      	ldrh	r3, [r3, #10]
 801277c:	461a      	mov	r2, r3
 801277e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012780:	3308      	adds	r3, #8
 8012782:	429a      	cmp	r2, r3
 8012784:	d203      	bcs.n	801278e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012786:	6978      	ldr	r0, [r7, #20]
 8012788:	f7f7 fe6a 	bl	800a460 <pbuf_free>
          goto icmperr;
 801278c:	e085      	b.n	801289a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012796:	4618      	mov	r0, r3
 8012798:	f001 fe5c 	bl	8014454 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801279c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801279e:	4619      	mov	r1, r3
 80127a0:	6978      	ldr	r0, [r7, #20]
 80127a2:	f7f7 fdd7 	bl	800a354 <pbuf_remove_header>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d009      	beq.n	80127c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80127ac:	4b40      	ldr	r3, [pc, #256]	; (80128b0 <icmp_input+0x1f8>)
 80127ae:	22b6      	movs	r2, #182	; 0xb6
 80127b0:	4940      	ldr	r1, [pc, #256]	; (80128b4 <icmp_input+0x1fc>)
 80127b2:	4841      	ldr	r0, [pc, #260]	; (80128b8 <icmp_input+0x200>)
 80127b4:	f001 fe64 	bl	8014480 <iprintf>
          pbuf_free(r);
 80127b8:	6978      	ldr	r0, [r7, #20]
 80127ba:	f7f7 fe51 	bl	800a460 <pbuf_free>
          goto icmperr;
 80127be:	e06c      	b.n	801289a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80127c0:	6879      	ldr	r1, [r7, #4]
 80127c2:	6978      	ldr	r0, [r7, #20]
 80127c4:	f7f7 ff80 	bl	800a6c8 <pbuf_copy>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d003      	beq.n	80127d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80127ce:	6978      	ldr	r0, [r7, #20]
 80127d0:	f7f7 fe46 	bl	800a460 <pbuf_free>
          goto icmperr;
 80127d4:	e061      	b.n	801289a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7f7 fe42 	bl	800a460 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	607b      	str	r3, [r7, #4]
 80127e0:	e00f      	b.n	8012802 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80127e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127e4:	330e      	adds	r3, #14
 80127e6:	4619      	mov	r1, r3
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7f7 fdb3 	bl	800a354 <pbuf_remove_header>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80127f4:	4b2e      	ldr	r3, [pc, #184]	; (80128b0 <icmp_input+0x1f8>)
 80127f6:	22c7      	movs	r2, #199	; 0xc7
 80127f8:	4930      	ldr	r1, [pc, #192]	; (80128bc <icmp_input+0x204>)
 80127fa:	482f      	ldr	r0, [pc, #188]	; (80128b8 <icmp_input+0x200>)
 80127fc:	f001 fe40 	bl	8014480 <iprintf>
          goto icmperr;
 8012800:	e04b      	b.n	801289a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7f7 fd91 	bl	800a334 <pbuf_add_header>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d12b      	bne.n	8012870 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	681a      	ldr	r2, [r3, #0]
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012826:	4b20      	ldr	r3, [pc, #128]	; (80128a8 <icmp_input+0x1f0>)
 8012828:	691a      	ldr	r2, [r3, #16]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2200      	movs	r2, #0
 8012832:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	2200      	movs	r2, #0
 8012838:	709a      	strb	r2, [r3, #2]
 801283a:	2200      	movs	r2, #0
 801283c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	22ff      	movs	r2, #255	; 0xff
 8012842:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2200      	movs	r2, #0
 8012848:	729a      	strb	r2, [r3, #10]
 801284a:	2200      	movs	r2, #0
 801284c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	9302      	str	r3, [sp, #8]
 8012852:	2301      	movs	r3, #1
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	2300      	movs	r3, #0
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	23ff      	movs	r3, #255	; 0xff
 801285c:	2200      	movs	r2, #0
 801285e:	69f9      	ldr	r1, [r7, #28]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fa75 	bl	8012d50 <ip4_output_if>
 8012866:	4603      	mov	r3, r0
 8012868:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801286a:	e001      	b.n	8012870 <icmp_input+0x1b8>
      break;
 801286c:	bf00      	nop
 801286e:	e000      	b.n	8012872 <icmp_input+0x1ba>
      break;
 8012870:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7f7 fdf4 	bl	800a460 <pbuf_free>
  return;
 8012878:	e013      	b.n	80128a2 <icmp_input+0x1ea>
    goto lenerr;
 801287a:	bf00      	nop
 801287c:	e002      	b.n	8012884 <icmp_input+0x1cc>
    goto lenerr;
 801287e:	bf00      	nop
 8012880:	e000      	b.n	8012884 <icmp_input+0x1cc>
        goto lenerr;
 8012882:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7f7 fdeb 	bl	800a460 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801288a:	e00a      	b.n	80128a2 <icmp_input+0x1ea>
        goto icmperr;
 801288c:	bf00      	nop
 801288e:	e004      	b.n	801289a <icmp_input+0x1e2>
        goto icmperr;
 8012890:	bf00      	nop
 8012892:	e002      	b.n	801289a <icmp_input+0x1e2>
          goto icmperr;
 8012894:	bf00      	nop
 8012896:	e000      	b.n	801289a <icmp_input+0x1e2>
          goto icmperr;
 8012898:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f7f7 fde0 	bl	800a460 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80128a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80128a2:	3728      	adds	r7, #40	; 0x28
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	20008d34 	.word	0x20008d34
 80128ac:	20008d48 	.word	0x20008d48
 80128b0:	08018a80 	.word	0x08018a80
 80128b4:	08018ab8 	.word	0x08018ab8
 80128b8:	08018af0 	.word	0x08018af0
 80128bc:	08018b18 	.word	0x08018b18

080128c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80128cc:	78fb      	ldrb	r3, [r7, #3]
 80128ce:	461a      	mov	r2, r3
 80128d0:	2103      	movs	r1, #3
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 f814 	bl	8012900 <icmp_send_response>
}
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	460b      	mov	r3, r1
 80128ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80128ec:	78fb      	ldrb	r3, [r7, #3]
 80128ee:	461a      	mov	r2, r3
 80128f0:	210b      	movs	r1, #11
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f804 	bl	8012900 <icmp_send_response>
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08c      	sub	sp, #48	; 0x30
 8012904:	af04      	add	r7, sp, #16
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	70fb      	strb	r3, [r7, #3]
 801290c:	4613      	mov	r3, r2
 801290e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012910:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012914:	2124      	movs	r1, #36	; 0x24
 8012916:	2022      	movs	r0, #34	; 0x22
 8012918:	f7f7 fabe 	bl	8009e98 <pbuf_alloc>
 801291c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801291e:	69fb      	ldr	r3, [r7, #28]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d04c      	beq.n	80129be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	895b      	ldrh	r3, [r3, #10]
 8012928:	2b23      	cmp	r3, #35	; 0x23
 801292a:	d806      	bhi.n	801293a <icmp_send_response+0x3a>
 801292c:	4b26      	ldr	r3, [pc, #152]	; (80129c8 <icmp_send_response+0xc8>)
 801292e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012932:	4926      	ldr	r1, [pc, #152]	; (80129cc <icmp_send_response+0xcc>)
 8012934:	4826      	ldr	r0, [pc, #152]	; (80129d0 <icmp_send_response+0xd0>)
 8012936:	f001 fda3 	bl	8014480 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	78fa      	ldrb	r2, [r7, #3]
 801294a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	78ba      	ldrb	r2, [r7, #2]
 8012950:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	2200      	movs	r2, #0
 8012956:	711a      	strb	r2, [r3, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	2200      	movs	r2, #0
 8012960:	719a      	strb	r2, [r3, #6]
 8012962:	2200      	movs	r2, #0
 8012964:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	f103 0008 	add.w	r0, r3, #8
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	221c      	movs	r2, #28
 8012974:	4619      	mov	r1, r3
 8012976:	f001 fd6d 	bl	8014454 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012980:	f107 030c 	add.w	r3, r7, #12
 8012984:	4618      	mov	r0, r3
 8012986:	f000 f825 	bl	80129d4 <ip4_route>
 801298a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d011      	beq.n	80129b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	2200      	movs	r2, #0
 8012996:	709a      	strb	r2, [r3, #2]
 8012998:	2200      	movs	r2, #0
 801299a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801299c:	f107 020c 	add.w	r2, r7, #12
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	9302      	str	r3, [sp, #8]
 80129a4:	2301      	movs	r3, #1
 80129a6:	9301      	str	r3, [sp, #4]
 80129a8:	2300      	movs	r3, #0
 80129aa:	9300      	str	r3, [sp, #0]
 80129ac:	23ff      	movs	r3, #255	; 0xff
 80129ae:	2100      	movs	r1, #0
 80129b0:	69f8      	ldr	r0, [r7, #28]
 80129b2:	f000 f9cd 	bl	8012d50 <ip4_output_if>
  }
  pbuf_free(q);
 80129b6:	69f8      	ldr	r0, [r7, #28]
 80129b8:	f7f7 fd52 	bl	800a460 <pbuf_free>
 80129bc:	e000      	b.n	80129c0 <icmp_send_response+0xc0>
    return;
 80129be:	bf00      	nop
}
 80129c0:	3720      	adds	r7, #32
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	08018a80 	.word	0x08018a80
 80129cc:	08018b4c 	.word	0x08018b4c
 80129d0:	08018af0 	.word	0x08018af0

080129d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b085      	sub	sp, #20
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80129dc:	4b33      	ldr	r3, [pc, #204]	; (8012aac <ip4_route+0xd8>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	60fb      	str	r3, [r7, #12]
 80129e2:	e036      	b.n	8012a52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129ea:	f003 0301 	and.w	r3, r3, #1
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d02b      	beq.n	8012a4c <ip4_route+0x78>
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129fa:	089b      	lsrs	r3, r3, #2
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d022      	beq.n	8012a4c <ip4_route+0x78>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	3304      	adds	r3, #4
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d01d      	beq.n	8012a4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681a      	ldr	r2, [r3, #0]
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	3304      	adds	r3, #4
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	405a      	eors	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	3308      	adds	r3, #8
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4013      	ands	r3, r2
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d101      	bne.n	8012a2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	e038      	b.n	8012a9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a32:	f003 0302 	and.w	r3, r3, #2
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d108      	bne.n	8012a4c <ip4_route+0x78>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	330c      	adds	r3, #12
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d101      	bne.n	8012a4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	e028      	b.n	8012a9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	60fb      	str	r3, [r7, #12]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d1c5      	bne.n	80129e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a58:	4b15      	ldr	r3, [pc, #84]	; (8012ab0 <ip4_route+0xdc>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d01a      	beq.n	8012a96 <ip4_route+0xc2>
 8012a60:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <ip4_route+0xdc>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a68:	f003 0301 	and.w	r3, r3, #1
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d012      	beq.n	8012a96 <ip4_route+0xc2>
 8012a70:	4b0f      	ldr	r3, [pc, #60]	; (8012ab0 <ip4_route+0xdc>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a78:	f003 0304 	and.w	r3, r3, #4
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00a      	beq.n	8012a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a80:	4b0b      	ldr	r3, [pc, #44]	; (8012ab0 <ip4_route+0xdc>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	3304      	adds	r3, #4
 8012a86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b7f      	cmp	r3, #127	; 0x7f
 8012a94:	d101      	bne.n	8012a9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e001      	b.n	8012a9e <ip4_route+0xca>
  }

  return netif_default;
 8012a9a:	4b05      	ldr	r3, [pc, #20]	; (8012ab0 <ip4_route+0xdc>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3714      	adds	r7, #20
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	2000fe3c 	.word	0x2000fe3c
 8012ab0:	2000fe40 	.word	0x2000fe40

08012ab4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d016      	beq.n	8012afa <ip4_input_accept+0x46>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	3304      	adds	r3, #4
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d011      	beq.n	8012afa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012ad6:	4b0b      	ldr	r3, [pc, #44]	; (8012b04 <ip4_input_accept+0x50>)
 8012ad8:	695a      	ldr	r2, [r3, #20]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	3304      	adds	r3, #4
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d008      	beq.n	8012af6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012ae4:	4b07      	ldr	r3, [pc, #28]	; (8012b04 <ip4_input_accept+0x50>)
 8012ae6:	695b      	ldr	r3, [r3, #20]
 8012ae8:	6879      	ldr	r1, [r7, #4]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f000 fa08 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8012af0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	20008d34 	.word	0x20008d34

08012b08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	091b      	lsrs	r3, r3, #4
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	2b04      	cmp	r3, #4
 8012b22:	d004      	beq.n	8012b2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f7f7 fc9b 	bl	800a460 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e107      	b.n	8012d3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	f003 030f 	and.w	r3, r3, #15
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	885b      	ldrh	r3, [r3, #2]
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f6 f8fd 	bl	8008d44 <lwip_htons>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	891b      	ldrh	r3, [r3, #8]
 8012b52:	89ba      	ldrh	r2, [r7, #12]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d204      	bcs.n	8012b62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012b58:	89bb      	ldrh	r3, [r7, #12]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f7f7 faf9 	bl	800a154 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	895b      	ldrh	r3, [r3, #10]
 8012b66:	89fa      	ldrh	r2, [r7, #14]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d807      	bhi.n	8012b7c <ip4_input+0x74>
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	891b      	ldrh	r3, [r3, #8]
 8012b70:	89ba      	ldrh	r2, [r7, #12]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d802      	bhi.n	8012b7c <ip4_input+0x74>
 8012b76:	89fb      	ldrh	r3, [r7, #14]
 8012b78:	2b13      	cmp	r3, #19
 8012b7a:	d804      	bhi.n	8012b86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7f7 fc6f 	bl	800a460 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e0db      	b.n	8012d3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	4a6f      	ldr	r2, [pc, #444]	; (8012d48 <ip4_input+0x240>)
 8012b8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	4a6d      	ldr	r2, [pc, #436]	; (8012d48 <ip4_input+0x240>)
 8012b94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b96:	4b6c      	ldr	r3, [pc, #432]	; (8012d48 <ip4_input+0x240>)
 8012b98:	695b      	ldr	r3, [r3, #20]
 8012b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b9e:	2be0      	cmp	r3, #224	; 0xe0
 8012ba0:	d112      	bne.n	8012bc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ba8:	f003 0301 	and.w	r3, r3, #1
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d007      	beq.n	8012bc2 <ip4_input+0xba>
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	3304      	adds	r3, #4
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d002      	beq.n	8012bc2 <ip4_input+0xba>
      netif = inp;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	613b      	str	r3, [r7, #16]
 8012bc0:	e02a      	b.n	8012c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	613b      	str	r3, [r7, #16]
 8012bc6:	e027      	b.n	8012c18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012bc8:	6838      	ldr	r0, [r7, #0]
 8012bca:	f7ff ff73 	bl	8012ab4 <ip4_input_accept>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d002      	beq.n	8012bda <ip4_input+0xd2>
      netif = inp;
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	613b      	str	r3, [r7, #16]
 8012bd8:	e01e      	b.n	8012c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012bde:	4b5a      	ldr	r3, [pc, #360]	; (8012d48 <ip4_input+0x240>)
 8012be0:	695b      	ldr	r3, [r3, #20]
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	2b7f      	cmp	r3, #127	; 0x7f
 8012be6:	d017      	beq.n	8012c18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012be8:	4b58      	ldr	r3, [pc, #352]	; (8012d4c <ip4_input+0x244>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	613b      	str	r3, [r7, #16]
 8012bee:	e00e      	b.n	8012c0e <ip4_input+0x106>
          if (netif == inp) {
 8012bf0:	693a      	ldr	r2, [r7, #16]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d006      	beq.n	8012c06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012bf8:	6938      	ldr	r0, [r7, #16]
 8012bfa:	f7ff ff5b 	bl	8012ab4 <ip4_input_accept>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d108      	bne.n	8012c16 <ip4_input+0x10e>
 8012c04:	e000      	b.n	8012c08 <ip4_input+0x100>
            continue;
 8012c06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	613b      	str	r3, [r7, #16]
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ed      	bne.n	8012bf0 <ip4_input+0xe8>
 8012c14:	e000      	b.n	8012c18 <ip4_input+0x110>
            break;
 8012c16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c18:	4b4b      	ldr	r3, [pc, #300]	; (8012d48 <ip4_input+0x240>)
 8012c1a:	691b      	ldr	r3, [r3, #16]
 8012c1c:	6839      	ldr	r1, [r7, #0]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 f96e 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d105      	bne.n	8012c36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012c2a:	4b47      	ldr	r3, [pc, #284]	; (8012d48 <ip4_input+0x240>)
 8012c2c:	691b      	ldr	r3, [r3, #16]
 8012c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c32:	2be0      	cmp	r3, #224	; 0xe0
 8012c34:	d104      	bne.n	8012c40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f7f7 fc12 	bl	800a460 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	e07e      	b.n	8012d3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d104      	bne.n	8012c50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f7f7 fc0a 	bl	800a460 <pbuf_free>
    return ERR_OK;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	e076      	b.n	8012d3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	88db      	ldrh	r3, [r3, #6]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	461a      	mov	r2, r3
 8012c58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012c5c:	4013      	ands	r3, r2
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00b      	beq.n	8012c7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 fdd0 	bl	8013808 <ip4_reass>
 8012c68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d101      	bne.n	8012c74 <ip4_input+0x16c>
      return ERR_OK;
 8012c70:	2300      	movs	r3, #0
 8012c72:	e064      	b.n	8012d3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c7a:	4a33      	ldr	r2, [pc, #204]	; (8012d48 <ip4_input+0x240>)
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c80:	4a31      	ldr	r2, [pc, #196]	; (8012d48 <ip4_input+0x240>)
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c86:	4a30      	ldr	r2, [pc, #192]	; (8012d48 <ip4_input+0x240>)
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	f003 030f 	and.w	r3, r3, #15
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	4b2a      	ldr	r3, [pc, #168]	; (8012d48 <ip4_input+0x240>)
 8012c9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7f7 fb55 	bl	800a354 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	7a5b      	ldrb	r3, [r3, #9]
 8012cae:	2b11      	cmp	r3, #17
 8012cb0:	d006      	beq.n	8012cc0 <ip4_input+0x1b8>
 8012cb2:	2b11      	cmp	r3, #17
 8012cb4:	dc13      	bgt.n	8012cde <ip4_input+0x1d6>
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d00c      	beq.n	8012cd4 <ip4_input+0x1cc>
 8012cba:	2b06      	cmp	r3, #6
 8012cbc:	d005      	beq.n	8012cca <ip4_input+0x1c2>
 8012cbe:	e00e      	b.n	8012cde <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012cc0:	6839      	ldr	r1, [r7, #0]
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7fe f8da 	bl	8010e7c <udp_input>
        break;
 8012cc8:	e026      	b.n	8012d18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012cca:	6839      	ldr	r1, [r7, #0]
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7f9 fc93 	bl	800c5f8 <tcp_input>
        break;
 8012cd2:	e021      	b.n	8012d18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012cd4:	6839      	ldr	r1, [r7, #0]
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7ff fcee 	bl	80126b8 <icmp_input>
        break;
 8012cdc:	e01c      	b.n	8012d18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cde:	4b1a      	ldr	r3, [pc, #104]	; (8012d48 <ip4_input+0x240>)
 8012ce0:	695b      	ldr	r3, [r3, #20]
 8012ce2:	6939      	ldr	r1, [r7, #16]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f000 f90b 	bl	8012f00 <ip4_addr_isbroadcast_u32>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d10f      	bne.n	8012d10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012cf0:	4b15      	ldr	r3, [pc, #84]	; (8012d48 <ip4_input+0x240>)
 8012cf2:	695b      	ldr	r3, [r3, #20]
 8012cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cf8:	2be0      	cmp	r3, #224	; 0xe0
 8012cfa:	d009      	beq.n	8012d10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d00:	4619      	mov	r1, r3
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f7f7 fb99 	bl	800a43a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012d08:	2102      	movs	r1, #2
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7ff fdd8 	bl	80128c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7f7 fba5 	bl	800a460 <pbuf_free>
        break;
 8012d16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012d18:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <ip4_input+0x240>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012d1e:	4b0a      	ldr	r3, [pc, #40]	; (8012d48 <ip4_input+0x240>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012d24:	4b08      	ldr	r3, [pc, #32]	; (8012d48 <ip4_input+0x240>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012d2a:	4b07      	ldr	r3, [pc, #28]	; (8012d48 <ip4_input+0x240>)
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012d30:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <ip4_input+0x240>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012d36:	4b04      	ldr	r3, [pc, #16]	; (8012d48 <ip4_input+0x240>)
 8012d38:	2200      	movs	r2, #0
 8012d3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	20008d34 	.word	0x20008d34
 8012d4c:	2000fe3c 	.word	0x2000fe3c

08012d50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08a      	sub	sp, #40	; 0x28
 8012d54:	af04      	add	r7, sp, #16
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
 8012d5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d009      	beq.n	8012d7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d003      	beq.n	8012d76 <ip4_output_if+0x26>
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d102      	bne.n	8012d7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d78:	3304      	adds	r3, #4
 8012d7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d7c:	78fa      	ldrb	r2, [r7, #3]
 8012d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d80:	9302      	str	r3, [sp, #8]
 8012d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d86:	9301      	str	r3, [sp, #4]
 8012d88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	4613      	mov	r3, r2
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	6979      	ldr	r1, [r7, #20]
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f000 f805 	bl	8012da4 <ip4_output_if_src>
 8012d9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b088      	sub	sp, #32
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	7b9b      	ldrb	r3, [r3, #14]
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d006      	beq.n	8012dc8 <ip4_output_if_src+0x24>
 8012dba:	4b4b      	ldr	r3, [pc, #300]	; (8012ee8 <ip4_output_if_src+0x144>)
 8012dbc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012dc0:	494a      	ldr	r1, [pc, #296]	; (8012eec <ip4_output_if_src+0x148>)
 8012dc2:	484b      	ldr	r0, [pc, #300]	; (8012ef0 <ip4_output_if_src+0x14c>)
 8012dc4:	f001 fb5c 	bl	8014480 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d060      	beq.n	8012e90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012dce:	2314      	movs	r3, #20
 8012dd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012dd2:	2114      	movs	r1, #20
 8012dd4:	68f8      	ldr	r0, [r7, #12]
 8012dd6:	f7f7 faad 	bl	800a334 <pbuf_add_header>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012de0:	f06f 0301 	mvn.w	r3, #1
 8012de4:	e07c      	b.n	8012ee0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	895b      	ldrh	r3, [r3, #10]
 8012df0:	2b13      	cmp	r3, #19
 8012df2:	d806      	bhi.n	8012e02 <ip4_output_if_src+0x5e>
 8012df4:	4b3c      	ldr	r3, [pc, #240]	; (8012ee8 <ip4_output_if_src+0x144>)
 8012df6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012dfa:	493e      	ldr	r1, [pc, #248]	; (8012ef4 <ip4_output_if_src+0x150>)
 8012dfc:	483c      	ldr	r0, [pc, #240]	; (8012ef0 <ip4_output_if_src+0x14c>)
 8012dfe:	f001 fb3f 	bl	8014480 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	78fa      	ldrb	r2, [r7, #3]
 8012e06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012e0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012e18:	8b7b      	ldrh	r3, [r7, #26]
 8012e1a:	089b      	lsrs	r3, r3, #2
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e24:	b2da      	uxtb	r2, r3
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	891b      	ldrh	r3, [r3, #8]
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7f5 ff84 	bl	8008d44 <lwip_htons>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	461a      	mov	r2, r3
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	2200      	movs	r2, #0
 8012e48:	719a      	strb	r2, [r3, #6]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012e4e:	4b2a      	ldr	r3, [pc, #168]	; (8012ef8 <ip4_output_if_src+0x154>)
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f5 ff76 	bl	8008d44 <lwip_htons>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012e60:	4b25      	ldr	r3, [pc, #148]	; (8012ef8 <ip4_output_if_src+0x154>)
 8012e62:	881b      	ldrh	r3, [r3, #0]
 8012e64:	3301      	adds	r3, #1
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	4b23      	ldr	r3, [pc, #140]	; (8012ef8 <ip4_output_if_src+0x154>)
 8012e6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d104      	bne.n	8012e7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e72:	4b22      	ldr	r3, [pc, #136]	; (8012efc <ip4_output_if_src+0x158>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	60da      	str	r2, [r3, #12]
 8012e7a:	e003      	b.n	8012e84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	2200      	movs	r2, #0
 8012e88:	729a      	strb	r2, [r3, #10]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	72da      	strb	r2, [r3, #11]
 8012e8e:	e00f      	b.n	8012eb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	895b      	ldrh	r3, [r3, #10]
 8012e94:	2b13      	cmp	r3, #19
 8012e96:	d802      	bhi.n	8012e9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e98:	f06f 0301 	mvn.w	r3, #1
 8012e9c:	e020      	b.n	8012ee0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	691b      	ldr	r3, [r3, #16]
 8012ea8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012eaa:	f107 0314 	add.w	r3, r7, #20
 8012eae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00c      	beq.n	8012ed2 <ip4_output_if_src+0x12e>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	891a      	ldrh	r2, [r3, #8]
 8012ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d906      	bls.n	8012ed2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f000 fe91 	bl	8013bf0 <ip4_frag>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	e006      	b.n	8012ee0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed4:	695b      	ldr	r3, [r3, #20]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	68f9      	ldr	r1, [r7, #12]
 8012eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012edc:	4798      	blx	r3
 8012ede:	4603      	mov	r3, r0
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3720      	adds	r7, #32
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	08018b78 	.word	0x08018b78
 8012eec:	08018bac 	.word	0x08018bac
 8012ef0:	08018bb8 	.word	0x08018bb8
 8012ef4:	08018be0 	.word	0x08018be0
 8012ef8:	2000ff9a 	.word	0x2000ff9a
 8012efc:	080190b8 	.word	0x080190b8

08012f00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b085      	sub	sp, #20
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f14:	d002      	beq.n	8012f1c <ip4_addr_isbroadcast_u32+0x1c>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d101      	bne.n	8012f20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	e02a      	b.n	8012f76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f26:	f003 0302 	and.w	r3, r3, #2
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d101      	bne.n	8012f32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	e021      	b.n	8012f76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	3304      	adds	r3, #4
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d101      	bne.n	8012f42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	e019      	b.n	8012f76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	3304      	adds	r3, #4
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	405a      	eors	r2, r3
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	3308      	adds	r3, #8
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	4013      	ands	r3, r2
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10d      	bne.n	8012f74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	3308      	adds	r3, #8
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	43da      	mvns	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	3308      	adds	r3, #8
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d101      	bne.n	8012f74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f70:	2301      	movs	r3, #1
 8012f72:	e000      	b.n	8012f76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f74:	2300      	movs	r3, #0
  }
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8012f8a:	f107 030c 	add.w	r3, r7, #12
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 f80b 	bl	8012fac <ip4addr_aton>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d001      	beq.n	8012fa0 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	e001      	b.n	8012fa4 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8012fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08a      	sub	sp, #40	; 0x28
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8012fb6:	f107 030c 	add.w	r3, r7, #12
 8012fba:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8012fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012fc8:	3301      	adds	r3, #1
 8012fca:	4a89      	ldr	r2, [pc, #548]	; (80131f0 <ip4addr_aton+0x244>)
 8012fcc:	4413      	add	r3, r2
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f003 0304 	and.w	r3, r3, #4
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d101      	bne.n	8012fdc <ip4addr_aton+0x30>
      return 0;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	e105      	b.n	80131e8 <ip4addr_aton+0x23c>
    }
    val = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8012fe0:	230a      	movs	r3, #10
 8012fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8012fe6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012fea:	2b30      	cmp	r3, #48	; 0x30
 8012fec:	d11c      	bne.n	8013028 <ip4addr_aton+0x7c>
      c = *++cp;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8012ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013000:	2b78      	cmp	r3, #120	; 0x78
 8013002:	d003      	beq.n	801300c <ip4addr_aton+0x60>
 8013004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013008:	2b58      	cmp	r3, #88	; 0x58
 801300a:	d10a      	bne.n	8013022 <ip4addr_aton+0x76>
        base = 16;
 801300c:	2310      	movs	r3, #16
 801300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3301      	adds	r3, #1
 8013016:	607b      	str	r3, [r7, #4]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013020:	e002      	b.n	8013028 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8013022:	2308      	movs	r3, #8
 8013024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8013028:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801302c:	3301      	adds	r3, #1
 801302e:	4a70      	ldr	r2, [pc, #448]	; (80131f0 <ip4addr_aton+0x244>)
 8013030:	4413      	add	r3, r2
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f003 0304 	and.w	r3, r3, #4
 8013038:	2b00      	cmp	r3, #0
 801303a:	d011      	beq.n	8013060 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801303c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013042:	fb03 f202 	mul.w	r2, r3, r2
 8013046:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801304a:	4413      	add	r3, r2
 801304c:	3b30      	subs	r3, #48	; 0x30
 801304e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3301      	adds	r3, #1
 8013054:	607b      	str	r3, [r7, #4]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801305e:	e7e3      	b.n	8013028 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8013060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013064:	2b10      	cmp	r3, #16
 8013066:	d127      	bne.n	80130b8 <ip4addr_aton+0x10c>
 8013068:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801306c:	3301      	adds	r3, #1
 801306e:	4a60      	ldr	r2, [pc, #384]	; (80131f0 <ip4addr_aton+0x244>)
 8013070:	4413      	add	r3, r2
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013078:	2b00      	cmp	r3, #0
 801307a:	d01d      	beq.n	80130b8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307e:	011b      	lsls	r3, r3, #4
 8013080:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013084:	f102 010a 	add.w	r1, r2, #10
 8013088:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801308c:	3201      	adds	r2, #1
 801308e:	4858      	ldr	r0, [pc, #352]	; (80131f0 <ip4addr_aton+0x244>)
 8013090:	4402      	add	r2, r0
 8013092:	7812      	ldrb	r2, [r2, #0]
 8013094:	f002 0203 	and.w	r2, r2, #3
 8013098:	2a02      	cmp	r2, #2
 801309a:	d101      	bne.n	80130a0 <ip4addr_aton+0xf4>
 801309c:	2261      	movs	r2, #97	; 0x61
 801309e:	e000      	b.n	80130a2 <ip4addr_aton+0xf6>
 80130a0:	2241      	movs	r2, #65	; 0x41
 80130a2:	1a8a      	subs	r2, r1, r2
 80130a4:	4313      	orrs	r3, r2
 80130a6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	3301      	adds	r3, #1
 80130ac:	607b      	str	r3, [r7, #4]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80130b6:	e7b7      	b.n	8013028 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80130b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80130bc:	2b2e      	cmp	r3, #46	; 0x2e
 80130be:	d114      	bne.n	80130ea <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80130c0:	f107 030c 	add.w	r3, r7, #12
 80130c4:	330c      	adds	r3, #12
 80130c6:	69fa      	ldr	r2, [r7, #28]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d301      	bcc.n	80130d0 <ip4addr_aton+0x124>
        return 0;
 80130cc:	2300      	movs	r3, #0
 80130ce:	e08b      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	1d1a      	adds	r2, r3, #4
 80130d4:	61fa      	str	r2, [r7, #28]
 80130d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130d8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	3301      	adds	r3, #1
 80130de:	607b      	str	r3, [r7, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80130e8:	e76c      	b.n	8012fc4 <ip4addr_aton+0x18>
    } else {
      break;
 80130ea:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80130ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00b      	beq.n	801310c <ip4addr_aton+0x160>
 80130f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80130f8:	3301      	adds	r3, #1
 80130fa:	4a3d      	ldr	r2, [pc, #244]	; (80131f0 <ip4addr_aton+0x244>)
 80130fc:	4413      	add	r3, r2
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	f003 0308 	and.w	r3, r3, #8
 8013104:	2b00      	cmp	r3, #0
 8013106:	d101      	bne.n	801310c <ip4addr_aton+0x160>
    return 0;
 8013108:	2300      	movs	r3, #0
 801310a:	e06d      	b.n	80131e8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801310c:	f107 030c 	add.w	r3, r7, #12
 8013110:	69fa      	ldr	r2, [r7, #28]
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	109b      	asrs	r3, r3, #2
 8013116:	3301      	adds	r3, #1
 8013118:	2b04      	cmp	r3, #4
 801311a:	d853      	bhi.n	80131c4 <ip4addr_aton+0x218>
 801311c:	a201      	add	r2, pc, #4	; (adr r2, 8013124 <ip4addr_aton+0x178>)
 801311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013122:	bf00      	nop
 8013124:	08013139 	.word	0x08013139
 8013128:	080131d3 	.word	0x080131d3
 801312c:	0801313d 	.word	0x0801313d
 8013130:	0801315f 	.word	0x0801315f
 8013134:	0801318d 	.word	0x0801318d

    case 0:
      return 0;       /* initial nondigit */
 8013138:	2300      	movs	r3, #0
 801313a:	e055      	b.n	80131e8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013142:	d301      	bcc.n	8013148 <ip4addr_aton+0x19c>
        return 0;
 8013144:	2300      	movs	r3, #0
 8013146:	e04f      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2bff      	cmp	r3, #255	; 0xff
 801314c:	d901      	bls.n	8013152 <ip4addr_aton+0x1a6>
        return 0;
 801314e:	2300      	movs	r3, #0
 8013150:	e04a      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	061b      	lsls	r3, r3, #24
 8013156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013158:	4313      	orrs	r3, r2
 801315a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801315c:	e03a      	b.n	80131d4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013164:	d301      	bcc.n	801316a <ip4addr_aton+0x1be>
        return 0;
 8013166:	2300      	movs	r3, #0
 8013168:	e03e      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2bff      	cmp	r3, #255	; 0xff
 801316e:	d802      	bhi.n	8013176 <ip4addr_aton+0x1ca>
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2bff      	cmp	r3, #255	; 0xff
 8013174:	d901      	bls.n	801317a <ip4addr_aton+0x1ce>
        return 0;
 8013176:	2300      	movs	r3, #0
 8013178:	e036      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	061a      	lsls	r2, r3, #24
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	041b      	lsls	r3, r3, #16
 8013182:	4313      	orrs	r3, r2
 8013184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013186:	4313      	orrs	r3, r2
 8013188:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801318a:	e023      	b.n	80131d4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	2bff      	cmp	r3, #255	; 0xff
 8013190:	d901      	bls.n	8013196 <ip4addr_aton+0x1ea>
        return 0;
 8013192:	2300      	movs	r3, #0
 8013194:	e028      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2bff      	cmp	r3, #255	; 0xff
 801319a:	d805      	bhi.n	80131a8 <ip4addr_aton+0x1fc>
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	2bff      	cmp	r3, #255	; 0xff
 80131a0:	d802      	bhi.n	80131a8 <ip4addr_aton+0x1fc>
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	2bff      	cmp	r3, #255	; 0xff
 80131a6:	d901      	bls.n	80131ac <ip4addr_aton+0x200>
        return 0;
 80131a8:	2300      	movs	r3, #0
 80131aa:	e01d      	b.n	80131e8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	061a      	lsls	r2, r3, #24
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	041b      	lsls	r3, r3, #16
 80131b4:	431a      	orrs	r2, r3
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	021b      	lsls	r3, r3, #8
 80131ba:	4313      	orrs	r3, r2
 80131bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131be:	4313      	orrs	r3, r2
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80131c2:	e007      	b.n	80131d4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80131c4:	4b0b      	ldr	r3, [pc, #44]	; (80131f4 <ip4addr_aton+0x248>)
 80131c6:	22f9      	movs	r2, #249	; 0xf9
 80131c8:	490b      	ldr	r1, [pc, #44]	; (80131f8 <ip4addr_aton+0x24c>)
 80131ca:	480c      	ldr	r0, [pc, #48]	; (80131fc <ip4addr_aton+0x250>)
 80131cc:	f001 f958 	bl	8014480 <iprintf>
      break;
 80131d0:	e000      	b.n	80131d4 <ip4addr_aton+0x228>
      break;
 80131d2:	bf00      	nop
  }
  if (addr) {
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d005      	beq.n	80131e6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80131da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131dc:	f7f5 fdc7 	bl	8008d6e <lwip_htonl>
 80131e0:	4602      	mov	r2, r0
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80131e6:	2301      	movs	r3, #1
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3728      	adds	r7, #40	; 0x28
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}
 80131f0:	080190d4 	.word	0x080190d4
 80131f4:	08018c10 	.word	0x08018c10
 80131f8:	08018c4c 	.word	0x08018c4c
 80131fc:	08018c58 	.word	0x08018c58

08013200 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013206:	2300      	movs	r3, #0
 8013208:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801320a:	4b12      	ldr	r3, [pc, #72]	; (8013254 <ip_reass_tmr+0x54>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013210:	e018      	b.n	8013244 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	7fdb      	ldrb	r3, [r3, #31]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00b      	beq.n	8013232 <ip_reass_tmr+0x32>
      r->timer--;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	7fdb      	ldrb	r3, [r3, #31]
 801321e:	3b01      	subs	r3, #1
 8013220:	b2da      	uxtb	r2, r3
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	e008      	b.n	8013244 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801323c:	68b9      	ldr	r1, [r7, #8]
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 f80a 	bl	8013258 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d1e3      	bne.n	8013212 <ip_reass_tmr+0x12>
    }
  }
}
 801324a:	bf00      	nop
 801324c:	bf00      	nop
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	2000ff9c 	.word	0x2000ff9c

08013258 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b088      	sub	sp, #32
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013262:	2300      	movs	r3, #0
 8013264:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	429a      	cmp	r2, r3
 801326c:	d105      	bne.n	801327a <ip_reass_free_complete_datagram+0x22>
 801326e:	4b45      	ldr	r3, [pc, #276]	; (8013384 <ip_reass_free_complete_datagram+0x12c>)
 8013270:	22ab      	movs	r2, #171	; 0xab
 8013272:	4945      	ldr	r1, [pc, #276]	; (8013388 <ip_reass_free_complete_datagram+0x130>)
 8013274:	4845      	ldr	r0, [pc, #276]	; (801338c <ip_reass_free_complete_datagram+0x134>)
 8013276:	f001 f903 	bl	8014480 <iprintf>
  if (prev != NULL) {
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00a      	beq.n	8013296 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	429a      	cmp	r2, r3
 8013288:	d005      	beq.n	8013296 <ip_reass_free_complete_datagram+0x3e>
 801328a:	4b3e      	ldr	r3, [pc, #248]	; (8013384 <ip_reass_free_complete_datagram+0x12c>)
 801328c:	22ad      	movs	r2, #173	; 0xad
 801328e:	4940      	ldr	r1, [pc, #256]	; (8013390 <ip_reass_free_complete_datagram+0x138>)
 8013290:	483e      	ldr	r0, [pc, #248]	; (801338c <ip_reass_free_complete_datagram+0x134>)
 8013292:	f001 f8f5 	bl	8014480 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	889b      	ldrh	r3, [r3, #4]
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d12a      	bne.n	80132fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80132b6:	69bb      	ldr	r3, [r7, #24]
 80132b8:	6858      	ldr	r0, [r3, #4]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3308      	adds	r3, #8
 80132be:	2214      	movs	r2, #20
 80132c0:	4619      	mov	r1, r3
 80132c2:	f001 f8c7 	bl	8014454 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80132c6:	2101      	movs	r1, #1
 80132c8:	69b8      	ldr	r0, [r7, #24]
 80132ca:	f7ff fb09 	bl	80128e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80132ce:	69b8      	ldr	r0, [r7, #24]
 80132d0:	f7f7 f954 	bl	800a57c <pbuf_clen>
 80132d4:	4603      	mov	r3, r0
 80132d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80132d8:	8bfa      	ldrh	r2, [r7, #30]
 80132da:	8a7b      	ldrh	r3, [r7, #18]
 80132dc:	4413      	add	r3, r2
 80132de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132e2:	db05      	blt.n	80132f0 <ip_reass_free_complete_datagram+0x98>
 80132e4:	4b27      	ldr	r3, [pc, #156]	; (8013384 <ip_reass_free_complete_datagram+0x12c>)
 80132e6:	22bc      	movs	r2, #188	; 0xbc
 80132e8:	492a      	ldr	r1, [pc, #168]	; (8013394 <ip_reass_free_complete_datagram+0x13c>)
 80132ea:	4828      	ldr	r0, [pc, #160]	; (801338c <ip_reass_free_complete_datagram+0x134>)
 80132ec:	f001 f8c8 	bl	8014480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80132f0:	8bfa      	ldrh	r2, [r7, #30]
 80132f2:	8a7b      	ldrh	r3, [r7, #18]
 80132f4:	4413      	add	r3, r2
 80132f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80132f8:	69b8      	ldr	r0, [r7, #24]
 80132fa:	f7f7 f8b1 	bl	800a460 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013304:	e01f      	b.n	8013346 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013316:	68f8      	ldr	r0, [r7, #12]
 8013318:	f7f7 f930 	bl	800a57c <pbuf_clen>
 801331c:	4603      	mov	r3, r0
 801331e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013320:	8bfa      	ldrh	r2, [r7, #30]
 8013322:	8a7b      	ldrh	r3, [r7, #18]
 8013324:	4413      	add	r3, r2
 8013326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801332a:	db05      	blt.n	8013338 <ip_reass_free_complete_datagram+0xe0>
 801332c:	4b15      	ldr	r3, [pc, #84]	; (8013384 <ip_reass_free_complete_datagram+0x12c>)
 801332e:	22cc      	movs	r2, #204	; 0xcc
 8013330:	4918      	ldr	r1, [pc, #96]	; (8013394 <ip_reass_free_complete_datagram+0x13c>)
 8013332:	4816      	ldr	r0, [pc, #88]	; (801338c <ip_reass_free_complete_datagram+0x134>)
 8013334:	f001 f8a4 	bl	8014480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013338:	8bfa      	ldrh	r2, [r7, #30]
 801333a:	8a7b      	ldrh	r3, [r7, #18]
 801333c:	4413      	add	r3, r2
 801333e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	f7f7 f88d 	bl	800a460 <pbuf_free>
  while (p != NULL) {
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1dc      	bne.n	8013306 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801334c:	6839      	ldr	r1, [r7, #0]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f000 f8c2 	bl	80134d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013354:	4b10      	ldr	r3, [pc, #64]	; (8013398 <ip_reass_free_complete_datagram+0x140>)
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	8bfa      	ldrh	r2, [r7, #30]
 801335a:	429a      	cmp	r2, r3
 801335c:	d905      	bls.n	801336a <ip_reass_free_complete_datagram+0x112>
 801335e:	4b09      	ldr	r3, [pc, #36]	; (8013384 <ip_reass_free_complete_datagram+0x12c>)
 8013360:	22d2      	movs	r2, #210	; 0xd2
 8013362:	490e      	ldr	r1, [pc, #56]	; (801339c <ip_reass_free_complete_datagram+0x144>)
 8013364:	4809      	ldr	r0, [pc, #36]	; (801338c <ip_reass_free_complete_datagram+0x134>)
 8013366:	f001 f88b 	bl	8014480 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801336a:	4b0b      	ldr	r3, [pc, #44]	; (8013398 <ip_reass_free_complete_datagram+0x140>)
 801336c:	881a      	ldrh	r2, [r3, #0]
 801336e:	8bfb      	ldrh	r3, [r7, #30]
 8013370:	1ad3      	subs	r3, r2, r3
 8013372:	b29a      	uxth	r2, r3
 8013374:	4b08      	ldr	r3, [pc, #32]	; (8013398 <ip_reass_free_complete_datagram+0x140>)
 8013376:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013378:	8bfb      	ldrh	r3, [r7, #30]
}
 801337a:	4618      	mov	r0, r3
 801337c:	3720      	adds	r7, #32
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	08018c80 	.word	0x08018c80
 8013388:	08018cbc 	.word	0x08018cbc
 801338c:	08018cc8 	.word	0x08018cc8
 8013390:	08018cf0 	.word	0x08018cf0
 8013394:	08018d04 	.word	0x08018d04
 8013398:	2000ffa0 	.word	0x2000ffa0
 801339c:	08018d24 	.word	0x08018d24

080133a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b08a      	sub	sp, #40	; 0x28
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80133aa:	2300      	movs	r3, #0
 80133ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80133b6:	2300      	movs	r3, #0
 80133b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80133be:	4b28      	ldr	r3, [pc, #160]	; (8013460 <ip_reass_remove_oldest_datagram+0xc0>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80133c4:	e030      	b.n	8013428 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	695a      	ldr	r2, [r3, #20]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d10c      	bne.n	80133ec <ip_reass_remove_oldest_datagram+0x4c>
 80133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d4:	699a      	ldr	r2, [r3, #24]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d106      	bne.n	80133ec <ip_reass_remove_oldest_datagram+0x4c>
 80133de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e0:	899a      	ldrh	r2, [r3, #12]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	889b      	ldrh	r3, [r3, #4]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d014      	beq.n	8013416 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	3301      	adds	r3, #1
 80133f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80133f2:	6a3b      	ldr	r3, [r7, #32]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d104      	bne.n	8013402 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80133f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	61bb      	str	r3, [r7, #24]
 8013400:	e009      	b.n	8013416 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013404:	7fda      	ldrb	r2, [r3, #31]
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	7fdb      	ldrb	r3, [r3, #31]
 801340a:	429a      	cmp	r2, r3
 801340c:	d803      	bhi.n	8013416 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013410:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013420:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	d1cb      	bne.n	80133c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801342e:	6a3b      	ldr	r3, [r7, #32]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d008      	beq.n	8013446 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013434:	69b9      	ldr	r1, [r7, #24]
 8013436:	6a38      	ldr	r0, [r7, #32]
 8013438:	f7ff ff0e 	bl	8013258 <ip_reass_free_complete_datagram>
 801343c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801343e:	697a      	ldr	r2, [r7, #20]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	4413      	add	r3, r2
 8013444:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013446:	697a      	ldr	r2, [r7, #20]
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	da02      	bge.n	8013454 <ip_reass_remove_oldest_datagram+0xb4>
 801344e:	693b      	ldr	r3, [r7, #16]
 8013450:	2b01      	cmp	r3, #1
 8013452:	dcac      	bgt.n	80133ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013454:	697b      	ldr	r3, [r7, #20]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3728      	adds	r7, #40	; 0x28
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	2000ff9c 	.word	0x2000ff9c

08013464 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801346e:	2004      	movs	r0, #4
 8013470:	f7f6 f940 	bl	80096f4 <memp_malloc>
 8013474:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d110      	bne.n	801349e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801347c:	6839      	ldr	r1, [r7, #0]
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7ff ff8e 	bl	80133a0 <ip_reass_remove_oldest_datagram>
 8013484:	4602      	mov	r2, r0
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	4293      	cmp	r3, r2
 801348a:	dc03      	bgt.n	8013494 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801348c:	2004      	movs	r0, #4
 801348e:	f7f6 f931 	bl	80096f4 <memp_malloc>
 8013492:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d101      	bne.n	801349e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801349a:	2300      	movs	r3, #0
 801349c:	e016      	b.n	80134cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801349e:	2220      	movs	r2, #32
 80134a0:	2100      	movs	r1, #0
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f000 ffe4 	bl	8014470 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	220f      	movs	r2, #15
 80134ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80134ae:	4b09      	ldr	r3, [pc, #36]	; (80134d4 <ip_reass_enqueue_new_datagram+0x70>)
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80134b6:	4a07      	ldr	r2, [pc, #28]	; (80134d4 <ip_reass_enqueue_new_datagram+0x70>)
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	3308      	adds	r3, #8
 80134c0:	2214      	movs	r2, #20
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f000 ffc5 	bl	8014454 <memcpy>
  return ipr;
 80134ca:	68fb      	ldr	r3, [r7, #12]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	2000ff9c 	.word	0x2000ff9c

080134d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80134e2:	4b10      	ldr	r3, [pc, #64]	; (8013524 <ip_reass_dequeue_datagram+0x4c>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d104      	bne.n	80134f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	4a0c      	ldr	r2, [pc, #48]	; (8013524 <ip_reass_dequeue_datagram+0x4c>)
 80134f2:	6013      	str	r3, [r2, #0]
 80134f4:	e00d      	b.n	8013512 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d106      	bne.n	801350a <ip_reass_dequeue_datagram+0x32>
 80134fc:	4b0a      	ldr	r3, [pc, #40]	; (8013528 <ip_reass_dequeue_datagram+0x50>)
 80134fe:	f240 1245 	movw	r2, #325	; 0x145
 8013502:	490a      	ldr	r1, [pc, #40]	; (801352c <ip_reass_dequeue_datagram+0x54>)
 8013504:	480a      	ldr	r0, [pc, #40]	; (8013530 <ip_reass_dequeue_datagram+0x58>)
 8013506:	f000 ffbb 	bl	8014480 <iprintf>
    prev->next = ipr->next;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013512:	6879      	ldr	r1, [r7, #4]
 8013514:	2004      	movs	r0, #4
 8013516:	f7f6 f963 	bl	80097e0 <memp_free>
}
 801351a:	bf00      	nop
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	2000ff9c 	.word	0x2000ff9c
 8013528:	08018c80 	.word	0x08018c80
 801352c:	08018d48 	.word	0x08018d48
 8013530:	08018cc8 	.word	0x08018cc8

08013534 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b08c      	sub	sp, #48	; 0x30
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013540:	2300      	movs	r3, #0
 8013542:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013544:	2301      	movs	r3, #1
 8013546:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	885b      	ldrh	r3, [r3, #2]
 8013552:	b29b      	uxth	r3, r3
 8013554:	4618      	mov	r0, r3
 8013556:	f7f5 fbf5 	bl	8008d44 <lwip_htons>
 801355a:	4603      	mov	r3, r0
 801355c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	f003 030f 	and.w	r3, r3, #15
 8013566:	b2db      	uxtb	r3, r3
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801356c:	7e7b      	ldrb	r3, [r7, #25]
 801356e:	b29b      	uxth	r3, r3
 8013570:	8b7a      	ldrh	r2, [r7, #26]
 8013572:	429a      	cmp	r2, r3
 8013574:	d202      	bcs.n	801357c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013576:	f04f 33ff 	mov.w	r3, #4294967295
 801357a:	e135      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801357c:	7e7b      	ldrb	r3, [r7, #25]
 801357e:	b29b      	uxth	r3, r3
 8013580:	8b7a      	ldrh	r2, [r7, #26]
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013586:	69fb      	ldr	r3, [r7, #28]
 8013588:	88db      	ldrh	r3, [r3, #6]
 801358a:	b29b      	uxth	r3, r3
 801358c:	4618      	mov	r0, r3
 801358e:	f7f5 fbd9 	bl	8008d44 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013598:	b29b      	uxth	r3, r3
 801359a:	00db      	lsls	r3, r3, #3
 801359c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80135a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a6:	2200      	movs	r2, #0
 80135a8:	701a      	strb	r2, [r3, #0]
 80135aa:	2200      	movs	r2, #0
 80135ac:	705a      	strb	r2, [r3, #1]
 80135ae:	2200      	movs	r2, #0
 80135b0:	709a      	strb	r2, [r3, #2]
 80135b2:	2200      	movs	r2, #0
 80135b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80135b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b8:	8afa      	ldrh	r2, [r7, #22]
 80135ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80135bc:	8afa      	ldrh	r2, [r7, #22]
 80135be:	8b7b      	ldrh	r3, [r7, #26]
 80135c0:	4413      	add	r3, r2
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80135c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ca:	88db      	ldrh	r3, [r3, #6]
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	8afa      	ldrh	r2, [r7, #22]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d902      	bls.n	80135da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295
 80135d8:	e106      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	627b      	str	r3, [r7, #36]	; 0x24
 80135e0:	e068      	b.n	80136b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80135e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ea:	889b      	ldrh	r3, [r3, #4]
 80135ec:	b29a      	uxth	r2, r3
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	889b      	ldrh	r3, [r3, #4]
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d235      	bcs.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80135fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013600:	2b00      	cmp	r3, #0
 8013602:	d020      	beq.n	8013646 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013606:	889b      	ldrh	r3, [r3, #4]
 8013608:	b29a      	uxth	r2, r3
 801360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360c:	88db      	ldrh	r3, [r3, #6]
 801360e:	b29b      	uxth	r3, r3
 8013610:	429a      	cmp	r2, r3
 8013612:	d307      	bcc.n	8013624 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013616:	88db      	ldrh	r3, [r3, #6]
 8013618:	b29a      	uxth	r2, r3
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	889b      	ldrh	r3, [r3, #4]
 801361e:	b29b      	uxth	r3, r3
 8013620:	429a      	cmp	r2, r3
 8013622:	d902      	bls.n	801362a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013624:	f04f 33ff 	mov.w	r3, #4294967295
 8013628:	e0de      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	68ba      	ldr	r2, [r7, #8]
 801362e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013632:	88db      	ldrh	r3, [r3, #6]
 8013634:	b29a      	uxth	r2, r3
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	889b      	ldrh	r3, [r3, #4]
 801363a:	b29b      	uxth	r3, r3
 801363c:	429a      	cmp	r2, r3
 801363e:	d03d      	beq.n	80136bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013644:	e03a      	b.n	80136bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013648:	88db      	ldrh	r3, [r3, #6]
 801364a:	b29a      	uxth	r2, r3
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	889b      	ldrh	r3, [r3, #4]
 8013650:	b29b      	uxth	r3, r3
 8013652:	429a      	cmp	r2, r3
 8013654:	d902      	bls.n	801365c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013656:	f04f 33ff 	mov.w	r3, #4294967295
 801365a:	e0c5      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	68ba      	ldr	r2, [r7, #8]
 8013660:	605a      	str	r2, [r3, #4]
      break;
 8013662:	e02b      	b.n	80136bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013666:	889b      	ldrh	r3, [r3, #4]
 8013668:	b29a      	uxth	r2, r3
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	889b      	ldrh	r3, [r3, #4]
 801366e:	b29b      	uxth	r3, r3
 8013670:	429a      	cmp	r2, r3
 8013672:	d102      	bne.n	801367a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013674:	f04f 33ff 	mov.w	r3, #4294967295
 8013678:	e0b6      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367c:	889b      	ldrh	r3, [r3, #4]
 801367e:	b29a      	uxth	r2, r3
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	88db      	ldrh	r3, [r3, #6]
 8013684:	b29b      	uxth	r3, r3
 8013686:	429a      	cmp	r2, r3
 8013688:	d202      	bcs.n	8013690 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801368a:	f04f 33ff 	mov.w	r3, #4294967295
 801368e:	e0ab      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	2b00      	cmp	r3, #0
 8013694:	d009      	beq.n	80136aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	88db      	ldrh	r3, [r3, #6]
 801369a:	b29a      	uxth	r2, r3
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	889b      	ldrh	r3, [r3, #4]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d001      	beq.n	80136aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80136b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d193      	bne.n	80135e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80136ba:	e000      	b.n	80136be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80136bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80136be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d12d      	bne.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d01c      	beq.n	8013704 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80136ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136cc:	88db      	ldrh	r3, [r3, #6]
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	889b      	ldrh	r3, [r3, #4]
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d906      	bls.n	80136e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80136da:	4b45      	ldr	r3, [pc, #276]	; (80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80136dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80136e0:	4944      	ldr	r1, [pc, #272]	; (80137f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80136e2:	4845      	ldr	r0, [pc, #276]	; (80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80136e4:	f000 fecc 	bl	8014480 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80136e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80136ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f0:	88db      	ldrh	r3, [r3, #6]
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f6:	889b      	ldrh	r3, [r3, #4]
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d010      	beq.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	623b      	str	r3, [r7, #32]
 8013702:	e00d      	b.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d006      	beq.n	801371a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801370c:	4b38      	ldr	r3, [pc, #224]	; (80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801370e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013712:	493a      	ldr	r1, [pc, #232]	; (80137fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013714:	4838      	ldr	r0, [pc, #224]	; (80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013716:	f000 feb3 	bl	8014480 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	68ba      	ldr	r2, [r7, #8]
 801371e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d105      	bne.n	8013732 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	7f9b      	ldrb	r3, [r3, #30]
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	2b00      	cmp	r3, #0
 8013730:	d059      	beq.n	80137e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d04f      	beq.n	80137d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d006      	beq.n	801374e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	889b      	ldrh	r3, [r3, #4]
 8013748:	b29b      	uxth	r3, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	623b      	str	r3, [r7, #32]
 8013752:	e041      	b.n	80137d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013756:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801375e:	e012      	b.n	8013786 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013768:	88db      	ldrh	r3, [r3, #6]
 801376a:	b29a      	uxth	r2, r3
 801376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376e:	889b      	ldrh	r3, [r3, #4]
 8013770:	b29b      	uxth	r3, r3
 8013772:	429a      	cmp	r2, r3
 8013774:	d002      	beq.n	801377c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	623b      	str	r3, [r7, #32]
            break;
 801377a:	e007      	b.n	801378c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1e9      	bne.n	8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801378c:	6a3b      	ldr	r3, [r7, #32]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d022      	beq.n	80137d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d106      	bne.n	80137a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801379a:	4b15      	ldr	r3, [pc, #84]	; (80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801379c:	f240 12df 	movw	r2, #479	; 0x1df
 80137a0:	4917      	ldr	r1, [pc, #92]	; (8013800 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80137a2:	4815      	ldr	r0, [pc, #84]	; (80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137a4:	f000 fe6c 	bl	8014480 <iprintf>
          LWIP_ASSERT("sanity check",
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d106      	bne.n	80137c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80137b4:	4b0e      	ldr	r3, [pc, #56]	; (80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80137b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80137ba:	4911      	ldr	r1, [pc, #68]	; (8013800 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80137bc:	480e      	ldr	r0, [pc, #56]	; (80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137be:	f000 fe5f 	bl	8014480 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d006      	beq.n	80137d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80137ca:	4b09      	ldr	r3, [pc, #36]	; (80137f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80137cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80137d0:	490c      	ldr	r1, [pc, #48]	; (8013804 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80137d2:	4809      	ldr	r0, [pc, #36]	; (80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137d4:	f000 fe54 	bl	8014480 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80137d8:	6a3b      	ldr	r3, [r7, #32]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	bf14      	ite	ne
 80137de:	2301      	movne	r3, #1
 80137e0:	2300      	moveq	r3, #0
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	e000      	b.n	80137e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3730      	adds	r7, #48	; 0x30
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	08018c80 	.word	0x08018c80
 80137f4:	08018d64 	.word	0x08018d64
 80137f8:	08018cc8 	.word	0x08018cc8
 80137fc:	08018d84 	.word	0x08018d84
 8013800:	08018dbc 	.word	0x08018dbc
 8013804:	08018dcc 	.word	0x08018dcc

08013808 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08e      	sub	sp, #56	; 0x38
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	f003 030f 	and.w	r3, r3, #15
 801381e:	b2db      	uxtb	r3, r3
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	b2db      	uxtb	r3, r3
 8013824:	2b14      	cmp	r3, #20
 8013826:	f040 8171 	bne.w	8013b0c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382c:	88db      	ldrh	r3, [r3, #6]
 801382e:	b29b      	uxth	r3, r3
 8013830:	4618      	mov	r0, r3
 8013832:	f7f5 fa87 	bl	8008d44 <lwip_htons>
 8013836:	4603      	mov	r3, r0
 8013838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801383c:	b29b      	uxth	r3, r3
 801383e:	00db      	lsls	r3, r3, #3
 8013840:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	885b      	ldrh	r3, [r3, #2]
 8013846:	b29b      	uxth	r3, r3
 8013848:	4618      	mov	r0, r3
 801384a:	f7f5 fa7b 	bl	8008d44 <lwip_htons>
 801384e:	4603      	mov	r3, r0
 8013850:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	f003 030f 	and.w	r3, r3, #15
 801385a:	b2db      	uxtb	r3, r3
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013866:	b29b      	uxth	r3, r3
 8013868:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801386a:	429a      	cmp	r2, r3
 801386c:	f0c0 8150 	bcc.w	8013b10 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013874:	b29b      	uxth	r3, r3
 8013876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013878:	1ad3      	subs	r3, r2, r3
 801387a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f7f6 fe7d 	bl	800a57c <pbuf_clen>
 8013882:	4603      	mov	r3, r0
 8013884:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013886:	4b8c      	ldr	r3, [pc, #560]	; (8013ab8 <ip4_reass+0x2b0>)
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	461a      	mov	r2, r3
 801388c:	8c3b      	ldrh	r3, [r7, #32]
 801388e:	4413      	add	r3, r2
 8013890:	2b0a      	cmp	r3, #10
 8013892:	dd10      	ble.n	80138b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013894:	8c3b      	ldrh	r3, [r7, #32]
 8013896:	4619      	mov	r1, r3
 8013898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801389a:	f7ff fd81 	bl	80133a0 <ip_reass_remove_oldest_datagram>
 801389e:	4603      	mov	r3, r0
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	f000 8137 	beq.w	8013b14 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80138a6:	4b84      	ldr	r3, [pc, #528]	; (8013ab8 <ip4_reass+0x2b0>)
 80138a8:	881b      	ldrh	r3, [r3, #0]
 80138aa:	461a      	mov	r2, r3
 80138ac:	8c3b      	ldrh	r3, [r7, #32]
 80138ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80138b0:	2b0a      	cmp	r3, #10
 80138b2:	f300 812f 	bgt.w	8013b14 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80138b6:	4b81      	ldr	r3, [pc, #516]	; (8013abc <ip4_reass+0x2b4>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	633b      	str	r3, [r7, #48]	; 0x30
 80138bc:	e015      	b.n	80138ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80138be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c0:	695a      	ldr	r2, [r3, #20]
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d10c      	bne.n	80138e4 <ip4_reass+0xdc>
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	699a      	ldr	r2, [r3, #24]
 80138ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d106      	bne.n	80138e4 <ip4_reass+0xdc>
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	899a      	ldrh	r2, [r3, #12]
 80138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138dc:	889b      	ldrh	r3, [r3, #4]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d006      	beq.n	80138f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80138e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	633b      	str	r3, [r7, #48]	; 0x30
 80138ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d1e6      	bne.n	80138be <ip4_reass+0xb6>
 80138f0:	e000      	b.n	80138f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80138f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d109      	bne.n	801390e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80138fa:	8c3b      	ldrh	r3, [r7, #32]
 80138fc:	4619      	mov	r1, r3
 80138fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013900:	f7ff fdb0 	bl	8013464 <ip_reass_enqueue_new_datagram>
 8013904:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013908:	2b00      	cmp	r3, #0
 801390a:	d11c      	bne.n	8013946 <ip4_reass+0x13e>
      goto nullreturn;
 801390c:	e105      	b.n	8013b1a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	88db      	ldrh	r3, [r3, #6]
 8013912:	b29b      	uxth	r3, r3
 8013914:	4618      	mov	r0, r3
 8013916:	f7f5 fa15 	bl	8008d44 <lwip_htons>
 801391a:	4603      	mov	r3, r0
 801391c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013920:	2b00      	cmp	r3, #0
 8013922:	d110      	bne.n	8013946 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013926:	89db      	ldrh	r3, [r3, #14]
 8013928:	4618      	mov	r0, r3
 801392a:	f7f5 fa0b 	bl	8008d44 <lwip_htons>
 801392e:	4603      	mov	r3, r0
 8013930:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013934:	2b00      	cmp	r3, #0
 8013936:	d006      	beq.n	8013946 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	3308      	adds	r3, #8
 801393c:	2214      	movs	r2, #20
 801393e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013940:	4618      	mov	r0, r3
 8013942:	f000 fd87 	bl	8014454 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013948:	88db      	ldrh	r3, [r3, #6]
 801394a:	b29b      	uxth	r3, r3
 801394c:	f003 0320 	and.w	r3, r3, #32
 8013950:	2b00      	cmp	r3, #0
 8013952:	bf0c      	ite	eq
 8013954:	2301      	moveq	r3, #1
 8013956:	2300      	movne	r3, #0
 8013958:	b2db      	uxtb	r3, r3
 801395a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00e      	beq.n	8013980 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013966:	4413      	add	r3, r2
 8013968:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801396a:	8b7a      	ldrh	r2, [r7, #26]
 801396c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801396e:	429a      	cmp	r2, r3
 8013970:	f0c0 80a0 	bcc.w	8013ab4 <ip4_reass+0x2ac>
 8013974:	8b7b      	ldrh	r3, [r7, #26]
 8013976:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801397a:	4293      	cmp	r3, r2
 801397c:	f200 809a 	bhi.w	8013ab4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013980:	69fa      	ldr	r2, [r7, #28]
 8013982:	6879      	ldr	r1, [r7, #4]
 8013984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013986:	f7ff fdd5 	bl	8013534 <ip_reass_chain_frag_into_datagram_and_validate>
 801398a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013992:	f000 809b 	beq.w	8013acc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013996:	4b48      	ldr	r3, [pc, #288]	; (8013ab8 <ip4_reass+0x2b0>)
 8013998:	881a      	ldrh	r2, [r3, #0]
 801399a:	8c3b      	ldrh	r3, [r7, #32]
 801399c:	4413      	add	r3, r2
 801399e:	b29a      	uxth	r2, r3
 80139a0:	4b45      	ldr	r3, [pc, #276]	; (8013ab8 <ip4_reass+0x2b0>)
 80139a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d00d      	beq.n	80139c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80139aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80139ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139ae:	4413      	add	r3, r2
 80139b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	8a7a      	ldrh	r2, [r7, #18]
 80139b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80139b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ba:	7f9b      	ldrb	r3, [r3, #30]
 80139bc:	f043 0301 	orr.w	r3, r3, #1
 80139c0:	b2da      	uxtb	r2, r3
 80139c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d171      	bne.n	8013ab0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80139cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ce:	8b9b      	ldrh	r3, [r3, #28]
 80139d0:	3314      	adds	r3, #20
 80139d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80139d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80139de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80139e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e8:	3308      	adds	r3, #8
 80139ea:	2214      	movs	r2, #20
 80139ec:	4619      	mov	r1, r3
 80139ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f0:	f000 fd30 	bl	8014454 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80139f4:	8a3b      	ldrh	r3, [r7, #16]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7f5 f9a4 	bl	8008d44 <lwip_htons>
 80139fc:	4603      	mov	r3, r0
 80139fe:	461a      	mov	r2, r3
 8013a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a02:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	2200      	movs	r2, #0
 8013a08:	719a      	strb	r2, [r3, #6]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	2200      	movs	r2, #0
 8013a12:	729a      	strb	r2, [r3, #10]
 8013a14:	2200      	movs	r2, #0
 8013a16:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013a1e:	e00d      	b.n	8013a3c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013a26:	2114      	movs	r1, #20
 8013a28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a2a:	f7f6 fc93 	bl	800a354 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013a2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f7f6 fde3 	bl	800a5fc <pbuf_cat>
      r = iprh->next_pbuf;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d1ee      	bne.n	8013a20 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013a42:	4b1e      	ldr	r3, [pc, #120]	; (8013abc <ip4_reass+0x2b4>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d102      	bne.n	8013a52 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a50:	e010      	b.n	8013a74 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013a52:	4b1a      	ldr	r3, [pc, #104]	; (8013abc <ip4_reass+0x2b4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a58:	e007      	b.n	8013a6a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d006      	beq.n	8013a72 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d1f4      	bne.n	8013a5a <ip4_reass+0x252>
 8013a70:	e000      	b.n	8013a74 <ip4_reass+0x26c>
          break;
 8013a72:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a78:	f7ff fd2e 	bl	80134d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7f6 fd7d 	bl	800a57c <pbuf_clen>
 8013a82:	4603      	mov	r3, r0
 8013a84:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013a86:	4b0c      	ldr	r3, [pc, #48]	; (8013ab8 <ip4_reass+0x2b0>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	8c3a      	ldrh	r2, [r7, #32]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d906      	bls.n	8013a9e <ip4_reass+0x296>
 8013a90:	4b0b      	ldr	r3, [pc, #44]	; (8013ac0 <ip4_reass+0x2b8>)
 8013a92:	f240 229b 	movw	r2, #667	; 0x29b
 8013a96:	490b      	ldr	r1, [pc, #44]	; (8013ac4 <ip4_reass+0x2bc>)
 8013a98:	480b      	ldr	r0, [pc, #44]	; (8013ac8 <ip4_reass+0x2c0>)
 8013a9a:	f000 fcf1 	bl	8014480 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013a9e:	4b06      	ldr	r3, [pc, #24]	; (8013ab8 <ip4_reass+0x2b0>)
 8013aa0:	881a      	ldrh	r2, [r3, #0]
 8013aa2:	8c3b      	ldrh	r3, [r7, #32]
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	b29a      	uxth	r2, r3
 8013aa8:	4b03      	ldr	r3, [pc, #12]	; (8013ab8 <ip4_reass+0x2b0>)
 8013aaa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	e038      	b.n	8013b22 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	e036      	b.n	8013b22 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013ab4:	bf00      	nop
 8013ab6:	e00a      	b.n	8013ace <ip4_reass+0x2c6>
 8013ab8:	2000ffa0 	.word	0x2000ffa0
 8013abc:	2000ff9c 	.word	0x2000ff9c
 8013ac0:	08018c80 	.word	0x08018c80
 8013ac4:	08018df0 	.word	0x08018df0
 8013ac8:	08018cc8 	.word	0x08018cc8
    goto nullreturn_ipr;
 8013acc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d106      	bne.n	8013ae2 <ip4_reass+0x2da>
 8013ad4:	4b15      	ldr	r3, [pc, #84]	; (8013b2c <ip4_reass+0x324>)
 8013ad6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013ada:	4915      	ldr	r1, [pc, #84]	; (8013b30 <ip4_reass+0x328>)
 8013adc:	4815      	ldr	r0, [pc, #84]	; (8013b34 <ip4_reass+0x32c>)
 8013ade:	f000 fccf 	bl	8014480 <iprintf>
  if (ipr->p == NULL) {
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d116      	bne.n	8013b18 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013aea:	4b13      	ldr	r3, [pc, #76]	; (8013b38 <ip4_reass+0x330>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d006      	beq.n	8013b02 <ip4_reass+0x2fa>
 8013af4:	4b0d      	ldr	r3, [pc, #52]	; (8013b2c <ip4_reass+0x324>)
 8013af6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013afa:	4910      	ldr	r1, [pc, #64]	; (8013b3c <ip4_reass+0x334>)
 8013afc:	480d      	ldr	r0, [pc, #52]	; (8013b34 <ip4_reass+0x32c>)
 8013afe:	f000 fcbf 	bl	8014480 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013b02:	2100      	movs	r1, #0
 8013b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b06:	f7ff fce7 	bl	80134d8 <ip_reass_dequeue_datagram>
 8013b0a:	e006      	b.n	8013b1a <ip4_reass+0x312>
    goto nullreturn;
 8013b0c:	bf00      	nop
 8013b0e:	e004      	b.n	8013b1a <ip4_reass+0x312>
    goto nullreturn;
 8013b10:	bf00      	nop
 8013b12:	e002      	b.n	8013b1a <ip4_reass+0x312>
      goto nullreturn;
 8013b14:	bf00      	nop
 8013b16:	e000      	b.n	8013b1a <ip4_reass+0x312>
  }

nullreturn:
 8013b18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7f6 fca0 	bl	800a460 <pbuf_free>
  return NULL;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3738      	adds	r7, #56	; 0x38
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	08018c80 	.word	0x08018c80
 8013b30:	08018e0c 	.word	0x08018e0c
 8013b34:	08018cc8 	.word	0x08018cc8
 8013b38:	2000ff9c 	.word	0x2000ff9c
 8013b3c:	08018e18 	.word	0x08018e18

08013b40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013b44:	2005      	movs	r0, #5
 8013b46:	f7f5 fdd5 	bl	80096f4 <memp_malloc>
 8013b4a:	4603      	mov	r3, r0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d106      	bne.n	8013b6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8013b5e:	4b07      	ldr	r3, [pc, #28]	; (8013b7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013b60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013b64:	4906      	ldr	r1, [pc, #24]	; (8013b80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013b66:	4807      	ldr	r0, [pc, #28]	; (8013b84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013b68:	f000 fc8a 	bl	8014480 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	2005      	movs	r0, #5
 8013b70:	f7f5 fe36 	bl	80097e0 <memp_free>
}
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	08018c80 	.word	0x08018c80
 8013b80:	08018e38 	.word	0x08018e38
 8013b84:	08018cc8 	.word	0x08018cc8

08013b88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d106      	bne.n	8013ba8 <ipfrag_free_pbuf_custom+0x20>
 8013b9a:	4b11      	ldr	r3, [pc, #68]	; (8013be0 <ipfrag_free_pbuf_custom+0x58>)
 8013b9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013ba0:	4910      	ldr	r1, [pc, #64]	; (8013be4 <ipfrag_free_pbuf_custom+0x5c>)
 8013ba2:	4811      	ldr	r0, [pc, #68]	; (8013be8 <ipfrag_free_pbuf_custom+0x60>)
 8013ba4:	f000 fc6c 	bl	8014480 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d006      	beq.n	8013bbe <ipfrag_free_pbuf_custom+0x36>
 8013bb0:	4b0b      	ldr	r3, [pc, #44]	; (8013be0 <ipfrag_free_pbuf_custom+0x58>)
 8013bb2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013bb6:	490d      	ldr	r1, [pc, #52]	; (8013bec <ipfrag_free_pbuf_custom+0x64>)
 8013bb8:	480b      	ldr	r0, [pc, #44]	; (8013be8 <ipfrag_free_pbuf_custom+0x60>)
 8013bba:	f000 fc61 	bl	8014480 <iprintf>
  if (pcr->original != NULL) {
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d004      	beq.n	8013bd0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	695b      	ldr	r3, [r3, #20]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7f6 fc48 	bl	800a460 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f7ff ffbd 	bl	8013b50 <ip_frag_free_pbuf_custom_ref>
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	08018c80 	.word	0x08018c80
 8013be4:	08018e44 	.word	0x08018e44
 8013be8:	08018cc8 	.word	0x08018cc8
 8013bec:	08018e50 	.word	0x08018e50

08013bf0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b094      	sub	sp, #80	; 0x50
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c06:	3b14      	subs	r3, #20
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	da00      	bge.n	8013c0e <ip4_frag+0x1e>
 8013c0c:	3307      	adds	r3, #7
 8013c0e:	10db      	asrs	r3, r3, #3
 8013c10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013c12:	2314      	movs	r3, #20
 8013c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	f003 030f 	and.w	r3, r3, #15
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	2b14      	cmp	r3, #20
 8013c30:	d002      	beq.n	8013c38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013c32:	f06f 0305 	mvn.w	r3, #5
 8013c36:	e110      	b.n	8013e5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	895b      	ldrh	r3, [r3, #10]
 8013c3c:	2b13      	cmp	r3, #19
 8013c3e:	d809      	bhi.n	8013c54 <ip4_frag+0x64>
 8013c40:	4b88      	ldr	r3, [pc, #544]	; (8013e64 <ip4_frag+0x274>)
 8013c42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013c46:	4988      	ldr	r1, [pc, #544]	; (8013e68 <ip4_frag+0x278>)
 8013c48:	4888      	ldr	r0, [pc, #544]	; (8013e6c <ip4_frag+0x27c>)
 8013c4a:	f000 fc19 	bl	8014480 <iprintf>
 8013c4e:	f06f 0305 	mvn.w	r3, #5
 8013c52:	e102      	b.n	8013e5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c56:	88db      	ldrh	r3, [r3, #6]
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7f5 f872 	bl	8008d44 <lwip_htons>
 8013c60:	4603      	mov	r3, r0
 8013c62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013c64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	891b      	ldrh	r3, [r3, #8]
 8013c7a:	3b14      	subs	r3, #20
 8013c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013c80:	e0e1      	b.n	8013e46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013c82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013c8c:	4293      	cmp	r3, r2
 8013c8e:	bf28      	it	cs
 8013c90:	4613      	movcs	r3, r2
 8013c92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013c94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c98:	2114      	movs	r1, #20
 8013c9a:	200e      	movs	r0, #14
 8013c9c:	f7f6 f8fc 	bl	8009e98 <pbuf_alloc>
 8013ca0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	f000 80d5 	beq.w	8013e54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cac:	895b      	ldrh	r3, [r3, #10]
 8013cae:	2b13      	cmp	r3, #19
 8013cb0:	d806      	bhi.n	8013cc0 <ip4_frag+0xd0>
 8013cb2:	4b6c      	ldr	r3, [pc, #432]	; (8013e64 <ip4_frag+0x274>)
 8013cb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013cb8:	496d      	ldr	r1, [pc, #436]	; (8013e70 <ip4_frag+0x280>)
 8013cba:	486c      	ldr	r0, [pc, #432]	; (8013e6c <ip4_frag+0x27c>)
 8013cbc:	f000 fbe0 	bl	8014480 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	2214      	movs	r2, #20
 8013cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f000 fbc3 	bl	8014454 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013cd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013cda:	e064      	b.n	8013da6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	895a      	ldrh	r2, [r3, #10]
 8013ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ce2:	1ad3      	subs	r3, r2, r3
 8013ce4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	895b      	ldrh	r3, [r3, #10]
 8013cea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d906      	bls.n	8013cfe <ip4_frag+0x10e>
 8013cf0:	4b5c      	ldr	r3, [pc, #368]	; (8013e64 <ip4_frag+0x274>)
 8013cf2:	f240 322d 	movw	r2, #813	; 0x32d
 8013cf6:	495f      	ldr	r1, [pc, #380]	; (8013e74 <ip4_frag+0x284>)
 8013cf8:	485c      	ldr	r0, [pc, #368]	; (8013e6c <ip4_frag+0x27c>)
 8013cfa:	f000 fbc1 	bl	8014480 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013cfe:	8bfa      	ldrh	r2, [r7, #30]
 8013d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d04:	4293      	cmp	r3, r2
 8013d06:	bf28      	it	cs
 8013d08:	4613      	movcs	r3, r2
 8013d0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d105      	bne.n	8013d22 <ip4_frag+0x132>
        poff = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	60fb      	str	r3, [r7, #12]
        continue;
 8013d20:	e041      	b.n	8013da6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013d22:	f7ff ff0d 	bl	8013b40 <ip_frag_alloc_pbuf_custom_ref>
 8013d26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d103      	bne.n	8013d36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d30:	f7f6 fb96 	bl	800a460 <pbuf_free>
        goto memerr;
 8013d34:	e08f      	b.n	8013e56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d3e:	4413      	add	r3, r2
 8013d40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013d44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013d48:	9201      	str	r2, [sp, #4]
 8013d4a:	9300      	str	r3, [sp, #0]
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	2241      	movs	r2, #65	; 0x41
 8013d50:	2000      	movs	r0, #0
 8013d52:	f7f6 f9cb 	bl	800a0ec <pbuf_alloced_custom>
 8013d56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d106      	bne.n	8013d6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013d5e:	69b8      	ldr	r0, [r7, #24]
 8013d60:	f7ff fef6 	bl	8013b50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d66:	f7f6 fb7b 	bl	800a460 <pbuf_free>
        goto memerr;
 8013d6a:	e074      	b.n	8013e56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f7f6 fc1d 	bl	800a5ac <pbuf_ref>
      pcr->original = p;
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	68fa      	ldr	r2, [r7, #12]
 8013d76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	4a3f      	ldr	r2, [pc, #252]	; (8013e78 <ip4_frag+0x288>)
 8013d7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013d7e:	6979      	ldr	r1, [r7, #20]
 8013d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d82:	f7f6 fc3b 	bl	800a5fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013d86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d8e:	1ad3      	subs	r3, r2, r3
 8013d90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013d94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d004      	beq.n	8013da6 <ip4_frag+0x1b6>
        poff = 0;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013da6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d196      	bne.n	8013cdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013dae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013db0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013db4:	4413      	add	r3, r2
 8013db6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013dbc:	f1a3 0213 	sub.w	r2, r3, #19
 8013dc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	bfcc      	ite	gt
 8013dc8:	2301      	movgt	r3, #1
 8013dca:	2300      	movle	r3, #0
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013dd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013dda:	6a3b      	ldr	r3, [r7, #32]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <ip4_frag+0x1f6>
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d003      	beq.n	8013dee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013de6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013dec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013dee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f4 ffa7 	bl	8008d44 <lwip_htons>
 8013df6:	4603      	mov	r3, r0
 8013df8:	461a      	mov	r2, r3
 8013dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013dfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e00:	3314      	adds	r3, #20
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f4 ff9d 	bl	8008d44 <lwip_htons>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e14:	2200      	movs	r2, #0
 8013e16:	729a      	strb	r2, [r3, #10]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	695b      	ldr	r3, [r3, #20]
 8013e20:	687a      	ldr	r2, [r7, #4]
 8013e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e24:	68b8      	ldr	r0, [r7, #8]
 8013e26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e2a:	f7f6 fb19 	bl	800a460 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013e2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e34:	1ad3      	subs	r3, r2, r3
 8013e36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013e3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013e3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e40:	4413      	add	r3, r2
 8013e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f47f af19 	bne.w	8013c82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013e50:	2300      	movs	r3, #0
 8013e52:	e002      	b.n	8013e5a <ip4_frag+0x26a>
      goto memerr;
 8013e54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3748      	adds	r7, #72	; 0x48
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	08018c80 	.word	0x08018c80
 8013e68:	08018e5c 	.word	0x08018e5c
 8013e6c:	08018cc8 	.word	0x08018cc8
 8013e70:	08018e78 	.word	0x08018e78
 8013e74:	08018e98 	.word	0x08018e98
 8013e78:	08013b89 	.word	0x08013b89

08013e7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b086      	sub	sp, #24
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013e86:	230e      	movs	r3, #14
 8013e88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	895b      	ldrh	r3, [r3, #10]
 8013e8e:	2b0e      	cmp	r3, #14
 8013e90:	d96e      	bls.n	8013f70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	7bdb      	ldrb	r3, [r3, #15]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d106      	bne.n	8013ea8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	b2da      	uxtb	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	7b1a      	ldrb	r2, [r3, #12]
 8013eb2:	7b5b      	ldrb	r3, [r3, #13]
 8013eb4:	021b      	lsls	r3, r3, #8
 8013eb6:	4313      	orrs	r3, r2
 8013eb8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	f003 0301 	and.w	r3, r3, #1
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d023      	beq.n	8013f0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	d10f      	bne.n	8013eee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	785b      	ldrb	r3, [r3, #1]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d11b      	bne.n	8013f0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013eda:	2b5e      	cmp	r3, #94	; 0x5e
 8013edc:	d117      	bne.n	8013f0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	7b5b      	ldrb	r3, [r3, #13]
 8013ee2:	f043 0310 	orr.w	r3, r3, #16
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	735a      	strb	r2, [r3, #13]
 8013eec:	e00f      	b.n	8013f0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	2206      	movs	r2, #6
 8013ef2:	4928      	ldr	r1, [pc, #160]	; (8013f94 <ethernet_input+0x118>)
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 fa9d 	bl	8014434 <memcmp>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d106      	bne.n	8013f0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	7b5b      	ldrb	r3, [r3, #13]
 8013f04:	f043 0308 	orr.w	r3, r3, #8
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013f0e:	89fb      	ldrh	r3, [r7, #14]
 8013f10:	2b08      	cmp	r3, #8
 8013f12:	d003      	beq.n	8013f1c <ethernet_input+0xa0>
 8013f14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013f18:	d014      	beq.n	8013f44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013f1a:	e032      	b.n	8013f82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f22:	f003 0308 	and.w	r3, r3, #8
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d024      	beq.n	8013f74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f2a:	8afb      	ldrh	r3, [r7, #22]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7f6 fa10 	bl	800a354 <pbuf_remove_header>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d11e      	bne.n	8013f78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013f3a:	6839      	ldr	r1, [r7, #0]
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7fe fde3 	bl	8012b08 <ip4_input>
      break;
 8013f42:	e013      	b.n	8013f6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f4a:	f003 0308 	and.w	r3, r3, #8
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d014      	beq.n	8013f7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f52:	8afb      	ldrh	r3, [r7, #22]
 8013f54:	4619      	mov	r1, r3
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7f6 f9fc 	bl	800a354 <pbuf_remove_header>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d10e      	bne.n	8013f80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7fd ff83 	bl	8011e70 <etharp_input>
      break;
 8013f6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	e00c      	b.n	8013f8a <ethernet_input+0x10e>
    goto free_and_return;
 8013f70:	bf00      	nop
 8013f72:	e006      	b.n	8013f82 <ethernet_input+0x106>
        goto free_and_return;
 8013f74:	bf00      	nop
 8013f76:	e004      	b.n	8013f82 <ethernet_input+0x106>
        goto free_and_return;
 8013f78:	bf00      	nop
 8013f7a:	e002      	b.n	8013f82 <ethernet_input+0x106>
        goto free_and_return;
 8013f7c:	bf00      	nop
 8013f7e:	e000      	b.n	8013f82 <ethernet_input+0x106>
        goto free_and_return;
 8013f80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f7f6 fa6c 	bl	800a460 <pbuf_free>
  return ERR_OK;
 8013f88:	2300      	movs	r3, #0
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3718      	adds	r7, #24
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	080190bc 	.word	0x080190bc

08013f98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b086      	sub	sp, #24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
 8013fa4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013fa6:	8c3b      	ldrh	r3, [r7, #32]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7f4 fecb 	bl	8008d44 <lwip_htons>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013fb2:	210e      	movs	r1, #14
 8013fb4:	68b8      	ldr	r0, [r7, #8]
 8013fb6:	f7f6 f9bd 	bl	800a334 <pbuf_add_header>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d125      	bne.n	801400c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	685b      	ldr	r3, [r3, #4]
 8013fc4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	8afa      	ldrh	r2, [r7, #22]
 8013fca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	2206      	movs	r2, #6
 8013fd0:	6839      	ldr	r1, [r7, #0]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f000 fa3e 	bl	8014454 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	3306      	adds	r3, #6
 8013fdc:	2206      	movs	r2, #6
 8013fde:	6879      	ldr	r1, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f000 fa37 	bl	8014454 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013fec:	2b06      	cmp	r3, #6
 8013fee:	d006      	beq.n	8013ffe <ethernet_output+0x66>
 8013ff0:	4b0a      	ldr	r3, [pc, #40]	; (801401c <ethernet_output+0x84>)
 8013ff2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013ff6:	490a      	ldr	r1, [pc, #40]	; (8014020 <ethernet_output+0x88>)
 8013ff8:	480a      	ldr	r0, [pc, #40]	; (8014024 <ethernet_output+0x8c>)
 8013ffa:	f000 fa41 	bl	8014480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	699b      	ldr	r3, [r3, #24]
 8014002:	68b9      	ldr	r1, [r7, #8]
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	4798      	blx	r3
 8014008:	4603      	mov	r3, r0
 801400a:	e002      	b.n	8014012 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801400c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801400e:	f06f 0301 	mvn.w	r3, #1
}
 8014012:	4618      	mov	r0, r3
 8014014:	3718      	adds	r7, #24
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	08018ea8 	.word	0x08018ea8
 8014020:	08018ee0 	.word	0x08018ee0
 8014024:	08018f14 	.word	0x08018f14

08014028 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b086      	sub	sp, #24
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	60bb      	str	r3, [r7, #8]
 8014036:	2304      	movs	r3, #4
 8014038:	60fb      	str	r3, [r7, #12]
 801403a:	2300      	movs	r3, #0
 801403c:	613b      	str	r3, [r7, #16]
 801403e:	2300      	movs	r3, #0
 8014040:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014042:	f107 0308 	add.w	r3, r7, #8
 8014046:	2100      	movs	r1, #0
 8014048:	4618      	mov	r0, r3
 801404a:	f7ef fbb2 	bl	80037b2 <osMessageCreate>
 801404e:	4602      	mov	r2, r0
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801405c:	f04f 33ff 	mov.w	r3, #4294967295
 8014060:	e000      	b.n	8014064 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014062:	2300      	movs	r3, #0
}
 8014064:	4618      	mov	r0, r3
 8014066:	3718      	adds	r7, #24
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4618      	mov	r0, r3
 801407a:	f7ef fc77 	bl	800396c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	4618      	mov	r0, r3
 8014084:	f7ef fc88 	bl	8003998 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014088:	bf00      	nop
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	6839      	ldr	r1, [r7, #0]
 80140a0:	2200      	movs	r2, #0
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7ef fbae 	bl	8003804 <osMessagePut>
 80140a8:	4603      	mov	r3, r0
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d102      	bne.n	80140b4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80140ae:	2300      	movs	r3, #0
 80140b0:	73fb      	strb	r3, [r7, #15]
 80140b2:	e001      	b.n	80140b8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80140b4:	23ff      	movs	r3, #255	; 0xff
 80140b6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80140b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3710      	adds	r7, #16
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b08c      	sub	sp, #48	; 0x30
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	61f8      	str	r0, [r7, #28]
 80140cc:	61b9      	str	r1, [r7, #24]
 80140ce:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80140d0:	f7ef f99a 	bl	8003408 <osKernelSysTick>
 80140d4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d017      	beq.n	801410c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	6819      	ldr	r1, [r3, #0]
 80140e0:	f107 0320 	add.w	r3, r7, #32
 80140e4:	697a      	ldr	r2, [r7, #20]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7ef fbcc 	bl	8003884 <osMessageGet>

    if(event.status == osEventMessage)
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	2b10      	cmp	r3, #16
 80140f0:	d109      	bne.n	8014106 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80140f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f4:	461a      	mov	r2, r3
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80140fa:	f7ef f985 	bl	8003408 <osKernelSysTick>
 80140fe:	4602      	mov	r2, r0
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	1ad3      	subs	r3, r2, r3
 8014104:	e019      	b.n	801413a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014106:	f04f 33ff 	mov.w	r3, #4294967295
 801410a:	e016      	b.n	801413a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	6819      	ldr	r1, [r3, #0]
 8014110:	463b      	mov	r3, r7
 8014112:	f04f 32ff 	mov.w	r2, #4294967295
 8014116:	4618      	mov	r0, r3
 8014118:	f7ef fbb4 	bl	8003884 <osMessageGet>
 801411c:	f107 0320 	add.w	r3, r7, #32
 8014120:	463a      	mov	r2, r7
 8014122:	ca07      	ldmia	r2, {r0, r1, r2}
 8014124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412a:	461a      	mov	r2, r3
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014130:	f7ef f96a 	bl	8003408 <osKernelSysTick>
 8014134:	4602      	mov	r2, r0
 8014136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014138:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801413a:	4618      	mov	r0, r3
 801413c:	3730      	adds	r7, #48	; 0x30
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}

08014142 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014142:	b580      	push	{r7, lr}
 8014144:	b086      	sub	sp, #24
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
 801414a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6819      	ldr	r1, [r3, #0]
 8014150:	f107 030c 	add.w	r3, r7, #12
 8014154:	2200      	movs	r2, #0
 8014156:	4618      	mov	r0, r3
 8014158:	f7ef fb94 	bl	8003884 <osMessageGet>

  if(event.status == osEventMessage)
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2b10      	cmp	r3, #16
 8014160:	d105      	bne.n	801416e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	461a      	mov	r2, r3
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801416a:	2300      	movs	r3, #0
 801416c:	e001      	b.n	8014172 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801416e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014172:	4618      	mov	r0, r3
 8014174:	3718      	adds	r7, #24
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801417a:	b480      	push	{r7}
 801417c:	b083      	sub	sp, #12
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d101      	bne.n	801418e <sys_mbox_valid+0x14>
    return 0;
 801418a:	2300      	movs	r3, #0
 801418c:	e000      	b.n	8014190 <sys_mbox_valid+0x16>
  else
    return 1;
 801418e:	2301      	movs	r3, #1
}
 8014190:	4618      	mov	r0, r3
 8014192:	370c      	adds	r7, #12
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2200      	movs	r2, #0
 80141a8:	601a      	str	r2, [r3, #0]
}
 80141aa:	bf00      	nop
 80141ac:	370c      	adds	r7, #12
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
 80141be:	460b      	mov	r3, r1
 80141c0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80141c2:	2300      	movs	r3, #0
 80141c4:	60bb      	str	r3, [r7, #8]
 80141c6:	2300      	movs	r3, #0
 80141c8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80141ca:	f107 0308 	add.w	r3, r7, #8
 80141ce:	2101      	movs	r1, #1
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ef fa25 	bl	8003620 <osSemaphoreCreate>
 80141d6:	4602      	mov	r2, r0
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d102      	bne.n	80141ea <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80141e4:	f04f 33ff 	mov.w	r3, #4294967295
 80141e8:	e009      	b.n	80141fe <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80141ea:	78fb      	ldrb	r3, [r7, #3]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d105      	bne.n	80141fc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2100      	movs	r1, #0
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7ef fa44 	bl	8003684 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80141fc:	2300      	movs	r3, #0
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3710      	adds	r7, #16
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b084      	sub	sp, #16
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
 801420e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014210:	f7ef f8fa 	bl	8003408 <osKernelSysTick>
 8014214:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d011      	beq.n	8014240 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	6839      	ldr	r1, [r7, #0]
 8014222:	4618      	mov	r0, r3
 8014224:	f7ef fa2e 	bl	8003684 <osSemaphoreWait>
 8014228:	4603      	mov	r3, r0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d105      	bne.n	801423a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801422e:	f7ef f8eb 	bl	8003408 <osKernelSysTick>
 8014232:	4602      	mov	r2, r0
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	e012      	b.n	8014260 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801423a:	f04f 33ff 	mov.w	r3, #4294967295
 801423e:	e00f      	b.n	8014260 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014240:	bf00      	nop
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f04f 31ff 	mov.w	r1, #4294967295
 801424a:	4618      	mov	r0, r3
 801424c:	f7ef fa1a 	bl	8003684 <osSemaphoreWait>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d1f5      	bne.n	8014242 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014256:	f7ef f8d7 	bl	8003408 <osKernelSysTick>
 801425a:	4602      	mov	r2, r0
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014260:	4618      	mov	r0, r3
 8014262:	3710      	adds	r7, #16
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}

08014268 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4618      	mov	r0, r3
 8014276:	f7ef fa53 	bl	8003720 <osSemaphoreRelease>
}
 801427a:	bf00      	nop
 801427c:	3708      	adds	r7, #8
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b082      	sub	sp, #8
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4618      	mov	r0, r3
 8014290:	f7ef fa7c 	bl	800378c <osSemaphoreDelete>
}
 8014294:	bf00      	nop
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d101      	bne.n	80142b0 <sys_sem_valid+0x14>
    return 0;
 80142ac:	2300      	movs	r3, #0
 80142ae:	e000      	b.n	80142b2 <sys_sem_valid+0x16>
  else
    return 1;
 80142b0:	2301      	movs	r3, #1
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80142be:	b480      	push	{r7}
 80142c0:	b083      	sub	sp, #12
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	601a      	str	r2, [r3, #0]
}
 80142cc:	bf00      	nop
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80142dc:	4803      	ldr	r0, [pc, #12]	; (80142ec <sys_init+0x14>)
 80142de:	f7ef f903 	bl	80034e8 <osMutexCreate>
 80142e2:	4603      	mov	r3, r0
 80142e4:	4a02      	ldr	r2, [pc, #8]	; (80142f0 <sys_init+0x18>)
 80142e6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80142e8:	bf00      	nop
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	080190cc 	.word	0x080190cc
 80142f0:	2000ffa8 	.word	0x2000ffa8

080142f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80142fc:	2300      	movs	r3, #0
 80142fe:	60bb      	str	r3, [r7, #8]
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014304:	f107 0308 	add.w	r3, r7, #8
 8014308:	4618      	mov	r0, r3
 801430a:	f7ef f8ed 	bl	80034e8 <osMutexCreate>
 801430e:	4602      	mov	r2, r0
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d102      	bne.n	8014322 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801431c:	f04f 33ff 	mov.w	r3, #4294967295
 8014320:	e000      	b.n	8014324 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	3710      	adds	r7, #16
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f04f 31ff 	mov.w	r1, #4294967295
 801433c:	4618      	mov	r0, r3
 801433e:	f7ef f8eb 	bl	8003518 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b082      	sub	sp, #8
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	4618      	mov	r0, r3
 8014358:	f7ef f92c 	bl	80035b4 <osMutexRelease>
}
 801435c:	bf00      	nop
 801435e:	3708      	adds	r7, #8
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}

08014364 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b08c      	sub	sp, #48	; 0x30
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
 8014370:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014372:	f107 0314 	add.w	r3, r7, #20
 8014376:	2200      	movs	r2, #0
 8014378:	601a      	str	r2, [r3, #0]
 801437a:	605a      	str	r2, [r3, #4]
 801437c:	609a      	str	r2, [r3, #8]
 801437e:	60da      	str	r2, [r3, #12]
 8014380:	611a      	str	r2, [r3, #16]
 8014382:	615a      	str	r2, [r3, #20]
 8014384:	619a      	str	r2, [r3, #24]
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	617b      	str	r3, [r7, #20]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	61bb      	str	r3, [r7, #24]
 801438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014390:	b21b      	sxth	r3, r3
 8014392:	83bb      	strh	r3, [r7, #28]
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014398:	f107 0314 	add.w	r3, r7, #20
 801439c:	6879      	ldr	r1, [r7, #4]
 801439e:	4618      	mov	r0, r3
 80143a0:	f7ef f842 	bl	8003428 <osThreadCreate>
 80143a4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3730      	adds	r7, #48	; 0x30
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
	...

080143b0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80143b4:	4b04      	ldr	r3, [pc, #16]	; (80143c8 <sys_arch_protect+0x18>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	f04f 31ff 	mov.w	r1, #4294967295
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ef f8ab 	bl	8003518 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80143c2:	2301      	movs	r3, #1
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	2000ffa8 	.word	0x2000ffa8

080143cc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80143d4:	4b04      	ldr	r3, [pc, #16]	; (80143e8 <sys_arch_unprotect+0x1c>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4618      	mov	r0, r3
 80143da:	f7ef f8eb 	bl	80035b4 <osMutexRelease>
}
 80143de:	bf00      	nop
 80143e0:	3708      	adds	r7, #8
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop
 80143e8:	2000ffa8 	.word	0x2000ffa8

080143ec <__libc_init_array>:
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	4d0d      	ldr	r5, [pc, #52]	; (8014424 <__libc_init_array+0x38>)
 80143f0:	4c0d      	ldr	r4, [pc, #52]	; (8014428 <__libc_init_array+0x3c>)
 80143f2:	1b64      	subs	r4, r4, r5
 80143f4:	10a4      	asrs	r4, r4, #2
 80143f6:	2600      	movs	r6, #0
 80143f8:	42a6      	cmp	r6, r4
 80143fa:	d109      	bne.n	8014410 <__libc_init_array+0x24>
 80143fc:	4d0b      	ldr	r5, [pc, #44]	; (801442c <__libc_init_array+0x40>)
 80143fe:	4c0c      	ldr	r4, [pc, #48]	; (8014430 <__libc_init_array+0x44>)
 8014400:	f001 f88e 	bl	8015520 <_init>
 8014404:	1b64      	subs	r4, r4, r5
 8014406:	10a4      	asrs	r4, r4, #2
 8014408:	2600      	movs	r6, #0
 801440a:	42a6      	cmp	r6, r4
 801440c:	d105      	bne.n	801441a <__libc_init_array+0x2e>
 801440e:	bd70      	pop	{r4, r5, r6, pc}
 8014410:	f855 3b04 	ldr.w	r3, [r5], #4
 8014414:	4798      	blx	r3
 8014416:	3601      	adds	r6, #1
 8014418:	e7ee      	b.n	80143f8 <__libc_init_array+0xc>
 801441a:	f855 3b04 	ldr.w	r3, [r5], #4
 801441e:	4798      	blx	r3
 8014420:	3601      	adds	r6, #1
 8014422:	e7f2      	b.n	801440a <__libc_init_array+0x1e>
 8014424:	08019328 	.word	0x08019328
 8014428:	08019328 	.word	0x08019328
 801442c:	08019328 	.word	0x08019328
 8014430:	0801932c 	.word	0x0801932c

08014434 <memcmp>:
 8014434:	b510      	push	{r4, lr}
 8014436:	3901      	subs	r1, #1
 8014438:	4402      	add	r2, r0
 801443a:	4290      	cmp	r0, r2
 801443c:	d101      	bne.n	8014442 <memcmp+0xe>
 801443e:	2000      	movs	r0, #0
 8014440:	e005      	b.n	801444e <memcmp+0x1a>
 8014442:	7803      	ldrb	r3, [r0, #0]
 8014444:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014448:	42a3      	cmp	r3, r4
 801444a:	d001      	beq.n	8014450 <memcmp+0x1c>
 801444c:	1b18      	subs	r0, r3, r4
 801444e:	bd10      	pop	{r4, pc}
 8014450:	3001      	adds	r0, #1
 8014452:	e7f2      	b.n	801443a <memcmp+0x6>

08014454 <memcpy>:
 8014454:	440a      	add	r2, r1
 8014456:	4291      	cmp	r1, r2
 8014458:	f100 33ff 	add.w	r3, r0, #4294967295
 801445c:	d100      	bne.n	8014460 <memcpy+0xc>
 801445e:	4770      	bx	lr
 8014460:	b510      	push	{r4, lr}
 8014462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014466:	f803 4f01 	strb.w	r4, [r3, #1]!
 801446a:	4291      	cmp	r1, r2
 801446c:	d1f9      	bne.n	8014462 <memcpy+0xe>
 801446e:	bd10      	pop	{r4, pc}

08014470 <memset>:
 8014470:	4402      	add	r2, r0
 8014472:	4603      	mov	r3, r0
 8014474:	4293      	cmp	r3, r2
 8014476:	d100      	bne.n	801447a <memset+0xa>
 8014478:	4770      	bx	lr
 801447a:	f803 1b01 	strb.w	r1, [r3], #1
 801447e:	e7f9      	b.n	8014474 <memset+0x4>

08014480 <iprintf>:
 8014480:	b40f      	push	{r0, r1, r2, r3}
 8014482:	4b0a      	ldr	r3, [pc, #40]	; (80144ac <iprintf+0x2c>)
 8014484:	b513      	push	{r0, r1, r4, lr}
 8014486:	681c      	ldr	r4, [r3, #0]
 8014488:	b124      	cbz	r4, 8014494 <iprintf+0x14>
 801448a:	69a3      	ldr	r3, [r4, #24]
 801448c:	b913      	cbnz	r3, 8014494 <iprintf+0x14>
 801448e:	4620      	mov	r0, r4
 8014490:	f000 f8c2 	bl	8014618 <__sinit>
 8014494:	ab05      	add	r3, sp, #20
 8014496:	9a04      	ldr	r2, [sp, #16]
 8014498:	68a1      	ldr	r1, [r4, #8]
 801449a:	9301      	str	r3, [sp, #4]
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fa7f 	bl	80149a0 <_vfiprintf_r>
 80144a2:	b002      	add	sp, #8
 80144a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144a8:	b004      	add	sp, #16
 80144aa:	4770      	bx	lr
 80144ac:	2000001c 	.word	0x2000001c

080144b0 <rand>:
 80144b0:	4b16      	ldr	r3, [pc, #88]	; (801450c <rand+0x5c>)
 80144b2:	b510      	push	{r4, lr}
 80144b4:	681c      	ldr	r4, [r3, #0]
 80144b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80144b8:	b9b3      	cbnz	r3, 80144e8 <rand+0x38>
 80144ba:	2018      	movs	r0, #24
 80144bc:	f000 f95e 	bl	801477c <malloc>
 80144c0:	63a0      	str	r0, [r4, #56]	; 0x38
 80144c2:	b928      	cbnz	r0, 80144d0 <rand+0x20>
 80144c4:	4602      	mov	r2, r0
 80144c6:	4b12      	ldr	r3, [pc, #72]	; (8014510 <rand+0x60>)
 80144c8:	4812      	ldr	r0, [pc, #72]	; (8014514 <rand+0x64>)
 80144ca:	214e      	movs	r1, #78	; 0x4e
 80144cc:	f000 f82e 	bl	801452c <__assert_func>
 80144d0:	4a11      	ldr	r2, [pc, #68]	; (8014518 <rand+0x68>)
 80144d2:	4b12      	ldr	r3, [pc, #72]	; (801451c <rand+0x6c>)
 80144d4:	e9c0 2300 	strd	r2, r3, [r0]
 80144d8:	4b11      	ldr	r3, [pc, #68]	; (8014520 <rand+0x70>)
 80144da:	6083      	str	r3, [r0, #8]
 80144dc:	230b      	movs	r3, #11
 80144de:	8183      	strh	r3, [r0, #12]
 80144e0:	2201      	movs	r2, #1
 80144e2:	2300      	movs	r3, #0
 80144e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80144e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80144ea:	4a0e      	ldr	r2, [pc, #56]	; (8014524 <rand+0x74>)
 80144ec:	6920      	ldr	r0, [r4, #16]
 80144ee:	6963      	ldr	r3, [r4, #20]
 80144f0:	490d      	ldr	r1, [pc, #52]	; (8014528 <rand+0x78>)
 80144f2:	4342      	muls	r2, r0
 80144f4:	fb01 2203 	mla	r2, r1, r3, r2
 80144f8:	fba0 0101 	umull	r0, r1, r0, r1
 80144fc:	1c43      	adds	r3, r0, #1
 80144fe:	eb42 0001 	adc.w	r0, r2, r1
 8014502:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8014506:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801450a:	bd10      	pop	{r4, pc}
 801450c:	2000001c 	.word	0x2000001c
 8014510:	080191dc 	.word	0x080191dc
 8014514:	080191f3 	.word	0x080191f3
 8014518:	abcd330e 	.word	0xabcd330e
 801451c:	e66d1234 	.word	0xe66d1234
 8014520:	0005deec 	.word	0x0005deec
 8014524:	5851f42d 	.word	0x5851f42d
 8014528:	4c957f2d 	.word	0x4c957f2d

0801452c <__assert_func>:
 801452c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801452e:	4614      	mov	r4, r2
 8014530:	461a      	mov	r2, r3
 8014532:	4b09      	ldr	r3, [pc, #36]	; (8014558 <__assert_func+0x2c>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4605      	mov	r5, r0
 8014538:	68d8      	ldr	r0, [r3, #12]
 801453a:	b14c      	cbz	r4, 8014550 <__assert_func+0x24>
 801453c:	4b07      	ldr	r3, [pc, #28]	; (801455c <__assert_func+0x30>)
 801453e:	9100      	str	r1, [sp, #0]
 8014540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014544:	4906      	ldr	r1, [pc, #24]	; (8014560 <__assert_func+0x34>)
 8014546:	462b      	mov	r3, r5
 8014548:	f000 f8e4 	bl	8014714 <fiprintf>
 801454c:	f000 fe12 	bl	8015174 <abort>
 8014550:	4b04      	ldr	r3, [pc, #16]	; (8014564 <__assert_func+0x38>)
 8014552:	461c      	mov	r4, r3
 8014554:	e7f3      	b.n	801453e <__assert_func+0x12>
 8014556:	bf00      	nop
 8014558:	2000001c 	.word	0x2000001c
 801455c:	0801924e 	.word	0x0801924e
 8014560:	0801925b 	.word	0x0801925b
 8014564:	08019289 	.word	0x08019289

08014568 <std>:
 8014568:	2300      	movs	r3, #0
 801456a:	b510      	push	{r4, lr}
 801456c:	4604      	mov	r4, r0
 801456e:	e9c0 3300 	strd	r3, r3, [r0]
 8014572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014576:	6083      	str	r3, [r0, #8]
 8014578:	8181      	strh	r1, [r0, #12]
 801457a:	6643      	str	r3, [r0, #100]	; 0x64
 801457c:	81c2      	strh	r2, [r0, #14]
 801457e:	6183      	str	r3, [r0, #24]
 8014580:	4619      	mov	r1, r3
 8014582:	2208      	movs	r2, #8
 8014584:	305c      	adds	r0, #92	; 0x5c
 8014586:	f7ff ff73 	bl	8014470 <memset>
 801458a:	4b05      	ldr	r3, [pc, #20]	; (80145a0 <std+0x38>)
 801458c:	6263      	str	r3, [r4, #36]	; 0x24
 801458e:	4b05      	ldr	r3, [pc, #20]	; (80145a4 <std+0x3c>)
 8014590:	62a3      	str	r3, [r4, #40]	; 0x28
 8014592:	4b05      	ldr	r3, [pc, #20]	; (80145a8 <std+0x40>)
 8014594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014596:	4b05      	ldr	r3, [pc, #20]	; (80145ac <std+0x44>)
 8014598:	6224      	str	r4, [r4, #32]
 801459a:	6323      	str	r3, [r4, #48]	; 0x30
 801459c:	bd10      	pop	{r4, pc}
 801459e:	bf00      	nop
 80145a0:	08014f49 	.word	0x08014f49
 80145a4:	08014f6b 	.word	0x08014f6b
 80145a8:	08014fa3 	.word	0x08014fa3
 80145ac:	08014fc7 	.word	0x08014fc7

080145b0 <_cleanup_r>:
 80145b0:	4901      	ldr	r1, [pc, #4]	; (80145b8 <_cleanup_r+0x8>)
 80145b2:	f000 b8c1 	b.w	8014738 <_fwalk_reent>
 80145b6:	bf00      	nop
 80145b8:	080152b1 	.word	0x080152b1

080145bc <__sfmoreglue>:
 80145bc:	b570      	push	{r4, r5, r6, lr}
 80145be:	2268      	movs	r2, #104	; 0x68
 80145c0:	1e4d      	subs	r5, r1, #1
 80145c2:	4355      	muls	r5, r2
 80145c4:	460e      	mov	r6, r1
 80145c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80145ca:	f000 f94b 	bl	8014864 <_malloc_r>
 80145ce:	4604      	mov	r4, r0
 80145d0:	b140      	cbz	r0, 80145e4 <__sfmoreglue+0x28>
 80145d2:	2100      	movs	r1, #0
 80145d4:	e9c0 1600 	strd	r1, r6, [r0]
 80145d8:	300c      	adds	r0, #12
 80145da:	60a0      	str	r0, [r4, #8]
 80145dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80145e0:	f7ff ff46 	bl	8014470 <memset>
 80145e4:	4620      	mov	r0, r4
 80145e6:	bd70      	pop	{r4, r5, r6, pc}

080145e8 <__sfp_lock_acquire>:
 80145e8:	4801      	ldr	r0, [pc, #4]	; (80145f0 <__sfp_lock_acquire+0x8>)
 80145ea:	f000 b8c5 	b.w	8014778 <__retarget_lock_acquire_recursive>
 80145ee:	bf00      	nop
 80145f0:	2000ffad 	.word	0x2000ffad

080145f4 <__sfp_lock_release>:
 80145f4:	4801      	ldr	r0, [pc, #4]	; (80145fc <__sfp_lock_release+0x8>)
 80145f6:	f000 b8c0 	b.w	801477a <__retarget_lock_release_recursive>
 80145fa:	bf00      	nop
 80145fc:	2000ffad 	.word	0x2000ffad

08014600 <__sinit_lock_acquire>:
 8014600:	4801      	ldr	r0, [pc, #4]	; (8014608 <__sinit_lock_acquire+0x8>)
 8014602:	f000 b8b9 	b.w	8014778 <__retarget_lock_acquire_recursive>
 8014606:	bf00      	nop
 8014608:	2000ffae 	.word	0x2000ffae

0801460c <__sinit_lock_release>:
 801460c:	4801      	ldr	r0, [pc, #4]	; (8014614 <__sinit_lock_release+0x8>)
 801460e:	f000 b8b4 	b.w	801477a <__retarget_lock_release_recursive>
 8014612:	bf00      	nop
 8014614:	2000ffae 	.word	0x2000ffae

08014618 <__sinit>:
 8014618:	b510      	push	{r4, lr}
 801461a:	4604      	mov	r4, r0
 801461c:	f7ff fff0 	bl	8014600 <__sinit_lock_acquire>
 8014620:	69a3      	ldr	r3, [r4, #24]
 8014622:	b11b      	cbz	r3, 801462c <__sinit+0x14>
 8014624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014628:	f7ff bff0 	b.w	801460c <__sinit_lock_release>
 801462c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014630:	6523      	str	r3, [r4, #80]	; 0x50
 8014632:	4b13      	ldr	r3, [pc, #76]	; (8014680 <__sinit+0x68>)
 8014634:	4a13      	ldr	r2, [pc, #76]	; (8014684 <__sinit+0x6c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	62a2      	str	r2, [r4, #40]	; 0x28
 801463a:	42a3      	cmp	r3, r4
 801463c:	bf04      	itt	eq
 801463e:	2301      	moveq	r3, #1
 8014640:	61a3      	streq	r3, [r4, #24]
 8014642:	4620      	mov	r0, r4
 8014644:	f000 f820 	bl	8014688 <__sfp>
 8014648:	6060      	str	r0, [r4, #4]
 801464a:	4620      	mov	r0, r4
 801464c:	f000 f81c 	bl	8014688 <__sfp>
 8014650:	60a0      	str	r0, [r4, #8]
 8014652:	4620      	mov	r0, r4
 8014654:	f000 f818 	bl	8014688 <__sfp>
 8014658:	2200      	movs	r2, #0
 801465a:	60e0      	str	r0, [r4, #12]
 801465c:	2104      	movs	r1, #4
 801465e:	6860      	ldr	r0, [r4, #4]
 8014660:	f7ff ff82 	bl	8014568 <std>
 8014664:	68a0      	ldr	r0, [r4, #8]
 8014666:	2201      	movs	r2, #1
 8014668:	2109      	movs	r1, #9
 801466a:	f7ff ff7d 	bl	8014568 <std>
 801466e:	68e0      	ldr	r0, [r4, #12]
 8014670:	2202      	movs	r2, #2
 8014672:	2112      	movs	r1, #18
 8014674:	f7ff ff78 	bl	8014568 <std>
 8014678:	2301      	movs	r3, #1
 801467a:	61a3      	str	r3, [r4, #24]
 801467c:	e7d2      	b.n	8014624 <__sinit+0xc>
 801467e:	bf00      	nop
 8014680:	080191d8 	.word	0x080191d8
 8014684:	080145b1 	.word	0x080145b1

08014688 <__sfp>:
 8014688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801468a:	4607      	mov	r7, r0
 801468c:	f7ff ffac 	bl	80145e8 <__sfp_lock_acquire>
 8014690:	4b1e      	ldr	r3, [pc, #120]	; (801470c <__sfp+0x84>)
 8014692:	681e      	ldr	r6, [r3, #0]
 8014694:	69b3      	ldr	r3, [r6, #24]
 8014696:	b913      	cbnz	r3, 801469e <__sfp+0x16>
 8014698:	4630      	mov	r0, r6
 801469a:	f7ff ffbd 	bl	8014618 <__sinit>
 801469e:	3648      	adds	r6, #72	; 0x48
 80146a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	d503      	bpl.n	80146b0 <__sfp+0x28>
 80146a8:	6833      	ldr	r3, [r6, #0]
 80146aa:	b30b      	cbz	r3, 80146f0 <__sfp+0x68>
 80146ac:	6836      	ldr	r6, [r6, #0]
 80146ae:	e7f7      	b.n	80146a0 <__sfp+0x18>
 80146b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80146b4:	b9d5      	cbnz	r5, 80146ec <__sfp+0x64>
 80146b6:	4b16      	ldr	r3, [pc, #88]	; (8014710 <__sfp+0x88>)
 80146b8:	60e3      	str	r3, [r4, #12]
 80146ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146be:	6665      	str	r5, [r4, #100]	; 0x64
 80146c0:	f000 f859 	bl	8014776 <__retarget_lock_init_recursive>
 80146c4:	f7ff ff96 	bl	80145f4 <__sfp_lock_release>
 80146c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80146cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80146d0:	6025      	str	r5, [r4, #0]
 80146d2:	61a5      	str	r5, [r4, #24]
 80146d4:	2208      	movs	r2, #8
 80146d6:	4629      	mov	r1, r5
 80146d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80146dc:	f7ff fec8 	bl	8014470 <memset>
 80146e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80146e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80146e8:	4620      	mov	r0, r4
 80146ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ec:	3468      	adds	r4, #104	; 0x68
 80146ee:	e7d9      	b.n	80146a4 <__sfp+0x1c>
 80146f0:	2104      	movs	r1, #4
 80146f2:	4638      	mov	r0, r7
 80146f4:	f7ff ff62 	bl	80145bc <__sfmoreglue>
 80146f8:	4604      	mov	r4, r0
 80146fa:	6030      	str	r0, [r6, #0]
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d1d5      	bne.n	80146ac <__sfp+0x24>
 8014700:	f7ff ff78 	bl	80145f4 <__sfp_lock_release>
 8014704:	230c      	movs	r3, #12
 8014706:	603b      	str	r3, [r7, #0]
 8014708:	e7ee      	b.n	80146e8 <__sfp+0x60>
 801470a:	bf00      	nop
 801470c:	080191d8 	.word	0x080191d8
 8014710:	ffff0001 	.word	0xffff0001

08014714 <fiprintf>:
 8014714:	b40e      	push	{r1, r2, r3}
 8014716:	b503      	push	{r0, r1, lr}
 8014718:	4601      	mov	r1, r0
 801471a:	ab03      	add	r3, sp, #12
 801471c:	4805      	ldr	r0, [pc, #20]	; (8014734 <fiprintf+0x20>)
 801471e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014722:	6800      	ldr	r0, [r0, #0]
 8014724:	9301      	str	r3, [sp, #4]
 8014726:	f000 f93b 	bl	80149a0 <_vfiprintf_r>
 801472a:	b002      	add	sp, #8
 801472c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014730:	b003      	add	sp, #12
 8014732:	4770      	bx	lr
 8014734:	2000001c 	.word	0x2000001c

08014738 <_fwalk_reent>:
 8014738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801473c:	4606      	mov	r6, r0
 801473e:	4688      	mov	r8, r1
 8014740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014744:	2700      	movs	r7, #0
 8014746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801474a:	f1b9 0901 	subs.w	r9, r9, #1
 801474e:	d505      	bpl.n	801475c <_fwalk_reent+0x24>
 8014750:	6824      	ldr	r4, [r4, #0]
 8014752:	2c00      	cmp	r4, #0
 8014754:	d1f7      	bne.n	8014746 <_fwalk_reent+0xe>
 8014756:	4638      	mov	r0, r7
 8014758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801475c:	89ab      	ldrh	r3, [r5, #12]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d907      	bls.n	8014772 <_fwalk_reent+0x3a>
 8014762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014766:	3301      	adds	r3, #1
 8014768:	d003      	beq.n	8014772 <_fwalk_reent+0x3a>
 801476a:	4629      	mov	r1, r5
 801476c:	4630      	mov	r0, r6
 801476e:	47c0      	blx	r8
 8014770:	4307      	orrs	r7, r0
 8014772:	3568      	adds	r5, #104	; 0x68
 8014774:	e7e9      	b.n	801474a <_fwalk_reent+0x12>

08014776 <__retarget_lock_init_recursive>:
 8014776:	4770      	bx	lr

08014778 <__retarget_lock_acquire_recursive>:
 8014778:	4770      	bx	lr

0801477a <__retarget_lock_release_recursive>:
 801477a:	4770      	bx	lr

0801477c <malloc>:
 801477c:	4b02      	ldr	r3, [pc, #8]	; (8014788 <malloc+0xc>)
 801477e:	4601      	mov	r1, r0
 8014780:	6818      	ldr	r0, [r3, #0]
 8014782:	f000 b86f 	b.w	8014864 <_malloc_r>
 8014786:	bf00      	nop
 8014788:	2000001c 	.word	0x2000001c

0801478c <_free_r>:
 801478c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801478e:	2900      	cmp	r1, #0
 8014790:	d044      	beq.n	801481c <_free_r+0x90>
 8014792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014796:	9001      	str	r0, [sp, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	f1a1 0404 	sub.w	r4, r1, #4
 801479e:	bfb8      	it	lt
 80147a0:	18e4      	addlt	r4, r4, r3
 80147a2:	f000 fe39 	bl	8015418 <__malloc_lock>
 80147a6:	4a1e      	ldr	r2, [pc, #120]	; (8014820 <_free_r+0x94>)
 80147a8:	9801      	ldr	r0, [sp, #4]
 80147aa:	6813      	ldr	r3, [r2, #0]
 80147ac:	b933      	cbnz	r3, 80147bc <_free_r+0x30>
 80147ae:	6063      	str	r3, [r4, #4]
 80147b0:	6014      	str	r4, [r2, #0]
 80147b2:	b003      	add	sp, #12
 80147b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147b8:	f000 be34 	b.w	8015424 <__malloc_unlock>
 80147bc:	42a3      	cmp	r3, r4
 80147be:	d908      	bls.n	80147d2 <_free_r+0x46>
 80147c0:	6825      	ldr	r5, [r4, #0]
 80147c2:	1961      	adds	r1, r4, r5
 80147c4:	428b      	cmp	r3, r1
 80147c6:	bf01      	itttt	eq
 80147c8:	6819      	ldreq	r1, [r3, #0]
 80147ca:	685b      	ldreq	r3, [r3, #4]
 80147cc:	1949      	addeq	r1, r1, r5
 80147ce:	6021      	streq	r1, [r4, #0]
 80147d0:	e7ed      	b.n	80147ae <_free_r+0x22>
 80147d2:	461a      	mov	r2, r3
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	b10b      	cbz	r3, 80147dc <_free_r+0x50>
 80147d8:	42a3      	cmp	r3, r4
 80147da:	d9fa      	bls.n	80147d2 <_free_r+0x46>
 80147dc:	6811      	ldr	r1, [r2, #0]
 80147de:	1855      	adds	r5, r2, r1
 80147e0:	42a5      	cmp	r5, r4
 80147e2:	d10b      	bne.n	80147fc <_free_r+0x70>
 80147e4:	6824      	ldr	r4, [r4, #0]
 80147e6:	4421      	add	r1, r4
 80147e8:	1854      	adds	r4, r2, r1
 80147ea:	42a3      	cmp	r3, r4
 80147ec:	6011      	str	r1, [r2, #0]
 80147ee:	d1e0      	bne.n	80147b2 <_free_r+0x26>
 80147f0:	681c      	ldr	r4, [r3, #0]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	6053      	str	r3, [r2, #4]
 80147f6:	4421      	add	r1, r4
 80147f8:	6011      	str	r1, [r2, #0]
 80147fa:	e7da      	b.n	80147b2 <_free_r+0x26>
 80147fc:	d902      	bls.n	8014804 <_free_r+0x78>
 80147fe:	230c      	movs	r3, #12
 8014800:	6003      	str	r3, [r0, #0]
 8014802:	e7d6      	b.n	80147b2 <_free_r+0x26>
 8014804:	6825      	ldr	r5, [r4, #0]
 8014806:	1961      	adds	r1, r4, r5
 8014808:	428b      	cmp	r3, r1
 801480a:	bf04      	itt	eq
 801480c:	6819      	ldreq	r1, [r3, #0]
 801480e:	685b      	ldreq	r3, [r3, #4]
 8014810:	6063      	str	r3, [r4, #4]
 8014812:	bf04      	itt	eq
 8014814:	1949      	addeq	r1, r1, r5
 8014816:	6021      	streq	r1, [r4, #0]
 8014818:	6054      	str	r4, [r2, #4]
 801481a:	e7ca      	b.n	80147b2 <_free_r+0x26>
 801481c:	b003      	add	sp, #12
 801481e:	bd30      	pop	{r4, r5, pc}
 8014820:	2000ffb0 	.word	0x2000ffb0

08014824 <sbrk_aligned>:
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	4e0e      	ldr	r6, [pc, #56]	; (8014860 <sbrk_aligned+0x3c>)
 8014828:	460c      	mov	r4, r1
 801482a:	6831      	ldr	r1, [r6, #0]
 801482c:	4605      	mov	r5, r0
 801482e:	b911      	cbnz	r1, 8014836 <sbrk_aligned+0x12>
 8014830:	f000 fb7a 	bl	8014f28 <_sbrk_r>
 8014834:	6030      	str	r0, [r6, #0]
 8014836:	4621      	mov	r1, r4
 8014838:	4628      	mov	r0, r5
 801483a:	f000 fb75 	bl	8014f28 <_sbrk_r>
 801483e:	1c43      	adds	r3, r0, #1
 8014840:	d00a      	beq.n	8014858 <sbrk_aligned+0x34>
 8014842:	1cc4      	adds	r4, r0, #3
 8014844:	f024 0403 	bic.w	r4, r4, #3
 8014848:	42a0      	cmp	r0, r4
 801484a:	d007      	beq.n	801485c <sbrk_aligned+0x38>
 801484c:	1a21      	subs	r1, r4, r0
 801484e:	4628      	mov	r0, r5
 8014850:	f000 fb6a 	bl	8014f28 <_sbrk_r>
 8014854:	3001      	adds	r0, #1
 8014856:	d101      	bne.n	801485c <sbrk_aligned+0x38>
 8014858:	f04f 34ff 	mov.w	r4, #4294967295
 801485c:	4620      	mov	r0, r4
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	2000ffb4 	.word	0x2000ffb4

08014864 <_malloc_r>:
 8014864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014868:	1ccd      	adds	r5, r1, #3
 801486a:	f025 0503 	bic.w	r5, r5, #3
 801486e:	3508      	adds	r5, #8
 8014870:	2d0c      	cmp	r5, #12
 8014872:	bf38      	it	cc
 8014874:	250c      	movcc	r5, #12
 8014876:	2d00      	cmp	r5, #0
 8014878:	4607      	mov	r7, r0
 801487a:	db01      	blt.n	8014880 <_malloc_r+0x1c>
 801487c:	42a9      	cmp	r1, r5
 801487e:	d905      	bls.n	801488c <_malloc_r+0x28>
 8014880:	230c      	movs	r3, #12
 8014882:	603b      	str	r3, [r7, #0]
 8014884:	2600      	movs	r6, #0
 8014886:	4630      	mov	r0, r6
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488c:	4e2e      	ldr	r6, [pc, #184]	; (8014948 <_malloc_r+0xe4>)
 801488e:	f000 fdc3 	bl	8015418 <__malloc_lock>
 8014892:	6833      	ldr	r3, [r6, #0]
 8014894:	461c      	mov	r4, r3
 8014896:	bb34      	cbnz	r4, 80148e6 <_malloc_r+0x82>
 8014898:	4629      	mov	r1, r5
 801489a:	4638      	mov	r0, r7
 801489c:	f7ff ffc2 	bl	8014824 <sbrk_aligned>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	4604      	mov	r4, r0
 80148a4:	d14d      	bne.n	8014942 <_malloc_r+0xde>
 80148a6:	6834      	ldr	r4, [r6, #0]
 80148a8:	4626      	mov	r6, r4
 80148aa:	2e00      	cmp	r6, #0
 80148ac:	d140      	bne.n	8014930 <_malloc_r+0xcc>
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	4631      	mov	r1, r6
 80148b2:	4638      	mov	r0, r7
 80148b4:	eb04 0803 	add.w	r8, r4, r3
 80148b8:	f000 fb36 	bl	8014f28 <_sbrk_r>
 80148bc:	4580      	cmp	r8, r0
 80148be:	d13a      	bne.n	8014936 <_malloc_r+0xd2>
 80148c0:	6821      	ldr	r1, [r4, #0]
 80148c2:	3503      	adds	r5, #3
 80148c4:	1a6d      	subs	r5, r5, r1
 80148c6:	f025 0503 	bic.w	r5, r5, #3
 80148ca:	3508      	adds	r5, #8
 80148cc:	2d0c      	cmp	r5, #12
 80148ce:	bf38      	it	cc
 80148d0:	250c      	movcc	r5, #12
 80148d2:	4629      	mov	r1, r5
 80148d4:	4638      	mov	r0, r7
 80148d6:	f7ff ffa5 	bl	8014824 <sbrk_aligned>
 80148da:	3001      	adds	r0, #1
 80148dc:	d02b      	beq.n	8014936 <_malloc_r+0xd2>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	442b      	add	r3, r5
 80148e2:	6023      	str	r3, [r4, #0]
 80148e4:	e00e      	b.n	8014904 <_malloc_r+0xa0>
 80148e6:	6822      	ldr	r2, [r4, #0]
 80148e8:	1b52      	subs	r2, r2, r5
 80148ea:	d41e      	bmi.n	801492a <_malloc_r+0xc6>
 80148ec:	2a0b      	cmp	r2, #11
 80148ee:	d916      	bls.n	801491e <_malloc_r+0xba>
 80148f0:	1961      	adds	r1, r4, r5
 80148f2:	42a3      	cmp	r3, r4
 80148f4:	6025      	str	r5, [r4, #0]
 80148f6:	bf18      	it	ne
 80148f8:	6059      	strne	r1, [r3, #4]
 80148fa:	6863      	ldr	r3, [r4, #4]
 80148fc:	bf08      	it	eq
 80148fe:	6031      	streq	r1, [r6, #0]
 8014900:	5162      	str	r2, [r4, r5]
 8014902:	604b      	str	r3, [r1, #4]
 8014904:	4638      	mov	r0, r7
 8014906:	f104 060b 	add.w	r6, r4, #11
 801490a:	f000 fd8b 	bl	8015424 <__malloc_unlock>
 801490e:	f026 0607 	bic.w	r6, r6, #7
 8014912:	1d23      	adds	r3, r4, #4
 8014914:	1af2      	subs	r2, r6, r3
 8014916:	d0b6      	beq.n	8014886 <_malloc_r+0x22>
 8014918:	1b9b      	subs	r3, r3, r6
 801491a:	50a3      	str	r3, [r4, r2]
 801491c:	e7b3      	b.n	8014886 <_malloc_r+0x22>
 801491e:	6862      	ldr	r2, [r4, #4]
 8014920:	42a3      	cmp	r3, r4
 8014922:	bf0c      	ite	eq
 8014924:	6032      	streq	r2, [r6, #0]
 8014926:	605a      	strne	r2, [r3, #4]
 8014928:	e7ec      	b.n	8014904 <_malloc_r+0xa0>
 801492a:	4623      	mov	r3, r4
 801492c:	6864      	ldr	r4, [r4, #4]
 801492e:	e7b2      	b.n	8014896 <_malloc_r+0x32>
 8014930:	4634      	mov	r4, r6
 8014932:	6876      	ldr	r6, [r6, #4]
 8014934:	e7b9      	b.n	80148aa <_malloc_r+0x46>
 8014936:	230c      	movs	r3, #12
 8014938:	603b      	str	r3, [r7, #0]
 801493a:	4638      	mov	r0, r7
 801493c:	f000 fd72 	bl	8015424 <__malloc_unlock>
 8014940:	e7a1      	b.n	8014886 <_malloc_r+0x22>
 8014942:	6025      	str	r5, [r4, #0]
 8014944:	e7de      	b.n	8014904 <_malloc_r+0xa0>
 8014946:	bf00      	nop
 8014948:	2000ffb0 	.word	0x2000ffb0

0801494c <__sfputc_r>:
 801494c:	6893      	ldr	r3, [r2, #8]
 801494e:	3b01      	subs	r3, #1
 8014950:	2b00      	cmp	r3, #0
 8014952:	b410      	push	{r4}
 8014954:	6093      	str	r3, [r2, #8]
 8014956:	da08      	bge.n	801496a <__sfputc_r+0x1e>
 8014958:	6994      	ldr	r4, [r2, #24]
 801495a:	42a3      	cmp	r3, r4
 801495c:	db01      	blt.n	8014962 <__sfputc_r+0x16>
 801495e:	290a      	cmp	r1, #10
 8014960:	d103      	bne.n	801496a <__sfputc_r+0x1e>
 8014962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014966:	f000 bb33 	b.w	8014fd0 <__swbuf_r>
 801496a:	6813      	ldr	r3, [r2, #0]
 801496c:	1c58      	adds	r0, r3, #1
 801496e:	6010      	str	r0, [r2, #0]
 8014970:	7019      	strb	r1, [r3, #0]
 8014972:	4608      	mov	r0, r1
 8014974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014978:	4770      	bx	lr

0801497a <__sfputs_r>:
 801497a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801497c:	4606      	mov	r6, r0
 801497e:	460f      	mov	r7, r1
 8014980:	4614      	mov	r4, r2
 8014982:	18d5      	adds	r5, r2, r3
 8014984:	42ac      	cmp	r4, r5
 8014986:	d101      	bne.n	801498c <__sfputs_r+0x12>
 8014988:	2000      	movs	r0, #0
 801498a:	e007      	b.n	801499c <__sfputs_r+0x22>
 801498c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014990:	463a      	mov	r2, r7
 8014992:	4630      	mov	r0, r6
 8014994:	f7ff ffda 	bl	801494c <__sfputc_r>
 8014998:	1c43      	adds	r3, r0, #1
 801499a:	d1f3      	bne.n	8014984 <__sfputs_r+0xa>
 801499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149a0 <_vfiprintf_r>:
 80149a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149a4:	460d      	mov	r5, r1
 80149a6:	b09d      	sub	sp, #116	; 0x74
 80149a8:	4614      	mov	r4, r2
 80149aa:	4698      	mov	r8, r3
 80149ac:	4606      	mov	r6, r0
 80149ae:	b118      	cbz	r0, 80149b8 <_vfiprintf_r+0x18>
 80149b0:	6983      	ldr	r3, [r0, #24]
 80149b2:	b90b      	cbnz	r3, 80149b8 <_vfiprintf_r+0x18>
 80149b4:	f7ff fe30 	bl	8014618 <__sinit>
 80149b8:	4b89      	ldr	r3, [pc, #548]	; (8014be0 <_vfiprintf_r+0x240>)
 80149ba:	429d      	cmp	r5, r3
 80149bc:	d11b      	bne.n	80149f6 <_vfiprintf_r+0x56>
 80149be:	6875      	ldr	r5, [r6, #4]
 80149c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149c2:	07d9      	lsls	r1, r3, #31
 80149c4:	d405      	bmi.n	80149d2 <_vfiprintf_r+0x32>
 80149c6:	89ab      	ldrh	r3, [r5, #12]
 80149c8:	059a      	lsls	r2, r3, #22
 80149ca:	d402      	bmi.n	80149d2 <_vfiprintf_r+0x32>
 80149cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149ce:	f7ff fed3 	bl	8014778 <__retarget_lock_acquire_recursive>
 80149d2:	89ab      	ldrh	r3, [r5, #12]
 80149d4:	071b      	lsls	r3, r3, #28
 80149d6:	d501      	bpl.n	80149dc <_vfiprintf_r+0x3c>
 80149d8:	692b      	ldr	r3, [r5, #16]
 80149da:	b9eb      	cbnz	r3, 8014a18 <_vfiprintf_r+0x78>
 80149dc:	4629      	mov	r1, r5
 80149de:	4630      	mov	r0, r6
 80149e0:	f000 fb5a 	bl	8015098 <__swsetup_r>
 80149e4:	b1c0      	cbz	r0, 8014a18 <_vfiprintf_r+0x78>
 80149e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149e8:	07dc      	lsls	r4, r3, #31
 80149ea:	d50e      	bpl.n	8014a0a <_vfiprintf_r+0x6a>
 80149ec:	f04f 30ff 	mov.w	r0, #4294967295
 80149f0:	b01d      	add	sp, #116	; 0x74
 80149f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f6:	4b7b      	ldr	r3, [pc, #492]	; (8014be4 <_vfiprintf_r+0x244>)
 80149f8:	429d      	cmp	r5, r3
 80149fa:	d101      	bne.n	8014a00 <_vfiprintf_r+0x60>
 80149fc:	68b5      	ldr	r5, [r6, #8]
 80149fe:	e7df      	b.n	80149c0 <_vfiprintf_r+0x20>
 8014a00:	4b79      	ldr	r3, [pc, #484]	; (8014be8 <_vfiprintf_r+0x248>)
 8014a02:	429d      	cmp	r5, r3
 8014a04:	bf08      	it	eq
 8014a06:	68f5      	ldreq	r5, [r6, #12]
 8014a08:	e7da      	b.n	80149c0 <_vfiprintf_r+0x20>
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	0598      	lsls	r0, r3, #22
 8014a0e:	d4ed      	bmi.n	80149ec <_vfiprintf_r+0x4c>
 8014a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a12:	f7ff feb2 	bl	801477a <__retarget_lock_release_recursive>
 8014a16:	e7e9      	b.n	80149ec <_vfiprintf_r+0x4c>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a1c:	2320      	movs	r3, #32
 8014a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a26:	2330      	movs	r3, #48	; 0x30
 8014a28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014bec <_vfiprintf_r+0x24c>
 8014a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a30:	f04f 0901 	mov.w	r9, #1
 8014a34:	4623      	mov	r3, r4
 8014a36:	469a      	mov	sl, r3
 8014a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a3c:	b10a      	cbz	r2, 8014a42 <_vfiprintf_r+0xa2>
 8014a3e:	2a25      	cmp	r2, #37	; 0x25
 8014a40:	d1f9      	bne.n	8014a36 <_vfiprintf_r+0x96>
 8014a42:	ebba 0b04 	subs.w	fp, sl, r4
 8014a46:	d00b      	beq.n	8014a60 <_vfiprintf_r+0xc0>
 8014a48:	465b      	mov	r3, fp
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	4630      	mov	r0, r6
 8014a50:	f7ff ff93 	bl	801497a <__sfputs_r>
 8014a54:	3001      	adds	r0, #1
 8014a56:	f000 80aa 	beq.w	8014bae <_vfiprintf_r+0x20e>
 8014a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a5c:	445a      	add	r2, fp
 8014a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8014a60:	f89a 3000 	ldrb.w	r3, [sl]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f000 80a2 	beq.w	8014bae <_vfiprintf_r+0x20e>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a74:	f10a 0a01 	add.w	sl, sl, #1
 8014a78:	9304      	str	r3, [sp, #16]
 8014a7a:	9307      	str	r3, [sp, #28]
 8014a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a80:	931a      	str	r3, [sp, #104]	; 0x68
 8014a82:	4654      	mov	r4, sl
 8014a84:	2205      	movs	r2, #5
 8014a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8a:	4858      	ldr	r0, [pc, #352]	; (8014bec <_vfiprintf_r+0x24c>)
 8014a8c:	f7eb fba8 	bl	80001e0 <memchr>
 8014a90:	9a04      	ldr	r2, [sp, #16]
 8014a92:	b9d8      	cbnz	r0, 8014acc <_vfiprintf_r+0x12c>
 8014a94:	06d1      	lsls	r1, r2, #27
 8014a96:	bf44      	itt	mi
 8014a98:	2320      	movmi	r3, #32
 8014a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a9e:	0713      	lsls	r3, r2, #28
 8014aa0:	bf44      	itt	mi
 8014aa2:	232b      	movmi	r3, #43	; 0x2b
 8014aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aac:	2b2a      	cmp	r3, #42	; 0x2a
 8014aae:	d015      	beq.n	8014adc <_vfiprintf_r+0x13c>
 8014ab0:	9a07      	ldr	r2, [sp, #28]
 8014ab2:	4654      	mov	r4, sl
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	f04f 0c0a 	mov.w	ip, #10
 8014aba:	4621      	mov	r1, r4
 8014abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ac0:	3b30      	subs	r3, #48	; 0x30
 8014ac2:	2b09      	cmp	r3, #9
 8014ac4:	d94e      	bls.n	8014b64 <_vfiprintf_r+0x1c4>
 8014ac6:	b1b0      	cbz	r0, 8014af6 <_vfiprintf_r+0x156>
 8014ac8:	9207      	str	r2, [sp, #28]
 8014aca:	e014      	b.n	8014af6 <_vfiprintf_r+0x156>
 8014acc:	eba0 0308 	sub.w	r3, r0, r8
 8014ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ad4:	4313      	orrs	r3, r2
 8014ad6:	9304      	str	r3, [sp, #16]
 8014ad8:	46a2      	mov	sl, r4
 8014ada:	e7d2      	b.n	8014a82 <_vfiprintf_r+0xe2>
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	1d19      	adds	r1, r3, #4
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	9103      	str	r1, [sp, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	bfbb      	ittet	lt
 8014ae8:	425b      	neglt	r3, r3
 8014aea:	f042 0202 	orrlt.w	r2, r2, #2
 8014aee:	9307      	strge	r3, [sp, #28]
 8014af0:	9307      	strlt	r3, [sp, #28]
 8014af2:	bfb8      	it	lt
 8014af4:	9204      	strlt	r2, [sp, #16]
 8014af6:	7823      	ldrb	r3, [r4, #0]
 8014af8:	2b2e      	cmp	r3, #46	; 0x2e
 8014afa:	d10c      	bne.n	8014b16 <_vfiprintf_r+0x176>
 8014afc:	7863      	ldrb	r3, [r4, #1]
 8014afe:	2b2a      	cmp	r3, #42	; 0x2a
 8014b00:	d135      	bne.n	8014b6e <_vfiprintf_r+0x1ce>
 8014b02:	9b03      	ldr	r3, [sp, #12]
 8014b04:	1d1a      	adds	r2, r3, #4
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	9203      	str	r2, [sp, #12]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	bfb8      	it	lt
 8014b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b12:	3402      	adds	r4, #2
 8014b14:	9305      	str	r3, [sp, #20]
 8014b16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014bfc <_vfiprintf_r+0x25c>
 8014b1a:	7821      	ldrb	r1, [r4, #0]
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	4650      	mov	r0, sl
 8014b20:	f7eb fb5e 	bl	80001e0 <memchr>
 8014b24:	b140      	cbz	r0, 8014b38 <_vfiprintf_r+0x198>
 8014b26:	2340      	movs	r3, #64	; 0x40
 8014b28:	eba0 000a 	sub.w	r0, r0, sl
 8014b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8014b30:	9b04      	ldr	r3, [sp, #16]
 8014b32:	4303      	orrs	r3, r0
 8014b34:	3401      	adds	r4, #1
 8014b36:	9304      	str	r3, [sp, #16]
 8014b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b3c:	482c      	ldr	r0, [pc, #176]	; (8014bf0 <_vfiprintf_r+0x250>)
 8014b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b42:	2206      	movs	r2, #6
 8014b44:	f7eb fb4c 	bl	80001e0 <memchr>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	d03f      	beq.n	8014bcc <_vfiprintf_r+0x22c>
 8014b4c:	4b29      	ldr	r3, [pc, #164]	; (8014bf4 <_vfiprintf_r+0x254>)
 8014b4e:	bb1b      	cbnz	r3, 8014b98 <_vfiprintf_r+0x1f8>
 8014b50:	9b03      	ldr	r3, [sp, #12]
 8014b52:	3307      	adds	r3, #7
 8014b54:	f023 0307 	bic.w	r3, r3, #7
 8014b58:	3308      	adds	r3, #8
 8014b5a:	9303      	str	r3, [sp, #12]
 8014b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b5e:	443b      	add	r3, r7
 8014b60:	9309      	str	r3, [sp, #36]	; 0x24
 8014b62:	e767      	b.n	8014a34 <_vfiprintf_r+0x94>
 8014b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b68:	460c      	mov	r4, r1
 8014b6a:	2001      	movs	r0, #1
 8014b6c:	e7a5      	b.n	8014aba <_vfiprintf_r+0x11a>
 8014b6e:	2300      	movs	r3, #0
 8014b70:	3401      	adds	r4, #1
 8014b72:	9305      	str	r3, [sp, #20]
 8014b74:	4619      	mov	r1, r3
 8014b76:	f04f 0c0a 	mov.w	ip, #10
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b80:	3a30      	subs	r2, #48	; 0x30
 8014b82:	2a09      	cmp	r2, #9
 8014b84:	d903      	bls.n	8014b8e <_vfiprintf_r+0x1ee>
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d0c5      	beq.n	8014b16 <_vfiprintf_r+0x176>
 8014b8a:	9105      	str	r1, [sp, #20]
 8014b8c:	e7c3      	b.n	8014b16 <_vfiprintf_r+0x176>
 8014b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b92:	4604      	mov	r4, r0
 8014b94:	2301      	movs	r3, #1
 8014b96:	e7f0      	b.n	8014b7a <_vfiprintf_r+0x1da>
 8014b98:	ab03      	add	r3, sp, #12
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	462a      	mov	r2, r5
 8014b9e:	4b16      	ldr	r3, [pc, #88]	; (8014bf8 <_vfiprintf_r+0x258>)
 8014ba0:	a904      	add	r1, sp, #16
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	f3af 8000 	nop.w
 8014ba8:	4607      	mov	r7, r0
 8014baa:	1c78      	adds	r0, r7, #1
 8014bac:	d1d6      	bne.n	8014b5c <_vfiprintf_r+0x1bc>
 8014bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bb0:	07d9      	lsls	r1, r3, #31
 8014bb2:	d405      	bmi.n	8014bc0 <_vfiprintf_r+0x220>
 8014bb4:	89ab      	ldrh	r3, [r5, #12]
 8014bb6:	059a      	lsls	r2, r3, #22
 8014bb8:	d402      	bmi.n	8014bc0 <_vfiprintf_r+0x220>
 8014bba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bbc:	f7ff fddd 	bl	801477a <__retarget_lock_release_recursive>
 8014bc0:	89ab      	ldrh	r3, [r5, #12]
 8014bc2:	065b      	lsls	r3, r3, #25
 8014bc4:	f53f af12 	bmi.w	80149ec <_vfiprintf_r+0x4c>
 8014bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bca:	e711      	b.n	80149f0 <_vfiprintf_r+0x50>
 8014bcc:	ab03      	add	r3, sp, #12
 8014bce:	9300      	str	r3, [sp, #0]
 8014bd0:	462a      	mov	r2, r5
 8014bd2:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <_vfiprintf_r+0x258>)
 8014bd4:	a904      	add	r1, sp, #16
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	f000 f880 	bl	8014cdc <_printf_i>
 8014bdc:	e7e4      	b.n	8014ba8 <_vfiprintf_r+0x208>
 8014bde:	bf00      	nop
 8014be0:	080192ac 	.word	0x080192ac
 8014be4:	080192cc 	.word	0x080192cc
 8014be8:	0801928c 	.word	0x0801928c
 8014bec:	080192ec 	.word	0x080192ec
 8014bf0:	080192f6 	.word	0x080192f6
 8014bf4:	00000000 	.word	0x00000000
 8014bf8:	0801497b 	.word	0x0801497b
 8014bfc:	080192f2 	.word	0x080192f2

08014c00 <_printf_common>:
 8014c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c04:	4616      	mov	r6, r2
 8014c06:	4699      	mov	r9, r3
 8014c08:	688a      	ldr	r2, [r1, #8]
 8014c0a:	690b      	ldr	r3, [r1, #16]
 8014c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c10:	4293      	cmp	r3, r2
 8014c12:	bfb8      	it	lt
 8014c14:	4613      	movlt	r3, r2
 8014c16:	6033      	str	r3, [r6, #0]
 8014c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c1c:	4607      	mov	r7, r0
 8014c1e:	460c      	mov	r4, r1
 8014c20:	b10a      	cbz	r2, 8014c26 <_printf_common+0x26>
 8014c22:	3301      	adds	r3, #1
 8014c24:	6033      	str	r3, [r6, #0]
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	0699      	lsls	r1, r3, #26
 8014c2a:	bf42      	ittt	mi
 8014c2c:	6833      	ldrmi	r3, [r6, #0]
 8014c2e:	3302      	addmi	r3, #2
 8014c30:	6033      	strmi	r3, [r6, #0]
 8014c32:	6825      	ldr	r5, [r4, #0]
 8014c34:	f015 0506 	ands.w	r5, r5, #6
 8014c38:	d106      	bne.n	8014c48 <_printf_common+0x48>
 8014c3a:	f104 0a19 	add.w	sl, r4, #25
 8014c3e:	68e3      	ldr	r3, [r4, #12]
 8014c40:	6832      	ldr	r2, [r6, #0]
 8014c42:	1a9b      	subs	r3, r3, r2
 8014c44:	42ab      	cmp	r3, r5
 8014c46:	dc26      	bgt.n	8014c96 <_printf_common+0x96>
 8014c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c4c:	1e13      	subs	r3, r2, #0
 8014c4e:	6822      	ldr	r2, [r4, #0]
 8014c50:	bf18      	it	ne
 8014c52:	2301      	movne	r3, #1
 8014c54:	0692      	lsls	r2, r2, #26
 8014c56:	d42b      	bmi.n	8014cb0 <_printf_common+0xb0>
 8014c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c5c:	4649      	mov	r1, r9
 8014c5e:	4638      	mov	r0, r7
 8014c60:	47c0      	blx	r8
 8014c62:	3001      	adds	r0, #1
 8014c64:	d01e      	beq.n	8014ca4 <_printf_common+0xa4>
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	68e5      	ldr	r5, [r4, #12]
 8014c6a:	6832      	ldr	r2, [r6, #0]
 8014c6c:	f003 0306 	and.w	r3, r3, #6
 8014c70:	2b04      	cmp	r3, #4
 8014c72:	bf08      	it	eq
 8014c74:	1aad      	subeq	r5, r5, r2
 8014c76:	68a3      	ldr	r3, [r4, #8]
 8014c78:	6922      	ldr	r2, [r4, #16]
 8014c7a:	bf0c      	ite	eq
 8014c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c80:	2500      	movne	r5, #0
 8014c82:	4293      	cmp	r3, r2
 8014c84:	bfc4      	itt	gt
 8014c86:	1a9b      	subgt	r3, r3, r2
 8014c88:	18ed      	addgt	r5, r5, r3
 8014c8a:	2600      	movs	r6, #0
 8014c8c:	341a      	adds	r4, #26
 8014c8e:	42b5      	cmp	r5, r6
 8014c90:	d11a      	bne.n	8014cc8 <_printf_common+0xc8>
 8014c92:	2000      	movs	r0, #0
 8014c94:	e008      	b.n	8014ca8 <_printf_common+0xa8>
 8014c96:	2301      	movs	r3, #1
 8014c98:	4652      	mov	r2, sl
 8014c9a:	4649      	mov	r1, r9
 8014c9c:	4638      	mov	r0, r7
 8014c9e:	47c0      	blx	r8
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	d103      	bne.n	8014cac <_printf_common+0xac>
 8014ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cac:	3501      	adds	r5, #1
 8014cae:	e7c6      	b.n	8014c3e <_printf_common+0x3e>
 8014cb0:	18e1      	adds	r1, r4, r3
 8014cb2:	1c5a      	adds	r2, r3, #1
 8014cb4:	2030      	movs	r0, #48	; 0x30
 8014cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014cba:	4422      	add	r2, r4
 8014cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014cc4:	3302      	adds	r3, #2
 8014cc6:	e7c7      	b.n	8014c58 <_printf_common+0x58>
 8014cc8:	2301      	movs	r3, #1
 8014cca:	4622      	mov	r2, r4
 8014ccc:	4649      	mov	r1, r9
 8014cce:	4638      	mov	r0, r7
 8014cd0:	47c0      	blx	r8
 8014cd2:	3001      	adds	r0, #1
 8014cd4:	d0e6      	beq.n	8014ca4 <_printf_common+0xa4>
 8014cd6:	3601      	adds	r6, #1
 8014cd8:	e7d9      	b.n	8014c8e <_printf_common+0x8e>
	...

08014cdc <_printf_i>:
 8014cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce0:	7e0f      	ldrb	r7, [r1, #24]
 8014ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014ce4:	2f78      	cmp	r7, #120	; 0x78
 8014ce6:	4691      	mov	r9, r2
 8014ce8:	4680      	mov	r8, r0
 8014cea:	460c      	mov	r4, r1
 8014cec:	469a      	mov	sl, r3
 8014cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014cf2:	d807      	bhi.n	8014d04 <_printf_i+0x28>
 8014cf4:	2f62      	cmp	r7, #98	; 0x62
 8014cf6:	d80a      	bhi.n	8014d0e <_printf_i+0x32>
 8014cf8:	2f00      	cmp	r7, #0
 8014cfa:	f000 80d8 	beq.w	8014eae <_printf_i+0x1d2>
 8014cfe:	2f58      	cmp	r7, #88	; 0x58
 8014d00:	f000 80a3 	beq.w	8014e4a <_printf_i+0x16e>
 8014d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d0c:	e03a      	b.n	8014d84 <_printf_i+0xa8>
 8014d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d12:	2b15      	cmp	r3, #21
 8014d14:	d8f6      	bhi.n	8014d04 <_printf_i+0x28>
 8014d16:	a101      	add	r1, pc, #4	; (adr r1, 8014d1c <_printf_i+0x40>)
 8014d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d1c:	08014d75 	.word	0x08014d75
 8014d20:	08014d89 	.word	0x08014d89
 8014d24:	08014d05 	.word	0x08014d05
 8014d28:	08014d05 	.word	0x08014d05
 8014d2c:	08014d05 	.word	0x08014d05
 8014d30:	08014d05 	.word	0x08014d05
 8014d34:	08014d89 	.word	0x08014d89
 8014d38:	08014d05 	.word	0x08014d05
 8014d3c:	08014d05 	.word	0x08014d05
 8014d40:	08014d05 	.word	0x08014d05
 8014d44:	08014d05 	.word	0x08014d05
 8014d48:	08014e95 	.word	0x08014e95
 8014d4c:	08014db9 	.word	0x08014db9
 8014d50:	08014e77 	.word	0x08014e77
 8014d54:	08014d05 	.word	0x08014d05
 8014d58:	08014d05 	.word	0x08014d05
 8014d5c:	08014eb7 	.word	0x08014eb7
 8014d60:	08014d05 	.word	0x08014d05
 8014d64:	08014db9 	.word	0x08014db9
 8014d68:	08014d05 	.word	0x08014d05
 8014d6c:	08014d05 	.word	0x08014d05
 8014d70:	08014e7f 	.word	0x08014e7f
 8014d74:	682b      	ldr	r3, [r5, #0]
 8014d76:	1d1a      	adds	r2, r3, #4
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	602a      	str	r2, [r5, #0]
 8014d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d84:	2301      	movs	r3, #1
 8014d86:	e0a3      	b.n	8014ed0 <_printf_i+0x1f4>
 8014d88:	6820      	ldr	r0, [r4, #0]
 8014d8a:	6829      	ldr	r1, [r5, #0]
 8014d8c:	0606      	lsls	r6, r0, #24
 8014d8e:	f101 0304 	add.w	r3, r1, #4
 8014d92:	d50a      	bpl.n	8014daa <_printf_i+0xce>
 8014d94:	680e      	ldr	r6, [r1, #0]
 8014d96:	602b      	str	r3, [r5, #0]
 8014d98:	2e00      	cmp	r6, #0
 8014d9a:	da03      	bge.n	8014da4 <_printf_i+0xc8>
 8014d9c:	232d      	movs	r3, #45	; 0x2d
 8014d9e:	4276      	negs	r6, r6
 8014da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014da4:	485e      	ldr	r0, [pc, #376]	; (8014f20 <_printf_i+0x244>)
 8014da6:	230a      	movs	r3, #10
 8014da8:	e019      	b.n	8014dde <_printf_i+0x102>
 8014daa:	680e      	ldr	r6, [r1, #0]
 8014dac:	602b      	str	r3, [r5, #0]
 8014dae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014db2:	bf18      	it	ne
 8014db4:	b236      	sxthne	r6, r6
 8014db6:	e7ef      	b.n	8014d98 <_printf_i+0xbc>
 8014db8:	682b      	ldr	r3, [r5, #0]
 8014dba:	6820      	ldr	r0, [r4, #0]
 8014dbc:	1d19      	adds	r1, r3, #4
 8014dbe:	6029      	str	r1, [r5, #0]
 8014dc0:	0601      	lsls	r1, r0, #24
 8014dc2:	d501      	bpl.n	8014dc8 <_printf_i+0xec>
 8014dc4:	681e      	ldr	r6, [r3, #0]
 8014dc6:	e002      	b.n	8014dce <_printf_i+0xf2>
 8014dc8:	0646      	lsls	r6, r0, #25
 8014dca:	d5fb      	bpl.n	8014dc4 <_printf_i+0xe8>
 8014dcc:	881e      	ldrh	r6, [r3, #0]
 8014dce:	4854      	ldr	r0, [pc, #336]	; (8014f20 <_printf_i+0x244>)
 8014dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8014dd2:	bf0c      	ite	eq
 8014dd4:	2308      	moveq	r3, #8
 8014dd6:	230a      	movne	r3, #10
 8014dd8:	2100      	movs	r1, #0
 8014dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014dde:	6865      	ldr	r5, [r4, #4]
 8014de0:	60a5      	str	r5, [r4, #8]
 8014de2:	2d00      	cmp	r5, #0
 8014de4:	bfa2      	ittt	ge
 8014de6:	6821      	ldrge	r1, [r4, #0]
 8014de8:	f021 0104 	bicge.w	r1, r1, #4
 8014dec:	6021      	strge	r1, [r4, #0]
 8014dee:	b90e      	cbnz	r6, 8014df4 <_printf_i+0x118>
 8014df0:	2d00      	cmp	r5, #0
 8014df2:	d04d      	beq.n	8014e90 <_printf_i+0x1b4>
 8014df4:	4615      	mov	r5, r2
 8014df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8014dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8014dfe:	5dc7      	ldrb	r7, [r0, r7]
 8014e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014e04:	4637      	mov	r7, r6
 8014e06:	42bb      	cmp	r3, r7
 8014e08:	460e      	mov	r6, r1
 8014e0a:	d9f4      	bls.n	8014df6 <_printf_i+0x11a>
 8014e0c:	2b08      	cmp	r3, #8
 8014e0e:	d10b      	bne.n	8014e28 <_printf_i+0x14c>
 8014e10:	6823      	ldr	r3, [r4, #0]
 8014e12:	07de      	lsls	r6, r3, #31
 8014e14:	d508      	bpl.n	8014e28 <_printf_i+0x14c>
 8014e16:	6923      	ldr	r3, [r4, #16]
 8014e18:	6861      	ldr	r1, [r4, #4]
 8014e1a:	4299      	cmp	r1, r3
 8014e1c:	bfde      	ittt	le
 8014e1e:	2330      	movle	r3, #48	; 0x30
 8014e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014e28:	1b52      	subs	r2, r2, r5
 8014e2a:	6122      	str	r2, [r4, #16]
 8014e2c:	f8cd a000 	str.w	sl, [sp]
 8014e30:	464b      	mov	r3, r9
 8014e32:	aa03      	add	r2, sp, #12
 8014e34:	4621      	mov	r1, r4
 8014e36:	4640      	mov	r0, r8
 8014e38:	f7ff fee2 	bl	8014c00 <_printf_common>
 8014e3c:	3001      	adds	r0, #1
 8014e3e:	d14c      	bne.n	8014eda <_printf_i+0x1fe>
 8014e40:	f04f 30ff 	mov.w	r0, #4294967295
 8014e44:	b004      	add	sp, #16
 8014e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e4a:	4835      	ldr	r0, [pc, #212]	; (8014f20 <_printf_i+0x244>)
 8014e4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014e50:	6829      	ldr	r1, [r5, #0]
 8014e52:	6823      	ldr	r3, [r4, #0]
 8014e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8014e58:	6029      	str	r1, [r5, #0]
 8014e5a:	061d      	lsls	r5, r3, #24
 8014e5c:	d514      	bpl.n	8014e88 <_printf_i+0x1ac>
 8014e5e:	07df      	lsls	r7, r3, #31
 8014e60:	bf44      	itt	mi
 8014e62:	f043 0320 	orrmi.w	r3, r3, #32
 8014e66:	6023      	strmi	r3, [r4, #0]
 8014e68:	b91e      	cbnz	r6, 8014e72 <_printf_i+0x196>
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	f023 0320 	bic.w	r3, r3, #32
 8014e70:	6023      	str	r3, [r4, #0]
 8014e72:	2310      	movs	r3, #16
 8014e74:	e7b0      	b.n	8014dd8 <_printf_i+0xfc>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	f043 0320 	orr.w	r3, r3, #32
 8014e7c:	6023      	str	r3, [r4, #0]
 8014e7e:	2378      	movs	r3, #120	; 0x78
 8014e80:	4828      	ldr	r0, [pc, #160]	; (8014f24 <_printf_i+0x248>)
 8014e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e86:	e7e3      	b.n	8014e50 <_printf_i+0x174>
 8014e88:	0659      	lsls	r1, r3, #25
 8014e8a:	bf48      	it	mi
 8014e8c:	b2b6      	uxthmi	r6, r6
 8014e8e:	e7e6      	b.n	8014e5e <_printf_i+0x182>
 8014e90:	4615      	mov	r5, r2
 8014e92:	e7bb      	b.n	8014e0c <_printf_i+0x130>
 8014e94:	682b      	ldr	r3, [r5, #0]
 8014e96:	6826      	ldr	r6, [r4, #0]
 8014e98:	6961      	ldr	r1, [r4, #20]
 8014e9a:	1d18      	adds	r0, r3, #4
 8014e9c:	6028      	str	r0, [r5, #0]
 8014e9e:	0635      	lsls	r5, r6, #24
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	d501      	bpl.n	8014ea8 <_printf_i+0x1cc>
 8014ea4:	6019      	str	r1, [r3, #0]
 8014ea6:	e002      	b.n	8014eae <_printf_i+0x1d2>
 8014ea8:	0670      	lsls	r0, r6, #25
 8014eaa:	d5fb      	bpl.n	8014ea4 <_printf_i+0x1c8>
 8014eac:	8019      	strh	r1, [r3, #0]
 8014eae:	2300      	movs	r3, #0
 8014eb0:	6123      	str	r3, [r4, #16]
 8014eb2:	4615      	mov	r5, r2
 8014eb4:	e7ba      	b.n	8014e2c <_printf_i+0x150>
 8014eb6:	682b      	ldr	r3, [r5, #0]
 8014eb8:	1d1a      	adds	r2, r3, #4
 8014eba:	602a      	str	r2, [r5, #0]
 8014ebc:	681d      	ldr	r5, [r3, #0]
 8014ebe:	6862      	ldr	r2, [r4, #4]
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	f7eb f98c 	bl	80001e0 <memchr>
 8014ec8:	b108      	cbz	r0, 8014ece <_printf_i+0x1f2>
 8014eca:	1b40      	subs	r0, r0, r5
 8014ecc:	6060      	str	r0, [r4, #4]
 8014ece:	6863      	ldr	r3, [r4, #4]
 8014ed0:	6123      	str	r3, [r4, #16]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ed8:	e7a8      	b.n	8014e2c <_printf_i+0x150>
 8014eda:	6923      	ldr	r3, [r4, #16]
 8014edc:	462a      	mov	r2, r5
 8014ede:	4649      	mov	r1, r9
 8014ee0:	4640      	mov	r0, r8
 8014ee2:	47d0      	blx	sl
 8014ee4:	3001      	adds	r0, #1
 8014ee6:	d0ab      	beq.n	8014e40 <_printf_i+0x164>
 8014ee8:	6823      	ldr	r3, [r4, #0]
 8014eea:	079b      	lsls	r3, r3, #30
 8014eec:	d413      	bmi.n	8014f16 <_printf_i+0x23a>
 8014eee:	68e0      	ldr	r0, [r4, #12]
 8014ef0:	9b03      	ldr	r3, [sp, #12]
 8014ef2:	4298      	cmp	r0, r3
 8014ef4:	bfb8      	it	lt
 8014ef6:	4618      	movlt	r0, r3
 8014ef8:	e7a4      	b.n	8014e44 <_printf_i+0x168>
 8014efa:	2301      	movs	r3, #1
 8014efc:	4632      	mov	r2, r6
 8014efe:	4649      	mov	r1, r9
 8014f00:	4640      	mov	r0, r8
 8014f02:	47d0      	blx	sl
 8014f04:	3001      	adds	r0, #1
 8014f06:	d09b      	beq.n	8014e40 <_printf_i+0x164>
 8014f08:	3501      	adds	r5, #1
 8014f0a:	68e3      	ldr	r3, [r4, #12]
 8014f0c:	9903      	ldr	r1, [sp, #12]
 8014f0e:	1a5b      	subs	r3, r3, r1
 8014f10:	42ab      	cmp	r3, r5
 8014f12:	dcf2      	bgt.n	8014efa <_printf_i+0x21e>
 8014f14:	e7eb      	b.n	8014eee <_printf_i+0x212>
 8014f16:	2500      	movs	r5, #0
 8014f18:	f104 0619 	add.w	r6, r4, #25
 8014f1c:	e7f5      	b.n	8014f0a <_printf_i+0x22e>
 8014f1e:	bf00      	nop
 8014f20:	080192fd 	.word	0x080192fd
 8014f24:	0801930e 	.word	0x0801930e

08014f28 <_sbrk_r>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	4d06      	ldr	r5, [pc, #24]	; (8014f44 <_sbrk_r+0x1c>)
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	4604      	mov	r4, r0
 8014f30:	4608      	mov	r0, r1
 8014f32:	602b      	str	r3, [r5, #0]
 8014f34:	f7eb fde6 	bl	8000b04 <_sbrk>
 8014f38:	1c43      	adds	r3, r0, #1
 8014f3a:	d102      	bne.n	8014f42 <_sbrk_r+0x1a>
 8014f3c:	682b      	ldr	r3, [r5, #0]
 8014f3e:	b103      	cbz	r3, 8014f42 <_sbrk_r+0x1a>
 8014f40:	6023      	str	r3, [r4, #0]
 8014f42:	bd38      	pop	{r3, r4, r5, pc}
 8014f44:	2000ffa4 	.word	0x2000ffa4

08014f48 <__sread>:
 8014f48:	b510      	push	{r4, lr}
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f50:	f000 fa6e 	bl	8015430 <_read_r>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	bfab      	itete	ge
 8014f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8014f5c:	181b      	addge	r3, r3, r0
 8014f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f62:	bfac      	ite	ge
 8014f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f66:	81a3      	strhlt	r3, [r4, #12]
 8014f68:	bd10      	pop	{r4, pc}

08014f6a <__swrite>:
 8014f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6e:	461f      	mov	r7, r3
 8014f70:	898b      	ldrh	r3, [r1, #12]
 8014f72:	05db      	lsls	r3, r3, #23
 8014f74:	4605      	mov	r5, r0
 8014f76:	460c      	mov	r4, r1
 8014f78:	4616      	mov	r6, r2
 8014f7a:	d505      	bpl.n	8014f88 <__swrite+0x1e>
 8014f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f80:	2302      	movs	r3, #2
 8014f82:	2200      	movs	r2, #0
 8014f84:	f000 f9d0 	bl	8015328 <_lseek_r>
 8014f88:	89a3      	ldrh	r3, [r4, #12]
 8014f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f92:	81a3      	strh	r3, [r4, #12]
 8014f94:	4632      	mov	r2, r6
 8014f96:	463b      	mov	r3, r7
 8014f98:	4628      	mov	r0, r5
 8014f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9e:	f000 b869 	b.w	8015074 <_write_r>

08014fa2 <__sseek>:
 8014fa2:	b510      	push	{r4, lr}
 8014fa4:	460c      	mov	r4, r1
 8014fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014faa:	f000 f9bd 	bl	8015328 <_lseek_r>
 8014fae:	1c43      	adds	r3, r0, #1
 8014fb0:	89a3      	ldrh	r3, [r4, #12]
 8014fb2:	bf15      	itete	ne
 8014fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014fbe:	81a3      	strheq	r3, [r4, #12]
 8014fc0:	bf18      	it	ne
 8014fc2:	81a3      	strhne	r3, [r4, #12]
 8014fc4:	bd10      	pop	{r4, pc}

08014fc6 <__sclose>:
 8014fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fca:	f000 b8db 	b.w	8015184 <_close_r>
	...

08014fd0 <__swbuf_r>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	460e      	mov	r6, r1
 8014fd4:	4614      	mov	r4, r2
 8014fd6:	4605      	mov	r5, r0
 8014fd8:	b118      	cbz	r0, 8014fe2 <__swbuf_r+0x12>
 8014fda:	6983      	ldr	r3, [r0, #24]
 8014fdc:	b90b      	cbnz	r3, 8014fe2 <__swbuf_r+0x12>
 8014fde:	f7ff fb1b 	bl	8014618 <__sinit>
 8014fe2:	4b21      	ldr	r3, [pc, #132]	; (8015068 <__swbuf_r+0x98>)
 8014fe4:	429c      	cmp	r4, r3
 8014fe6:	d12b      	bne.n	8015040 <__swbuf_r+0x70>
 8014fe8:	686c      	ldr	r4, [r5, #4]
 8014fea:	69a3      	ldr	r3, [r4, #24]
 8014fec:	60a3      	str	r3, [r4, #8]
 8014fee:	89a3      	ldrh	r3, [r4, #12]
 8014ff0:	071a      	lsls	r2, r3, #28
 8014ff2:	d52f      	bpl.n	8015054 <__swbuf_r+0x84>
 8014ff4:	6923      	ldr	r3, [r4, #16]
 8014ff6:	b36b      	cbz	r3, 8015054 <__swbuf_r+0x84>
 8014ff8:	6923      	ldr	r3, [r4, #16]
 8014ffa:	6820      	ldr	r0, [r4, #0]
 8014ffc:	1ac0      	subs	r0, r0, r3
 8014ffe:	6963      	ldr	r3, [r4, #20]
 8015000:	b2f6      	uxtb	r6, r6
 8015002:	4283      	cmp	r3, r0
 8015004:	4637      	mov	r7, r6
 8015006:	dc04      	bgt.n	8015012 <__swbuf_r+0x42>
 8015008:	4621      	mov	r1, r4
 801500a:	4628      	mov	r0, r5
 801500c:	f000 f950 	bl	80152b0 <_fflush_r>
 8015010:	bb30      	cbnz	r0, 8015060 <__swbuf_r+0x90>
 8015012:	68a3      	ldr	r3, [r4, #8]
 8015014:	3b01      	subs	r3, #1
 8015016:	60a3      	str	r3, [r4, #8]
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	6022      	str	r2, [r4, #0]
 801501e:	701e      	strb	r6, [r3, #0]
 8015020:	6963      	ldr	r3, [r4, #20]
 8015022:	3001      	adds	r0, #1
 8015024:	4283      	cmp	r3, r0
 8015026:	d004      	beq.n	8015032 <__swbuf_r+0x62>
 8015028:	89a3      	ldrh	r3, [r4, #12]
 801502a:	07db      	lsls	r3, r3, #31
 801502c:	d506      	bpl.n	801503c <__swbuf_r+0x6c>
 801502e:	2e0a      	cmp	r6, #10
 8015030:	d104      	bne.n	801503c <__swbuf_r+0x6c>
 8015032:	4621      	mov	r1, r4
 8015034:	4628      	mov	r0, r5
 8015036:	f000 f93b 	bl	80152b0 <_fflush_r>
 801503a:	b988      	cbnz	r0, 8015060 <__swbuf_r+0x90>
 801503c:	4638      	mov	r0, r7
 801503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015040:	4b0a      	ldr	r3, [pc, #40]	; (801506c <__swbuf_r+0x9c>)
 8015042:	429c      	cmp	r4, r3
 8015044:	d101      	bne.n	801504a <__swbuf_r+0x7a>
 8015046:	68ac      	ldr	r4, [r5, #8]
 8015048:	e7cf      	b.n	8014fea <__swbuf_r+0x1a>
 801504a:	4b09      	ldr	r3, [pc, #36]	; (8015070 <__swbuf_r+0xa0>)
 801504c:	429c      	cmp	r4, r3
 801504e:	bf08      	it	eq
 8015050:	68ec      	ldreq	r4, [r5, #12]
 8015052:	e7ca      	b.n	8014fea <__swbuf_r+0x1a>
 8015054:	4621      	mov	r1, r4
 8015056:	4628      	mov	r0, r5
 8015058:	f000 f81e 	bl	8015098 <__swsetup_r>
 801505c:	2800      	cmp	r0, #0
 801505e:	d0cb      	beq.n	8014ff8 <__swbuf_r+0x28>
 8015060:	f04f 37ff 	mov.w	r7, #4294967295
 8015064:	e7ea      	b.n	801503c <__swbuf_r+0x6c>
 8015066:	bf00      	nop
 8015068:	080192ac 	.word	0x080192ac
 801506c:	080192cc 	.word	0x080192cc
 8015070:	0801928c 	.word	0x0801928c

08015074 <_write_r>:
 8015074:	b538      	push	{r3, r4, r5, lr}
 8015076:	4d07      	ldr	r5, [pc, #28]	; (8015094 <_write_r+0x20>)
 8015078:	4604      	mov	r4, r0
 801507a:	4608      	mov	r0, r1
 801507c:	4611      	mov	r1, r2
 801507e:	2200      	movs	r2, #0
 8015080:	602a      	str	r2, [r5, #0]
 8015082:	461a      	mov	r2, r3
 8015084:	f7eb fced 	bl	8000a62 <_write>
 8015088:	1c43      	adds	r3, r0, #1
 801508a:	d102      	bne.n	8015092 <_write_r+0x1e>
 801508c:	682b      	ldr	r3, [r5, #0]
 801508e:	b103      	cbz	r3, 8015092 <_write_r+0x1e>
 8015090:	6023      	str	r3, [r4, #0]
 8015092:	bd38      	pop	{r3, r4, r5, pc}
 8015094:	2000ffa4 	.word	0x2000ffa4

08015098 <__swsetup_r>:
 8015098:	4b32      	ldr	r3, [pc, #200]	; (8015164 <__swsetup_r+0xcc>)
 801509a:	b570      	push	{r4, r5, r6, lr}
 801509c:	681d      	ldr	r5, [r3, #0]
 801509e:	4606      	mov	r6, r0
 80150a0:	460c      	mov	r4, r1
 80150a2:	b125      	cbz	r5, 80150ae <__swsetup_r+0x16>
 80150a4:	69ab      	ldr	r3, [r5, #24]
 80150a6:	b913      	cbnz	r3, 80150ae <__swsetup_r+0x16>
 80150a8:	4628      	mov	r0, r5
 80150aa:	f7ff fab5 	bl	8014618 <__sinit>
 80150ae:	4b2e      	ldr	r3, [pc, #184]	; (8015168 <__swsetup_r+0xd0>)
 80150b0:	429c      	cmp	r4, r3
 80150b2:	d10f      	bne.n	80150d4 <__swsetup_r+0x3c>
 80150b4:	686c      	ldr	r4, [r5, #4]
 80150b6:	89a3      	ldrh	r3, [r4, #12]
 80150b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80150bc:	0719      	lsls	r1, r3, #28
 80150be:	d42c      	bmi.n	801511a <__swsetup_r+0x82>
 80150c0:	06dd      	lsls	r5, r3, #27
 80150c2:	d411      	bmi.n	80150e8 <__swsetup_r+0x50>
 80150c4:	2309      	movs	r3, #9
 80150c6:	6033      	str	r3, [r6, #0]
 80150c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80150cc:	81a3      	strh	r3, [r4, #12]
 80150ce:	f04f 30ff 	mov.w	r0, #4294967295
 80150d2:	e03e      	b.n	8015152 <__swsetup_r+0xba>
 80150d4:	4b25      	ldr	r3, [pc, #148]	; (801516c <__swsetup_r+0xd4>)
 80150d6:	429c      	cmp	r4, r3
 80150d8:	d101      	bne.n	80150de <__swsetup_r+0x46>
 80150da:	68ac      	ldr	r4, [r5, #8]
 80150dc:	e7eb      	b.n	80150b6 <__swsetup_r+0x1e>
 80150de:	4b24      	ldr	r3, [pc, #144]	; (8015170 <__swsetup_r+0xd8>)
 80150e0:	429c      	cmp	r4, r3
 80150e2:	bf08      	it	eq
 80150e4:	68ec      	ldreq	r4, [r5, #12]
 80150e6:	e7e6      	b.n	80150b6 <__swsetup_r+0x1e>
 80150e8:	0758      	lsls	r0, r3, #29
 80150ea:	d512      	bpl.n	8015112 <__swsetup_r+0x7a>
 80150ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150ee:	b141      	cbz	r1, 8015102 <__swsetup_r+0x6a>
 80150f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80150f4:	4299      	cmp	r1, r3
 80150f6:	d002      	beq.n	80150fe <__swsetup_r+0x66>
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7ff fb47 	bl	801478c <_free_r>
 80150fe:	2300      	movs	r3, #0
 8015100:	6363      	str	r3, [r4, #52]	; 0x34
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015108:	81a3      	strh	r3, [r4, #12]
 801510a:	2300      	movs	r3, #0
 801510c:	6063      	str	r3, [r4, #4]
 801510e:	6923      	ldr	r3, [r4, #16]
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	89a3      	ldrh	r3, [r4, #12]
 8015114:	f043 0308 	orr.w	r3, r3, #8
 8015118:	81a3      	strh	r3, [r4, #12]
 801511a:	6923      	ldr	r3, [r4, #16]
 801511c:	b94b      	cbnz	r3, 8015132 <__swsetup_r+0x9a>
 801511e:	89a3      	ldrh	r3, [r4, #12]
 8015120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015128:	d003      	beq.n	8015132 <__swsetup_r+0x9a>
 801512a:	4621      	mov	r1, r4
 801512c:	4630      	mov	r0, r6
 801512e:	f000 f933 	bl	8015398 <__smakebuf_r>
 8015132:	89a0      	ldrh	r0, [r4, #12]
 8015134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015138:	f010 0301 	ands.w	r3, r0, #1
 801513c:	d00a      	beq.n	8015154 <__swsetup_r+0xbc>
 801513e:	2300      	movs	r3, #0
 8015140:	60a3      	str	r3, [r4, #8]
 8015142:	6963      	ldr	r3, [r4, #20]
 8015144:	425b      	negs	r3, r3
 8015146:	61a3      	str	r3, [r4, #24]
 8015148:	6923      	ldr	r3, [r4, #16]
 801514a:	b943      	cbnz	r3, 801515e <__swsetup_r+0xc6>
 801514c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015150:	d1ba      	bne.n	80150c8 <__swsetup_r+0x30>
 8015152:	bd70      	pop	{r4, r5, r6, pc}
 8015154:	0781      	lsls	r1, r0, #30
 8015156:	bf58      	it	pl
 8015158:	6963      	ldrpl	r3, [r4, #20]
 801515a:	60a3      	str	r3, [r4, #8]
 801515c:	e7f4      	b.n	8015148 <__swsetup_r+0xb0>
 801515e:	2000      	movs	r0, #0
 8015160:	e7f7      	b.n	8015152 <__swsetup_r+0xba>
 8015162:	bf00      	nop
 8015164:	2000001c 	.word	0x2000001c
 8015168:	080192ac 	.word	0x080192ac
 801516c:	080192cc 	.word	0x080192cc
 8015170:	0801928c 	.word	0x0801928c

08015174 <abort>:
 8015174:	b508      	push	{r3, lr}
 8015176:	2006      	movs	r0, #6
 8015178:	f000 f994 	bl	80154a4 <raise>
 801517c:	2001      	movs	r0, #1
 801517e:	f7eb fc49 	bl	8000a14 <_exit>
	...

08015184 <_close_r>:
 8015184:	b538      	push	{r3, r4, r5, lr}
 8015186:	4d06      	ldr	r5, [pc, #24]	; (80151a0 <_close_r+0x1c>)
 8015188:	2300      	movs	r3, #0
 801518a:	4604      	mov	r4, r0
 801518c:	4608      	mov	r0, r1
 801518e:	602b      	str	r3, [r5, #0]
 8015190:	f7eb fc83 	bl	8000a9a <_close>
 8015194:	1c43      	adds	r3, r0, #1
 8015196:	d102      	bne.n	801519e <_close_r+0x1a>
 8015198:	682b      	ldr	r3, [r5, #0]
 801519a:	b103      	cbz	r3, 801519e <_close_r+0x1a>
 801519c:	6023      	str	r3, [r4, #0]
 801519e:	bd38      	pop	{r3, r4, r5, pc}
 80151a0:	2000ffa4 	.word	0x2000ffa4

080151a4 <__sflush_r>:
 80151a4:	898a      	ldrh	r2, [r1, #12]
 80151a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151aa:	4605      	mov	r5, r0
 80151ac:	0710      	lsls	r0, r2, #28
 80151ae:	460c      	mov	r4, r1
 80151b0:	d458      	bmi.n	8015264 <__sflush_r+0xc0>
 80151b2:	684b      	ldr	r3, [r1, #4]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dc05      	bgt.n	80151c4 <__sflush_r+0x20>
 80151b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	dc02      	bgt.n	80151c4 <__sflush_r+0x20>
 80151be:	2000      	movs	r0, #0
 80151c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151c6:	2e00      	cmp	r6, #0
 80151c8:	d0f9      	beq.n	80151be <__sflush_r+0x1a>
 80151ca:	2300      	movs	r3, #0
 80151cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151d0:	682f      	ldr	r7, [r5, #0]
 80151d2:	602b      	str	r3, [r5, #0]
 80151d4:	d032      	beq.n	801523c <__sflush_r+0x98>
 80151d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151d8:	89a3      	ldrh	r3, [r4, #12]
 80151da:	075a      	lsls	r2, r3, #29
 80151dc:	d505      	bpl.n	80151ea <__sflush_r+0x46>
 80151de:	6863      	ldr	r3, [r4, #4]
 80151e0:	1ac0      	subs	r0, r0, r3
 80151e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151e4:	b10b      	cbz	r3, 80151ea <__sflush_r+0x46>
 80151e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151e8:	1ac0      	subs	r0, r0, r3
 80151ea:	2300      	movs	r3, #0
 80151ec:	4602      	mov	r2, r0
 80151ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151f0:	6a21      	ldr	r1, [r4, #32]
 80151f2:	4628      	mov	r0, r5
 80151f4:	47b0      	blx	r6
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	89a3      	ldrh	r3, [r4, #12]
 80151fa:	d106      	bne.n	801520a <__sflush_r+0x66>
 80151fc:	6829      	ldr	r1, [r5, #0]
 80151fe:	291d      	cmp	r1, #29
 8015200:	d82c      	bhi.n	801525c <__sflush_r+0xb8>
 8015202:	4a2a      	ldr	r2, [pc, #168]	; (80152ac <__sflush_r+0x108>)
 8015204:	40ca      	lsrs	r2, r1
 8015206:	07d6      	lsls	r6, r2, #31
 8015208:	d528      	bpl.n	801525c <__sflush_r+0xb8>
 801520a:	2200      	movs	r2, #0
 801520c:	6062      	str	r2, [r4, #4]
 801520e:	04d9      	lsls	r1, r3, #19
 8015210:	6922      	ldr	r2, [r4, #16]
 8015212:	6022      	str	r2, [r4, #0]
 8015214:	d504      	bpl.n	8015220 <__sflush_r+0x7c>
 8015216:	1c42      	adds	r2, r0, #1
 8015218:	d101      	bne.n	801521e <__sflush_r+0x7a>
 801521a:	682b      	ldr	r3, [r5, #0]
 801521c:	b903      	cbnz	r3, 8015220 <__sflush_r+0x7c>
 801521e:	6560      	str	r0, [r4, #84]	; 0x54
 8015220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015222:	602f      	str	r7, [r5, #0]
 8015224:	2900      	cmp	r1, #0
 8015226:	d0ca      	beq.n	80151be <__sflush_r+0x1a>
 8015228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801522c:	4299      	cmp	r1, r3
 801522e:	d002      	beq.n	8015236 <__sflush_r+0x92>
 8015230:	4628      	mov	r0, r5
 8015232:	f7ff faab 	bl	801478c <_free_r>
 8015236:	2000      	movs	r0, #0
 8015238:	6360      	str	r0, [r4, #52]	; 0x34
 801523a:	e7c1      	b.n	80151c0 <__sflush_r+0x1c>
 801523c:	6a21      	ldr	r1, [r4, #32]
 801523e:	2301      	movs	r3, #1
 8015240:	4628      	mov	r0, r5
 8015242:	47b0      	blx	r6
 8015244:	1c41      	adds	r1, r0, #1
 8015246:	d1c7      	bne.n	80151d8 <__sflush_r+0x34>
 8015248:	682b      	ldr	r3, [r5, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d0c4      	beq.n	80151d8 <__sflush_r+0x34>
 801524e:	2b1d      	cmp	r3, #29
 8015250:	d001      	beq.n	8015256 <__sflush_r+0xb2>
 8015252:	2b16      	cmp	r3, #22
 8015254:	d101      	bne.n	801525a <__sflush_r+0xb6>
 8015256:	602f      	str	r7, [r5, #0]
 8015258:	e7b1      	b.n	80151be <__sflush_r+0x1a>
 801525a:	89a3      	ldrh	r3, [r4, #12]
 801525c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015260:	81a3      	strh	r3, [r4, #12]
 8015262:	e7ad      	b.n	80151c0 <__sflush_r+0x1c>
 8015264:	690f      	ldr	r7, [r1, #16]
 8015266:	2f00      	cmp	r7, #0
 8015268:	d0a9      	beq.n	80151be <__sflush_r+0x1a>
 801526a:	0793      	lsls	r3, r2, #30
 801526c:	680e      	ldr	r6, [r1, #0]
 801526e:	bf08      	it	eq
 8015270:	694b      	ldreq	r3, [r1, #20]
 8015272:	600f      	str	r7, [r1, #0]
 8015274:	bf18      	it	ne
 8015276:	2300      	movne	r3, #0
 8015278:	eba6 0807 	sub.w	r8, r6, r7
 801527c:	608b      	str	r3, [r1, #8]
 801527e:	f1b8 0f00 	cmp.w	r8, #0
 8015282:	dd9c      	ble.n	80151be <__sflush_r+0x1a>
 8015284:	6a21      	ldr	r1, [r4, #32]
 8015286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015288:	4643      	mov	r3, r8
 801528a:	463a      	mov	r2, r7
 801528c:	4628      	mov	r0, r5
 801528e:	47b0      	blx	r6
 8015290:	2800      	cmp	r0, #0
 8015292:	dc06      	bgt.n	80152a2 <__sflush_r+0xfe>
 8015294:	89a3      	ldrh	r3, [r4, #12]
 8015296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801529a:	81a3      	strh	r3, [r4, #12]
 801529c:	f04f 30ff 	mov.w	r0, #4294967295
 80152a0:	e78e      	b.n	80151c0 <__sflush_r+0x1c>
 80152a2:	4407      	add	r7, r0
 80152a4:	eba8 0800 	sub.w	r8, r8, r0
 80152a8:	e7e9      	b.n	801527e <__sflush_r+0xda>
 80152aa:	bf00      	nop
 80152ac:	20400001 	.word	0x20400001

080152b0 <_fflush_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	690b      	ldr	r3, [r1, #16]
 80152b4:	4605      	mov	r5, r0
 80152b6:	460c      	mov	r4, r1
 80152b8:	b913      	cbnz	r3, 80152c0 <_fflush_r+0x10>
 80152ba:	2500      	movs	r5, #0
 80152bc:	4628      	mov	r0, r5
 80152be:	bd38      	pop	{r3, r4, r5, pc}
 80152c0:	b118      	cbz	r0, 80152ca <_fflush_r+0x1a>
 80152c2:	6983      	ldr	r3, [r0, #24]
 80152c4:	b90b      	cbnz	r3, 80152ca <_fflush_r+0x1a>
 80152c6:	f7ff f9a7 	bl	8014618 <__sinit>
 80152ca:	4b14      	ldr	r3, [pc, #80]	; (801531c <_fflush_r+0x6c>)
 80152cc:	429c      	cmp	r4, r3
 80152ce:	d11b      	bne.n	8015308 <_fflush_r+0x58>
 80152d0:	686c      	ldr	r4, [r5, #4]
 80152d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d0ef      	beq.n	80152ba <_fflush_r+0xa>
 80152da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80152dc:	07d0      	lsls	r0, r2, #31
 80152de:	d404      	bmi.n	80152ea <_fflush_r+0x3a>
 80152e0:	0599      	lsls	r1, r3, #22
 80152e2:	d402      	bmi.n	80152ea <_fflush_r+0x3a>
 80152e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152e6:	f7ff fa47 	bl	8014778 <__retarget_lock_acquire_recursive>
 80152ea:	4628      	mov	r0, r5
 80152ec:	4621      	mov	r1, r4
 80152ee:	f7ff ff59 	bl	80151a4 <__sflush_r>
 80152f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152f4:	07da      	lsls	r2, r3, #31
 80152f6:	4605      	mov	r5, r0
 80152f8:	d4e0      	bmi.n	80152bc <_fflush_r+0xc>
 80152fa:	89a3      	ldrh	r3, [r4, #12]
 80152fc:	059b      	lsls	r3, r3, #22
 80152fe:	d4dd      	bmi.n	80152bc <_fflush_r+0xc>
 8015300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015302:	f7ff fa3a 	bl	801477a <__retarget_lock_release_recursive>
 8015306:	e7d9      	b.n	80152bc <_fflush_r+0xc>
 8015308:	4b05      	ldr	r3, [pc, #20]	; (8015320 <_fflush_r+0x70>)
 801530a:	429c      	cmp	r4, r3
 801530c:	d101      	bne.n	8015312 <_fflush_r+0x62>
 801530e:	68ac      	ldr	r4, [r5, #8]
 8015310:	e7df      	b.n	80152d2 <_fflush_r+0x22>
 8015312:	4b04      	ldr	r3, [pc, #16]	; (8015324 <_fflush_r+0x74>)
 8015314:	429c      	cmp	r4, r3
 8015316:	bf08      	it	eq
 8015318:	68ec      	ldreq	r4, [r5, #12]
 801531a:	e7da      	b.n	80152d2 <_fflush_r+0x22>
 801531c:	080192ac 	.word	0x080192ac
 8015320:	080192cc 	.word	0x080192cc
 8015324:	0801928c 	.word	0x0801928c

08015328 <_lseek_r>:
 8015328:	b538      	push	{r3, r4, r5, lr}
 801532a:	4d07      	ldr	r5, [pc, #28]	; (8015348 <_lseek_r+0x20>)
 801532c:	4604      	mov	r4, r0
 801532e:	4608      	mov	r0, r1
 8015330:	4611      	mov	r1, r2
 8015332:	2200      	movs	r2, #0
 8015334:	602a      	str	r2, [r5, #0]
 8015336:	461a      	mov	r2, r3
 8015338:	f7eb fbd6 	bl	8000ae8 <_lseek>
 801533c:	1c43      	adds	r3, r0, #1
 801533e:	d102      	bne.n	8015346 <_lseek_r+0x1e>
 8015340:	682b      	ldr	r3, [r5, #0]
 8015342:	b103      	cbz	r3, 8015346 <_lseek_r+0x1e>
 8015344:	6023      	str	r3, [r4, #0]
 8015346:	bd38      	pop	{r3, r4, r5, pc}
 8015348:	2000ffa4 	.word	0x2000ffa4

0801534c <__swhatbuf_r>:
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	460e      	mov	r6, r1
 8015350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015354:	2900      	cmp	r1, #0
 8015356:	b096      	sub	sp, #88	; 0x58
 8015358:	4614      	mov	r4, r2
 801535a:	461d      	mov	r5, r3
 801535c:	da08      	bge.n	8015370 <__swhatbuf_r+0x24>
 801535e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015362:	2200      	movs	r2, #0
 8015364:	602a      	str	r2, [r5, #0]
 8015366:	061a      	lsls	r2, r3, #24
 8015368:	d410      	bmi.n	801538c <__swhatbuf_r+0x40>
 801536a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801536e:	e00e      	b.n	801538e <__swhatbuf_r+0x42>
 8015370:	466a      	mov	r2, sp
 8015372:	f000 f8b3 	bl	80154dc <_fstat_r>
 8015376:	2800      	cmp	r0, #0
 8015378:	dbf1      	blt.n	801535e <__swhatbuf_r+0x12>
 801537a:	9a01      	ldr	r2, [sp, #4]
 801537c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015384:	425a      	negs	r2, r3
 8015386:	415a      	adcs	r2, r3
 8015388:	602a      	str	r2, [r5, #0]
 801538a:	e7ee      	b.n	801536a <__swhatbuf_r+0x1e>
 801538c:	2340      	movs	r3, #64	; 0x40
 801538e:	2000      	movs	r0, #0
 8015390:	6023      	str	r3, [r4, #0]
 8015392:	b016      	add	sp, #88	; 0x58
 8015394:	bd70      	pop	{r4, r5, r6, pc}
	...

08015398 <__smakebuf_r>:
 8015398:	898b      	ldrh	r3, [r1, #12]
 801539a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801539c:	079d      	lsls	r5, r3, #30
 801539e:	4606      	mov	r6, r0
 80153a0:	460c      	mov	r4, r1
 80153a2:	d507      	bpl.n	80153b4 <__smakebuf_r+0x1c>
 80153a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153a8:	6023      	str	r3, [r4, #0]
 80153aa:	6123      	str	r3, [r4, #16]
 80153ac:	2301      	movs	r3, #1
 80153ae:	6163      	str	r3, [r4, #20]
 80153b0:	b002      	add	sp, #8
 80153b2:	bd70      	pop	{r4, r5, r6, pc}
 80153b4:	ab01      	add	r3, sp, #4
 80153b6:	466a      	mov	r2, sp
 80153b8:	f7ff ffc8 	bl	801534c <__swhatbuf_r>
 80153bc:	9900      	ldr	r1, [sp, #0]
 80153be:	4605      	mov	r5, r0
 80153c0:	4630      	mov	r0, r6
 80153c2:	f7ff fa4f 	bl	8014864 <_malloc_r>
 80153c6:	b948      	cbnz	r0, 80153dc <__smakebuf_r+0x44>
 80153c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153cc:	059a      	lsls	r2, r3, #22
 80153ce:	d4ef      	bmi.n	80153b0 <__smakebuf_r+0x18>
 80153d0:	f023 0303 	bic.w	r3, r3, #3
 80153d4:	f043 0302 	orr.w	r3, r3, #2
 80153d8:	81a3      	strh	r3, [r4, #12]
 80153da:	e7e3      	b.n	80153a4 <__smakebuf_r+0xc>
 80153dc:	4b0d      	ldr	r3, [pc, #52]	; (8015414 <__smakebuf_r+0x7c>)
 80153de:	62b3      	str	r3, [r6, #40]	; 0x28
 80153e0:	89a3      	ldrh	r3, [r4, #12]
 80153e2:	6020      	str	r0, [r4, #0]
 80153e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153e8:	81a3      	strh	r3, [r4, #12]
 80153ea:	9b00      	ldr	r3, [sp, #0]
 80153ec:	6163      	str	r3, [r4, #20]
 80153ee:	9b01      	ldr	r3, [sp, #4]
 80153f0:	6120      	str	r0, [r4, #16]
 80153f2:	b15b      	cbz	r3, 801540c <__smakebuf_r+0x74>
 80153f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153f8:	4630      	mov	r0, r6
 80153fa:	f000 f881 	bl	8015500 <_isatty_r>
 80153fe:	b128      	cbz	r0, 801540c <__smakebuf_r+0x74>
 8015400:	89a3      	ldrh	r3, [r4, #12]
 8015402:	f023 0303 	bic.w	r3, r3, #3
 8015406:	f043 0301 	orr.w	r3, r3, #1
 801540a:	81a3      	strh	r3, [r4, #12]
 801540c:	89a0      	ldrh	r0, [r4, #12]
 801540e:	4305      	orrs	r5, r0
 8015410:	81a5      	strh	r5, [r4, #12]
 8015412:	e7cd      	b.n	80153b0 <__smakebuf_r+0x18>
 8015414:	080145b1 	.word	0x080145b1

08015418 <__malloc_lock>:
 8015418:	4801      	ldr	r0, [pc, #4]	; (8015420 <__malloc_lock+0x8>)
 801541a:	f7ff b9ad 	b.w	8014778 <__retarget_lock_acquire_recursive>
 801541e:	bf00      	nop
 8015420:	2000ffac 	.word	0x2000ffac

08015424 <__malloc_unlock>:
 8015424:	4801      	ldr	r0, [pc, #4]	; (801542c <__malloc_unlock+0x8>)
 8015426:	f7ff b9a8 	b.w	801477a <__retarget_lock_release_recursive>
 801542a:	bf00      	nop
 801542c:	2000ffac 	.word	0x2000ffac

08015430 <_read_r>:
 8015430:	b538      	push	{r3, r4, r5, lr}
 8015432:	4d07      	ldr	r5, [pc, #28]	; (8015450 <_read_r+0x20>)
 8015434:	4604      	mov	r4, r0
 8015436:	4608      	mov	r0, r1
 8015438:	4611      	mov	r1, r2
 801543a:	2200      	movs	r2, #0
 801543c:	602a      	str	r2, [r5, #0]
 801543e:	461a      	mov	r2, r3
 8015440:	f7eb faf2 	bl	8000a28 <_read>
 8015444:	1c43      	adds	r3, r0, #1
 8015446:	d102      	bne.n	801544e <_read_r+0x1e>
 8015448:	682b      	ldr	r3, [r5, #0]
 801544a:	b103      	cbz	r3, 801544e <_read_r+0x1e>
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	bd38      	pop	{r3, r4, r5, pc}
 8015450:	2000ffa4 	.word	0x2000ffa4

08015454 <_raise_r>:
 8015454:	291f      	cmp	r1, #31
 8015456:	b538      	push	{r3, r4, r5, lr}
 8015458:	4604      	mov	r4, r0
 801545a:	460d      	mov	r5, r1
 801545c:	d904      	bls.n	8015468 <_raise_r+0x14>
 801545e:	2316      	movs	r3, #22
 8015460:	6003      	str	r3, [r0, #0]
 8015462:	f04f 30ff 	mov.w	r0, #4294967295
 8015466:	bd38      	pop	{r3, r4, r5, pc}
 8015468:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801546a:	b112      	cbz	r2, 8015472 <_raise_r+0x1e>
 801546c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015470:	b94b      	cbnz	r3, 8015486 <_raise_r+0x32>
 8015472:	4620      	mov	r0, r4
 8015474:	f000 f830 	bl	80154d8 <_getpid_r>
 8015478:	462a      	mov	r2, r5
 801547a:	4601      	mov	r1, r0
 801547c:	4620      	mov	r0, r4
 801547e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015482:	f000 b817 	b.w	80154b4 <_kill_r>
 8015486:	2b01      	cmp	r3, #1
 8015488:	d00a      	beq.n	80154a0 <_raise_r+0x4c>
 801548a:	1c59      	adds	r1, r3, #1
 801548c:	d103      	bne.n	8015496 <_raise_r+0x42>
 801548e:	2316      	movs	r3, #22
 8015490:	6003      	str	r3, [r0, #0]
 8015492:	2001      	movs	r0, #1
 8015494:	e7e7      	b.n	8015466 <_raise_r+0x12>
 8015496:	2400      	movs	r4, #0
 8015498:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801549c:	4628      	mov	r0, r5
 801549e:	4798      	blx	r3
 80154a0:	2000      	movs	r0, #0
 80154a2:	e7e0      	b.n	8015466 <_raise_r+0x12>

080154a4 <raise>:
 80154a4:	4b02      	ldr	r3, [pc, #8]	; (80154b0 <raise+0xc>)
 80154a6:	4601      	mov	r1, r0
 80154a8:	6818      	ldr	r0, [r3, #0]
 80154aa:	f7ff bfd3 	b.w	8015454 <_raise_r>
 80154ae:	bf00      	nop
 80154b0:	2000001c 	.word	0x2000001c

080154b4 <_kill_r>:
 80154b4:	b538      	push	{r3, r4, r5, lr}
 80154b6:	4d07      	ldr	r5, [pc, #28]	; (80154d4 <_kill_r+0x20>)
 80154b8:	2300      	movs	r3, #0
 80154ba:	4604      	mov	r4, r0
 80154bc:	4608      	mov	r0, r1
 80154be:	4611      	mov	r1, r2
 80154c0:	602b      	str	r3, [r5, #0]
 80154c2:	f7eb fa95 	bl	80009f0 <_kill>
 80154c6:	1c43      	adds	r3, r0, #1
 80154c8:	d102      	bne.n	80154d0 <_kill_r+0x1c>
 80154ca:	682b      	ldr	r3, [r5, #0]
 80154cc:	b103      	cbz	r3, 80154d0 <_kill_r+0x1c>
 80154ce:	6023      	str	r3, [r4, #0]
 80154d0:	bd38      	pop	{r3, r4, r5, pc}
 80154d2:	bf00      	nop
 80154d4:	2000ffa4 	.word	0x2000ffa4

080154d8 <_getpid_r>:
 80154d8:	f7eb ba82 	b.w	80009e0 <_getpid>

080154dc <_fstat_r>:
 80154dc:	b538      	push	{r3, r4, r5, lr}
 80154de:	4d07      	ldr	r5, [pc, #28]	; (80154fc <_fstat_r+0x20>)
 80154e0:	2300      	movs	r3, #0
 80154e2:	4604      	mov	r4, r0
 80154e4:	4608      	mov	r0, r1
 80154e6:	4611      	mov	r1, r2
 80154e8:	602b      	str	r3, [r5, #0]
 80154ea:	f7eb fae2 	bl	8000ab2 <_fstat>
 80154ee:	1c43      	adds	r3, r0, #1
 80154f0:	d102      	bne.n	80154f8 <_fstat_r+0x1c>
 80154f2:	682b      	ldr	r3, [r5, #0]
 80154f4:	b103      	cbz	r3, 80154f8 <_fstat_r+0x1c>
 80154f6:	6023      	str	r3, [r4, #0]
 80154f8:	bd38      	pop	{r3, r4, r5, pc}
 80154fa:	bf00      	nop
 80154fc:	2000ffa4 	.word	0x2000ffa4

08015500 <_isatty_r>:
 8015500:	b538      	push	{r3, r4, r5, lr}
 8015502:	4d06      	ldr	r5, [pc, #24]	; (801551c <_isatty_r+0x1c>)
 8015504:	2300      	movs	r3, #0
 8015506:	4604      	mov	r4, r0
 8015508:	4608      	mov	r0, r1
 801550a:	602b      	str	r3, [r5, #0]
 801550c:	f7eb fae1 	bl	8000ad2 <_isatty>
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d102      	bne.n	801551a <_isatty_r+0x1a>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	b103      	cbz	r3, 801551a <_isatty_r+0x1a>
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	bd38      	pop	{r3, r4, r5, pc}
 801551c:	2000ffa4 	.word	0x2000ffa4

08015520 <_init>:
 8015520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015522:	bf00      	nop
 8015524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015526:	bc08      	pop	{r3}
 8015528:	469e      	mov	lr, r3
 801552a:	4770      	bx	lr

0801552c <_fini>:
 801552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552e:	bf00      	nop
 8015530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015532:	bc08      	pop	{r3}
 8015534:	469e      	mov	lr, r3
 8015536:	4770      	bx	lr
