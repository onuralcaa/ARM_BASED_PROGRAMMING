
010_1_USB_VCP_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c48  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20001d44  20001d44  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcdb  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c4  00000000  00000000  0002de07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b49  00000000  00000000  00031c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec0b  00000000  00000000  00054751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3dcd  00000000  00000000  0006335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127129  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c64  00000000  00000000  0012717c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e94 	.word	0x08006e94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006e94 	.word	0x08006e94

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f94a 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f818 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f880 	bl	80005ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f005 ff8c 	bl	8006408 <MX_USB_DEVICE_Init>

	  //sprintf(Tx_Buffer, "Hello World %d\r\n", cnt++);
	  //CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
	  //HAL_Delay(250);

	  if(Rx_Flag)
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x34>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0fb      	beq.n	80004f0 <main+0x14>
	  {
		  Rx_Flag = 0;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <main+0x34>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(Rx_Buffer, strlen(Rx_Buffer));
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x38>)
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	4619      	mov	r1, r3
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <main+0x38>)
 800050a:	f006 f83b 	bl	8006584 <CDC_Transmit_FS>
	  if(Rx_Flag)
 800050e:	e7ef      	b.n	80004f0 <main+0x14>
 8000510:	20000131 	.word	0x20000131
 8000514:	20000118 	.word	0x20000118

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fcac 	bl	8006e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	; 0xa8
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fead 	bl	80022fc <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f848 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f90e 	bl	80027ec <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f831 	bl	800063c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <HAL_MspInit+0x4c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x4c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f89a 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <OTG_FS_IRQHandler+0x10>)
 80006f2:	f000 fcd5 	bl	80010a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20001618 	.word	0x20001618

08000700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072a:	490e      	ldr	r1, [pc, #56]	; (8000764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000740:	4c0b      	ldr	r4, [pc, #44]	; (8000770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800074e:	f7ff ffd7 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f006 fb73 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff fec1 	bl	80004dc <main>
  bx  lr    
 800075a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800075c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000768:	08006efc 	.word	0x08006efc
  ldr r2, =_sbss
 800076c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000770:	20001d44 	.word	0x20001d44

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_Init+0x40>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <HAL_Init+0x40>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_Init+0x40>)
 800078e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x40>)
 800079a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f94f 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff ff4c 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023c00 	.word	0x40023c00

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f967 	bl	8000aae <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f92f 	bl	8000a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	20000008 	.word	0x20000008
 8000818:	20000004 	.word	0x20000004

0800081c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x20>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x24>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_IncTick+0x24>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008
 8000840:	20000134 	.word	0x20000134

08000844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_GetTick+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000134 	.word	0x20000134

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff ffee 	bl	8000844 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_Delay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000882:	bf00      	nop
 8000884:	f7ff ffde 	bl	8000844 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4907      	ldr	r1, [pc, #28]	; (8000940 <__NVIC_EnableIRQ+0x38>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f7ff ff8e 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff29 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff3e 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff8e 	bl	8000998 <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff31 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffa2 	bl	8000a00 <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e16b      	b.n	8000dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f040 815a 	bne.w	8000db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d005      	beq.n	8000b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d130      	bne.n	8000b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	f003 0201 	and.w	r2, r3, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d017      	beq.n	8000bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d123      	bne.n	8000c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	08da      	lsrs	r2, r3, #3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3208      	adds	r2, #8
 8000c06:	69b9      	ldr	r1, [r7, #24]
 8000c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0203 	and.w	r2, r3, #3
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80b4 	beq.w	8000db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a5f      	ldr	r2, [pc, #380]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6a:	4a5b      	ldr	r2, [pc, #364]	; (8000dd8 <HAL_GPIO_Init+0x310>)
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3302      	adds	r3, #2
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	220f      	movs	r2, #15
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a52      	ldr	r2, [pc, #328]	; (8000ddc <HAL_GPIO_Init+0x314>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d02b      	beq.n	8000cee <HAL_GPIO_Init+0x226>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a51      	ldr	r2, [pc, #324]	; (8000de0 <HAL_GPIO_Init+0x318>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d025      	beq.n	8000cea <HAL_GPIO_Init+0x222>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a50      	ldr	r2, [pc, #320]	; (8000de4 <HAL_GPIO_Init+0x31c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d01f      	beq.n	8000ce6 <HAL_GPIO_Init+0x21e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <HAL_GPIO_Init+0x320>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d019      	beq.n	8000ce2 <HAL_GPIO_Init+0x21a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4e      	ldr	r2, [pc, #312]	; (8000dec <HAL_GPIO_Init+0x324>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0x216>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x328>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00d      	beq.n	8000cda <HAL_GPIO_Init+0x212>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x32c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d007      	beq.n	8000cd6 <HAL_GPIO_Init+0x20e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_GPIO_Init+0x330>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_GPIO_Init+0x20a>
 8000cce:	2307      	movs	r3, #7
 8000cd0:	e00e      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	e00c      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	e00a      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e008      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e004      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	69fa      	ldr	r2, [r7, #28]
 8000cf2:	f002 0203 	and.w	r2, r2, #3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d00:	4935      	ldr	r1, [pc, #212]	; (8000dd8 <HAL_GPIO_Init+0x310>)
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d32:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3301      	adds	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	f67f ae90 	bls.w	8000ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40021400 	.word	0x40021400
 8000df4:	40021800 	.word	0x40021800
 8000df8:	40021c00 	.word	0x40021c00
 8000dfc:	40013c00 	.word	0x40013c00

08000e00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	b08f      	sub	sp, #60	; 0x3c
 8000e04:	af0a      	add	r7, sp, #40	; 0x28
 8000e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e10f      	b.n	8001032 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d106      	bne.n	8000e32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f005 fcf1 	bl	8006814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 ffd8 	bl	8002e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	687e      	ldr	r6, [r7, #4]
 8000e5e:	466d      	mov	r5, sp
 8000e60:	f106 0410 	add.w	r4, r6, #16
 8000e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e70:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e74:	1d33      	adds	r3, r6, #4
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	6838      	ldr	r0, [r7, #0]
 8000e7a:	f001 feaf 	bl	8002bdc <USB_CoreInit>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e0d0      	b.n	8001032 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 ffc6 	bl	8002e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e04a      	b.n	8000f38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	333d      	adds	r3, #61	; 0x3d
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	333c      	adds	r3, #60	; 0x3c
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	3344      	adds	r3, #68	; 0x44
 8000ede:	4602      	mov	r2, r0
 8000ee0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3340      	adds	r3, #64	; 0x40
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3348      	adds	r3, #72	; 0x48
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	334c      	adds	r3, #76	; 0x4c
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3354      	adds	r3, #84	; 0x54
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	3301      	adds	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3af      	bcc.n	8000ea2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e044      	b.n	8000fd2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3b5      	bcc.n	8000f48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	687e      	ldr	r6, [r7, #4]
 8000fe4:	466d      	mov	r5, sp
 8000fe6:	f106 0410 	add.w	r4, r6, #16
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ffa:	1d33      	adds	r3, r6, #4
 8000ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f001 ff5e 	bl	8002ec0 <USB_DevInit>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2202      	movs	r2, #2
 800100e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00d      	b.n	8001032 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f003 f8ad 	bl	800418a <USB_DevDisconnect>

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800103a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_PCD_Start+0x1c>
 8001052:	2302      	movs	r3, #2
 8001054:	e020      	b.n	8001098 <HAL_PCD_Start+0x5e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	2b01      	cmp	r3, #1
 8001064:	d109      	bne.n	800107a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f001 feb0 	bl	8002de4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f85d 	bl	8004148 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b08d      	sub	sp, #52	; 0x34
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f91b 	bl	80042f2 <USB_GetMode>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 848a 	bne.w	80019d8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 f87f 	bl	80041cc <USB_ReadInterrupts>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 8480 	beq.w	80019d6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f86c 	bl	80041cc <USB_ReadInterrupts>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d107      	bne.n	800110e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f002 0202 	and.w	r2, r2, #2
 800110c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f85a 	bl	80041cc <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b10      	cmp	r3, #16
 8001120:	d161      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0210 	bic.w	r2, r2, #16
 8001130:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f003 020f 	and.w	r2, r3, #15
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	0c5b      	lsrs	r3, r3, #17
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	2b02      	cmp	r3, #2
 800115c:	d124      	bne.n	80011a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d035      	beq.n	80011d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	6a38      	ldr	r0, [r7, #32]
 800117e:	f002 fe91 	bl	8003ea4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800118e:	441a      	add	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a0:	441a      	add	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	621a      	str	r2, [r3, #32]
 80011a6:	e016      	b.n	80011d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	0c5b      	lsrs	r3, r3, #17
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d110      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80011ba:	2208      	movs	r2, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	6a38      	ldr	r0, [r7, #32]
 80011c0:	f002 fe70 	bl	8003ea4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d0:	441a      	add	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0210 	orr.w	r2, r2, #16
 80011e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 ffee 	bl	80041cc <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011fa:	f040 80a7 	bne.w	800134c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fff3 	bl	80041f2 <USB_ReadDevAllOutEpInterrupt>
 800120c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800120e:	e099      	b.n	8001344 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 808e 	beq.w	8001338 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f817 	bl	800425a <USB_ReadDevOutEPInterrupt>
 800122c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	4413      	add	r3, r2
 8001240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001244:	461a      	mov	r2, r3
 8001246:	2301      	movs	r3, #1
 8001248:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800124a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fec3 	bl	8001fd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	015a      	lsls	r2, r3, #5
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4413      	add	r3, r2
 8001264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001268:	461a      	mov	r2, r3
 800126a:	2308      	movs	r3, #8
 800126c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800126e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 ff99 	bl	80021a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128c:	461a      	mov	r2, r3
 800128e:	2310      	movs	r3, #16
 8001290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d030      	beq.n	80012fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a4:	2b80      	cmp	r3, #128	; 0x80
 80012a6:	d109      	bne.n	80012bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	3304      	adds	r3, #4
 80012d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f005 fb9a 	bl	8006a20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2302      	movs	r3, #2
 80012fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001314:	461a      	mov	r2, r3
 8001316:	2320      	movs	r3, #32
 8001318:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	015a      	lsls	r2, r3, #5
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	4413      	add	r3, r2
 800132c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001330:	461a      	mov	r2, r3
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	3301      	adds	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f af62 	bne.w	8001210 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 ff3b 	bl	80041cc <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001360:	f040 80db 	bne.w	800151a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 ff5c 	bl	8004226 <USB_ReadDevAllInEpInterrupt>
 800136e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001374:	e0cd      	b.n	8001512 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80c2 	beq.w	8001506 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ff82 	bl	8004296 <USB_ReadDevInEPInterrupt>
 8001392:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d057      	beq.n	800144e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	2201      	movs	r2, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69f9      	ldr	r1, [r7, #28]
 80013ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013be:	4013      	ands	r3, r2
 80013c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d132      	bne.n	8001442 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	334c      	adds	r3, #76	; 0x4c
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4403      	add	r3, r0
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4419      	add	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4403      	add	r3, r0
 8001410:	334c      	adds	r3, #76	; 0x4c
 8001412:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	2b00      	cmp	r3, #0
 8001418:	d113      	bne.n	8001442 <HAL_PCD_IRQHandler+0x3a2>
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3354      	adds	r3, #84	; 0x54
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d108      	bne.n	8001442 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800143a:	461a      	mov	r2, r3
 800143c:	2101      	movs	r1, #1
 800143e:	f002 ff89 	bl	8004354 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f005 fa64 	bl	8006916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001464:	461a      	mov	r2, r3
 8001466:	2308      	movs	r3, #8
 8001468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001480:	461a      	mov	r2, r3
 8001482:	2310      	movs	r3, #16
 8001484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	4413      	add	r3, r2
 8001498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800149c:	461a      	mov	r2, r3
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d023      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ae:	6a38      	ldr	r0, [r7, #32]
 80014b0:	f001 fe6a 	bl	8003188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	3338      	adds	r3, #56	; 0x38
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	78db      	ldrb	r3, [r3, #3]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d108      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2200      	movs	r2, #0
 80014d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f005 fab1 	bl	8006a44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ee:	461a      	mov	r2, r3
 80014f0:	2302      	movs	r3, #2
 80014f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fcdb 	bl	8001ebc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	2b00      	cmp	r3, #0
 8001516:	f47f af2e 	bne.w	8001376 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fe54 	bl	80041cc <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800152a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800152e:	d122      	bne.n	8001576 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001556:	2100      	movs	r1, #0
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fec3 	bl	80022e4 <HAL_PCDEx_LPM_Callback>
 800155e:	e002      	b.n	8001566 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f005 fa4f 	bl	8006a04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fe26 	bl	80041cc <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800158a:	d112      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f005 fa0b 	bl	80069b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015b0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fe08 	bl	80041cc <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c6:	f040 80b7 	bne.w	8001738 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2110      	movs	r1, #16
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fdcf 	bl	8003188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ee:	e046      	b.n	800167e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015fc:	461a      	mov	r2, r3
 80015fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001602:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001614:	0151      	lsls	r1, r2, #5
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	440a      	add	r2, r1
 800161a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800161e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001622:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001630:	461a      	mov	r2, r3
 8001632:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001636:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001648:	0151      	lsls	r1, r2, #5
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	440a      	add	r2, r1
 800164e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001656:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001668:	0151      	lsls	r1, r2, #5
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	440a      	add	r2, r1
 800166e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001676:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	3301      	adds	r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001684:	429a      	cmp	r2, r3
 8001686:	d3b3      	bcc.n	80015f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001696:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800169a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d016      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b4:	f043 030b 	orr.w	r3, r3, #11
 80016b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ca:	f043 030b 	orr.w	r3, r3, #11
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	e015      	b.n	80016fe <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f8:	f043 030b 	orr.w	r3, r3, #11
 80016fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001710:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001722:	461a      	mov	r2, r3
 8001724:	f002 fe16 	bl	8004354 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fd45 	bl	80041cc <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d124      	bne.n	8001798 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fddb 	bl	800430e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fd90 	bl	8003282 <USB_GetDevSpeed>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681c      	ldr	r4, [r3, #0]
 800176e:	f001 fa29 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8001772:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	4620      	mov	r0, r4
 800177e:	f001 fa8f 	bl	8002ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f005 f8ef 	bl	8006966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001796:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fd15 	bl	80041cc <USB_ReadInterrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d10a      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f005 f8cc 	bl	800694a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 0208 	and.w	r2, r2, #8
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fd00 	bl	80041cc <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b80      	cmp	r3, #128	; 0x80
 80017d4:	d122      	bne.n	800181c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017e2:	2301      	movs	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e014      	b.n	8001812 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fb27 	bl	8001e5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3301      	adds	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	429a      	cmp	r2, r3
 800181a:	d3e5      	bcc.n	80017e8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fcd3 	bl	80041cc <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001830:	d13b      	bne.n	80018aa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e02b      	b.n	8001890 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3340      	adds	r3, #64	; 0x40
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d115      	bne.n	800188a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800185e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001860:	2b00      	cmp	r3, #0
 8001862:	da12      	bge.n	800188a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	333f      	adds	r3, #63	; 0x3f
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fae8 	bl	8001e5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	429a      	cmp	r2, r3
 8001898:	d3ce      	bcc.n	8001838 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fc8c 	bl	80041cc <USB_ReadInterrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018be:	d155      	bne.n	800196c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
 80018c4:	e045      	b.n	8001952 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12e      	bne.n	800194c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da2b      	bge.n	800194c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001900:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6053      	str	r3, [r2, #4]
            break;
 800194a:	e007      	b.n	800195c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	429a      	cmp	r2, r3
 800195a:	d3b4      	bcc.n	80018c6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fc2b 	bl	80041cc <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d10a      	bne.n	8001998 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 f870 	bl	8006a68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fc15 	bl	80041cc <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d115      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f005 f860 	bl	8006a84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	e000      	b.n	80019d8 <HAL_PCD_IRQHandler+0x938>
      return;
 80019d6:	bf00      	nop
    }
  }
}
 80019d8:	3734      	adds	r7, #52	; 0x34
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_SetAddress+0x1a>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e013      	b.n	8001a20 <HAL_PCD_SetAddress+0x42>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fb73 	bl	80040fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	70fb      	strb	r3, [r7, #3]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	803b      	strh	r3, [r7, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da0f      	bge.n	8001a6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 020f 	and.w	r2, r3, #15
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	3338      	adds	r3, #56	; 0x38
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	705a      	strb	r2, [r3, #1]
 8001a6c:	e00f      	b.n	8001a8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 020f 	and.w	r2, r3, #15
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a9a:	883a      	ldrh	r2, [r7, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	78ba      	ldrb	r2, [r7, #2]
 8001aa4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d102      	bne.n	8001ac4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_EP_Open+0xaa>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00e      	b.n	8001af0 <HAL_PCD_EP_Open+0xc8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fbf3 	bl	80032cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001aee:	7afb      	ldrb	r3, [r7, #11]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da0f      	bge.n	8001b2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 020f 	and.w	r2, r3, #15
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	3338      	adds	r3, #56	; 0x38
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3304      	adds	r3, #4
 8001b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	705a      	strb	r2, [r3, #1]
 8001b2a:	e00f      	b.n	8001b4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_PCD_EP_Close+0x6e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e00e      	b.n	8001b84 <HAL_PCD_EP_Close+0x8c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fc31 	bl	80033dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6979      	ldr	r1, [r7, #20]
 8001c00:	f001 ff10 	bl	8003a24 <USB_EP0StartXfer>
 8001c04:	e008      	b.n	8001c18 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	6979      	ldr	r1, [r7, #20]
 8001c14:	f001 fcbe 	bl	8003594 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c44:	681b      	ldr	r3, [r3, #0]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3338      	adds	r3, #56	; 0x38
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	f001 feae 	bl	8003a24 <USB_EP0StartXfer>
 8001cc8:	e008      	b.n	8001cdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fc5c 	bl	8003594 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d901      	bls.n	8001d04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e050      	b.n	8001da6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0f      	bge.n	8001d2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00d      	b.n	8001d48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3304      	adds	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_SetStall+0x82>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e01e      	b.n	8001da6 <HAL_PCD_EP_SetStall+0xc0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 f8ec 	bl	8003f54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	b2d9      	uxtb	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d96:	461a      	mov	r2, r3
 8001d98:	f002 fadc 	bl	8004354 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d901      	bls.n	8001dcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e042      	b.n	8001e52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da0f      	bge.n	8001df4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3338      	adds	r3, #56	; 0x38
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	705a      	strb	r2, [r3, #1]
 8001df2:	e00f      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_EP_ClrStall+0x86>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00e      	b.n	8001e52 <HAL_PCD_EP_ClrStall+0xa4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 f8f4 	bl	8004030 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da0c      	bge.n	8001e88 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3338      	adds	r3, #56	; 0x38
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	e00c      	b.n	8001ea2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 ff13 	bl	8003cd4 <USB_EPStopXfer>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3338      	adds	r3, #56	; 0x38
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d901      	bls.n	8001ef4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e06c      	b.n	8001fce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d902      	bls.n	8001f10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3303      	adds	r3, #3
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f18:	e02b      	b.n	8001f72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d902      	bls.n	8001f36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3303      	adds	r3, #3
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4603      	mov	r3, r0
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f001 ff67 	bl	8003e28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	441a      	add	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d809      	bhi.n	8001f9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d203      	bcs.n	8001f9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1be      	bne.n	8001f1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d811      	bhi.n	8001fcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2201      	movs	r2, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fc8:	4013      	ands	r3, r2
 8001fca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	333c      	adds	r3, #60	; 0x3c
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d17b      	bne.n	8002106 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	f240 80b9 	bls.w	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80b3 	beq.w	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002040:	6093      	str	r3, [r2, #8]
 8002042:	e0a7      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	2320      	movs	r3, #32
 800205e:	6093      	str	r3, [r2, #8]
 8002060:	e098      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 8093 	bne.w	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d90f      	bls.n	8002096 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208c:	461a      	mov	r2, r3
 800208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002092:	6093      	str	r3, [r2, #8]
 8002094:	e07e      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	0159      	lsls	r1, r3, #5
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d114      	bne.n	80020f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020e0:	461a      	mov	r2, r3
 80020e2:	2101      	movs	r1, #1
 80020e4:	f002 f936 	bl	8004354 <USB_EP0_OutStart>
 80020e8:	e006      	b.n	80020f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	441a      	add	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 fbee 	bl	80068e0 <HAL_PCD_DataOutStageCallback>
 8002104:	e046      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d124      	bne.n	8002158 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	6093      	str	r3, [r2, #8]
 800212c:	e032      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	2320      	movs	r3, #32
 8002148:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4619      	mov	r1, r3
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f004 fbc5 	bl	80068e0 <HAL_PCD_DataOutStageCallback>
 8002156:	e01d      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d114      	bne.n	8002188 <PCD_EP_OutXfrComplete_int+0x1b0>
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002180:	461a      	mov	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	f002 f8e6 	bl	8004354 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f004 fba6 	bl	80068e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	4f54300a 	.word	0x4f54300a
 80021a4:	4f54310a 	.word	0x4f54310a

080021a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	333c      	adds	r3, #60	; 0x3c
 80021c0:	3304      	adds	r3, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <PCD_EP_OutSetupPacket_int+0x88>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d90e      	bls.n	80021fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f004 fb5d 	bl	80068bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <PCD_EP_OutSetupPacket_int+0x88>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d90c      	bls.n	8002224 <PCD_EP_OutSetupPacket_int+0x7c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	f002 f898 	bl	8004354 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	4f54300a 	.word	0x4f54300a

08002234 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
 8002240:	4613      	mov	r3, r2
 8002242:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002252:	883b      	ldrh	r3, [r7, #0]
 8002254:	0419      	lsls	r1, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	430a      	orrs	r2, r1
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
 8002260:	e028      	b.n	80022b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e00d      	b.n	8002292 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3340      	adds	r3, #64	; 0x40
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	3b01      	subs	r3, #1
 8002298:	429a      	cmp	r2, r3
 800229a:	d3ec      	bcc.n	8002276 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800229c:	883b      	ldrh	r3, [r7, #0]
 800229e:	0418      	lsls	r0, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4302      	orrs	r2, r0
 80022ac:	3340      	adds	r3, #64	; 0x40
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e267      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b85      	ldr	r3, [pc, #532]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b82      	ldr	r3, [pc, #520]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e242      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6c      	ldr	r2, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b69      	ldr	r3, [pc, #420]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fa46 	bl	8000844 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fa42 	bl	8000844 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e207      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fa32 	bl	8000844 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fa2e 	bl	8000844 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f3      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c7      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe f9e7 	bl	8000844 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe f9e3 	bl	8000844 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a8      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe f9c6 	bl	8000844 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe f9c2 	bl	8000844 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e187      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe f9a6 	bl	8000844 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe f9a2 	bl	8000844 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e167      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe f98f 	bl	8000844 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e00e      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252a:	f7fe f98b 	bl	8000844 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e150      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ea      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8097 	beq.w	8002690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b7d      	ldr	r3, [pc, #500]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a73      	ldr	r2, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7fe f94b 	bl	8000844 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7fe f947 	bl	8000844 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
 80025d8:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x30c>
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a54      	ldr	r2, [pc, #336]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe f90c 	bl	8000844 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe f908 	bl	8000844 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0cb      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe f8f6 	bl	8000844 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe f8f2 	bl	8000844 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b5      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a1 	beq.w	80027dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d05c      	beq.n	8002760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d141      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe f8c6 	bl	8000844 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe f8c2 	bl	8000844 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e087      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe f89b 	bl	8000844 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe f897 	bl	8000844 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x416>
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe f884 	bl	8000844 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe f880 	bl	8000844 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e038      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d121      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fd ffb2 	bl	8000844 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fd ffae 	bl	8000844 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd ff12 	bl	80007bc <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08006edc 	.word	0x08006edc
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b094      	sub	sp, #80	; 0x50
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	2300      	movs	r3, #0
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80e1 	bhi.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e0db      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029f0:	e0db      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f6:	e0d8      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
 8002a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4621      	mov	r1, r4
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	6139      	str	r1, [r7, #16]
 8002a48:	4629      	mov	r1, r5
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a70:	4659      	mov	r1, fp
 8002a72:	eb63 0901 	sbc.w	r9, r3, r1
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8a:	4690      	mov	r8, r2
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	eb18 0303 	adds.w	r3, r8, r3
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	462b      	mov	r3, r5
 8002a98:	eb49 0303 	adc.w	r3, r9, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	024b      	lsls	r3, r1, #9
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	024a      	lsls	r2, r1, #9
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac8:	f7fd fb86 	bl	80001d8 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae6:	623b      	str	r3, [r7, #32]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	f04f 0000 	mov.w	r0, #0
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	0159      	lsls	r1, r3, #5
 8002afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b02:	0150      	lsls	r0, r2, #5
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0e:	4649      	mov	r1, r9
 8002b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b28:	ebb2 040a 	subs.w	r4, r2, sl
 8002b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	00eb      	lsls	r3, r5, #3
 8002b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3e:	00e2      	lsls	r2, r4, #3
 8002b40:	4614      	mov	r4, r2
 8002b42:	461d      	mov	r5, r3
 8002b44:	4643      	mov	r3, r8
 8002b46:	18e3      	adds	r3, r4, r3
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	028b      	lsls	r3, r1, #10
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b68:	4621      	mov	r1, r4
 8002b6a:	028a      	lsls	r2, r1, #10
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b72:	2200      	movs	r2, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	61fa      	str	r2, [r7, #28]
 8002b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7c:	f7fd fb2c 	bl	80001d8 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3750      	adds	r7, #80	; 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	007a1200 	.word	0x007a1200

08002bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000000 	.word	0x20000000

08002bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bdc:	b084      	sub	sp, #16
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	f107 001c 	add.w	r0, r7, #28
 8002bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d122      	bne.n	8002c3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f001 fbee 	bl	8004410 <USB_CoreReset>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e01a      	b.n	8002c70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f001 fbe2 	bl	8004410 <USB_CoreReset>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
 8002c62:	e005      	b.n	8002c70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10b      	bne.n	8002c8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f043 0206 	orr.w	r2, r3, #6
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c9a:	b004      	add	sp, #16
 8002c9c:	4770      	bx	lr
	...

08002ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d165      	bne.n	8002d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <USB_SetTurnaroundTime+0x11c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d906      	bls.n	8002cca <USB_SetTurnaroundTime+0x2a>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <USB_SetTurnaroundTime+0x120>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d202      	bcs.n	8002cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e062      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <USB_SetTurnaroundTime+0x120>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d306      	bcc.n	8002ce0 <USB_SetTurnaroundTime+0x40>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <USB_SetTurnaroundTime+0x124>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d202      	bcs.n	8002ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cda:	230e      	movs	r3, #14
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e057      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a38      	ldr	r2, [pc, #224]	; (8002dc4 <USB_SetTurnaroundTime+0x124>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d306      	bcc.n	8002cf6 <USB_SetTurnaroundTime+0x56>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a37      	ldr	r2, [pc, #220]	; (8002dc8 <USB_SetTurnaroundTime+0x128>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d202      	bcs.n	8002cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cf0:	230d      	movs	r3, #13
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e04c      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a33      	ldr	r2, [pc, #204]	; (8002dc8 <USB_SetTurnaroundTime+0x128>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d306      	bcc.n	8002d0c <USB_SetTurnaroundTime+0x6c>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <USB_SetTurnaroundTime+0x12c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d06:	230c      	movs	r3, #12
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e041      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <USB_SetTurnaroundTime+0x12c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d906      	bls.n	8002d22 <USB_SetTurnaroundTime+0x82>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <USB_SetTurnaroundTime+0x130>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d802      	bhi.n	8002d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d1c:	230b      	movs	r3, #11
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e036      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <USB_SetTurnaroundTime+0x130>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d906      	bls.n	8002d38 <USB_SetTurnaroundTime+0x98>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <USB_SetTurnaroundTime+0x134>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d802      	bhi.n	8002d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d32:	230a      	movs	r3, #10
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e02b      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <USB_SetTurnaroundTime+0x134>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d906      	bls.n	8002d4e <USB_SetTurnaroundTime+0xae>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <USB_SetTurnaroundTime+0x138>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d202      	bcs.n	8002d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d48:	2309      	movs	r3, #9
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e020      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <USB_SetTurnaroundTime+0x138>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d306      	bcc.n	8002d64 <USB_SetTurnaroundTime+0xc4>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <USB_SetTurnaroundTime+0x13c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d802      	bhi.n	8002d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d5e:	2308      	movs	r3, #8
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e015      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <USB_SetTurnaroundTime+0x13c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d906      	bls.n	8002d7a <USB_SetTurnaroundTime+0xda>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <USB_SetTurnaroundTime+0x140>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d202      	bcs.n	8002d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d74:	2307      	movs	r3, #7
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00a      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e007      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d86:	2309      	movs	r3, #9
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e001      	b.n	8002d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d8c:	2309      	movs	r3, #9
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	00d8acbf 	.word	0x00d8acbf
 8002dc0:	00e4e1c0 	.word	0x00e4e1c0
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	01067380 	.word	0x01067380
 8002dcc:	011a499f 	.word	0x011a499f
 8002dd0:	01312cff 	.word	0x01312cff
 8002dd4:	014ca43f 	.word	0x014ca43f
 8002dd8:	016e3600 	.word	0x016e3600
 8002ddc:	01a6ab1f 	.word	0x01a6ab1f
 8002de0:	01e84800 	.word	0x01e84800

08002de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d115      	bne.n	8002e76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fd fd00 	bl	800085c <HAL_Delay>
      ms++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f001 fa45 	bl	80042f2 <USB_GetMode>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d01e      	beq.n	8002eac <USB_SetCurrentMode+0x84>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b31      	cmp	r3, #49	; 0x31
 8002e72:	d9f0      	bls.n	8002e56 <USB_SetCurrentMode+0x2e>
 8002e74:	e01a      	b.n	8002eac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d115      	bne.n	8002ea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f7fd fce7 	bl	800085c <HAL_Delay>
      ms++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f001 fa2c 	bl	80042f2 <USB_GetMode>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <USB_SetCurrentMode+0x84>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b31      	cmp	r3, #49	; 0x31
 8002ea4:	d9f0      	bls.n	8002e88 <USB_SetCurrentMode+0x60>
 8002ea6:	e001      	b.n	8002eac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e005      	b.n	8002eb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b32      	cmp	r3, #50	; 0x32
 8002eb0:	d101      	bne.n	8002eb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e009      	b.n	8002ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	3340      	adds	r3, #64	; 0x40
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0e      	cmp	r3, #14
 8002ef8:	d9f2      	bls.n	8002ee0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11c      	bne.n	8002f3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
 8002f38:	e00b      	b.n	8002f52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f64:	4619      	mov	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	680b      	ldr	r3, [r1, #0]
 8002f70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f965 	bl	8003250 <USB_SetDevSpeed>
 8002f86:	e008      	b.n	8002f9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f960 	bl	8003250 <USB_SetDevSpeed>
 8002f90:	e003      	b.n	8002f9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f92:	2103      	movs	r1, #3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f95b 	bl	8003250 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f9a:	2110      	movs	r1, #16
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8f3 	bl	8003188 <USB_FlushTxFifo>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f91f 	bl	80031f0 <USB_FlushRxFifo>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e043      	b.n	800306e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ffc:	d118      	bne.n	8003030 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e013      	b.n	8003042 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e008      	b.n	8003042 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	461a      	mov	r2, r3
 8003050:	2300      	movs	r3, #0
 8003052:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	461a      	mov	r2, r3
 8003062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	3301      	adds	r3, #1
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b7      	bcc.n	8002fe6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e043      	b.n	8003104 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800308e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003092:	d118      	bne.n	80030c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e013      	b.n	80030d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e008      	b.n	80030d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3301      	adds	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3b7      	bcc.n	800307c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <USB_DevInit+0x2c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f043 0208 	orr.w	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003180:	b004      	add	sp, #16
 8003182:	4770      	bx	lr
 8003184:	803c3800 	.word	0x803c3800

08003188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3301      	adds	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <USB_FlushTxFifo+0x64>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e01b      	b.n	80031e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	daf2      	bge.n	8003196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <USB_FlushTxFifo+0x64>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e006      	b.n	80031e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d0f0      	beq.n	80031c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	00030d40 	.word	0x00030d40

080031f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a11      	ldr	r2, [pc, #68]	; (800324c <USB_FlushRxFifo+0x5c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e018      	b.n	8003240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	daf2      	bge.n	80031fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2210      	movs	r2, #16
 800321e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <USB_FlushRxFifo+0x5c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e006      	b.n	8003240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b10      	cmp	r3, #16
 800323c:	d0f0      	beq.n	8003220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	00030d40 	.word	0x00030d40

08003250 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0306 	and.w	r3, r3, #6
 800329a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e00a      	b.n	80032be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d002      	beq.n	80032b4 <USB_GetDevSpeed+0x32>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d102      	bne.n	80032ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032b4:	2302      	movs	r3, #2
 80032b6:	75fb      	strb	r3, [r7, #23]
 80032b8:	e001      	b.n	80032be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032ba:	230f      	movs	r3, #15
 80032bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d13a      	bne.n	800335e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	b29b      	uxth	r3, r3
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003306:	4313      	orrs	r3, r2
 8003308:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d155      	bne.n	80033cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	791b      	ldrb	r3, [r3, #4]
 800333a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800333c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	059b      	lsls	r3, r3, #22
 8003342:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003344:	4313      	orrs	r3, r2
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e036      	b.n	80033cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11a      	bne.n	80033cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	791b      	ldrb	r3, [r3, #4]
 80033b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033b2:	430b      	orrs	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	0151      	lsls	r1, r2, #5
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	440a      	add	r2, r1
 80033be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d161      	bne.n	80034bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800340a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340e:	d11f      	bne.n	8003450 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800342e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800344e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003470:	4013      	ands	r3, r2
 8003472:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003494:	4013      	ands	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	4619      	mov	r1, r3
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <USB_DeactivateEndpoint+0x1b0>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
 80034ba:	e060      	b.n	800357e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d2:	d11f      	bne.n	8003514 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	440a      	add	r2, r1
 800350a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800350e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	43db      	mvns	r3, r3
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4013      	ands	r3, r2
 8003536:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	440b      	add	r3, r1
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	4619      	mov	r1, r3
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <USB_DeactivateEndpoint+0x1b4>)
 800357a:	4013      	ands	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	ec337800 	.word	0xec337800
 8003590:	eff37800 	.word	0xeff37800

08003594 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	f040 815c 	bne.w	800386e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d132      	bne.n	8003624 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361c:	0cdb      	lsrs	r3, r3, #19
 800361e:	04db      	lsls	r3, r3, #19
 8003620:	6113      	str	r3, [r2, #16]
 8003622:	e074      	b.n	800370e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363e:	0cdb      	lsrs	r3, r3, #19
 8003640:	04db      	lsls	r3, r3, #19
 8003642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003662:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6999      	ldr	r1, [r3, #24]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	440b      	add	r3, r1
 8003680:	1e59      	subs	r1, r3, #1
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	fbb1 f3f3 	udiv	r3, r1, r3
 800368a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800368c:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <USB_EPStartXfer+0x370>)
 800368e:	400b      	ands	r3, r1
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	0148      	lsls	r0, r1, #5
 8003694:	69f9      	ldr	r1, [r7, #28]
 8003696:	4401      	add	r1, r0
 8003698:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800369c:	4313      	orrs	r3, r2
 800369e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	0148      	lsls	r0, r1, #5
 80036ba:	69f9      	ldr	r1, [r7, #28]
 80036bc:	4401      	add	r1, r0
 80036be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036c2:	4313      	orrs	r3, r2
 80036c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	791b      	ldrb	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d11f      	bne.n	800370e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800370c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d14b      	bne.n	80037ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	791b      	ldrb	r3, [r3, #4]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d128      	bne.n	800378a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d110      	bne.n	800376a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e00f      	b.n	800378a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	440a      	add	r2, r1
 8003780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e133      	b.n	8003a14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	791b      	ldrb	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d015      	beq.n	8003800 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 811b 	beq.w	8003a14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	69f9      	ldr	r1, [r7, #28]
 80037f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037fa:	4313      	orrs	r3, r2
 80037fc:	634b      	str	r3, [r1, #52]	; 0x34
 80037fe:	e109      	b.n	8003a14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d110      	bne.n	8003832 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e00f      	b.n	8003852 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6919      	ldr	r1, [r3, #16]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	b298      	uxth	r0, r3
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4603      	mov	r3, r0
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fade 	bl	8003e28 <USB_WritePacket>
 800386c:	e0d2      	b.n	8003a14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	440a      	add	r2, r1
 8003884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003888:	0cdb      	lsrs	r3, r3, #19
 800388a:	04db      	lsls	r3, r3, #19
 800388c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d126      	bne.n	8003908 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	0148      	lsls	r0, r1, #5
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	4401      	add	r1, r0
 80038d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038fe:	6113      	str	r3, [r2, #16]
 8003900:	e03a      	b.n	8003978 <USB_EPStartXfer+0x3e4>
 8003902:	bf00      	nop
 8003904:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4413      	add	r3, r2
 8003912:	1e5a      	subs	r2, r3, #1
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	8afa      	ldrh	r2, [r7, #22]
 8003924:	fb03 f202 	mul.w	r2, r3, r2
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	8afb      	ldrh	r3, [r7, #22]
 800393c:	04d9      	lsls	r1, r3, #19
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <USB_EPStartXfer+0x48c>)
 8003940:	400b      	ands	r3, r1
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	0148      	lsls	r0, r1, #5
 8003946:	69f9      	ldr	r1, [r7, #28]
 8003948:	4401      	add	r1, r0
 800394a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	0148      	lsls	r0, r1, #5
 800396c:	69f9      	ldr	r1, [r7, #28]
 800396e:	4401      	add	r1, r0
 8003970:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003974:	4313      	orrs	r3, r2
 8003976:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6919      	ldr	r1, [r3, #16]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	460a      	mov	r2, r1
 8003998:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	791b      	ldrb	r3, [r3, #4]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d128      	bne.n	80039f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d110      	bne.n	80039d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00f      	b.n	80039f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	1ff80000 	.word	0x1ff80000

08003a24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 80ce 	bne.w	8003be2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d132      	bne.n	8003ab4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	0151      	lsls	r1, r2, #5
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	440a      	add	r2, r1
 8003a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	0151      	lsls	r1, r2, #5
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aac:	0cdb      	lsrs	r3, r3, #19
 8003aae:	04db      	lsls	r3, r3, #19
 8003ab0:	6113      	str	r3, [r2, #16]
 8003ab2:	e04e      	b.n	8003b52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ace:	0cdb      	lsrs	r3, r3, #19
 8003ad0:	04db      	lsls	r3, r3, #19
 8003ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	0151      	lsls	r1, r2, #5
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	440a      	add	r2, r1
 8003aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003af2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d903      	bls.n	8003b0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	6939      	ldr	r1, [r7, #16]
 8003b44:	0148      	lsls	r0, r1, #5
 8003b46:	6979      	ldr	r1, [r7, #20]
 8003b48:	4401      	add	r1, r0
 8003b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d11e      	bne.n	8003b96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e097      	b.n	8003cc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8083 	beq.w	8003cc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	634b      	str	r3, [r1, #52]	; 0x34
 8003be0:	e071      	b.n	8003cc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfc:	0cdb      	lsrs	r3, r3, #19
 8003bfe:	04db      	lsls	r3, r3, #19
 8003c00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	6939      	ldr	r1, [r7, #16]
 8003c76:	0148      	lsls	r0, r1, #5
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c80:	4313      	orrs	r3, r2
 8003c82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d10d      	bne.n	8003ca6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6919      	ldr	r1, [r3, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d14a      	bne.n	8003d88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0a:	f040 8086 	bne.w	8003e1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d902      	bls.n	8003d6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
          break;
 8003d6a:	e056      	b.n	8003e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d84:	d0e7      	beq.n	8003d56 <USB_EPStopXfer+0x82>
 8003d86:	e048      	b.n	8003e1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da0:	d13b      	bne.n	8003e1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	0151      	lsls	r1, r2, #5
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	440a      	add	r2, r1
 8003dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	7812      	ldrb	r2, [r2, #0]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d902      	bls.n	8003e00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8003dfe:	e00c      	b.n	8003e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e18:	d0e7      	beq.n	8003dea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	460b      	mov	r3, r1
 8003e38:	71fb      	strb	r3, [r7, #7]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d123      	bne.n	8003e96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e4e:	88bb      	ldrh	r3, [r7, #4]
 8003e50:	3303      	adds	r3, #3
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	e018      	b.n	8003e8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	031a      	lsls	r2, r3, #12
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	461a      	mov	r2, r3
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3e2      	bcc.n	8003e5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3724      	adds	r7, #36	; 0x24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b08b      	sub	sp, #44	; 0x2c
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e014      	b.n	8003efa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	601a      	str	r2, [r3, #0]
    pDest++;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	3301      	adds	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	3301      	adds	r3, #1
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	6a3a      	ldr	r2, [r7, #32]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3e6      	bcc.n	8003ed0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f02:	8bfb      	ldrh	r3, [r7, #30]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01e      	beq.n	8003f46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f12:	461a      	mov	r2, r3
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	701a      	strb	r2, [r3, #0]
      i++;
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	3301      	adds	r3, #1
 8003f32:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	3301      	adds	r3, #1
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f3a:	8bfb      	ldrh	r3, [r7, #30]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f40:	8bfb      	ldrh	r3, [r7, #30]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ea      	bne.n	8003f1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	372c      	adds	r7, #44	; 0x2c
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d12c      	bne.n	8003fca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	db12      	blt.n	8003fa8 <USB_EPSetStall+0x54>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00f      	beq.n	8003fa8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fa6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	0151      	lsls	r1, r2, #5
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e02b      	b.n	8004022 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db12      	blt.n	8004002 <USB_EPSetStall+0xae>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00f      	beq.n	8004002 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004000:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004020:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d128      	bne.n	800409e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800406a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d003      	beq.n	800407c <USB_EPClearStall+0x4c>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	791b      	ldrb	r3, [r3, #4]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d138      	bne.n	80040ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e027      	b.n	80040ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	791b      	ldrb	r3, [r3, #4]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d003      	beq.n	80040ce <USB_EPClearStall+0x9e>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	791b      	ldrb	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d10f      	bne.n	80040ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800411e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004176:	f023 0302 	bic.w	r3, r3, #2
 800417a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041a4:	f023 0303 	bic.w	r3, r3, #3
 80041a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0c1b      	lsrs	r3, r3, #16
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	b29b      	uxth	r3, r3
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004288:	68bb      	ldr	r3, [r7, #8]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004296:	b480      	push	{r7}
 8004298:	b087      	sub	sp, #28
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	01db      	lsls	r3, r3, #7
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042e4:	68bb      	ldr	r3, [r7, #8]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004328:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	460b      	mov	r3, r1
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	333c      	adds	r3, #60	; 0x3c
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4a26      	ldr	r2, [pc, #152]	; (800440c <USB_EP0_OutStart+0xb8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d90a      	bls.n	800438e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004388:	d101      	bne.n	800438e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e037      	b.n	80043fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043bc:	f043 0318 	orr.w	r3, r3, #24
 80043c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043d6:	7afb      	ldrb	r3, [r7, #11]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10f      	bne.n	80043fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80043fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	4f54300a 	.word	0x4f54300a

08004410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a13      	ldr	r2, [pc, #76]	; (8004474 <USB_CoreReset+0x64>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e01b      	b.n	8004466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	daf2      	bge.n	800441c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f043 0201 	orr.w	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <USB_CoreReset+0x64>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d0f0      	beq.n	8004446 <USB_CoreReset+0x36>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	00030d40 	.word	0x00030d40

08004478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004484:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004488:	f002 fc94 	bl	8006db4 <USBD_static_malloc>
 800448c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	32b0      	adds	r2, #176	; 0xb0
 800449e:	2100      	movs	r1, #0
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0d4      	b.n	8004652 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80044a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80044ac:	2100      	movs	r1, #0
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f002 fce8 	bl	8006e84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	32b0      	adds	r2, #176	; 0xb0
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	32b0      	adds	r2, #176	; 0xb0
 80044ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7c1b      	ldrb	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d138      	bne.n	8004552 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044e0:	4b5e      	ldr	r3, [pc, #376]	; (800465c <USBD_CDC_Init+0x1e4>)
 80044e2:	7819      	ldrb	r1, [r3, #0]
 80044e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e8:	2202      	movs	r2, #2
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f002 fb3f 	bl	8006b6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <USBD_CDC_Init+0x1e4>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3324      	adds	r3, #36	; 0x24
 8004506:	2201      	movs	r2, #1
 8004508:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <USBD_CDC_Init+0x1e8>)
 800450c:	7819      	ldrb	r1, [r3, #0]
 800450e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004512:	2202      	movs	r2, #2
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f002 fb2a 	bl	8006b6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <USBD_CDC_Init+0x1e8>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004532:	2201      	movs	r2, #1
 8004534:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <USBD_CDC_Init+0x1ec>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3326      	adds	r3, #38	; 0x26
 800454c:	2210      	movs	r2, #16
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	e035      	b.n	80045be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004552:	4b42      	ldr	r3, [pc, #264]	; (800465c <USBD_CDC_Init+0x1e4>)
 8004554:	7819      	ldrb	r1, [r3, #0]
 8004556:	2340      	movs	r3, #64	; 0x40
 8004558:	2202      	movs	r2, #2
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f002 fb07 	bl	8006b6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004560:	4b3e      	ldr	r3, [pc, #248]	; (800465c <USBD_CDC_Init+0x1e4>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3324      	adds	r3, #36	; 0x24
 8004576:	2201      	movs	r2, #1
 8004578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800457a:	4b39      	ldr	r3, [pc, #228]	; (8004660 <USBD_CDC_Init+0x1e8>)
 800457c:	7819      	ldrb	r1, [r3, #0]
 800457e:	2340      	movs	r3, #64	; 0x40
 8004580:	2202      	movs	r2, #2
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f002 faf3 	bl	8006b6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004588:	4b35      	ldr	r3, [pc, #212]	; (8004660 <USBD_CDC_Init+0x1e8>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045a0:	2201      	movs	r2, #1
 80045a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045a4:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <USBD_CDC_Init+0x1ec>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3326      	adds	r3, #38	; 0x26
 80045ba:	2210      	movs	r2, #16
 80045bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <USBD_CDC_Init+0x1ec>)
 80045c0:	7819      	ldrb	r1, [r3, #0]
 80045c2:	2308      	movs	r3, #8
 80045c4:	2203      	movs	r2, #3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f002 fad1 	bl	8006b6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <USBD_CDC_Init+0x1ec>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	f003 020f 	and.w	r2, r3, #15
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3324      	adds	r3, #36	; 0x24
 80045e2:	2201      	movs	r2, #1
 80045e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	33b0      	adds	r3, #176	; 0xb0
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800461c:	2302      	movs	r3, #2
 800461e:	e018      	b.n	8004652 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7c1b      	ldrb	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <USBD_CDC_Init+0x1e8>)
 800462a:	7819      	ldrb	r1, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f002 fb88 	bl	8006d4c <USBD_LL_PrepareReceive>
 800463c:	e008      	b.n	8004650 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <USBD_CDC_Init+0x1e8>)
 8004640:	7819      	ldrb	r1, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f002 fb7e 	bl	8006d4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000093 	.word	0x20000093
 8004660:	20000094 	.word	0x20000094
 8004664:	20000095 	.word	0x20000095

08004668 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <USBD_CDC_DeInit+0xf8>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f002 fa9d 	bl	8006bba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <USBD_CDC_DeInit+0xf8>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3324      	adds	r3, #36	; 0x24
 8004696:	2200      	movs	r2, #0
 8004698:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800469a:	4b32      	ldr	r3, [pc, #200]	; (8004764 <USBD_CDC_DeInit+0xfc>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f002 fa8a 	bl	8006bba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <USBD_CDC_DeInit+0xfc>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f003 020f 	and.w	r2, r3, #15
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046be:	2200      	movs	r2, #0
 80046c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <USBD_CDC_DeInit+0x100>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f002 fa76 	bl	8006bba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <USBD_CDC_DeInit+0x100>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f003 020f 	and.w	r2, r3, #15
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	2200      	movs	r2, #0
 80046e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <USBD_CDC_DeInit+0x100>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3326      	adds	r3, #38	; 0x26
 80046fe:	2200      	movs	r2, #0
 8004700:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	32b0      	adds	r2, #176	; 0xb0
 800470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01f      	beq.n	8004754 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	33b0      	adds	r3, #176	; 0xb0
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	32b0      	adds	r2, #176	; 0xb0
 8004732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004736:	4618      	mov	r0, r3
 8004738:	f002 fb4a 	bl	8006dd0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	32b0      	adds	r2, #176	; 0xb0
 8004746:	2100      	movs	r1, #0
 8004748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000093 	.word	0x20000093
 8004764:	20000094 	.word	0x20000094
 8004768:	20000095 	.word	0x20000095

0800476c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	32b0      	adds	r2, #176	; 0xb0
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004798:	2303      	movs	r3, #3
 800479a:	e0bf      	b.n	800491c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d050      	beq.n	800484a <USBD_CDC_Setup+0xde>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 80af 	bne.w	800490c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	88db      	ldrh	r3, [r3, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03a      	beq.n	800482c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da1b      	bge.n	80047f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	33b0      	adds	r3, #176	; 0xb0
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80047d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	88d2      	ldrh	r2, [r2, #6]
 80047dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	88db      	ldrh	r3, [r3, #6]
 80047e2:	2b07      	cmp	r3, #7
 80047e4:	bf28      	it	cs
 80047e6:	2307      	movcs	r3, #7
 80047e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	89fa      	ldrh	r2, [r7, #14]
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fd89 	bl	8006308 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80047f6:	e090      	b.n	800491a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	785a      	ldrb	r2, [r3, #1]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	88db      	ldrh	r3, [r3, #6]
 8004806:	2b3f      	cmp	r3, #63	; 0x3f
 8004808:	d803      	bhi.n	8004812 <USBD_CDC_Setup+0xa6>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	88db      	ldrh	r3, [r3, #6]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	e000      	b.n	8004814 <USBD_CDC_Setup+0xa8>
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800481a:	6939      	ldr	r1, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004822:	461a      	mov	r2, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 fd9b 	bl	8006360 <USBD_CtlPrepareRx>
      break;
 800482a:	e076      	b.n	800491a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	33b0      	adds	r3, #176	; 0xb0
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	7850      	ldrb	r0, [r2, #1]
 8004842:	2200      	movs	r2, #0
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4798      	blx	r3
      break;
 8004848:	e067      	b.n	800491a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b0b      	cmp	r3, #11
 8004850:	d851      	bhi.n	80048f6 <USBD_CDC_Setup+0x18a>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <USBD_CDC_Setup+0xec>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004889 	.word	0x08004889
 800485c:	08004905 	.word	0x08004905
 8004860:	080048f7 	.word	0x080048f7
 8004864:	080048f7 	.word	0x080048f7
 8004868:	080048f7 	.word	0x080048f7
 800486c:	080048f7 	.word	0x080048f7
 8004870:	080048f7 	.word	0x080048f7
 8004874:	080048f7 	.word	0x080048f7
 8004878:	080048f7 	.word	0x080048f7
 800487c:	080048f7 	.word	0x080048f7
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048dd 	.word	0x080048dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b03      	cmp	r3, #3
 8004892:	d107      	bne.n	80048a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004894:	f107 030a 	add.w	r3, r7, #10
 8004898:	2202      	movs	r2, #2
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 fd33 	bl	8006308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048a2:	e032      	b.n	800490a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f001 fcbd 	bl	8006226 <USBD_CtlError>
            ret = USBD_FAIL;
 80048ac:	2303      	movs	r3, #3
 80048ae:	75fb      	strb	r3, [r7, #23]
          break;
 80048b0:	e02b      	b.n	800490a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d107      	bne.n	80048ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80048be:	f107 030d 	add.w	r3, r7, #13
 80048c2:	2201      	movs	r2, #1
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fd1e 	bl	8006308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048cc:	e01d      	b.n	800490a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fca8 	bl	8006226 <USBD_CtlError>
            ret = USBD_FAIL;
 80048d6:	2303      	movs	r3, #3
 80048d8:	75fb      	strb	r3, [r7, #23]
          break;
 80048da:	e016      	b.n	800490a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d00f      	beq.n	8004908 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f001 fc9b 	bl	8006226 <USBD_CtlError>
            ret = USBD_FAIL;
 80048f0:	2303      	movs	r3, #3
 80048f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80048f4:	e008      	b.n	8004908 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fc94 	bl	8006226 <USBD_CtlError>
          ret = USBD_FAIL;
 80048fe:	2303      	movs	r3, #3
 8004900:	75fb      	strb	r3, [r7, #23]
          break;
 8004902:	e002      	b.n	800490a <USBD_CDC_Setup+0x19e>
          break;
 8004904:	bf00      	nop
 8004906:	e008      	b.n	800491a <USBD_CDC_Setup+0x1ae>
          break;
 8004908:	bf00      	nop
      }
      break;
 800490a:	e006      	b.n	800491a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 fc89 	bl	8006226 <USBD_CtlError>
      ret = USBD_FAIL;
 8004914:	2303      	movs	r3, #3
 8004916:	75fb      	strb	r3, [r7, #23]
      break;
 8004918:	bf00      	nop
  }

  return (uint8_t)ret;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	32b0      	adds	r2, #176	; 0xb0
 8004942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800494a:	2303      	movs	r3, #3
 800494c:	e065      	b.n	8004a1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	32b0      	adds	r2, #176	; 0xb0
 8004958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 020f 	and.w	r2, r3, #15
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3318      	adds	r3, #24
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02f      	beq.n	80049d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	3318      	adds	r3, #24
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 010f 	and.w	r1, r3, #15
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	460b      	mov	r3, r1
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4403      	add	r3, r0
 80049a0:	3348      	adds	r3, #72	; 0x48
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d112      	bne.n	80049d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3318      	adds	r3, #24
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80049ca:	78f9      	ldrb	r1, [r7, #3]
 80049cc:	2300      	movs	r3, #0
 80049ce:	2200      	movs	r2, #0
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f002 f99a 	bl	8006d0a <USBD_LL_Transmit>
 80049d6:	e01f      	b.n	8004a18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	33b0      	adds	r3, #176	; 0xb0
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d010      	beq.n	8004a18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	33b0      	adds	r3, #176	; 0xb0
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	32b0      	adds	r2, #176	; 0xb0
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	32b0      	adds	r2, #176	; 0xb0
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e01a      	b.n	8004a8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f002 f998 	bl	8006d8e <USBD_LL_GetRxDataSize>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	33b0      	adds	r3, #176	; 0xb0
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a84:	4611      	mov	r1, r2
 8004a86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	32b0      	adds	r2, #176	; 0xb0
 8004aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e025      	b.n	8004b00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	33b0      	adds	r3, #176	; 0xb0
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <USBD_CDC_EP0_RxReady+0x6c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ace:	2bff      	cmp	r3, #255	; 0xff
 8004ad0:	d015      	beq.n	8004afe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	33b0      	adds	r3, #176	; 0xb0
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004aea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004af2:	b292      	uxth	r2, r2
 8004af4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b10:	2182      	movs	r1, #130	; 0x82
 8004b12:	4818      	ldr	r0, [pc, #96]	; (8004b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b14:	f000 fd4f 	bl	80055b6 <USBD_GetEpDesc>
 8004b18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4815      	ldr	r0, [pc, #84]	; (8004b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b1e:	f000 fd4a 	bl	80055b6 <USBD_GetEpDesc>
 8004b22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b24:	2181      	movs	r1, #129	; 0x81
 8004b26:	4813      	ldr	r0, [pc, #76]	; (8004b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b28:	f000 fd45 	bl	80055b6 <USBD_GetEpDesc>
 8004b2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2210      	movs	r2, #16
 8004b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b48:	711a      	strb	r2, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5c:	711a      	strb	r2, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2243      	movs	r2, #67	; 0x43
 8004b66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000050 	.word	0x20000050

08004b78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b80:	2182      	movs	r1, #130	; 0x82
 8004b82:	4818      	ldr	r0, [pc, #96]	; (8004be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b84:	f000 fd17 	bl	80055b6 <USBD_GetEpDesc>
 8004b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4815      	ldr	r0, [pc, #84]	; (8004be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b8e:	f000 fd12 	bl	80055b6 <USBD_GetEpDesc>
 8004b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b94:	2181      	movs	r1, #129	; 0x81
 8004b96:	4813      	ldr	r0, [pc, #76]	; (8004be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b98:	f000 fd0d 	bl	80055b6 <USBD_GetEpDesc>
 8004b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	711a      	strb	r2, [r3, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f042 0202 	orr.w	r2, r2, #2
 8004bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	711a      	strb	r2, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f042 0202 	orr.w	r2, r2, #2
 8004bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2243      	movs	r2, #67	; 0x43
 8004bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004bd8:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000050 	.word	0x20000050

08004be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bf0:	2182      	movs	r1, #130	; 0x82
 8004bf2:	4818      	ldr	r0, [pc, #96]	; (8004c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bf4:	f000 fcdf 	bl	80055b6 <USBD_GetEpDesc>
 8004bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4815      	ldr	r0, [pc, #84]	; (8004c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bfe:	f000 fcda 	bl	80055b6 <USBD_GetEpDesc>
 8004c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c04:	2181      	movs	r1, #129	; 0x81
 8004c06:	4813      	ldr	r0, [pc, #76]	; (8004c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c08:	f000 fcd5 	bl	80055b6 <USBD_GetEpDesc>
 8004c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2210      	movs	r2, #16
 8004c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c28:	711a      	strb	r2, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3c:	711a      	strb	r2, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2243      	movs	r2, #67	; 0x43
 8004c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000050 	.word	0x20000050

08004c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	220a      	movs	r2, #10
 8004c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	2000000c 	.word	0x2000000c

08004c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e009      	b.n	8004ca0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	33b0      	adds	r3, #176	; 0xb0
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	32b0      	adds	r2, #176	; 0xb0
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e008      	b.n	8004ce4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	32b0      	adds	r2, #176	; 0xb0
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e004      	b.n	8004d1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	32b0      	adds	r2, #176	; 0xb0
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	; 0xb0
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e025      	b.n	8004daa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11f      	bne.n	8004da8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <USBD_CDC_TransmitPacket+0x88>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4403      	add	r3, r0
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <USBD_CDC_TransmitPacket+0x88>)
 8004d90:	7819      	ldrb	r1, [r3, #0]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 ffb3 	bl	8006d0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000093 	.word	0x20000093

08004db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	32b0      	adds	r2, #176	; 0xb0
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	32b0      	adds	r2, #176	; 0xb0
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e018      	b.n	8004e18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	7c1b      	ldrb	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <USBD_CDC_ReceivePacket+0x68>)
 8004df0:	7819      	ldrb	r1, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 ffa5 	bl	8006d4c <USBD_LL_PrepareReceive>
 8004e02:	e008      	b.n	8004e16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <USBD_CDC_ReceivePacket+0x68>)
 8004e06:	7819      	ldrb	r1, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 ff9b 	bl	8006d4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000094 	.word	0x20000094

08004e24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e01f      	b.n	8004e7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	79fa      	ldrb	r2, [r7, #7]
 8004e6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f001 fe15 	bl	8006aa0 <USBD_LL_Init>
 8004e76:	4603      	mov	r3, r0
 8004e78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e025      	b.n	8004ee8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32ae      	adds	r2, #174	; 0xae
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00f      	beq.n	8004ed8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32ae      	adds	r2, #174	; 0xae
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f107 020e 	add.w	r2, r7, #14
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 fe1d 	bl	8006b38 <USBD_LL_Start>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	4611      	mov	r1, r2
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 f908 	bl	80061b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d01a      	beq.n	8004ffc <USBD_LL_SetupStage+0x72>
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d822      	bhi.n	8005010 <USBD_LL_SetupStage+0x86>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <USBD_LL_SetupStage+0x4a>
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00a      	beq.n	8004fe8 <USBD_LL_SetupStage+0x5e>
 8004fd2:	e01d      	b.n	8005010 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fb5f 	bl	80056a0 <USBD_StdDevReq>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe6:	e020      	b.n	800502a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fbc7 	bl	8005784 <USBD_StdItfReq>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffa:	e016      	b.n	800502a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fc29 	bl	800585c <USBD_StdEPReq>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
      break;
 800500e:	e00c      	b.n	800502a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800501a:	b2db      	uxtb	r3, r3
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 fdea 	bl	8006bf8 <USBD_LL_StallEP>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	bf00      	nop
  }

  return ret;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	460b      	mov	r3, r1
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005046:	7afb      	ldrb	r3, [r7, #11]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d16e      	bne.n	800512a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005052:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800505a:	2b03      	cmp	r3, #3
 800505c:	f040 8098 	bne.w	8005190 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	429a      	cmp	r2, r3
 800506a:	d913      	bls.n	8005094 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	1ad2      	subs	r2, r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4293      	cmp	r3, r2
 8005084:	bf28      	it	cs
 8005086:	4613      	movcs	r3, r2
 8005088:	461a      	mov	r2, r3
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 f984 	bl	800639a <USBD_CtlContinueRx>
 8005092:	e07d      	b.n	8005190 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d014      	beq.n	80050cc <USBD_LL_DataOutStage+0x98>
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d81d      	bhi.n	80050e2 <USBD_LL_DataOutStage+0xae>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <USBD_LL_DataOutStage+0x7c>
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d003      	beq.n	80050b6 <USBD_LL_DataOutStage+0x82>
 80050ae:	e018      	b.n	80050e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	75bb      	strb	r3, [r7, #22]
            break;
 80050b4:	e018      	b.n	80050e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4619      	mov	r1, r3
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fa5e 	bl	8005582 <USBD_CoreFindIF>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75bb      	strb	r3, [r7, #22]
            break;
 80050ca:	e00d      	b.n	80050e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	4619      	mov	r1, r3
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa60 	bl	800559c <USBD_CoreFindEP>
 80050dc:	4603      	mov	r3, r0
 80050de:	75bb      	strb	r3, [r7, #22]
            break;
 80050e0:	e002      	b.n	80050e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75bb      	strb	r3, [r7, #22]
            break;
 80050e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80050e8:	7dbb      	ldrb	r3, [r7, #22]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d119      	bne.n	8005122 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d113      	bne.n	8005122 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80050fa:	7dba      	ldrb	r2, [r7, #22]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	32ae      	adds	r2, #174	; 0xae
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800510a:	7dba      	ldrb	r2, [r7, #22]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005112:	7dba      	ldrb	r2, [r7, #22]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	32ae      	adds	r2, #174	; 0xae
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f001 f94a 	bl	80063bc <USBD_CtlSendStatus>
 8005128:	e032      	b.n	8005190 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800512a:	7afb      	ldrb	r3, [r7, #11]
 800512c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005130:	b2db      	uxtb	r3, r3
 8005132:	4619      	mov	r1, r3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa31 	bl	800559c <USBD_CoreFindEP>
 800513a:	4603      	mov	r3, r0
 800513c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800513e:	7dbb      	ldrb	r3, [r7, #22]
 8005140:	2bff      	cmp	r3, #255	; 0xff
 8005142:	d025      	beq.n	8005190 <USBD_LL_DataOutStage+0x15c>
 8005144:	7dbb      	ldrb	r3, [r7, #22]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d122      	bne.n	8005190 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d117      	bne.n	8005186 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005156:	7dba      	ldrb	r2, [r7, #22]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	32ae      	adds	r2, #174	; 0xae
 800515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00f      	beq.n	8005186 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005166:	7dba      	ldrb	r2, [r7, #22]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800516e:	7dba      	ldrb	r2, [r7, #22]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	32ae      	adds	r2, #174	; 0xae
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	7afa      	ldrb	r2, [r7, #11]
 800517c:	4611      	mov	r1, r2
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	4798      	blx	r3
 8005182:	4603      	mov	r3, r0
 8005184:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	e000      	b.n	8005192 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	460b      	mov	r3, r1
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d16f      	bne.n	800528e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3314      	adds	r3, #20
 80051b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d15a      	bne.n	8005274 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d914      	bls.n	80051f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	1ad2      	subs	r2, r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	461a      	mov	r2, r3
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f001 f8ac 	bl	800633e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051e6:	2300      	movs	r3, #0
 80051e8:	2200      	movs	r2, #0
 80051ea:	2100      	movs	r1, #0
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f001 fdad 	bl	8006d4c <USBD_LL_PrepareReceive>
 80051f2:	e03f      	b.n	8005274 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d11c      	bne.n	800523a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005208:	429a      	cmp	r2, r3
 800520a:	d316      	bcc.n	800523a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005216:	429a      	cmp	r2, r3
 8005218:	d20f      	bcs.n	800523a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f001 f88d 	bl	800633e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800522c:	2300      	movs	r3, #0
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f001 fd8a 	bl	8006d4c <USBD_LL_PrepareReceive>
 8005238:	e01c      	b.n	8005274 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d10f      	bne.n	8005266 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f001 fcc5 	bl	8006bf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f001 f8b7 	bl	80063e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d03a      	beq.n	80052f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff fe42 	bl	8004f08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800528c:	e032      	b.n	80052f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005294:	b2db      	uxtb	r3, r3
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f97f 	bl	800559c <USBD_CoreFindEP>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	d025      	beq.n	80052f4 <USBD_LL_DataInStage+0x15a>
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d122      	bne.n	80052f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d11c      	bne.n	80052f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80052ba:	7dfa      	ldrb	r2, [r7, #23]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	32ae      	adds	r2, #174	; 0xae
 80052c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d014      	beq.n	80052f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80052ca:	7dfa      	ldrb	r2, [r7, #23]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80052d2:	7dfa      	ldrb	r2, [r7, #23]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	32ae      	adds	r2, #174	; 0xae
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	7afa      	ldrb	r2, [r7, #11]
 80052e0:	4611      	mov	r1, r2
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	4798      	blx	r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80052ea:	7dbb      	ldrb	r3, [r7, #22]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80052f0:	7dbb      	ldrb	r3, [r7, #22]
 80052f2:	e000      	b.n	80052f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d014      	beq.n	8005364 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	4611      	mov	r1, r2
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	2200      	movs	r2, #0
 8005368:	2100      	movs	r1, #0
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fbff 	bl	8006b6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fbf1 	bl	8006b6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	621a      	str	r2, [r3, #32]

  return ret;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2204      	movs	r2, #4
 80053dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d106      	bne.n	8005410 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005408:	b2da      	uxtb	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d110      	bne.n	8005454 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	32ae      	adds	r2, #174	; 0xae
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800547c:	2303      	movs	r3, #3
 800547e:	e01c      	b.n	80054ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b03      	cmp	r3, #3
 800548a:	d115      	bne.n	80054b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32ae      	adds	r2, #174	; 0xae
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	32ae      	adds	r2, #174	; 0xae
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	4611      	mov	r1, r2
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	32ae      	adds	r2, #174	; 0xae
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e01c      	b.n	800551e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d115      	bne.n	800551c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	32ae      	adds	r2, #174	; 0xae
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	32ae      	adds	r2, #174	; 0xae
 800550e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	78fa      	ldrb	r2, [r7, #3]
 8005516:	4611      	mov	r1, r2
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	4611      	mov	r1, r2
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800558e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80055a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	885b      	ldrh	r3, [r3, #2]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	429a      	cmp	r2, r3
 80055dc:	d920      	bls.n	8005620 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80055e6:	e013      	b.n	8005610 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80055e8:	f107 030a 	add.w	r3, r7, #10
 80055ec:	4619      	mov	r1, r3
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f000 f81b 	bl	800562a <USBD_GetNextDesc>
 80055f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d108      	bne.n	8005610 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	789b      	ldrb	r3, [r3, #2]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	429a      	cmp	r2, r3
 800560a:	d008      	beq.n	800561e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	885b      	ldrh	r3, [r3, #2]
 8005614:	b29a      	uxth	r2, r3
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	429a      	cmp	r2, r3
 800561a:	d8e5      	bhi.n	80055e8 <USBD_GetEpDesc+0x32>
 800561c:	e000      	b.n	8005620 <USBD_GetEpDesc+0x6a>
          break;
 800561e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005620:	693b      	ldr	r3, [r7, #16]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4413      	add	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	3301      	adds	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005682:	8a3b      	ldrh	r3, [r7, #16]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	b21a      	sxth	r2, r3
 8005688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800568c:	4313      	orrs	r3, r2
 800568e:	b21b      	sxth	r3, r3
 8005690:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005692:	89fb      	ldrh	r3, [r7, #14]
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d005      	beq.n	80056c6 <USBD_StdDevReq+0x26>
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d857      	bhi.n	800576e <USBD_StdDevReq+0xce>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00f      	beq.n	80056e2 <USBD_StdDevReq+0x42>
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d153      	bne.n	800576e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	32ae      	adds	r2, #174	; 0xae
 80056d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e04a      	b.n	8005778 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b09      	cmp	r3, #9
 80056e8:	d83b      	bhi.n	8005762 <USBD_StdDevReq+0xc2>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <USBD_StdDevReq+0x50>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005745 	.word	0x08005745
 80056f4:	08005759 	.word	0x08005759
 80056f8:	08005763 	.word	0x08005763
 80056fc:	0800574f 	.word	0x0800574f
 8005700:	08005763 	.word	0x08005763
 8005704:	08005723 	.word	0x08005723
 8005708:	08005719 	.word	0x08005719
 800570c:	08005763 	.word	0x08005763
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800572d 	.word	0x0800572d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa3c 	bl	8005b98 <USBD_GetDescriptor>
          break;
 8005720:	e024      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fba1 	bl	8005e6c <USBD_SetAddress>
          break;
 800572a:	e01f      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fbe0 	bl	8005ef4 <USBD_SetConfig>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
          break;
 8005738:	e018      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fc83 	bl	8006048 <USBD_GetConfig>
          break;
 8005742:	e013      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fcb4 	bl	80060b4 <USBD_GetStatus>
          break;
 800574c:	e00e      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fce3 	bl	800611c <USBD_SetFeature>
          break;
 8005756:	e009      	b.n	800576c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fd07 	bl	800616e <USBD_ClrFeature>
          break;
 8005760:	e004      	b.n	800576c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fd5e 	bl	8006226 <USBD_CtlError>
          break;
 800576a:	bf00      	nop
      }
      break;
 800576c:	e004      	b.n	8005778 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fd58 	bl	8006226 <USBD_CtlError>
      break;
 8005776:	bf00      	nop
  }

  return ret;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop

08005784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d005      	beq.n	80057aa <USBD_StdItfReq+0x26>
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d852      	bhi.n	8005848 <USBD_StdItfReq+0xc4>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <USBD_StdItfReq+0x26>
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d14e      	bne.n	8005848 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d840      	bhi.n	800583a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	889b      	ldrh	r3, [r3, #4]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d836      	bhi.n	8005830 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	889b      	ldrh	r3, [r3, #4]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fed9 	bl	8005582 <USBD_CoreFindIF>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	2bff      	cmp	r3, #255	; 0xff
 80057d8:	d01d      	beq.n	8005816 <USBD_StdItfReq+0x92>
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11a      	bne.n	8005816 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80057e0:	7bba      	ldrb	r2, [r7, #14]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	32ae      	adds	r2, #174	; 0xae
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80057f0:	7bba      	ldrb	r2, [r7, #14]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057f8:	7bba      	ldrb	r2, [r7, #14]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	32ae      	adds	r2, #174	; 0xae
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
 800580a:	4603      	mov	r3, r0
 800580c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800580e:	e004      	b.n	800581a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005814:	e001      	b.n	800581a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005816:	2303      	movs	r3, #3
 8005818:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	88db      	ldrh	r3, [r3, #6]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d110      	bne.n	8005844 <USBD_StdItfReq+0xc0>
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fdc7 	bl	80063bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800582e:	e009      	b.n	8005844 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fcf7 	bl	8006226 <USBD_CtlError>
          break;
 8005838:	e004      	b.n	8005844 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fcf2 	bl	8006226 <USBD_CtlError>
          break;
 8005842:	e000      	b.n	8005846 <USBD_StdItfReq+0xc2>
          break;
 8005844:	bf00      	nop
      }
      break;
 8005846:	e004      	b.n	8005852 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fceb 	bl	8006226 <USBD_CtlError>
      break;
 8005850:	bf00      	nop
  }

  return ret;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	889b      	ldrh	r3, [r3, #4]
 800586e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d007      	beq.n	800588c <USBD_StdEPReq+0x30>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	f200 817f 	bhi.w	8005b80 <USBD_StdEPReq+0x324>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02a      	beq.n	80058dc <USBD_StdEPReq+0x80>
 8005886:	2b20      	cmp	r3, #32
 8005888:	f040 817a 	bne.w	8005b80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fe83 	bl	800559c <USBD_CoreFindEP>
 8005896:	4603      	mov	r3, r0
 8005898:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800589a:	7b7b      	ldrb	r3, [r7, #13]
 800589c:	2bff      	cmp	r3, #255	; 0xff
 800589e:	f000 8174 	beq.w	8005b8a <USBD_StdEPReq+0x32e>
 80058a2:	7b7b      	ldrb	r3, [r7, #13]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f040 8170 	bne.w	8005b8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80058aa:	7b7a      	ldrb	r2, [r7, #13]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80058b2:	7b7a      	ldrb	r2, [r7, #13]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	32ae      	adds	r2, #174	; 0xae
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8163 	beq.w	8005b8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80058c4:	7b7a      	ldrb	r2, [r7, #13]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	32ae      	adds	r2, #174	; 0xae
 80058ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058da:	e156      	b.n	8005b8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d008      	beq.n	80058f6 <USBD_StdEPReq+0x9a>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	f300 8145 	bgt.w	8005b74 <USBD_StdEPReq+0x318>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 809b 	beq.w	8005a26 <USBD_StdEPReq+0x1ca>
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d03c      	beq.n	800596e <USBD_StdEPReq+0x112>
 80058f4:	e13e      	b.n	8005b74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d002      	beq.n	8005908 <USBD_StdEPReq+0xac>
 8005902:	2b03      	cmp	r3, #3
 8005904:	d016      	beq.n	8005934 <USBD_StdEPReq+0xd8>
 8005906:	e02c      	b.n	8005962 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <USBD_StdEPReq+0xce>
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d00a      	beq.n	800592a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f96d 	bl	8006bf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800591e:	2180      	movs	r1, #128	; 0x80
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 f969 	bl	8006bf8 <USBD_LL_StallEP>
 8005926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005928:	e020      	b.n	800596c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc7a 	bl	8006226 <USBD_CtlError>
              break;
 8005932:	e01b      	b.n	800596c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	885b      	ldrh	r3, [r3, #2]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10e      	bne.n	800595a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <USBD_StdEPReq+0xfe>
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d008      	beq.n	800595a <USBD_StdEPReq+0xfe>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	88db      	ldrh	r3, [r3, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f94f 	bl	8006bf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fd2e 	bl	80063bc <USBD_CtlSendStatus>

              break;
 8005960:	e004      	b.n	800596c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc5e 	bl	8006226 <USBD_CtlError>
              break;
 800596a:	bf00      	nop
          }
          break;
 800596c:	e107      	b.n	8005b7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d002      	beq.n	8005980 <USBD_StdEPReq+0x124>
 800597a:	2b03      	cmp	r3, #3
 800597c:	d016      	beq.n	80059ac <USBD_StdEPReq+0x150>
 800597e:	e04b      	b.n	8005a18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <USBD_StdEPReq+0x146>
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d00a      	beq.n	80059a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f931 	bl	8006bf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f92d 	bl	8006bf8 <USBD_LL_StallEP>
 800599e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059a0:	e040      	b.n	8005a24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fc3e 	bl	8006226 <USBD_CtlError>
              break;
 80059aa:	e03b      	b.n	8005a24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	885b      	ldrh	r3, [r3, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d136      	bne.n	8005a22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80059be:	7bbb      	ldrb	r3, [r7, #14]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f937 	bl	8006c36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fcf7 	bl	80063bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fde2 	bl	800559c <USBD_CoreFindEP>
 80059d8:	4603      	mov	r3, r0
 80059da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	2bff      	cmp	r3, #255	; 0xff
 80059e0:	d01f      	beq.n	8005a22 <USBD_StdEPReq+0x1c6>
 80059e2:	7b7b      	ldrb	r3, [r7, #13]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11c      	bne.n	8005a22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80059e8:	7b7a      	ldrb	r2, [r7, #13]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80059f0:	7b7a      	ldrb	r2, [r7, #13]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	32ae      	adds	r2, #174	; 0xae
 80059f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a00:	7b7a      	ldrb	r2, [r7, #13]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	32ae      	adds	r2, #174	; 0xae
 8005a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005a16:	e004      	b.n	8005a22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fc03 	bl	8006226 <USBD_CtlError>
              break;
 8005a20:	e000      	b.n	8005a24 <USBD_StdEPReq+0x1c8>
              break;
 8005a22:	bf00      	nop
          }
          break;
 8005a24:	e0ab      	b.n	8005b7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d002      	beq.n	8005a38 <USBD_StdEPReq+0x1dc>
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d032      	beq.n	8005a9c <USBD_StdEPReq+0x240>
 8005a36:	e097      	b.n	8005b68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <USBD_StdEPReq+0x1f2>
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d004      	beq.n	8005a4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fbed 	bl	8006226 <USBD_CtlError>
                break;
 8005a4c:	e091      	b.n	8005b72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da0b      	bge.n	8005a6e <USBD_StdEPReq+0x212>
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	3310      	adds	r3, #16
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	e00b      	b.n	8005a86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2202      	movs	r2, #2
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fc37 	bl	8006308 <USBD_CtlSendData>
              break;
 8005a9a:	e06a      	b.n	8005b72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da11      	bge.n	8005ac8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d117      	bne.n	8005aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fbb0 	bl	8006226 <USBD_CtlError>
                  break;
 8005ac6:	e054      	b.n	8005b72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb9d 	bl	8006226 <USBD_CtlError>
                  break;
 8005aec:	e041      	b.n	8005b72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da0b      	bge.n	8005b0e <USBD_StdEPReq+0x2b2>
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	3310      	adds	r3, #16
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	e00b      	b.n	8005b26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <USBD_StdEPReq+0x2d8>
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d103      	bne.n	8005b3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e00e      	b.n	8005b5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f897 	bl	8006c74 <USBD_LL_IsStallEP>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fbd1 	bl	8006308 <USBD_CtlSendData>
              break;
 8005b66:	e004      	b.n	8005b72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb5b 	bl	8006226 <USBD_CtlError>
              break;
 8005b70:	bf00      	nop
          }
          break;
 8005b72:	e004      	b.n	8005b7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb55 	bl	8006226 <USBD_CtlError>
          break;
 8005b7c:	bf00      	nop
      }
      break;
 8005b7e:	e005      	b.n	8005b8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fb4f 	bl	8006226 <USBD_CtlError>
      break;
 8005b88:	e000      	b.n	8005b8c <USBD_StdEPReq+0x330>
      break;
 8005b8a:	bf00      	nop
  }

  return ret;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	885b      	ldrh	r3, [r3, #2]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	f200 8128 	bhi.w	8005e0e <USBD_GetDescriptor+0x276>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <USBD_GetDescriptor+0x2c>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	08005bf9 	.word	0x08005bf9
 8005bcc:	08005c39 	.word	0x08005c39
 8005bd0:	08005e0f 	.word	0x08005e0f
 8005bd4:	08005e0f 	.word	0x08005e0f
 8005bd8:	08005daf 	.word	0x08005daf
 8005bdc:	08005ddb 	.word	0x08005ddb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	7c12      	ldrb	r2, [r2, #16]
 8005bec:	f107 0108 	add.w	r1, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
      break;
 8005bf6:	e112      	b.n	8005e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1b      	ldrb	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10d      	bne.n	8005c1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f107 0208 	add.w	r2, r7, #8
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	2202      	movs	r2, #2
 8005c18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c1a:	e100      	b.n	8005e1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	f107 0208 	add.w	r2, r7, #8
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4798      	blx	r3
 8005c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	2202      	movs	r2, #2
 8005c34:	701a      	strb	r2, [r3, #0]
      break;
 8005c36:	e0f2      	b.n	8005e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	885b      	ldrh	r3, [r3, #2]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	f200 80ac 	bhi.w	8005d9c <USBD_GetDescriptor+0x204>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <USBD_GetDescriptor+0xb4>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c65 	.word	0x08005c65
 8005c50:	08005c99 	.word	0x08005c99
 8005c54:	08005ccd 	.word	0x08005ccd
 8005c58:	08005d01 	.word	0x08005d01
 8005c5c:	08005d35 	.word	0x08005d35
 8005c60:	08005d69 	.word	0x08005d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	7c12      	ldrb	r2, [r2, #16]
 8005c7c:	f107 0108 	add.w	r1, r7, #8
 8005c80:	4610      	mov	r0, r2
 8005c82:	4798      	blx	r3
 8005c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c86:	e091      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 facb 	bl	8006226 <USBD_CtlError>
            err++;
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	3301      	adds	r3, #1
 8005c94:	72fb      	strb	r3, [r7, #11]
          break;
 8005c96:	e089      	b.n	8005dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	7c12      	ldrb	r2, [r2, #16]
 8005cb0:	f107 0108 	add.w	r1, r7, #8
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cba:	e077      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fab1 	bl	8006226 <USBD_CtlError>
            err++;
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cca:	e06f      	b.n	8005dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7c12      	ldrb	r2, [r2, #16]
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cee:	e05d      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa97 	bl	8006226 <USBD_CtlError>
            err++;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfe:	e055      	b.n	8005dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d22:	e043      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa7d 	bl	8006226 <USBD_CtlError>
            err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
          break;
 8005d32:	e03b      	b.n	8005dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e029      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa63 	bl	8006226 <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e021      	b.n	8005dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e00f      	b.n	8005dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa49 	bl	8006226 <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e007      	b.n	8005dac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa41 	bl	8006226 <USBD_CtlError>
          err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005daa:	bf00      	nop
      }
      break;
 8005dac:	e037      	b.n	8005e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c1b      	ldrb	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4798      	blx	r3
 8005dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dc8:	e029      	b.n	8005e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fa2a 	bl	8006226 <USBD_CtlError>
        err++;
 8005dd2:	7afb      	ldrb	r3, [r7, #11]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8005dd8:	e021      	b.n	8005e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7c1b      	ldrb	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f107 0208 	add.w	r2, r7, #8
 8005dee:	4610      	mov	r0, r2
 8005df0:	4798      	blx	r3
 8005df2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	2207      	movs	r2, #7
 8005dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dfc:	e00f      	b.n	8005e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fa10 	bl	8006226 <USBD_CtlError>
        err++;
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e0c:	e007      	b.n	8005e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa08 	bl	8006226 <USBD_CtlError>
      err++;
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e1c:	bf00      	nop
  }

  if (err != 0U)
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11e      	bne.n	8005e62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	88db      	ldrh	r3, [r3, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d016      	beq.n	8005e5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005e2c:	893b      	ldrh	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88da      	ldrh	r2, [r3, #6]
 8005e36:	893b      	ldrh	r3, [r7, #8]
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	bf28      	it	cs
 8005e3c:	4613      	movcs	r3, r2
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e42:	893b      	ldrh	r3, [r7, #8]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fa5d 	bl	8006308 <USBD_CtlSendData>
 8005e4e:	e009      	b.n	8005e64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9e7 	bl	8006226 <USBD_CtlError>
 8005e58:	e004      	b.n	8005e64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 faae 	bl	80063bc <USBD_CtlSendStatus>
 8005e60:	e000      	b.n	8005e64 <USBD_GetDescriptor+0x2cc>
    return;
 8005e62:	bf00      	nop
  }
}
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d131      	bne.n	8005ee2 <USBD_SetAddress+0x76>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d12d      	bne.n	8005ee2 <USBD_SetAddress+0x76>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d829      	bhi.n	8005ee2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d104      	bne.n	8005eb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f9bc 	bl	8006226 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eae:	e01d      	b.n	8005eec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 ff05 	bl	8006ccc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa7a 	bl	80063bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed6:	e009      	b.n	8005eec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee0:	e004      	b.n	8005eec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f99e 	bl	8006226 <USBD_CtlError>
  }
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	4b4e      	ldr	r3, [pc, #312]	; (8006044 <USBD_SetConfig+0x150>)
 8005f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f0c:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <USBD_SetConfig+0x150>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d905      	bls.n	8005f20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f985 	bl	8006226 <USBD_CtlError>
    return USBD_FAIL;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e08c      	b.n	800603a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d002      	beq.n	8005f32 <USBD_SetConfig+0x3e>
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d029      	beq.n	8005f84 <USBD_SetConfig+0x90>
 8005f30:	e075      	b.n	800601e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005f32:	4b44      	ldr	r3, [pc, #272]	; (8006044 <USBD_SetConfig+0x150>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d020      	beq.n	8005f7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005f3a:	4b42      	ldr	r3, [pc, #264]	; (8006044 <USBD_SetConfig+0x150>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f44:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <USBD_SetConfig+0x150>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fe ffe7 	bl	8004f1e <USBD_SetClassConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f962 	bl	8006226 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f6a:	e065      	b.n	8006038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa25 	bl	80063bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2203      	movs	r2, #3
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f7a:	e05d      	b.n	8006038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa1d 	bl	80063bc <USBD_CtlSendStatus>
      break;
 8005f82:	e059      	b.n	8006038 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f84:	4b2f      	ldr	r3, [pc, #188]	; (8006044 <USBD_SetConfig+0x150>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d112      	bne.n	8005fb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f94:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <USBD_SetConfig+0x150>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f9e:	4b29      	ldr	r3, [pc, #164]	; (8006044 <USBD_SetConfig+0x150>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fe ffd6 	bl	8004f56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa06 	bl	80063bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fb0:	e042      	b.n	8006038 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <USBD_SetConfig+0x150>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d02a      	beq.n	8006016 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fe ffc4 	bl	8004f56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005fce:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <USBD_SetConfig+0x150>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <USBD_SetConfig+0x150>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fe ff9d 	bl	8004f1e <USBD_SetClassConfig>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00f      	beq.n	800600e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f918 	bl	8006226 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fe ffa9 	bl	8004f56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800600c:	e014      	b.n	8006038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9d4 	bl	80063bc <USBD_CtlSendStatus>
      break;
 8006014:	e010      	b.n	8006038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9d0 	bl	80063bc <USBD_CtlSendStatus>
      break;
 800601c:	e00c      	b.n	8006038 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f900 	bl	8006226 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <USBD_SetConfig+0x150>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fe ff92 	bl	8004f56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]
      break;
 8006036:	bf00      	nop
  }

  return ret;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000138 	.word	0x20000138

08006048 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	88db      	ldrh	r3, [r3, #6]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d004      	beq.n	8006064 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8e2 	bl	8006226 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006062:	e023      	b.n	80060ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	dc02      	bgt.n	8006076 <USBD_GetConfig+0x2e>
 8006070:	2b00      	cmp	r3, #0
 8006072:	dc03      	bgt.n	800607c <USBD_GetConfig+0x34>
 8006074:	e015      	b.n	80060a2 <USBD_GetConfig+0x5a>
 8006076:	2b03      	cmp	r3, #3
 8006078:	d00b      	beq.n	8006092 <USBD_GetConfig+0x4a>
 800607a:	e012      	b.n	80060a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3308      	adds	r3, #8
 8006086:	2201      	movs	r2, #1
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f93c 	bl	8006308 <USBD_CtlSendData>
        break;
 8006090:	e00c      	b.n	80060ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f934 	bl	8006308 <USBD_CtlSendData>
        break;
 80060a0:	e004      	b.n	80060ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8be 	bl	8006226 <USBD_CtlError>
        break;
 80060aa:	bf00      	nop
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d81e      	bhi.n	800610a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	88db      	ldrh	r3, [r3, #6]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d004      	beq.n	80060de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f8a5 	bl	8006226 <USBD_CtlError>
        break;
 80060dc:	e01a      	b.n	8006114 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f043 0202 	orr.w	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	330c      	adds	r3, #12
 80060fe:	2202      	movs	r2, #2
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f900 	bl	8006308 <USBD_CtlSendData>
      break;
 8006108:	e004      	b.n	8006114 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f88a 	bl	8006226 <USBD_CtlError>
      break;
 8006112:	bf00      	nop
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	885b      	ldrh	r3, [r3, #2]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f940 	bl	80063bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800613c:	e013      	b.n	8006166 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d10b      	bne.n	800615e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	889b      	ldrh	r3, [r3, #4]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	b2da      	uxtb	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f930 	bl	80063bc <USBD_CtlSendStatus>
}
 800615c:	e003      	b.n	8006166 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f860 	bl	8006226 <USBD_CtlError>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	2b02      	cmp	r3, #2
 8006184:	d80b      	bhi.n	800619e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	885b      	ldrh	r3, [r3, #2]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10c      	bne.n	80061a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f910 	bl	80063bc <USBD_CtlSendStatus>
      }
      break;
 800619c:	e004      	b.n	80061a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f840 	bl	8006226 <USBD_CtlError>
      break;
 80061a6:	e000      	b.n	80061aa <USBD_ClrFeature+0x3c>
      break;
 80061a8:	bf00      	nop
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff fa41 	bl	8005664 <SWAPBYTE>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fa34 	bl	8005664 <SWAPBYTE>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3301      	adds	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fa27 	bl	8005664 <SWAPBYTE>
 8006216:	4603      	mov	r3, r0
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	80da      	strh	r2, [r3, #6]
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fce0 	bl	8006bf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fcdc 	bl	8006bf8 <USBD_LL_StallEP>
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d036      	beq.n	80062cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006262:	6938      	ldr	r0, [r7, #16]
 8006264:	f000 f836 	bl	80062d4 <USBD_GetLen>
 8006268:	4603      	mov	r3, r0
 800626a:	3301      	adds	r3, #1
 800626c:	b29b      	uxth	r3, r3
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	701a      	strb	r2, [r3, #0]
  idx++;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	3301      	adds	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	2203      	movs	r2, #3
 8006290:	701a      	strb	r2, [r3, #0]
  idx++;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	3301      	adds	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006298:	e013      	b.n	80062c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4413      	add	r3, r2
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	7812      	ldrb	r2, [r2, #0]
 80062a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
    idx++;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	3301      	adds	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	4413      	add	r3, r2
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	3301      	adds	r3, #1
 80062c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e7      	bne.n	800629a <USBD_GetString+0x52>
 80062ca:	e000      	b.n	80062ce <USBD_GetString+0x86>
    return;
 80062cc:	bf00      	nop
  }
}
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80062e4:	e005      	b.n	80062f2 <USBD_GetLen+0x1e>
  {
    len++;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	3301      	adds	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f5      	bne.n	80062e6 <USBD_GetLen+0x12>
  }

  return len;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2202      	movs	r2, #2
 8006318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	2100      	movs	r1, #0
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fceb 	bl	8006d0a <USBD_LL_Transmit>

  return USBD_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	2100      	movs	r1, #0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fcda 	bl	8006d0a <USBD_LL_Transmit>

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2203      	movs	r2, #3
 8006370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	2100      	movs	r1, #0
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fcde 	bl	8006d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	2100      	movs	r1, #0
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fccd 	bl	8006d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc99 	bl	8006d0a <USBD_LL_Transmit>

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2205      	movs	r2, #5
 80063ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f2:	2300      	movs	r3, #0
 80063f4:	2200      	movs	r2, #0
 80063f6:	2100      	movs	r1, #0
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fca7 	bl	8006d4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800640c:	2200      	movs	r2, #0
 800640e:	4912      	ldr	r1, [pc, #72]	; (8006458 <MX_USB_DEVICE_Init+0x50>)
 8006410:	4812      	ldr	r0, [pc, #72]	; (800645c <MX_USB_DEVICE_Init+0x54>)
 8006412:	f7fe fd07 	bl	8004e24 <USBD_Init>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800641c:	f7fa f90e 	bl	800063c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006420:	490f      	ldr	r1, [pc, #60]	; (8006460 <MX_USB_DEVICE_Init+0x58>)
 8006422:	480e      	ldr	r0, [pc, #56]	; (800645c <MX_USB_DEVICE_Init+0x54>)
 8006424:	f7fe fd2e 	bl	8004e84 <USBD_RegisterClass>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800642e:	f7fa f905 	bl	800063c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006432:	490c      	ldr	r1, [pc, #48]	; (8006464 <MX_USB_DEVICE_Init+0x5c>)
 8006434:	4809      	ldr	r0, [pc, #36]	; (800645c <MX_USB_DEVICE_Init+0x54>)
 8006436:	f7fe fc1f 	bl	8004c78 <USBD_CDC_RegisterInterface>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006440:	f7fa f8fc 	bl	800063c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006444:	4805      	ldr	r0, [pc, #20]	; (800645c <MX_USB_DEVICE_Init+0x54>)
 8006446:	f7fe fd53 	bl	8004ef0 <USBD_Start>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006450:	f7fa f8f4 	bl	800063c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	200000ac 	.word	0x200000ac
 800645c:	2000013c 	.word	0x2000013c
 8006460:	20000018 	.word	0x20000018
 8006464:	20000098 	.word	0x20000098

08006468 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800646c:	2200      	movs	r2, #0
 800646e:	4905      	ldr	r1, [pc, #20]	; (8006484 <CDC_Init_FS+0x1c>)
 8006470:	4805      	ldr	r0, [pc, #20]	; (8006488 <CDC_Init_FS+0x20>)
 8006472:	f7fe fc1b 	bl	8004cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006476:	4905      	ldr	r1, [pc, #20]	; (800648c <CDC_Init_FS+0x24>)
 8006478:	4803      	ldr	r0, [pc, #12]	; (8006488 <CDC_Init_FS+0x20>)
 800647a:	f7fe fc39 	bl	8004cf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800647e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000c18 	.word	0x20000c18
 8006488:	2000013c 	.word	0x2000013c
 800648c:	20000418 	.word	0x20000418

08006490 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006494:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	71fb      	strb	r3, [r7, #7]
 80064ac:	4613      	mov	r3, r2
 80064ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2b23      	cmp	r3, #35	; 0x23
 80064b4:	d84a      	bhi.n	800654c <CDC_Control_FS+0xac>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <CDC_Control_FS+0x1c>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	0800654d 	.word	0x0800654d
 80064c0:	0800654d 	.word	0x0800654d
 80064c4:	0800654d 	.word	0x0800654d
 80064c8:	0800654d 	.word	0x0800654d
 80064cc:	0800654d 	.word	0x0800654d
 80064d0:	0800654d 	.word	0x0800654d
 80064d4:	0800654d 	.word	0x0800654d
 80064d8:	0800654d 	.word	0x0800654d
 80064dc:	0800654d 	.word	0x0800654d
 80064e0:	0800654d 	.word	0x0800654d
 80064e4:	0800654d 	.word	0x0800654d
 80064e8:	0800654d 	.word	0x0800654d
 80064ec:	0800654d 	.word	0x0800654d
 80064f0:	0800654d 	.word	0x0800654d
 80064f4:	0800654d 	.word	0x0800654d
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	0800654d 	.word	0x0800654d
 8006500:	0800654d 	.word	0x0800654d
 8006504:	0800654d 	.word	0x0800654d
 8006508:	0800654d 	.word	0x0800654d
 800650c:	0800654d 	.word	0x0800654d
 8006510:	0800654d 	.word	0x0800654d
 8006514:	0800654d 	.word	0x0800654d
 8006518:	0800654d 	.word	0x0800654d
 800651c:	0800654d 	.word	0x0800654d
 8006520:	0800654d 	.word	0x0800654d
 8006524:	0800654d 	.word	0x0800654d
 8006528:	0800654d 	.word	0x0800654d
 800652c:	0800654d 	.word	0x0800654d
 8006530:	0800654d 	.word	0x0800654d
 8006534:	0800654d 	.word	0x0800654d
 8006538:	0800654d 	.word	0x0800654d
 800653c:	0800654d 	.word	0x0800654d
 8006540:	0800654d 	.word	0x0800654d
 8006544:	0800654d 	.word	0x0800654d
 8006548:	0800654d 	.word	0x0800654d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800654c:	bf00      	nop
  }

  return (USBD_OK);
 800654e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4805      	ldr	r0, [pc, #20]	; (8006580 <CDC_Receive_FS+0x24>)
 800656a:	f7fe fbc1 	bl	8004cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800656e:	4804      	ldr	r0, [pc, #16]	; (8006580 <CDC_Receive_FS+0x24>)
 8006570:	f7fe fc22 	bl	8004db8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006574:	2300      	movs	r3, #0
  strncpy(&Rx_Buffer[0], &Buf[0], 25);
  Rx_Flag = 1;


  /* USER CODE END 6 */
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2000013c 	.word	0x2000013c

08006584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <CDC_Transmit_FS+0x48>)
 8006596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800659a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e00b      	b.n	80065c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4806      	ldr	r0, [pc, #24]	; (80065cc <CDC_Transmit_FS+0x48>)
 80065b2:	f7fe fb7b 	bl	8004cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80065b6:	4805      	ldr	r0, [pc, #20]	; (80065cc <CDC_Transmit_FS+0x48>)
 80065b8:	f7fe fbb8 	bl	8004d2c <USBD_CDC_TransmitPacket>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2000013c 	.word	0x2000013c

080065d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80065e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2212      	movs	r2, #18
 8006604:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006606:	4b03      	ldr	r3, [pc, #12]	; (8006614 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	200000c8 	.word	0x200000c8

08006618 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2204      	movs	r2, #4
 8006628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	200000dc 	.word	0x200000dc

0800663c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	6039      	str	r1, [r7, #0]
 8006646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d105      	bne.n	800665a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4907      	ldr	r1, [pc, #28]	; (8006670 <USBD_FS_ProductStrDescriptor+0x34>)
 8006652:	4808      	ldr	r0, [pc, #32]	; (8006674 <USBD_FS_ProductStrDescriptor+0x38>)
 8006654:	f7ff fdf8 	bl	8006248 <USBD_GetString>
 8006658:	e004      	b.n	8006664 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4904      	ldr	r1, [pc, #16]	; (8006670 <USBD_FS_ProductStrDescriptor+0x34>)
 800665e:	4805      	ldr	r0, [pc, #20]	; (8006674 <USBD_FS_ProductStrDescriptor+0x38>)
 8006660:	f7ff fdf2 	bl	8006248 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20001418 	.word	0x20001418
 8006674:	08006eac 	.word	0x08006eac

08006678 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006688:	4804      	ldr	r0, [pc, #16]	; (800669c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800668a:	f7ff fddd 	bl	8006248 <USBD_GetString>
  return USBD_StrDesc;
 800668e:	4b02      	ldr	r3, [pc, #8]	; (8006698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20001418 	.word	0x20001418
 800669c:	08006eb8 	.word	0x08006eb8

080066a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	221a      	movs	r2, #26
 80066b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066b2:	f000 f843 	bl	800673c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066b6:	4b02      	ldr	r3, [pc, #8]	; (80066c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200000e0 	.word	0x200000e0

080066c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4907      	ldr	r1, [pc, #28]	; (80066f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066da:	4808      	ldr	r0, [pc, #32]	; (80066fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80066dc:	f7ff fdb4 	bl	8006248 <USBD_GetString>
 80066e0:	e004      	b.n	80066ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4904      	ldr	r1, [pc, #16]	; (80066f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066e6:	4805      	ldr	r0, [pc, #20]	; (80066fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80066e8:	f7ff fdae 	bl	8006248 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066ec:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20001418 	.word	0x20001418
 80066fc:	08006ec0 	.word	0x08006ec0

08006700 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	4907      	ldr	r1, [pc, #28]	; (8006734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006716:	4808      	ldr	r0, [pc, #32]	; (8006738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006718:	f7ff fd96 	bl	8006248 <USBD_GetString>
 800671c:	e004      	b.n	8006728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	4904      	ldr	r1, [pc, #16]	; (8006734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006722:	4805      	ldr	r0, [pc, #20]	; (8006738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006724:	f7ff fd90 	bl	8006248 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20001418 	.word	0x20001418
 8006738:	08006ecc 	.word	0x08006ecc

0800673c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <Get_SerialNum+0x44>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <Get_SerialNum+0x48>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <Get_SerialNum+0x4c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006762:	2208      	movs	r2, #8
 8006764:	4909      	ldr	r1, [pc, #36]	; (800678c <Get_SerialNum+0x50>)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f814 	bl	8006794 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800676c:	2204      	movs	r2, #4
 800676e:	4908      	ldr	r1, [pc, #32]	; (8006790 <Get_SerialNum+0x54>)
 8006770:	68b8      	ldr	r0, [r7, #8]
 8006772:	f000 f80f 	bl	8006794 <IntToUnicode>
  }
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	1fff7a10 	.word	0x1fff7a10
 8006784:	1fff7a14 	.word	0x1fff7a14
 8006788:	1fff7a18 	.word	0x1fff7a18
 800678c:	200000e2 	.word	0x200000e2
 8006790:	200000f2 	.word	0x200000f2

08006794 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	75fb      	strb	r3, [r7, #23]
 80067aa:	e027      	b.n	80067fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	0f1b      	lsrs	r3, r3, #28
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d80b      	bhi.n	80067cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	0f1b      	lsrs	r3, r3, #28
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4619      	mov	r1, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	440b      	add	r3, r1
 80067c4:	3230      	adds	r2, #48	; 0x30
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e00a      	b.n	80067e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0f1b      	lsrs	r3, r3, #28
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4619      	mov	r1, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	440b      	add	r3, r1
 80067dc:	3237      	adds	r2, #55	; 0x37
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	3301      	adds	r3, #1
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	3301      	adds	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
 80067fc:	7dfa      	ldrb	r2, [r7, #23]
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	429a      	cmp	r2, r3
 8006802:	d3d3      	bcc.n	80067ac <IntToUnicode+0x18>
  }
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	; 0x28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006834:	d13a      	bne.n	80068ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	6313      	str	r3, [r2, #48]	; 0x30
 8006846:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006858:	2302      	movs	r3, #2
 800685a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006860:	2303      	movs	r3, #3
 8006862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006864:	230a      	movs	r3, #10
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	4619      	mov	r1, r3
 800686e:	4812      	ldr	r0, [pc, #72]	; (80068b8 <HAL_PCD_MspInit+0xa4>)
 8006870:	f7fa f92a 	bl	8000ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	6353      	str	r3, [r2, #52]	; 0x34
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 800688a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800688e:	6453      	str	r3, [r2, #68]	; 0x44
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_PCD_MspInit+0xa0>)
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800689c:	2200      	movs	r2, #0
 800689e:	2100      	movs	r1, #0
 80068a0:	2043      	movs	r0, #67	; 0x43
 80068a2:	f7fa f8da 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068a6:	2043      	movs	r0, #67	; 0x43
 80068a8:	f7fa f8f3 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068ac:	bf00      	nop
 80068ae:	3728      	adds	r7, #40	; 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40020000 	.word	0x40020000

080068bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f7fe fb59 	bl	8004f8a <USBD_LL_SetupStage>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	78fb      	ldrb	r3, [r7, #3]
 8006908:	4619      	mov	r1, r3
 800690a:	f7fe fb93 	bl	8005034 <USBD_LL_DataOutStage>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	334c      	adds	r3, #76	; 0x4c
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	4619      	mov	r1, r3
 800693e:	f7fe fc2c 	bl	800519a <USBD_LL_DataInStage>
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fd60 	bl	800541e <USBD_LL_SOF>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e008      	b.n	8006992 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d102      	bne.n	800698e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006988:	2301      	movs	r3, #1
 800698a:	73fb      	strb	r3, [r7, #15]
 800698c:	e001      	b.n	8006992 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800698e:	f7f9 fe55 	bl	800063c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006998:	7bfa      	ldrb	r2, [r7, #15]
 800699a:	4611      	mov	r1, r2
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fd00 	bl	80053a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fca8 	bl	80052fe <USBD_LL_Reset>
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fcfb 	bl	80053c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <HAL_PCD_SuspendCallback+0x48>)
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	4a03      	ldr	r2, [pc, #12]	; (8006a00 <HAL_PCD_SuspendCallback+0x48>)
 80069f2:	f043 0306 	orr.w	r3, r3, #6
 80069f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	e000ed00 	.word	0xe000ed00

08006a04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fceb 	bl	80053ee <USBD_LL_Resume>
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fd43 	bl	80054c2 <USBD_LL_IsoOUTIncomplete>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fcff 	bl	800545e <USBD_LL_IsoINIncomplete>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fd55 	bl	8005526 <USBD_LL_DevConnected>
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fd52 	bl	800553c <USBD_LL_DevDisconnected>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d13c      	bne.n	8006b2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ab0:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <USBD_LL_Init+0x94>)
 8006abc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ac6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ac8:	4b1a      	ldr	r3, [pc, #104]	; (8006b34 <USBD_LL_Init+0x94>)
 8006aca:	2204      	movs	r2, #4
 8006acc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <USBD_LL_Init+0x94>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ae0:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <USBD_LL_Init+0x94>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006aec:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <USBD_LL_Init+0x94>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <USBD_LL_Init+0x94>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <USBD_LL_Init+0x94>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006afe:	480d      	ldr	r0, [pc, #52]	; (8006b34 <USBD_LL_Init+0x94>)
 8006b00:	f7fa f97e 	bl	8000e00 <HAL_PCD_Init>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b0a:	f7f9 fd97 	bl	800063c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	4808      	ldr	r0, [pc, #32]	; (8006b34 <USBD_LL_Init+0x94>)
 8006b12:	f7fb fbd6 	bl	80022c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b16:	2240      	movs	r2, #64	; 0x40
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4806      	ldr	r0, [pc, #24]	; (8006b34 <USBD_LL_Init+0x94>)
 8006b1c:	f7fb fb8a 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b20:	2280      	movs	r2, #128	; 0x80
 8006b22:	2101      	movs	r1, #1
 8006b24:	4803      	ldr	r0, [pc, #12]	; (8006b34 <USBD_LL_Init+0x94>)
 8006b26:	f7fb fb85 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20001618 	.word	0x20001618

08006b38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fa fa73 	bl	800103a <HAL_PCD_Start>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f942 	bl	8006de4 <USBD_Get_USB_Status>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	4608      	mov	r0, r1
 8006b78:	4611      	mov	r1, r2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	70fb      	strb	r3, [r7, #3]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70bb      	strb	r3, [r7, #2]
 8006b84:	4613      	mov	r3, r2
 8006b86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b96:	78bb      	ldrb	r3, [r7, #2]
 8006b98:	883a      	ldrh	r2, [r7, #0]
 8006b9a:	78f9      	ldrb	r1, [r7, #3]
 8006b9c:	f7fa ff44 	bl	8001a28 <HAL_PCD_EP_Open>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 f91c 	bl	8006de4 <USBD_Get_USB_Status>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fa ff8d 	bl	8001af8 <HAL_PCD_EP_Close>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f8fd 	bl	8006de4 <USBD_Get_USB_Status>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fb f865 	bl	8001ce6 <HAL_PCD_EP_SetStall>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f8de 	bl	8006de4 <USBD_Get_USB_Status>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fb f8aa 	bl	8001dae <HAL_PCD_EP_ClrStall>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f8bf 	bl	8006de4 <USBD_Get_USB_Status>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0b      	bge.n	8006ca8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	333e      	adds	r3, #62	; 0x3e
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	e00b      	b.n	8006cc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006cbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fa fe77 	bl	80019de <HAL_PCD_SetAddress>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f874 	bl	8006de4 <USBD_Get_USB_Status>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	460b      	mov	r3, r1
 8006d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d28:	7af9      	ldrb	r1, [r7, #11]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	f7fa ff90 	bl	8001c52 <HAL_PCD_EP_Transmit>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f853 	bl	8006de4 <USBD_Get_USB_Status>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d42:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d6a:	7af9      	ldrb	r1, [r7, #11]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	f7fa ff0c 	bl	8001b8c <HAL_PCD_EP_Receive>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f832 	bl	8006de4 <USBD_Get_USB_Status>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d84:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fa ff3c 	bl	8001c22 <HAL_PCD_EP_GetRxCount>
 8006daa:	4603      	mov	r3, r0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <USBD_static_malloc+0x18>)
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20001b24 	.word	0x20001b24

08006dd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d817      	bhi.n	8006e28 <USBD_Get_USB_Status+0x44>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <USBD_Get_USB_Status+0x1c>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e17 	.word	0x08006e17
 8006e08:	08006e1d 	.word	0x08006e1d
 8006e0c:	08006e23 	.word	0x08006e23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
    break;
 8006e14:	e00b      	b.n	8006e2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e16:	2303      	movs	r3, #3
 8006e18:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1a:	e008      	b.n	8006e2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e20:	e005      	b.n	8006e2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e22:	2303      	movs	r3, #3
 8006e24:	73fb      	strb	r3, [r7, #15]
    break;
 8006e26:	e002      	b.n	8006e2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e2c:	bf00      	nop
  }
  return usb_status;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4d0d      	ldr	r5, [pc, #52]	; (8006e74 <__libc_init_array+0x38>)
 8006e40:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e42:	1b64      	subs	r4, r4, r5
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	2600      	movs	r6, #0
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	4d0b      	ldr	r5, [pc, #44]	; (8006e7c <__libc_init_array+0x40>)
 8006e4e:	4c0c      	ldr	r4, [pc, #48]	; (8006e80 <__libc_init_array+0x44>)
 8006e50:	f000 f820 	bl	8006e94 <_init>
 8006e54:	1b64      	subs	r4, r4, r5
 8006e56:	10a4      	asrs	r4, r4, #2
 8006e58:	2600      	movs	r6, #0
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	08006ef4 	.word	0x08006ef4
 8006e78:	08006ef4 	.word	0x08006ef4
 8006e7c:	08006ef4 	.word	0x08006ef4
 8006e80:	08006ef8 	.word	0x08006ef8

08006e84 <memset>:
 8006e84:	4402      	add	r2, r0
 8006e86:	4603      	mov	r3, r0
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d100      	bne.n	8006e8e <memset+0xa>
 8006e8c:	4770      	bx	lr
 8006e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e92:	e7f9      	b.n	8006e88 <memset+0x4>

08006e94 <_init>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr

08006ea0 <_fini>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr
