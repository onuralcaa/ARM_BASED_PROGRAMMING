
015_1_SSD1306_LCD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000078  08003704  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08003704  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000762e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001558  00000000  00000000  000276d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00028c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f88d  00000000  00000000  00029360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009804  00000000  00000000  00048bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c1c3c  00000000  00000000  000523f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0011402d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000680  00000000  00000000  00114080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002048  00000000  00000000  00114700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e94 	.word	0x08002e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08002e94 	.word	0x08002e94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc00 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f848 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8de 	bl	8000740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f8ae 	bl	80006e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000588:	2014      	movs	r0, #20
 800058a:	f000 fc69 	bl	8000e60 <HAL_Delay>
  ssd1306_Init();
 800058e:	f000 f91f 	bl	80007d0 <ssd1306_Init>

  Time=0;
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x84>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
  Temp=25;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <main+0x88>)
 800059a:	2219      	movs	r2, #25
 800059c:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(lcd_buf,"Time:%d",Time++);
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x84>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	4914      	ldr	r1, [pc, #80]	; (80005f8 <main+0x84>)
 80005a6:	600a      	str	r2, [r1, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4915      	ldr	r1, [pc, #84]	; (8000600 <main+0x8c>)
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <main+0x90>)
 80005ae:	f002 f803 	bl	80025b8 <siprintf>
	  ssd1306_SetCursor(0,0);
 80005b2:	2100      	movs	r1, #0
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fabf 	bl	8000b38 <ssd1306_SetCursor>
	  ssd1306_WriteString(lcd_buf, Font_7x10, White);
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x94>)
 80005bc:	2301      	movs	r3, #1
 80005be:	ca06      	ldmia	r2, {r1, r2}
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x90>)
 80005c2:	f000 fa93 	bl	8000aec <ssd1306_WriteString>

	  sprintf(lcd_buf,"Temperature:%d",Temp);
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <main+0x88>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0x98>)
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x90>)
 80005d0:	f001 fff2 	bl	80025b8 <siprintf>
	  ssd1306_SetCursor(0,15);
 80005d4:	210f      	movs	r1, #15
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 faae 	bl	8000b38 <ssd1306_SetCursor>
	  ssd1306_WriteString(lcd_buf, Font_7x10, White);
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <main+0x94>)
 80005de:	2301      	movs	r3, #1
 80005e0:	ca06      	ldmia	r2, {r1, r2}
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <main+0x90>)
 80005e4:	f000 fa82 	bl	8000aec <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 80005e8:	f000 f970 	bl	80008cc <ssd1306_UpdateScreen>

	  HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f000 fc36 	bl	8000e60 <HAL_Delay>
  {
 80005f4:	e7d3      	b.n	800059e <main+0x2a>
 80005f6:	bf00      	nop
 80005f8:	20000108 	.word	0x20000108
 80005fc:	20000104 	.word	0x20000104
 8000600:	08002eac 	.word	0x08002eac
 8000604:	200000e8 	.word	0x200000e8
 8000608:	20000000 	.word	0x20000000
 800060c:	08002eb4 	.word	0x08002eb4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 ffc2 	bl	80025a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	; 0xa8
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fae3 	bl	8001c60 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f876 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fd3a 	bl	800213c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f85f 	bl	8000790 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f000 fe43 	bl	80013ac <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f830 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000094 	.word	0x20000094
 8000738:	40005400 	.word	0x40005400
 800073c:	00061a80 	.word	0x00061a80

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_GPIO_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_GPIO_Init+0x4c>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_GPIO_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MX_GPIO_Init+0x4c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <ssd1306_WriteCommand>:
static SSD1306_t SSD1306;


//I2C write command
void ssd1306_WriteCommand(uint8_t command)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80007aa:	230a      	movs	r3, #10
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2200      	movs	r2, #0
 80007ba:	2178      	movs	r1, #120	; 0x78
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <ssd1306_WriteCommand+0x2c>)
 80007be:	f000 ff39 	bl	8001634 <HAL_I2C_Mem_Write>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000094 	.word	0x20000094

080007d0 <ssd1306_Init>:


//Initializing SSD1306 chip
uint8_t ssd1306_Init(void)
{	
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f000 fb43 	bl	8000e60 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80007da:	20ae      	movs	r0, #174	; 0xae
 80007dc:	f7ff ffe0 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80007e0:	2020      	movs	r0, #32
 80007e2:	f7ff ffdd 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ffda 	bl	80007a0 <ssd1306_WriteCommand>


	ssd1306_WriteCommand(0x81); //--set contrast control register
 80007ec:	2081      	movs	r0, #129	; 0x81
 80007ee:	f7ff ffd7 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0);
 80007f2:	20f0      	movs	r0, #240	; 0xf0
 80007f4:	f7ff ffd4 	bl	80007a0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA6); //--set normal display
 80007f8:	20a6      	movs	r0, #166	; 0xa6
 80007fa:	f7ff ffd1 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80007fe:	20a8      	movs	r0, #168	; 0xa8
 8000800:	f7ff ffce 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SSD1306_HEIGHT - 1); //
 8000804:	201f      	movs	r0, #31
 8000806:	f7ff ffcb 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800080a:	20a4      	movs	r0, #164	; 0xa4
 800080c:	f7ff ffc8 	bl	80007a0 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD3); //-set display offset
 8000810:	20d3      	movs	r0, #211	; 0xd3
 8000812:	f7ff ffc5 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff ffc2 	bl	80007a0 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800081c:	20d5      	movs	r0, #213	; 0xd5
 800081e:	f7ff ffbf 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x80); //--set divide ratio
 8000822:	2080      	movs	r0, #128	; 0x80
 8000824:	f7ff ffbc 	bl	80007a0 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000828:	20d9      	movs	r0, #217	; 0xd9
 800082a:	f7ff ffb9 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800082e:	2022      	movs	r0, #34	; 0x22
 8000830:	f7ff ffb6 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000834:	20da      	movs	r0, #218	; 0xda
 8000836:	f7ff ffb3 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x02);	//128*32
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff ffb0 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000840:	20db      	movs	r0, #219	; 0xdb
 8000842:	f7ff ffad 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); 
 8000846:	2040      	movs	r0, #64	; 0x40
 8000848:	f7ff ffaa 	bl	80007a0 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800084c:	208d      	movs	r0, #141	; 0x8d
 800084e:	f7ff ffa7 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000852:	2014      	movs	r0, #20
 8000854:	f7ff ffa4 	bl	80007a0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000858:	20af      	movs	r0, #175	; 0xaf
 800085a:	f7ff ffa1 	bl	80007a0 <ssd1306_WriteCommand>
	
	/* Clear screen */
	ssd1306_Fill(Black);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f810 	bl	8000884 <ssd1306_Fill>
	
	/* Update screen */
	ssd1306_UpdateScreen();
 8000864:	f000 f832 	bl	80008cc <ssd1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <ssd1306_Init+0xb0>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <ssd1306_Init+0xb0>)
 8000870:	2200      	movs	r2, #0
 8000872:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <ssd1306_Init+0xb0>)
 8000876:	2201      	movs	r2, #1
 8000878:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000030c 	.word	0x2000030c

08000884 <ssd1306_Fill>:


//Fill screen with black or white
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e00d      	b.n	80008b0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <ssd1306_Fill+0x1a>
 800089a:	2100      	movs	r1, #0
 800089c:	e000      	b.n	80008a0 <ssd1306_Fill+0x1c>
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <ssd1306_Fill+0x44>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	460a      	mov	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008b6:	d3ed      	bcc.n	8000894 <ssd1306_Fill+0x10>
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2000010c 	.word	0x2000010c

080008cc <ssd1306_UpdateScreen>:


//Update RAM to screen
void ssd1306_UpdateScreen(void) 
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	e01d      	b.n	8000914 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	3b50      	subs	r3, #80	; 0x50
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff5e 	bl	80007a0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff5b 	bl	80007a0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80008ea:	2010      	movs	r0, #16
 80008ec:	f7ff ff58 	bl	80007a0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	01db      	lsls	r3, r3, #7
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <ssd1306_UpdateScreen+0x58>)
 80008f6:	4413      	add	r3, r2
 80008f8:	2264      	movs	r2, #100	; 0x64
 80008fa:	9202      	str	r2, [sp, #8]
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	9201      	str	r2, [sp, #4]
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	2240      	movs	r2, #64	; 0x40
 8000906:	2178      	movs	r1, #120	; 0x78
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <ssd1306_UpdateScreen+0x5c>)
 800090a:	f000 fe93 	bl	8001634 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	3301      	adds	r3, #1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d9de      	bls.n	80008d8 <ssd1306_UpdateScreen+0xc>
	}
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000010c 	.word	0x2000010c
 8000928:	20000094 	.word	0x20000094

0800092c <ssd1306_DrawPixel>:
- x: x coordinate 0-127
- y: y coordinate 0-31
- color: Black/White
*/
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	460b      	mov	r3, r1
 8000938:	71bb      	strb	r3, [r7, #6]
 800093a:	4613      	mov	r3, r2
 800093c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db48      	blt.n	80009d8 <ssd1306_DrawPixel+0xac>
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	2b1f      	cmp	r3, #31
 800094a:	d845      	bhi.n	80009d8 <ssd1306_DrawPixel+0xac>
	{
		return;
	}
	
	if (SSD1306.Inverted) 
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <ssd1306_DrawPixel+0xb8>)
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf0c      	ite	eq
 800095a:	2301      	moveq	r3, #1
 800095c:	2300      	movne	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	717b      	strb	r3, [r7, #5]
	}
	
	if (color == White)
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d11a      	bne.n	800099e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2d8      	uxtb	r0, r3
 8000970:	4603      	mov	r3, r0
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	4413      	add	r3, r2
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <ssd1306_DrawPixel+0xbc>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	b25a      	sxtb	r2, r3
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	b25b      	sxtb	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b259      	sxtb	r1, r3
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	4603      	mov	r3, r0
 8000992:	01db      	lsls	r3, r3, #7
 8000994:	4413      	add	r3, r2
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <ssd1306_DrawPixel+0xbc>)
 800099a:	54d1      	strb	r1, [r2, r3]
 800099c:	e01d      	b.n	80009da <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	b2d8      	uxtb	r0, r3
 80009a6:	4603      	mov	r3, r0
 80009a8:	01db      	lsls	r3, r3, #7
 80009aa:	4413      	add	r3, r2
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <ssd1306_DrawPixel+0xbc>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	b259      	sxtb	r1, r3
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	4603      	mov	r3, r0
 80009cc:	01db      	lsls	r3, r3, #7
 80009ce:	4413      	add	r3, r2
 80009d0:	b2c9      	uxtb	r1, r1
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <ssd1306_DrawPixel+0xbc>)
 80009d4:	54d1      	strb	r1, [r2, r3]
 80009d6:	e000      	b.n	80009da <ssd1306_DrawPixel+0xae>
		return;
 80009d8:	bf00      	nop
	}
}
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	2000030c 	.word	0x2000030c
 80009e8:	2000010c 	.word	0x2000010c

080009ec <ssd1306_WriteChar>:
- ch: character to be displayed
- Font: font selection Font_7x10/Font_11x18/Font_16x26
- color: Black/White
*/
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	1d38      	adds	r0, r7, #4
 80009f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80009fa:	461a      	mov	r2, r3
 80009fc:	4623      	mov	r3, r4
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	793b      	ldrb	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	dc06      	bgt.n	8000a20 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a14:	885b      	ldrh	r3, [r3, #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	dd01      	ble.n	8000a24 <ssd1306_WriteChar+0x38>
	{

		return 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e05d      	b.n	8000ae0 <ssd1306_WriteChar+0xf4>
	}
	

	for (i = 0; i < Font.FontHeight; i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e04c      	b.n	8000ac4 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3b20      	subs	r3, #32
 8000a30:	7979      	ldrb	r1, [r7, #5]
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	e034      	b.n	8000ab4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d012      	beq.n	8000a80 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	b2d8      	uxtb	r0, r3
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7bba      	ldrb	r2, [r7, #14]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f7ff ff57 	bl	800092c <ssd1306_DrawPixel>
 8000a7e:	e016      	b.n	8000aae <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2d8      	uxtb	r0, r3
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2d9      	uxtb	r1, r3
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f7ff ff3f 	bl	800092c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d3c5      	bcc.n	8000a4a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	797b      	ldrb	r3, [r7, #5]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d3ad      	bcc.n	8000a2a <ssd1306_WriteChar+0x3e>
			}
		}
	}
	

	SSD1306.CurrentX += Font.FontWidth;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <ssd1306_WriteChar+0xfc>)
 8000adc:	801a      	strh	r2, [r3, #0]
	
	return ch;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3724      	adds	r7, #36	; 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	2000030c 	.word	0x2000030c

08000aec <ssd1306_WriteString>:
- str: pointer to string
- Font: font selection Font_7x10/Font_11x18/Font_16x26
- color: Black/White
*/
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	1d38      	adds	r0, r7, #4
 8000af6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afa:	70fb      	strb	r3, [r7, #3]

	while (*str) 
 8000afc:	e012      	b.n	8000b24 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	7818      	ldrb	r0, [r3, #0]
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	1d3a      	adds	r2, r7, #4
 8000b06:	ca06      	ldmia	r2, {r1, r2}
 8000b08:	f7ff ff70 	bl	80009ec <ssd1306_WriteChar>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d002      	beq.n	8000b1e <ssd1306_WriteString+0x32>
		{
			
			return *str;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <ssd1306_WriteString+0x44>
		}
		
		str++;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e8      	bne.n	8000afe <ssd1306_WriteString+0x12>
	}
	
	return *str;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <ssd1306_SetCursor>:


//Set cursor coordinate
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b56:	805a      	strh	r2, [r3, #2]
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	2000030c 	.word	0x2000030c

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_I2C_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf6:	23c0      	movs	r3, #192	; 0xc0
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c06:	2304      	movs	r3, #4
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <HAL_I2C_MspInit+0x8c>)
 8000c12:	f000 fa2f 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f8c0 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x50>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x16>
		heap_end = &end;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <_sbrk+0x50>)
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <_sbrk+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <_sbrk+0x50>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <_sbrk+0x50>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	466a      	mov	r2, sp
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d907      	bls.n	8000cde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cce:	f001 fc41 	bl	8002554 <__errno>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	e006      	b.n	8000cec <_sbrk+0x48>
	}

	heap_end += incr;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <_sbrk+0x50>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <_sbrk+0x50>)
 8000ce8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000314 	.word	0x20000314
 8000cf8:	20000330 	.word	0x20000330

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SystemInit+0x28>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <SystemInit+0x28>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x28>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d2e:	e003      	b.n	8000d38 <LoopCopyDataInit>

08000d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d36:	3104      	adds	r1, #4

08000d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d40:	d3f6      	bcc.n	8000d30 <CopyDataInit>
  ldr  r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d44:	e002      	b.n	8000d4c <LoopFillZerobss>

08000d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d48:	f842 3b04 	str.w	r3, [r2], #4

08000d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d50:	d3f9      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd3 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f001 fc03 	bl	8002560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc0b 	bl	8000574 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d64:	0800368c 	.word	0x0800368c
  ldr  r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d6c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000d70:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000d74:	2000032c 	.word	0x2000032c

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff feda 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	2000000c 	.word	0x2000000c

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000010 	.word	0x20000010
 8000e44:	20000318 	.word	0x20000318

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000318 	.word	0x20000318

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000010 	.word	0x20000010

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e16b      	b.n	8001368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 815a 	bne.w	8001362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d00b      	beq.n	80010ce <HAL_GPIO_Init+0x5a>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c2:	2b11      	cmp	r3, #17
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0xfc>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80b4 	beq.w	8001362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <HAL_GPIO_Init+0x310>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x320>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x324>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x216>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x328>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x32c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x20e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x330>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x20a>
 800127a:	2307      	movs	r3, #7
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x228>
 800127e:	2308      	movs	r3, #8
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x228>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x310>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae90 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e12b      	b.n	8001616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fbf0 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001410:	f001 f88c 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a81      	ldr	r2, [pc, #516]	; (8001620 <HAL_I2C_Init+0x274>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d807      	bhi.n	8001430 <HAL_I2C_Init+0x84>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_I2C_Init+0x278>)
 8001424:	4293      	cmp	r3, r2
 8001426:	bf94      	ite	ls
 8001428:	2301      	movls	r3, #1
 800142a:	2300      	movhi	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e006      	b.n	800143e <HAL_I2C_Init+0x92>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a7d      	ldr	r2, [pc, #500]	; (8001628 <HAL_I2C_Init+0x27c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0e7      	b.n	8001616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a78      	ldr	r2, [pc, #480]	; (800162c <HAL_I2C_Init+0x280>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_I2C_Init+0x274>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d802      	bhi.n	8001480 <HAL_I2C_Init+0xd4>
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	e009      	b.n	8001494 <HAL_I2C_Init+0xe8>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4a69      	ldr	r2, [pc, #420]	; (8001630 <HAL_I2C_Init+0x284>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	3301      	adds	r3, #1
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	430b      	orrs	r3, r1
 800149a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	495c      	ldr	r1, [pc, #368]	; (8001620 <HAL_I2C_Init+0x274>)
 80014b0:	428b      	cmp	r3, r1
 80014b2:	d819      	bhi.n	80014e8 <HAL_I2C_Init+0x13c>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e59      	subs	r1, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c8:	400b      	ands	r3, r1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <HAL_I2C_Init+0x138>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e59      	subs	r1, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	e051      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e04f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <HAL_I2C_Init+0x168>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	e012      	b.n	800153a <HAL_I2C_Init+0x18e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Init+0x196>
 800153e:	2301      	movs	r3, #1
 8001540:	e022      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10e      	bne.n	8001568 <HAL_I2C_Init+0x1bc>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1e58      	subs	r0, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	440b      	add	r3, r1
 8001558:	fbb0 f3f3 	udiv	r3, r0, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001566:	e00f      	b.n	8001588 <HAL_I2C_Init+0x1dc>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	6809      	ldr	r1, [r1, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6911      	ldr	r1, [r2, #16]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68d2      	ldr	r2, [r2, #12]
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	000186a0 	.word	0x000186a0
 8001624:	001e847f 	.word	0x001e847f
 8001628:	003d08ff 	.word	0x003d08ff
 800162c:	431bde83 	.word	0x431bde83
 8001630:	10624dd3 	.word	0x10624dd3

08001634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4603      	mov	r3, r0
 8001644:	817b      	strh	r3, [r7, #10]
 8001646:	460b      	mov	r3, r1
 8001648:	813b      	strh	r3, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800164e:	f7ff fbfb 	bl	8000e48 <HAL_GetTick>
 8001652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80d9 	bne.w	8001814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	496d      	ldr	r1, [pc, #436]	; (8001820 <HAL_I2C_Mem_Write+0x1ec>)
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f96f 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
 800167a:	e0cc      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Mem_Write+0x56>
 8001686:	2302      	movs	r3, #2
 8001688:	e0c5      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d007      	beq.n	80016b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2221      	movs	r2, #33	; 0x21
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_I2C_Mem_Write+0x1f0>)
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f2:	88f8      	ldrh	r0, [r7, #6]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	8979      	ldrh	r1, [r7, #10]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f890 	bl	8001828 <I2C_RequestMemoryWrite>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d052      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e081      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f9f0 	bl	8001afc <I2C_WaitOnTXEFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b04      	cmp	r3, #4
 8001728:	d107      	bne.n	800173a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06b      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d11b      	bne.n	80017b4 <HAL_I2C_Mem_Write+0x180>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1aa      	bne.n	8001712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f9dc 	bl	8001b7e <I2C_WaitOnBTFFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d107      	bne.n	80017e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e016      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001814:	2302      	movs	r3, #2
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	00100002 	.word	0x00100002
 8001824:	ffff0000 	.word	0xffff0000

08001828 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4603      	mov	r3, r0
 8001838:	817b      	strh	r3, [r7, #10]
 800183a:	460b      	mov	r3, r1
 800183c:	813b      	strh	r3, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2200      	movs	r2, #0
 800185a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f876 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e05f      	b.n	8001944 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001884:	897b      	ldrh	r3, [r7, #10]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001892:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	492c      	ldr	r1, [pc, #176]	; (800194c <I2C_RequestMemoryWrite+0x124>)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f8af 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e04c      	b.n	8001944 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	6a39      	ldr	r1, [r7, #32]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f919 	bl	8001afc <I2C_WaitOnTXEFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e02b      	b.n	8001944 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018f2:	893b      	ldrh	r3, [r7, #8]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	e021      	b.n	8001942 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	6a39      	ldr	r1, [r7, #32]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f8f3 	bl	8001afc <I2C_WaitOnTXEFlagUntilTimeout>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	2b04      	cmp	r3, #4
 8001922:	d107      	bne.n	8001934 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001932:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e005      	b.n	8001944 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	00010002 	.word	0x00010002

08001950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001960:	e025      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d021      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7ff fa6d 	bl	8000e48 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d116      	bne.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e023      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10d      	bne.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4013      	ands	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf0c      	ite	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	2300      	movne	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	e00c      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4013      	ands	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0b6      	beq.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a0c:	e051      	b.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d123      	bne.n	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e046      	b.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d021      	beq.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6e:	f7ff f9eb 	bl	8000e48 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d302      	bcc.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d116      	bne.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0220 	orr.w	r2, r3, #32
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e020      	b.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d10c      	bne.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e00b      	b.n	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d18d      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b08:	e02d      	b.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f878 	bl	8001c00 <I2C_IsAcknowledgeFailed>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e02d      	b.n	8001b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d021      	beq.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff f991 	bl	8000e48 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d116      	bne.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f043 0220 	orr.w	r2, r3, #32
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d1ca      	bne.n	8001b0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b8a:	e02d      	b.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f837 	bl	8001c00 <I2C_IsAcknowledgeFailed>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e02d      	b.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d021      	beq.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f950 	bl	8000e48 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d1ca      	bne.n	8001b8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d11b      	bne.n	8001c50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e25e      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d075      	beq.n	8001d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b85      	ldr	r3, [pc, #532]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e239      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x74>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6f      	ldr	r2, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f896 	bl	8000e48 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f892 	bl	8000e48 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1fe      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f882 	bl	8000e48 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f87e 	bl	8000e48 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1ea      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1be      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f837 	bl	8000e48 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f833 	bl	8000e48 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e19f      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f816 	bl	8000e48 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f812 	bl	8000e48 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e17e      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7fe fff6 	bl	8000e48 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe fff2 	bl	8000e48 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e15e      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7fe ffdf 	bl	8000e48 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00e      	b.n	8001eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7fe ffdb 	bl	8000e48 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d907      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e147      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ea      	bne.n	8001e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8097 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a73      	ldr	r2, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ff9b 	bl	8000e48 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe ff97 	bl	8000e48 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e103      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x30c>
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7fe ff5c 	bl	8000e48 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7fe ff58 	bl	8000e48 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0c2      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ee      	beq.n	8001f94 <HAL_RCC_OscConfig+0x334>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe ff46 	bl	8000e48 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe ff42 	bl	8000e48 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0ac      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8098 	beq.w	800212e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d05c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d141      	bne.n	8002096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ff16 	bl	8000e48 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ff12 	bl	8000e48 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e07e      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	491b      	ldr	r1, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe feeb 	bl	8000e48 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fee7 	bl	8000e48 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e053      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x416>
 8002094:	e04b      	b.n	800212e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fed4 	bl	8000e48 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fed0 	bl	8000e48 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e03c      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x444>
 80020c2:	e034      	b.n	800212e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e02f      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_RCC_OscConfig+0x4d8>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d11c      	bne.n	800212a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d115      	bne.n	800212a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cc      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90c      	bls.n	8002178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d044      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e067      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe fe0c 	bl	8000e48 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fe08 	bl	8000e48 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d20c      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f821 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490a      	ldr	r1, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fd6c 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08003630 	.word	0x08003630
 8002300:	20000008 	.word	0x20000008
 8002304:	2000000c 	.word	0x2000000c

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b094      	sub	sp, #80	; 0x50
 800230e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	647b      	str	r3, [r7, #68]	; 0x44
 8002314:	2300      	movs	r3, #0
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002318:	2300      	movs	r3, #0
 800231a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002320:	4b79      	ldr	r3, [pc, #484]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d00d      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x40>
 800232c:	2b08      	cmp	r3, #8
 800232e:	f200 80e1 	bhi.w	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x34>
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x3a>
 800233a:	e0db      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002340:	e0db      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002342:	4b73      	ldr	r3, [pc, #460]	; (8002510 <HAL_RCC_GetSysClockFreq+0x208>)
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002346:	e0d8      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002350:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002352:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
 8002368:	63fa      	str	r2, [r7, #60]	; 0x3c
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800237a:	4622      	mov	r2, r4
 800237c:	462b      	mov	r3, r5
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	0159      	lsls	r1, r3, #5
 8002388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238c:	0150      	lsls	r0, r2, #5
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4621      	mov	r1, r4
 8002394:	1a51      	subs	r1, r2, r1
 8002396:	6139      	str	r1, [r7, #16]
 8002398:	4629      	mov	r1, r5
 800239a:	eb63 0301 	sbc.w	r3, r3, r1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ac:	4659      	mov	r1, fp
 80023ae:	018b      	lsls	r3, r1, #6
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b6:	4651      	mov	r1, sl
 80023b8:	018a      	lsls	r2, r1, #6
 80023ba:	4651      	mov	r1, sl
 80023bc:	ebb2 0801 	subs.w	r8, r2, r1
 80023c0:	4659      	mov	r1, fp
 80023c2:	eb63 0901 	sbc.w	r9, r3, r1
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023da:	4690      	mov	r8, r2
 80023dc:	4699      	mov	r9, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	eb18 0303 	adds.w	r3, r8, r3
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	462b      	mov	r3, r5
 80023e8:	eb49 0303 	adc.w	r3, r9, r3
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023fa:	4629      	mov	r1, r5
 80023fc:	024b      	lsls	r3, r1, #9
 80023fe:	4621      	mov	r1, r4
 8002400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002404:	4621      	mov	r1, r4
 8002406:	024a      	lsls	r2, r1, #9
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 8002412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002418:	f7fd ff2a 	bl	8000270 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002424:	e058      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	4618      	mov	r0, r3
 8002430:	4611      	mov	r1, r2
 8002432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	f04f 0000 	mov.w	r0, #0
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	0159      	lsls	r1, r3, #5
 800244e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002452:	0150      	lsls	r0, r2, #5
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4641      	mov	r1, r8
 800245a:	ebb2 0a01 	subs.w	sl, r2, r1
 800245e:	4649      	mov	r1, r9
 8002460:	eb63 0b01 	sbc.w	fp, r3, r1
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002478:	ebb2 040a 	subs.w	r4, r2, sl
 800247c:	eb63 050b 	sbc.w	r5, r3, fp
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	00eb      	lsls	r3, r5, #3
 800248a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248e:	00e2      	lsls	r2, r4, #3
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4643      	mov	r3, r8
 8002496:	18e3      	adds	r3, r4, r3
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	464b      	mov	r3, r9
 800249c:	eb45 0303 	adc.w	r3, r5, r3
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ae:	4629      	mov	r1, r5
 80024b0:	028b      	lsls	r3, r1, #10
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b8:	4621      	mov	r1, r4
 80024ba:	028a      	lsls	r2, r1, #10
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	61fa      	str	r2, [r7, #28]
 80024c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024cc:	f7fd fed0 	bl	8000270 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 80024f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3750      	adds	r7, #80	; 0x50
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08003640 	.word	0x08003640

08002554 <__errno>:
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <__errno+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000014 	.word	0x20000014

08002560 <__libc_init_array>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	4d0d      	ldr	r5, [pc, #52]	; (8002598 <__libc_init_array+0x38>)
 8002564:	4c0d      	ldr	r4, [pc, #52]	; (800259c <__libc_init_array+0x3c>)
 8002566:	1b64      	subs	r4, r4, r5
 8002568:	10a4      	asrs	r4, r4, #2
 800256a:	2600      	movs	r6, #0
 800256c:	42a6      	cmp	r6, r4
 800256e:	d109      	bne.n	8002584 <__libc_init_array+0x24>
 8002570:	4d0b      	ldr	r5, [pc, #44]	; (80025a0 <__libc_init_array+0x40>)
 8002572:	4c0c      	ldr	r4, [pc, #48]	; (80025a4 <__libc_init_array+0x44>)
 8002574:	f000 fc8e 	bl	8002e94 <_init>
 8002578:	1b64      	subs	r4, r4, r5
 800257a:	10a4      	asrs	r4, r4, #2
 800257c:	2600      	movs	r6, #0
 800257e:	42a6      	cmp	r6, r4
 8002580:	d105      	bne.n	800258e <__libc_init_array+0x2e>
 8002582:	bd70      	pop	{r4, r5, r6, pc}
 8002584:	f855 3b04 	ldr.w	r3, [r5], #4
 8002588:	4798      	blx	r3
 800258a:	3601      	adds	r6, #1
 800258c:	e7ee      	b.n	800256c <__libc_init_array+0xc>
 800258e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002592:	4798      	blx	r3
 8002594:	3601      	adds	r6, #1
 8002596:	e7f2      	b.n	800257e <__libc_init_array+0x1e>
 8002598:	08003684 	.word	0x08003684
 800259c:	08003684 	.word	0x08003684
 80025a0:	08003684 	.word	0x08003684
 80025a4:	08003688 	.word	0x08003688

080025a8 <memset>:
 80025a8:	4402      	add	r2, r0
 80025aa:	4603      	mov	r3, r0
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d100      	bne.n	80025b2 <memset+0xa>
 80025b0:	4770      	bx	lr
 80025b2:	f803 1b01 	strb.w	r1, [r3], #1
 80025b6:	e7f9      	b.n	80025ac <memset+0x4>

080025b8 <siprintf>:
 80025b8:	b40e      	push	{r1, r2, r3}
 80025ba:	b500      	push	{lr}
 80025bc:	b09c      	sub	sp, #112	; 0x70
 80025be:	ab1d      	add	r3, sp, #116	; 0x74
 80025c0:	9002      	str	r0, [sp, #8]
 80025c2:	9006      	str	r0, [sp, #24]
 80025c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025c8:	4809      	ldr	r0, [pc, #36]	; (80025f0 <siprintf+0x38>)
 80025ca:	9107      	str	r1, [sp, #28]
 80025cc:	9104      	str	r1, [sp, #16]
 80025ce:	4909      	ldr	r1, [pc, #36]	; (80025f4 <siprintf+0x3c>)
 80025d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80025d4:	9105      	str	r1, [sp, #20]
 80025d6:	6800      	ldr	r0, [r0, #0]
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	a902      	add	r1, sp, #8
 80025dc:	f000 f868 	bl	80026b0 <_svfiprintf_r>
 80025e0:	9b02      	ldr	r3, [sp, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	b01c      	add	sp, #112	; 0x70
 80025e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80025ec:	b003      	add	sp, #12
 80025ee:	4770      	bx	lr
 80025f0:	20000014 	.word	0x20000014
 80025f4:	ffff0208 	.word	0xffff0208

080025f8 <__ssputs_r>:
 80025f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025fc:	688e      	ldr	r6, [r1, #8]
 80025fe:	429e      	cmp	r6, r3
 8002600:	4682      	mov	sl, r0
 8002602:	460c      	mov	r4, r1
 8002604:	4690      	mov	r8, r2
 8002606:	461f      	mov	r7, r3
 8002608:	d838      	bhi.n	800267c <__ssputs_r+0x84>
 800260a:	898a      	ldrh	r2, [r1, #12]
 800260c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002610:	d032      	beq.n	8002678 <__ssputs_r+0x80>
 8002612:	6825      	ldr	r5, [r4, #0]
 8002614:	6909      	ldr	r1, [r1, #16]
 8002616:	eba5 0901 	sub.w	r9, r5, r1
 800261a:	6965      	ldr	r5, [r4, #20]
 800261c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002624:	3301      	adds	r3, #1
 8002626:	444b      	add	r3, r9
 8002628:	106d      	asrs	r5, r5, #1
 800262a:	429d      	cmp	r5, r3
 800262c:	bf38      	it	cc
 800262e:	461d      	movcc	r5, r3
 8002630:	0553      	lsls	r3, r2, #21
 8002632:	d531      	bpl.n	8002698 <__ssputs_r+0xa0>
 8002634:	4629      	mov	r1, r5
 8002636:	f000 fb63 	bl	8002d00 <_malloc_r>
 800263a:	4606      	mov	r6, r0
 800263c:	b950      	cbnz	r0, 8002654 <__ssputs_r+0x5c>
 800263e:	230c      	movs	r3, #12
 8002640:	f8ca 3000 	str.w	r3, [sl]
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	81a3      	strh	r3, [r4, #12]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	464a      	mov	r2, r9
 8002658:	f000 fabe 	bl	8002bd8 <memcpy>
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	81a3      	strh	r3, [r4, #12]
 8002668:	6126      	str	r6, [r4, #16]
 800266a:	6165      	str	r5, [r4, #20]
 800266c:	444e      	add	r6, r9
 800266e:	eba5 0509 	sub.w	r5, r5, r9
 8002672:	6026      	str	r6, [r4, #0]
 8002674:	60a5      	str	r5, [r4, #8]
 8002676:	463e      	mov	r6, r7
 8002678:	42be      	cmp	r6, r7
 800267a:	d900      	bls.n	800267e <__ssputs_r+0x86>
 800267c:	463e      	mov	r6, r7
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	4632      	mov	r2, r6
 8002682:	4641      	mov	r1, r8
 8002684:	f000 fab6 	bl	8002bf4 <memmove>
 8002688:	68a3      	ldr	r3, [r4, #8]
 800268a:	1b9b      	subs	r3, r3, r6
 800268c:	60a3      	str	r3, [r4, #8]
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	4433      	add	r3, r6
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	2000      	movs	r0, #0
 8002696:	e7db      	b.n	8002650 <__ssputs_r+0x58>
 8002698:	462a      	mov	r2, r5
 800269a:	f000 fba5 	bl	8002de8 <_realloc_r>
 800269e:	4606      	mov	r6, r0
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1e1      	bne.n	8002668 <__ssputs_r+0x70>
 80026a4:	6921      	ldr	r1, [r4, #16]
 80026a6:	4650      	mov	r0, sl
 80026a8:	f000 fabe 	bl	8002c28 <_free_r>
 80026ac:	e7c7      	b.n	800263e <__ssputs_r+0x46>
	...

080026b0 <_svfiprintf_r>:
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	4698      	mov	r8, r3
 80026b6:	898b      	ldrh	r3, [r1, #12]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	b09d      	sub	sp, #116	; 0x74
 80026bc:	4607      	mov	r7, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	4614      	mov	r4, r2
 80026c2:	d50e      	bpl.n	80026e2 <_svfiprintf_r+0x32>
 80026c4:	690b      	ldr	r3, [r1, #16]
 80026c6:	b963      	cbnz	r3, 80026e2 <_svfiprintf_r+0x32>
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	f000 fb19 	bl	8002d00 <_malloc_r>
 80026ce:	6028      	str	r0, [r5, #0]
 80026d0:	6128      	str	r0, [r5, #16]
 80026d2:	b920      	cbnz	r0, 80026de <_svfiprintf_r+0x2e>
 80026d4:	230c      	movs	r3, #12
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	e0d1      	b.n	8002882 <_svfiprintf_r+0x1d2>
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	616b      	str	r3, [r5, #20]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9309      	str	r3, [sp, #36]	; 0x24
 80026e6:	2320      	movs	r3, #32
 80026e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80026f0:	2330      	movs	r3, #48	; 0x30
 80026f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800289c <_svfiprintf_r+0x1ec>
 80026f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026fa:	f04f 0901 	mov.w	r9, #1
 80026fe:	4623      	mov	r3, r4
 8002700:	469a      	mov	sl, r3
 8002702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002706:	b10a      	cbz	r2, 800270c <_svfiprintf_r+0x5c>
 8002708:	2a25      	cmp	r2, #37	; 0x25
 800270a:	d1f9      	bne.n	8002700 <_svfiprintf_r+0x50>
 800270c:	ebba 0b04 	subs.w	fp, sl, r4
 8002710:	d00b      	beq.n	800272a <_svfiprintf_r+0x7a>
 8002712:	465b      	mov	r3, fp
 8002714:	4622      	mov	r2, r4
 8002716:	4629      	mov	r1, r5
 8002718:	4638      	mov	r0, r7
 800271a:	f7ff ff6d 	bl	80025f8 <__ssputs_r>
 800271e:	3001      	adds	r0, #1
 8002720:	f000 80aa 	beq.w	8002878 <_svfiprintf_r+0x1c8>
 8002724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002726:	445a      	add	r2, fp
 8002728:	9209      	str	r2, [sp, #36]	; 0x24
 800272a:	f89a 3000 	ldrb.w	r3, [sl]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80a2 	beq.w	8002878 <_svfiprintf_r+0x1c8>
 8002734:	2300      	movs	r3, #0
 8002736:	f04f 32ff 	mov.w	r2, #4294967295
 800273a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800273e:	f10a 0a01 	add.w	sl, sl, #1
 8002742:	9304      	str	r3, [sp, #16]
 8002744:	9307      	str	r3, [sp, #28]
 8002746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800274a:	931a      	str	r3, [sp, #104]	; 0x68
 800274c:	4654      	mov	r4, sl
 800274e:	2205      	movs	r2, #5
 8002750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002754:	4851      	ldr	r0, [pc, #324]	; (800289c <_svfiprintf_r+0x1ec>)
 8002756:	f7fd fd3b 	bl	80001d0 <memchr>
 800275a:	9a04      	ldr	r2, [sp, #16]
 800275c:	b9d8      	cbnz	r0, 8002796 <_svfiprintf_r+0xe6>
 800275e:	06d0      	lsls	r0, r2, #27
 8002760:	bf44      	itt	mi
 8002762:	2320      	movmi	r3, #32
 8002764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002768:	0711      	lsls	r1, r2, #28
 800276a:	bf44      	itt	mi
 800276c:	232b      	movmi	r3, #43	; 0x2b
 800276e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002772:	f89a 3000 	ldrb.w	r3, [sl]
 8002776:	2b2a      	cmp	r3, #42	; 0x2a
 8002778:	d015      	beq.n	80027a6 <_svfiprintf_r+0xf6>
 800277a:	9a07      	ldr	r2, [sp, #28]
 800277c:	4654      	mov	r4, sl
 800277e:	2000      	movs	r0, #0
 8002780:	f04f 0c0a 	mov.w	ip, #10
 8002784:	4621      	mov	r1, r4
 8002786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800278a:	3b30      	subs	r3, #48	; 0x30
 800278c:	2b09      	cmp	r3, #9
 800278e:	d94e      	bls.n	800282e <_svfiprintf_r+0x17e>
 8002790:	b1b0      	cbz	r0, 80027c0 <_svfiprintf_r+0x110>
 8002792:	9207      	str	r2, [sp, #28]
 8002794:	e014      	b.n	80027c0 <_svfiprintf_r+0x110>
 8002796:	eba0 0308 	sub.w	r3, r0, r8
 800279a:	fa09 f303 	lsl.w	r3, r9, r3
 800279e:	4313      	orrs	r3, r2
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	46a2      	mov	sl, r4
 80027a4:	e7d2      	b.n	800274c <_svfiprintf_r+0x9c>
 80027a6:	9b03      	ldr	r3, [sp, #12]
 80027a8:	1d19      	adds	r1, r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	9103      	str	r1, [sp, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfbb      	ittet	lt
 80027b2:	425b      	neglt	r3, r3
 80027b4:	f042 0202 	orrlt.w	r2, r2, #2
 80027b8:	9307      	strge	r3, [sp, #28]
 80027ba:	9307      	strlt	r3, [sp, #28]
 80027bc:	bfb8      	it	lt
 80027be:	9204      	strlt	r2, [sp, #16]
 80027c0:	7823      	ldrb	r3, [r4, #0]
 80027c2:	2b2e      	cmp	r3, #46	; 0x2e
 80027c4:	d10c      	bne.n	80027e0 <_svfiprintf_r+0x130>
 80027c6:	7863      	ldrb	r3, [r4, #1]
 80027c8:	2b2a      	cmp	r3, #42	; 0x2a
 80027ca:	d135      	bne.n	8002838 <_svfiprintf_r+0x188>
 80027cc:	9b03      	ldr	r3, [sp, #12]
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	9203      	str	r2, [sp, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bfb8      	it	lt
 80027d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80027dc:	3402      	adds	r4, #2
 80027de:	9305      	str	r3, [sp, #20]
 80027e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80028ac <_svfiprintf_r+0x1fc>
 80027e4:	7821      	ldrb	r1, [r4, #0]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4650      	mov	r0, sl
 80027ea:	f7fd fcf1 	bl	80001d0 <memchr>
 80027ee:	b140      	cbz	r0, 8002802 <_svfiprintf_r+0x152>
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	eba0 000a 	sub.w	r0, r0, sl
 80027f6:	fa03 f000 	lsl.w	r0, r3, r0
 80027fa:	9b04      	ldr	r3, [sp, #16]
 80027fc:	4303      	orrs	r3, r0
 80027fe:	3401      	adds	r4, #1
 8002800:	9304      	str	r3, [sp, #16]
 8002802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002806:	4826      	ldr	r0, [pc, #152]	; (80028a0 <_svfiprintf_r+0x1f0>)
 8002808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800280c:	2206      	movs	r2, #6
 800280e:	f7fd fcdf 	bl	80001d0 <memchr>
 8002812:	2800      	cmp	r0, #0
 8002814:	d038      	beq.n	8002888 <_svfiprintf_r+0x1d8>
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <_svfiprintf_r+0x1f4>)
 8002818:	bb1b      	cbnz	r3, 8002862 <_svfiprintf_r+0x1b2>
 800281a:	9b03      	ldr	r3, [sp, #12]
 800281c:	3307      	adds	r3, #7
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	3308      	adds	r3, #8
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002828:	4433      	add	r3, r6
 800282a:	9309      	str	r3, [sp, #36]	; 0x24
 800282c:	e767      	b.n	80026fe <_svfiprintf_r+0x4e>
 800282e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002832:	460c      	mov	r4, r1
 8002834:	2001      	movs	r0, #1
 8002836:	e7a5      	b.n	8002784 <_svfiprintf_r+0xd4>
 8002838:	2300      	movs	r3, #0
 800283a:	3401      	adds	r4, #1
 800283c:	9305      	str	r3, [sp, #20]
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 0c0a 	mov.w	ip, #10
 8002844:	4620      	mov	r0, r4
 8002846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800284a:	3a30      	subs	r2, #48	; 0x30
 800284c:	2a09      	cmp	r2, #9
 800284e:	d903      	bls.n	8002858 <_svfiprintf_r+0x1a8>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0c5      	beq.n	80027e0 <_svfiprintf_r+0x130>
 8002854:	9105      	str	r1, [sp, #20]
 8002856:	e7c3      	b.n	80027e0 <_svfiprintf_r+0x130>
 8002858:	fb0c 2101 	mla	r1, ip, r1, r2
 800285c:	4604      	mov	r4, r0
 800285e:	2301      	movs	r3, #1
 8002860:	e7f0      	b.n	8002844 <_svfiprintf_r+0x194>
 8002862:	ab03      	add	r3, sp, #12
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	462a      	mov	r2, r5
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <_svfiprintf_r+0x1f8>)
 800286a:	a904      	add	r1, sp, #16
 800286c:	4638      	mov	r0, r7
 800286e:	f3af 8000 	nop.w
 8002872:	1c42      	adds	r2, r0, #1
 8002874:	4606      	mov	r6, r0
 8002876:	d1d6      	bne.n	8002826 <_svfiprintf_r+0x176>
 8002878:	89ab      	ldrh	r3, [r5, #12]
 800287a:	065b      	lsls	r3, r3, #25
 800287c:	f53f af2c 	bmi.w	80026d8 <_svfiprintf_r+0x28>
 8002880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002882:	b01d      	add	sp, #116	; 0x74
 8002884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002888:	ab03      	add	r3, sp, #12
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	462a      	mov	r2, r5
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <_svfiprintf_r+0x1f8>)
 8002890:	a904      	add	r1, sp, #16
 8002892:	4638      	mov	r0, r7
 8002894:	f000 f87a 	bl	800298c <_printf_i>
 8002898:	e7eb      	b.n	8002872 <_svfiprintf_r+0x1c2>
 800289a:	bf00      	nop
 800289c:	08003648 	.word	0x08003648
 80028a0:	08003652 	.word	0x08003652
 80028a4:	00000000 	.word	0x00000000
 80028a8:	080025f9 	.word	0x080025f9
 80028ac:	0800364e 	.word	0x0800364e

080028b0 <_printf_common>:
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	4616      	mov	r6, r2
 80028b6:	4699      	mov	r9, r3
 80028b8:	688a      	ldr	r2, [r1, #8]
 80028ba:	690b      	ldr	r3, [r1, #16]
 80028bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bfb8      	it	lt
 80028c4:	4613      	movlt	r3, r2
 80028c6:	6033      	str	r3, [r6, #0]
 80028c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028cc:	4607      	mov	r7, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	b10a      	cbz	r2, 80028d6 <_printf_common+0x26>
 80028d2:	3301      	adds	r3, #1
 80028d4:	6033      	str	r3, [r6, #0]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	0699      	lsls	r1, r3, #26
 80028da:	bf42      	ittt	mi
 80028dc:	6833      	ldrmi	r3, [r6, #0]
 80028de:	3302      	addmi	r3, #2
 80028e0:	6033      	strmi	r3, [r6, #0]
 80028e2:	6825      	ldr	r5, [r4, #0]
 80028e4:	f015 0506 	ands.w	r5, r5, #6
 80028e8:	d106      	bne.n	80028f8 <_printf_common+0x48>
 80028ea:	f104 0a19 	add.w	sl, r4, #25
 80028ee:	68e3      	ldr	r3, [r4, #12]
 80028f0:	6832      	ldr	r2, [r6, #0]
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	42ab      	cmp	r3, r5
 80028f6:	dc26      	bgt.n	8002946 <_printf_common+0x96>
 80028f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028fc:	1e13      	subs	r3, r2, #0
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	bf18      	it	ne
 8002902:	2301      	movne	r3, #1
 8002904:	0692      	lsls	r2, r2, #26
 8002906:	d42b      	bmi.n	8002960 <_printf_common+0xb0>
 8002908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800290c:	4649      	mov	r1, r9
 800290e:	4638      	mov	r0, r7
 8002910:	47c0      	blx	r8
 8002912:	3001      	adds	r0, #1
 8002914:	d01e      	beq.n	8002954 <_printf_common+0xa4>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	68e5      	ldr	r5, [r4, #12]
 800291a:	6832      	ldr	r2, [r6, #0]
 800291c:	f003 0306 	and.w	r3, r3, #6
 8002920:	2b04      	cmp	r3, #4
 8002922:	bf08      	it	eq
 8002924:	1aad      	subeq	r5, r5, r2
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	6922      	ldr	r2, [r4, #16]
 800292a:	bf0c      	ite	eq
 800292c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002930:	2500      	movne	r5, #0
 8002932:	4293      	cmp	r3, r2
 8002934:	bfc4      	itt	gt
 8002936:	1a9b      	subgt	r3, r3, r2
 8002938:	18ed      	addgt	r5, r5, r3
 800293a:	2600      	movs	r6, #0
 800293c:	341a      	adds	r4, #26
 800293e:	42b5      	cmp	r5, r6
 8002940:	d11a      	bne.n	8002978 <_printf_common+0xc8>
 8002942:	2000      	movs	r0, #0
 8002944:	e008      	b.n	8002958 <_printf_common+0xa8>
 8002946:	2301      	movs	r3, #1
 8002948:	4652      	mov	r2, sl
 800294a:	4649      	mov	r1, r9
 800294c:	4638      	mov	r0, r7
 800294e:	47c0      	blx	r8
 8002950:	3001      	adds	r0, #1
 8002952:	d103      	bne.n	800295c <_printf_common+0xac>
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295c:	3501      	adds	r5, #1
 800295e:	e7c6      	b.n	80028ee <_printf_common+0x3e>
 8002960:	18e1      	adds	r1, r4, r3
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	2030      	movs	r0, #48	; 0x30
 8002966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800296a:	4422      	add	r2, r4
 800296c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002974:	3302      	adds	r3, #2
 8002976:	e7c7      	b.n	8002908 <_printf_common+0x58>
 8002978:	2301      	movs	r3, #1
 800297a:	4622      	mov	r2, r4
 800297c:	4649      	mov	r1, r9
 800297e:	4638      	mov	r0, r7
 8002980:	47c0      	blx	r8
 8002982:	3001      	adds	r0, #1
 8002984:	d0e6      	beq.n	8002954 <_printf_common+0xa4>
 8002986:	3601      	adds	r6, #1
 8002988:	e7d9      	b.n	800293e <_printf_common+0x8e>
	...

0800298c <_printf_i>:
 800298c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	7e0f      	ldrb	r7, [r1, #24]
 8002992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002994:	2f78      	cmp	r7, #120	; 0x78
 8002996:	4691      	mov	r9, r2
 8002998:	4680      	mov	r8, r0
 800299a:	460c      	mov	r4, r1
 800299c:	469a      	mov	sl, r3
 800299e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029a2:	d807      	bhi.n	80029b4 <_printf_i+0x28>
 80029a4:	2f62      	cmp	r7, #98	; 0x62
 80029a6:	d80a      	bhi.n	80029be <_printf_i+0x32>
 80029a8:	2f00      	cmp	r7, #0
 80029aa:	f000 80d8 	beq.w	8002b5e <_printf_i+0x1d2>
 80029ae:	2f58      	cmp	r7, #88	; 0x58
 80029b0:	f000 80a3 	beq.w	8002afa <_printf_i+0x16e>
 80029b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029bc:	e03a      	b.n	8002a34 <_printf_i+0xa8>
 80029be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029c2:	2b15      	cmp	r3, #21
 80029c4:	d8f6      	bhi.n	80029b4 <_printf_i+0x28>
 80029c6:	a101      	add	r1, pc, #4	; (adr r1, 80029cc <_printf_i+0x40>)
 80029c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029cc:	08002a25 	.word	0x08002a25
 80029d0:	08002a39 	.word	0x08002a39
 80029d4:	080029b5 	.word	0x080029b5
 80029d8:	080029b5 	.word	0x080029b5
 80029dc:	080029b5 	.word	0x080029b5
 80029e0:	080029b5 	.word	0x080029b5
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	080029b5 	.word	0x080029b5
 80029ec:	080029b5 	.word	0x080029b5
 80029f0:	080029b5 	.word	0x080029b5
 80029f4:	080029b5 	.word	0x080029b5
 80029f8:	08002b45 	.word	0x08002b45
 80029fc:	08002a69 	.word	0x08002a69
 8002a00:	08002b27 	.word	0x08002b27
 8002a04:	080029b5 	.word	0x080029b5
 8002a08:	080029b5 	.word	0x080029b5
 8002a0c:	08002b67 	.word	0x08002b67
 8002a10:	080029b5 	.word	0x080029b5
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	080029b5 	.word	0x080029b5
 8002a1c:	080029b5 	.word	0x080029b5
 8002a20:	08002b2f 	.word	0x08002b2f
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	602a      	str	r2, [r5, #0]
 8002a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0a3      	b.n	8002b80 <_printf_i+0x1f4>
 8002a38:	6820      	ldr	r0, [r4, #0]
 8002a3a:	6829      	ldr	r1, [r5, #0]
 8002a3c:	0606      	lsls	r6, r0, #24
 8002a3e:	f101 0304 	add.w	r3, r1, #4
 8002a42:	d50a      	bpl.n	8002a5a <_printf_i+0xce>
 8002a44:	680e      	ldr	r6, [r1, #0]
 8002a46:	602b      	str	r3, [r5, #0]
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	da03      	bge.n	8002a54 <_printf_i+0xc8>
 8002a4c:	232d      	movs	r3, #45	; 0x2d
 8002a4e:	4276      	negs	r6, r6
 8002a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a54:	485e      	ldr	r0, [pc, #376]	; (8002bd0 <_printf_i+0x244>)
 8002a56:	230a      	movs	r3, #10
 8002a58:	e019      	b.n	8002a8e <_printf_i+0x102>
 8002a5a:	680e      	ldr	r6, [r1, #0]
 8002a5c:	602b      	str	r3, [r5, #0]
 8002a5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a62:	bf18      	it	ne
 8002a64:	b236      	sxthne	r6, r6
 8002a66:	e7ef      	b.n	8002a48 <_printf_i+0xbc>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	1d19      	adds	r1, r3, #4
 8002a6e:	6029      	str	r1, [r5, #0]
 8002a70:	0601      	lsls	r1, r0, #24
 8002a72:	d501      	bpl.n	8002a78 <_printf_i+0xec>
 8002a74:	681e      	ldr	r6, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <_printf_i+0xf2>
 8002a78:	0646      	lsls	r6, r0, #25
 8002a7a:	d5fb      	bpl.n	8002a74 <_printf_i+0xe8>
 8002a7c:	881e      	ldrh	r6, [r3, #0]
 8002a7e:	4854      	ldr	r0, [pc, #336]	; (8002bd0 <_printf_i+0x244>)
 8002a80:	2f6f      	cmp	r7, #111	; 0x6f
 8002a82:	bf0c      	ite	eq
 8002a84:	2308      	moveq	r3, #8
 8002a86:	230a      	movne	r3, #10
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a8e:	6865      	ldr	r5, [r4, #4]
 8002a90:	60a5      	str	r5, [r4, #8]
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	bfa2      	ittt	ge
 8002a96:	6821      	ldrge	r1, [r4, #0]
 8002a98:	f021 0104 	bicge.w	r1, r1, #4
 8002a9c:	6021      	strge	r1, [r4, #0]
 8002a9e:	b90e      	cbnz	r6, 8002aa4 <_printf_i+0x118>
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	d04d      	beq.n	8002b40 <_printf_i+0x1b4>
 8002aa4:	4615      	mov	r5, r2
 8002aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8002aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8002aae:	5dc7      	ldrb	r7, [r0, r7]
 8002ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ab4:	4637      	mov	r7, r6
 8002ab6:	42bb      	cmp	r3, r7
 8002ab8:	460e      	mov	r6, r1
 8002aba:	d9f4      	bls.n	8002aa6 <_printf_i+0x11a>
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d10b      	bne.n	8002ad8 <_printf_i+0x14c>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	07de      	lsls	r6, r3, #31
 8002ac4:	d508      	bpl.n	8002ad8 <_printf_i+0x14c>
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	6861      	ldr	r1, [r4, #4]
 8002aca:	4299      	cmp	r1, r3
 8002acc:	bfde      	ittt	le
 8002ace:	2330      	movle	r3, #48	; 0x30
 8002ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ad8:	1b52      	subs	r2, r2, r5
 8002ada:	6122      	str	r2, [r4, #16]
 8002adc:	f8cd a000 	str.w	sl, [sp]
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	aa03      	add	r2, sp, #12
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4640      	mov	r0, r8
 8002ae8:	f7ff fee2 	bl	80028b0 <_printf_common>
 8002aec:	3001      	adds	r0, #1
 8002aee:	d14c      	bne.n	8002b8a <_printf_i+0x1fe>
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	b004      	add	sp, #16
 8002af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afa:	4835      	ldr	r0, [pc, #212]	; (8002bd0 <_printf_i+0x244>)
 8002afc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b00:	6829      	ldr	r1, [r5, #0]
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b08:	6029      	str	r1, [r5, #0]
 8002b0a:	061d      	lsls	r5, r3, #24
 8002b0c:	d514      	bpl.n	8002b38 <_printf_i+0x1ac>
 8002b0e:	07df      	lsls	r7, r3, #31
 8002b10:	bf44      	itt	mi
 8002b12:	f043 0320 	orrmi.w	r3, r3, #32
 8002b16:	6023      	strmi	r3, [r4, #0]
 8002b18:	b91e      	cbnz	r6, 8002b22 <_printf_i+0x196>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f023 0320 	bic.w	r3, r3, #32
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	2310      	movs	r3, #16
 8002b24:	e7b0      	b.n	8002a88 <_printf_i+0xfc>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f043 0320 	orr.w	r3, r3, #32
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	2378      	movs	r3, #120	; 0x78
 8002b30:	4828      	ldr	r0, [pc, #160]	; (8002bd4 <_printf_i+0x248>)
 8002b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b36:	e7e3      	b.n	8002b00 <_printf_i+0x174>
 8002b38:	0659      	lsls	r1, r3, #25
 8002b3a:	bf48      	it	mi
 8002b3c:	b2b6      	uxthmi	r6, r6
 8002b3e:	e7e6      	b.n	8002b0e <_printf_i+0x182>
 8002b40:	4615      	mov	r5, r2
 8002b42:	e7bb      	b.n	8002abc <_printf_i+0x130>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	6826      	ldr	r6, [r4, #0]
 8002b48:	6961      	ldr	r1, [r4, #20]
 8002b4a:	1d18      	adds	r0, r3, #4
 8002b4c:	6028      	str	r0, [r5, #0]
 8002b4e:	0635      	lsls	r5, r6, #24
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	d501      	bpl.n	8002b58 <_printf_i+0x1cc>
 8002b54:	6019      	str	r1, [r3, #0]
 8002b56:	e002      	b.n	8002b5e <_printf_i+0x1d2>
 8002b58:	0670      	lsls	r0, r6, #25
 8002b5a:	d5fb      	bpl.n	8002b54 <_printf_i+0x1c8>
 8002b5c:	8019      	strh	r1, [r3, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6123      	str	r3, [r4, #16]
 8002b62:	4615      	mov	r5, r2
 8002b64:	e7ba      	b.n	8002adc <_printf_i+0x150>
 8002b66:	682b      	ldr	r3, [r5, #0]
 8002b68:	1d1a      	adds	r2, r3, #4
 8002b6a:	602a      	str	r2, [r5, #0]
 8002b6c:	681d      	ldr	r5, [r3, #0]
 8002b6e:	6862      	ldr	r2, [r4, #4]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4628      	mov	r0, r5
 8002b74:	f7fd fb2c 	bl	80001d0 <memchr>
 8002b78:	b108      	cbz	r0, 8002b7e <_printf_i+0x1f2>
 8002b7a:	1b40      	subs	r0, r0, r5
 8002b7c:	6060      	str	r0, [r4, #4]
 8002b7e:	6863      	ldr	r3, [r4, #4]
 8002b80:	6123      	str	r3, [r4, #16]
 8002b82:	2300      	movs	r3, #0
 8002b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b88:	e7a8      	b.n	8002adc <_printf_i+0x150>
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4640      	mov	r0, r8
 8002b92:	47d0      	blx	sl
 8002b94:	3001      	adds	r0, #1
 8002b96:	d0ab      	beq.n	8002af0 <_printf_i+0x164>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	079b      	lsls	r3, r3, #30
 8002b9c:	d413      	bmi.n	8002bc6 <_printf_i+0x23a>
 8002b9e:	68e0      	ldr	r0, [r4, #12]
 8002ba0:	9b03      	ldr	r3, [sp, #12]
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	bfb8      	it	lt
 8002ba6:	4618      	movlt	r0, r3
 8002ba8:	e7a4      	b.n	8002af4 <_printf_i+0x168>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4632      	mov	r2, r6
 8002bae:	4649      	mov	r1, r9
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	47d0      	blx	sl
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	d09b      	beq.n	8002af0 <_printf_i+0x164>
 8002bb8:	3501      	adds	r5, #1
 8002bba:	68e3      	ldr	r3, [r4, #12]
 8002bbc:	9903      	ldr	r1, [sp, #12]
 8002bbe:	1a5b      	subs	r3, r3, r1
 8002bc0:	42ab      	cmp	r3, r5
 8002bc2:	dcf2      	bgt.n	8002baa <_printf_i+0x21e>
 8002bc4:	e7eb      	b.n	8002b9e <_printf_i+0x212>
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	f104 0619 	add.w	r6, r4, #25
 8002bcc:	e7f5      	b.n	8002bba <_printf_i+0x22e>
 8002bce:	bf00      	nop
 8002bd0:	08003659 	.word	0x08003659
 8002bd4:	0800366a 	.word	0x0800366a

08002bd8 <memcpy>:
 8002bd8:	440a      	add	r2, r1
 8002bda:	4291      	cmp	r1, r2
 8002bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002be0:	d100      	bne.n	8002be4 <memcpy+0xc>
 8002be2:	4770      	bx	lr
 8002be4:	b510      	push	{r4, lr}
 8002be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bee:	4291      	cmp	r1, r2
 8002bf0:	d1f9      	bne.n	8002be6 <memcpy+0xe>
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <memmove>:
 8002bf4:	4288      	cmp	r0, r1
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	eb01 0402 	add.w	r4, r1, r2
 8002bfc:	d902      	bls.n	8002c04 <memmove+0x10>
 8002bfe:	4284      	cmp	r4, r0
 8002c00:	4623      	mov	r3, r4
 8002c02:	d807      	bhi.n	8002c14 <memmove+0x20>
 8002c04:	1e43      	subs	r3, r0, #1
 8002c06:	42a1      	cmp	r1, r4
 8002c08:	d008      	beq.n	8002c1c <memmove+0x28>
 8002c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c12:	e7f8      	b.n	8002c06 <memmove+0x12>
 8002c14:	4402      	add	r2, r0
 8002c16:	4601      	mov	r1, r0
 8002c18:	428a      	cmp	r2, r1
 8002c1a:	d100      	bne.n	8002c1e <memmove+0x2a>
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c26:	e7f7      	b.n	8002c18 <memmove+0x24>

08002c28 <_free_r>:
 8002c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d044      	beq.n	8002cb8 <_free_r+0x90>
 8002c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c32:	9001      	str	r0, [sp, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f1a1 0404 	sub.w	r4, r1, #4
 8002c3a:	bfb8      	it	lt
 8002c3c:	18e4      	addlt	r4, r4, r3
 8002c3e:	f000 f913 	bl	8002e68 <__malloc_lock>
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <_free_r+0x94>)
 8002c44:	9801      	ldr	r0, [sp, #4]
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	b933      	cbnz	r3, 8002c58 <_free_r+0x30>
 8002c4a:	6063      	str	r3, [r4, #4]
 8002c4c:	6014      	str	r4, [r2, #0]
 8002c4e:	b003      	add	sp, #12
 8002c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c54:	f000 b90e 	b.w	8002e74 <__malloc_unlock>
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	d908      	bls.n	8002c6e <_free_r+0x46>
 8002c5c:	6825      	ldr	r5, [r4, #0]
 8002c5e:	1961      	adds	r1, r4, r5
 8002c60:	428b      	cmp	r3, r1
 8002c62:	bf01      	itttt	eq
 8002c64:	6819      	ldreq	r1, [r3, #0]
 8002c66:	685b      	ldreq	r3, [r3, #4]
 8002c68:	1949      	addeq	r1, r1, r5
 8002c6a:	6021      	streq	r1, [r4, #0]
 8002c6c:	e7ed      	b.n	8002c4a <_free_r+0x22>
 8002c6e:	461a      	mov	r2, r3
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	b10b      	cbz	r3, 8002c78 <_free_r+0x50>
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	d9fa      	bls.n	8002c6e <_free_r+0x46>
 8002c78:	6811      	ldr	r1, [r2, #0]
 8002c7a:	1855      	adds	r5, r2, r1
 8002c7c:	42a5      	cmp	r5, r4
 8002c7e:	d10b      	bne.n	8002c98 <_free_r+0x70>
 8002c80:	6824      	ldr	r4, [r4, #0]
 8002c82:	4421      	add	r1, r4
 8002c84:	1854      	adds	r4, r2, r1
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	6011      	str	r1, [r2, #0]
 8002c8a:	d1e0      	bne.n	8002c4e <_free_r+0x26>
 8002c8c:	681c      	ldr	r4, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	6053      	str	r3, [r2, #4]
 8002c92:	4421      	add	r1, r4
 8002c94:	6011      	str	r1, [r2, #0]
 8002c96:	e7da      	b.n	8002c4e <_free_r+0x26>
 8002c98:	d902      	bls.n	8002ca0 <_free_r+0x78>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	6003      	str	r3, [r0, #0]
 8002c9e:	e7d6      	b.n	8002c4e <_free_r+0x26>
 8002ca0:	6825      	ldr	r5, [r4, #0]
 8002ca2:	1961      	adds	r1, r4, r5
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	bf04      	itt	eq
 8002ca8:	6819      	ldreq	r1, [r3, #0]
 8002caa:	685b      	ldreq	r3, [r3, #4]
 8002cac:	6063      	str	r3, [r4, #4]
 8002cae:	bf04      	itt	eq
 8002cb0:	1949      	addeq	r1, r1, r5
 8002cb2:	6021      	streq	r1, [r4, #0]
 8002cb4:	6054      	str	r4, [r2, #4]
 8002cb6:	e7ca      	b.n	8002c4e <_free_r+0x26>
 8002cb8:	b003      	add	sp, #12
 8002cba:	bd30      	pop	{r4, r5, pc}
 8002cbc:	2000031c 	.word	0x2000031c

08002cc0 <sbrk_aligned>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4e0e      	ldr	r6, [pc, #56]	; (8002cfc <sbrk_aligned+0x3c>)
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	6831      	ldr	r1, [r6, #0]
 8002cc8:	4605      	mov	r5, r0
 8002cca:	b911      	cbnz	r1, 8002cd2 <sbrk_aligned+0x12>
 8002ccc:	f000 f8bc 	bl	8002e48 <_sbrk_r>
 8002cd0:	6030      	str	r0, [r6, #0]
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f000 f8b7 	bl	8002e48 <_sbrk_r>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	d00a      	beq.n	8002cf4 <sbrk_aligned+0x34>
 8002cde:	1cc4      	adds	r4, r0, #3
 8002ce0:	f024 0403 	bic.w	r4, r4, #3
 8002ce4:	42a0      	cmp	r0, r4
 8002ce6:	d007      	beq.n	8002cf8 <sbrk_aligned+0x38>
 8002ce8:	1a21      	subs	r1, r4, r0
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 f8ac 	bl	8002e48 <_sbrk_r>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d101      	bne.n	8002cf8 <sbrk_aligned+0x38>
 8002cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	20000320 	.word	0x20000320

08002d00 <_malloc_r>:
 8002d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d04:	1ccd      	adds	r5, r1, #3
 8002d06:	f025 0503 	bic.w	r5, r5, #3
 8002d0a:	3508      	adds	r5, #8
 8002d0c:	2d0c      	cmp	r5, #12
 8002d0e:	bf38      	it	cc
 8002d10:	250c      	movcc	r5, #12
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	4607      	mov	r7, r0
 8002d16:	db01      	blt.n	8002d1c <_malloc_r+0x1c>
 8002d18:	42a9      	cmp	r1, r5
 8002d1a:	d905      	bls.n	8002d28 <_malloc_r+0x28>
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	2600      	movs	r6, #0
 8002d22:	4630      	mov	r0, r6
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d28:	4e2e      	ldr	r6, [pc, #184]	; (8002de4 <_malloc_r+0xe4>)
 8002d2a:	f000 f89d 	bl	8002e68 <__malloc_lock>
 8002d2e:	6833      	ldr	r3, [r6, #0]
 8002d30:	461c      	mov	r4, r3
 8002d32:	bb34      	cbnz	r4, 8002d82 <_malloc_r+0x82>
 8002d34:	4629      	mov	r1, r5
 8002d36:	4638      	mov	r0, r7
 8002d38:	f7ff ffc2 	bl	8002cc0 <sbrk_aligned>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	4604      	mov	r4, r0
 8002d40:	d14d      	bne.n	8002dde <_malloc_r+0xde>
 8002d42:	6834      	ldr	r4, [r6, #0]
 8002d44:	4626      	mov	r6, r4
 8002d46:	2e00      	cmp	r6, #0
 8002d48:	d140      	bne.n	8002dcc <_malloc_r+0xcc>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	4631      	mov	r1, r6
 8002d4e:	4638      	mov	r0, r7
 8002d50:	eb04 0803 	add.w	r8, r4, r3
 8002d54:	f000 f878 	bl	8002e48 <_sbrk_r>
 8002d58:	4580      	cmp	r8, r0
 8002d5a:	d13a      	bne.n	8002dd2 <_malloc_r+0xd2>
 8002d5c:	6821      	ldr	r1, [r4, #0]
 8002d5e:	3503      	adds	r5, #3
 8002d60:	1a6d      	subs	r5, r5, r1
 8002d62:	f025 0503 	bic.w	r5, r5, #3
 8002d66:	3508      	adds	r5, #8
 8002d68:	2d0c      	cmp	r5, #12
 8002d6a:	bf38      	it	cc
 8002d6c:	250c      	movcc	r5, #12
 8002d6e:	4629      	mov	r1, r5
 8002d70:	4638      	mov	r0, r7
 8002d72:	f7ff ffa5 	bl	8002cc0 <sbrk_aligned>
 8002d76:	3001      	adds	r0, #1
 8002d78:	d02b      	beq.n	8002dd2 <_malloc_r+0xd2>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	442b      	add	r3, r5
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	e00e      	b.n	8002da0 <_malloc_r+0xa0>
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	1b52      	subs	r2, r2, r5
 8002d86:	d41e      	bmi.n	8002dc6 <_malloc_r+0xc6>
 8002d88:	2a0b      	cmp	r2, #11
 8002d8a:	d916      	bls.n	8002dba <_malloc_r+0xba>
 8002d8c:	1961      	adds	r1, r4, r5
 8002d8e:	42a3      	cmp	r3, r4
 8002d90:	6025      	str	r5, [r4, #0]
 8002d92:	bf18      	it	ne
 8002d94:	6059      	strne	r1, [r3, #4]
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	bf08      	it	eq
 8002d9a:	6031      	streq	r1, [r6, #0]
 8002d9c:	5162      	str	r2, [r4, r5]
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	4638      	mov	r0, r7
 8002da2:	f104 060b 	add.w	r6, r4, #11
 8002da6:	f000 f865 	bl	8002e74 <__malloc_unlock>
 8002daa:	f026 0607 	bic.w	r6, r6, #7
 8002dae:	1d23      	adds	r3, r4, #4
 8002db0:	1af2      	subs	r2, r6, r3
 8002db2:	d0b6      	beq.n	8002d22 <_malloc_r+0x22>
 8002db4:	1b9b      	subs	r3, r3, r6
 8002db6:	50a3      	str	r3, [r4, r2]
 8002db8:	e7b3      	b.n	8002d22 <_malloc_r+0x22>
 8002dba:	6862      	ldr	r2, [r4, #4]
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	bf0c      	ite	eq
 8002dc0:	6032      	streq	r2, [r6, #0]
 8002dc2:	605a      	strne	r2, [r3, #4]
 8002dc4:	e7ec      	b.n	8002da0 <_malloc_r+0xa0>
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	6864      	ldr	r4, [r4, #4]
 8002dca:	e7b2      	b.n	8002d32 <_malloc_r+0x32>
 8002dcc:	4634      	mov	r4, r6
 8002dce:	6876      	ldr	r6, [r6, #4]
 8002dd0:	e7b9      	b.n	8002d46 <_malloc_r+0x46>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4638      	mov	r0, r7
 8002dd8:	f000 f84c 	bl	8002e74 <__malloc_unlock>
 8002ddc:	e7a1      	b.n	8002d22 <_malloc_r+0x22>
 8002dde:	6025      	str	r5, [r4, #0]
 8002de0:	e7de      	b.n	8002da0 <_malloc_r+0xa0>
 8002de2:	bf00      	nop
 8002de4:	2000031c 	.word	0x2000031c

08002de8 <_realloc_r>:
 8002de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dec:	4680      	mov	r8, r0
 8002dee:	4614      	mov	r4, r2
 8002df0:	460e      	mov	r6, r1
 8002df2:	b921      	cbnz	r1, 8002dfe <_realloc_r+0x16>
 8002df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	4611      	mov	r1, r2
 8002dfa:	f7ff bf81 	b.w	8002d00 <_malloc_r>
 8002dfe:	b92a      	cbnz	r2, 8002e0c <_realloc_r+0x24>
 8002e00:	f7ff ff12 	bl	8002c28 <_free_r>
 8002e04:	4625      	mov	r5, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e0c:	f000 f838 	bl	8002e80 <_malloc_usable_size_r>
 8002e10:	4284      	cmp	r4, r0
 8002e12:	4607      	mov	r7, r0
 8002e14:	d802      	bhi.n	8002e1c <_realloc_r+0x34>
 8002e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e1a:	d812      	bhi.n	8002e42 <_realloc_r+0x5a>
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f7ff ff6e 	bl	8002d00 <_malloc_r>
 8002e24:	4605      	mov	r5, r0
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d0ed      	beq.n	8002e06 <_realloc_r+0x1e>
 8002e2a:	42bc      	cmp	r4, r7
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4631      	mov	r1, r6
 8002e30:	bf28      	it	cs
 8002e32:	463a      	movcs	r2, r7
 8002e34:	f7ff fed0 	bl	8002bd8 <memcpy>
 8002e38:	4631      	mov	r1, r6
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	f7ff fef4 	bl	8002c28 <_free_r>
 8002e40:	e7e1      	b.n	8002e06 <_realloc_r+0x1e>
 8002e42:	4635      	mov	r5, r6
 8002e44:	e7df      	b.n	8002e06 <_realloc_r+0x1e>
	...

08002e48 <_sbrk_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4d06      	ldr	r5, [pc, #24]	; (8002e64 <_sbrk_r+0x1c>)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f7fd ff26 	bl	8000ca4 <_sbrk>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d102      	bne.n	8002e62 <_sbrk_r+0x1a>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	b103      	cbz	r3, 8002e62 <_sbrk_r+0x1a>
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	bd38      	pop	{r3, r4, r5, pc}
 8002e64:	20000324 	.word	0x20000324

08002e68 <__malloc_lock>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__malloc_lock+0x8>)
 8002e6a:	f000 b811 	b.w	8002e90 <__retarget_lock_acquire_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20000328 	.word	0x20000328

08002e74 <__malloc_unlock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_unlock+0x8>)
 8002e76:	f000 b80c 	b.w	8002e92 <__retarget_lock_release_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000328 	.word	0x20000328

08002e80 <_malloc_usable_size_r>:
 8002e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e84:	1f18      	subs	r0, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bfbc      	itt	lt
 8002e8a:	580b      	ldrlt	r3, [r1, r0]
 8002e8c:	18c0      	addlt	r0, r0, r3
 8002e8e:	4770      	bx	lr

08002e90 <__retarget_lock_acquire_recursive>:
 8002e90:	4770      	bx	lr

08002e92 <__retarget_lock_release_recursive>:
 8002e92:	4770      	bx	lr

08002e94 <_init>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr

08002ea0 <_fini>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr
