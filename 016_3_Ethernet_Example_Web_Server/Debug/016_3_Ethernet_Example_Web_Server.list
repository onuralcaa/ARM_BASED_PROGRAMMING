
016_3_Ethernet_Example_Web_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003478  08011658  08011658  00021658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ad0  08014ad0  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08014ad0  08014ad0  00024ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ad8  08014ad8  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ad8  08014ad8  00024ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014adc  08014adc  00024adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08014ae0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c98  20000080  08014b60  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006d18  08014b60  00036d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c57  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e18  00000000  00000000  00048d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0004db20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0004ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d2ca  00000000  00000000  0004fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022529  00000000  00000000  0007d032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d98d0  00000000  00000000  0009f55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f04  00000000  00000000  00178e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011640 	.word	0x08011640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08011640 	.word	0x08011640

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <LedCGIhandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	603b      	str	r3, [r7, #0]
    uint32_t i = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

    if (iIndex == 0) {
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <LedCGIhandler+0x30>

        //turning the LED lights off
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <LedCGIhandler+0xb0>)
 80005c4:	f002 f940 	bl	8002848 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4821      	ldr	r0, [pc, #132]	; (8000654 <LedCGIhandler+0xb0>)
 80005d0:	f002 f93a 	bl	8002848 <HAL_GPIO_WritePin>

    }

    for (i = 0; i < iNumParams; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e033      	b.n	8000642 <LedCGIhandler+0x9e>

        if (strcmp(pcParam[i], "led") == 0)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	491c      	ldr	r1, [pc, #112]	; (8000658 <LedCGIhandler+0xb4>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf2 	bl	80001d0 <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d124      	bne.n	800063c <LedCGIhandler+0x98>

        {

            if (strcmp(pcValue[i], "1") == 0) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4917      	ldr	r1, [pc, #92]	; (800065c <LedCGIhandler+0xb8>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fde6 	bl	80001d0 <strcmp>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d106      	bne.n	8000618 <LedCGIhandler+0x74>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <LedCGIhandler+0xb0>)
 8000612:	f002 f919 	bl	8002848 <HAL_GPIO_WritePin>
 8000616:	e011      	b.n	800063c <LedCGIhandler+0x98>
            }

            else if (strcmp(pcValue[i], "2") == 0) {
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	4413      	add	r3, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	490f      	ldr	r1, [pc, #60]	; (8000660 <LedCGIhandler+0xbc>)
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fdd3 	bl	80001d0 <strcmp>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d105      	bne.n	800063c <LedCGIhandler+0x98>

                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <LedCGIhandler+0xb0>)
 8000638:	f002 f906 	bl	8002848 <HAL_GPIO_WritePin>
    for (i = 0; i < iNumParams; i++) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3c7      	bcc.n	80005da <LedCGIhandler+0x36>
            }

        }

    }
    return "/index2.html";
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LedCGIhandler+0xc0>)
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00
 8000658:	08011674 	.word	0x08011674
 800065c:	08011678 	.word	0x08011678
 8000660:	0801167c 	.word	0x0801167c
 8000664:	08011680 	.word	0x08011680

08000668 <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]

	if(iIndex == 0)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d105      	bne.n	8000686 <mySSIHandler+0x1e>
	{
		sprintf(pcInsert,"1234 ABC");
 800067a:	4907      	ldr	r1, [pc, #28]	; (8000698 <mySSIHandler+0x30>)
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f00f fe0f 	bl	80102a0 <siprintf>
		return 8;
 8000682:	2308      	movs	r3, #8
 8000684:	e004      	b.n	8000690 <mySSIHandler+0x28>
	}
	else
	{
		sprintf(pcInsert,"ADC Voltage 3.300 V");
 8000686:	4905      	ldr	r1, [pc, #20]	; (800069c <mySSIHandler+0x34>)
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	f00f fe09 	bl	80102a0 <siprintf>
		return 19;
 800068e:	2313      	movs	r3, #19
	}

	return 0;
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08011690 	.word	0x08011690
 800069c:	0801169c 	.word	0x0801169c

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fca6 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f828 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f890 	bl	80007d0 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006b0:	f002 fd4a 	bl	8003148 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80006b4:	f000 fa2e 	bl	8000b14 <tcp_echoserver_init>
  udp_echoserver_init();
 80006b8:	f000 fc32 	bl	8000f20 <udp_echoserver_init>
  httpd_init();
 80006bc:	f004 fd02 	bl	80050c4 <httpd_init>

  theCGItable[0] = LedCGI;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <main+0x4c>)
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <main+0x50>)
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(theCGItable, 1);
 80006cc:	2101      	movs	r1, #1
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <main+0x4c>)
 80006d0:	f004 fd5a 	bl	8005188 <http_set_cgi_handlers>

  http_set_ssi_handler(mySSIHandler, (char const **) theSSItags, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	4907      	ldr	r1, [pc, #28]	; (80006f4 <main+0x54>)
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <main+0x58>)
 80006da:	f004 fd13 	bl	8005104 <http_set_ssi_handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80006de:	f002 fe65 	bl	80033ac <MX_LWIP_Process>
	  HAL_Delay(50);
 80006e2:	2032      	movs	r0, #50	; 0x32
 80006e4:	f000 fcf8 	bl	80010d8 <HAL_Delay>
	  MX_LWIP_Process();
 80006e8:	e7f9      	b.n	80006de <main+0x3e>
 80006ea:	bf00      	nop
 80006ec:	2000009c 	.word	0x2000009c
 80006f0:	08014408 	.word	0x08014408
 80006f4:	20000000 	.word	0x20000000
 80006f8:	08000669 	.word	0x08000669

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00f fd6a 	bl	80101e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	; 0xa8
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f87b 	bl	800287c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f88e 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fad2 	bl	8002d58 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f877 	bl	80008ac <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_GPIO_Init+0xd8>)
 800087a:	f001 ffe5 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800087e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000898:	f001 fe3a 	bl	8002510 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020c00 	.word	0x40020c00

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 fb9a 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	return 1;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_kill>:

int _kill(int pid, int sig)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <_kill+0x20>)
 8000984:	2216      	movs	r2, #22
 8000986:	601a      	str	r2, [r3, #0]
	return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	20006d08 	.word	0x20006d08

0800099c <_exit>:

void _exit (int status)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ffe5 	bl	8000978 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009ae:	e7fe      	b.n	80009ae <_exit+0x12>

080009b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
	}

return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e009      	b.n	8000a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf1      	blt.n	80009fc <_write+0x12>
	}
	return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_close>:

int _close(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_isatty>:

int _isatty(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return 1;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x16>
		heap_end = &end;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <_sbrk+0x50>)
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <_sbrk+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <_sbrk+0x50>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <_sbrk+0x50>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	466a      	mov	r2, sp
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d905      	bls.n	8000ac2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <_sbrk+0x58>)
 8000ab8:	220c      	movs	r2, #12
 8000aba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <_sbrk+0x44>
	}

	heap_end += incr;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <_sbrk+0x50>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <_sbrk+0x50>)
 8000acc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	20006d18 	.word	0x20006d18
 8000ae4:	20006d08 	.word	0x20006d08

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <SystemInit+0x28>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <SystemInit+0x28>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SystemInit+0x28>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b02:	609a      	str	r2, [r3, #8]
#endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000b1a:	f007 fccb 	bl	80084b4 <tcp_new>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b22:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d022      	beq.n	8000b72 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2207      	movs	r2, #7
 8000b32:	4913      	ldr	r1, [pc, #76]	; (8000b80 <tcp_echoserver_init+0x6c>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f006 fc19 	bl	800736c <tcp_bind>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10f      	bne.n	8000b66 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	21ff      	movs	r1, #255	; 0xff
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fcc5 	bl	80074dc <tcp_listen_with_backlog>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b56:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4909      	ldr	r1, [pc, #36]	; (8000b84 <tcp_echoserver_init+0x70>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fd36 	bl	80085d0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000b64:	e005      	b.n	8000b72 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <tcp_echoserver_init+0x68>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f005 f847 	bl	8005c00 <memp_free>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000a8 	.word	0x200000a8
 8000b80:	08014974 	.word	0x08014974
 8000b84:	08000b89 	.word	0x08000b89

08000b88 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b96:	2101      	movs	r1, #1
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f007 fa99 	bl	80080d0 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000b9e:	200c      	movs	r0, #12
 8000ba0:	f004 fe74 	bl	800588c <mem_malloc>
 8000ba4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d01f      	beq.n	8000bec <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000bc4:	6939      	ldr	r1, [r7, #16]
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f007 fc8a 	bl	80084e0 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000bcc:	490d      	ldr	r1, [pc, #52]	; (8000c04 <tcp_echoserver_accept+0x7c>)
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f007 fc98 	bl	8008504 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <tcp_echoserver_accept+0x80>)
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f007 fcd8 	bl	800858c <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	490b      	ldr	r1, [pc, #44]	; (8000c0c <tcp_echoserver_accept+0x84>)
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f007 fd0d 	bl	8008600 <tcp_poll>
    
    ret_err = ERR_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	e005      	b.n	8000bf8 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000bec:	6939      	ldr	r1, [r7, #16]
 8000bee:	68b8      	ldr	r0, [r7, #8]
 8000bf0:	f000 f96f 	bl	8000ed2 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08000c11 	.word	0x08000c11
 8000c08:	08000d59 	.word	0x08000d59
 8000c0c:	08000d7d 	.word	0x08000d7d

08000c10 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <tcp_echoserver_recv+0x20>
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <tcp_echoserver_recv+0x134>)
 8000c26:	22ad      	movs	r2, #173	; 0xad
 8000c28:	4947      	ldr	r1, [pc, #284]	; (8000d48 <tcp_echoserver_recv+0x138>)
 8000c2a:	4848      	ldr	r0, [pc, #288]	; (8000d4c <tcp_echoserver_recv+0x13c>)
 8000c2c:	f00f fae2 	bl	80101f4 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d116      	bne.n	8000c68 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000c48:	69b9      	ldr	r1, [r7, #24]
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f000 f941 	bl	8000ed2 <tcp_echoserver_connection_close>
 8000c50:	e007      	b.n	8000c62 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000c52:	493f      	ldr	r1, [pc, #252]	; (8000d50 <tcp_echoserver_recv+0x140>)
 8000c54:	68b8      	ldr	r0, [r7, #8]
 8000c56:	f007 fc77 	bl	8008548 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000c5a:	69b9      	ldr	r1, [r7, #24]
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f000 f8e5 	bl	8000e2c <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	77fb      	strb	r3, [r7, #31]
 8000c66:	e067      	b.n	8000d38 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00b      	beq.n	8000c88 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f005 fdd1 	bl	8006824 <pbuf_free>
    }
    ret_err = err;
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	77fb      	strb	r3, [r7, #31]
 8000c86:	e057      	b.n	8000d38 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d114      	bne.n	8000cba <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c9c:	492c      	ldr	r1, [pc, #176]	; (8000d50 <tcp_echoserver_recv+0x140>)
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	f007 fc52 	bl	8008548 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <tcp_echoserver_recv+0x144>)
 8000caa:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000cac:	69b9      	ldr	r1, [r7, #24]
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	f000 f8bc 	bl	8000e2c <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	77fb      	strb	r3, [r7, #31]
 8000cb8:	e03e      	b.n	8000d38 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d119      	bne.n	8000cf6 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10b      	bne.n	8000ce2 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <tcp_echoserver_recv+0x144>)
 8000cd6:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000cd8:	69b9      	ldr	r1, [r7, #24]
 8000cda:	68b8      	ldr	r0, [r7, #8]
 8000cdc:	f000 f8a6 	bl	8000e2c <tcp_echoserver_send>
 8000ce0:	e006      	b.n	8000cf0 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f005 feb2 	bl	8006a54 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	77fb      	strb	r3, [r7, #31]
 8000cf4:	e020      	b.n	8000d38 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d10e      	bne.n	8000d1c <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	891b      	ldrh	r3, [r3, #8]
 8000d02:	4619      	mov	r1, r3
 8000d04:	68b8      	ldr	r0, [r7, #8]
 8000d06:	f006 fcff 	bl	8007708 <tcp_recved>
    es->p = NULL;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f005 fd87 	bl	8006824 <pbuf_free>
    ret_err = ERR_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	77fb      	strb	r3, [r7, #31]
 8000d1a:	e00d      	b.n	8000d38 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	891b      	ldrh	r3, [r3, #8]
 8000d20:	4619      	mov	r1, r3
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f006 fcf0 	bl	8007708 <tcp_recved>
    es->p = NULL;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f005 fd78 	bl	8006824 <pbuf_free>
    ret_err = ERR_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	080116b0 	.word	0x080116b0
 8000d48:	080116d0 	.word	0x080116d0
 8000d4c:	080116dc 	.word	0x080116dc
 8000d50:	08000ddd 	.word	0x08000ddd
 8000d54:	08011704 	.word	0x08011704

08000d58 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f004 fc26 	bl	80055c0 <mem_free>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d017      	beq.n	8000dc0 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000d98:	490f      	ldr	r1, [pc, #60]	; (8000dd8 <tcp_echoserver_poll+0x5c>)
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f007 fbd4 	bl	8008548 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6838      	ldr	r0, [r7, #0]
 8000da4:	f000 f842 	bl	8000e2c <tcp_echoserver_send>
 8000da8:	e007      	b.n	8000dba <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d103      	bne.n	8000dba <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6838      	ldr	r0, [r7, #0]
 8000db6:	f000 f88c 	bl	8000ed2 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e004      	b.n	8000dca <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f006 fac7 	bl	8007354 <tcp_abort>
    ret_err = ERR_ABRT;
 8000dc6:	23f3      	movs	r3, #243	; 0xf3
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08000ddd 	.word	0x08000ddd

08000ddc <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	4613      	mov	r3, r2
 8000de8:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2200      	movs	r2, #0
 8000df2:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000dfc:	490a      	ldr	r1, [pc, #40]	; (8000e28 <tcp_echoserver_sent+0x4c>)
 8000dfe:	68b8      	ldr	r0, [r7, #8]
 8000e00:	f007 fba2 	bl	8008548 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000e04:	6979      	ldr	r1, [r7, #20]
 8000e06:	68b8      	ldr	r0, [r7, #8]
 8000e08:	f000 f810 	bl	8000e2c <tcp_echoserver_send>
 8000e0c:	e007      	b.n	8000e1e <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d103      	bne.n	8000e1e <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000e16:	6979      	ldr	r1, [r7, #20]
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f000 f85a 	bl	8000ed2 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08000ddd 	.word	0x08000ddd

08000e2c <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000e3a:	e036      	b.n	8000eaa <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	895a      	ldrh	r2, [r3, #10]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f00a fa89 	bl	800b364 <tcp_write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11d      	bne.n	8000e9a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	895b      	ldrh	r3, [r3, #10]
 8000e62:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 fd73 	bl	8006964 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000e7e:	6938      	ldr	r0, [r7, #16]
 8000e80:	f005 fcd0 	bl	8006824 <pbuf_free>
 8000e84:	4603      	mov	r3, r0
 8000e86:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f7      	beq.n	8000e7e <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	4619      	mov	r1, r3
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f006 fc38 	bl	8007708 <tcp_recved>
 8000e98:	e007      	b.n	8000eaa <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea2:	d102      	bne.n	8000eaa <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10b      	bne.n	8000eca <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	895a      	ldrh	r2, [r3, #10]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d9b8      	bls.n	8000e3c <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000edc:	2100      	movs	r1, #0
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f007 fafe 	bl	80084e0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f007 fb2e 	bl	8008548 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f007 fb08 	bl	8008504 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f007 fb48 	bl	800858c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f007 fb7d 	bl	8008600 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f004 fb57 	bl	80055c0 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f006 f934 	bl	8007180 <tcp_close>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000f26:	f00c fdf3 	bl	800db10 <udp_new>
 8000f2a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d013      	beq.n	8000f5a <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000f32:	2207      	movs	r2, #7
 8000f34:	490b      	ldr	r1, [pc, #44]	; (8000f64 <udp_echoserver_init+0x44>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f00c fc6a 	bl	800d810 <udp_bind>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4907      	ldr	r1, [pc, #28]	; (8000f68 <udp_echoserver_init+0x48>)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f00c fd7d 	bl	800da4c <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000f52:	e002      	b.n	8000f5a <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f00c fd99 	bl	800da8c <udp_remove>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08014974 	.word	0x08014974
 8000f68:	08000f6d 	.word	0x08000f6d

08000f6c <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f00c fcce 	bl	800d920 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f00c fa58 	bl	800d43c <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f00c fd35 	bl	800d9fc <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f005 fc46 	bl	8006824 <pbuf_free>
   
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff fd8d 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f00f f8ad 	bl	801012c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fb65 	bl	80006a0 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08014ae0 	.word	0x08014ae0
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000fe8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000fec:	20006d18 	.word	0x20006d18

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f931 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fc48 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f93b 	bl	80012d2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f911 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000008 	.word	0x20000008
 8001090:	20000010 	.word	0x20000010
 8001094:	2000000c 	.word	0x2000000c

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000010 	.word	0x20000010
 80010bc:	200000ac 	.word	0x200000ac

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200000ac 	.word	0x200000ac

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000010 	.word	0x20000010

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff47 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff8e 	bl	80011d8 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb0 	bl	8001240 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012fc:	4ba1      	ldr	r3, [pc, #644]	; (8001584 <HAL_ETH_Init+0x298>)
 80012fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e182      	b.n	8001618 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f002 f84c 	bl	80033c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <HAL_ETH_Init+0x29c>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	4a94      	ldr	r2, [pc, #592]	; (8001588 <HAL_ETH_Init+0x29c>)
 8001336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133a:	6453      	str	r3, [r2, #68]	; 0x44
 800133c:	4b92      	ldr	r3, [pc, #584]	; (8001588 <HAL_ETH_Init+0x29c>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001348:	4b90      	ldr	r3, [pc, #576]	; (800158c <HAL_ETH_Init+0x2a0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a8f      	ldr	r2, [pc, #572]	; (800158c <HAL_ETH_Init+0x2a0>)
 800134e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001352:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001354:	4b8d      	ldr	r3, [pc, #564]	; (800158c <HAL_ETH_Init+0x2a0>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	498b      	ldr	r1, [pc, #556]	; (800158c <HAL_ETH_Init+0x2a0>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001378:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800137a:	f7ff fea1 	bl	80010c0 <HAL_GetTick>
 800137e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001380:	e011      	b.n	80013a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001382:	f7ff fe9d 	bl	80010c0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001390:	d909      	bls.n	80013a6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e138      	b.n	8001618 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e4      	bne.n	8001382 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f023 031c 	bic.w	r3, r3, #28
 80013c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013c8:	f001 feb2 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 80013cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_ETH_Init+0x2a4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d908      	bls.n	80013e8 <HAL_ETH_Init+0xfc>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_ETH_Init+0x2a8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d804      	bhi.n	80013e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e027      	b.n	8001438 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_ETH_Init+0x2a8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d908      	bls.n	8001402 <HAL_ETH_Init+0x116>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4a64      	ldr	r2, [pc, #400]	; (8001584 <HAL_ETH_Init+0x298>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d204      	bcs.n	8001402 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f043 030c 	orr.w	r3, r3, #12
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	e01a      	b.n	8001438 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4a5f      	ldr	r2, [pc, #380]	; (8001584 <HAL_ETH_Init+0x298>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d303      	bcc.n	8001412 <HAL_ETH_Init+0x126>
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4a62      	ldr	r2, [pc, #392]	; (8001598 <HAL_ETH_Init+0x2ac>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d911      	bls.n	8001436 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4a60      	ldr	r2, [pc, #384]	; (8001598 <HAL_ETH_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d908      	bls.n	800142c <HAL_ETH_Init+0x140>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4a5f      	ldr	r2, [pc, #380]	; (800159c <HAL_ETH_Init+0x2b0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d804      	bhi.n	800142c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e005      	b.n	8001438 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	e000      	b.n	8001438 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001436:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fb94 	bl	8001b74 <HAL_ETH_WritePHYRegister>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fd49 	bl	8001ef0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0d6      	b.n	8001618 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800146a:	20ff      	movs	r0, #255	; 0xff
 800146c:	f7ff fe34 	bl	80010d8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a4 	beq.w	80015c2 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800147a:	f7ff fe21 	bl	80010c0 <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	461a      	mov	r2, r3
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fb0b 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800148e:	f7ff fe17 	bl	80010c0 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d90f      	bls.n	80014c0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fd22 	bl	8001ef0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0ab      	b.n	8001618 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0da      	beq.n	8001480 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fb4f 	bl	8001b74 <HAL_ETH_WritePHYRegister>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fd04 	bl	8001ef0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014f0:	2301      	movs	r3, #1
 80014f2:	e091      	b.n	8001618 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014f4:	f7ff fde4 	bl	80010c0 <HAL_GetTick>
 80014f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	461a      	mov	r2, r3
 8001500:	2101      	movs	r1, #1
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 face 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001508:	f7ff fdda 	bl	80010c0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d90f      	bls.n	800153a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fce5 	bl	8001ef0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e06e      	b.n	8001618 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0da      	beq.n	80014fa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	461a      	mov	r2, r3
 800154a:	211f      	movs	r1, #31
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 faa9 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00b      	beq.n	8001570 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fcc6 	bl	8001ef0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800156c:	2301      	movs	r3, #1
 800156e:	e053      	b.n	8001618 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d012      	beq.n	80015a0 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e010      	b.n	80015a6 <HAL_ETH_Init+0x2ba>
 8001584:	03938700 	.word	0x03938700
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	01312cff 	.word	0x01312cff
 8001594:	02160ebf 	.word	0x02160ebf
 8001598:	05f5e0ff 	.word	0x05f5e0ff
 800159c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	e026      	b.n	8001606 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e021      	b.n	8001606 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 faca 	bl	8001b74 <HAL_ETH_WritePHYRegister>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fc7f 	bl	8001ef0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00c      	b.n	8001618 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015fe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001602:	f7ff fd69 	bl	80010d8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fc71 	bl	8001ef0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ETH_DMATxDescListInit+0x20>
 800163c:	2302      	movs	r3, #2
 800163e:	e051      	b.n	80016e4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e030      	b.n	80016be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4413      	add	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800166c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	d208      	bcs.n	80016b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e002      	b.n	80016b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3ca      	bcc.n	800165c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ETH_DMARxDescListInit+0x20>
 800170c:	2302      	movs	r3, #2
 800170e:	e055      	b.n	80017bc <HAL_ETH_DMARxDescListInit+0xcc>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e034      	b.n	8001796 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	4413      	add	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001744:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	461a      	mov	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d105      	bne.n	800176e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	d208      	bcs.n	800178a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	461a      	mov	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	e002      	b.n	8001790 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3c6      	bcc.n	800172c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_ETH_TransmitFrame+0x24>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e0cc      	b.n	8001986 <HAL_ETH_TransmitFrame+0x1be>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001812:	2301      	movs	r3, #1
 8001814:	e0b7      	b.n	8001986 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da09      	bge.n	8001834 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2212      	movs	r2, #18
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0a8      	b.n	8001986 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800183a:	4293      	cmp	r3, r2
 800183c:	d915      	bls.n	800186a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_ETH_TransmitFrame+0x1cc>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0a9b      	lsrs	r3, r3, #10
 8001848:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_ETH_TransmitFrame+0x1cc>)
 800184e:	fba3 1302 	umull	r1, r3, r3, r2
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e001      	b.n	800186e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d11c      	bne.n	80018ae <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001882:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800188e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800189e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ac:	e04b      	b.n	8001946 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e044      	b.n	800193e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018e2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d116      	bne.n	800191c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018fc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_ETH_TransmitFrame+0x1d0>)
 8001902:	fb03 f202 	mul.w	r2, r3, r2
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800190e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800191a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3301      	adds	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3b6      	bcc.n	80018b4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	461a      	mov	r2, r3
 8001962:	2304      	movs	r3, #4
 8001964:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	ac02b00b 	.word	0xac02b00b
 8001998:	fffffa0c 	.word	0xfffffa0c

0800199c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ETH_GetReceivedFrame+0x1a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e070      	b.n	8001a98 <HAL_ETH_GetReceivedFrame+0xfc>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db5a      	blt.n	8001a86 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d030      	beq.n	8001a40 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d103      	bne.n	80019f8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a0c:	3b04      	subs	r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e02b      	b.n	8001a98 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a6e:	e00a      	b.n	8001a86 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	460b      	mov	r3, r1
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b82      	cmp	r3, #130	; 0x82
 8001ac4:	d101      	bne.n	8001aca <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e050      	b.n	8001b6c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2282      	movs	r2, #130	; 0x82
 8001ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 031c 	and.w	r3, r3, #28
 8001ae0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8a1b      	ldrh	r3, [r3, #16]
 8001ae6:	02db      	lsls	r3, r3, #11
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	019b      	lsls	r3, r3, #6
 8001af4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f023 0302 	bic.w	r3, r3, #2
 8001b04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fad3 	bl	80010c0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b1c:	e015      	b.n	8001b4a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b1e:	f7ff facf 	bl	80010c0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d309      	bcc.n	8001b42 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e014      	b.n	8001b6c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e4      	bne.n	8001b1e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b42      	cmp	r3, #66	; 0x42
 8001b94:	d101      	bne.n	8001b9a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e04e      	b.n	8001c38 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2242      	movs	r2, #66	; 0x42
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 031c 	and.w	r3, r3, #28
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8a1b      	ldrh	r3, [r3, #16]
 8001bb6:	02db      	lsls	r3, r3, #11
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	019b      	lsls	r3, r3, #6
 8001bc4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf0:	f7ff fa66 	bl	80010c0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf6:	e015      	b.n	8001c24 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bf8:	f7ff fa62 	bl	80010c0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d309      	bcc.n	8001c1c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e00d      	b.n	8001c38 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e4      	bne.n	8001bf8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ETH_Start+0x16>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e01f      	b.n	8001c96 <HAL_ETH_Start+0x56>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fb40 	bl	80022ec <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fb77 	bl	8002360 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fc06 	bl	8002484 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fbab 	bl	80023d4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fbd4 	bl	800242c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_ETH_Stop+0x16>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e01f      	b.n	8001cf4 <HAL_ETH_Stop+0x56>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fb9b 	bl	8002400 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fbc4 	bl	8002458 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fb62 	bl	800239a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fbd4 	bl	8002484 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fb22 	bl	8002326 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_ETH_ConfigMAC+0x1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0e4      	b.n	8001ee2 <HAL_ETH_ConfigMAC+0x1e6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80b1 	beq.w	8001e92 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_ETH_ConfigMAC+0x1f0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d48:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d4e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d54:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d5a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d60:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d66:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d6c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d72:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d78:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d7e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d84:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d8a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff f998 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001dbe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001dc4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001dca:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001dd0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001dd6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001de2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001de4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff f972 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e04:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e0e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e2c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e32:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e38:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e3e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e44:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff f93b 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f928 	bl	80010d8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	61da      	str	r2, [r3, #28]
 8001e90:	e01e      	b.n	8001ed0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ea0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff f908 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	ff20810f 	.word	0xff20810f

08001ef0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b0      	sub	sp, #192	; 0xc0
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f3c:	e001      	b.n	8001f42 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f46:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc8:	4baa      	ldr	r3, [pc, #680]	; (8002274 <ETH_MACDMAConfig+0x384>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fd4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fd8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fdc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fe2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fe6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fea:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ff0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ff4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ff8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ffc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002000:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002004:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002018:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff f857 	bl	80010d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002032:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002034:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002038:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800203a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800203c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800203e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002042:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002048:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800204a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800204e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002054:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002058:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002060:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002062:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff f832 	bl	80010d8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002086:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002090:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800209c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020a4:	4013      	ands	r3, r2
 80020a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ae:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020b4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020ba:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020c0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020c6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020cc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe fff3 	bl	80010d8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002100:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002116:	2001      	movs	r0, #1
 8002118:	f7fe ffde 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002124:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002138:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800214a:	2304      	movs	r3, #4
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800214e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800215a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800216a:	2300      	movs	r3, #0
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800216e:	2300      	movs	r3, #0
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002180:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <ETH_MACDMAConfig+0x388>)
 8002186:	4013      	ands	r3, r2
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800218c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800218e:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002190:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002192:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002194:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002196:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002198:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800219a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800219c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800219e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021a0:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021a2:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021a4:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021a8:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021ac:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	461a      	mov	r2, r3
 80021c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021c6:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7fe ff7e 	bl	80010d8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	461a      	mov	r2, r3
 80021e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ea:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002202:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002206:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002210:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002214:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ff57 	bl	80010d8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002232:	461a      	mov	r2, r3
 8002234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002238:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10d      	bne.n	800225e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800225c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	461a      	mov	r2, r3
 8002264:	2100      	movs	r1, #0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f808 	bl	800227c <ETH_MACAddressConfig>
}
 800226c:	bf00      	nop
 800226e:	37c0      	adds	r7, #192	; 0xc0
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	ff20810f 	.word	0xff20810f
 8002278:	f8de3f23 	.word	0xf8de3f23

0800227c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3305      	adds	r3, #5
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	3204      	adds	r2, #4
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <ETH_MACAddressConfig+0x68>)
 800229e:	4413      	add	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3303      	adds	r3, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3302      	adds	r3, #2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <ETH_MACAddressConfig+0x6c>)
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6013      	str	r3, [r2, #0]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40028040 	.word	0x40028040
 80022e8:	40028044 	.word	0x40028044

080022ec <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0208 	orr.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002310:	2001      	movs	r0, #1
 8002312:	f000 f8dd 	bl	80024d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0208 	bic.w	r2, r2, #8
 8002340:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 f8c0 	bl	80024d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0204 	orr.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 f8a3 	bl	80024d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 f886 	bl	80024d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f2:	6193      	str	r3, [r2, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800241a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800241e:	6193      	str	r3, [r2, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800244a:	6193      	str	r3, [r2, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f023 0302 	bic.w	r3, r3, #2
 8002472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002476:	6193      	str	r3, [r2, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a6:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f000 f80b 	bl	80024d0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c4:	6193      	str	r3, [r2, #24]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <ETH_Delay+0x38>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <ETH_Delay+0x3c>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80024ec:	bf00      	nop
  } 
  while (Delay --);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	60fa      	str	r2, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <ETH_Delay+0x1c>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	10624dd3 	.word	0x10624dd3

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e16b      	b.n	8002804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 815a 	bne.w	80027fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00b      	beq.n	800256a <HAL_GPIO_Init+0x5a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0xfc>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b12      	cmp	r3, #18
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80b4 	beq.w	80027fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b60      	ldr	r3, [pc, #384]	; (800281c <HAL_GPIO_Init+0x30c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_GPIO_Init+0x30c>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_GPIO_Init+0x30c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a5b      	ldr	r2, [pc, #364]	; (8002820 <HAL_GPIO_Init+0x310>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x314>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x226>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_GPIO_Init+0x318>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x222>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a50      	ldr	r2, [pc, #320]	; (800282c <HAL_GPIO_Init+0x31c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x21e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4f      	ldr	r2, [pc, #316]	; (8002830 <HAL_GPIO_Init+0x320>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x21a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4e      	ldr	r2, [pc, #312]	; (8002834 <HAL_GPIO_Init+0x324>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x216>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_GPIO_Init+0x328>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x212>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4c      	ldr	r2, [pc, #304]	; (800283c <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4b      	ldr	r2, [pc, #300]	; (8002840 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x20a>
 8002716:	2307      	movs	r3, #7
 8002718:	e00e      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271a:	2308      	movs	r3, #8
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271e:	2306      	movs	r3, #6
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <HAL_GPIO_Init+0x310>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_GPIO_Init+0x334>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277a:	4a32      	ldr	r2, [pc, #200]	; (8002844 <HAL_GPIO_Init+0x334>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_GPIO_Init+0x334>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_GPIO_Init+0x334>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_GPIO_Init+0x334>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_GPIO_Init+0x334>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_GPIO_Init+0x334>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_GPIO_Init+0x334>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae90 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40021c00 	.word	0x40021c00
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e25e      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	4b88      	ldr	r3, [pc, #544]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b85      	ldr	r3, [pc, #532]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b7e      	ldr	r3, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e239      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x74>
 80028e2:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6c      	ldr	r2, [pc, #432]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 8002914:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a68      	ldr	r2, [pc, #416]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a65      	ldr	r2, [pc, #404]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fbc4 	bl	80010c0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fbc0 	bl	80010c0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1fe      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b5b      	ldr	r3, [pc, #364]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xc0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fbb0 	bl	80010c0 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fbac 	bl	80010c0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1ea      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b51      	ldr	r3, [pc, #324]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0xe8>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1be      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4937      	ldr	r1, [pc, #220]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x244>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fb65 	bl	80010c0 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fa:	f7fe fb61 	bl	80010c0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e19f      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4925      	ldr	r1, [pc, #148]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_OscConfig+0x244>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fb44 	bl	80010c0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fb40 	bl	80010c0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e17e      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d036      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fb24 	bl	80010c0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fb20 	bl	80010c0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e15e      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
 8002a9a:	e01b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb0d 	bl	80010c0 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e00e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fb09 	bl	80010c0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d907      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e147      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	42470000 	.word	0x42470000
 8002ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ea      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8097 	beq.w	8002c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b81      	ldr	r3, [pc, #516]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b7d      	ldr	r3, [pc, #500]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a7c      	ldr	r2, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b7a      	ldr	r3, [pc, #488]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fac9 	bl	80010c0 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7fe fac5 	bl	80010c0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e103      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2ea>
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a63      	ldr	r2, [pc, #396]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x30c>
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b88:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fa8a 	bl	80010c0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fa86 	bl	80010c0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0c2      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fa74 	bl	80010c0 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fa70 	bl	80010c0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0ac      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	4a38      	ldr	r2, [pc, #224]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8098 	beq.w	8002d4a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d05c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d141      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa44 	bl	80010c0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fa40 	bl	80010c0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e07e      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	491b      	ldr	r1, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fa19 	bl	80010c0 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fa15 	bl	80010c0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e053      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x416>
 8002cb0:	e04b      	b.n	8002d4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fa02 	bl	80010c0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe f9fe 	bl	80010c0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e03c      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x444>
 8002cde:	e034      	b.n	8002d4a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02f      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d11c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d115      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10d      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe f93a 	bl	80010c0 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe f936 	bl	80010c0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f89a 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08014410 	.word	0x08014410
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	; 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003034:	f7fd f934 	bl	80002a0 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd f8da 	bl	80002a0 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	; 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000008 	.word	0x20000008

08003148 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800314e:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003150:	22c0      	movs	r2, #192	; 0xc0
 8003152:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003154:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003156:	22a8      	movs	r2, #168	; 0xa8
 8003158:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800315a:	4b8a      	ldr	r3, [pc, #552]	; (8003384 <MX_LWIP_Init+0x23c>)
 800315c:	2200      	movs	r2, #0
 800315e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003162:	220a      	movs	r2, #10
 8003164:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <MX_LWIP_Init+0x240>)
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800316c:	4b86      	ldr	r3, [pc, #536]	; (8003388 <MX_LWIP_Init+0x240>)
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <MX_LWIP_Init+0x240>)
 8003174:	22ff      	movs	r2, #255	; 0xff
 8003176:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003178:	4b83      	ldr	r3, [pc, #524]	; (8003388 <MX_LWIP_Init+0x240>)
 800317a:	2200      	movs	r2, #0
 800317c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800317e:	4b83      	ldr	r3, [pc, #524]	; (800338c <MX_LWIP_Init+0x244>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <MX_LWIP_Init+0x244>)
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800318a:	4b80      	ldr	r3, [pc, #512]	; (800338c <MX_LWIP_Init+0x244>)
 800318c:	2200      	movs	r2, #0
 800318e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003190:	4b7e      	ldr	r3, [pc, #504]	; (800338c <MX_LWIP_Init+0x244>)
 8003192:	2200      	movs	r2, #0
 8003194:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003196:	f002 f8bf 	bl	8005318 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <MX_LWIP_Init+0x23c>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	061a      	lsls	r2, r3, #24
 80031a0:	4b78      	ldr	r3, [pc, #480]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	4b76      	ldr	r3, [pc, #472]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	4313      	orrs	r3, r2
 80031b0:	4a74      	ldr	r2, [pc, #464]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031b2:	78d2      	ldrb	r2, [r2, #3]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	061a      	lsls	r2, r3, #24
 80031b8:	4b72      	ldr	r3, [pc, #456]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	0619      	lsls	r1, r3, #24
 80031be:	4b71      	ldr	r3, [pc, #452]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	4319      	orrs	r1, r3
 80031c6:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031c8:	789b      	ldrb	r3, [r3, #2]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	430b      	orrs	r3, r1
 80031ce:	496d      	ldr	r1, [pc, #436]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031d0:	78c9      	ldrb	r1, [r1, #3]
 80031d2:	430b      	orrs	r3, r1
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031da:	431a      	orrs	r2, r3
 80031dc:	4b69      	ldr	r3, [pc, #420]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	0619      	lsls	r1, r3, #24
 80031e2:	4b68      	ldr	r3, [pc, #416]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	4319      	orrs	r1, r3
 80031ea:	4b66      	ldr	r3, [pc, #408]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	430b      	orrs	r3, r1
 80031f2:	4964      	ldr	r1, [pc, #400]	; (8003384 <MX_LWIP_Init+0x23c>)
 80031f4:	78c9      	ldrb	r1, [r1, #3]
 80031f6:	430b      	orrs	r3, r1
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031fe:	431a      	orrs	r2, r3
 8003200:	4b60      	ldr	r3, [pc, #384]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	0619      	lsls	r1, r3, #24
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	4319      	orrs	r1, r3
 800320e:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003210:	789b      	ldrb	r3, [r3, #2]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	430b      	orrs	r3, r1
 8003216:	495b      	ldr	r1, [pc, #364]	; (8003384 <MX_LWIP_Init+0x23c>)
 8003218:	78c9      	ldrb	r1, [r1, #3]
 800321a:	430b      	orrs	r3, r1
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	4313      	orrs	r3, r2
 8003220:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <MX_LWIP_Init+0x248>)
 8003222:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003224:	4b58      	ldr	r3, [pc, #352]	; (8003388 <MX_LWIP_Init+0x240>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	061a      	lsls	r2, r3, #24
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <MX_LWIP_Init+0x240>)
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <MX_LWIP_Init+0x240>)
 8003234:	789b      	ldrb	r3, [r3, #2]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	4313      	orrs	r3, r2
 800323a:	4a53      	ldr	r2, [pc, #332]	; (8003388 <MX_LWIP_Init+0x240>)
 800323c:	78d2      	ldrb	r2, [r2, #3]
 800323e:	4313      	orrs	r3, r2
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <MX_LWIP_Init+0x240>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	0619      	lsls	r1, r3, #24
 8003248:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <MX_LWIP_Init+0x240>)
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	4319      	orrs	r1, r3
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <MX_LWIP_Init+0x240>)
 8003252:	789b      	ldrb	r3, [r3, #2]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	430b      	orrs	r3, r1
 8003258:	494b      	ldr	r1, [pc, #300]	; (8003388 <MX_LWIP_Init+0x240>)
 800325a:	78c9      	ldrb	r1, [r1, #3]
 800325c:	430b      	orrs	r3, r1
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003264:	431a      	orrs	r2, r3
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <MX_LWIP_Init+0x240>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0619      	lsls	r1, r3, #24
 800326c:	4b46      	ldr	r3, [pc, #280]	; (8003388 <MX_LWIP_Init+0x240>)
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4319      	orrs	r1, r3
 8003274:	4b44      	ldr	r3, [pc, #272]	; (8003388 <MX_LWIP_Init+0x240>)
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	430b      	orrs	r3, r1
 800327c:	4942      	ldr	r1, [pc, #264]	; (8003388 <MX_LWIP_Init+0x240>)
 800327e:	78c9      	ldrb	r1, [r1, #3]
 8003280:	430b      	orrs	r3, r1
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003288:	431a      	orrs	r2, r3
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <MX_LWIP_Init+0x240>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	0619      	lsls	r1, r3, #24
 8003290:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <MX_LWIP_Init+0x240>)
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	4319      	orrs	r1, r3
 8003298:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <MX_LWIP_Init+0x240>)
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	430b      	orrs	r3, r1
 80032a0:	4939      	ldr	r1, [pc, #228]	; (8003388 <MX_LWIP_Init+0x240>)
 80032a2:	78c9      	ldrb	r1, [r1, #3]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	0e1b      	lsrs	r3, r3, #24
 80032a8:	4313      	orrs	r3, r2
 80032aa:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <MX_LWIP_Init+0x24c>)
 80032ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <MX_LWIP_Init+0x244>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	061a      	lsls	r2, r3, #24
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <MX_LWIP_Init+0x244>)
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	4b33      	ldr	r3, [pc, #204]	; (800338c <MX_LWIP_Init+0x244>)
 80032be:	789b      	ldrb	r3, [r3, #2]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4313      	orrs	r3, r2
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <MX_LWIP_Init+0x244>)
 80032c6:	78d2      	ldrb	r2, [r2, #3]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	061a      	lsls	r2, r3, #24
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <MX_LWIP_Init+0x244>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	0619      	lsls	r1, r3, #24
 80032d2:	4b2e      	ldr	r3, [pc, #184]	; (800338c <MX_LWIP_Init+0x244>)
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	4319      	orrs	r1, r3
 80032da:	4b2c      	ldr	r3, [pc, #176]	; (800338c <MX_LWIP_Init+0x244>)
 80032dc:	789b      	ldrb	r3, [r3, #2]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	430b      	orrs	r3, r1
 80032e2:	492a      	ldr	r1, [pc, #168]	; (800338c <MX_LWIP_Init+0x244>)
 80032e4:	78c9      	ldrb	r1, [r1, #3]
 80032e6:	430b      	orrs	r3, r1
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032ee:	431a      	orrs	r2, r3
 80032f0:	4b26      	ldr	r3, [pc, #152]	; (800338c <MX_LWIP_Init+0x244>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	0619      	lsls	r1, r3, #24
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <MX_LWIP_Init+0x244>)
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	4319      	orrs	r1, r3
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <MX_LWIP_Init+0x244>)
 8003300:	789b      	ldrb	r3, [r3, #2]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	430b      	orrs	r3, r1
 8003306:	4921      	ldr	r1, [pc, #132]	; (800338c <MX_LWIP_Init+0x244>)
 8003308:	78c9      	ldrb	r1, [r1, #3]
 800330a:	430b      	orrs	r3, r1
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003312:	431a      	orrs	r2, r3
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_LWIP_Init+0x244>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	0619      	lsls	r1, r3, #24
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <MX_LWIP_Init+0x244>)
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	4319      	orrs	r1, r3
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_LWIP_Init+0x244>)
 8003324:	789b      	ldrb	r3, [r3, #2]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	430b      	orrs	r3, r1
 800332a:	4918      	ldr	r1, [pc, #96]	; (800338c <MX_LWIP_Init+0x244>)
 800332c:	78c9      	ldrb	r1, [r1, #3]
 800332e:	430b      	orrs	r3, r1
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	4313      	orrs	r3, r2
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <MX_LWIP_Init+0x250>)
 8003336:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <MX_LWIP_Init+0x254>)
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <MX_LWIP_Init+0x258>)
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <MX_LWIP_Init+0x250>)
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <MX_LWIP_Init+0x24c>)
 8003348:	4911      	ldr	r1, [pc, #68]	; (8003390 <MX_LWIP_Init+0x248>)
 800334a:	4816      	ldr	r0, [pc, #88]	; (80033a4 <MX_LWIP_Init+0x25c>)
 800334c:	f002 fc8a 	bl	8005c64 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003350:	4814      	ldr	r0, [pc, #80]	; (80033a4 <MX_LWIP_Init+0x25c>)
 8003352:	f002 fe39 	bl	8005fc8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <MX_LWIP_Init+0x25c>)
 8003358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003368:	480e      	ldr	r0, [pc, #56]	; (80033a4 <MX_LWIP_Init+0x25c>)
 800336a:	f002 fe3d 	bl	8005fe8 <netif_set_up>
 800336e:	e002      	b.n	8003376 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003370:	480c      	ldr	r0, [pc, #48]	; (80033a4 <MX_LWIP_Init+0x25c>)
 8003372:	f002 fea5 	bl	80060c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003376:	490c      	ldr	r1, [pc, #48]	; (80033a8 <MX_LWIP_Init+0x260>)
 8003378:	480a      	ldr	r0, [pc, #40]	; (80033a4 <MX_LWIP_Init+0x25c>)
 800337a:	f002 fed3 	bl	8006124 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200000f0 	.word	0x200000f0
 8003388:	200000f4 	.word	0x200000f4
 800338c:	200000f8 	.word	0x200000f8
 8003390:	200000e4 	.word	0x200000e4
 8003394:	200000e8 	.word	0x200000e8
 8003398:	200000ec 	.word	0x200000ec
 800339c:	0800ff81 	.word	0x0800ff81
 80033a0:	0800394d 	.word	0x0800394d
 80033a4:	200000b0 	.word	0x200000b0
 80033a8:	080039b9 	.word	0x080039b9

080033ac <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <MX_LWIP_Process+0x14>)
 80033b2:	f000 faab 	bl	800390c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80033b6:	f009 fe3d 	bl	800d034 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200000b0 	.word	0x200000b0

080033c4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08e      	sub	sp, #56	; 0x38
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a46      	ldr	r2, [pc, #280]	; (80034fc <HAL_ETH_MspInit+0x138>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 8085 	bne.w	80034f2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a43      	ldr	r2, [pc, #268]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 80033f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f6:	6313      	str	r3, [r2, #48]	; 0x30
 80033f8:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800340e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003412:	6313      	str	r3, [r2, #48]	; 0x30
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4a35      	ldr	r2, [pc, #212]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800342a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800342e:	6313      	str	r3, [r2, #48]	; 0x30
 8003430:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4a2e      	ldr	r2, [pc, #184]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6313      	str	r3, [r2, #48]	; 0x30
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	6313      	str	r3, [r2, #48]	; 0x30
 8003484:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_ETH_MspInit+0x13c>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003490:	2332      	movs	r3, #50	; 0x32
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a0:	230b      	movs	r3, #11
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a8:	4619      	mov	r1, r3
 80034aa:	4816      	ldr	r0, [pc, #88]	; (8003504 <HAL_ETH_MspInit+0x140>)
 80034ac:	f7ff f830 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80034b0:	2386      	movs	r3, #134	; 0x86
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034c0:	230b      	movs	r3, #11
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	480f      	ldr	r0, [pc, #60]	; (8003508 <HAL_ETH_MspInit+0x144>)
 80034cc:	f7ff f820 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80034d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034de:	2303      	movs	r3, #3
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034e2:	230b      	movs	r3, #11
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ea:	4619      	mov	r1, r3
 80034ec:	4807      	ldr	r0, [pc, #28]	; (800350c <HAL_ETH_MspInit+0x148>)
 80034ee:	f7ff f80f 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3738      	adds	r7, #56	; 0x38
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40028000 	.word	0x40028000
 8003500:	40023800 	.word	0x40023800
 8003504:	40020800 	.word	0x40020800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400

08003510 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800351c:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <low_level_init+0x144>)
 800351e:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <low_level_init+0x148>)
 8003520:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <low_level_init+0x144>)
 8003524:	2201      	movs	r2, #1
 8003526:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003528:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <low_level_init+0x144>)
 800352a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800352e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <low_level_init+0x144>)
 8003532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003536:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003538:	4b46      	ldr	r3, [pc, #280]	; (8003654 <low_level_init+0x144>)
 800353a:	2201      	movs	r2, #1
 800353c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800353e:	2300      	movs	r3, #0
 8003540:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003546:	23e1      	movs	r3, #225	; 0xe1
 8003548:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800354a:	2300      	movs	r3, #0
 800354c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003552:	2300      	movs	r3, #0
 8003554:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003556:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <low_level_init+0x144>)
 8003558:	f107 0308 	add.w	r3, r7, #8
 800355c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <low_level_init+0x144>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <low_level_init+0x144>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <low_level_init+0x144>)
 800356c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003570:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003572:	4838      	ldr	r0, [pc, #224]	; (8003654 <low_level_init+0x144>)
 8003574:	f7fd feba 	bl	80012ec <HAL_ETH_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	b2da      	uxtb	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003594:	2304      	movs	r3, #4
 8003596:	4a31      	ldr	r2, [pc, #196]	; (800365c <low_level_init+0x14c>)
 8003598:	4931      	ldr	r1, [pc, #196]	; (8003660 <low_level_init+0x150>)
 800359a:	482e      	ldr	r0, [pc, #184]	; (8003654 <low_level_init+0x144>)
 800359c:	f7fe f840 	bl	8001620 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80035a0:	2304      	movs	r3, #4
 80035a2:	4a30      	ldr	r2, [pc, #192]	; (8003664 <low_level_init+0x154>)
 80035a4:	4930      	ldr	r1, [pc, #192]	; (8003668 <low_level_init+0x158>)
 80035a6:	482b      	ldr	r0, [pc, #172]	; (8003654 <low_level_init+0x144>)
 80035a8:	f7fe f8a2 	bl	80016f0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2206      	movs	r2, #6
 80035b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <low_level_init+0x144>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80035c0:	4b24      	ldr	r3, [pc, #144]	; (8003654 <low_level_init+0x144>)
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	785a      	ldrb	r2, [r3, #1]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <low_level_init+0x144>)
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	789a      	ldrb	r2, [r3, #2]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <low_level_init+0x144>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	78da      	ldrb	r2, [r3, #3]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <low_level_init+0x144>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	791a      	ldrb	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <low_level_init+0x144>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	795a      	ldrb	r2, [r3, #5]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003602:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800360a:	f043 030a 	orr.w	r3, r3, #10
 800360e:	b2da      	uxtb	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003616:	480f      	ldr	r0, [pc, #60]	; (8003654 <low_level_init+0x144>)
 8003618:	f7fe fb12 	bl	8001c40 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	461a      	mov	r2, r3
 8003622:	211d      	movs	r1, #29
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <low_level_init+0x144>)
 8003626:	f7fe fa3d 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f043 030b 	orr.w	r3, r3, #11
 8003630:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	461a      	mov	r2, r3
 8003636:	211d      	movs	r1, #29
 8003638:	4806      	ldr	r0, [pc, #24]	; (8003654 <low_level_init+0x144>)
 800363a:	f7fe fa9b 	bl	8001b74 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	461a      	mov	r2, r3
 8003644:	211d      	movs	r1, #29
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <low_level_init+0x144>)
 8003648:	f7fe fa2c 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	2000319c 	.word	0x2000319c
 8003658:	40028000 	.word	0x40028000
 800365c:	200019cc 	.word	0x200019cc
 8003660:	2000017c 	.word	0x2000017c
 8003664:	200001fc 	.word	0x200001fc
 8003668:	200000fc 	.word	0x200000fc

0800366c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003676:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <low_level_output+0x138>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800368e:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <low_level_output+0x138>)
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	e05a      	b.n	8003754 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da03      	bge.n	80036ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80036a6:	23f8      	movs	r3, #248	; 0xf8
 80036a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80036ac:	e05c      	b.n	8003768 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	895b      	ldrh	r3, [r3, #10]
 80036b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80036b8:	e02f      	b.n	800371a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	18d0      	adds	r0, r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	18d1      	adds	r1, r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80036ce:	3304      	adds	r3, #4
 80036d0:	461a      	mov	r2, r3
 80036d2:	f00c fd5f 	bl	8010194 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	da03      	bge.n	80036ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80036e4:	23f8      	movs	r3, #248	; 0xf8
 80036e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80036ea:	e03d      	b.n	8003768 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80036fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003708:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003714:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003724:	4293      	cmp	r3, r2
 8003726:	d8c8      	bhi.n	80036ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	18d0      	adds	r0, r2, r3
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4619      	mov	r1, r3
 800373a:	f00c fd2b 	bl	8010194 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1a1      	bne.n	800369e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800375a:	6979      	ldr	r1, [r7, #20]
 800375c:	4811      	ldr	r0, [pc, #68]	; (80037a4 <low_level_output+0x138>)
 800375e:	f7fe f833 	bl	80017c8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <low_level_output+0x138>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <low_level_output+0x138>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003782:	461a      	mov	r2, r3
 8003784:	2320      	movs	r3, #32
 8003786:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <low_level_output+0x138>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800379a:	4618      	mov	r0, r3
 800379c:	3728      	adds	r7, #40	; 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000319c 	.word	0x2000319c

080037a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80037cc:	484e      	ldr	r0, [pc, #312]	; (8003908 <low_level_input+0x160>)
 80037ce:	f7fe f8e5 	bl	800199c <HAL_ETH_GetReceivedFrame>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <low_level_input+0x34>

    return NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	e091      	b.n	8003900 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <low_level_input+0x160>)
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <low_level_input+0x160>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80037f4:	4619      	mov	r1, r3
 80037f6:	2000      	movs	r0, #0
 80037f8:	f002 fd30 	bl	800625c <pbuf_alloc>
 80037fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d04b      	beq.n	800389c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <low_level_input+0x160>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	e040      	b.n	8003896 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	895b      	ldrh	r3, [r3, #10]
 8003818:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800381e:	e021      	b.n	8003864 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	18d0      	adds	r0, r2, r3
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	18d1      	adds	r1, r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003834:	3304      	adds	r3, #4
 8003836:	461a      	mov	r2, r3
 8003838:	f00c fcac 	bl	8010194 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
 800384e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003852:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800385e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800386e:	4293      	cmp	r3, r2
 8003870:	d8d6      	bhi.n	8003820 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	18d0      	adds	r0, r2, r3
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4619      	mov	r1, r3
 8003884:	f00c fc86 	bl	8010194 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1bb      	bne.n	8003814 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <low_level_input+0x160>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e00b      	b.n	80038c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <low_level_input+0x160>)
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3ee      	bcc.n	80038a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <low_level_input+0x160>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <low_level_input+0x160>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <low_level_input+0x160>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	461a      	mov	r2, r3
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <low_level_input+0x160>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	461a      	mov	r2, r3
 80038fa:	2300      	movs	r3, #0
 80038fc:	6093      	str	r3, [r2, #8]
  }
  return p;
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	; 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000319c 	.word	0x2000319c

0800390c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff47 	bl	80037a8 <low_level_input>
 800391a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	4798      	blx	r3
 800392c:	4603      	mov	r3, r0
 800392e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003930:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f002 ff73 	bl	8006824 <pbuf_free>
    p = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e000      	b.n	8003946 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003944:	bf00      	nop
  }
}
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <ethernetif_init+0x1c>
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <ethernetif_init+0x48>)
 800395c:	f240 2207 	movw	r2, #519	; 0x207
 8003960:	490d      	ldr	r1, [pc, #52]	; (8003998 <ethernetif_init+0x4c>)
 8003962:	480e      	ldr	r0, [pc, #56]	; (800399c <ethernetif_init+0x50>)
 8003964:	f00c fc46 	bl	80101f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2273      	movs	r2, #115	; 0x73
 800396c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2274      	movs	r2, #116	; 0x74
 8003974:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <ethernetif_init+0x54>)
 800397c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <ethernetif_init+0x58>)
 8003982:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fdc3 	bl	8003510 <low_level_init>

  return ERR_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	08011710 	.word	0x08011710
 8003998:	0801172c 	.word	0x0801172c
 800399c:	0801173c 	.word	0x0801173c
 80039a0:	0800e439 	.word	0x0800e439
 80039a4:	0800366d 	.word	0x0800366d

080039a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80039ac:	f7fd fb88 	bl	80010c0 <HAL_GetTick>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d05d      	beq.n	8003a96 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <ethernetif_update_config+0xf4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03f      	beq.n	8003a62 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80039e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039e6:	2100      	movs	r1, #0
 80039e8:	4830      	ldr	r0, [pc, #192]	; (8003aac <ethernetif_update_config+0xf4>)
 80039ea:	f7fe f8c3 	bl	8001b74 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fd fb67 	bl	80010c0 <HAL_GetTick>
 80039f2:	4603      	mov	r3, r0
 80039f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	461a      	mov	r2, r3
 80039fc:	2101      	movs	r1, #1
 80039fe:	482b      	ldr	r0, [pc, #172]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a00:	f7fe f850 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003a04:	f7fd fb5c 	bl	80010c0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a12:	d828      	bhi.n	8003a66 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0eb      	beq.n	80039f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	461a      	mov	r2, r3
 8003a24:	211f      	movs	r1, #31
 8003a26:	4821      	ldr	r0, [pc, #132]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a28:	f7fe f83c 	bl	8001aa4 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	e002      	b.n	8003a46 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	e016      	b.n	8003a86 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	e011      	b.n	8003a86 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <ethernetif_update_config+0xb0>
          goto error;
 8003a66:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	08db      	lsrs	r3, r3, #3
 8003a6e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2100      	movs	r1, #0
 8003a80:	480a      	ldr	r0, [pc, #40]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a82:	f7fe f877 	bl	8001b74 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003a86:	2100      	movs	r1, #0
 8003a88:	4808      	ldr	r0, [pc, #32]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a8a:	f7fe f937 	bl	8001cfc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003a8e:	4807      	ldr	r0, [pc, #28]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a90:	f7fe f8d6 	bl	8001c40 <HAL_ETH_Start>
 8003a94:	e002      	b.n	8003a9c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003a96:	4805      	ldr	r0, [pc, #20]	; (8003aac <ethernetif_update_config+0xf4>)
 8003a98:	f7fe f901 	bl	8001c9e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f807 	bl	8003ab0 <ethernetif_notify_conn_changed>
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000319c 	.word	0x2000319c

08003ab0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <fs_open+0x16>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <fs_open+0x1c>
    return ERR_ARG;
 8003ada:	f06f 030f 	mvn.w	r3, #15
 8003ade:	e028      	b.n	8003b32 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <fs_open+0x78>)
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e020      	b.n	8003b28 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4619      	mov	r1, r3
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	f7fc fb6f 	bl	80001d0 <strcmp>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d114      	bne.n	8003b22 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	7c1a      	ldrb	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e007      	b.n	8003b32 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1db      	bne.n	8003ae6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003b2e:	f06f 0305 	mvn.w	r3, #5
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08014844 	.word	0x08014844

08003b40 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8003b78:	20e0      	movs	r0, #224	; 0xe0
 8003b7a:	f001 fe87 	bl	800588c <mem_malloc>
 8003b7e:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8003b86:	22e0      	movs	r2, #224	; 0xe0
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f00c fb2a 	bl	80101e4 <memset>
  }
  return ret;
 8003b90:	687b      	ldr	r3, [r7, #4]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f001 fd09 	bl	80055c0 <mem_free>
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003bbe:	22b0      	movs	r2, #176	; 0xb0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f00c fb0e 	bl	80101e4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003bd6:	20b0      	movs	r0, #176	; 0xb0
 8003bd8:	f001 fe58 	bl	800588c <mem_malloc>
 8003bdc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <http_state_alloc+0x1a>
    http_state_init(ret);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffe6 	bl	8003bb6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003bea:	687b      	ldr	r3, [r7, #4]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff99 	bl	8003b40 <fs_close>
    hs->handle = NULL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ffba 	bl	8003b9a <http_ssi_state_free>
    hs->ssi = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f002 fdf3 	bl	8006824 <pbuf_free>
    hs->req = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <http_state_free+0x1a>
    http_state_eof(hs);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffca 	bl	8003bf4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fcad 	bl	80055c0 <mem_free>
  }
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <http_write+0x22>
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <http_write+0xc8>)
 8003c86:	f240 2219 	movw	r2, #537	; 0x219
 8003c8a:	492c      	ldr	r1, [pc, #176]	; (8003d3c <http_write+0xcc>)
 8003c8c:	482c      	ldr	r0, [pc, #176]	; (8003d40 <http_write+0xd0>)
 8003c8e:	f00c fab1 	bl	80101f4 <iprintf>
  len = *length;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <http_write+0x32>
    return ERR_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e045      	b.n	8003d2e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ca8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003caa:	8aba      	ldrh	r2, [r7, #20]
 8003cac:	8afb      	ldrh	r3, [r7, #22]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d201      	bcs.n	8003cb6 <http_write+0x46>
    len = max_len;
 8003cb2:	8abb      	ldrh	r3, [r7, #20]
 8003cb4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003cbe:	8afa      	ldrh	r2, [r7, #22]
 8003cc0:	8abb      	ldrh	r3, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d901      	bls.n	8003cca <http_write+0x5a>
    len = max_len;
 8003cc6:	8abb      	ldrh	r3, [r7, #20]
 8003cc8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	8afa      	ldrh	r2, [r7, #22]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f007 fb47 	bl	800b364 <tcp_write>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003cda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d10f      	bne.n	8003d04 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d902      	bls.n	8003cfe <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	82fb      	strh	r3, [r7, #22]
 8003cfc:	e002      	b.n	8003d04 <http_write+0x94>
      } else {
        len /= 2;
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003d04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d102      	bne.n	8003d14 <http_write+0xa4>
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d8da      	bhi.n	8003cca <http_write+0x5a>

  if (err == ERR_OK) {
 8003d14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8afa      	ldrh	r2, [r7, #22]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	080117e0 	.word	0x080117e0
 8003d3c:	08011818 	.word	0x08011818
 8003d40:	08011828 	.word	0x08011828

08003d44 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003d52:	2100      	movs	r1, #0
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f004 fbc3 	bl	80084e0 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f004 fbd1 	bl	8008504 <tcp_recv>
  altcp_err(pcb, NULL);
 8003d62:	2100      	movs	r1, #0
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f004 fc11 	bl	800858c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f004 fc46 	bl	8008600 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003d74:	2100      	movs	r1, #0
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f004 fbe6 	bl	8008548 <tcp_sent>
  if (hs != NULL) {
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f7ff ff62 	bl	8003c4c <http_state_free>
  }

  if (abort_conn) {
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f003 fae0 	bl	8007354 <tcp_abort>
    return ERR_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e00f      	b.n	8003db8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f003 f9f1 	bl	8007180 <tcp_close>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003daa:	2204      	movs	r2, #4
 8003dac:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <http_close_or_abort_conn+0x7c>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f004 fc26 	bl	8008600 <tcp_poll>
  }
  return err;
 8003db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08004e37 	.word	0x08004e37

08003dc4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffb6 	bl	8003d44 <http_close_or_abort_conn>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffe8 	bl	8003dc4 <http_close_conn>
  }
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <extract_uri_parameters+0x18>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <extract_uri_parameters+0x1c>
    return (0);
 8003e14:	2300      	movs	r3, #0
 8003e16:	e04b      	b.n	8003eb0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e03f      	b.n	8003ea2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	320c      	adds	r2, #12
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003e32:	2126      	movs	r1, #38	; 0x26
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f00c fa53 	bl	80102e0 <strchr>
 8003e3a:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <extract_uri_parameters+0x54>
      *pair = '\0';
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
      pair++;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e00c      	b.n	8003e6a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003e50:	2120      	movs	r1, #32
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f00c fa44 	bl	80102e0 <strchr>
 8003e58:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003e6a:	213d      	movs	r1, #61	; 0x3d
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f00c fa37 	bl	80102e0 <strchr>
 8003e72:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <extract_uri_parameters+0x94>
      *equals = '\0';
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	321c      	adds	r2, #28
 8003e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e8e:	e005      	b.n	8003e9c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	321c      	adds	r2, #28
 8003e96:	2100      	movs	r1, #0
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	dc02      	bgt.n	8003eae <extract_uri_parameters+0xb2>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1b9      	bne.n	8003e22 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003eae:	693b      	ldr	r3, [r7, #16]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <get_tag_insert+0x1c>
 8003ec6:	4b51      	ldr	r3, [pc, #324]	; (800400c <get_tag_insert+0x154>)
 8003ec8:	f44f 7241 	mov.w	r2, #772	; 0x304
 8003ecc:	4950      	ldr	r1, [pc, #320]	; (8004010 <get_tag_insert+0x158>)
 8003ece:	4851      	ldr	r0, [pc, #324]	; (8004014 <get_tag_insert+0x15c>)
 8003ed0:	f00c f990 	bl	80101f4 <iprintf>
  ssi = hs->ssi;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <get_tag_insert+0x36>
 8003ee0:	4b4a      	ldr	r3, [pc, #296]	; (800400c <get_tag_insert+0x154>)
 8003ee2:	f240 3206 	movw	r2, #774	; 0x306
 8003ee6:	494c      	ldr	r1, [pc, #304]	; (8004018 <get_tag_insert+0x160>)
 8003ee8:	484a      	ldr	r0, [pc, #296]	; (8004014 <get_tag_insert+0x15c>)
 8003eea:	f00c f983 	bl	80101f4 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <get_tag_insert+0x164>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02e      	beq.n	8003f54 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	; (8004020 <get_tag_insert+0x168>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d02a      	beq.n	8003f54 <get_tag_insert+0x9c>
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <get_tag_insert+0x16c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d026      	beq.n	8003f54 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e01e      	b.n	8003f4a <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f103 0012 	add.w	r0, r3, #18
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <get_tag_insert+0x168>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f7fc f956 	bl	80001d0 <strcmp>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003f2a:	4b3c      	ldr	r3, [pc, #240]	; (800401c <get_tag_insert+0x164>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	f102 011b 	add.w	r1, r2, #27
 8003f34:	22c0      	movs	r2, #192	; 0xc0
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	4798      	blx	r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003f42:	e060      	b.n	8004006 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3301      	adds	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <get_tag_insert+0x16c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	dbdb      	blt.n	8003f0c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	3312      	adds	r3, #18
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc f943 	bl	80001e4 <strlen>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2ba6      	cmp	r3, #166	; 0xa6
 8003f62:	d818      	bhi.n	8003f96 <get_tag_insert+0xde>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3312      	adds	r3, #18
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc f93b 	bl	80001e4 <strlen>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b09      	cmp	r3, #9
 8003f72:	d810      	bhi.n	8003f96 <get_tag_insert+0xde>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3312      	adds	r3, #18
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc f933 	bl	80001e4 <strlen>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2ba6      	cmp	r3, #166	; 0xa6
 8003f82:	d806      	bhi.n	8003f92 <get_tag_insert+0xda>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3312      	adds	r3, #18
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc f92b 	bl	80001e4 <strlen>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	e002      	b.n	8003f98 <get_tag_insert+0xe0>
 8003f92:	23a7      	movs	r3, #167	; 0xa7
 8003f94:	e000      	b.n	8003f98 <get_tag_insert+0xe0>
 8003f96:	2309      	movs	r3, #9
 8003f98:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	331b      	adds	r3, #27
 8003f9e:	2212      	movs	r2, #18
 8003fa0:	4921      	ldr	r1, [pc, #132]	; (8004028 <get_tag_insert+0x170>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f00c f8f6 	bl	8010194 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3312      	adds	r3, #18
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f00c f8ed 	bl	8010194 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3312      	adds	r3, #18
 8003fbe:	3318      	adds	r3, #24
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	4918      	ldr	r1, [pc, #96]	; (800402c <get_tag_insert+0x174>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00c f8e2 	bl	8010194 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3319      	adds	r3, #25
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2200      	movs	r2, #0
 8003fda:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	331b      	adds	r3, #27
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc f8ff 	bl	80001e4 <strlen>
 8003fe6:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d306      	bcc.n	8003ffe <get_tag_insert+0x146>
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <get_tag_insert+0x154>)
 8003ff2:	f240 323f 	movw	r2, #831	; 0x33f
 8003ff6:	490e      	ldr	r1, [pc, #56]	; (8004030 <get_tag_insert+0x178>)
 8003ff8:	4806      	ldr	r0, [pc, #24]	; (8004014 <get_tag_insert+0x15c>)
 8003ffa:	f00c f8fb 	bl	80101f4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	b29a      	uxth	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	81da      	strh	r2, [r3, #14]
}
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	080117e0 	.word	0x080117e0
 8004010:	08011850 	.word	0x08011850
 8004014:	08011828 	.word	0x08011828
 8004018:	0801185c 	.word	0x0801185c
 800401c:	20003624 	.word	0x20003624
 8004020:	2000362c 	.word	0x2000362c
 8004024:	20003628 	.word	0x20003628
 8004028:	08011868 	.word	0x08011868
 800402c:	0801187c 	.word	0x0801187c
 8004030:	08011884 	.word	0x08011884

08004034 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff feca 	bl	8003de2 <http_eof>
    return 0;
 800404e:	2300      	movs	r3, #0
 8004050:	e016      	b.n	8004080 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fd7c 	bl	8003b54 <fs_bytes_left>
 800405c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	dc05      	bgt.n	8004070 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff febb 	bl	8003de2 <http_eof>
    return 0;
 800406c:	2300      	movs	r3, #0
 800406e:	e007      	b.n	8004080 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <http_check_eof+0x54>)
 8004072:	f240 429d 	movw	r2, #1181	; 0x49d
 8004076:	4905      	ldr	r1, [pc, #20]	; (800408c <http_check_eof+0x58>)
 8004078:	4805      	ldr	r0, [pc, #20]	; (8004090 <http_check_eof+0x5c>)
 800407a:	f00c f8bb 	bl	80101f4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800407e:	2301      	movs	r3, #1
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	080117e0 	.word	0x080117e0
 800408c:	08011894 	.word	0x08011894
 8004090:	08011828 	.word	0x08011828

08004094 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d803      	bhi.n	80040b6 <http_send_data_nonssi+0x22>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	e001      	b.n	80040ba <http_send_data_nonssi+0x26>
 80040b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ba:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f107 020c 	add.w	r2, r7, #12
 80040c4:	2300      	movs	r3, #0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fdd2 	bl	8003c70 <http_write>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80040d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	89ba      	ldrh	r2, [r7, #12]
 80040e2:	441a      	add	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	89ba      	ldrh	r2, [r7, #12]
 80040ee:	1a9a      	subs	r2, r3, r2
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <http_send_data_ssi+0x2c>
 800411e:	4b87      	ldr	r3, [pc, #540]	; (800433c <http_send_data_ssi+0x23c>)
 8004120:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004124:	4986      	ldr	r1, [pc, #536]	; (8004340 <http_send_data_ssi+0x240>)
 8004126:	4887      	ldr	r0, [pc, #540]	; (8004344 <http_send_data_ssi+0x244>)
 8004128:	f00c f864 	bl	80101f4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004132:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	429a      	cmp	r2, r3
 800413e:	f240 826f 	bls.w	8004620 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004150:	4293      	cmp	r3, r2
 8004152:	dc06      	bgt.n	8004162 <http_send_data_ssi+0x62>
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	e001      	b.n	8004166 <http_send_data_ssi+0x66>
 8004162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004166:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6999      	ldr	r1, [r3, #24]
 800416c:	f107 020e 	add.w	r2, r7, #14
 8004170:	2300      	movs	r3, #0
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fd7c 	bl	8003c70 <http_write>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800417c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8004184:	2301      	movs	r3, #1
 8004186:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	89fa      	ldrh	r2, [r7, #14]
 800418e:	441a      	add	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	89fa      	ldrh	r2, [r7, #14]
 800419a:	1a9a      	subs	r2, r3, r2
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 823a 	bne.w	8004620 <http_send_data_ssi+0x520>
      return data_to_send;
 80041ac:	7dbb      	ldrb	r3, [r7, #22]
 80041ae:	e280      	b.n	80046b2 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <http_send_data_ssi+0xba>
      return data_to_send;
 80041b6:	7dbb      	ldrb	r3, [r7, #22]
 80041b8:	e27b      	b.n	80046b2 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	f200 822c 	bhi.w	800461e <http_send_data_ssi+0x51e>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <http_send_data_ssi+0xcc>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	08004233 	.word	0x08004233
 80041d4:	080042a5 	.word	0x080042a5
 80041d8:	080043ed 	.word	0x080043ed
 80041dc:	08004535 	.word	0x08004535
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80041e0:	2300      	movs	r3, #0
 80041e2:	757b      	strb	r3, [r7, #21]
 80041e4:	e017      	b.n	8004216 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	7d7b      	ldrb	r3, [r7, #21]
 80041ee:	4956      	ldr	r1, [pc, #344]	; (8004348 <http_send_data_ssi+0x248>)
 80041f0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d10a      	bne.n	8004210 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	7d7a      	ldrb	r2, [r7, #21]
 80041fe:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2201      	movs	r2, #1
 800420c:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800420e:	e005      	b.n	800421c <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004210:	7d7b      	ldrb	r3, [r7, #21]
 8004212:	3301      	adds	r3, #1
 8004214:	757b      	strb	r3, [r7, #21]
 8004216:	7d7b      	ldrb	r3, [r7, #21]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d9e4      	bls.n	80041e6 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	601a      	str	r2, [r3, #0]
        break;
 8004230:	e1f6      	b.n	8004620 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	7c1b      	ldrb	r3, [r3, #16]
 8004236:	461a      	mov	r2, r3
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <http_send_data_ssi+0x248>)
 800423a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	8992      	ldrh	r2, [r2, #12]
 8004242:	4413      	add	r3, r2
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2200      	movs	r2, #0
 800424e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004258:	e1e2      	b.n	8004620 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	7c1b      	ldrb	r3, [r3, #16]
 8004264:	4619      	mov	r1, r3
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <http_send_data_ssi+0x248>)
 8004268:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	8989      	ldrh	r1, [r1, #12]
 8004270:	440b      	add	r3, r1
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d106      	bne.n	8004286 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	899b      	ldrh	r3, [r3, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	819a      	strh	r2, [r3, #12]
 8004284:	e003      	b.n	800428e <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	601a      	str	r2, [r3, #0]
        }
        break;
 80042a2:	e1bd      	b.n	8004620 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	899b      	ldrh	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11e      	bne.n	80042ea <http_send_data_ssi+0x1ea>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d00e      	beq.n	80042d4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80042bc:	2b09      	cmp	r3, #9
 80042be:	d009      	beq.n	80042d4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b0a      	cmp	r3, #10
 80042c8:	d004      	beq.n	80042d4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042d0:	2b0d      	cmp	r3, #13
 80042d2:	d10a      	bne.n	80042ea <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	1e5a      	subs	r2, r3, #1
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	601a      	str	r2, [r3, #0]
          break;
 80042e8:	e19a      	b.n	8004620 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	781a      	ldrb	r2, [r3, #0]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	7c1b      	ldrb	r3, [r3, #16]
 80042f4:	4914      	ldr	r1, [pc, #80]	; (8004348 <http_send_data_ssi+0x248>)
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d013      	beq.n	800432a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8004308:	2b20      	cmp	r3, #32
 800430a:	d00e      	beq.n	800432a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b09      	cmp	r3, #9
 8004314:	d009      	beq.n	800432a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800431c:	2b0a      	cmp	r3, #10
 800431e:	d004      	beq.n	800432a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b0d      	cmp	r3, #13
 8004328:	d13f      	bne.n	80043aa <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	899b      	ldrh	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800433a:	e04c      	b.n	80043d6 <http_send_data_ssi+0x2d6>
 800433c:	080117e0 	.word	0x080117e0
 8004340:	0801185c 	.word	0x0801185c
 8004344:	08011828 	.word	0x08011828
 8004348:	08014894 	.word	0x08014894
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2203      	movs	r2, #3
 8004350:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	899b      	ldrh	r3, [r3, #12]
 8004358:	2bff      	cmp	r3, #255	; 0xff
 800435a:	d906      	bls.n	800436a <http_send_data_ssi+0x26a>
 800435c:	4b93      	ldr	r3, [pc, #588]	; (80045ac <http_send_data_ssi+0x4ac>)
 800435e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004362:	4993      	ldr	r1, [pc, #588]	; (80045b0 <http_send_data_ssi+0x4b0>)
 8004364:	4893      	ldr	r0, [pc, #588]	; (80045b4 <http_send_data_ssi+0x4b4>)
 8004366:	f00b ff45 	bl	80101f4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	899b      	ldrh	r3, [r3, #12]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	899b      	ldrh	r3, [r3, #12]
 8004378:	461a      	mov	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	2200      	movs	r2, #0
 8004380:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	7c1b      	ldrb	r3, [r3, #16]
 800438c:	498a      	ldr	r1, [pc, #552]	; (80045b8 <http_send_data_ssi+0x4b8>)
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d103      	bne.n	80043a2 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2201      	movs	r2, #1
 800439e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80043a0:	e019      	b.n	80043d6 <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2200      	movs	r2, #0
 80043a6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80043a8:	e015      	b.n	80043d6 <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	899b      	ldrh	r3, [r3, #12]
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d80d      	bhi.n	80043ce <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	899b      	ldrh	r3, [r3, #12]
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	b288      	uxth	r0, r1
 80043be:	6939      	ldr	r1, [r7, #16]
 80043c0:	8188      	strh	r0, [r1, #12]
 80043c2:	4619      	mov	r1, r3
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	440b      	add	r3, r1
 80043ca:	749a      	strb	r2, [r3, #18]
 80043cc:	e003      	b.n	80043d6 <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	601a      	str	r2, [r3, #0]

        break;
 80043ea:	e119      	b.n	8004620 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	899b      	ldrh	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11e      	bne.n	8004432 <http_send_data_ssi+0x332>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d00e      	beq.n	800441c <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004404:	2b09      	cmp	r3, #9
 8004406:	d009      	beq.n	800441c <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b0a      	cmp	r3, #10
 8004410:	d004      	beq.n	800441c <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004418:	2b0d      	cmp	r3, #13
 800441a:	d10a      	bne.n	8004432 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	1e5a      	subs	r2, r3, #1
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	601a      	str	r2, [r3, #0]
          break;
 8004430:	e0f6      	b.n	8004620 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	7c1b      	ldrb	r3, [r3, #16]
 800443c:	495e      	ldr	r1, [pc, #376]	; (80045b8 <http_send_data_ssi+0x4b8>)
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	440b      	add	r3, r1
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	6939      	ldr	r1, [r7, #16]
 8004446:	8989      	ldrh	r1, [r1, #12]
 8004448:	440b      	add	r3, r1
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d162      	bne.n	8004516 <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	899b      	ldrh	r3, [r3, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	7c1b      	ldrb	r3, [r3, #16]
 8004474:	4a50      	ldr	r2, [pc, #320]	; (80045b8 <http_send_data_ssi+0x4b8>)
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	8992      	ldrh	r2, [r2, #12]
 8004480:	4413      	add	r3, r2
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 80cb 	bne.w	8004620 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f7ff fd14 	bl	8003eb8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2200      	movs	r2, #0
 8004494:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2204      	movs	r2, #4
 800449a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	f240 80b6 	bls.w	8004620 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044c2:	4293      	cmp	r3, r2
 80044c4:	dc06      	bgt.n	80044d4 <http_send_data_ssi+0x3d4>
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	e001      	b.n	80044d8 <http_send_data_ssi+0x3d8>
 80044d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d8:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	f107 020e 	add.w	r2, r7, #14
 80044e2:	2300      	movs	r3, #0
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fbc3 	bl	8003c70 <http_write>
 80044ea:	4603      	mov	r3, r0
 80044ec:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 80044ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8094 	bne.w	8004620 <http_send_data_ssi+0x520>
                data_to_send = 1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	89fa      	ldrh	r2, [r7, #14]
 8004502:	441a      	add	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	89fa      	ldrh	r2, [r7, #14]
 800450e:	1a9a      	subs	r2, r3, r2
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
 8004514:	e084      	b.n	8004620 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8004532:	e075      	b.n	8004620 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d93d      	bls.n	80045bc <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800454e:	4293      	cmp	r3, r2
 8004550:	dc06      	bgt.n	8004560 <http_send_data_ssi+0x460>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	e001      	b.n	8004564 <http_send_data_ssi+0x464>
 8004560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004564:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6999      	ldr	r1, [r3, #24]
 8004570:	f107 020e 	add.w	r2, r7, #14
 8004574:	2300      	movs	r3, #0
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fb7a 	bl	8003c70 <http_write>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]
 8004580:	e001      	b.n	8004586 <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8004586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d148      	bne.n	8004620 <http_send_data_ssi+0x520>
            data_to_send = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	89fa      	ldrh	r2, [r7, #14]
 8004598:	441a      	add	r2, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	89fa      	ldrh	r2, [r7, #14]
 80045a4:	1a9a      	subs	r2, r3, r2
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
 80045aa:	e039      	b.n	8004620 <http_send_data_ssi+0x520>
 80045ac:	080117e0 	.word	0x080117e0
 80045b0:	080118cc 	.word	0x080118cc
 80045b4:	08011828 	.word	0x08011828
 80045b8:	08014894 	.word	0x08014894
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	899a      	ldrh	r2, [r3, #12]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	89db      	ldrh	r3, [r3, #14]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d222      	bcs.n	800460e <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	89da      	ldrh	r2, [r3, #14]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	899b      	ldrh	r3, [r3, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	899b      	ldrh	r3, [r3, #12]
 80045da:	3318      	adds	r3, #24
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	1cd9      	adds	r1, r3, #3
 80045e2:	f107 020e 	add.w	r2, r7, #14
 80045e6:	2301      	movs	r3, #1
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fb41 	bl	8003c70 <http_write>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80045f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d112      	bne.n	8004620 <http_send_data_ssi+0x520>
              data_to_send = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	899a      	ldrh	r2, [r3, #12]
 8004602:	89fb      	ldrh	r3, [r7, #14]
 8004604:	4413      	add	r3, r2
 8004606:	b29a      	uxth	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	819a      	strh	r2, [r3, #12]
 800460c:	e008      	b.n	8004620 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2200      	movs	r2, #0
 8004612:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800461c:	e000      	b.n	8004620 <http_send_data_ssi+0x520>
        default:
          break;
 800461e:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004626:	2b04      	cmp	r3, #4
 8004628:	d003      	beq.n	8004632 <http_send_data_ssi+0x532>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <http_send_data_ssi+0x53c>
 8004632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f43f adba 	beq.w	80041b0 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004642:	2b04      	cmp	r3, #4
 8004644:	d034      	beq.n	80046b0 <http_send_data_ssi+0x5b0>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	429a      	cmp	r2, r3
 8004650:	d92e      	bls.n	80046b0 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004660:	4293      	cmp	r3, r2
 8004662:	dc06      	bgt.n	8004672 <http_send_data_ssi+0x572>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	e001      	b.n	8004676 <http_send_data_ssi+0x576>
 8004672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004676:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	f107 020e 	add.w	r2, r7, #14
 8004680:	2300      	movs	r3, #0
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff faf4 	bl	8003c70 <http_write>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800468c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 8004694:	2301      	movs	r3, #1
 8004696:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	89fa      	ldrh	r2, [r7, #14]
 800469e:	441a      	add	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	89fa      	ldrh	r2, [r7, #14]
 80046aa:	1a9a      	subs	r2, r3, r2
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80046b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop

080046bc <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <http_send+0x18>
    return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e030      	b.n	8004736 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d108      	bne.n	80046ee <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fca8 	bl	8004034 <http_check_eof>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <http_send+0x32>
      return 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e023      	b.n	8004736 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fd01 	bl	8004100 <http_send_data_ssi>
 80046fe:	4603      	mov	r3, r0
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	e005      	b.n	8004710 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fcc4 	bl	8004094 <http_send_data_nonssi>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <http_send+0x78>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fa19 	bl	8003b54 <fs_bytes_left>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc05      	bgt.n	8004734 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fb59 	bl	8003de2 <http_eof>
    return 0;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <http_get_404_file+0x80>)
 800474e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7ff f9b3 	bl	8003ac4 <fs_open>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d024      	beq.n	80047b4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <http_get_404_file+0x84>)
 800476e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7ff f9a3 	bl	8003ac4 <fs_open>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <http_get_404_file+0x88>)
 800478e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7ff f993 	bl	8003ac4 <fs_open>
 800479e:	4603      	mov	r3, r0
 80047a0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80047a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
        return NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80047b4:	687b      	ldr	r3, [r7, #4]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	080118e4 	.word	0x080118e4
 80047c4:	080118f0 	.word	0x080118f0
 80047c8:	080118fc 	.word	0x080118fc

080047cc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <http_parse_request+0x24>
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <http_parse_request+0x1ac>)
 80047e4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80047e8:	4964      	ldr	r1, [pc, #400]	; (800497c <http_parse_request+0x1b0>)
 80047ea:	4865      	ldr	r0, [pc, #404]	; (8004980 <http_parse_request+0x1b4>)
 80047ec:	f00b fd02 	bl	80101f4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <http_parse_request+0x38>
 80047f6:	4b60      	ldr	r3, [pc, #384]	; (8004978 <http_parse_request+0x1ac>)
 80047f8:	f240 72af 	movw	r2, #1967	; 0x7af
 80047fc:	4961      	ldr	r1, [pc, #388]	; (8004984 <http_parse_request+0x1b8>)
 80047fe:	4860      	ldr	r0, [pc, #384]	; (8004980 <http_parse_request+0x1b4>)
 8004800:	f00b fcf8 	bl	80101f4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <http_parse_request+0x48>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8004814:	f06f 0307 	mvn.w	r3, #7
 8004818:	e0a9      	b.n	800496e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	e005      	b.n	8004836 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004830:	4618      	mov	r0, r3
 8004832:	f002 f8b9 	bl	80069a8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8004836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004838:	f002 f894 	bl	8006964 <pbuf_ref>

  if (hs->req->next != NULL) {
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d012      	beq.n	800486c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	891b      	ldrh	r3, [r3, #8]
 800484c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004850:	4293      	cmp	r3, r2
 8004852:	bf28      	it	cs
 8004854:	4613      	movcs	r3, r2
 8004856:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6a18      	ldr	r0, [r3, #32]
 800485c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800485e:	2300      	movs	r3, #0
 8004860:	4949      	ldr	r1, [pc, #292]	; (8004988 <http_parse_request+0x1bc>)
 8004862:	f002 f9d9 	bl	8006c18 <pbuf_copy_partial>
    data = httpd_req_buf;
 8004866:	4b48      	ldr	r3, [pc, #288]	; (8004988 <http_parse_request+0x1bc>)
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
 800486a:	e005      	b.n	8004878 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	895b      	ldrh	r3, [r3, #10]
 8004876:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004878:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800487a:	2b06      	cmp	r3, #6
 800487c:	d962      	bls.n	8004944 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800487e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004880:	461a      	mov	r2, r3
 8004882:	4942      	ldr	r1, [pc, #264]	; (800498c <http_parse_request+0x1c0>)
 8004884:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004886:	f000 fcdd 	bl	8005244 <lwip_strnstr>
 800488a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d058      	beq.n	8004944 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8004896:	2204      	movs	r2, #4
 8004898:	493d      	ldr	r1, [pc, #244]	; (8004990 <http_parse_request+0x1c4>)
 800489a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800489c:	f00b fd2d 	bl	80102fa <strncmp>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <http_parse_request+0x108>
        sp1 = data + 3;
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	3303      	adds	r3, #3
 80048aa:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	8b7a      	ldrh	r2, [r7, #26]
 80048c2:	4934      	ldr	r1, [pc, #208]	; (8004994 <http_parse_request+0x1c8>)
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fcbd 	bl	8005244 <lwip_strnstr>
 80048ca:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d111      	bne.n	80048f6 <http_parse_request+0x12a>
 80048d2:	e006      	b.n	80048e2 <http_parse_request+0x116>
        data[4] = 0;
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	3304      	adds	r3, #4
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80048dc:	f06f 030f 	mvn.w	r3, #15
 80048e0:	e045      	b.n	800496e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	8b7a      	ldrh	r2, [r7, #26]
 80048e8:	4928      	ldr	r1, [pc, #160]	; (800498c <http_parse_request+0x1c0>)
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fcaa 	bl	8005244 <lwip_strnstr>
 80048f0:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01e      	beq.n	8004944 <http_parse_request+0x178>
 8004906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	429a      	cmp	r2, r3
 800490c:	d91a      	bls.n	8004944 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800490e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004910:	461a      	mov	r2, r3
 8004912:	4921      	ldr	r1, [pc, #132]	; (8004998 <http_parse_request+0x1cc>)
 8004914:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004916:	f000 fc95 	bl	8005244 <lwip_strnstr>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d011      	beq.n	8004944 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3301      	adds	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800492c:	8b3b      	ldrh	r3, [r7, #24]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f000 f880 	bl	8004a40 <http_find_file>
 8004940:	4603      	mov	r3, r0
 8004942:	e014      	b.n	800496e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fff3 	bl	8006934 <pbuf_clen>
 800494e:	4603      	mov	r3, r0
 8004950:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	891b      	ldrh	r3, [r3, #8]
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d205      	bcs.n	800496a <http_parse_request+0x19e>
 800495e:	8a7b      	ldrh	r3, [r7, #18]
 8004960:	2b05      	cmp	r3, #5
 8004962:	d802      	bhi.n	800496a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8004964:	f06f 0304 	mvn.w	r3, #4
 8004968:	e001      	b.n	800496e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800496a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3738      	adds	r7, #56	; 0x38
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	080117e0 	.word	0x080117e0
 800497c:	08011908 	.word	0x08011908
 8004980:	08011828 	.word	0x08011828
 8004984:	08011850 	.word	0x08011850
 8004988:	200031e4 	.word	0x200031e4
 800498c:	08011914 	.word	0x08011914
 8004990:	08011918 	.word	0x08011918
 8004994:	08011920 	.word	0x08011920
 8004998:	08011924 	.word	0x08011924

0800499c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d040      	beq.n	8004a32 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80049b4:	213f      	movs	r1, #63	; 0x3f
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f00b fc92 	bl	80102e0 <strchr>
 80049bc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	613b      	str	r3, [r7, #16]
    ext = uri;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80049d2:	212e      	movs	r1, #46	; 0x2e
 80049d4:	6938      	ldr	r0, [r7, #16]
 80049d6:	f00b fc83 	bl	80102e0 <strchr>
 80049da:	6138      	str	r0, [r7, #16]
 80049dc:	e009      	b.n	80049f2 <http_uri_is_ssi+0x56>
      ext = sub;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	617b      	str	r3, [r7, #20]
      sub++;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3301      	adds	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80049e8:	212e      	movs	r1, #46	; 0x2e
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f00b fc78 	bl	80102e0 <strchr>
 80049f0:	6138      	str	r0, [r7, #16]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f2      	bne.n	80049de <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e010      	b.n	8004a20 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <http_uri_is_ssi+0xa0>)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	4619      	mov	r1, r3
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f000 fc51 	bl	80052b0 <lwip_stricmp>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8004a14:	2301      	movs	r3, #1
 8004a16:	76fb      	strb	r3, [r7, #27]
        break;
 8004a18:	e005      	b.n	8004a26 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d9eb      	bls.n	80049fe <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <http_uri_is_ssi+0x96>
      *param = '?';
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	223f      	movs	r2, #63	; 0x3f
 8004a30:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8004a32:	7efb      	ldrb	r3, [r7, #27]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08014858 	.word	0x08014858

08004a40 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b093      	sub	sp, #76	; 0x4c
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fbc1 	bl	80001e4 <strlen>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d072      	beq.n	8004b50 <http_find_file+0x110>
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b2f      	cmp	r3, #47	; 0x2f
 8004a76:	d16b      	bne.n	8004b50 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a78:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <http_find_file+0x23c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d102      	bne.n	8004a86 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d164      	bne.n	8004b50 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8004a8c:	bf28      	it	cs
 8004a8e:	233f      	movcs	r3, #63	; 0x3f
 8004a90:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4877      	ldr	r0, [pc, #476]	; (8004c7c <http_find_file+0x23c>)
 8004aa0:	f00b fb78 	bl	8010194 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004aa4:	4a75      	ldr	r2, [pc, #468]	; (8004c7c <http_find_file+0x23c>)
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab2:	e04a      	b.n	8004b4a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d028      	beq.n	8004b0c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004ac0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01e      	beq.n	8004b06 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004ac8:	4a6d      	ldr	r2, [pc, #436]	; (8004c80 <http_find_file+0x240>)
 8004aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb fb87 	bl	80001e4 <strlen>
 8004ad6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bf28      	it	cs
 8004ae0:	4613      	movcs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	4a65      	ldr	r2, [pc, #404]	; (8004c7c <http_find_file+0x23c>)
 8004ae8:	1898      	adds	r0, r3, r2
 8004aea:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <http_find_file+0x240>)
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4619      	mov	r1, r3
 8004af6:	f00b fb4d 	bl	8010194 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004afa:	6a3a      	ldr	r2, [r7, #32]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <http_find_file+0x23c>)
 8004b02:	2100      	movs	r1, #0
 8004b04:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <http_find_file+0x23c>)
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	e004      	b.n	8004b16 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004b0c:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <http_find_file+0x240>)
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe ffd2 	bl	8003ac4 <fs_open>
 8004b20:	4603      	mov	r3, r0
 8004b22:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004b24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <http_find_file+0x104>
        uri = file_name;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004b34:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <http_find_file+0x240>)
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	791b      	ldrb	r3, [r3, #4]
 8004b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004b42:	e005      	b.n	8004b50 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b46:	3301      	adds	r3, #1
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d9b1      	bls.n	8004ab4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d176      	bne.n	8004c44 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	213f      	movs	r1, #63	; 0x3f
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f00b fbc0 	bl	80102e0 <strchr>
 8004b60:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
      params++;
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	3301      	adds	r3, #1
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <http_find_file+0x244>)
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <http_find_file+0x248>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d034      	beq.n	8004bee <http_find_file+0x1ae>
 8004b84:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <http_find_file+0x24c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d030      	beq.n	8004bee <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b90:	e028      	b.n	8004be4 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004b92:	68b8      	ldr	r0, [r7, #8]
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <http_find_file+0x24c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fb fb15 	bl	80001d0 <strcmp>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d118      	bne.n	8004bde <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8004bac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff f924 	bl	8003dfc <extract_uri_parameters>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <http_find_file+0x244>)
 8004bb8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004bba:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <http_find_file+0x24c>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	685c      	ldr	r4, [r3, #4]
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <http_find_file+0x244>)
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd6:	47a0      	blx	r4
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60bb      	str	r3, [r7, #8]
          break;
 8004bdc:	e007      	b.n	8004bee <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	3301      	adds	r3, #1
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
 8004be4:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <http_find_file+0x248>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bea:	429a      	cmp	r2, r3
 8004bec:	dbd1      	blt.n	8004b92 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe ff65 	bl	8003ac4 <fs_open>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8004bfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c0a:	e006      	b.n	8004c1a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4619      	mov	r1, r3
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff fd94 	bl	8004740 <http_get_404_file>
 8004c18:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	7c1b      	ldrb	r3, [r3, #16]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <http_find_file+0x1f4>
        tag_check = 1;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004c32:	e007      	b.n	8004c44 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4619      	mov	r1, r3
 8004c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c3a:	f7ff feaf 	bl	800499c <http_uri_is_ssi>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff fd75 	bl	8004740 <http_get_404_file>
 8004c56:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f810 	bl	8004c90 <http_init_file>
 8004c70:	4603      	mov	r3, r0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3744      	adds	r7, #68	; 0x44
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200035e4 	.word	0x200035e4
 8004c80:	0801486c 	.word	0x0801486c
 8004c84:	20003638 	.word	0x20003638
 8004c88:	20003634 	.word	0x20003634
 8004c8c:	20003630 	.word	0x20003630

08004c90 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d07d      	beq.n	8004da0 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <http_init_file+0x2a>
 8004cac:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <http_init_file+0x134>)
 8004cae:	f640 120b 	movw	r2, #2315	; 0x90b
 8004cb2:	4945      	ldr	r1, [pc, #276]	; (8004dc8 <http_init_file+0x138>)
 8004cb4:	4845      	ldr	r0, [pc, #276]	; (8004dcc <http_init_file+0x13c>)
 8004cb6:	f00b fa9d 	bl	80101f4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01c      	beq.n	8004cfc <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004cc2:	f7fe ff56 	bl	8003b72 <http_ssi_state_alloc>
 8004cc6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <http_init_file+0x6c>
        ssi->tag_index = 0;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da06      	bge.n	8004d20 <http_init_file+0x90>
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <http_init_file+0x134>)
 8004d14:	f640 1234 	movw	r2, #2356	; 0x934
 8004d18:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <http_init_file+0x140>)
 8004d1a:	482c      	ldr	r0, [pc, #176]	; (8004dcc <http_init_file+0x13c>)
 8004d1c:	f00b fa6a 	bl	80101f4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	461a      	mov	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	7c1b      	ldrb	r3, [r3, #16]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <http_init_file+0xbe>
 8004d40:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <http_init_file+0x134>)
 8004d42:	f640 1243 	movw	r2, #2371	; 0x943
 8004d46:	4923      	ldr	r1, [pc, #140]	; (8004dd4 <http_init_file+0x144>)
 8004d48:	4820      	ldr	r0, [pc, #128]	; (8004dcc <http_init_file+0x13c>)
 8004d4a:	f00b fa53 	bl	80101f4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d032      	beq.n	8004dba <http_init_file+0x12a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	7c1b      	ldrb	r3, [r3, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02b      	beq.n	8004dba <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6998      	ldr	r0, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	491a      	ldr	r1, [pc, #104]	; (8004dd8 <http_init_file+0x148>)
 8004d6e:	f000 fa69 	bl	8005244 <lwip_strnstr>
 8004d72:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01f      	beq.n	8004dba <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d9e:	e00c      	b.n	8004dba <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	080117e0 	.word	0x080117e0
 8004dc8:	0801192c 	.word	0x0801192c
 8004dcc:	08011828 	.word	0x08011828
 8004dd0:	08011940 	.word	0x08011940
 8004dd4:	08011960 	.word	0x08011960
 8004dd8:	08011924 	.word	0x08011924

08004ddc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <http_err+0x1c>
    http_state_free(hs);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7fe ff2a 	bl	8003c4c <http_state_free>
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <http_sent+0x1c>
    return ERR_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e008      	b.n	8004e2e <http_sent+0x2e>
  }

  hs->retries = 0;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004e24:	6979      	ldr	r1, [r7, #20]
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f7ff fc48 	bl	80046bc <http_send>

  return ERR_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6838      	ldr	r0, [r7, #0]
 8004e4e:	f7fe ffb9 	bl	8003dc4 <http_close_conn>
 8004e52:	4603      	mov	r3, r0
 8004e54:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e021      	b.n	8004e9e <http_poll+0x68>
  } else {
    hs->retries++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e60:	3301      	adds	r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d105      	bne.n	8004e80 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	6838      	ldr	r0, [r7, #0]
 8004e78:	f7fe ffa4 	bl	8003dc4 <http_close_conn>
      return ERR_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e00e      	b.n	8004e9e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	6838      	ldr	r0, [r7, #0]
 8004e8c:	f7ff fc16 	bl	80046bc <http_send>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f007 f84e 	bl	800bf38 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <http_recv+0x26>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <http_recv+0x26>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d111      	bne.n	8004ef2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	891b      	ldrh	r3, [r3, #8]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f002 fc14 	bl	8007708 <tcp_recved>
      pbuf_free(p);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 fc9f 	bl	8006824 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004ee6:	6979      	ldr	r1, [r7, #20]
 8004ee8:	68b8      	ldr	r0, [r7, #8]
 8004eea:	f7fe ff6b 	bl	8003dc4 <http_close_conn>
    return ERR_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e055      	b.n	8004f9e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	891b      	ldrh	r3, [r3, #8]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68b8      	ldr	r0, [r7, #8]
 8004efa:	f002 fc05 	bl	8007708 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d147      	bne.n	8004f96 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fc5e 	bl	80047cc <http_parse_request>
 8004f10:	4603      	mov	r3, r0
 8004f12:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004f14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <http_recv+0xa0>
 8004f1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f20:	f113 0f05 	cmn.w	r3, #5
 8004f24:	d010      	beq.n	8004f48 <http_recv+0xa0>
 8004f26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f2a:	f113 0f10 	cmn.w	r3, #16
 8004f2e:	d00b      	beq.n	8004f48 <http_recv+0xa0>
 8004f30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f34:	f113 0f08 	cmn.w	r3, #8
 8004f38:	d006      	beq.n	8004f48 <http_recv+0xa0>
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <http_recv+0x100>)
 8004f3c:	f640 2204 	movw	r2, #2564	; 0xa04
 8004f40:	491a      	ldr	r1, [pc, #104]	; (8004fac <http_recv+0x104>)
 8004f42:	481b      	ldr	r0, [pc, #108]	; (8004fb0 <http_recv+0x108>)
 8004f44:	f00b f956 	bl	80101f4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004f48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f4c:	f113 0f05 	cmn.w	r3, #5
 8004f50:	d00b      	beq.n	8004f6a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <http_recv+0xc2>
          pbuf_free(hs->req);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fc60 	bl	8006824 <pbuf_free>
          hs->req = NULL;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fc5a 	bl	8006824 <pbuf_free>
      if (parsed == ERR_OK) {
 8004f70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004f78:	6979      	ldr	r1, [r7, #20]
 8004f7a:	68b8      	ldr	r0, [r7, #8]
 8004f7c:	f7ff fb9e 	bl	80046bc <http_send>
 8004f80:	e00c      	b.n	8004f9c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004f82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f86:	f113 0f10 	cmn.w	r3, #16
 8004f8a:	d107      	bne.n	8004f9c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	68b8      	ldr	r0, [r7, #8]
 8004f90:	f7fe ff18 	bl	8003dc4 <http_close_conn>
 8004f94:	e002      	b.n	8004f9c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fc44 	bl	8006824 <pbuf_free>
    }
  }
  return ERR_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	080117e0 	.word	0x080117e0
 8004fac:	0801198c 	.word	0x0801198c
 8004fb0:	08011828 	.word	0x08011828

08004fb4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <http_accept+0x1c>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <http_accept+0x22>
    return ERR_VAL;
 8004fd0:	f06f 0305 	mvn.w	r3, #5
 8004fd4:	e025      	b.n	8005022 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	68b8      	ldr	r0, [r7, #8]
 8004fda:	f003 f879 	bl	80080d0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004fde:	f7fe fdf7 	bl	8003bd0 <http_state_alloc>
 8004fe2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	e018      	b.n	8005022 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	68b8      	ldr	r0, [r7, #8]
 8004ffa:	f003 fa71 	bl	80084e0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004ffe:	490b      	ldr	r1, [pc, #44]	; (800502c <http_accept+0x78>)
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f003 fa7f 	bl	8008504 <tcp_recv>
  altcp_err(pcb, http_err);
 8005006:	490a      	ldr	r1, [pc, #40]	; (8005030 <http_accept+0x7c>)
 8005008:	68b8      	ldr	r0, [r7, #8]
 800500a:	f003 fabf 	bl	800858c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800500e:	2204      	movs	r2, #4
 8005010:	4908      	ldr	r1, [pc, #32]	; (8005034 <http_accept+0x80>)
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f003 faf4 	bl	8008600 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <http_accept+0x84>)
 800501a:	68b8      	ldr	r0, [r7, #8]
 800501c:	f003 fa94 	bl	8008548 <tcp_sent>

  return ERR_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08004ea9 	.word	0x08004ea9
 8005030:	08004ddd 	.word	0x08004ddd
 8005034:	08004e37 	.word	0x08004e37
 8005038:	08004e01 	.word	0x08004e01

0800503c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d029      	beq.n	80050a2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800504e:	2101      	movs	r1, #1
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f003 f83d 	bl	80080d0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	461a      	mov	r2, r3
 800505a:	4914      	ldr	r1, [pc, #80]	; (80050ac <httpd_init_pcb+0x70>)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 f985 	bl	800736c <tcp_bind>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <httpd_init_pcb+0x40>
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <httpd_init_pcb+0x74>)
 8005070:	f640 2257 	movw	r2, #2647	; 0xa57
 8005074:	490f      	ldr	r1, [pc, #60]	; (80050b4 <httpd_init_pcb+0x78>)
 8005076:	4810      	ldr	r0, [pc, #64]	; (80050b8 <httpd_init_pcb+0x7c>)
 8005078:	f00b f8bc 	bl	80101f4 <iprintf>
    pcb = altcp_listen(pcb);
 800507c:	21ff      	movs	r1, #255	; 0xff
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f002 fa2c 	bl	80074dc <tcp_listen_with_backlog>
 8005084:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <httpd_init_pcb+0x5e>
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <httpd_init_pcb+0x74>)
 800508e:	f640 2259 	movw	r2, #2649	; 0xa59
 8005092:	490a      	ldr	r1, [pc, #40]	; (80050bc <httpd_init_pcb+0x80>)
 8005094:	4808      	ldr	r0, [pc, #32]	; (80050b8 <httpd_init_pcb+0x7c>)
 8005096:	f00b f8ad 	bl	80101f4 <iprintf>
    altcp_accept(pcb, http_accept);
 800509a:	4909      	ldr	r1, [pc, #36]	; (80050c0 <httpd_init_pcb+0x84>)
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f003 fa97 	bl	80085d0 <tcp_accept>
  }
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	08014974 	.word	0x08014974
 80050b0:	080117e0 	.word	0x080117e0
 80050b4:	080119b8 	.word	0x080119b8
 80050b8:	08011828 	.word	0x08011828
 80050bc:	080119d4 	.word	0x080119d4
 80050c0:	08004fb5 	.word	0x08004fb5

080050c4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80050ca:	202e      	movs	r0, #46	; 0x2e
 80050cc:	f003 f9fa 	bl	80084c4 <tcp_new_ip_type>
 80050d0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <httpd_init+0x22>
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <httpd_init+0x34>)
 80050da:	f640 2272 	movw	r2, #2674	; 0xa72
 80050de:	4907      	ldr	r1, [pc, #28]	; (80050fc <httpd_init+0x38>)
 80050e0:	4807      	ldr	r0, [pc, #28]	; (8005100 <httpd_init+0x3c>)
 80050e2:	f00b f887 	bl	80101f4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80050e6:	2150      	movs	r1, #80	; 0x50
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffa7 	bl	800503c <httpd_init_pcb>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	080117e0 	.word	0x080117e0
 80050fc:	080119f4 	.word	0x080119f4
 8005100:	08011828 	.word	0x08011828

08005104 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <http_set_ssi_handler+0x20>
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <http_set_ssi_handler+0x64>)
 8005118:	f640 2297 	movw	r2, #2711	; 0xa97
 800511c:	4913      	ldr	r1, [pc, #76]	; (800516c <http_set_ssi_handler+0x68>)
 800511e:	4814      	ldr	r0, [pc, #80]	; (8005170 <http_set_ssi_handler+0x6c>)
 8005120:	f00b f868 	bl	80101f4 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8005124:	4a13      	ldr	r2, [pc, #76]	; (8005174 <http_set_ssi_handler+0x70>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <http_set_ssi_handler+0x3a>
 8005130:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <http_set_ssi_handler+0x64>)
 8005132:	f640 229e 	movw	r2, #2718	; 0xa9e
 8005136:	4910      	ldr	r1, [pc, #64]	; (8005178 <http_set_ssi_handler+0x74>)
 8005138:	480d      	ldr	r0, [pc, #52]	; (8005170 <http_set_ssi_handler+0x6c>)
 800513a:	f00b f85b 	bl	80101f4 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dc06      	bgt.n	8005152 <http_set_ssi_handler+0x4e>
 8005144:	4b08      	ldr	r3, [pc, #32]	; (8005168 <http_set_ssi_handler+0x64>)
 8005146:	f640 229f 	movw	r2, #2719	; 0xa9f
 800514a:	490c      	ldr	r1, [pc, #48]	; (800517c <http_set_ssi_handler+0x78>)
 800514c:	4808      	ldr	r0, [pc, #32]	; (8005170 <http_set_ssi_handler+0x6c>)
 800514e:	f00b f851 	bl	80101f4 <iprintf>

  httpd_tags = tags;
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <http_set_ssi_handler+0x7c>)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <http_set_ssi_handler+0x80>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	080117e0 	.word	0x080117e0
 800516c:	08011a10 	.word	0x08011a10
 8005170:	08011828 	.word	0x08011828
 8005174:	20003624 	.word	0x20003624
 8005178:	08011a28 	.word	0x08011a28
 800517c:	08011a38 	.word	0x08011a38
 8005180:	2000362c 	.word	0x2000362c
 8005184:	20003628 	.word	0x20003628

08005188 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <http_set_cgi_handlers+0x1e>
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <http_set_cgi_handlers+0x48>)
 800519a:	f640 22b2 	movw	r2, #2738	; 0xab2
 800519e:	490d      	ldr	r1, [pc, #52]	; (80051d4 <http_set_cgi_handlers+0x4c>)
 80051a0:	480d      	ldr	r0, [pc, #52]	; (80051d8 <http_set_cgi_handlers+0x50>)
 80051a2:	f00b f827 	bl	80101f4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dc06      	bgt.n	80051ba <http_set_cgi_handlers+0x32>
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <http_set_cgi_handlers+0x48>)
 80051ae:	f640 22b3 	movw	r2, #2739	; 0xab3
 80051b2:	490a      	ldr	r1, [pc, #40]	; (80051dc <http_set_cgi_handlers+0x54>)
 80051b4:	4808      	ldr	r0, [pc, #32]	; (80051d8 <http_set_cgi_handlers+0x50>)
 80051b6:	f00b f81d 	bl	80101f4 <iprintf>

  httpd_cgis = cgis;
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <http_set_cgi_handlers+0x58>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <http_set_cgi_handlers+0x5c>)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6013      	str	r3, [r2, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	080117e0 	.word	0x080117e0
 80051d4:	08011a50 	.word	0x08011a50
 80051d8:	08011828 	.word	0x08011828
 80051dc:	08011a60 	.word	0x08011a60
 80051e0:	20003630 	.word	0x20003630
 80051e4:	20003634 	.word	0x20003634

080051e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	b21a      	sxth	r2, r3
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b21b      	sxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b21b      	sxth	r3, r3
 8005204:	b29b      	uxth	r3, r3
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	061a      	lsls	r2, r3, #24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	4313      	orrs	r3, r2
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005250:	68b8      	ldr	r0, [r7, #8]
 8005252:	f7fa ffc7 	bl	80001e4 <strlen>
 8005256:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	e022      	b.n	80052a8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e012      	b.n	800528e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d109      	bne.n	8005288 <lwip_strnstr+0x44>
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f00b f83e 	bl	80102fa <strncmp>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	e00f      	b.n	80052a8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3301      	adds	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <lwip_strnstr+0x62>
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	441a      	add	r2, r3
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	440b      	add	r3, r1
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d9e0      	bls.n	8005268 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	603a      	str	r2, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	7bbb      	ldrb	r3, [r7, #14]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d016      	beq.n	8005304 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	f043 0320 	orr.w	r3, r3, #32
 80052dc:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80052de:	7b7b      	ldrb	r3, [r7, #13]
 80052e0:	2b60      	cmp	r3, #96	; 0x60
 80052e2:	d90c      	bls.n	80052fe <lwip_stricmp+0x4e>
 80052e4:	7b7b      	ldrb	r3, [r7, #13]
 80052e6:	2b7a      	cmp	r3, #122	; 0x7a
 80052e8:	d809      	bhi.n	80052fe <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80052ea:	7bbb      	ldrb	r3, [r7, #14]
 80052ec:	f043 0320 	orr.w	r3, r3, #32
 80052f0:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80052f2:	7b7a      	ldrb	r2, [r7, #13]
 80052f4:	7b3b      	ldrb	r3, [r7, #12]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d003      	beq.n	8005302 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e006      	b.n	800530c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	e004      	b.n	800530c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005302:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1d7      	bne.n	80052ba <lwip_stricmp+0xa>
  return 0;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005322:	f000 f8d5 	bl	80054d0 <mem_init>
  memp_init();
 8005326:	f000 fbdb 	bl	8005ae0 <memp_init>
  pbuf_init();
  netif_init();
 800532a:	f000 fc93 	bl	8005c54 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800532e:	f007 fec3 	bl	800d0b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005332:	f001 fd15 	bl	8006d60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005336:	f007 fe35 	bl	800cfa4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <ptr_to_mem+0x20>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	4413      	add	r3, r2
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20003ca8 	.word	0x20003ca8

08005368 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <mem_to_ptr+0x20>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	b29b      	uxth	r3, r3
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20003ca8 	.word	0x20003ca8

0800538c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005394:	4b45      	ldr	r3, [pc, #276]	; (80054ac <plug_holes+0x120>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d206      	bcs.n	80053ac <plug_holes+0x20>
 800539e:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <plug_holes+0x124>)
 80053a0:	f240 12df 	movw	r2, #479	; 0x1df
 80053a4:	4943      	ldr	r1, [pc, #268]	; (80054b4 <plug_holes+0x128>)
 80053a6:	4844      	ldr	r0, [pc, #272]	; (80054b8 <plug_holes+0x12c>)
 80053a8:	f00a ff24 	bl	80101f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80053ac:	4b43      	ldr	r3, [pc, #268]	; (80054bc <plug_holes+0x130>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d306      	bcc.n	80053c4 <plug_holes+0x38>
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <plug_holes+0x124>)
 80053b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80053bc:	4940      	ldr	r1, [pc, #256]	; (80054c0 <plug_holes+0x134>)
 80053be:	483e      	ldr	r0, [pc, #248]	; (80054b8 <plug_holes+0x12c>)
 80053c0:	f00a ff18 	bl	80101f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d006      	beq.n	80053da <plug_holes+0x4e>
 80053cc:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <plug_holes+0x124>)
 80053ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80053d2:	493c      	ldr	r1, [pc, #240]	; (80054c4 <plug_holes+0x138>)
 80053d4:	4838      	ldr	r0, [pc, #224]	; (80054b8 <plug_holes+0x12c>)
 80053d6:	f00a ff0d 	bl	80101f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053e2:	d906      	bls.n	80053f2 <plug_holes+0x66>
 80053e4:	4b32      	ldr	r3, [pc, #200]	; (80054b0 <plug_holes+0x124>)
 80053e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80053ea:	4937      	ldr	r1, [pc, #220]	; (80054c8 <plug_holes+0x13c>)
 80053ec:	4832      	ldr	r0, [pc, #200]	; (80054b8 <plug_holes+0x12c>)
 80053ee:	f00a ff01 	bl	80101f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ffa4 	bl	8005344 <ptr_to_mem>
 80053fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	429a      	cmp	r2, r3
 8005404:	d024      	beq.n	8005450 <plug_holes+0xc4>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	791b      	ldrb	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d120      	bne.n	8005450 <plug_holes+0xc4>
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <plug_holes+0x130>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d01b      	beq.n	8005450 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005418:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <plug_holes+0x140>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	429a      	cmp	r2, r3
 8005420:	d102      	bne.n	8005428 <plug_holes+0x9c>
      lfree = mem;
 8005422:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <plug_holes+0x140>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005438:	d00a      	beq.n	8005450 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff80 	bl	8005344 <ptr_to_mem>
 8005444:	4604      	mov	r4, r0
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff ff8e 	bl	8005368 <mem_to_ptr>
 800544c:	4603      	mov	r3, r0
 800544e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	885b      	ldrh	r3, [r3, #2]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ff75 	bl	8005344 <ptr_to_mem>
 800545a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d01f      	beq.n	80054a4 <plug_holes+0x118>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11b      	bne.n	80054a4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <plug_holes+0x140>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d102      	bne.n	800547c <plug_holes+0xf0>
      lfree = pmem;
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <plug_holes+0x140>)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800548c:	d00a      	beq.n	80054a4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff56 	bl	8005344 <ptr_to_mem>
 8005498:	4604      	mov	r4, r0
 800549a:	68b8      	ldr	r0, [r7, #8]
 800549c:	f7ff ff64 	bl	8005368 <mem_to_ptr>
 80054a0:	4603      	mov	r3, r0
 80054a2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	20003ca8 	.word	0x20003ca8
 80054b0:	08011a7c 	.word	0x08011a7c
 80054b4:	08011aac 	.word	0x08011aac
 80054b8:	08011ac4 	.word	0x08011ac4
 80054bc:	20003cac 	.word	0x20003cac
 80054c0:	08011aec 	.word	0x08011aec
 80054c4:	08011b08 	.word	0x08011b08
 80054c8:	08011b24 	.word	0x08011b24
 80054cc:	20003cb0 	.word	0x20003cb0

080054d0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <mem_init+0x68>)
 80054d8:	3303      	adds	r3, #3
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	461a      	mov	r2, r3
 80054e0:	4b16      	ldr	r3, [pc, #88]	; (800553c <mem_init+0x6c>)
 80054e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <mem_init+0x6c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80054fe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005502:	f7ff ff1f 	bl	8005344 <ptr_to_mem>
 8005506:	4603      	mov	r3, r0
 8005508:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <mem_init+0x70>)
 800550a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <mem_init+0x70>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <mem_init+0x70>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800551c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <mem_init+0x70>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005526:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <mem_init+0x6c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a05      	ldr	r2, [pc, #20]	; (8005544 <mem_init+0x74>)
 800552e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20003654 	.word	0x20003654
 800553c:	20003ca8 	.word	0x20003ca8
 8005540:	20003cac 	.word	0x20003cac
 8005544:	20003cb0 	.word	0x20003cb0

08005548 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff09 	bl	8005368 <mem_to_ptr>
 8005556:	4603      	mov	r3, r0
 8005558:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fef0 	bl	8005344 <ptr_to_mem>
 8005564:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	885b      	ldrh	r3, [r3, #2]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff feea 	bl	8005344 <ptr_to_mem>
 8005570:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800557a:	d818      	bhi.n	80055ae <mem_link_valid+0x66>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	885b      	ldrh	r3, [r3, #2]
 8005580:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005584:	d813      	bhi.n	80055ae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800558a:	8afa      	ldrh	r2, [r7, #22]
 800558c:	429a      	cmp	r2, r3
 800558e:	d004      	beq.n	800559a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	8afa      	ldrh	r2, [r7, #22]
 8005596:	429a      	cmp	r2, r3
 8005598:	d109      	bne.n	80055ae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <mem_link_valid+0x74>)
 800559c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d006      	beq.n	80055b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	885b      	ldrh	r3, [r3, #2]
 80055a8:	8afa      	ldrh	r2, [r7, #22]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d001      	beq.n	80055b2 <mem_link_valid+0x6a>
    return 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <mem_link_valid+0x6c>
  }
  return 1;
 80055b2:	2301      	movs	r3, #1
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20003cac 	.word	0x20003cac

080055c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04c      	beq.n	8005668 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <mem_free+0xb0>)
 80055da:	f240 2273 	movw	r2, #627	; 0x273
 80055de:	4925      	ldr	r1, [pc, #148]	; (8005674 <mem_free+0xb4>)
 80055e0:	4825      	ldr	r0, [pc, #148]	; (8005678 <mem_free+0xb8>)
 80055e2:	f00a fe07 	bl	80101f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055e6:	e040      	b.n	800566a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3b08      	subs	r3, #8
 80055ec:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <mem_free+0xbc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d306      	bcc.n	8005606 <mem_free+0x46>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 020c 	add.w	r2, r3, #12
 80055fe:	4b20      	ldr	r3, [pc, #128]	; (8005680 <mem_free+0xc0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d907      	bls.n	8005616 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005606:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <mem_free+0xb0>)
 8005608:	f240 227f 	movw	r2, #639	; 0x27f
 800560c:	491d      	ldr	r1, [pc, #116]	; (8005684 <mem_free+0xc4>)
 800560e:	481a      	ldr	r0, [pc, #104]	; (8005678 <mem_free+0xb8>)
 8005610:	f00a fdf0 	bl	80101f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005614:	e029      	b.n	800566a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <mem_free+0xb0>)
 8005620:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005624:	4918      	ldr	r1, [pc, #96]	; (8005688 <mem_free+0xc8>)
 8005626:	4814      	ldr	r0, [pc, #80]	; (8005678 <mem_free+0xb8>)
 8005628:	f00a fde4 	bl	80101f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800562c:	e01d      	b.n	800566a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ff8a 	bl	8005548 <mem_link_valid>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <mem_free+0xb0>)
 800563c:	f240 2295 	movw	r2, #661	; 0x295
 8005640:	4912      	ldr	r1, [pc, #72]	; (800568c <mem_free+0xcc>)
 8005642:	480d      	ldr	r0, [pc, #52]	; (8005678 <mem_free+0xb8>)
 8005644:	f00a fdd6 	bl	80101f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005648:	e00f      	b.n	800566a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <mem_free+0xd0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	429a      	cmp	r2, r3
 8005658:	d202      	bcs.n	8005660 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <mem_free+0xd0>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fe93 	bl	800538c <plug_holes>
 8005666:	e000      	b.n	800566a <mem_free+0xaa>
    return;
 8005668:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08011a7c 	.word	0x08011a7c
 8005674:	08011b50 	.word	0x08011b50
 8005678:	08011ac4 	.word	0x08011ac4
 800567c:	20003ca8 	.word	0x20003ca8
 8005680:	20003cac 	.word	0x20003cac
 8005684:	08011b74 	.word	0x08011b74
 8005688:	08011b90 	.word	0x08011b90
 800568c:	08011bb8 	.word	0x08011bb8
 8005690:	20003cb0 	.word	0x20003cb0

08005694 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	3303      	adds	r3, #3
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80056ac:	8bfb      	ldrh	r3, [r7, #30]
 80056ae:	2b0b      	cmp	r3, #11
 80056b0:	d801      	bhi.n	80056b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80056b2:	230c      	movs	r3, #12
 80056b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80056b6:	8bfb      	ldrh	r3, [r7, #30]
 80056b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056bc:	d803      	bhi.n	80056c6 <mem_trim+0x32>
 80056be:	8bfa      	ldrh	r2, [r7, #30]
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d201      	bcs.n	80056ca <mem_trim+0x36>
    return NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e0cc      	b.n	8005864 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80056ca:	4b68      	ldr	r3, [pc, #416]	; (800586c <mem_trim+0x1d8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d304      	bcc.n	80056de <mem_trim+0x4a>
 80056d4:	4b66      	ldr	r3, [pc, #408]	; (8005870 <mem_trim+0x1dc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d306      	bcc.n	80056ec <mem_trim+0x58>
 80056de:	4b65      	ldr	r3, [pc, #404]	; (8005874 <mem_trim+0x1e0>)
 80056e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80056e4:	4964      	ldr	r1, [pc, #400]	; (8005878 <mem_trim+0x1e4>)
 80056e6:	4865      	ldr	r0, [pc, #404]	; (800587c <mem_trim+0x1e8>)
 80056e8:	f00a fd84 	bl	80101f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80056ec:	4b5f      	ldr	r3, [pc, #380]	; (800586c <mem_trim+0x1d8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d304      	bcc.n	8005700 <mem_trim+0x6c>
 80056f6:	4b5e      	ldr	r3, [pc, #376]	; (8005870 <mem_trim+0x1dc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d301      	bcc.n	8005704 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	e0af      	b.n	8005864 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3b08      	subs	r3, #8
 8005708:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800570a:	69b8      	ldr	r0, [r7, #24]
 800570c:	f7ff fe2c 	bl	8005368 <mem_to_ptr>
 8005710:	4603      	mov	r3, r0
 8005712:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	881a      	ldrh	r2, [r3, #0]
 8005718:	8afb      	ldrh	r3, [r7, #22]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b08      	subs	r3, #8
 8005720:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005722:	8bfa      	ldrh	r2, [r7, #30]
 8005724:	8abb      	ldrh	r3, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d906      	bls.n	8005738 <mem_trim+0xa4>
 800572a:	4b52      	ldr	r3, [pc, #328]	; (8005874 <mem_trim+0x1e0>)
 800572c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005730:	4953      	ldr	r1, [pc, #332]	; (8005880 <mem_trim+0x1ec>)
 8005732:	4852      	ldr	r0, [pc, #328]	; (800587c <mem_trim+0x1e8>)
 8005734:	f00a fd5e 	bl	80101f4 <iprintf>
  if (newsize > size) {
 8005738:	8bfa      	ldrh	r2, [r7, #30]
 800573a:	8abb      	ldrh	r3, [r7, #20]
 800573c:	429a      	cmp	r2, r3
 800573e:	d901      	bls.n	8005744 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	e08f      	b.n	8005864 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005744:	8bfa      	ldrh	r2, [r7, #30]
 8005746:	8abb      	ldrh	r3, [r7, #20]
 8005748:	429a      	cmp	r2, r3
 800574a:	d101      	bne.n	8005750 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	e089      	b.n	8005864 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fdf5 	bl	8005344 <ptr_to_mem>
 800575a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d13f      	bne.n	80057e4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800576c:	d106      	bne.n	800577c <mem_trim+0xe8>
 800576e:	4b41      	ldr	r3, [pc, #260]	; (8005874 <mem_trim+0x1e0>)
 8005770:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005774:	4943      	ldr	r1, [pc, #268]	; (8005884 <mem_trim+0x1f0>)
 8005776:	4841      	ldr	r0, [pc, #260]	; (800587c <mem_trim+0x1e8>)
 8005778:	f00a fd3c 	bl	80101f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005782:	8afa      	ldrh	r2, [r7, #22]
 8005784:	8bfb      	ldrh	r3, [r7, #30]
 8005786:	4413      	add	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	3308      	adds	r3, #8
 800578c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800578e:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <mem_trim+0x1f4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d106      	bne.n	80057a6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005798:	89fb      	ldrh	r3, [r7, #14]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fdd2 	bl	8005344 <ptr_to_mem>
 80057a0:	4603      	mov	r3, r0
 80057a2:	4a39      	ldr	r2, [pc, #228]	; (8005888 <mem_trim+0x1f4>)
 80057a4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fdcb 	bl	8005344 <ptr_to_mem>
 80057ae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	89ba      	ldrh	r2, [r7, #12]
 80057ba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	8afa      	ldrh	r2, [r7, #22]
 80057c0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	89fa      	ldrh	r2, [r7, #14]
 80057c6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057d0:	d047      	beq.n	8005862 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fdb4 	bl	8005344 <ptr_to_mem>
 80057dc:	4602      	mov	r2, r0
 80057de:	89fb      	ldrh	r3, [r7, #14]
 80057e0:	8053      	strh	r3, [r2, #2]
 80057e2:	e03e      	b.n	8005862 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80057e4:	8bfb      	ldrh	r3, [r7, #30]
 80057e6:	f103 0214 	add.w	r2, r3, #20
 80057ea:	8abb      	ldrh	r3, [r7, #20]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d838      	bhi.n	8005862 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80057f0:	8afa      	ldrh	r2, [r7, #22]
 80057f2:	8bfb      	ldrh	r3, [r7, #30]
 80057f4:	4413      	add	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3308      	adds	r3, #8
 80057fa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005804:	d106      	bne.n	8005814 <mem_trim+0x180>
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <mem_trim+0x1e0>)
 8005808:	f240 3216 	movw	r2, #790	; 0x316
 800580c:	491d      	ldr	r1, [pc, #116]	; (8005884 <mem_trim+0x1f0>)
 800580e:	481b      	ldr	r0, [pc, #108]	; (800587c <mem_trim+0x1e8>)
 8005810:	f00a fcf0 	bl	80101f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fd94 	bl	8005344 <ptr_to_mem>
 800581c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <mem_trim+0x1f4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	429a      	cmp	r2, r3
 8005826:	d202      	bcs.n	800582e <mem_trim+0x19a>
      lfree = mem2;
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <mem_trim+0x1f4>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2200      	movs	r2, #0
 8005832:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	8afa      	ldrh	r2, [r7, #22]
 8005840:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	89fa      	ldrh	r2, [r7, #14]
 8005846:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005850:	d007      	beq.n	8005862 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fd74 	bl	8005344 <ptr_to_mem>
 800585c:	4602      	mov	r2, r0
 800585e:	89fb      	ldrh	r3, [r7, #14]
 8005860:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005862:	687b      	ldr	r3, [r7, #4]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20003ca8 	.word	0x20003ca8
 8005870:	20003cac 	.word	0x20003cac
 8005874:	08011a7c 	.word	0x08011a7c
 8005878:	08011bec 	.word	0x08011bec
 800587c:	08011ac4 	.word	0x08011ac4
 8005880:	08011c04 	.word	0x08011c04
 8005884:	08011c24 	.word	0x08011c24
 8005888:	20003cb0 	.word	0x20003cb0

0800588c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <mem_malloc+0x14>
    return NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	e0d9      	b.n	8005a54 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	3303      	adds	r3, #3
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80058ac:	8bbb      	ldrh	r3, [r7, #28]
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	d801      	bhi.n	80058b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80058b2:	230c      	movs	r3, #12
 80058b4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80058b6:	8bbb      	ldrh	r3, [r7, #28]
 80058b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058bc:	d803      	bhi.n	80058c6 <mem_malloc+0x3a>
 80058be:	8bba      	ldrh	r2, [r7, #28]
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d201      	bcs.n	80058ca <mem_malloc+0x3e>
    return NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e0c4      	b.n	8005a54 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058ca:	4b64      	ldr	r3, [pc, #400]	; (8005a5c <mem_malloc+0x1d0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fd4a 	bl	8005368 <mem_to_ptr>
 80058d4:	4603      	mov	r3, r0
 80058d6:	83fb      	strh	r3, [r7, #30]
 80058d8:	e0b4      	b.n	8005a44 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80058da:	8bfb      	ldrh	r3, [r7, #30]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fd31 	bl	8005344 <ptr_to_mem>
 80058e2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 80a4 	bne.w	8005a36 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	8bfb      	ldrh	r3, [r7, #30]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f1a3 0208 	sub.w	r2, r3, #8
 80058fc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80058fe:	429a      	cmp	r2, r3
 8005900:	f0c0 8099 	bcc.w	8005a36 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	8bfb      	ldrh	r3, [r7, #30]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f1a3 0208 	sub.w	r2, r3, #8
 8005912:	8bbb      	ldrh	r3, [r7, #28]
 8005914:	3314      	adds	r3, #20
 8005916:	429a      	cmp	r2, r3
 8005918:	d333      	bcc.n	8005982 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800591a:	8bfa      	ldrh	r2, [r7, #30]
 800591c:	8bbb      	ldrh	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	3308      	adds	r3, #8
 8005924:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005926:	8a7b      	ldrh	r3, [r7, #18]
 8005928:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800592c:	d106      	bne.n	800593c <mem_malloc+0xb0>
 800592e:	4b4c      	ldr	r3, [pc, #304]	; (8005a60 <mem_malloc+0x1d4>)
 8005930:	f240 3287 	movw	r2, #903	; 0x387
 8005934:	494b      	ldr	r1, [pc, #300]	; (8005a64 <mem_malloc+0x1d8>)
 8005936:	484c      	ldr	r0, [pc, #304]	; (8005a68 <mem_malloc+0x1dc>)
 8005938:	f00a fc5c 	bl	80101f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800593c:	8a7b      	ldrh	r3, [r7, #18]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fd00 	bl	8005344 <ptr_to_mem>
 8005944:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8bfa      	ldrh	r2, [r7, #30]
 8005958:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	8a7a      	ldrh	r2, [r7, #18]
 800595e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2201      	movs	r2, #1
 8005964:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800596e:	d00b      	beq.n	8005988 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fce5 	bl	8005344 <ptr_to_mem>
 800597a:	4602      	mov	r2, r0
 800597c:	8a7b      	ldrh	r3, [r7, #18]
 800597e:	8053      	strh	r3, [r2, #2]
 8005980:	e002      	b.n	8005988 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2201      	movs	r2, #1
 8005986:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005988:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <mem_malloc+0x1d0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	429a      	cmp	r2, r3
 8005990:	d127      	bne.n	80059e2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <mem_malloc+0x1d0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005998:	e005      	b.n	80059a6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fcd0 	bl	8005344 <ptr_to_mem>
 80059a4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <mem_malloc+0x12c>
 80059ae:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <mem_malloc+0x1e0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1f0      	bne.n	800599a <mem_malloc+0x10e>
          }
          lfree = cur;
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <mem_malloc+0x1d0>)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059be:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <mem_malloc+0x1d0>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <mem_malloc+0x1e0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d00b      	beq.n	80059e2 <mem_malloc+0x156>
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <mem_malloc+0x1d0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	791b      	ldrb	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <mem_malloc+0x156>
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <mem_malloc+0x1d4>)
 80059d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80059da:	4925      	ldr	r1, [pc, #148]	; (8005a70 <mem_malloc+0x1e4>)
 80059dc:	4822      	ldr	r0, [pc, #136]	; (8005a68 <mem_malloc+0x1dc>)
 80059de:	f00a fc09 	bl	80101f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80059e2:	8bba      	ldrh	r2, [r7, #28]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
 80059e8:	3308      	adds	r3, #8
 80059ea:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <mem_malloc+0x1e0>)
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d906      	bls.n	8005a00 <mem_malloc+0x174>
 80059f2:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <mem_malloc+0x1d4>)
 80059f4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80059f8:	491e      	ldr	r1, [pc, #120]	; (8005a74 <mem_malloc+0x1e8>)
 80059fa:	481b      	ldr	r0, [pc, #108]	; (8005a68 <mem_malloc+0x1dc>)
 80059fc:	f00a fbfa 	bl	80101f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <mem_malloc+0x18c>
 8005a0a:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <mem_malloc+0x1d4>)
 8005a0c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005a10:	4919      	ldr	r1, [pc, #100]	; (8005a78 <mem_malloc+0x1ec>)
 8005a12:	4815      	ldr	r0, [pc, #84]	; (8005a68 <mem_malloc+0x1dc>)
 8005a14:	f00a fbee 	bl	80101f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <mem_malloc+0x1a4>
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <mem_malloc+0x1d4>)
 8005a24:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005a28:	4914      	ldr	r1, [pc, #80]	; (8005a7c <mem_malloc+0x1f0>)
 8005a2a:	480f      	ldr	r0, [pc, #60]	; (8005a68 <mem_malloc+0x1dc>)
 8005a2c:	f00a fbe2 	bl	80101f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3308      	adds	r3, #8
 8005a34:	e00e      	b.n	8005a54 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005a36:	8bfb      	ldrh	r3, [r7, #30]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fc83 	bl	8005344 <ptr_to_mem>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a44:	8bfa      	ldrh	r2, [r7, #30]
 8005a46:	8bbb      	ldrh	r3, [r7, #28]
 8005a48:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	f4ff af44 	bcc.w	80058da <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20003cb0 	.word	0x20003cb0
 8005a60:	08011a7c 	.word	0x08011a7c
 8005a64:	08011c24 	.word	0x08011c24
 8005a68:	08011ac4 	.word	0x08011ac4
 8005a6c:	20003cac 	.word	0x20003cac
 8005a70:	08011c38 	.word	0x08011c38
 8005a74:	08011c54 	.word	0x08011c54
 8005a78:	08011c84 	.word	0x08011c84
 8005a7c:	08011cb4 	.word	0x08011cb4

08005a80 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	3303      	adds	r3, #3
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e011      	b.n	8005ac6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	885b      	ldrh	r3, [r3, #2]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	dbe7      	blt.n	8005aa2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	80fb      	strh	r3, [r7, #6]
 8005aea:	e009      	b.n	8005b00 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <memp_init+0x30>)
 8005af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ffc3 	bl	8005a80 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	3301      	adds	r3, #1
 8005afe:	80fb      	strh	r3, [r7, #6]
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d9f2      	bls.n	8005aec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08014910 	.word	0x08014910

08005b14 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d012      	beq.n	8005b50 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <do_memp_malloc_pool+0x38>
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <do_memp_malloc_pool+0x48>)
 8005b40:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005b44:	4906      	ldr	r1, [pc, #24]	; (8005b60 <do_memp_malloc_pool+0x4c>)
 8005b46:	4807      	ldr	r0, [pc, #28]	; (8005b64 <do_memp_malloc_pool+0x50>)
 8005b48:	f00a fb54 	bl	80101f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e000      	b.n	8005b52 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08011cd8 	.word	0x08011cd8
 8005b60:	08011d08 	.word	0x08011d08
 8005b64:	08011d2c 	.word	0x08011d2c

08005b68 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d908      	bls.n	8005b8a <memp_malloc+0x22>
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <memp_malloc+0x3c>)
 8005b7a:	f240 1257 	movw	r2, #343	; 0x157
 8005b7e:	490a      	ldr	r1, [pc, #40]	; (8005ba8 <memp_malloc+0x40>)
 8005b80:	480a      	ldr	r0, [pc, #40]	; (8005bac <memp_malloc+0x44>)
 8005b82:	f00a fb37 	bl	80101f4 <iprintf>
 8005b86:	2300      	movs	r3, #0
 8005b88:	e008      	b.n	8005b9c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <memp_malloc+0x48>)
 8005b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ffbe 	bl	8005b14 <do_memp_malloc_pool>
 8005b98:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08011cd8 	.word	0x08011cd8
 8005ba8:	08011d68 	.word	0x08011d68
 8005bac:	08011d2c 	.word	0x08011d2c
 8005bb0:	08014910 	.word	0x08014910

08005bb4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <do_memp_free_pool+0x22>
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <do_memp_free_pool+0x40>)
 8005bca:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005bce:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <do_memp_free_pool+0x44>)
 8005bd0:	480a      	ldr	r0, [pc, #40]	; (8005bfc <do_memp_free_pool+0x48>)
 8005bd2:	f00a fb0f 	bl	80101f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	08011cd8 	.word	0x08011cd8
 8005bf8:	08011d88 	.word	0x08011d88
 8005bfc:	08011d2c 	.word	0x08011d2c

08005c00 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d907      	bls.n	8005c22 <memp_free+0x22>
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <memp_free+0x44>)
 8005c14:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005c18:	490b      	ldr	r1, [pc, #44]	; (8005c48 <memp_free+0x48>)
 8005c1a:	480c      	ldr	r0, [pc, #48]	; (8005c4c <memp_free+0x4c>)
 8005c1c:	f00a faea 	bl	80101f4 <iprintf>
 8005c20:	e00c      	b.n	8005c3c <memp_free+0x3c>

  if (mem == NULL) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <memp_free+0x50>)
 8005c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff ffbe 	bl	8005bb4 <do_memp_free_pool>
 8005c38:	e000      	b.n	8005c3c <memp_free+0x3c>
    return;
 8005c3a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08011cd8 	.word	0x08011cd8
 8005c48:	08011da8 	.word	0x08011da8
 8005c4c:	08011d2c 	.word	0x08011d2c
 8005c50:	08014910 	.word	0x08014910

08005c54 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <netif_add+0x26>
 8005c78:	4b57      	ldr	r3, [pc, #348]	; (8005dd8 <netif_add+0x174>)
 8005c7a:	f240 1227 	movw	r2, #295	; 0x127
 8005c7e:	4957      	ldr	r1, [pc, #348]	; (8005ddc <netif_add+0x178>)
 8005c80:	4857      	ldr	r0, [pc, #348]	; (8005de0 <netif_add+0x17c>)
 8005c82:	f00a fab7 	bl	80101f4 <iprintf>
 8005c86:	2300      	movs	r3, #0
 8005c88:	e0a2      	b.n	8005dd0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d108      	bne.n	8005ca2 <netif_add+0x3e>
 8005c90:	4b51      	ldr	r3, [pc, #324]	; (8005dd8 <netif_add+0x174>)
 8005c92:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005c96:	4953      	ldr	r1, [pc, #332]	; (8005de4 <netif_add+0x180>)
 8005c98:	4851      	ldr	r0, [pc, #324]	; (8005de0 <netif_add+0x17c>)
 8005c9a:	f00a faab 	bl	80101f4 <iprintf>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e096      	b.n	8005dd0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ca8:	4b4f      	ldr	r3, [pc, #316]	; (8005de8 <netif_add+0x184>)
 8005caa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005cb2:	4b4d      	ldr	r3, [pc, #308]	; (8005de8 <netif_add+0x184>)
 8005cb4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005cbc:	4b4a      	ldr	r3, [pc, #296]	; (8005de8 <netif_add+0x184>)
 8005cbe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a45      	ldr	r2, [pc, #276]	; (8005dec <netif_add+0x188>)
 8005cd6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <netif_add+0x18c>)
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d00:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f913 	bl	8005f34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	4798      	blx	r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <netif_add+0xba>
    return NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e058      	b.n	8005dd0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d24:	2bff      	cmp	r3, #255	; 0xff
 8005d26:	d103      	bne.n	8005d30 <netif_add+0xcc>
        netif->num = 0;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d34:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <netif_add+0x190>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e02b      	b.n	8005d94 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d106      	bne.n	8005d52 <netif_add+0xee>
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <netif_add+0x174>)
 8005d46:	f240 128b 	movw	r2, #395	; 0x18b
 8005d4a:	492b      	ldr	r1, [pc, #172]	; (8005df8 <netif_add+0x194>)
 8005d4c:	4824      	ldr	r0, [pc, #144]	; (8005de0 <netif_add+0x17c>)
 8005d4e:	f00a fa51 	bl	80101f4 <iprintf>
        num_netifs++;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3301      	adds	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	dd06      	ble.n	8005d6c <netif_add+0x108>
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <netif_add+0x174>)
 8005d60:	f240 128d 	movw	r2, #397	; 0x18d
 8005d64:	4925      	ldr	r1, [pc, #148]	; (8005dfc <netif_add+0x198>)
 8005d66:	481e      	ldr	r0, [pc, #120]	; (8005de0 <netif_add+0x17c>)
 8005d68:	f00a fa44 	bl	80101f4 <iprintf>
        if (netif2->num == netif->num) {
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d108      	bne.n	8005d8e <netif_add+0x12a>
          netif->num++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d82:	3301      	adds	r3, #1
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005d8c:	e005      	b.n	8005d9a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1d0      	bne.n	8005d3c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1be      	bne.n	8005d1e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005da6:	2bfe      	cmp	r3, #254	; 0xfe
 8005da8:	d103      	bne.n	8005db2 <netif_add+0x14e>
    netif_num = 0;
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <netif_add+0x18c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e006      	b.n	8005dc0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db8:	3301      	adds	r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <netif_add+0x18c>)
 8005dbe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <netif_add+0x190>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005dc8:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <netif_add+0x190>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	08011dc4 	.word	0x08011dc4
 8005ddc:	08011e58 	.word	0x08011e58
 8005de0:	08011e14 	.word	0x08011e14
 8005de4:	08011e74 	.word	0x08011e74
 8005de8:	08014974 	.word	0x08014974
 8005dec:	08006147 	.word	0x08006147
 8005df0:	20006ba8 	.word	0x20006ba8
 8005df4:	20006ba0 	.word	0x20006ba0
 8005df8:	08011e98 	.word	0x08011e98
 8005dfc:	08011eac 	.word	0x08011eac

08005e00 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 fd9d 	bl	800894c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f007 fe93 	bl	800db40 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <netif_do_set_ipaddr+0x20>
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <netif_do_set_ipaddr+0x88>)
 8005e38:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005e3c:	491c      	ldr	r1, [pc, #112]	; (8005eb0 <netif_do_set_ipaddr+0x8c>)
 8005e3e:	481d      	ldr	r0, [pc, #116]	; (8005eb4 <netif_do_set_ipaddr+0x90>)
 8005e40:	f00a f9d8 	bl	80101f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <netif_do_set_ipaddr+0x34>
 8005e4a:	4b18      	ldr	r3, [pc, #96]	; (8005eac <netif_do_set_ipaddr+0x88>)
 8005e4c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005e50:	4917      	ldr	r1, [pc, #92]	; (8005eb0 <netif_do_set_ipaddr+0x8c>)
 8005e52:	4818      	ldr	r0, [pc, #96]	; (8005eb4 <netif_do_set_ipaddr+0x90>)
 8005e54:	f00a f9ce 	bl	80101f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d01c      	beq.n	8005ea0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e76:	f107 0314 	add.w	r3, r7, #20
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ffbf 	bl	8005e00 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <netif_do_set_ipaddr+0x6a>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	e000      	b.n	8005e90 <netif_do_set_ipaddr+0x6c>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005e94:	2101      	movs	r1, #1
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f8d2 	bl	8006040 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08011dc4 	.word	0x08011dc4
 8005eb0:	08011edc 	.word	0x08011edc
 8005eb4:	08011e14 	.word	0x08011e14

08005eb8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d00a      	beq.n	8005ee8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <netif_do_set_netmask+0x26>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	e000      	b.n	8005ee0 <netif_do_set_netmask+0x28>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d00a      	beq.n	8005f26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <netif_do_set_gw+0x26>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	e000      	b.n	8005f1e <netif_do_set_gw+0x28>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <netif_set_addr+0x90>)
 8005f52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <netif_set_addr+0x90>)
 8005f5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005f64:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <netif_set_addr+0x90>)
 8005f66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <netif_set_addr+0x42>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <netif_set_addr+0x46>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <netif_set_addr+0x48>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff ff49 	bl	8005e24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff8e 	bl	8005eb8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ffa8 	bl	8005ef6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ff35 	bl	8005e24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005fba:	bf00      	nop
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08014974 	.word	0x08014974

08005fc8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005fd0:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <netif_set_default+0x1c>)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20006ba4 	.word	0x20006ba4

08005fe8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <netif_set_up+0x1e>
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <netif_set_up+0x4c>)
 8005ff8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005ffc:	490e      	ldr	r1, [pc, #56]	; (8006038 <netif_set_up+0x50>)
 8005ffe:	480f      	ldr	r0, [pc, #60]	; (800603c <netif_set_up+0x54>)
 8006000:	f00a f8f8 	bl	80101f4 <iprintf>
 8006004:	e013      	b.n	800602e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006026:	2103      	movs	r1, #3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f809 	bl	8006040 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08011dc4 	.word	0x08011dc4
 8006038:	08011f4c 	.word	0x08011f4c
 800603c:	08011e14 	.word	0x08011e14

08006040 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <netif_issue_reports+0x20>
 8006052:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <netif_issue_reports+0x74>)
 8006054:	f240 326d 	movw	r2, #877	; 0x36d
 8006058:	4917      	ldr	r1, [pc, #92]	; (80060b8 <netif_issue_reports+0x78>)
 800605a:	4818      	ldr	r0, [pc, #96]	; (80060bc <netif_issue_reports+0x7c>)
 800605c:	f00a f8ca 	bl	80101f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01e      	beq.n	80060ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006074:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d013      	beq.n	80060ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3304      	adds	r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f008 fcb5 	bl	800ea14 <etharp_request>
 80060aa:	e000      	b.n	80060ae <netif_issue_reports+0x6e>
    return;
 80060ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	08011dc4 	.word	0x08011dc4
 80060b8:	08011f68 	.word	0x08011f68
 80060bc:	08011e14 	.word	0x08011e14

080060c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d107      	bne.n	80060de <netif_set_down+0x1e>
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <netif_set_down+0x58>)
 80060d0:	f240 329b 	movw	r2, #923	; 0x39b
 80060d4:	4911      	ldr	r1, [pc, #68]	; (800611c <netif_set_down+0x5c>)
 80060d6:	4812      	ldr	r0, [pc, #72]	; (8006120 <netif_set_down+0x60>)
 80060d8:	f00a f88c 	bl	80101f4 <iprintf>
 80060dc:	e019      	b.n	8006112 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f008 f83f 	bl	800e190 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	08011dc4 	.word	0x08011dc4
 800611c:	08011f8c 	.word	0x08011f8c
 8006120:	08011e14 	.word	0x08011e14

08006124 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	61da      	str	r2, [r3, #28]
  }
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006152:	f06f 030b 	mvn.w	r3, #11
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d013      	beq.n	800619c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <netif_get_by_index+0x48>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	e00c      	b.n	8006196 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006182:	3301      	adds	r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	79fa      	ldrb	r2, [r7, #7]
 8006188:	429a      	cmp	r2, r3
 800618a:	d101      	bne.n	8006190 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	e006      	b.n	800619e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ef      	bne.n	800617c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20006ba0 	.word	0x20006ba0

080061b0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <pbuf_free_ooseq+0x38>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <pbuf_free_ooseq+0x3c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	e00a      	b.n	80061da <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 fbfb 	bl	80089c8 <tcp_free_ooseq>
      return;
 80061d2:	e005      	b.n	80061e0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f1      	bne.n	80061c4 <pbuf_free_ooseq+0x14>
    }
  }
}
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20006ba9 	.word	0x20006ba9
 80061ec:	20006bb8 	.word	0x20006bb8

080061f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061f4:	4b03      	ldr	r3, [pc, #12]	; (8006204 <pbuf_pool_is_empty+0x14>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20006ba9 	.word	0x20006ba9

08006208 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	80fb      	strh	r3, [r7, #6]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88ba      	ldrh	r2, [r7, #4]
 8006234:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006236:	8b3b      	ldrh	r3, [r7, #24]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	7f3a      	ldrb	r2, [r7, #28]
 8006242:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	73da      	strb	r2, [r3, #15]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af02      	add	r7, sp, #8
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	460b      	mov	r3, r1
 8006268:	80bb      	strh	r3, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006272:	887b      	ldrh	r3, [r7, #2]
 8006274:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006278:	d07f      	beq.n	800637a <pbuf_alloc+0x11e>
 800627a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800627e:	f300 80c8 	bgt.w	8006412 <pbuf_alloc+0x1b6>
 8006282:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006286:	d010      	beq.n	80062aa <pbuf_alloc+0x4e>
 8006288:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800628c:	f300 80c1 	bgt.w	8006412 <pbuf_alloc+0x1b6>
 8006290:	2b01      	cmp	r3, #1
 8006292:	d002      	beq.n	800629a <pbuf_alloc+0x3e>
 8006294:	2b41      	cmp	r3, #65	; 0x41
 8006296:	f040 80bc 	bne.w	8006412 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800629a:	887a      	ldrh	r2, [r7, #2]
 800629c:	88bb      	ldrh	r3, [r7, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	2000      	movs	r0, #0
 80062a2:	f000 f8d1 	bl	8006448 <pbuf_alloc_reference>
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80062a8:	e0bd      	b.n	8006426 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80062b2:	88bb      	ldrh	r3, [r7, #4]
 80062b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062b6:	2008      	movs	r0, #8
 80062b8:	f7ff fc56 	bl	8005b68 <memp_malloc>
 80062bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80062c4:	f7ff ff94 	bl	80061f0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80062ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d0:	f000 faa8 	bl	8006824 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e0a7      	b.n	8006428 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80062d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062da:	3303      	adds	r3, #3
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8b7a      	ldrh	r2, [r7, #26]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bf28      	it	cs
 80062f0:	4613      	movcs	r3, r2
 80062f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80062f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062f6:	3310      	adds	r3, #16
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	3303      	adds	r3, #3
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	4618      	mov	r0, r3
 8006304:	89f9      	ldrh	r1, [r7, #14]
 8006306:	8b7a      	ldrh	r2, [r7, #26]
 8006308:	2300      	movs	r3, #0
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	460b      	mov	r3, r1
 8006312:	4601      	mov	r1, r0
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7ff ff77 	bl	8006208 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d006      	beq.n	8006334 <pbuf_alloc+0xd8>
 8006326:	4b42      	ldr	r3, [pc, #264]	; (8006430 <pbuf_alloc+0x1d4>)
 8006328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800632c:	4941      	ldr	r1, [pc, #260]	; (8006434 <pbuf_alloc+0x1d8>)
 800632e:	4842      	ldr	r0, [pc, #264]	; (8006438 <pbuf_alloc+0x1dc>)
 8006330:	f009 ff60 	bl	80101f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006336:	3303      	adds	r3, #3
 8006338:	f023 0303 	bic.w	r3, r3, #3
 800633c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006340:	d106      	bne.n	8006350 <pbuf_alloc+0xf4>
 8006342:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <pbuf_alloc+0x1d4>)
 8006344:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006348:	493c      	ldr	r1, [pc, #240]	; (800643c <pbuf_alloc+0x1e0>)
 800634a:	483b      	ldr	r0, [pc, #236]	; (8006438 <pbuf_alloc+0x1dc>)
 800634c:	f009 ff52 	bl	80101f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
 800635a:	e002      	b.n	8006362 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006366:	8b7a      	ldrh	r2, [r7, #26]
 8006368:	89fb      	ldrh	r3, [r7, #14]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d19e      	bne.n	80062b6 <pbuf_alloc+0x5a>
      break;
 8006378:	e055      	b.n	8006426 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800637a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800637c:	3303      	adds	r3, #3
 800637e:	b29b      	uxth	r3, r3
 8006380:	f023 0303 	bic.w	r3, r3, #3
 8006384:	b29a      	uxth	r2, r3
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	3303      	adds	r3, #3
 800638a:	b29b      	uxth	r3, r3
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	b29b      	uxth	r3, r3
 8006392:	4413      	add	r3, r2
 8006394:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006396:	8b3b      	ldrh	r3, [r7, #24]
 8006398:	3310      	adds	r3, #16
 800639a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800639c:	8b3a      	ldrh	r2, [r7, #24]
 800639e:	88bb      	ldrh	r3, [r7, #4]
 80063a0:	3303      	adds	r3, #3
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d306      	bcc.n	80063b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80063aa:	8afa      	ldrh	r2, [r7, #22]
 80063ac:	88bb      	ldrh	r3, [r7, #4]
 80063ae:	3303      	adds	r3, #3
 80063b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d201      	bcs.n	80063bc <pbuf_alloc+0x160>
        return NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e035      	b.n	8006428 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063bc:	8afb      	ldrh	r3, [r7, #22]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fa64 	bl	800588c <mem_malloc>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <pbuf_alloc+0x174>
        return NULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e02b      	b.n	8006428 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063d2:	3310      	adds	r3, #16
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	4413      	add	r3, r2
 80063d8:	3303      	adds	r3, #3
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	4618      	mov	r0, r3
 80063e0:	88b9      	ldrh	r1, [r7, #4]
 80063e2:	88ba      	ldrh	r2, [r7, #4]
 80063e4:	2300      	movs	r3, #0
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	460b      	mov	r3, r1
 80063ee:	4601      	mov	r1, r0
 80063f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063f2:	f7ff ff09 	bl	8006208 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <pbuf_alloc+0x1c8>
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <pbuf_alloc+0x1d4>)
 8006404:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006408:	490d      	ldr	r1, [pc, #52]	; (8006440 <pbuf_alloc+0x1e4>)
 800640a:	480b      	ldr	r0, [pc, #44]	; (8006438 <pbuf_alloc+0x1dc>)
 800640c:	f009 fef2 	bl	80101f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006410:	e008      	b.n	8006424 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <pbuf_alloc+0x1d4>)
 8006414:	f240 1227 	movw	r2, #295	; 0x127
 8006418:	490a      	ldr	r1, [pc, #40]	; (8006444 <pbuf_alloc+0x1e8>)
 800641a:	4807      	ldr	r0, [pc, #28]	; (8006438 <pbuf_alloc+0x1dc>)
 800641c:	f009 feea 	bl	80101f4 <iprintf>
      return NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	e001      	b.n	8006428 <pbuf_alloc+0x1cc>
      break;
 8006424:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006428:	4618      	mov	r0, r3
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08011ff4 	.word	0x08011ff4
 8006434:	08012024 	.word	0x08012024
 8006438:	08012054 	.word	0x08012054
 800643c:	0801207c 	.word	0x0801207c
 8006440:	080120b0 	.word	0x080120b0
 8006444:	080120dc 	.word	0x080120dc

08006448 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
 8006454:	4613      	mov	r3, r2
 8006456:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006458:	883b      	ldrh	r3, [r7, #0]
 800645a:	2b41      	cmp	r3, #65	; 0x41
 800645c:	d009      	beq.n	8006472 <pbuf_alloc_reference+0x2a>
 800645e:	883b      	ldrh	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d006      	beq.n	8006472 <pbuf_alloc_reference+0x2a>
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <pbuf_alloc_reference+0x5c>)
 8006466:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800646a:	490f      	ldr	r1, [pc, #60]	; (80064a8 <pbuf_alloc_reference+0x60>)
 800646c:	480f      	ldr	r0, [pc, #60]	; (80064ac <pbuf_alloc_reference+0x64>)
 800646e:	f009 fec1 	bl	80101f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006472:	2007      	movs	r0, #7
 8006474:	f7ff fb78 	bl	8005b68 <memp_malloc>
 8006478:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	e00b      	b.n	800649c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006484:	8879      	ldrh	r1, [r7, #2]
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	2300      	movs	r3, #0
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	883b      	ldrh	r3, [r7, #0]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	460b      	mov	r3, r1
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff feb7 	bl	8006208 <pbuf_init_alloced_pbuf>
  return p;
 800649a:	68fb      	ldr	r3, [r7, #12]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08011ff4 	.word	0x08011ff4
 80064a8:	080120f8 	.word	0x080120f8
 80064ac:	08012054 	.word	0x08012054

080064b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	460b      	mov	r3, r1
 80064be:	81bb      	strh	r3, [r7, #12]
 80064c0:	4613      	mov	r3, r2
 80064c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064c8:	8a7b      	ldrh	r3, [r7, #18]
 80064ca:	3303      	adds	r3, #3
 80064cc:	f023 0203 	bic.w	r2, r3, #3
 80064d0:	89bb      	ldrh	r3, [r7, #12]
 80064d2:	441a      	add	r2, r3
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d901      	bls.n	80064de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	e018      	b.n	8006510 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	3303      	adds	r3, #3
 80064e8:	f023 0303 	bic.w	r3, r3, #3
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	4413      	add	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e001      	b.n	80064f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	89b9      	ldrh	r1, [r7, #12]
 80064fc:	89ba      	ldrh	r2, [r7, #12]
 80064fe:	2302      	movs	r3, #2
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	460b      	mov	r3, r1
 8006508:	6979      	ldr	r1, [r7, #20]
 800650a:	f7ff fe7d 	bl	8006208 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800650e:	687b      	ldr	r3, [r7, #4]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <pbuf_realloc+0x20>
 800652a:	4b3a      	ldr	r3, [pc, #232]	; (8006614 <pbuf_realloc+0xfc>)
 800652c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006530:	4939      	ldr	r1, [pc, #228]	; (8006618 <pbuf_realloc+0x100>)
 8006532:	483a      	ldr	r0, [pc, #232]	; (800661c <pbuf_realloc+0x104>)
 8006534:	f009 fe5e 	bl	80101f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	891b      	ldrh	r3, [r3, #8]
 800653c:	887a      	ldrh	r2, [r7, #2]
 800653e:	429a      	cmp	r2, r3
 8006540:	d263      	bcs.n	800660a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	891a      	ldrh	r2, [r3, #8]
 8006546:	887b      	ldrh	r3, [r7, #2]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800654c:	887b      	ldrh	r3, [r7, #2]
 800654e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006554:	e018      	b.n	8006588 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	895b      	ldrh	r3, [r3, #10]
 800655a:	897a      	ldrh	r2, [r7, #10]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	891a      	ldrh	r2, [r3, #8]
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <pbuf_realloc+0x70>
 800657a:	4b26      	ldr	r3, [pc, #152]	; (8006614 <pbuf_realloc+0xfc>)
 800657c:	f240 12af 	movw	r2, #431	; 0x1af
 8006580:	4927      	ldr	r1, [pc, #156]	; (8006620 <pbuf_realloc+0x108>)
 8006582:	4826      	ldr	r0, [pc, #152]	; (800661c <pbuf_realloc+0x104>)
 8006584:	f009 fe36 	bl	80101f4 <iprintf>
  while (rem_len > q->len) {
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	895b      	ldrh	r3, [r3, #10]
 800658c:	897a      	ldrh	r2, [r7, #10]
 800658e:	429a      	cmp	r2, r3
 8006590:	d8e1      	bhi.n	8006556 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	7b1b      	ldrb	r3, [r3, #12]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	2b00      	cmp	r3, #0
 800659c:	d121      	bne.n	80065e2 <pbuf_realloc+0xca>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	895b      	ldrh	r3, [r3, #10]
 80065a2:	897a      	ldrh	r2, [r7, #10]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d01c      	beq.n	80065e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	7b5b      	ldrb	r3, [r3, #13]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d116      	bne.n	80065e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	b29a      	uxth	r2, r3
 80065be:	897b      	ldrh	r3, [r7, #10]
 80065c0:	4413      	add	r3, r2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff f864 	bl	8005694 <mem_trim>
 80065cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <pbuf_realloc+0xca>
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <pbuf_realloc+0xfc>)
 80065d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80065da:	4912      	ldr	r1, [pc, #72]	; (8006624 <pbuf_realloc+0x10c>)
 80065dc:	480f      	ldr	r0, [pc, #60]	; (800661c <pbuf_realloc+0x104>)
 80065de:	f009 fe09 	bl	80101f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	897a      	ldrh	r2, [r7, #10]
 80065e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	895a      	ldrh	r2, [r3, #10]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f911 	bl	8006824 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e000      	b.n	800660c <pbuf_realloc+0xf4>
    return;
 800660a:	bf00      	nop

}
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	08011ff4 	.word	0x08011ff4
 8006618:	0801210c 	.word	0x0801210c
 800661c:	08012054 	.word	0x08012054
 8006620:	08012124 	.word	0x08012124
 8006624:	0801213c 	.word	0x0801213c

08006628 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <pbuf_add_header_impl+0x22>
 800663c:	4b2b      	ldr	r3, [pc, #172]	; (80066ec <pbuf_add_header_impl+0xc4>)
 800663e:	f240 12df 	movw	r2, #479	; 0x1df
 8006642:	492b      	ldr	r1, [pc, #172]	; (80066f0 <pbuf_add_header_impl+0xc8>)
 8006644:	482b      	ldr	r0, [pc, #172]	; (80066f4 <pbuf_add_header_impl+0xcc>)
 8006646:	f009 fdd5 	bl	80101f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <pbuf_add_header_impl+0x30>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d301      	bcc.n	800665c <pbuf_add_header_impl+0x34>
    return 1;
 8006658:	2301      	movs	r3, #1
 800665a:	e043      	b.n	80066e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <pbuf_add_header_impl+0x3e>
    return 0;
 8006662:	2300      	movs	r3, #0
 8006664:	e03e      	b.n	80066e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	891a      	ldrh	r2, [r3, #8]
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	4413      	add	r3, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	8a7a      	ldrh	r2, [r7, #18]
 8006676:	429a      	cmp	r2, r3
 8006678:	d901      	bls.n	800667e <pbuf_add_header_impl+0x56>
    return 1;
 800667a:	2301      	movs	r3, #1
 800667c:	e032      	b.n	80066e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	7b1b      	ldrb	r3, [r3, #12]
 8006682:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006684:	8a3b      	ldrh	r3, [r7, #16]
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	425b      	negs	r3, r3
 8006696:	4413      	add	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3310      	adds	r3, #16
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d20d      	bcs.n	80066c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e01d      	b.n	80066e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	425b      	negs	r3, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e001      	b.n	80066c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066bc:	2301      	movs	r3, #1
 80066be:	e011      	b.n	80066e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	895a      	ldrh	r2, [r3, #10]
 80066ca:	8a7b      	ldrh	r3, [r7, #18]
 80066cc:	4413      	add	r3, r2
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	891a      	ldrh	r2, [r3, #8]
 80066d8:	8a7b      	ldrh	r3, [r7, #18]
 80066da:	4413      	add	r3, r2
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08011ff4 	.word	0x08011ff4
 80066f0:	08012158 	.word	0x08012158
 80066f4:	08012054 	.word	0x08012054

080066f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006702:	2200      	movs	r2, #0
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ff8e 	bl	8006628 <pbuf_add_header_impl>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <pbuf_remove_header+0x1e>
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <pbuf_remove_header+0x94>)
 800672a:	f240 224b 	movw	r2, #587	; 0x24b
 800672e:	4920      	ldr	r1, [pc, #128]	; (80067b0 <pbuf_remove_header+0x98>)
 8006730:	4820      	ldr	r0, [pc, #128]	; (80067b4 <pbuf_remove_header+0x9c>)
 8006732:	f009 fd5f 	bl	80101f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <pbuf_remove_header+0x2c>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006742:	d301      	bcc.n	8006748 <pbuf_remove_header+0x30>
    return 1;
 8006744:	2301      	movs	r3, #1
 8006746:	e02c      	b.n	80067a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <pbuf_remove_header+0x3a>
    return 0;
 800674e:	2300      	movs	r3, #0
 8006750:	e027      	b.n	80067a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	895b      	ldrh	r3, [r3, #10]
 800675a:	89fa      	ldrh	r2, [r7, #14]
 800675c:	429a      	cmp	r2, r3
 800675e:	d908      	bls.n	8006772 <pbuf_remove_header+0x5a>
 8006760:	4b12      	ldr	r3, [pc, #72]	; (80067ac <pbuf_remove_header+0x94>)
 8006762:	f240 2255 	movw	r2, #597	; 0x255
 8006766:	4914      	ldr	r1, [pc, #80]	; (80067b8 <pbuf_remove_header+0xa0>)
 8006768:	4812      	ldr	r0, [pc, #72]	; (80067b4 <pbuf_remove_header+0x9c>)
 800676a:	f009 fd43 	bl	80101f4 <iprintf>
 800676e:	2301      	movs	r3, #1
 8006770:	e017      	b.n	80067a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	895a      	ldrh	r2, [r3, #10]
 8006788:	89fb      	ldrh	r3, [r7, #14]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	891a      	ldrh	r2, [r3, #8]
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	08011ff4 	.word	0x08011ff4
 80067b0:	08012158 	.word	0x08012158
 80067b4:	08012054 	.word	0x08012054
 80067b8:	08012164 	.word	0x08012164

080067bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
 80067c8:	4613      	mov	r3, r2
 80067ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da08      	bge.n	80067e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067d8:	425b      	negs	r3, r3
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff9b 	bl	8006718 <pbuf_remove_header>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e007      	b.n	80067f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80067e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067ea:	787a      	ldrb	r2, [r7, #1]
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ff1a 	bl	8006628 <pbuf_add_header_impl>
 80067f4:	4603      	mov	r3, r0
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800680a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800680e:	2201      	movs	r2, #1
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff ffd2 	bl	80067bc <pbuf_header_impl>
 8006818:	4603      	mov	r3, r0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <pbuf_free+0x22>
 8006838:	4b38      	ldr	r3, [pc, #224]	; (800691c <pbuf_free+0xf8>)
 800683a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800683e:	4938      	ldr	r1, [pc, #224]	; (8006920 <pbuf_free+0xfc>)
 8006840:	4838      	ldr	r0, [pc, #224]	; (8006924 <pbuf_free+0x100>)
 8006842:	f009 fcd7 	bl	80101f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006846:	2300      	movs	r3, #0
 8006848:	e063      	b.n	8006912 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800684e:	e05c      	b.n	800690a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7b9b      	ldrb	r3, [r3, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <pbuf_free+0x42>
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <pbuf_free+0xf8>)
 800685a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800685e:	4932      	ldr	r1, [pc, #200]	; (8006928 <pbuf_free+0x104>)
 8006860:	4830      	ldr	r0, [pc, #192]	; (8006924 <pbuf_free+0x100>)
 8006862:	f009 fcc7 	bl	80101f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7b9b      	ldrb	r3, [r3, #14]
 800686a:	3b01      	subs	r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	739a      	strb	r2, [r3, #14]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7b9b      	ldrb	r3, [r3, #14]
 8006876:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006878:	7dbb      	ldrb	r3, [r7, #22]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d143      	bne.n	8006906 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7b1b      	ldrb	r3, [r3, #12]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d011      	beq.n	80068be <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <pbuf_free+0x90>
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <pbuf_free+0xf8>)
 80068a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80068ac:	491f      	ldr	r1, [pc, #124]	; (800692c <pbuf_free+0x108>)
 80068ae:	481d      	ldr	r0, [pc, #116]	; (8006924 <pbuf_free+0x100>)
 80068b0:	f009 fca0 	bl	80101f4 <iprintf>
        pc->custom_free_function(p);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
 80068bc:	e01d      	b.n	80068fa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d104      	bne.n	80068ce <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	2008      	movs	r0, #8
 80068c8:	f7ff f99a 	bl	8005c00 <memp_free>
 80068cc:	e015      	b.n	80068fa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d104      	bne.n	80068de <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	2007      	movs	r0, #7
 80068d8:	f7ff f992 	bl	8005c00 <memp_free>
 80068dc:	e00d      	b.n	80068fa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <pbuf_free+0xc8>
          mem_free(p);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fe fe6b 	bl	80055c0 <mem_free>
 80068ea:	e006      	b.n	80068fa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <pbuf_free+0xf8>)
 80068ee:	f240 320f 	movw	r2, #783	; 0x30f
 80068f2:	490f      	ldr	r1, [pc, #60]	; (8006930 <pbuf_free+0x10c>)
 80068f4:	480b      	ldr	r0, [pc, #44]	; (8006924 <pbuf_free+0x100>)
 80068f6:	f009 fc7d 	bl	80101f4 <iprintf>
        }
      }
      count++;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	3301      	adds	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	e001      	b.n	800690a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d19f      	bne.n	8006850 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	08011ff4 	.word	0x08011ff4
 8006920:	08012158 	.word	0x08012158
 8006924:	08012054 	.word	0x08012054
 8006928:	08012184 	.word	0x08012184
 800692c:	0801219c 	.word	0x0801219c
 8006930:	080121c0 	.word	0x080121c0

08006934 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006940:	e005      	b.n	800694e <pbuf_clen+0x1a>
    ++len;
 8006942:	89fb      	ldrh	r3, [r7, #14]
 8006944:	3301      	adds	r3, #1
 8006946:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f6      	bne.n	8006942 <pbuf_clen+0xe>
  }
  return len;
 8006954:	89fb      	ldrh	r3, [r7, #14]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7b9b      	ldrb	r3, [r3, #14]
 8006976:	3301      	adds	r3, #1
 8006978:	b2da      	uxtb	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	7b9b      	ldrb	r3, [r3, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <pbuf_ref+0x30>
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <pbuf_ref+0x38>)
 8006988:	f240 3242 	movw	r2, #834	; 0x342
 800698c:	4904      	ldr	r1, [pc, #16]	; (80069a0 <pbuf_ref+0x3c>)
 800698e:	4805      	ldr	r0, [pc, #20]	; (80069a4 <pbuf_ref+0x40>)
 8006990:	f009 fc30 	bl	80101f4 <iprintf>
  }
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08011ff4 	.word	0x08011ff4
 80069a0:	080121d4 	.word	0x080121d4
 80069a4:	08012054 	.word	0x08012054

080069a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <pbuf_cat+0x16>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d107      	bne.n	80069ce <pbuf_cat+0x26>
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <pbuf_cat+0x98>)
 80069c0:	f240 3259 	movw	r2, #857	; 0x359
 80069c4:	491f      	ldr	r1, [pc, #124]	; (8006a44 <pbuf_cat+0x9c>)
 80069c6:	4820      	ldr	r0, [pc, #128]	; (8006a48 <pbuf_cat+0xa0>)
 80069c8:	f009 fc14 	bl	80101f4 <iprintf>
 80069cc:	e034      	b.n	8006a38 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e00a      	b.n	80069ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	891a      	ldrh	r2, [r3, #8]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	891b      	ldrh	r3, [r3, #8]
 80069dc:	4413      	add	r3, r2
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	891a      	ldrh	r2, [r3, #8]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	895b      	ldrh	r3, [r3, #10]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d006      	beq.n	8006a0c <pbuf_cat+0x64>
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <pbuf_cat+0x98>)
 8006a00:	f240 3262 	movw	r2, #866	; 0x362
 8006a04:	4911      	ldr	r1, [pc, #68]	; (8006a4c <pbuf_cat+0xa4>)
 8006a06:	4810      	ldr	r0, [pc, #64]	; (8006a48 <pbuf_cat+0xa0>)
 8006a08:	f009 fbf4 	bl	80101f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <pbuf_cat+0x7a>
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <pbuf_cat+0x98>)
 8006a16:	f240 3263 	movw	r2, #867	; 0x363
 8006a1a:	490d      	ldr	r1, [pc, #52]	; (8006a50 <pbuf_cat+0xa8>)
 8006a1c:	480a      	ldr	r0, [pc, #40]	; (8006a48 <pbuf_cat+0xa0>)
 8006a1e:	f009 fbe9 	bl	80101f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	891a      	ldrh	r2, [r3, #8]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	891b      	ldrh	r3, [r3, #8]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	08011ff4 	.word	0x08011ff4
 8006a44:	080121e8 	.word	0x080121e8
 8006a48:	08012054 	.word	0x08012054
 8006a4c:	08012220 	.word	0x08012220
 8006a50:	08012250 	.word	0x08012250

08006a54 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ffa1 	bl	80069a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006a66:	6838      	ldr	r0, [r7, #0]
 8006a68:	f7ff ff7c 	bl	8006964 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <pbuf_copy+0x2a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <pbuf_copy+0x2a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	891a      	ldrh	r2, [r3, #8]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	891b      	ldrh	r3, [r3, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d209      	bcs.n	8006ab2 <pbuf_copy+0x3e>
 8006a9e:	4b57      	ldr	r3, [pc, #348]	; (8006bfc <pbuf_copy+0x188>)
 8006aa0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006aa4:	4956      	ldr	r1, [pc, #344]	; (8006c00 <pbuf_copy+0x18c>)
 8006aa6:	4857      	ldr	r0, [pc, #348]	; (8006c04 <pbuf_copy+0x190>)
 8006aa8:	f009 fba4 	bl	80101f4 <iprintf>
 8006aac:	f06f 030f 	mvn.w	r3, #15
 8006ab0:	e09f      	b.n	8006bf2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	895b      	ldrh	r3, [r3, #10]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	895b      	ldrh	r3, [r3, #10]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1acb      	subs	r3, r1, r3
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d306      	bcc.n	8006ad8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	895b      	ldrh	r3, [r3, #10]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e005      	b.n	8006ae4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	895b      	ldrh	r3, [r3, #10]
 8006adc:	461a      	mov	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	18d0      	adds	r0, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4619      	mov	r1, r3
 8006af8:	f009 fb4c 	bl	8010194 <memcpy>
    offset_to += len;
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	461a      	mov	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d906      	bls.n	8006b26 <pbuf_copy+0xb2>
 8006b18:	4b38      	ldr	r3, [pc, #224]	; (8006bfc <pbuf_copy+0x188>)
 8006b1a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b1e:	493a      	ldr	r1, [pc, #232]	; (8006c08 <pbuf_copy+0x194>)
 8006b20:	4838      	ldr	r0, [pc, #224]	; (8006c04 <pbuf_copy+0x190>)
 8006b22:	f009 fb67 	bl	80101f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	895b      	ldrh	r3, [r3, #10]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d906      	bls.n	8006b40 <pbuf_copy+0xcc>
 8006b32:	4b32      	ldr	r3, [pc, #200]	; (8006bfc <pbuf_copy+0x188>)
 8006b34:	f240 32da 	movw	r2, #986	; 0x3da
 8006b38:	4934      	ldr	r1, [pc, #208]	; (8006c0c <pbuf_copy+0x198>)
 8006b3a:	4832      	ldr	r0, [pc, #200]	; (8006c04 <pbuf_copy+0x190>)
 8006b3c:	f009 fb5a 	bl	80101f4 <iprintf>
    if (offset_from >= p_from->len) {
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	895b      	ldrh	r3, [r3, #10]
 8006b44:	461a      	mov	r2, r3
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d304      	bcc.n	8006b56 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	895b      	ldrh	r3, [r3, #10]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d114      	bne.n	8006b8c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <pbuf_copy+0x118>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <pbuf_copy+0x118>
 8006b78:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <pbuf_copy+0x188>)
 8006b7a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b7e:	4924      	ldr	r1, [pc, #144]	; (8006c10 <pbuf_copy+0x19c>)
 8006b80:	4820      	ldr	r0, [pc, #128]	; (8006c04 <pbuf_copy+0x190>)
 8006b82:	f009 fb37 	bl	80101f4 <iprintf>
 8006b86:	f06f 030f 	mvn.w	r3, #15
 8006b8a:	e032      	b.n	8006bf2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d013      	beq.n	8006bba <pbuf_copy+0x146>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	895a      	ldrh	r2, [r3, #10]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	891b      	ldrh	r3, [r3, #8]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d10d      	bne.n	8006bba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <pbuf_copy+0x146>
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <pbuf_copy+0x188>)
 8006ba8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006bac:	4919      	ldr	r1, [pc, #100]	; (8006c14 <pbuf_copy+0x1a0>)
 8006bae:	4815      	ldr	r0, [pc, #84]	; (8006c04 <pbuf_copy+0x190>)
 8006bb0:	f009 fb20 	bl	80101f4 <iprintf>
 8006bb4:	f06f 0305 	mvn.w	r3, #5
 8006bb8:	e01b      	b.n	8006bf2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d013      	beq.n	8006be8 <pbuf_copy+0x174>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	895a      	ldrh	r2, [r3, #10]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	891b      	ldrh	r3, [r3, #8]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d10d      	bne.n	8006be8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <pbuf_copy+0x174>
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <pbuf_copy+0x188>)
 8006bd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006bda:	490e      	ldr	r1, [pc, #56]	; (8006c14 <pbuf_copy+0x1a0>)
 8006bdc:	4809      	ldr	r0, [pc, #36]	; (8006c04 <pbuf_copy+0x190>)
 8006bde:	f009 fb09 	bl	80101f4 <iprintf>
 8006be2:	f06f 0305 	mvn.w	r3, #5
 8006be6:	e004      	b.n	8006bf2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f47f af61 	bne.w	8006ab2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08011ff4 	.word	0x08011ff4
 8006c00:	0801229c 	.word	0x0801229c
 8006c04:	08012054 	.word	0x08012054
 8006c08:	080122cc 	.word	0x080122cc
 8006c0c:	080122e4 	.word	0x080122e4
 8006c10:	08012300 	.word	0x08012300
 8006c14:	08012310 	.word	0x08012310

08006c18 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4611      	mov	r1, r2
 8006c24:	461a      	mov	r2, r3
 8006c26:	460b      	mov	r3, r1
 8006c28:	80fb      	strh	r3, [r7, #6]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d108      	bne.n	8006c4e <pbuf_copy_partial+0x36>
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <pbuf_copy_partial+0xd4>)
 8006c3e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c42:	492b      	ldr	r1, [pc, #172]	; (8006cf0 <pbuf_copy_partial+0xd8>)
 8006c44:	482b      	ldr	r0, [pc, #172]	; (8006cf4 <pbuf_copy_partial+0xdc>)
 8006c46:	f009 fad5 	bl	80101f4 <iprintf>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e04a      	b.n	8006ce4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d108      	bne.n	8006c66 <pbuf_copy_partial+0x4e>
 8006c54:	4b25      	ldr	r3, [pc, #148]	; (8006cec <pbuf_copy_partial+0xd4>)
 8006c56:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c5a:	4927      	ldr	r1, [pc, #156]	; (8006cf8 <pbuf_copy_partial+0xe0>)
 8006c5c:	4825      	ldr	r0, [pc, #148]	; (8006cf4 <pbuf_copy_partial+0xdc>)
 8006c5e:	f009 fac9 	bl	80101f4 <iprintf>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e03e      	b.n	8006ce4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	61fb      	str	r3, [r7, #28]
 8006c6a:	e034      	b.n	8006cd6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c6c:	88bb      	ldrh	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <pbuf_copy_partial+0x70>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	895b      	ldrh	r3, [r3, #10]
 8006c76:	88ba      	ldrh	r2, [r7, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d305      	bcc.n	8006c88 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	895b      	ldrh	r3, [r3, #10]
 8006c80:	88ba      	ldrh	r2, [r7, #4]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	80bb      	strh	r3, [r7, #4]
 8006c86:	e023      	b.n	8006cd0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	895a      	ldrh	r2, [r3, #10]
 8006c8c:	88bb      	ldrh	r3, [r7, #4]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c92:	8b3a      	ldrh	r2, [r7, #24]
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d901      	bls.n	8006c9e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	18d0      	adds	r0, r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	88bb      	ldrh	r3, [r7, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	8b3a      	ldrh	r2, [r7, #24]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f009 fa70 	bl	8010194 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006cb4:	8afa      	ldrh	r2, [r7, #22]
 8006cb6:	8b3b      	ldrh	r3, [r7, #24]
 8006cb8:	4413      	add	r3, r2
 8006cba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006cbc:	8b7a      	ldrh	r2, [r7, #26]
 8006cbe:	8b3b      	ldrh	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	8b3b      	ldrh	r3, [r7, #24]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <pbuf_copy_partial+0xca>
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1c4      	bne.n	8006c6c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006ce2:	8afb      	ldrh	r3, [r7, #22]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	08011ff4 	.word	0x08011ff4
 8006cf0:	0801233c 	.word	0x0801233c
 8006cf4:	08012054 	.word	0x08012054
 8006cf8:	0801235c 	.word	0x0801235c

08006cfc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	603a      	str	r2, [r7, #0]
 8006d06:	71fb      	strb	r3, [r7, #7]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	8919      	ldrh	r1, [r3, #8]
 8006d10:	88ba      	ldrh	r2, [r7, #4]
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff faa1 	bl	800625c <pbuf_alloc>
 8006d1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <pbuf_clone+0x2a>
    return NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e011      	b.n	8006d4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fea3 	bl	8006a74 <pbuf_copy>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d006      	beq.n	8006d48 <pbuf_clone+0x4c>
 8006d3a:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <pbuf_clone+0x58>)
 8006d3c:	f240 5224 	movw	r2, #1316	; 0x524
 8006d40:	4905      	ldr	r1, [pc, #20]	; (8006d58 <pbuf_clone+0x5c>)
 8006d42:	4806      	ldr	r0, [pc, #24]	; (8006d5c <pbuf_clone+0x60>)
 8006d44:	f009 fa56 	bl	80101f4 <iprintf>
  return q;
 8006d48:	68fb      	ldr	r3, [r7, #12]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	08011ff4 	.word	0x08011ff4
 8006d58:	08012468 	.word	0x08012468
 8006d5c:	08012054 	.word	0x08012054

08006d60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d64:	f009 fa5e 	bl	8010224 <rand>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <tcp_init+0x20>)
 8006d7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d7c:	bf00      	nop
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000012 	.word	0x20000012

08006d84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7d1b      	ldrb	r3, [r3, #20]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d105      	bne.n	8006da0 <tcp_free+0x1c>
 8006d94:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <tcp_free+0x2c>)
 8006d96:	22d4      	movs	r2, #212	; 0xd4
 8006d98:	4906      	ldr	r1, [pc, #24]	; (8006db4 <tcp_free+0x30>)
 8006d9a:	4807      	ldr	r0, [pc, #28]	; (8006db8 <tcp_free+0x34>)
 8006d9c:	f009 fa2a 	bl	80101f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	2001      	movs	r0, #1
 8006da4:	f7fe ff2c 	bl	8005c00 <memp_free>
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	080124f4 	.word	0x080124f4
 8006db4:	08012524 	.word	0x08012524
 8006db8:	08012538 	.word	0x08012538

08006dbc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7d1b      	ldrb	r3, [r3, #20]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d105      	bne.n	8006dd8 <tcp_free_listen+0x1c>
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <tcp_free_listen+0x2c>)
 8006dce:	22df      	movs	r2, #223	; 0xdf
 8006dd0:	4906      	ldr	r1, [pc, #24]	; (8006dec <tcp_free_listen+0x30>)
 8006dd2:	4807      	ldr	r0, [pc, #28]	; (8006df0 <tcp_free_listen+0x34>)
 8006dd4:	f009 fa0e 	bl	80101f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	2002      	movs	r0, #2
 8006ddc:	f7fe ff10 	bl	8005c00 <memp_free>
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	080124f4 	.word	0x080124f4
 8006dec:	08012560 	.word	0x08012560
 8006df0:	08012538 	.word	0x08012538

08006df4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006df8:	f001 f85c 	bl	8007eb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006dfc:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <tcp_tmr+0x28>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <tcp_tmr+0x28>)
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <tcp_tmr+0x28>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e14:	f000 fd0e 	bl	8007834 <tcp_slowtmr>
  }
}
 8006e18:	bf00      	nop
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20006bc1 	.word	0x20006bc1

08006e20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <tcp_remove_listener+0x1c>
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <tcp_remove_listener+0x48>)
 8006e32:	22ff      	movs	r2, #255	; 0xff
 8006e34:	490d      	ldr	r1, [pc, #52]	; (8006e6c <tcp_remove_listener+0x4c>)
 8006e36:	480e      	ldr	r0, [pc, #56]	; (8006e70 <tcp_remove_listener+0x50>)
 8006e38:	f009 f9dc 	bl	80101f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e00a      	b.n	8006e58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d102      	bne.n	8006e52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f1      	bne.n	8006e42 <tcp_remove_listener+0x22>
    }
  }
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	080124f4 	.word	0x080124f4
 8006e6c:	0801257c 	.word	0x0801257c
 8006e70:	08012538 	.word	0x08012538

08006e74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <tcp_listen_closed+0x1c>
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <tcp_listen_closed+0x60>)
 8006e84:	f240 1211 	movw	r2, #273	; 0x111
 8006e88:	4913      	ldr	r1, [pc, #76]	; (8006ed8 <tcp_listen_closed+0x64>)
 8006e8a:	4814      	ldr	r0, [pc, #80]	; (8006edc <tcp_listen_closed+0x68>)
 8006e8c:	f009 f9b2 	bl	80101f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7d1b      	ldrb	r3, [r3, #20]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d006      	beq.n	8006ea6 <tcp_listen_closed+0x32>
 8006e98:	4b0e      	ldr	r3, [pc, #56]	; (8006ed4 <tcp_listen_closed+0x60>)
 8006e9a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e9e:	4910      	ldr	r1, [pc, #64]	; (8006ee0 <tcp_listen_closed+0x6c>)
 8006ea0:	480e      	ldr	r0, [pc, #56]	; (8006edc <tcp_listen_closed+0x68>)
 8006ea2:	f009 f9a7 	bl	80101f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e00b      	b.n	8006ec4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006eac:	4a0d      	ldr	r2, [pc, #52]	; (8006ee4 <tcp_listen_closed+0x70>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ffb1 	bl	8006e20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d9f0      	bls.n	8006eac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	080124f4 	.word	0x080124f4
 8006ed8:	080125a4 	.word	0x080125a4
 8006edc:	08012538 	.word	0x08012538
 8006ee0:	080125b0 	.word	0x080125b0
 8006ee4:	0801494c 	.word	0x0801494c

08006ee8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ee8:	b5b0      	push	{r4, r5, r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <tcp_close_shutdown+0x20>
 8006efa:	4b63      	ldr	r3, [pc, #396]	; (8007088 <tcp_close_shutdown+0x1a0>)
 8006efc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006f00:	4962      	ldr	r1, [pc, #392]	; (800708c <tcp_close_shutdown+0x1a4>)
 8006f02:	4863      	ldr	r0, [pc, #396]	; (8007090 <tcp_close_shutdown+0x1a8>)
 8006f04:	f009 f976 	bl	80101f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d066      	beq.n	8006fdc <tcp_close_shutdown+0xf4>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7d1b      	ldrb	r3, [r3, #20]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d003      	beq.n	8006f1e <tcp_close_shutdown+0x36>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7d1b      	ldrb	r3, [r3, #20]
 8006f1a:	2b07      	cmp	r3, #7
 8006f1c:	d15e      	bne.n	8006fdc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <tcp_close_shutdown+0x48>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f2e:	d055      	beq.n	8006fdc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8b5b      	ldrh	r3, [r3, #26]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <tcp_close_shutdown+0x62>
 8006f3c:	4b52      	ldr	r3, [pc, #328]	; (8007088 <tcp_close_shutdown+0x1a0>)
 8006f3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f42:	4954      	ldr	r1, [pc, #336]	; (8007094 <tcp_close_shutdown+0x1ac>)
 8006f44:	4852      	ldr	r0, [pc, #328]	; (8007090 <tcp_close_shutdown+0x1a8>)
 8006f46:	f009 f955 	bl	80101f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f52:	687d      	ldr	r5, [r7, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	8ad2      	ldrh	r2, [r2, #22]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	8b09      	ldrh	r1, [r1, #24]
 8006f60:	9102      	str	r1, [sp, #8]
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	462b      	mov	r3, r5
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f005 fd97 	bl	800caa0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 fb74 	bl	8008660 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f78:	4b47      	ldr	r3, [pc, #284]	; (8007098 <tcp_close_shutdown+0x1b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d105      	bne.n	8006f8e <tcp_close_shutdown+0xa6>
 8006f82:	4b45      	ldr	r3, [pc, #276]	; (8007098 <tcp_close_shutdown+0x1b0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4a43      	ldr	r2, [pc, #268]	; (8007098 <tcp_close_shutdown+0x1b0>)
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e013      	b.n	8006fb6 <tcp_close_shutdown+0xce>
 8006f8e:	4b42      	ldr	r3, [pc, #264]	; (8007098 <tcp_close_shutdown+0x1b0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e00c      	b.n	8006fb0 <tcp_close_shutdown+0xc8>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d104      	bne.n	8006faa <tcp_close_shutdown+0xc2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	60da      	str	r2, [r3, #12]
 8006fa8:	e005      	b.n	8006fb6 <tcp_close_shutdown+0xce>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ef      	bne.n	8006f96 <tcp_close_shutdown+0xae>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	60da      	str	r2, [r3, #12]
 8006fbc:	4b37      	ldr	r3, [pc, #220]	; (800709c <tcp_close_shutdown+0x1b4>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006fc2:	4b37      	ldr	r3, [pc, #220]	; (80070a0 <tcp_close_shutdown+0x1b8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d102      	bne.n	8006fd2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fcc:	f004 f80c 	bl	800afe8 <tcp_trigger_input_pcb_close>
 8006fd0:	e002      	b.n	8006fd8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fed6 	bl	8006d84 <tcp_free>
      }
      return ERR_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e050      	b.n	800707e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7d1b      	ldrb	r3, [r3, #20]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d03b      	beq.n	800705c <tcp_close_shutdown+0x174>
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	dc44      	bgt.n	8007072 <tcp_close_shutdown+0x18a>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <tcp_close_shutdown+0x10a>
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d02a      	beq.n	8007046 <tcp_close_shutdown+0x15e>
 8006ff0:	e03f      	b.n	8007072 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8adb      	ldrh	r3, [r3, #22]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d021      	beq.n	800703e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ffa:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <tcp_close_shutdown+0x1bc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d105      	bne.n	8007010 <tcp_close_shutdown+0x128>
 8007004:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <tcp_close_shutdown+0x1bc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	4a26      	ldr	r2, [pc, #152]	; (80070a4 <tcp_close_shutdown+0x1bc>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e013      	b.n	8007038 <tcp_close_shutdown+0x150>
 8007010:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <tcp_close_shutdown+0x1bc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60bb      	str	r3, [r7, #8]
 8007016:	e00c      	b.n	8007032 <tcp_close_shutdown+0x14a>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d104      	bne.n	800702c <tcp_close_shutdown+0x144>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	e005      	b.n	8007038 <tcp_close_shutdown+0x150>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ef      	bne.n	8007018 <tcp_close_shutdown+0x130>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fea0 	bl	8006d84 <tcp_free>
      break;
 8007044:	e01a      	b.n	800707c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff ff14 	bl	8006e74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4816      	ldr	r0, [pc, #88]	; (80070a8 <tcp_close_shutdown+0x1c0>)
 8007050:	f001 fb56 	bl	8008700 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff feb1 	bl	8006dbc <tcp_free_listen>
      break;
 800705a:	e00f      	b.n	800707c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	480e      	ldr	r0, [pc, #56]	; (8007098 <tcp_close_shutdown+0x1b0>)
 8007060:	f001 fb4e 	bl	8008700 <tcp_pcb_remove>
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <tcp_close_shutdown+0x1b4>)
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fe8a 	bl	8006d84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007070:	e004      	b.n	800707c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f81a 	bl	80070ac <tcp_close_shutdown_fin>
 8007078:	4603      	mov	r3, r0
 800707a:	e000      	b.n	800707e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bdb0      	pop	{r4, r5, r7, pc}
 8007086:	bf00      	nop
 8007088:	080124f4 	.word	0x080124f4
 800708c:	080125c8 	.word	0x080125c8
 8007090:	08012538 	.word	0x08012538
 8007094:	080125e8 	.word	0x080125e8
 8007098:	20006bb8 	.word	0x20006bb8
 800709c:	20006bc0 	.word	0x20006bc0
 80070a0:	20006bf8 	.word	0x20006bf8
 80070a4:	20006bb0 	.word	0x20006bb0
 80070a8:	20006bb4 	.word	0x20006bb4

080070ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <tcp_close_shutdown_fin+0x1c>
 80070ba:	4b2e      	ldr	r3, [pc, #184]	; (8007174 <tcp_close_shutdown_fin+0xc8>)
 80070bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80070c0:	492d      	ldr	r1, [pc, #180]	; (8007178 <tcp_close_shutdown_fin+0xcc>)
 80070c2:	482e      	ldr	r0, [pc, #184]	; (800717c <tcp_close_shutdown_fin+0xd0>)
 80070c4:	f009 f896 	bl	80101f4 <iprintf>

  switch (pcb->state) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7d1b      	ldrb	r3, [r3, #20]
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d020      	beq.n	8007112 <tcp_close_shutdown_fin+0x66>
 80070d0:	2b07      	cmp	r3, #7
 80070d2:	dc2b      	bgt.n	800712c <tcp_close_shutdown_fin+0x80>
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d002      	beq.n	80070de <tcp_close_shutdown_fin+0x32>
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d00d      	beq.n	80070f8 <tcp_close_shutdown_fin+0x4c>
 80070dc:	e026      	b.n	800712c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f004 fdec 	bl	800bcbc <tcp_send_fin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11f      	bne.n	8007130 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2205      	movs	r2, #5
 80070f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070f6:	e01b      	b.n	8007130 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f004 fddf 	bl	800bcbc <tcp_send_fin>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d114      	bne.n	8007134 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2205      	movs	r2, #5
 800710e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007110:	e010      	b.n	8007134 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f004 fdd2 	bl	800bcbc <tcp_send_fin>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800711c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2209      	movs	r2, #9
 8007128:	751a      	strb	r2, [r3, #20]
      }
      break;
 800712a:	e005      	b.n	8007138 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e01c      	b.n	800716a <tcp_close_shutdown_fin+0xbe>
      break;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <tcp_close_shutdown_fin+0x8e>
      break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <tcp_close_shutdown_fin+0x8e>
      break;
 8007138:	bf00      	nop
  }

  if (err == ERR_OK) {
 800713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f004 fef8 	bl	800bf38 <tcp_output>
 8007148:	e00d      	b.n	8007166 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800714a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d108      	bne.n	8007166 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	8b5b      	ldrh	r3, [r3, #26]
 8007158:	f043 0308 	orr.w	r3, r3, #8
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e001      	b.n	800716a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	080124f4 	.word	0x080124f4
 8007178:	080125a4 	.word	0x080125a4
 800717c:	08012538 	.word	0x08012538

08007180 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <tcp_close+0x22>
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <tcp_close+0x4c>)
 8007190:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007194:	490e      	ldr	r1, [pc, #56]	; (80071d0 <tcp_close+0x50>)
 8007196:	480f      	ldr	r0, [pc, #60]	; (80071d4 <tcp_close+0x54>)
 8007198:	f009 f82c 	bl	80101f4 <iprintf>
 800719c:	f06f 030f 	mvn.w	r3, #15
 80071a0:	e00f      	b.n	80071c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7d1b      	ldrb	r3, [r3, #20]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d006      	beq.n	80071b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8b5b      	ldrh	r3, [r3, #26]
 80071ae:	f043 0310 	orr.w	r3, r3, #16
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071b8:	2101      	movs	r1, #1
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fe94 	bl	8006ee8 <tcp_close_shutdown>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	080124f4 	.word	0x080124f4
 80071d0:	08012604 	.word	0x08012604
 80071d4:	08012538 	.word	0x08012538

080071d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	; 0x38
 80071dc:	af04      	add	r7, sp, #16
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d107      	bne.n	80071f8 <tcp_abandon+0x20>
 80071e8:	4b52      	ldr	r3, [pc, #328]	; (8007334 <tcp_abandon+0x15c>)
 80071ea:	f240 223d 	movw	r2, #573	; 0x23d
 80071ee:	4952      	ldr	r1, [pc, #328]	; (8007338 <tcp_abandon+0x160>)
 80071f0:	4852      	ldr	r0, [pc, #328]	; (800733c <tcp_abandon+0x164>)
 80071f2:	f008 ffff 	bl	80101f4 <iprintf>
 80071f6:	e099      	b.n	800732c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7d1b      	ldrb	r3, [r3, #20]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d106      	bne.n	800720e <tcp_abandon+0x36>
 8007200:	4b4c      	ldr	r3, [pc, #304]	; (8007334 <tcp_abandon+0x15c>)
 8007202:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007206:	494e      	ldr	r1, [pc, #312]	; (8007340 <tcp_abandon+0x168>)
 8007208:	484c      	ldr	r0, [pc, #304]	; (800733c <tcp_abandon+0x164>)
 800720a:	f008 fff3 	bl	80101f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7d1b      	ldrb	r3, [r3, #20]
 8007212:	2b0a      	cmp	r3, #10
 8007214:	d107      	bne.n	8007226 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	484a      	ldr	r0, [pc, #296]	; (8007344 <tcp_abandon+0x16c>)
 800721a:	f001 fa71 	bl	8008700 <tcp_pcb_remove>
    tcp_free(pcb);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fdb0 	bl	8006d84 <tcp_free>
 8007224:	e082      	b.n	800732c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007232:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7d1b      	ldrb	r3, [r3, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d126      	bne.n	800729e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8adb      	ldrh	r3, [r3, #22]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02e      	beq.n	80072b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007258:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <tcp_abandon+0x170>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d105      	bne.n	800726e <tcp_abandon+0x96>
 8007262:	4b39      	ldr	r3, [pc, #228]	; (8007348 <tcp_abandon+0x170>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4a37      	ldr	r2, [pc, #220]	; (8007348 <tcp_abandon+0x170>)
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e013      	b.n	8007296 <tcp_abandon+0xbe>
 800726e:	4b36      	ldr	r3, [pc, #216]	; (8007348 <tcp_abandon+0x170>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e00c      	b.n	8007290 <tcp_abandon+0xb8>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d104      	bne.n	800728a <tcp_abandon+0xb2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e005      	b.n	8007296 <tcp_abandon+0xbe>
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1ef      	bne.n	8007276 <tcp_abandon+0x9e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	60da      	str	r2, [r3, #12]
 800729c:	e00b      	b.n	80072b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8adb      	ldrh	r3, [r3, #22]
 80072a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4828      	ldr	r0, [pc, #160]	; (800734c <tcp_abandon+0x174>)
 80072ac:	f001 fa28 	bl	8008700 <tcp_pcb_remove>
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <tcp_abandon+0x178>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fed6 	bl	8008074 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fecd 	bl	8008074 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fec4 	bl	8008074 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3304      	adds	r3, #4
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	8b12      	ldrh	r2, [r2, #24]
 80072fc:	9202      	str	r2, [sp, #8]
 80072fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007300:	9201      	str	r2, [sp, #4]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	460b      	mov	r3, r1
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	69b9      	ldr	r1, [r7, #24]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f005 fbc8 	bl	800caa0 <tcp_rst>
    }
    last_state = pcb->state;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7d1b      	ldrb	r3, [r3, #20]
 8007314:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fd34 	bl	8006d84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <tcp_abandon+0x154>
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f06f 010c 	mvn.w	r1, #12
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	4798      	blx	r3
  }
}
 800732c:	3728      	adds	r7, #40	; 0x28
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	080124f4 	.word	0x080124f4
 8007338:	08012638 	.word	0x08012638
 800733c:	08012538 	.word	0x08012538
 8007340:	08012654 	.word	0x08012654
 8007344:	20006bbc 	.word	0x20006bbc
 8007348:	20006bb0 	.word	0x20006bb0
 800734c:	20006bb8 	.word	0x20006bb8
 8007350:	20006bc0 	.word	0x20006bc0

08007354 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800735c:	2101      	movs	r1, #1
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ff3a 	bl	80071d8 <tcp_abandon>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800737a:	2304      	movs	r3, #4
 800737c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007384:	4b3e      	ldr	r3, [pc, #248]	; (8007480 <tcp_bind+0x114>)
 8007386:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <tcp_bind+0x36>
 800738e:	4b3d      	ldr	r3, [pc, #244]	; (8007484 <tcp_bind+0x118>)
 8007390:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007394:	493c      	ldr	r1, [pc, #240]	; (8007488 <tcp_bind+0x11c>)
 8007396:	483d      	ldr	r0, [pc, #244]	; (800748c <tcp_bind+0x120>)
 8007398:	f008 ff2c 	bl	80101f4 <iprintf>
 800739c:	f06f 030f 	mvn.w	r3, #15
 80073a0:	e06a      	b.n	8007478 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	7d1b      	ldrb	r3, [r3, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <tcp_bind+0x52>
 80073aa:	4b36      	ldr	r3, [pc, #216]	; (8007484 <tcp_bind+0x118>)
 80073ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 80073b0:	4937      	ldr	r1, [pc, #220]	; (8007490 <tcp_bind+0x124>)
 80073b2:	4836      	ldr	r0, [pc, #216]	; (800748c <tcp_bind+0x120>)
 80073b4:	f008 ff1e 	bl	80101f4 <iprintf>
 80073b8:	f06f 0305 	mvn.w	r3, #5
 80073bc:	e05c      	b.n	8007478 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80073c4:	f000 f9f0 	bl	80077a8 <tcp_new_port>
 80073c8:	4603      	mov	r3, r0
 80073ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d135      	bne.n	800743e <tcp_bind+0xd2>
      return ERR_BUF;
 80073d2:	f06f 0301 	mvn.w	r3, #1
 80073d6:	e04f      	b.n	8007478 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80073d8:	2300      	movs	r3, #0
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	e02b      	b.n	8007436 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80073de:	4a2d      	ldr	r2, [pc, #180]	; (8007494 <tcp_bind+0x128>)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	e01e      	b.n	800742a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	8adb      	ldrh	r3, [r3, #22]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d116      	bne.n	8007424 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80073f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <tcp_bind+0xb2>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d102      	bne.n	8007424 <tcp_bind+0xb8>
              return ERR_USE;
 800741e:	f06f 0307 	mvn.w	r3, #7
 8007422:	e029      	b.n	8007478 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1dd      	bne.n	80073ec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	3301      	adds	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	429a      	cmp	r2, r3
 800743c:	dbcf      	blt.n	80073de <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <tcp_bind+0xf2>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <tcp_bind+0xec>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	e000      	b.n	800745a <tcp_bind+0xee>
 8007458:	2300      	movs	r3, #0
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <tcp_bind+0x12c>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
 800746c:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <tcp_bind+0x12c>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	f005 fcd7 	bl	800ce24 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	08014974 	.word	0x08014974
 8007484:	080124f4 	.word	0x080124f4
 8007488:	08012688 	.word	0x08012688
 800748c:	08012538 	.word	0x08012538
 8007490:	080126a0 	.word	0x080126a0
 8007494:	0801494c 	.word	0x0801494c
 8007498:	20006bb0 	.word	0x20006bb0

0800749c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <tcp_accept_null+0x22>
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <tcp_accept_null+0x34>)
 80074b2:	f240 320f 	movw	r2, #783	; 0x30f
 80074b6:	4907      	ldr	r1, [pc, #28]	; (80074d4 <tcp_accept_null+0x38>)
 80074b8:	4807      	ldr	r0, [pc, #28]	; (80074d8 <tcp_accept_null+0x3c>)
 80074ba:	f008 fe9b 	bl	80101f4 <iprintf>

  tcp_abort(pcb);
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f7ff ff48 	bl	8007354 <tcp_abort>

  return ERR_ABRT;
 80074c4:	f06f 030c 	mvn.w	r3, #12
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	080124f4 	.word	0x080124f4
 80074d4:	080126c8 	.word	0x080126c8
 80074d8:	08012538 	.word	0x08012538

080074dc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	2200      	movs	r2, #0
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f806 	bl	8007500 <tcp_listen_with_backlog_and_err>
 80074f4:	4603      	mov	r3, r0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	460b      	mov	r3, r1
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <tcp_listen_with_backlog_and_err+0x2c>
 8007518:	4b47      	ldr	r3, [pc, #284]	; (8007638 <tcp_listen_with_backlog_and_err+0x138>)
 800751a:	f240 3259 	movw	r2, #857	; 0x359
 800751e:	4947      	ldr	r1, [pc, #284]	; (800763c <tcp_listen_with_backlog_and_err+0x13c>)
 8007520:	4847      	ldr	r0, [pc, #284]	; (8007640 <tcp_listen_with_backlog_and_err+0x140>)
 8007522:	f008 fe67 	bl	80101f4 <iprintf>
 8007526:	23f0      	movs	r3, #240	; 0xf0
 8007528:	76fb      	strb	r3, [r7, #27]
 800752a:	e079      	b.n	8007620 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <tcp_listen_with_backlog_and_err+0x48>
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <tcp_listen_with_backlog_and_err+0x138>)
 8007536:	f240 325a 	movw	r2, #858	; 0x35a
 800753a:	4942      	ldr	r1, [pc, #264]	; (8007644 <tcp_listen_with_backlog_and_err+0x144>)
 800753c:	4840      	ldr	r0, [pc, #256]	; (8007640 <tcp_listen_with_backlog_and_err+0x140>)
 800753e:	f008 fe59 	bl	80101f4 <iprintf>
 8007542:	23f1      	movs	r3, #241	; 0xf1
 8007544:	76fb      	strb	r3, [r7, #27]
 8007546:	e06b      	b.n	8007620 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	7d1b      	ldrb	r3, [r3, #20]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d104      	bne.n	800755a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007554:	23f7      	movs	r3, #247	; 0xf7
 8007556:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007558:	e062      	b.n	8007620 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800755a:	2002      	movs	r0, #2
 800755c:	f7fe fb04 	bl	8005b68 <memp_malloc>
 8007560:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800756c:	e058      	b.n	8007620 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8ada      	ldrh	r2, [r3, #22]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2201      	movs	r2, #1
 8007582:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7d5a      	ldrb	r2, [r3, #21]
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	7a5a      	ldrb	r2, [r3, #9]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	2200      	movs	r2, #0
 8007598:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	7ada      	ldrb	r2, [r3, #11]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	7a9a      	ldrb	r2, [r3, #10]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8adb      	ldrh	r3, [r3, #22]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d021      	beq.n	80075fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <tcp_listen_with_backlog_and_err+0x148>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d105      	bne.n	80075d0 <tcp_listen_with_backlog_and_err+0xd0>
 80075c4:	4b20      	ldr	r3, [pc, #128]	; (8007648 <tcp_listen_with_backlog_and_err+0x148>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <tcp_listen_with_backlog_and_err+0x148>)
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e013      	b.n	80075f8 <tcp_listen_with_backlog_and_err+0xf8>
 80075d0:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <tcp_listen_with_backlog_and_err+0x148>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e00c      	b.n	80075f2 <tcp_listen_with_backlog_and_err+0xf2>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d104      	bne.n	80075ec <tcp_listen_with_backlog_and_err+0xec>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	e005      	b.n	80075f8 <tcp_listen_with_backlog_and_err+0xf8>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1ef      	bne.n	80075d8 <tcp_listen_with_backlog_and_err+0xd8>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fbc0 	bl	8006d84 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4a11      	ldr	r2, [pc, #68]	; (800764c <tcp_listen_with_backlog_and_err+0x14c>)
 8007608:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <tcp_listen_with_backlog_and_err+0x150>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <tcp_listen_with_backlog_and_err+0x150>)
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	f005 fc04 	bl	800ce24 <tcp_timer_needed>
  res = ERR_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7efa      	ldrb	r2, [r7, #27]
 800762a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800762c:	69fb      	ldr	r3, [r7, #28]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	080124f4 	.word	0x080124f4
 800763c:	080126e8 	.word	0x080126e8
 8007640:	08012538 	.word	0x08012538
 8007644:	08012718 	.word	0x08012718
 8007648:	20006bb0 	.word	0x20006bb0
 800764c:	0800749d 	.word	0x0800749d
 8007650:	20006bb4 	.word	0x20006bb4

08007654 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <tcp_update_rcv_ann_wnd+0x1c>
 8007662:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007664:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007668:	4924      	ldr	r1, [pc, #144]	; (80076fc <tcp_update_rcv_ann_wnd+0xa8>)
 800766a:	4825      	ldr	r0, [pc, #148]	; (8007700 <tcp_update_rcv_ann_wnd+0xac>)
 800766c:	f008 fdc2 	bl	80101f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007684:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007688:	bf28      	it	cs
 800768a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800768e:	b292      	uxth	r2, r2
 8007690:	4413      	add	r3, r2
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	db08      	blt.n	80076ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	e020      	b.n	80076ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dd03      	ble.n	80076c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076c0:	e014      	b.n	80076ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d306      	bcc.n	80076e4 <tcp_update_rcv_ann_wnd+0x90>
 80076d6:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80076d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80076dc:	4909      	ldr	r1, [pc, #36]	; (8007704 <tcp_update_rcv_ann_wnd+0xb0>)
 80076de:	4808      	ldr	r0, [pc, #32]	; (8007700 <tcp_update_rcv_ann_wnd+0xac>)
 80076e0:	f008 fd88 	bl	80101f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80076ec:	2300      	movs	r3, #0
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	080124f4 	.word	0x080124f4
 80076fc:	08012750 	.word	0x08012750
 8007700:	08012538 	.word	0x08012538
 8007704:	08012774 	.word	0x08012774

08007708 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <tcp_recved+0x22>
 800771a:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <tcp_recved+0x90>)
 800771c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007720:	491e      	ldr	r1, [pc, #120]	; (800779c <tcp_recved+0x94>)
 8007722:	481f      	ldr	r0, [pc, #124]	; (80077a0 <tcp_recved+0x98>)
 8007724:	f008 fd66 	bl	80101f4 <iprintf>
 8007728:	e032      	b.n	8007790 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7d1b      	ldrb	r3, [r3, #20]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d106      	bne.n	8007740 <tcp_recved+0x38>
 8007732:	4b19      	ldr	r3, [pc, #100]	; (8007798 <tcp_recved+0x90>)
 8007734:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007738:	491a      	ldr	r1, [pc, #104]	; (80077a4 <tcp_recved+0x9c>)
 800773a:	4819      	ldr	r0, [pc, #100]	; (80077a0 <tcp_recved+0x98>)
 800773c:	f008 fd5a 	bl	80101f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	4413      	add	r3, r2
 8007748:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007750:	d804      	bhi.n	800775c <tcp_recved+0x54>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007756:	89fa      	ldrh	r2, [r7, #14]
 8007758:	429a      	cmp	r2, r3
 800775a:	d204      	bcs.n	8007766 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007762:	851a      	strh	r2, [r3, #40]	; 0x28
 8007764:	e002      	b.n	800776c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	89fa      	ldrh	r2, [r7, #14]
 800776a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ff71 	bl	8007654 <tcp_update_rcv_ann_wnd>
 8007772:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800777a:	d309      	bcc.n	8007790 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8b5b      	ldrh	r3, [r3, #26]
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	b29a      	uxth	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f004 fbd4 	bl	800bf38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	080124f4 	.word	0x080124f4
 800779c:	08012790 	.word	0x08012790
 80077a0:	08012538 	.word	0x08012538
 80077a4:	080127a8 	.word	0x080127a8

080077a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80077b2:	4b1e      	ldr	r3, [pc, #120]	; (800782c <tcp_new_port+0x84>)
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	4b1c      	ldr	r3, [pc, #112]	; (800782c <tcp_new_port+0x84>)
 80077bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80077be:	4b1b      	ldr	r3, [pc, #108]	; (800782c <tcp_new_port+0x84>)
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d103      	bne.n	80077d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <tcp_new_port+0x84>)
 80077cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077d2:	2300      	movs	r3, #0
 80077d4:	71fb      	strb	r3, [r7, #7]
 80077d6:	e01e      	b.n	8007816 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	4a15      	ldr	r2, [pc, #84]	; (8007830 <tcp_new_port+0x88>)
 80077dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	e011      	b.n	800780a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	8ada      	ldrh	r2, [r3, #22]
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <tcp_new_port+0x84>)
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d108      	bne.n	8007804 <tcp_new_port+0x5c>
        n++;
 80077f2:	88bb      	ldrh	r3, [r7, #4]
 80077f4:	3301      	adds	r3, #1
 80077f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80077f8:	88bb      	ldrh	r3, [r7, #4]
 80077fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077fe:	d3d8      	bcc.n	80077b2 <tcp_new_port+0xa>
          return 0;
 8007800:	2300      	movs	r3, #0
 8007802:	e00d      	b.n	8007820 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ea      	bne.n	80077e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	3301      	adds	r3, #1
 8007814:	71fb      	strb	r3, [r7, #7]
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	2b03      	cmp	r3, #3
 800781a:	d9dd      	bls.n	80077d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800781c:	4b03      	ldr	r3, [pc, #12]	; (800782c <tcp_new_port+0x84>)
 800781e:	881b      	ldrh	r3, [r3, #0]
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000012 	.word	0x20000012
 8007830:	0801494c 	.word	0x0801494c

08007834 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007834:	b5b0      	push	{r4, r5, r7, lr}
 8007836:	b090      	sub	sp, #64	; 0x40
 8007838:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007840:	4b94      	ldr	r3, [pc, #592]	; (8007a94 <tcp_slowtmr+0x260>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	4a93      	ldr	r2, [pc, #588]	; (8007a94 <tcp_slowtmr+0x260>)
 8007848:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800784a:	4b93      	ldr	r3, [pc, #588]	; (8007a98 <tcp_slowtmr+0x264>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	3301      	adds	r3, #1
 8007850:	b2da      	uxtb	r2, r3
 8007852:	4b91      	ldr	r3, [pc, #580]	; (8007a98 <tcp_slowtmr+0x264>)
 8007854:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800785a:	4b90      	ldr	r3, [pc, #576]	; (8007a9c <tcp_slowtmr+0x268>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007860:	e29f      	b.n	8007da2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <tcp_slowtmr+0x44>
 800786a:	4b8d      	ldr	r3, [pc, #564]	; (8007aa0 <tcp_slowtmr+0x26c>)
 800786c:	f240 42be 	movw	r2, #1214	; 0x4be
 8007870:	498c      	ldr	r1, [pc, #560]	; (8007aa4 <tcp_slowtmr+0x270>)
 8007872:	488d      	ldr	r0, [pc, #564]	; (8007aa8 <tcp_slowtmr+0x274>)
 8007874:	f008 fcbe 	bl	80101f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	7d1b      	ldrb	r3, [r3, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d106      	bne.n	800788e <tcp_slowtmr+0x5a>
 8007880:	4b87      	ldr	r3, [pc, #540]	; (8007aa0 <tcp_slowtmr+0x26c>)
 8007882:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007886:	4989      	ldr	r1, [pc, #548]	; (8007aac <tcp_slowtmr+0x278>)
 8007888:	4887      	ldr	r0, [pc, #540]	; (8007aa8 <tcp_slowtmr+0x274>)
 800788a:	f008 fcb3 	bl	80101f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	7d1b      	ldrb	r3, [r3, #20]
 8007892:	2b0a      	cmp	r3, #10
 8007894:	d106      	bne.n	80078a4 <tcp_slowtmr+0x70>
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <tcp_slowtmr+0x26c>)
 8007898:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800789c:	4984      	ldr	r1, [pc, #528]	; (8007ab0 <tcp_slowtmr+0x27c>)
 800789e:	4882      	ldr	r0, [pc, #520]	; (8007aa8 <tcp_slowtmr+0x274>)
 80078a0:	f008 fca8 	bl	80101f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	7f9a      	ldrb	r2, [r3, #30]
 80078a8:	4b7b      	ldr	r3, [pc, #492]	; (8007a98 <tcp_slowtmr+0x264>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d105      	bne.n	80078bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80078ba:	e272      	b.n	8007da2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80078bc:	4b76      	ldr	r3, [pc, #472]	; (8007a98 <tcp_slowtmr+0x264>)
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	7d1b      	ldrb	r3, [r3, #20]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d10a      	bne.n	80078ee <tcp_slowtmr+0xba>
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d905      	bls.n	80078ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80078e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078e6:	3301      	adds	r3, #1
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078ec:	e11e      	b.n	8007b2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078f4:	2b0b      	cmp	r3, #11
 80078f6:	d905      	bls.n	8007904 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fc:	3301      	adds	r3, #1
 80078fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007902:	e113      	b.n	8007b2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800790a:	2b00      	cmp	r3, #0
 800790c:	d075      	beq.n	80079fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	2b00      	cmp	r3, #0
 8007914:	d006      	beq.n	8007924 <tcp_slowtmr+0xf0>
 8007916:	4b62      	ldr	r3, [pc, #392]	; (8007aa0 <tcp_slowtmr+0x26c>)
 8007918:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800791c:	4965      	ldr	r1, [pc, #404]	; (8007ab4 <tcp_slowtmr+0x280>)
 800791e:	4862      	ldr	r0, [pc, #392]	; (8007aa8 <tcp_slowtmr+0x274>)
 8007920:	f008 fc68 	bl	80101f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <tcp_slowtmr+0x106>
 800792c:	4b5c      	ldr	r3, [pc, #368]	; (8007aa0 <tcp_slowtmr+0x26c>)
 800792e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007932:	4961      	ldr	r1, [pc, #388]	; (8007ab8 <tcp_slowtmr+0x284>)
 8007934:	485c      	ldr	r0, [pc, #368]	; (8007aa8 <tcp_slowtmr+0x274>)
 8007936:	f008 fc5d 	bl	80101f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007940:	2b0b      	cmp	r3, #11
 8007942:	d905      	bls.n	8007950 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007948:	3301      	adds	r3, #1
 800794a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800794e:	e0ed      	b.n	8007b2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007956:	3b01      	subs	r3, #1
 8007958:	4a58      	ldr	r2, [pc, #352]	; (8007abc <tcp_slowtmr+0x288>)
 800795a:	5cd3      	ldrb	r3, [r2, r3]
 800795c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007964:	7c7a      	ldrb	r2, [r7, #17]
 8007966:	429a      	cmp	r2, r3
 8007968:	d907      	bls.n	800797a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007970:	3301      	adds	r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007980:	7c7a      	ldrb	r2, [r7, #17]
 8007982:	429a      	cmp	r2, r3
 8007984:	f200 80d2 	bhi.w	8007b2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007988:	2301      	movs	r3, #1
 800798a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007992:	2b00      	cmp	r3, #0
 8007994:	d108      	bne.n	80079a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007998:	f005 f976 	bl	800cc88 <tcp_zero_window_probe>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80079a2:	2300      	movs	r3, #0
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	e011      	b.n	80079cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079ae:	4619      	mov	r1, r3
 80079b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079b2:	f004 f83b 	bl	800ba2c <tcp_split_unsent_seg>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80079bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079be:	f004 fabb 	bl	800bf38 <tcp_output>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80ac 	beq.w	8007b2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	f200 80a2 	bhi.w	8007b2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80079f8:	e098      	b.n	8007b2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	db0f      	blt.n	8007a24 <tcp_slowtmr+0x1f0>
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d008      	beq.n	8007a24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	b21a      	sxth	r2, r3
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a30:	429a      	cmp	r2, r3
 8007a32:	db7b      	blt.n	8007b2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a36:	f004 fd71 	bl	800c51c <tcp_rexmit_rto_prepare>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <tcp_slowtmr+0x21c>
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d171      	bne.n	8007b2c <tcp_slowtmr+0x2f8>
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d06d      	beq.n	8007b2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	7d1b      	ldrb	r3, [r3, #20]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d03a      	beq.n	8007ace <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	bf28      	it	cs
 8007a62:	230c      	movcs	r3, #12
 8007a64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007a6c:	10db      	asrs	r3, r3, #3
 8007a6e:	b21b      	sxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007a78:	4413      	add	r3, r2
 8007a7a:	7efa      	ldrb	r2, [r7, #27]
 8007a7c:	4910      	ldr	r1, [pc, #64]	; (8007ac0 <tcp_slowtmr+0x28c>)
 8007a7e:	5c8a      	ldrb	r2, [r1, r2]
 8007a80:	4093      	lsls	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	dc1a      	bgt.n	8007ac4 <tcp_slowtmr+0x290>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	b21a      	sxth	r2, r3
 8007a92:	e019      	b.n	8007ac8 <tcp_slowtmr+0x294>
 8007a94:	20006bac 	.word	0x20006bac
 8007a98:	20006bc2 	.word	0x20006bc2
 8007a9c:	20006bb8 	.word	0x20006bb8
 8007aa0:	080124f4 	.word	0x080124f4
 8007aa4:	08012838 	.word	0x08012838
 8007aa8:	08012538 	.word	0x08012538
 8007aac:	08012864 	.word	0x08012864
 8007ab0:	08012890 	.word	0x08012890
 8007ab4:	080128c0 	.word	0x080128c0
 8007ab8:	080128f4 	.word	0x080128f4
 8007abc:	08014944 	.word	0x08014944
 8007ac0:	08014934 	.word	0x08014934
 8007ac4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	bf28      	it	cs
 8007ae4:	4613      	movcs	r3, r2
 8007ae6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007ae8:	8a7b      	ldrh	r3, [r7, #18]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d206      	bcs.n	8007b14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b28:	f004 fd68 	bl	800c5fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	7d1b      	ldrb	r3, [r3, #20]
 8007b30:	2b06      	cmp	r3, #6
 8007b32:	d111      	bne.n	8007b58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	8b5b      	ldrh	r3, [r3, #26]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b40:	4b9d      	ldr	r3, [pc, #628]	; (8007db8 <tcp_slowtmr+0x584>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b28      	cmp	r3, #40	; 0x28
 8007b4c:	d904      	bls.n	8007b58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b52:	3301      	adds	r3, #1
 8007b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	7a5b      	ldrb	r3, [r3, #9]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d04c      	beq.n	8007bfe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d003      	beq.n	8007b74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d144      	bne.n	8007bfe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b74:	4b90      	ldr	r3, [pc, #576]	; (8007db8 <tcp_slowtmr+0x584>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b84:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007b88:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007b8c:	498b      	ldr	r1, [pc, #556]	; (8007dbc <tcp_slowtmr+0x588>)
 8007b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8007b92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d90a      	bls.n	8007bae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bac:	e027      	b.n	8007bfe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bae:	4b82      	ldr	r3, [pc, #520]	; (8007db8 <tcp_slowtmr+0x584>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	4b7e      	ldr	r3, [pc, #504]	; (8007dc0 <tcp_slowtmr+0x58c>)
 8007bc8:	fb00 f303 	mul.w	r3, r0, r3
 8007bcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007bce:	497b      	ldr	r1, [pc, #492]	; (8007dbc <tcp_slowtmr+0x588>)
 8007bd0:	fba1 1303 	umull	r1, r3, r1, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d911      	bls.n	8007bfe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bdc:	f005 f814 	bl	800cc08 <tcp_keepalive>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007be6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d011      	beq.n	8007c2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007c06:	4b6c      	ldr	r3, [pc, #432]	; (8007db8 <tcp_slowtmr+0x584>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007c16:	4619      	mov	r1, r3
 8007c18:	460b      	mov	r3, r1
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	440b      	add	r3, r1
 8007c1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d302      	bcc.n	8007c2a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c26:	f000 fecf 	bl	80089c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	7d1b      	ldrb	r3, [r3, #20]
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d10b      	bne.n	8007c4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c32:	4b61      	ldr	r3, [pc, #388]	; (8007db8 <tcp_slowtmr+0x584>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b28      	cmp	r3, #40	; 0x28
 8007c3e:	d904      	bls.n	8007c4a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c44:	3301      	adds	r3, #1
 8007c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d10b      	bne.n	8007c6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c52:	4b59      	ldr	r3, [pc, #356]	; (8007db8 <tcp_slowtmr+0x584>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2bf0      	cmp	r3, #240	; 0xf0
 8007c5e:	d904      	bls.n	8007c6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c64:	3301      	adds	r3, #1
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d060      	beq.n	8007d34 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7c:	f000 fcf0 	bl	8008660 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d010      	beq.n	8007ca8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007c86:	4b4f      	ldr	r3, [pc, #316]	; (8007dc4 <tcp_slowtmr+0x590>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d106      	bne.n	8007c9e <tcp_slowtmr+0x46a>
 8007c90:	4b4d      	ldr	r3, [pc, #308]	; (8007dc8 <tcp_slowtmr+0x594>)
 8007c92:	f240 526d 	movw	r2, #1389	; 0x56d
 8007c96:	494d      	ldr	r1, [pc, #308]	; (8007dcc <tcp_slowtmr+0x598>)
 8007c98:	484d      	ldr	r0, [pc, #308]	; (8007dd0 <tcp_slowtmr+0x59c>)
 8007c9a:	f008 faab 	bl	80101f4 <iprintf>
        prev->next = pcb->next;
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	e00f      	b.n	8007cc8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007ca8:	4b46      	ldr	r3, [pc, #280]	; (8007dc4 <tcp_slowtmr+0x590>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d006      	beq.n	8007cc0 <tcp_slowtmr+0x48c>
 8007cb2:	4b45      	ldr	r3, [pc, #276]	; (8007dc8 <tcp_slowtmr+0x594>)
 8007cb4:	f240 5271 	movw	r2, #1393	; 0x571
 8007cb8:	4946      	ldr	r1, [pc, #280]	; (8007dd4 <tcp_slowtmr+0x5a0>)
 8007cba:	4845      	ldr	r0, [pc, #276]	; (8007dd0 <tcp_slowtmr+0x59c>)
 8007cbc:	f008 fa9a 	bl	80101f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a3f      	ldr	r2, [pc, #252]	; (8007dc4 <tcp_slowtmr+0x590>)
 8007cc6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d013      	beq.n	8007cf8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007cd8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	3304      	adds	r3, #4
 8007cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce0:	8ad2      	ldrh	r2, [r2, #22]
 8007ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce4:	8b09      	ldrh	r1, [r1, #24]
 8007ce6:	9102      	str	r1, [sp, #8]
 8007ce8:	9201      	str	r2, [sp, #4]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462b      	mov	r3, r5
 8007cee:	4622      	mov	r2, r4
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cf4:	f004 fed4 	bl	800caa0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	7d1b      	ldrb	r3, [r3, #20]
 8007d02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f7ff f838 	bl	8006d84 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007d14:	4b30      	ldr	r3, [pc, #192]	; (8007dd8 <tcp_slowtmr+0x5a4>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <tcp_slowtmr+0x4f6>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f06f 010c 	mvn.w	r1, #12
 8007d26:	68b8      	ldr	r0, [r7, #8]
 8007d28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007d2a:	4b2b      	ldr	r3, [pc, #172]	; (8007dd8 <tcp_slowtmr+0x5a4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d037      	beq.n	8007da2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007d32:	e590      	b.n	8007856 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	7f1b      	ldrb	r3, [r3, #28]
 8007d42:	3301      	adds	r3, #1
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	7f1a      	ldrb	r2, [r3, #28]
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	7f5b      	ldrb	r3, [r3, #29]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d325      	bcc.n	8007da2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007d5c:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <tcp_slowtmr+0x5a4>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <tcp_slowtmr+0x550>
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d74:	6912      	ldr	r2, [r2, #16]
 8007d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007d82:	e002      	b.n	8007d8a <tcp_slowtmr+0x556>
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <tcp_slowtmr+0x5a4>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d000      	beq.n	8007d94 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007d92:	e560      	b.n	8007856 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007d94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9e:	f004 f8cb 	bl	800bf38 <tcp_output>
  while (pcb != NULL) {
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f ad5c 	bne.w	8007862 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <tcp_slowtmr+0x5a8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007db4:	e067      	b.n	8007e86 <tcp_slowtmr+0x652>
 8007db6:	bf00      	nop
 8007db8:	20006bac 	.word	0x20006bac
 8007dbc:	10624dd3 	.word	0x10624dd3
 8007dc0:	000124f8 	.word	0x000124f8
 8007dc4:	20006bb8 	.word	0x20006bb8
 8007dc8:	080124f4 	.word	0x080124f4
 8007dcc:	0801292c 	.word	0x0801292c
 8007dd0:	08012538 	.word	0x08012538
 8007dd4:	08012958 	.word	0x08012958
 8007dd8:	20006bc0 	.word	0x20006bc0
 8007ddc:	20006bbc 	.word	0x20006bbc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	7d1b      	ldrb	r3, [r3, #20]
 8007de4:	2b0a      	cmp	r3, #10
 8007de6:	d006      	beq.n	8007df6 <tcp_slowtmr+0x5c2>
 8007de8:	4b2b      	ldr	r3, [pc, #172]	; (8007e98 <tcp_slowtmr+0x664>)
 8007dea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007dee:	492b      	ldr	r1, [pc, #172]	; (8007e9c <tcp_slowtmr+0x668>)
 8007df0:	482b      	ldr	r0, [pc, #172]	; (8007ea0 <tcp_slowtmr+0x66c>)
 8007df2:	f008 f9ff 	bl	80101f4 <iprintf>
    pcb_remove = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <tcp_slowtmr+0x670>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2bf0      	cmp	r3, #240	; 0xf0
 8007e08:	d904      	bls.n	8007e14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d02f      	beq.n	8007e7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e1e:	f000 fc1f 	bl	8008660 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d010      	beq.n	8007e4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007e28:	4b1f      	ldr	r3, [pc, #124]	; (8007ea8 <tcp_slowtmr+0x674>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d106      	bne.n	8007e40 <tcp_slowtmr+0x60c>
 8007e32:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <tcp_slowtmr+0x664>)
 8007e34:	f240 52af 	movw	r2, #1455	; 0x5af
 8007e38:	491c      	ldr	r1, [pc, #112]	; (8007eac <tcp_slowtmr+0x678>)
 8007e3a:	4819      	ldr	r0, [pc, #100]	; (8007ea0 <tcp_slowtmr+0x66c>)
 8007e3c:	f008 f9da 	bl	80101f4 <iprintf>
        prev->next = pcb->next;
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	e00f      	b.n	8007e6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007e4a:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <tcp_slowtmr+0x674>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d006      	beq.n	8007e62 <tcp_slowtmr+0x62e>
 8007e54:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <tcp_slowtmr+0x664>)
 8007e56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007e5a:	4915      	ldr	r1, [pc, #84]	; (8007eb0 <tcp_slowtmr+0x67c>)
 8007e5c:	4810      	ldr	r0, [pc, #64]	; (8007ea0 <tcp_slowtmr+0x66c>)
 8007e5e:	f008 f9c9 	bl	80101f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	4a10      	ldr	r2, [pc, #64]	; (8007ea8 <tcp_slowtmr+0x674>)
 8007e68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007e74:	69f8      	ldr	r0, [r7, #28]
 8007e76:	f7fe ff85 	bl	8006d84 <tcp_free>
 8007e7a:	e004      	b.n	8007e86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1a9      	bne.n	8007de0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	3730      	adds	r7, #48	; 0x30
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bdb0      	pop	{r4, r5, r7, pc}
 8007e96:	bf00      	nop
 8007e98:	080124f4 	.word	0x080124f4
 8007e9c:	08012984 	.word	0x08012984
 8007ea0:	08012538 	.word	0x08012538
 8007ea4:	20006bac 	.word	0x20006bac
 8007ea8:	20006bbc 	.word	0x20006bbc
 8007eac:	080129b4 	.word	0x080129b4
 8007eb0:	080129dc 	.word	0x080129dc

08007eb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007eba:	4b2d      	ldr	r3, [pc, #180]	; (8007f70 <tcp_fasttmr+0xbc>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	4b2b      	ldr	r3, [pc, #172]	; (8007f70 <tcp_fasttmr+0xbc>)
 8007ec4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007ec6:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <tcp_fasttmr+0xc0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ecc:	e048      	b.n	8007f60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7f9a      	ldrb	r2, [r3, #30]
 8007ed2:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <tcp_fasttmr+0xbc>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d03f      	beq.n	8007f5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007eda:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <tcp_fasttmr+0xbc>)
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8b5b      	ldrh	r3, [r3, #26]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d010      	beq.n	8007f10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8b5b      	ldrh	r3, [r3, #26]
 8007ef2:	f043 0302 	orr.w	r3, r3, #2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f004 f81b 	bl	800bf38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	8b5b      	ldrh	r3, [r3, #26]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8b5b      	ldrh	r3, [r3, #26]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8b5b      	ldrh	r3, [r3, #26]
 8007f20:	f023 0308 	bic.w	r3, r3, #8
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff f8be 	bl	80070ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <tcp_fasttmr+0xc4>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f819 	bl	8007f7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <tcp_fasttmr+0xc4>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d000      	beq.n	8007f54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007f52:	e7b8      	b.n	8007ec6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e002      	b.n	8007f60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1b3      	bne.n	8007ece <tcp_fasttmr+0x1a>
    }
  }
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20006bc2 	.word	0x20006bc2
 8007f74:	20006bb8 	.word	0x20006bb8
 8007f78:	20006bc0 	.word	0x20006bc0

08007f7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <tcp_process_refused_data+0x22>
 8007f8a:	4b37      	ldr	r3, [pc, #220]	; (8008068 <tcp_process_refused_data+0xec>)
 8007f8c:	f240 6209 	movw	r2, #1545	; 0x609
 8007f90:	4936      	ldr	r1, [pc, #216]	; (800806c <tcp_process_refused_data+0xf0>)
 8007f92:	4837      	ldr	r0, [pc, #220]	; (8008070 <tcp_process_refused_data+0xf4>)
 8007f94:	f008 f92e 	bl	80101f4 <iprintf>
 8007f98:	f06f 030f 	mvn.w	r3, #15
 8007f9c:	e060      	b.n	8008060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa2:	7b5b      	ldrb	r3, [r3, #13]
 8007fa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007faa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <tcp_process_refused_data+0x58>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6918      	ldr	r0, [r3, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	47a0      	blx	r4
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	e007      	b.n	8007fe4 <tcp_process_refused_data+0x68>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f000 f8c2 	bl	8008164 <tcp_recv_null>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d12a      	bne.n	8008042 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d033      	beq.n	800805e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ffa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ffe:	d005      	beq.n	800800c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008004:	3301      	adds	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <tcp_process_refused_data+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6918      	ldr	r0, [r3, #16]
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	47a0      	blx	r4
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	e001      	b.n	8008032 <tcp_process_refused_data+0xb6>
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008036:	f113 0f0d 	cmn.w	r3, #13
 800803a:	d110      	bne.n	800805e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800803c:	f06f 030c 	mvn.w	r3, #12
 8008040:	e00e      	b.n	8008060 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008046:	f113 0f0d 	cmn.w	r3, #13
 800804a:	d102      	bne.n	8008052 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800804c:	f06f 030c 	mvn.w	r3, #12
 8008050:	e006      	b.n	8008060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008058:	f06f 0304 	mvn.w	r3, #4
 800805c:	e000      	b.n	8008060 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}
 8008068:	080124f4 	.word	0x080124f4
 800806c:	08012a04 	.word	0x08012a04
 8008070:	08012538 	.word	0x08012538

08008074 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800807c:	e007      	b.n	800808e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f80a 	bl	800809e <tcp_seg_free>
    seg = next;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f4      	bne.n	800807e <tcp_segs_free+0xa>
  }
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fbb3 	bl	8006824 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	2003      	movs	r0, #3
 80080c2:	f7fd fd9d 	bl	8005c00 <memp_free>
  }
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <tcp_setprio+0x22>
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <tcp_setprio+0x30>)
 80080e4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80080e8:	4906      	ldr	r1, [pc, #24]	; (8008104 <tcp_setprio+0x34>)
 80080ea:	4807      	ldr	r0, [pc, #28]	; (8008108 <tcp_setprio+0x38>)
 80080ec:	f008 f882 	bl	80101f4 <iprintf>
 80080f0:	e002      	b.n	80080f8 <tcp_setprio+0x28>

  pcb->prio = prio;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	755a      	strb	r2, [r3, #21]
}
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	080124f4 	.word	0x080124f4
 8008104:	08012a2c 	.word	0x08012a2c
 8008108:	08012538 	.word	0x08012538

0800810c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <tcp_seg_copy+0x1c>
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <tcp_seg_copy+0x4c>)
 800811c:	f240 6282 	movw	r2, #1666	; 0x682
 8008120:	490e      	ldr	r1, [pc, #56]	; (800815c <tcp_seg_copy+0x50>)
 8008122:	480f      	ldr	r0, [pc, #60]	; (8008160 <tcp_seg_copy+0x54>)
 8008124:	f008 f866 	bl	80101f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008128:	2003      	movs	r0, #3
 800812a:	f7fd fd1d 	bl	8005b68 <memp_malloc>
 800812e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <tcp_seg_copy+0x2e>
    return NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	e00a      	b.n	8008150 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800813a:	2210      	movs	r2, #16
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f008 f828 	bl	8010194 <memcpy>
  pbuf_ref(cseg->p);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fc0b 	bl	8006964 <pbuf_ref>
  return cseg;
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	080124f4 	.word	0x080124f4
 800815c:	08012a48 	.word	0x08012a48
 8008160:	08012538 	.word	0x08012538

08008164 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <tcp_recv_null+0x28>
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <tcp_recv_null+0x60>)
 800817a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800817e:	4912      	ldr	r1, [pc, #72]	; (80081c8 <tcp_recv_null+0x64>)
 8008180:	4812      	ldr	r0, [pc, #72]	; (80081cc <tcp_recv_null+0x68>)
 8008182:	f008 f837 	bl	80101f4 <iprintf>
 8008186:	f06f 030f 	mvn.w	r3, #15
 800818a:	e016      	b.n	80081ba <tcp_recv_null+0x56>

  if (p != NULL) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	891b      	ldrh	r3, [r3, #8]
 8008196:	4619      	mov	r1, r3
 8008198:	68b8      	ldr	r0, [r7, #8]
 800819a:	f7ff fab5 	bl	8007708 <tcp_recved>
    pbuf_free(p);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fe fb40 	bl	8006824 <pbuf_free>
 80081a4:	e008      	b.n	80081b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80081a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f7fe ffe6 	bl	8007180 <tcp_close>
 80081b4:	4603      	mov	r3, r0
 80081b6:	e000      	b.n	80081ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	080124f4 	.word	0x080124f4
 80081c8:	08012a64 	.word	0x08012a64
 80081cc:	08012538 	.word	0x08012538

080081d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80081da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db01      	blt.n	80081e6 <tcp_kill_prio+0x16>
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	e000      	b.n	80081e8 <tcp_kill_prio+0x18>
 80081e6:	237f      	movs	r3, #127	; 0x7f
 80081e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d034      	beq.n	800825a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <tcp_kill_prio+0x94>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e01f      	b.n	8008246 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	7d5b      	ldrb	r3, [r3, #21]
 800820a:	7afa      	ldrb	r2, [r7, #11]
 800820c:	429a      	cmp	r2, r3
 800820e:	d80c      	bhi.n	800822a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008214:	7afa      	ldrb	r2, [r7, #11]
 8008216:	429a      	cmp	r2, r3
 8008218:	d112      	bne.n	8008240 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <tcp_kill_prio+0x98>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	429a      	cmp	r2, r3
 8008228:	d80a      	bhi.n	8008240 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800822a:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <tcp_kill_prio+0x98>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	7d5b      	ldrb	r3, [r3, #21]
 800823e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1dc      	bne.n	8008206 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008252:	6938      	ldr	r0, [r7, #16]
 8008254:	f7ff f87e 	bl	8007354 <tcp_abort>
 8008258:	e000      	b.n	800825c <tcp_kill_prio+0x8c>
    return;
 800825a:	bf00      	nop
  }
}
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20006bb8 	.word	0x20006bb8
 8008268:	20006bac 	.word	0x20006bac

0800826c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d009      	beq.n	8008290 <tcp_kill_state+0x24>
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d006      	beq.n	8008290 <tcp_kill_state+0x24>
 8008282:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <tcp_kill_state+0x80>)
 8008284:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008288:	4919      	ldr	r1, [pc, #100]	; (80082f0 <tcp_kill_state+0x84>)
 800828a:	481a      	ldr	r0, [pc, #104]	; (80082f4 <tcp_kill_state+0x88>)
 800828c:	f007 ffb2 	bl	80101f4 <iprintf>

  inactivity = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <tcp_kill_state+0x8c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	e017      	b.n	80082d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	7d1b      	ldrb	r3, [r3, #20]
 80082a4:	79fa      	ldrb	r2, [r7, #7]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d10f      	bne.n	80082ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <tcp_kill_state+0x90>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d807      	bhi.n	80082ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <tcp_kill_state+0x90>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e4      	bne.n	80082a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80082dc:	2100      	movs	r1, #0
 80082de:	6938      	ldr	r0, [r7, #16]
 80082e0:	f7fe ff7a 	bl	80071d8 <tcp_abandon>
  }
}
 80082e4:	bf00      	nop
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	080124f4 	.word	0x080124f4
 80082f0:	08012a80 	.word	0x08012a80
 80082f4:	08012538 	.word	0x08012538
 80082f8:	20006bb8 	.word	0x20006bb8
 80082fc:	20006bac 	.word	0x20006bac

08008300 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <tcp_kill_timewait+0x58>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e012      	b.n	800833c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <tcp_kill_timewait+0x5c>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d807      	bhi.n	8008336 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <tcp_kill_timewait+0x5c>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e9      	bne.n	8008316 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	f7ff f803 	bl	8007354 <tcp_abort>
  }
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20006bbc 	.word	0x20006bbc
 800835c:	20006bac 	.word	0x20006bac

08008360 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <tcp_handle_closepend+0x48>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800836c:	e014      	b.n	8008398 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	8b5b      	ldrh	r3, [r3, #26]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8b5b      	ldrh	r3, [r3, #26]
 8008384:	f023 0308 	bic.w	r3, r3, #8
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7fe fe8c 	bl	80070ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e7      	bne.n	800836e <tcp_handle_closepend+0xe>
  }
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20006bb8 	.word	0x20006bb8

080083ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083b6:	2001      	movs	r0, #1
 80083b8:	f7fd fbd6 	bl	8005b68 <memp_malloc>
 80083bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d126      	bne.n	8008412 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80083c4:	f7ff ffcc 	bl	8008360 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80083c8:	f7ff ff9a 	bl	8008300 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083cc:	2001      	movs	r0, #1
 80083ce:	f7fd fbcb 	bl	8005b68 <memp_malloc>
 80083d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d11b      	bne.n	8008412 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80083da:	2009      	movs	r0, #9
 80083dc:	f7ff ff46 	bl	800826c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083e0:	2001      	movs	r0, #1
 80083e2:	f7fd fbc1 	bl	8005b68 <memp_malloc>
 80083e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d111      	bne.n	8008412 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80083ee:	2008      	movs	r0, #8
 80083f0:	f7ff ff3c 	bl	800826c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7fd fbb7 	bl	8005b68 <memp_malloc>
 80083fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d107      	bne.n	8008412 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff fee3 	bl	80081d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800840a:	2001      	movs	r0, #1
 800840c:	f7fd fbac 	bl	8005b68 <memp_malloc>
 8008410:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d03f      	beq.n	8008498 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008418:	229c      	movs	r2, #156	; 0x9c
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f007 fee1 	bl	80101e4 <memset>
    pcb->prio = prio;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	79fa      	ldrb	r2, [r7, #7]
 8008426:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800842e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	22ff      	movs	r2, #255	; 0xff
 8008446:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800844e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2206      	movs	r2, #6
 8008454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2206      	movs	r2, #6
 800845c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008464:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <tcp_alloc+0xf8>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <tcp_alloc+0xfc>)
 8008478:	781a      	ldrb	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008484:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4a08      	ldr	r2, [pc, #32]	; (80084ac <tcp_alloc+0x100>)
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <tcp_alloc+0x104>)
 8008494:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20006bac 	.word	0x20006bac
 80084a8:	20006bc2 	.word	0x20006bc2
 80084ac:	08008165 	.word	0x08008165
 80084b0:	006ddd00 	.word	0x006ddd00

080084b4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80084b8:	2040      	movs	r0, #64	; 0x40
 80084ba:	f7ff ff77 	bl	80083ac <tcp_alloc>
 80084be:	4603      	mov	r3, r0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80084ce:	2040      	movs	r0, #64	; 0x40
 80084d0:	f7ff ff6c 	bl	80083ac <tcp_alloc>
 80084d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	611a      	str	r2, [r3, #16]
  }
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7d1b      	ldrb	r3, [r3, #20]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d106      	bne.n	800852a <tcp_recv+0x26>
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <tcp_recv+0x38>)
 800851e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008522:	4907      	ldr	r1, [pc, #28]	; (8008540 <tcp_recv+0x3c>)
 8008524:	4807      	ldr	r0, [pc, #28]	; (8008544 <tcp_recv+0x40>)
 8008526:	f007 fe65 	bl	80101f4 <iprintf>
    pcb->recv = recv;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	080124f4 	.word	0x080124f4
 8008540:	08012a90 	.word	0x08012a90
 8008544:	08012538 	.word	0x08012538

08008548 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7d1b      	ldrb	r3, [r3, #20]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d106      	bne.n	800856e <tcp_sent+0x26>
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <tcp_sent+0x38>)
 8008562:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008566:	4907      	ldr	r1, [pc, #28]	; (8008584 <tcp_sent+0x3c>)
 8008568:	4807      	ldr	r0, [pc, #28]	; (8008588 <tcp_sent+0x40>)
 800856a:	f007 fe43 	bl	80101f4 <iprintf>
    pcb->sent = sent;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	080124f4 	.word	0x080124f4
 8008584:	08012ab8 	.word	0x08012ab8
 8008588:	08012538 	.word	0x08012538

0800858c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00e      	beq.n	80085ba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7d1b      	ldrb	r3, [r3, #20]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d106      	bne.n	80085b2 <tcp_err+0x26>
 80085a4:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <tcp_err+0x38>)
 80085a6:	f640 020d 	movw	r2, #2061	; 0x80d
 80085aa:	4907      	ldr	r1, [pc, #28]	; (80085c8 <tcp_err+0x3c>)
 80085ac:	4807      	ldr	r0, [pc, #28]	; (80085cc <tcp_err+0x40>)
 80085ae:	f007 fe21 	bl	80101f4 <iprintf>
    pcb->errf = err;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	080124f4 	.word	0x080124f4
 80085c8:	08012ae0 	.word	0x08012ae0
 80085cc:	08012538 	.word	0x08012538

080085d0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <tcp_accept+0x22>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7d1b      	ldrb	r3, [r3, #20]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d104      	bne.n	80085f2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	619a      	str	r2, [r3, #24]
  }
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d107      	bne.n	8008624 <tcp_poll+0x24>
 8008614:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <tcp_poll+0x50>)
 8008616:	f640 023d 	movw	r2, #2109	; 0x83d
 800861a:	490e      	ldr	r1, [pc, #56]	; (8008654 <tcp_poll+0x54>)
 800861c:	480e      	ldr	r0, [pc, #56]	; (8008658 <tcp_poll+0x58>)
 800861e:	f007 fde9 	bl	80101f4 <iprintf>
 8008622:	e011      	b.n	8008648 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	7d1b      	ldrb	r3, [r3, #20]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d106      	bne.n	800863a <tcp_poll+0x3a>
 800862c:	4b08      	ldr	r3, [pc, #32]	; (8008650 <tcp_poll+0x50>)
 800862e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008632:	490a      	ldr	r1, [pc, #40]	; (800865c <tcp_poll+0x5c>)
 8008634:	4808      	ldr	r0, [pc, #32]	; (8008658 <tcp_poll+0x58>)
 8008636:	f007 fddd 	bl	80101f4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	79fa      	ldrb	r2, [r7, #7]
 8008646:	775a      	strb	r2, [r3, #29]
}
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	080124f4 	.word	0x080124f4
 8008654:	08012b08 	.word	0x08012b08
 8008658:	08012538 	.word	0x08012538
 800865c:	08012b20 	.word	0x08012b20

08008660 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <tcp_pcb_purge+0x1e>
 800866e:	4b21      	ldr	r3, [pc, #132]	; (80086f4 <tcp_pcb_purge+0x94>)
 8008670:	f640 0251 	movw	r2, #2129	; 0x851
 8008674:	4920      	ldr	r1, [pc, #128]	; (80086f8 <tcp_pcb_purge+0x98>)
 8008676:	4821      	ldr	r0, [pc, #132]	; (80086fc <tcp_pcb_purge+0x9c>)
 8008678:	f007 fdbc 	bl	80101f4 <iprintf>
 800867c:	e037      	b.n	80086ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7d1b      	ldrb	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d033      	beq.n	80086ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800868a:	2b0a      	cmp	r3, #10
 800868c:	d02f      	beq.n	80086ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008692:	2b01      	cmp	r3, #1
 8008694:	d02b      	beq.n	80086ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe f8be 	bl	8006824 <pbuf_free>
      pcb->refused_data = NULL;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f986 	bl	80089c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fcd3 	bl	8008074 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fcce 	bl	8008074 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	080124f4 	.word	0x080124f4
 80086f8:	08012b40 	.word	0x08012b40
 80086fc:	08012538 	.word	0x08012538

08008700 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d106      	bne.n	800871e <tcp_pcb_remove+0x1e>
 8008710:	4b3e      	ldr	r3, [pc, #248]	; (800880c <tcp_pcb_remove+0x10c>)
 8008712:	f640 0283 	movw	r2, #2179	; 0x883
 8008716:	493e      	ldr	r1, [pc, #248]	; (8008810 <tcp_pcb_remove+0x110>)
 8008718:	483e      	ldr	r0, [pc, #248]	; (8008814 <tcp_pcb_remove+0x114>)
 800871a:	f007 fd6b 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <tcp_pcb_remove+0x32>
 8008724:	4b39      	ldr	r3, [pc, #228]	; (800880c <tcp_pcb_remove+0x10c>)
 8008726:	f640 0284 	movw	r2, #2180	; 0x884
 800872a:	493b      	ldr	r1, [pc, #236]	; (8008818 <tcp_pcb_remove+0x118>)
 800872c:	4839      	ldr	r0, [pc, #228]	; (8008814 <tcp_pcb_remove+0x114>)
 800872e:	f007 fd61 	bl	80101f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d105      	bne.n	8008748 <tcp_pcb_remove+0x48>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e013      	b.n	8008770 <tcp_pcb_remove+0x70>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	e00c      	b.n	800876a <tcp_pcb_remove+0x6a>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d104      	bne.n	8008764 <tcp_pcb_remove+0x64>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e005      	b.n	8008770 <tcp_pcb_remove+0x70>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1ef      	bne.n	8008750 <tcp_pcb_remove+0x50>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008776:	6838      	ldr	r0, [r7, #0]
 8008778:	f7ff ff72 	bl	8008660 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	7d1b      	ldrb	r3, [r3, #20]
 8008780:	2b0a      	cmp	r3, #10
 8008782:	d013      	beq.n	80087ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008788:	2b01      	cmp	r3, #1
 800878a:	d00f      	beq.n	80087ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	8b5b      	ldrh	r3, [r3, #26]
 8008790:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	8b5b      	ldrh	r3, [r3, #26]
 800879c:	f043 0302 	orr.w	r3, r3, #2
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f003 fbc6 	bl	800bf38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	7d1b      	ldrb	r3, [r3, #20]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d020      	beq.n	80087f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <tcp_pcb_remove+0xca>
 80087bc:	4b13      	ldr	r3, [pc, #76]	; (800880c <tcp_pcb_remove+0x10c>)
 80087be:	f640 0293 	movw	r2, #2195	; 0x893
 80087c2:	4916      	ldr	r1, [pc, #88]	; (800881c <tcp_pcb_remove+0x11c>)
 80087c4:	4813      	ldr	r0, [pc, #76]	; (8008814 <tcp_pcb_remove+0x114>)
 80087c6:	f007 fd15 	bl	80101f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <tcp_pcb_remove+0xe0>
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <tcp_pcb_remove+0x10c>)
 80087d4:	f640 0294 	movw	r2, #2196	; 0x894
 80087d8:	4911      	ldr	r1, [pc, #68]	; (8008820 <tcp_pcb_remove+0x120>)
 80087da:	480e      	ldr	r0, [pc, #56]	; (8008814 <tcp_pcb_remove+0x114>)
 80087dc:	f007 fd0a 	bl	80101f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d006      	beq.n	80087f6 <tcp_pcb_remove+0xf6>
 80087e8:	4b08      	ldr	r3, [pc, #32]	; (800880c <tcp_pcb_remove+0x10c>)
 80087ea:	f640 0296 	movw	r2, #2198	; 0x896
 80087ee:	490d      	ldr	r1, [pc, #52]	; (8008824 <tcp_pcb_remove+0x124>)
 80087f0:	4808      	ldr	r0, [pc, #32]	; (8008814 <tcp_pcb_remove+0x114>)
 80087f2:	f007 fcff 	bl	80101f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2200      	movs	r2, #0
 80087fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	080124f4 	.word	0x080124f4
 8008810:	08012b5c 	.word	0x08012b5c
 8008814:	08012538 	.word	0x08012538
 8008818:	08012b78 	.word	0x08012b78
 800881c:	08012b98 	.word	0x08012b98
 8008820:	08012bb0 	.word	0x08012bb0
 8008824:	08012bcc 	.word	0x08012bcc

08008828 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <tcp_next_iss+0x1c>
 8008836:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <tcp_next_iss+0x38>)
 8008838:	f640 02af 	movw	r2, #2223	; 0x8af
 800883c:	4909      	ldr	r1, [pc, #36]	; (8008864 <tcp_next_iss+0x3c>)
 800883e:	480a      	ldr	r0, [pc, #40]	; (8008868 <tcp_next_iss+0x40>)
 8008840:	f007 fcd8 	bl	80101f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <tcp_next_iss+0x44>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <tcp_next_iss+0x48>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4413      	add	r3, r2
 800884e:	4a07      	ldr	r2, [pc, #28]	; (800886c <tcp_next_iss+0x44>)
 8008850:	6013      	str	r3, [r2, #0]
  return iss;
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <tcp_next_iss+0x44>)
 8008854:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	080124f4 	.word	0x080124f4
 8008864:	08012be4 	.word	0x08012be4
 8008868:	08012538 	.word	0x08012538
 800886c:	20000014 	.word	0x20000014
 8008870:	20006bac 	.word	0x20006bac

08008874 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <tcp_eff_send_mss_netif+0x22>
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <tcp_eff_send_mss_netif+0x68>)
 800888a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800888e:	4914      	ldr	r1, [pc, #80]	; (80088e0 <tcp_eff_send_mss_netif+0x6c>)
 8008890:	4814      	ldr	r0, [pc, #80]	; (80088e4 <tcp_eff_send_mss_netif+0x70>)
 8008892:	f007 fcaf 	bl	80101f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	e019      	b.n	80088d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80088a6:	8afb      	ldrh	r3, [r7, #22]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d012      	beq.n	80088d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80088ac:	2328      	movs	r3, #40	; 0x28
 80088ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80088b0:	8afa      	ldrh	r2, [r7, #22]
 80088b2:	8abb      	ldrh	r3, [r7, #20]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d904      	bls.n	80088c2 <tcp_eff_send_mss_netif+0x4e>
 80088b8:	8afa      	ldrh	r2, [r7, #22]
 80088ba:	8abb      	ldrh	r3, [r7, #20]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	e000      	b.n	80088c4 <tcp_eff_send_mss_netif+0x50>
 80088c2:	2300      	movs	r3, #0
 80088c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80088c6:	8a7a      	ldrh	r2, [r7, #18]
 80088c8:	89fb      	ldrh	r3, [r7, #14]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	bf28      	it	cs
 80088ce:	4613      	movcs	r3, r2
 80088d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80088d2:	89fb      	ldrh	r3, [r7, #14]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	080124f4 	.word	0x080124f4
 80088e0:	08012c00 	.word	0x08012c00
 80088e4:	08012538 	.word	0x08012538

080088e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d119      	bne.n	8008930 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80088fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008902:	4910      	ldr	r1, [pc, #64]	; (8008944 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008904:	4810      	ldr	r0, [pc, #64]	; (8008948 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008906:	f007 fc75 	bl	80101f4 <iprintf>

  while (pcb != NULL) {
 800890a:	e011      	b.n	8008930 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d108      	bne.n	800892a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7fe fd18 	bl	8007354 <tcp_abort>
      pcb = next;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e002      	b.n	8008930 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1ea      	bne.n	800890c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	080124f4 	.word	0x080124f4
 8008944:	08012c28 	.word	0x08012c28
 8008948:	08012538 	.word	0x08012538

0800894c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02a      	beq.n	80089b2 <tcp_netif_ip_addr_changed+0x66>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d026      	beq.n	80089b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008964:	4b15      	ldr	r3, [pc, #84]	; (80089bc <tcp_netif_ip_addr_changed+0x70>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff ffbc 	bl	80088e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008970:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <tcp_netif_ip_addr_changed+0x74>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff ffb6 	bl	80088e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d017      	beq.n	80089b2 <tcp_netif_ip_addr_changed+0x66>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d013      	beq.n	80089b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <tcp_netif_ip_addr_changed+0x78>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	e00c      	b.n	80089ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d103      	bne.n	80089a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ef      	bne.n	8008992 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20006bb8 	.word	0x20006bb8
 80089c0:	20006bb0 	.word	0x20006bb0
 80089c4:	20006bb4 	.word	0x20006bb4

080089c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fb49 	bl	8008074 <tcp_segs_free>
    pcb->ooseq = NULL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b08d      	sub	sp, #52	; 0x34
 80089f4:	af04      	add	r7, sp, #16
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <tcp_input+0x1c>
 8008a00:	4b9b      	ldr	r3, [pc, #620]	; (8008c70 <tcp_input+0x280>)
 8008a02:	2283      	movs	r2, #131	; 0x83
 8008a04:	499b      	ldr	r1, [pc, #620]	; (8008c74 <tcp_input+0x284>)
 8008a06:	489c      	ldr	r0, [pc, #624]	; (8008c78 <tcp_input+0x288>)
 8008a08:	f007 fbf4 	bl	80101f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a9a      	ldr	r2, [pc, #616]	; (8008c7c <tcp_input+0x28c>)
 8008a12:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	895b      	ldrh	r3, [r3, #10]
 8008a18:	2b13      	cmp	r3, #19
 8008a1a:	f240 83d1 	bls.w	80091c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a1e:	4b98      	ldr	r3, [pc, #608]	; (8008c80 <tcp_input+0x290>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	4a97      	ldr	r2, [pc, #604]	; (8008c80 <tcp_input+0x290>)
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f006 fc29 	bl	800f280 <ip4_addr_isbroadcast_u32>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 83c7 	bne.w	80091c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a36:	4b92      	ldr	r3, [pc, #584]	; (8008c80 <tcp_input+0x290>)
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a3e:	2be0      	cmp	r3, #224	; 0xe0
 8008a40:	f000 83c0 	beq.w	80091c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a44:	4b8d      	ldr	r3, [pc, #564]	; (8008c7c <tcp_input+0x28c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	899b      	ldrh	r3, [r3, #12]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fc fbcb 	bl	80051e8 <lwip_htons>
 8008a52:	4603      	mov	r3, r0
 8008a54:	0b1b      	lsrs	r3, r3, #12
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a5e:	7cbb      	ldrb	r3, [r7, #18]
 8008a60:	2b13      	cmp	r3, #19
 8008a62:	f240 83b1 	bls.w	80091c8 <tcp_input+0x7d8>
 8008a66:	7cbb      	ldrb	r3, [r7, #18]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	891b      	ldrh	r3, [r3, #8]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	f200 83aa 	bhi.w	80091c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008a74:	7cbb      	ldrb	r3, [r7, #18]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b14      	subs	r3, #20
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	4b81      	ldr	r3, [pc, #516]	; (8008c84 <tcp_input+0x294>)
 8008a7e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008a80:	4b81      	ldr	r3, [pc, #516]	; (8008c88 <tcp_input+0x298>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	895a      	ldrh	r2, [r3, #10]
 8008a8a:	7cbb      	ldrb	r3, [r7, #18]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d309      	bcc.n	8008aa6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008a92:	4b7c      	ldr	r3, [pc, #496]	; (8008c84 <tcp_input+0x294>)
 8008a94:	881a      	ldrh	r2, [r3, #0]
 8008a96:	4b7d      	ldr	r3, [pc, #500]	; (8008c8c <tcp_input+0x29c>)
 8008a98:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008a9a:	7cbb      	ldrb	r3, [r7, #18]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fd fe3a 	bl	8006718 <pbuf_remove_header>
 8008aa4:	e04e      	b.n	8008b44 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <tcp_input+0xca>
 8008aae:	4b70      	ldr	r3, [pc, #448]	; (8008c70 <tcp_input+0x280>)
 8008ab0:	22c2      	movs	r2, #194	; 0xc2
 8008ab2:	4977      	ldr	r1, [pc, #476]	; (8008c90 <tcp_input+0x2a0>)
 8008ab4:	4870      	ldr	r0, [pc, #448]	; (8008c78 <tcp_input+0x288>)
 8008ab6:	f007 fb9d 	bl	80101f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008aba:	2114      	movs	r1, #20
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fd fe2b 	bl	8006718 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	895a      	ldrh	r2, [r3, #10]
 8008ac6:	4b71      	ldr	r3, [pc, #452]	; (8008c8c <tcp_input+0x29c>)
 8008ac8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008aca:	4b6e      	ldr	r3, [pc, #440]	; (8008c84 <tcp_input+0x294>)
 8008acc:	881a      	ldrh	r2, [r3, #0]
 8008ace:	4b6f      	ldr	r3, [pc, #444]	; (8008c8c <tcp_input+0x29c>)
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008ad6:	4b6d      	ldr	r3, [pc, #436]	; (8008c8c <tcp_input+0x29c>)
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fd fe1b 	bl	8006718 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	895b      	ldrh	r3, [r3, #10]
 8008ae8:	8a3a      	ldrh	r2, [r7, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	f200 836e 	bhi.w	80091cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	4a64      	ldr	r2, [pc, #400]	; (8008c88 <tcp_input+0x298>)
 8008af8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	8a3a      	ldrh	r2, [r7, #16]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fd fe08 	bl	8006718 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	891a      	ldrh	r2, [r3, #8]
 8008b0c:	8a3b      	ldrh	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	895b      	ldrh	r3, [r3, #10]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <tcp_input+0x13a>
 8008b1e:	4b54      	ldr	r3, [pc, #336]	; (8008c70 <tcp_input+0x280>)
 8008b20:	22df      	movs	r2, #223	; 0xdf
 8008b22:	495c      	ldr	r1, [pc, #368]	; (8008c94 <tcp_input+0x2a4>)
 8008b24:	4854      	ldr	r0, [pc, #336]	; (8008c78 <tcp_input+0x288>)
 8008b26:	f007 fb65 	bl	80101f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	891a      	ldrh	r2, [r3, #8]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	891b      	ldrh	r3, [r3, #8]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d005      	beq.n	8008b44 <tcp_input+0x154>
 8008b38:	4b4d      	ldr	r3, [pc, #308]	; (8008c70 <tcp_input+0x280>)
 8008b3a:	22e0      	movs	r2, #224	; 0xe0
 8008b3c:	4956      	ldr	r1, [pc, #344]	; (8008c98 <tcp_input+0x2a8>)
 8008b3e:	484e      	ldr	r0, [pc, #312]	; (8008c78 <tcp_input+0x288>)
 8008b40:	f007 fb58 	bl	80101f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b44:	4b4d      	ldr	r3, [pc, #308]	; (8008c7c <tcp_input+0x28c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4a4b      	ldr	r2, [pc, #300]	; (8008c7c <tcp_input+0x28c>)
 8008b4e:	6814      	ldr	r4, [r2, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fc fb49 	bl	80051e8 <lwip_htons>
 8008b56:	4603      	mov	r3, r0
 8008b58:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b5a:	4b48      	ldr	r3, [pc, #288]	; (8008c7c <tcp_input+0x28c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	885b      	ldrh	r3, [r3, #2]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4a46      	ldr	r2, [pc, #280]	; (8008c7c <tcp_input+0x28c>)
 8008b64:	6814      	ldr	r4, [r2, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fc fb3e 	bl	80051e8 <lwip_htons>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b70:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <tcp_input+0x28c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	4a41      	ldr	r2, [pc, #260]	; (8008c7c <tcp_input+0x28c>)
 8008b78:	6814      	ldr	r4, [r2, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fc fb49 	bl	8005212 <lwip_htonl>
 8008b80:	4603      	mov	r3, r0
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	6863      	ldr	r3, [r4, #4]
 8008b86:	4a45      	ldr	r2, [pc, #276]	; (8008c9c <tcp_input+0x2ac>)
 8008b88:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b8a:	4b3c      	ldr	r3, [pc, #240]	; (8008c7c <tcp_input+0x28c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4a3a      	ldr	r2, [pc, #232]	; (8008c7c <tcp_input+0x28c>)
 8008b92:	6814      	ldr	r4, [r2, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fc fb3c 	bl	8005212 <lwip_htonl>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	60a3      	str	r3, [r4, #8]
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	4a3f      	ldr	r2, [pc, #252]	; (8008ca0 <tcp_input+0x2b0>)
 8008ba2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008ba4:	4b35      	ldr	r3, [pc, #212]	; (8008c7c <tcp_input+0x28c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	89db      	ldrh	r3, [r3, #14]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4a33      	ldr	r2, [pc, #204]	; (8008c7c <tcp_input+0x28c>)
 8008bae:	6814      	ldr	r4, [r2, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fc fb19 	bl	80051e8 <lwip_htons>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008bba:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <tcp_input+0x28c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	899b      	ldrh	r3, [r3, #12]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fc fb10 	bl	80051e8 <lwip_htons>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	4b34      	ldr	r3, [pc, #208]	; (8008ca4 <tcp_input+0x2b4>)
 8008bd4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	891a      	ldrh	r2, [r3, #8]
 8008bda:	4b33      	ldr	r3, [pc, #204]	; (8008ca8 <tcp_input+0x2b8>)
 8008bdc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008bde:	4b31      	ldr	r3, [pc, #196]	; (8008ca4 <tcp_input+0x2b4>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00c      	beq.n	8008c04 <tcp_input+0x214>
    tcplen++;
 8008bea:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <tcp_input+0x2b8>)
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <tcp_input+0x2b8>)
 8008bf4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	891a      	ldrh	r2, [r3, #8]
 8008bfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <tcp_input+0x2b8>)
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	f200 82e6 	bhi.w	80091d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c08:	4b28      	ldr	r3, [pc, #160]	; (8008cac <tcp_input+0x2bc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e09d      	b.n	8008d4c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	7d1b      	ldrb	r3, [r3, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <tcp_input+0x234>
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <tcp_input+0x280>)
 8008c1a:	22fb      	movs	r2, #251	; 0xfb
 8008c1c:	4924      	ldr	r1, [pc, #144]	; (8008cb0 <tcp_input+0x2c0>)
 8008c1e:	4816      	ldr	r0, [pc, #88]	; (8008c78 <tcp_input+0x288>)
 8008c20:	f007 fae8 	bl	80101f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	7d1b      	ldrb	r3, [r3, #20]
 8008c28:	2b0a      	cmp	r3, #10
 8008c2a:	d105      	bne.n	8008c38 <tcp_input+0x248>
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <tcp_input+0x280>)
 8008c2e:	22fc      	movs	r2, #252	; 0xfc
 8008c30:	4920      	ldr	r1, [pc, #128]	; (8008cb4 <tcp_input+0x2c4>)
 8008c32:	4811      	ldr	r0, [pc, #68]	; (8008c78 <tcp_input+0x288>)
 8008c34:	f007 fade 	bl	80101f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	7d1b      	ldrb	r3, [r3, #20]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d105      	bne.n	8008c4c <tcp_input+0x25c>
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <tcp_input+0x280>)
 8008c42:	22fd      	movs	r2, #253	; 0xfd
 8008c44:	491c      	ldr	r1, [pc, #112]	; (8008cb8 <tcp_input+0x2c8>)
 8008c46:	480c      	ldr	r0, [pc, #48]	; (8008c78 <tcp_input+0x288>)
 8008c48:	f007 fad4 	bl	80101f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	7a1b      	ldrb	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d033      	beq.n	8008cbc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	7a1a      	ldrb	r2, [r3, #8]
 8008c58:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <tcp_input+0x290>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c60:	3301      	adds	r3, #1
 8008c62:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d029      	beq.n	8008cbc <tcp_input+0x2cc>
      prev = pcb;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	61bb      	str	r3, [r7, #24]
      continue;
 8008c6c:	e06b      	b.n	8008d46 <tcp_input+0x356>
 8008c6e:	bf00      	nop
 8008c70:	08012c5c 	.word	0x08012c5c
 8008c74:	08012c90 	.word	0x08012c90
 8008c78:	08012ca8 	.word	0x08012ca8
 8008c7c:	20006bd4 	.word	0x20006bd4
 8008c80:	2000363c 	.word	0x2000363c
 8008c84:	20006bd8 	.word	0x20006bd8
 8008c88:	20006bdc 	.word	0x20006bdc
 8008c8c:	20006bda 	.word	0x20006bda
 8008c90:	08012cd0 	.word	0x08012cd0
 8008c94:	08012ce0 	.word	0x08012ce0
 8008c98:	08012cec 	.word	0x08012cec
 8008c9c:	20006be4 	.word	0x20006be4
 8008ca0:	20006be8 	.word	0x20006be8
 8008ca4:	20006bf0 	.word	0x20006bf0
 8008ca8:	20006bee 	.word	0x20006bee
 8008cac:	20006bb8 	.word	0x20006bb8
 8008cb0:	08012d0c 	.word	0x08012d0c
 8008cb4:	08012d34 	.word	0x08012d34
 8008cb8:	08012d60 	.word	0x08012d60
    }

    if (pcb->remote_port == tcphdr->src &&
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	8b1a      	ldrh	r2, [r3, #24]
 8008cc0:	4b72      	ldr	r3, [pc, #456]	; (8008e8c <tcp_input+0x49c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d13a      	bne.n	8008d42 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	8ada      	ldrh	r2, [r3, #22]
 8008cd0:	4b6e      	ldr	r3, [pc, #440]	; (8008e8c <tcp_input+0x49c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	885b      	ldrh	r3, [r3, #2]
 8008cd6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d132      	bne.n	8008d42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4b6b      	ldr	r3, [pc, #428]	; (8008e90 <tcp_input+0x4a0>)
 8008ce2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d12c      	bne.n	8008d42 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	4b68      	ldr	r3, [pc, #416]	; (8008e90 <tcp_input+0x4a0>)
 8008cee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d126      	bne.n	8008d42 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d106      	bne.n	8008d0c <tcp_input+0x31c>
 8008cfe:	4b65      	ldr	r3, [pc, #404]	; (8008e94 <tcp_input+0x4a4>)
 8008d00:	f240 120d 	movw	r2, #269	; 0x10d
 8008d04:	4964      	ldr	r1, [pc, #400]	; (8008e98 <tcp_input+0x4a8>)
 8008d06:	4865      	ldr	r0, [pc, #404]	; (8008e9c <tcp_input+0x4ac>)
 8008d08:	f007 fa74 	bl	80101f4 <iprintf>
      if (prev != NULL) {
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <tcp_input+0x338>
        prev->next = pcb->next;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008d1a:	4b61      	ldr	r3, [pc, #388]	; (8008ea0 <tcp_input+0x4b0>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008d22:	4a5f      	ldr	r2, [pc, #380]	; (8008ea0 <tcp_input+0x4b0>)
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d111      	bne.n	8008d56 <tcp_input+0x366>
 8008d32:	4b58      	ldr	r3, [pc, #352]	; (8008e94 <tcp_input+0x4a4>)
 8008d34:	f240 1215 	movw	r2, #277	; 0x115
 8008d38:	495a      	ldr	r1, [pc, #360]	; (8008ea4 <tcp_input+0x4b4>)
 8008d3a:	4858      	ldr	r0, [pc, #352]	; (8008e9c <tcp_input+0x4ac>)
 8008d3c:	f007 fa5a 	bl	80101f4 <iprintf>
      break;
 8008d40:	e009      	b.n	8008d56 <tcp_input+0x366>
    }
    prev = pcb;
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	61fb      	str	r3, [r7, #28]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f47f af5e 	bne.w	8008c10 <tcp_input+0x220>
 8008d54:	e000      	b.n	8008d58 <tcp_input+0x368>
      break;
 8008d56:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 80aa 	bne.w	8008eb4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d60:	4b51      	ldr	r3, [pc, #324]	; (8008ea8 <tcp_input+0x4b8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	e03f      	b.n	8008de8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	2b0a      	cmp	r3, #10
 8008d6e:	d006      	beq.n	8008d7e <tcp_input+0x38e>
 8008d70:	4b48      	ldr	r3, [pc, #288]	; (8008e94 <tcp_input+0x4a4>)
 8008d72:	f240 121f 	movw	r2, #287	; 0x11f
 8008d76:	494d      	ldr	r1, [pc, #308]	; (8008eac <tcp_input+0x4bc>)
 8008d78:	4848      	ldr	r0, [pc, #288]	; (8008e9c <tcp_input+0x4ac>)
 8008d7a:	f007 fa3b 	bl	80101f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	7a1b      	ldrb	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	7a1a      	ldrb	r2, [r3, #8]
 8008d8a:	4b41      	ldr	r3, [pc, #260]	; (8008e90 <tcp_input+0x4a0>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d92:	3301      	adds	r3, #1
 8008d94:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d122      	bne.n	8008de0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	8b1a      	ldrh	r2, [r3, #24]
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <tcp_input+0x49c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d11b      	bne.n	8008de2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	8ada      	ldrh	r2, [r3, #22]
 8008dae:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <tcp_input+0x49c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	885b      	ldrh	r3, [r3, #2]
 8008db4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d113      	bne.n	8008de2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	4b34      	ldr	r3, [pc, #208]	; (8008e90 <tcp_input+0x4a0>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d10d      	bne.n	8008de2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b31      	ldr	r3, [pc, #196]	; (8008e90 <tcp_input+0x4a0>)
 8008dcc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d107      	bne.n	8008de2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008dd2:	69f8      	ldr	r0, [r7, #28]
 8008dd4:	f000 fb56 	bl	8009484 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7fd fd23 	bl	8006824 <pbuf_free>
        return;
 8008dde:	e1fd      	b.n	80091dc <tcp_input+0x7ec>
        continue;
 8008de0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	61fb      	str	r3, [r7, #28]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1bc      	bne.n	8008d68 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008df2:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <tcp_input+0x4c0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e02a      	b.n	8008e50 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	7a1b      	ldrb	r3, [r3, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	7a1a      	ldrb	r2, [r3, #8]
 8008e06:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <tcp_input+0x4a0>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e0e:	3301      	adds	r3, #1
 8008e10:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d002      	beq.n	8008e1c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	61bb      	str	r3, [r7, #24]
        continue;
 8008e1a:	e016      	b.n	8008e4a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	8ada      	ldrh	r2, [r3, #22]
 8008e20:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <tcp_input+0x49c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d10c      	bne.n	8008e46 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <tcp_input+0x4a0>)
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d00f      	beq.n	8008e58 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <tcp_input+0x46a>
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1d1      	bne.n	8008dfa <tcp_input+0x40a>
 8008e56:	e000      	b.n	8008e5a <tcp_input+0x46a>
            break;
 8008e58:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d029      	beq.n	8008eb4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008e6e:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <tcp_input+0x4c0>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008e76:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <tcp_input+0x4c0>)
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e7c:	6978      	ldr	r0, [r7, #20]
 8008e7e:	f000 fa03 	bl	8009288 <tcp_listen_input>
      }
      pbuf_free(p);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fd fcce 	bl	8006824 <pbuf_free>
      return;
 8008e88:	e1a8      	b.n	80091dc <tcp_input+0x7ec>
 8008e8a:	bf00      	nop
 8008e8c:	20006bd4 	.word	0x20006bd4
 8008e90:	2000363c 	.word	0x2000363c
 8008e94:	08012c5c 	.word	0x08012c5c
 8008e98:	08012d88 	.word	0x08012d88
 8008e9c:	08012ca8 	.word	0x08012ca8
 8008ea0:	20006bb8 	.word	0x20006bb8
 8008ea4:	08012db4 	.word	0x08012db4
 8008ea8:	20006bbc 	.word	0x20006bbc
 8008eac:	08012de0 	.word	0x08012de0
 8008eb0:	20006bb4 	.word	0x20006bb4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8158 	beq.w	800916c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008ebc:	4b95      	ldr	r3, [pc, #596]	; (8009114 <tcp_input+0x724>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	891a      	ldrh	r2, [r3, #8]
 8008ec6:	4b93      	ldr	r3, [pc, #588]	; (8009114 <tcp_input+0x724>)
 8008ec8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008eca:	4a92      	ldr	r2, [pc, #584]	; (8009114 <tcp_input+0x724>)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008ed0:	4b91      	ldr	r3, [pc, #580]	; (8009118 <tcp_input+0x728>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a8f      	ldr	r2, [pc, #572]	; (8009114 <tcp_input+0x724>)
 8008ed6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008ed8:	4b90      	ldr	r3, [pc, #576]	; (800911c <tcp_input+0x72c>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008ede:	4b90      	ldr	r3, [pc, #576]	; (8009120 <tcp_input+0x730>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008ee4:	4b8f      	ldr	r3, [pc, #572]	; (8009124 <tcp_input+0x734>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008eea:	4b8f      	ldr	r3, [pc, #572]	; (8009128 <tcp_input+0x738>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7b5b      	ldrb	r3, [r3, #13]
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d017      	beq.n	8008f3c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f0c:	69f8      	ldr	r0, [r7, #28]
 8008f0e:	f7ff f835 	bl	8007f7c <tcp_process_refused_data>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f113 0f0d 	cmn.w	r3, #13
 8008f18:	d007      	beq.n	8008f2a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f22:	4b82      	ldr	r3, [pc, #520]	; (800912c <tcp_input+0x73c>)
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d008      	beq.n	8008f3c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f040 80e3 	bne.w	80090fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008f34:	69f8      	ldr	r0, [r7, #28]
 8008f36:	f003 fe05 	bl	800cb44 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008f3a:	e0de      	b.n	80090fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008f3c:	4a7c      	ldr	r2, [pc, #496]	; (8009130 <tcp_input+0x740>)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f42:	69f8      	ldr	r0, [r7, #28]
 8008f44:	f000 fb18 	bl	8009578 <tcp_process>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f50:	f113 0f0d 	cmn.w	r3, #13
 8008f54:	f000 80d3 	beq.w	80090fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008f58:	4b71      	ldr	r3, [pc, #452]	; (8009120 <tcp_input+0x730>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d015      	beq.n	8008f90 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <tcp_input+0x590>
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	6912      	ldr	r2, [r2, #16]
 8008f78:	f06f 010d 	mvn.w	r1, #13
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f80:	69f9      	ldr	r1, [r7, #28]
 8008f82:	486c      	ldr	r0, [pc, #432]	; (8009134 <tcp_input+0x744>)
 8008f84:	f7ff fbbc 	bl	8008700 <tcp_pcb_remove>
        tcp_free(pcb);
 8008f88:	69f8      	ldr	r0, [r7, #28]
 8008f8a:	f7fd fefb 	bl	8006d84 <tcp_free>
 8008f8e:	e0da      	b.n	8009146 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008f94:	4b63      	ldr	r3, [pc, #396]	; (8009124 <tcp_input+0x734>)
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01d      	beq.n	8008fd8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008f9c:	4b61      	ldr	r3, [pc, #388]	; (8009124 <tcp_input+0x734>)
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <tcp_input+0x5d2>
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	6910      	ldr	r0, [r2, #16]
 8008fb6:	89fa      	ldrh	r2, [r7, #14]
 8008fb8:	69f9      	ldr	r1, [r7, #28]
 8008fba:	4798      	blx	r3
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	74fb      	strb	r3, [r7, #19]
 8008fc0:	e001      	b.n	8008fc6 <tcp_input+0x5d6>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fca:	f113 0f0d 	cmn.w	r3, #13
 8008fce:	f000 8098 	beq.w	8009102 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008fd2:	4b54      	ldr	r3, [pc, #336]	; (8009124 <tcp_input+0x734>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008fd8:	69f8      	ldr	r0, [r7, #28]
 8008fda:	f000 f915 	bl	8009208 <tcp_input_delayed_close>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 8090 	bne.w	8009106 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008fe6:	4b4d      	ldr	r3, [pc, #308]	; (800911c <tcp_input+0x72c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d041      	beq.n	8009072 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d006      	beq.n	8009004 <tcp_input+0x614>
 8008ff6:	4b50      	ldr	r3, [pc, #320]	; (8009138 <tcp_input+0x748>)
 8008ff8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008ffc:	494f      	ldr	r1, [pc, #316]	; (800913c <tcp_input+0x74c>)
 8008ffe:	4850      	ldr	r0, [pc, #320]	; (8009140 <tcp_input+0x750>)
 8009000:	f007 f8f8 	bl	80101f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	8b5b      	ldrh	r3, [r3, #26]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009010:	4b42      	ldr	r3, [pc, #264]	; (800911c <tcp_input+0x72c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4618      	mov	r0, r3
 8009016:	f7fd fc05 	bl	8006824 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800901a:	69f8      	ldr	r0, [r7, #28]
 800901c:	f7fe f99a 	bl	8007354 <tcp_abort>
            goto aborted;
 8009020:	e091      	b.n	8009146 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00c      	beq.n	8009046 <tcp_input+0x656>
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	6918      	ldr	r0, [r3, #16]
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <tcp_input+0x72c>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	2300      	movs	r3, #0
 800903c:	69f9      	ldr	r1, [r7, #28]
 800903e:	47a0      	blx	r4
 8009040:	4603      	mov	r3, r0
 8009042:	74fb      	strb	r3, [r7, #19]
 8009044:	e008      	b.n	8009058 <tcp_input+0x668>
 8009046:	4b35      	ldr	r3, [pc, #212]	; (800911c <tcp_input+0x72c>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	2300      	movs	r3, #0
 800904c:	69f9      	ldr	r1, [r7, #28]
 800904e:	2000      	movs	r0, #0
 8009050:	f7ff f888 	bl	8008164 <tcp_recv_null>
 8009054:	4603      	mov	r3, r0
 8009056:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800905c:	f113 0f0d 	cmn.w	r3, #13
 8009060:	d053      	beq.n	800910a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800906a:	4b2c      	ldr	r3, [pc, #176]	; (800911c <tcp_input+0x72c>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009072:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <tcp_input+0x730>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d030      	beq.n	80090e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908a:	7b5a      	ldrb	r2, [r3, #13]
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009090:	f042 0220 	orr.w	r2, r2, #32
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	735a      	strb	r2, [r3, #13]
 8009098:	e022      	b.n	80090e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80090a2:	d005      	beq.n	80090b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a8:	3301      	adds	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <tcp_input+0x6e2>
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	6918      	ldr	r0, [r3, #16]
 80090c4:	2300      	movs	r3, #0
 80090c6:	2200      	movs	r2, #0
 80090c8:	69f9      	ldr	r1, [r7, #28]
 80090ca:	47a0      	blx	r4
 80090cc:	4603      	mov	r3, r0
 80090ce:	74fb      	strb	r3, [r7, #19]
 80090d0:	e001      	b.n	80090d6 <tcp_input+0x6e6>
 80090d2:	2300      	movs	r3, #0
 80090d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80090d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090da:	f113 0f0d 	cmn.w	r3, #13
 80090de:	d016      	beq.n	800910e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80090e0:	4b13      	ldr	r3, [pc, #76]	; (8009130 <tcp_input+0x740>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80090e6:	69f8      	ldr	r0, [r7, #28]
 80090e8:	f000 f88e 	bl	8009208 <tcp_input_delayed_close>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d128      	bne.n	8009144 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80090f2:	69f8      	ldr	r0, [r7, #28]
 80090f4:	f002 ff20 	bl	800bf38 <tcp_output>
 80090f8:	e025      	b.n	8009146 <tcp_input+0x756>
        goto aborted;
 80090fa:	bf00      	nop
 80090fc:	e023      	b.n	8009146 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80090fe:	bf00      	nop
 8009100:	e021      	b.n	8009146 <tcp_input+0x756>
              goto aborted;
 8009102:	bf00      	nop
 8009104:	e01f      	b.n	8009146 <tcp_input+0x756>
          goto aborted;
 8009106:	bf00      	nop
 8009108:	e01d      	b.n	8009146 <tcp_input+0x756>
            goto aborted;
 800910a:	bf00      	nop
 800910c:	e01b      	b.n	8009146 <tcp_input+0x756>
              goto aborted;
 800910e:	bf00      	nop
 8009110:	e019      	b.n	8009146 <tcp_input+0x756>
 8009112:	bf00      	nop
 8009114:	20006bc4 	.word	0x20006bc4
 8009118:	20006bd4 	.word	0x20006bd4
 800911c:	20006bf4 	.word	0x20006bf4
 8009120:	20006bf1 	.word	0x20006bf1
 8009124:	20006bec 	.word	0x20006bec
 8009128:	20006bf0 	.word	0x20006bf0
 800912c:	20006bee 	.word	0x20006bee
 8009130:	20006bf8 	.word	0x20006bf8
 8009134:	20006bb8 	.word	0x20006bb8
 8009138:	08012c5c 	.word	0x08012c5c
 800913c:	08012e10 	.word	0x08012e10
 8009140:	08012ca8 	.word	0x08012ca8
          goto aborted;
 8009144:	bf00      	nop
    tcp_input_pcb = NULL;
 8009146:	4b27      	ldr	r3, [pc, #156]	; (80091e4 <tcp_input+0x7f4>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800914c:	4b26      	ldr	r3, [pc, #152]	; (80091e8 <tcp_input+0x7f8>)
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009152:	4b26      	ldr	r3, [pc, #152]	; (80091ec <tcp_input+0x7fc>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d03f      	beq.n	80091da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800915a:	4b24      	ldr	r3, [pc, #144]	; (80091ec <tcp_input+0x7fc>)
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd fb60 	bl	8006824 <pbuf_free>
      inseg.p = NULL;
 8009164:	4b21      	ldr	r3, [pc, #132]	; (80091ec <tcp_input+0x7fc>)
 8009166:	2200      	movs	r2, #0
 8009168:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800916a:	e036      	b.n	80091da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800916c:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <tcp_input+0x800>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	899b      	ldrh	r3, [r3, #12]
 8009172:	b29b      	uxth	r3, r3
 8009174:	4618      	mov	r0, r3
 8009176:	f7fc f837 	bl	80051e8 <lwip_htons>
 800917a:	4603      	mov	r3, r0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	d118      	bne.n	80091b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009186:	4b1b      	ldr	r3, [pc, #108]	; (80091f4 <tcp_input+0x804>)
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <tcp_input+0x808>)
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <tcp_input+0x80c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009196:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <tcp_input+0x800>)
 8009198:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800919a:	885b      	ldrh	r3, [r3, #2]
 800919c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800919e:	4a14      	ldr	r2, [pc, #80]	; (80091f0 <tcp_input+0x800>)
 80091a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a2:	8812      	ldrh	r2, [r2, #0]
 80091a4:	b292      	uxth	r2, r2
 80091a6:	9202      	str	r2, [sp, #8]
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <tcp_input+0x810>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <tcp_input+0x814>)
 80091b0:	4602      	mov	r2, r0
 80091b2:	2000      	movs	r0, #0
 80091b4:	f003 fc74 	bl	800caa0 <tcp_rst>
    pbuf_free(p);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7fd fb33 	bl	8006824 <pbuf_free>
  return;
 80091be:	e00c      	b.n	80091da <tcp_input+0x7ea>
    goto dropped;
 80091c0:	bf00      	nop
 80091c2:	e006      	b.n	80091d2 <tcp_input+0x7e2>
    goto dropped;
 80091c4:	bf00      	nop
 80091c6:	e004      	b.n	80091d2 <tcp_input+0x7e2>
    goto dropped;
 80091c8:	bf00      	nop
 80091ca:	e002      	b.n	80091d2 <tcp_input+0x7e2>
      goto dropped;
 80091cc:	bf00      	nop
 80091ce:	e000      	b.n	80091d2 <tcp_input+0x7e2>
      goto dropped;
 80091d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fd fb26 	bl	8006824 <pbuf_free>
 80091d8:	e000      	b.n	80091dc <tcp_input+0x7ec>
  return;
 80091da:	bf00      	nop
}
 80091dc:	3724      	adds	r7, #36	; 0x24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd90      	pop	{r4, r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20006bf8 	.word	0x20006bf8
 80091e8:	20006bf4 	.word	0x20006bf4
 80091ec:	20006bc4 	.word	0x20006bc4
 80091f0:	20006bd4 	.word	0x20006bd4
 80091f4:	20006be8 	.word	0x20006be8
 80091f8:	20006bee 	.word	0x20006bee
 80091fc:	20006be4 	.word	0x20006be4
 8009200:	2000364c 	.word	0x2000364c
 8009204:	20003650 	.word	0x20003650

08009208 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <tcp_input_delayed_close+0x1c>
 8009216:	4b17      	ldr	r3, [pc, #92]	; (8009274 <tcp_input_delayed_close+0x6c>)
 8009218:	f240 225a 	movw	r2, #602	; 0x25a
 800921c:	4916      	ldr	r1, [pc, #88]	; (8009278 <tcp_input_delayed_close+0x70>)
 800921e:	4817      	ldr	r0, [pc, #92]	; (800927c <tcp_input_delayed_close+0x74>)
 8009220:	f006 ffe8 	bl	80101f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <tcp_input_delayed_close+0x78>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01c      	beq.n	800926a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8b5b      	ldrh	r3, [r3, #26]
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10d      	bne.n	8009258 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <tcp_input_delayed_close+0x50>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6912      	ldr	r2, [r2, #16]
 8009250:	f06f 010e 	mvn.w	r1, #14
 8009254:	4610      	mov	r0, r2
 8009256:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	480a      	ldr	r0, [pc, #40]	; (8009284 <tcp_input_delayed_close+0x7c>)
 800925c:	f7ff fa50 	bl	8008700 <tcp_pcb_remove>
    tcp_free(pcb);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fd fd8f 	bl	8006d84 <tcp_free>
    return 1;
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	08012c5c 	.word	0x08012c5c
 8009278:	08012e2c 	.word	0x08012e2c
 800927c:	08012ca8 	.word	0x08012ca8
 8009280:	20006bf1 	.word	0x20006bf1
 8009284:	20006bb8 	.word	0x20006bb8

08009288 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b08b      	sub	sp, #44	; 0x2c
 800928c:	af04      	add	r7, sp, #16
 800928e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009290:	4b6f      	ldr	r3, [pc, #444]	; (8009450 <tcp_listen_input+0x1c8>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 80d2 	bne.w	8009442 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <tcp_listen_input+0x2a>
 80092a4:	4b6b      	ldr	r3, [pc, #428]	; (8009454 <tcp_listen_input+0x1cc>)
 80092a6:	f240 2281 	movw	r2, #641	; 0x281
 80092aa:	496b      	ldr	r1, [pc, #428]	; (8009458 <tcp_listen_input+0x1d0>)
 80092ac:	486b      	ldr	r0, [pc, #428]	; (800945c <tcp_listen_input+0x1d4>)
 80092ae:	f006 ffa1 	bl	80101f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80092b2:	4b67      	ldr	r3, [pc, #412]	; (8009450 <tcp_listen_input+0x1c8>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f003 0310 	and.w	r3, r3, #16
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d019      	beq.n	80092f2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092be:	4b68      	ldr	r3, [pc, #416]	; (8009460 <tcp_listen_input+0x1d8>)
 80092c0:	6819      	ldr	r1, [r3, #0]
 80092c2:	4b68      	ldr	r3, [pc, #416]	; (8009464 <tcp_listen_input+0x1dc>)
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	4b67      	ldr	r3, [pc, #412]	; (8009468 <tcp_listen_input+0x1e0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092ce:	4b67      	ldr	r3, [pc, #412]	; (800946c <tcp_listen_input+0x1e4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092d6:	4a65      	ldr	r2, [pc, #404]	; (800946c <tcp_listen_input+0x1e4>)
 80092d8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092da:	8812      	ldrh	r2, [r2, #0]
 80092dc:	b292      	uxth	r2, r2
 80092de:	9202      	str	r2, [sp, #8]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	4b63      	ldr	r3, [pc, #396]	; (8009470 <tcp_listen_input+0x1e8>)
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4b63      	ldr	r3, [pc, #396]	; (8009474 <tcp_listen_input+0x1ec>)
 80092e8:	4602      	mov	r2, r0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f003 fbd8 	bl	800caa0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80092f0:	e0a9      	b.n	8009446 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <tcp_listen_input+0x1c8>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80a3 	beq.w	8009446 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7d5b      	ldrb	r3, [r3, #21]
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff f851 	bl	80083ac <tcp_alloc>
 800930a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d111      	bne.n	8009336 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <tcp_listen_input+0xa8>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6910      	ldr	r0, [r2, #16]
 8009322:	f04f 32ff 	mov.w	r2, #4294967295
 8009326:	2100      	movs	r1, #0
 8009328:	4798      	blx	r3
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]
      return;
 800932e:	e08b      	b.n	8009448 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009330:	23f0      	movs	r3, #240	; 0xf0
 8009332:	73bb      	strb	r3, [r7, #14]
      return;
 8009334:	e088      	b.n	8009448 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <tcp_listen_input+0x1f0>)
 8009338:	695a      	ldr	r2, [r3, #20]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800933e:	4b4e      	ldr	r3, [pc, #312]	; (8009478 <tcp_listen_input+0x1f0>)
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8ada      	ldrh	r2, [r3, #22]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800934e:	4b47      	ldr	r3, [pc, #284]	; (800946c <tcp_listen_input+0x1e4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29a      	uxth	r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2203      	movs	r2, #3
 800935e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009360:	4b41      	ldr	r3, [pc, #260]	; (8009468 <tcp_listen_input+0x1e0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f7ff fa58 	bl	8008828 <tcp_next_iss>
 8009378:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009392:	4b35      	ldr	r3, [pc, #212]	; (8009468 <tcp_listen_input+0x1e0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	1e5a      	subs	r2, r3, #1
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7a5b      	ldrb	r3, [r3, #9]
 80093ae:	f003 030c 	and.w	r3, r3, #12
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7a1a      	ldrb	r2, [r3, #8]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80093c0:	4b2e      	ldr	r3, [pc, #184]	; (800947c <tcp_listen_input+0x1f4>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	60da      	str	r2, [r3, #12]
 80093c8:	4a2c      	ldr	r2, [pc, #176]	; (800947c <tcp_listen_input+0x1f4>)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	f003 fd29 	bl	800ce24 <tcp_timer_needed>
 80093d2:	4b2b      	ldr	r3, [pc, #172]	; (8009480 <tcp_listen_input+0x1f8>)
 80093d4:	2201      	movs	r2, #1
 80093d6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093d8:	6978      	ldr	r0, [r7, #20]
 80093da:	f001 fd8f 	bl	800aefc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093de:	4b23      	ldr	r3, [pc, #140]	; (800946c <tcp_listen_input+0x1e4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	89db      	ldrh	r3, [r3, #14]
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	3304      	adds	r3, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f005 fca7 	bl	800ed54 <ip4_route>
 8009406:	4601      	mov	r1, r0
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	3304      	adds	r3, #4
 800940c:	461a      	mov	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff fa30 	bl	8008874 <tcp_eff_send_mss_netif>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800941c:	2112      	movs	r1, #18
 800941e:	6978      	ldr	r0, [r7, #20]
 8009420:	f002 fc9c 	bl	800bd5c <tcp_enqueue_flags>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009430:	2100      	movs	r1, #0
 8009432:	6978      	ldr	r0, [r7, #20]
 8009434:	f7fd fed0 	bl	80071d8 <tcp_abandon>
      return;
 8009438:	e006      	b.n	8009448 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f002 fd7c 	bl	800bf38 <tcp_output>
  return;
 8009440:	e001      	b.n	8009446 <tcp_listen_input+0x1be>
    return;
 8009442:	bf00      	nop
 8009444:	e000      	b.n	8009448 <tcp_listen_input+0x1c0>
  return;
 8009446:	bf00      	nop
}
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	bd90      	pop	{r4, r7, pc}
 800944e:	bf00      	nop
 8009450:	20006bf0 	.word	0x20006bf0
 8009454:	08012c5c 	.word	0x08012c5c
 8009458:	08012e54 	.word	0x08012e54
 800945c:	08012ca8 	.word	0x08012ca8
 8009460:	20006be8 	.word	0x20006be8
 8009464:	20006bee 	.word	0x20006bee
 8009468:	20006be4 	.word	0x20006be4
 800946c:	20006bd4 	.word	0x20006bd4
 8009470:	2000364c 	.word	0x2000364c
 8009474:	20003650 	.word	0x20003650
 8009478:	2000363c 	.word	0x2000363c
 800947c:	20006bb8 	.word	0x20006bb8
 8009480:	20006bc0 	.word	0x20006bc0

08009484 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af04      	add	r7, sp, #16
 800948a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800948c:	4b2f      	ldr	r3, [pc, #188]	; (800954c <tcp_timewait_input+0xc8>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d153      	bne.n	8009540 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <tcp_timewait_input+0x28>
 800949e:	4b2c      	ldr	r3, [pc, #176]	; (8009550 <tcp_timewait_input+0xcc>)
 80094a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80094a4:	492b      	ldr	r1, [pc, #172]	; (8009554 <tcp_timewait_input+0xd0>)
 80094a6:	482c      	ldr	r0, [pc, #176]	; (8009558 <tcp_timewait_input+0xd4>)
 80094a8:	f006 fea4 	bl	80101f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80094ac:	4b27      	ldr	r3, [pc, #156]	; (800954c <tcp_timewait_input+0xc8>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d02a      	beq.n	800950e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80094b8:	4b28      	ldr	r3, [pc, #160]	; (800955c <tcp_timewait_input+0xd8>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	db2d      	blt.n	8009522 <tcp_timewait_input+0x9e>
 80094c6:	4b25      	ldr	r3, [pc, #148]	; (800955c <tcp_timewait_input+0xd8>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094d2:	440b      	add	r3, r1
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc23      	bgt.n	8009522 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094da:	4b21      	ldr	r3, [pc, #132]	; (8009560 <tcp_timewait_input+0xdc>)
 80094dc:	6819      	ldr	r1, [r3, #0]
 80094de:	4b21      	ldr	r3, [pc, #132]	; (8009564 <tcp_timewait_input+0xe0>)
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <tcp_timewait_input+0xd8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094ea:	4b1f      	ldr	r3, [pc, #124]	; (8009568 <tcp_timewait_input+0xe4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ee:	885b      	ldrh	r3, [r3, #2]
 80094f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094f2:	4a1d      	ldr	r2, [pc, #116]	; (8009568 <tcp_timewait_input+0xe4>)
 80094f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094f6:	8812      	ldrh	r2, [r2, #0]
 80094f8:	b292      	uxth	r2, r2
 80094fa:	9202      	str	r2, [sp, #8]
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	4b1b      	ldr	r3, [pc, #108]	; (800956c <tcp_timewait_input+0xe8>)
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	4b1b      	ldr	r3, [pc, #108]	; (8009570 <tcp_timewait_input+0xec>)
 8009504:	4602      	mov	r2, r0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f003 faca 	bl	800caa0 <tcp_rst>
      return;
 800950c:	e01b      	b.n	8009546 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800950e:	4b0f      	ldr	r3, [pc, #60]	; (800954c <tcp_timewait_input+0xc8>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800951a:	4b16      	ldr	r3, [pc, #88]	; (8009574 <tcp_timewait_input+0xf0>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <tcp_timewait_input+0xe0>)
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00c      	beq.n	8009544 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	8b5b      	ldrh	r3, [r3, #26]
 800952e:	f043 0302 	orr.w	r3, r3, #2
 8009532:	b29a      	uxth	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 fcfd 	bl	800bf38 <tcp_output>
  }
  return;
 800953e:	e001      	b.n	8009544 <tcp_timewait_input+0xc0>
    return;
 8009540:	bf00      	nop
 8009542:	e000      	b.n	8009546 <tcp_timewait_input+0xc2>
  return;
 8009544:	bf00      	nop
}
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20006bf0 	.word	0x20006bf0
 8009550:	08012c5c 	.word	0x08012c5c
 8009554:	08012e74 	.word	0x08012e74
 8009558:	08012ca8 	.word	0x08012ca8
 800955c:	20006be4 	.word	0x20006be4
 8009560:	20006be8 	.word	0x20006be8
 8009564:	20006bee 	.word	0x20006bee
 8009568:	20006bd4 	.word	0x20006bd4
 800956c:	2000364c 	.word	0x2000364c
 8009570:	20003650 	.word	0x20003650
 8009574:	20006bac 	.word	0x20006bac

08009578 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009578:	b590      	push	{r4, r7, lr}
 800957a:	b08d      	sub	sp, #52	; 0x34
 800957c:	af04      	add	r7, sp, #16
 800957e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <tcp_process+0x24>
 800958e:	4b9d      	ldr	r3, [pc, #628]	; (8009804 <tcp_process+0x28c>)
 8009590:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009594:	499c      	ldr	r1, [pc, #624]	; (8009808 <tcp_process+0x290>)
 8009596:	489d      	ldr	r0, [pc, #628]	; (800980c <tcp_process+0x294>)
 8009598:	f006 fe2c 	bl	80101f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800959c:	4b9c      	ldr	r3, [pc, #624]	; (8009810 <tcp_process+0x298>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d04e      	beq.n	8009646 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7d1b      	ldrb	r3, [r3, #20]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d108      	bne.n	80095c2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095b4:	4b97      	ldr	r3, [pc, #604]	; (8009814 <tcp_process+0x29c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d123      	bne.n	8009604 <tcp_process+0x8c>
        acceptable = 1;
 80095bc:	2301      	movs	r3, #1
 80095be:	76fb      	strb	r3, [r7, #27]
 80095c0:	e020      	b.n	8009604 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c6:	4b94      	ldr	r3, [pc, #592]	; (8009818 <tcp_process+0x2a0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d102      	bne.n	80095d4 <tcp_process+0x5c>
        acceptable = 1;
 80095ce:	2301      	movs	r3, #1
 80095d0:	76fb      	strb	r3, [r7, #27]
 80095d2:	e017      	b.n	8009604 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095d4:	4b90      	ldr	r3, [pc, #576]	; (8009818 <tcp_process+0x2a0>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	db10      	blt.n	8009604 <tcp_process+0x8c>
 80095e2:	4b8d      	ldr	r3, [pc, #564]	; (8009818 <tcp_process+0x2a0>)
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095ee:	440b      	add	r3, r1
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dc06      	bgt.n	8009604 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8b5b      	ldrh	r3, [r3, #26]
 80095fa:	f043 0302 	orr.w	r3, r3, #2
 80095fe:	b29a      	uxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009604:	7efb      	ldrb	r3, [r7, #27]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01b      	beq.n	8009642 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	7d1b      	ldrb	r3, [r3, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <tcp_process+0xa8>
 8009612:	4b7c      	ldr	r3, [pc, #496]	; (8009804 <tcp_process+0x28c>)
 8009614:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009618:	4980      	ldr	r1, [pc, #512]	; (800981c <tcp_process+0x2a4>)
 800961a:	487c      	ldr	r0, [pc, #496]	; (800980c <tcp_process+0x294>)
 800961c:	f006 fdea 	bl	80101f4 <iprintf>
      recv_flags |= TF_RESET;
 8009620:	4b7f      	ldr	r3, [pc, #508]	; (8009820 <tcp_process+0x2a8>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f043 0308 	orr.w	r3, r3, #8
 8009628:	b2da      	uxtb	r2, r3
 800962a:	4b7d      	ldr	r3, [pc, #500]	; (8009820 <tcp_process+0x2a8>)
 800962c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	8b5b      	ldrh	r3, [r3, #26]
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800963c:	f06f 030d 	mvn.w	r3, #13
 8009640:	e37a      	b.n	8009d38 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	e378      	b.n	8009d38 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009646:	4b72      	ldr	r3, [pc, #456]	; (8009810 <tcp_process+0x298>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <tcp_process+0xfc>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7d1b      	ldrb	r3, [r3, #20]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d00c      	beq.n	8009674 <tcp_process+0xfc>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7d1b      	ldrb	r3, [r3, #20]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d008      	beq.n	8009674 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8b5b      	ldrh	r3, [r3, #26]
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	b29a      	uxth	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e361      	b.n	8009d38 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	8b5b      	ldrh	r3, [r3, #26]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009680:	4b68      	ldr	r3, [pc, #416]	; (8009824 <tcp_process+0x2ac>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fc2f 	bl	800aefc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7d1b      	ldrb	r3, [r3, #20]
 80096a2:	3b02      	subs	r3, #2
 80096a4:	2b07      	cmp	r3, #7
 80096a6:	f200 8337 	bhi.w	8009d18 <tcp_process+0x7a0>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <tcp_process+0x138>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096d1 	.word	0x080096d1
 80096b4:	08009901 	.word	0x08009901
 80096b8:	08009a79 	.word	0x08009a79
 80096bc:	08009aa3 	.word	0x08009aa3
 80096c0:	08009bc7 	.word	0x08009bc7
 80096c4:	08009a79 	.word	0x08009a79
 80096c8:	08009c53 	.word	0x08009c53
 80096cc:	08009ce3 	.word	0x08009ce3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096d0:	4b4f      	ldr	r3, [pc, #316]	; (8009810 <tcp_process+0x298>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 80e4 	beq.w	80098a6 <tcp_process+0x32e>
 80096de:	4b4c      	ldr	r3, [pc, #304]	; (8009810 <tcp_process+0x298>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80dd 	beq.w	80098a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	4b48      	ldr	r3, [pc, #288]	; (8009814 <tcp_process+0x29c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	f040 80d5 	bne.w	80098a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80096fc:	4b46      	ldr	r3, [pc, #280]	; (8009818 <tcp_process+0x2a0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800970e:	4b41      	ldr	r3, [pc, #260]	; (8009814 <tcp_process+0x29c>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009716:	4b44      	ldr	r3, [pc, #272]	; (8009828 <tcp_process+0x2b0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	89db      	ldrh	r3, [r3, #14]
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009730:	4b39      	ldr	r3, [pc, #228]	; (8009818 <tcp_process+0x2a0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2204      	movs	r2, #4
 800973e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f005 fb03 	bl	800ed54 <ip4_route>
 800974e:	4601      	mov	r1, r0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3304      	adds	r3, #4
 8009754:	461a      	mov	r2, r3
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff f88c 	bl	8008874 <tcp_eff_send_mss_netif>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009768:	009a      	lsls	r2, r3, #2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800976e:	005b      	lsls	r3, r3, #1
 8009770:	f241 111c 	movw	r1, #4380	; 0x111c
 8009774:	428b      	cmp	r3, r1
 8009776:	bf38      	it	cc
 8009778:	460b      	movcc	r3, r1
 800977a:	429a      	cmp	r2, r3
 800977c:	d204      	bcs.n	8009788 <tcp_process+0x210>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	b29b      	uxth	r3, r3
 8009786:	e00d      	b.n	80097a4 <tcp_process+0x22c>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009792:	4293      	cmp	r3, r2
 8009794:	d904      	bls.n	80097a0 <tcp_process+0x228>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	e001      	b.n	80097a4 <tcp_process+0x22c>
 80097a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <tcp_process+0x24a>
 80097b4:	4b13      	ldr	r3, [pc, #76]	; (8009804 <tcp_process+0x28c>)
 80097b6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80097ba:	491c      	ldr	r1, [pc, #112]	; (800982c <tcp_process+0x2b4>)
 80097bc:	4813      	ldr	r0, [pc, #76]	; (800980c <tcp_process+0x294>)
 80097be:	f006 fd19 	bl	80101f4 <iprintf>
        --pcb->snd_queuelen;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d12a      	bne.n	8009834 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <tcp_process+0x280>
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <tcp_process+0x28c>)
 80097ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 80097f0:	490f      	ldr	r1, [pc, #60]	; (8009830 <tcp_process+0x2b8>)
 80097f2:	4806      	ldr	r0, [pc, #24]	; (800980c <tcp_process+0x294>)
 80097f4:	f006 fcfe 	bl	80101f4 <iprintf>
          pcb->unsent = rseg->next;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	66da      	str	r2, [r3, #108]	; 0x6c
 8009800:	e01c      	b.n	800983c <tcp_process+0x2c4>
 8009802:	bf00      	nop
 8009804:	08012c5c 	.word	0x08012c5c
 8009808:	08012e94 	.word	0x08012e94
 800980c:	08012ca8 	.word	0x08012ca8
 8009810:	20006bf0 	.word	0x20006bf0
 8009814:	20006be8 	.word	0x20006be8
 8009818:	20006be4 	.word	0x20006be4
 800981c:	08012eb0 	.word	0x08012eb0
 8009820:	20006bf1 	.word	0x20006bf1
 8009824:	20006bac 	.word	0x20006bac
 8009828:	20006bd4 	.word	0x20006bd4
 800982c:	08012ed0 	.word	0x08012ed0
 8009830:	08012ee8 	.word	0x08012ee8
        } else {
          pcb->unacked = rseg->next;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800983c:	69f8      	ldr	r0, [r7, #28]
 800983e:	f7fe fc2e 	bl	800809e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009850:	861a      	strh	r2, [r3, #48]	; 0x30
 8009852:	e006      	b.n	8009862 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <tcp_process+0x30a>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6910      	ldr	r0, [r2, #16]
 8009876:	2200      	movs	r2, #0
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4798      	blx	r3
 800987c:	4603      	mov	r3, r0
 800987e:	76bb      	strb	r3, [r7, #26]
 8009880:	e001      	b.n	8009886 <tcp_process+0x30e>
 8009882:	2300      	movs	r3, #0
 8009884:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009886:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800988a:	f113 0f0d 	cmn.w	r3, #13
 800988e:	d102      	bne.n	8009896 <tcp_process+0x31e>
          return ERR_ABRT;
 8009890:	f06f 030c 	mvn.w	r3, #12
 8009894:	e250      	b.n	8009d38 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8b5b      	ldrh	r3, [r3, #26]
 800989a:	f043 0302 	orr.w	r3, r3, #2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80098a4:	e23a      	b.n	8009d1c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80098a6:	4b98      	ldr	r3, [pc, #608]	; (8009b08 <tcp_process+0x590>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8234 	beq.w	8009d1c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098b4:	4b95      	ldr	r3, [pc, #596]	; (8009b0c <tcp_process+0x594>)
 80098b6:	6819      	ldr	r1, [r3, #0]
 80098b8:	4b95      	ldr	r3, [pc, #596]	; (8009b10 <tcp_process+0x598>)
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	4b95      	ldr	r3, [pc, #596]	; (8009b14 <tcp_process+0x59c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098c4:	4b94      	ldr	r3, [pc, #592]	; (8009b18 <tcp_process+0x5a0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098cc:	4a92      	ldr	r2, [pc, #584]	; (8009b18 <tcp_process+0x5a0>)
 80098ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098d0:	8812      	ldrh	r2, [r2, #0]
 80098d2:	b292      	uxth	r2, r2
 80098d4:	9202      	str	r2, [sp, #8]
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	4b90      	ldr	r3, [pc, #576]	; (8009b1c <tcp_process+0x5a4>)
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	4b90      	ldr	r3, [pc, #576]	; (8009b20 <tcp_process+0x5a8>)
 80098de:	4602      	mov	r2, r0
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f003 f8dd 	bl	800caa0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	f200 8215 	bhi.w	8009d1c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f002 fea7 	bl	800c64c <tcp_rexmit_rto>
      break;
 80098fe:	e20d      	b.n	8009d1c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009900:	4b81      	ldr	r3, [pc, #516]	; (8009b08 <tcp_process+0x590>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 80a1 	beq.w	8009a50 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800990e:	4b7f      	ldr	r3, [pc, #508]	; (8009b0c <tcp_process+0x594>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	3b01      	subs	r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	db7e      	blt.n	8009a1c <tcp_process+0x4a4>
 800991e:	4b7b      	ldr	r3, [pc, #492]	; (8009b0c <tcp_process+0x594>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	dc77      	bgt.n	8009a1c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2204      	movs	r2, #4
 8009930:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800993a:	23fa      	movs	r3, #250	; 0xfa
 800993c:	76bb      	strb	r3, [r7, #26]
 800993e:	e01d      	b.n	800997c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <tcp_process+0x3e0>
 800994a:	4b76      	ldr	r3, [pc, #472]	; (8009b24 <tcp_process+0x5ac>)
 800994c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009950:	4975      	ldr	r1, [pc, #468]	; (8009b28 <tcp_process+0x5b0>)
 8009952:	4876      	ldr	r0, [pc, #472]	; (8009b2c <tcp_process+0x5b4>)
 8009954:	f006 fc4e 	bl	80101f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <tcp_process+0x400>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6910      	ldr	r0, [r2, #16]
 800996c:	2200      	movs	r2, #0
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4798      	blx	r3
 8009972:	4603      	mov	r3, r0
 8009974:	76bb      	strb	r3, [r7, #26]
 8009976:	e001      	b.n	800997c <tcp_process+0x404>
 8009978:	23f0      	movs	r3, #240	; 0xf0
 800997a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800997c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009984:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009988:	f113 0f0d 	cmn.w	r3, #13
 800998c:	d002      	beq.n	8009994 <tcp_process+0x41c>
              tcp_abort(pcb);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fd fce0 	bl	8007354 <tcp_abort>
            }
            return ERR_ABRT;
 8009994:	f06f 030c 	mvn.w	r3, #12
 8009998:	e1ce      	b.n	8009d38 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fae0 	bl	8009f60 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80099a0:	4b63      	ldr	r3, [pc, #396]	; (8009b30 <tcp_process+0x5b8>)
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <tcp_process+0x43c>
            recv_acked--;
 80099a8:	4b61      	ldr	r3, [pc, #388]	; (8009b30 <tcp_process+0x5b8>)
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	4b5f      	ldr	r3, [pc, #380]	; (8009b30 <tcp_process+0x5b8>)
 80099b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b8:	009a      	lsls	r2, r3, #2
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80099c4:	428b      	cmp	r3, r1
 80099c6:	bf38      	it	cc
 80099c8:	460b      	movcc	r3, r1
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d204      	bcs.n	80099d8 <tcp_process+0x460>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	e00d      	b.n	80099f4 <tcp_process+0x47c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	f241 121c 	movw	r2, #4380	; 0x111c
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d904      	bls.n	80099f0 <tcp_process+0x478>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	e001      	b.n	80099f4 <tcp_process+0x47c>
 80099f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80099fa:	4b4e      	ldr	r3, [pc, #312]	; (8009b34 <tcp_process+0x5bc>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0320 	and.w	r3, r3, #32
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d037      	beq.n	8009a76 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	8b5b      	ldrh	r3, [r3, #26]
 8009a0a:	f043 0302 	orr.w	r3, r3, #2
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2207      	movs	r2, #7
 8009a18:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009a1a:	e02c      	b.n	8009a76 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a1c:	4b3b      	ldr	r3, [pc, #236]	; (8009b0c <tcp_process+0x594>)
 8009a1e:	6819      	ldr	r1, [r3, #0]
 8009a20:	4b3b      	ldr	r3, [pc, #236]	; (8009b10 <tcp_process+0x598>)
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b3b      	ldr	r3, [pc, #236]	; (8009b14 <tcp_process+0x59c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a2c:	4b3a      	ldr	r3, [pc, #232]	; (8009b18 <tcp_process+0x5a0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a30:	885b      	ldrh	r3, [r3, #2]
 8009a32:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a34:	4a38      	ldr	r2, [pc, #224]	; (8009b18 <tcp_process+0x5a0>)
 8009a36:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a38:	8812      	ldrh	r2, [r2, #0]
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	9202      	str	r2, [sp, #8]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	4b36      	ldr	r3, [pc, #216]	; (8009b1c <tcp_process+0x5a4>)
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	4b36      	ldr	r3, [pc, #216]	; (8009b20 <tcp_process+0x5a8>)
 8009a46:	4602      	mov	r2, r0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f003 f829 	bl	800caa0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a4e:	e167      	b.n	8009d20 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a50:	4b2d      	ldr	r3, [pc, #180]	; (8009b08 <tcp_process+0x590>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8161 	beq.w	8009d20 <tcp_process+0x7a8>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	1e5a      	subs	r2, r3, #1
 8009a64:	4b2b      	ldr	r3, [pc, #172]	; (8009b14 <tcp_process+0x59c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	f040 8159 	bne.w	8009d20 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f002 fe0e 	bl	800c690 <tcp_rexmit>
      break;
 8009a74:	e154      	b.n	8009d20 <tcp_process+0x7a8>
 8009a76:	e153      	b.n	8009d20 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa71 	bl	8009f60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a7e:	4b2d      	ldr	r3, [pc, #180]	; (8009b34 <tcp_process+0x5bc>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 814c 	beq.w	8009d24 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	8b5b      	ldrh	r3, [r3, #26]
 8009a90:	f043 0302 	orr.w	r3, r3, #2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2207      	movs	r2, #7
 8009a9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009aa0:	e140      	b.n	8009d24 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa5c 	bl	8009f60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009aa8:	4b22      	ldr	r3, [pc, #136]	; (8009b34 <tcp_process+0x5bc>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 0320 	and.w	r3, r3, #32
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d071      	beq.n	8009b98 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ab4:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <tcp_process+0x590>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f003 0310 	and.w	r3, r3, #16
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d060      	beq.n	8009b82 <tcp_process+0x60a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <tcp_process+0x594>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d15a      	bne.n	8009b82 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d156      	bne.n	8009b82 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	8b5b      	ldrh	r3, [r3, #26]
 8009ad8:	f043 0302 	orr.w	r3, r3, #2
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fe fdbc 	bl	8008660 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009ae8:	4b13      	ldr	r3, [pc, #76]	; (8009b38 <tcp_process+0x5c0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d105      	bne.n	8009afe <tcp_process+0x586>
 8009af2:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <tcp_process+0x5c0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4a0f      	ldr	r2, [pc, #60]	; (8009b38 <tcp_process+0x5c0>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	e02e      	b.n	8009b5c <tcp_process+0x5e4>
 8009afe:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <tcp_process+0x5c0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e027      	b.n	8009b56 <tcp_process+0x5de>
 8009b06:	bf00      	nop
 8009b08:	20006bf0 	.word	0x20006bf0
 8009b0c:	20006be8 	.word	0x20006be8
 8009b10:	20006bee 	.word	0x20006bee
 8009b14:	20006be4 	.word	0x20006be4
 8009b18:	20006bd4 	.word	0x20006bd4
 8009b1c:	2000364c 	.word	0x2000364c
 8009b20:	20003650 	.word	0x20003650
 8009b24:	08012c5c 	.word	0x08012c5c
 8009b28:	08012efc 	.word	0x08012efc
 8009b2c:	08012ca8 	.word	0x08012ca8
 8009b30:	20006bec 	.word	0x20006bec
 8009b34:	20006bf1 	.word	0x20006bf1
 8009b38:	20006bb8 	.word	0x20006bb8
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d104      	bne.n	8009b50 <tcp_process+0x5d8>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	60da      	str	r2, [r3, #12]
 8009b4e:	e005      	b.n	8009b5c <tcp_process+0x5e4>
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1ef      	bne.n	8009b3c <tcp_process+0x5c4>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	4b77      	ldr	r3, [pc, #476]	; (8009d40 <tcp_process+0x7c8>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	220a      	movs	r2, #10
 8009b6c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b6e:	4b75      	ldr	r3, [pc, #468]	; (8009d44 <tcp_process+0x7cc>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	4a73      	ldr	r2, [pc, #460]	; (8009d44 <tcp_process+0x7cc>)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	f003 f952 	bl	800ce24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b80:	e0d2      	b.n	8009d28 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	8b5b      	ldrh	r3, [r3, #26]
 8009b86:	f043 0302 	orr.w	r3, r3, #2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2208      	movs	r2, #8
 8009b94:	751a      	strb	r2, [r3, #20]
      break;
 8009b96:	e0c7      	b.n	8009d28 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b98:	4b6b      	ldr	r3, [pc, #428]	; (8009d48 <tcp_process+0x7d0>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80c1 	beq.w	8009d28 <tcp_process+0x7b0>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009baa:	4b68      	ldr	r3, [pc, #416]	; (8009d4c <tcp_process+0x7d4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	f040 80ba 	bne.w	8009d28 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 80b5 	bne.w	8009d28 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2206      	movs	r2, #6
 8009bc2:	751a      	strb	r2, [r3, #20]
      break;
 8009bc4:	e0b0      	b.n	8009d28 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9ca 	bl	8009f60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009bcc:	4b60      	ldr	r3, [pc, #384]	; (8009d50 <tcp_process+0x7d8>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f003 0320 	and.w	r3, r3, #32
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 80a9 	beq.w	8009d2c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8b5b      	ldrh	r3, [r3, #26]
 8009bde:	f043 0302 	orr.w	r3, r3, #2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7fe fd39 	bl	8008660 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009bee:	4b59      	ldr	r3, [pc, #356]	; (8009d54 <tcp_process+0x7dc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d105      	bne.n	8009c04 <tcp_process+0x68c>
 8009bf8:	4b56      	ldr	r3, [pc, #344]	; (8009d54 <tcp_process+0x7dc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	4a55      	ldr	r2, [pc, #340]	; (8009d54 <tcp_process+0x7dc>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	e013      	b.n	8009c2c <tcp_process+0x6b4>
 8009c04:	4b53      	ldr	r3, [pc, #332]	; (8009d54 <tcp_process+0x7dc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	613b      	str	r3, [r7, #16]
 8009c0a:	e00c      	b.n	8009c26 <tcp_process+0x6ae>
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d104      	bne.n	8009c20 <tcp_process+0x6a8>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	60da      	str	r2, [r3, #12]
 8009c1e:	e005      	b.n	8009c2c <tcp_process+0x6b4>
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1ef      	bne.n	8009c0c <tcp_process+0x694>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	4b43      	ldr	r3, [pc, #268]	; (8009d40 <tcp_process+0x7c8>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	220a      	movs	r2, #10
 8009c3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c3e:	4b41      	ldr	r3, [pc, #260]	; (8009d44 <tcp_process+0x7cc>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	4a3f      	ldr	r2, [pc, #252]	; (8009d44 <tcp_process+0x7cc>)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	f003 f8ea 	bl	800ce24 <tcp_timer_needed>
      }
      break;
 8009c50:	e06c      	b.n	8009d2c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f984 	bl	8009f60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c58:	4b3b      	ldr	r3, [pc, #236]	; (8009d48 <tcp_process+0x7d0>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d065      	beq.n	8009d30 <tcp_process+0x7b8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c68:	4b38      	ldr	r3, [pc, #224]	; (8009d4c <tcp_process+0x7d4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d15f      	bne.n	8009d30 <tcp_process+0x7b8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d15b      	bne.n	8009d30 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7fe fcf1 	bl	8008660 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c7e:	4b35      	ldr	r3, [pc, #212]	; (8009d54 <tcp_process+0x7dc>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d105      	bne.n	8009c94 <tcp_process+0x71c>
 8009c88:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <tcp_process+0x7dc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	4a31      	ldr	r2, [pc, #196]	; (8009d54 <tcp_process+0x7dc>)
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e013      	b.n	8009cbc <tcp_process+0x744>
 8009c94:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <tcp_process+0x7dc>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60fb      	str	r3, [r7, #12]
 8009c9a:	e00c      	b.n	8009cb6 <tcp_process+0x73e>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d104      	bne.n	8009cb0 <tcp_process+0x738>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	e005      	b.n	8009cbc <tcp_process+0x744>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1ef      	bne.n	8009c9c <tcp_process+0x724>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	60da      	str	r2, [r3, #12]
 8009cc2:	4b1f      	ldr	r3, [pc, #124]	; (8009d40 <tcp_process+0x7c8>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009cce:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <tcp_process+0x7cc>)
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60da      	str	r2, [r3, #12]
 8009cd6:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <tcp_process+0x7cc>)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	f003 f8a2 	bl	800ce24 <tcp_timer_needed>
      }
      break;
 8009ce0:	e026      	b.n	8009d30 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f93c 	bl	8009f60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ce8:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <tcp_process+0x7d0>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01f      	beq.n	8009d34 <tcp_process+0x7bc>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf8:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <tcp_process+0x7d4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d119      	bne.n	8009d34 <tcp_process+0x7bc>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d115      	bne.n	8009d34 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009d08:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <tcp_process+0x7d8>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f043 0310 	orr.w	r3, r3, #16
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <tcp_process+0x7d8>)
 8009d14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d16:	e00d      	b.n	8009d34 <tcp_process+0x7bc>
    default:
      break;
 8009d18:	bf00      	nop
 8009d1a:	e00c      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e00a      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d20:	bf00      	nop
 8009d22:	e008      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d24:	bf00      	nop
 8009d26:	e006      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e004      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e002      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d30:	bf00      	nop
 8009d32:	e000      	b.n	8009d36 <tcp_process+0x7be>
      break;
 8009d34:	bf00      	nop
  }
  return ERR_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3724      	adds	r7, #36	; 0x24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd90      	pop	{r4, r7, pc}
 8009d40:	20006bc0 	.word	0x20006bc0
 8009d44:	20006bbc 	.word	0x20006bbc
 8009d48:	20006bf0 	.word	0x20006bf0
 8009d4c:	20006be8 	.word	0x20006be8
 8009d50:	20006bf1 	.word	0x20006bf1
 8009d54:	20006bb8 	.word	0x20006bb8

08009d58 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <tcp_oos_insert_segment+0x1e>
 8009d68:	4b3b      	ldr	r3, [pc, #236]	; (8009e58 <tcp_oos_insert_segment+0x100>)
 8009d6a:	f240 421f 	movw	r2, #1055	; 0x41f
 8009d6e:	493b      	ldr	r1, [pc, #236]	; (8009e5c <tcp_oos_insert_segment+0x104>)
 8009d70:	483b      	ldr	r0, [pc, #236]	; (8009e60 <tcp_oos_insert_segment+0x108>)
 8009d72:	f006 fa3f 	bl	80101f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	899b      	ldrh	r3, [r3, #12]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fb fa32 	bl	80051e8 <lwip_htons>
 8009d84:	4603      	mov	r3, r0
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d028      	beq.n	8009de2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009d90:	6838      	ldr	r0, [r7, #0]
 8009d92:	f7fe f96f 	bl	8008074 <tcp_segs_free>
    next = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	e056      	b.n	8009e4a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	899b      	ldrh	r3, [r3, #12]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fb fa1f 	bl	80051e8 <lwip_htons>
 8009daa:	4603      	mov	r3, r0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00d      	beq.n	8009dd2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29c      	uxth	r4, r3
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f7fb fa12 	bl	80051e8 <lwip_htons>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4322      	orrs	r2, r4
 8009dce:	b292      	uxth	r2, r2
 8009dd0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7fe f95e 	bl	800809e <tcp_seg_free>
    while (next &&
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00e      	beq.n	8009e06 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <tcp_oos_insert_segment+0x10c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	441a      	add	r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	8909      	ldrh	r1, [r1, #8]
 8009dfe:	440b      	add	r3, r1
 8009e00:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	daca      	bge.n	8009d9c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01e      	beq.n	8009e4a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	891b      	ldrh	r3, [r3, #8]
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <tcp_oos_insert_segment+0x10c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	441a      	add	r2, r3
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dd12      	ble.n	8009e4a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <tcp_oos_insert_segment+0x10c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	891b      	ldrh	r3, [r3, #8]
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7fc fb67 	bl	8006518 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	601a      	str	r2, [r3, #0]
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd90      	pop	{r4, r7, pc}
 8009e58:	08012c5c 	.word	0x08012c5c
 8009e5c:	08012f1c 	.word	0x08012f1c
 8009e60:	08012ca8 	.word	0x08012ca8
 8009e64:	20006be4 	.word	0x20006be4

08009e68 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e68:	b5b0      	push	{r4, r5, r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e76:	e03e      	b.n	8009ef6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fc fd54 	bl	8006934 <pbuf_clen>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e96:	8a7a      	ldrh	r2, [r7, #18]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d906      	bls.n	8009eaa <tcp_free_acked_segments+0x42>
 8009e9c:	4b2a      	ldr	r3, [pc, #168]	; (8009f48 <tcp_free_acked_segments+0xe0>)
 8009e9e:	f240 4257 	movw	r2, #1111	; 0x457
 8009ea2:	492a      	ldr	r1, [pc, #168]	; (8009f4c <tcp_free_acked_segments+0xe4>)
 8009ea4:	482a      	ldr	r0, [pc, #168]	; (8009f50 <tcp_free_acked_segments+0xe8>)
 8009ea6:	f006 f9a5 	bl	80101f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009eb0:	8a7b      	ldrh	r3, [r7, #18]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	891a      	ldrh	r2, [r3, #8]
 8009ec0:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <tcp_free_acked_segments+0xec>)
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <tcp_free_acked_segments+0xec>)
 8009eca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009ecc:	6978      	ldr	r0, [r7, #20]
 8009ece:	f7fe f8e6 	bl	800809e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00c      	beq.n	8009ef6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d109      	bne.n	8009ef6 <tcp_free_acked_segments+0x8e>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <tcp_free_acked_segments+0x8e>
 8009ee8:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <tcp_free_acked_segments+0xe0>)
 8009eea:	f240 4261 	movw	r2, #1121	; 0x461
 8009eee:	491a      	ldr	r1, [pc, #104]	; (8009f58 <tcp_free_acked_segments+0xf0>)
 8009ef0:	4817      	ldr	r0, [pc, #92]	; (8009f50 <tcp_free_acked_segments+0xe8>)
 8009ef2:	f006 f97f 	bl	80101f4 <iprintf>
  while (seg_list != NULL &&
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d020      	beq.n	8009f3e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fb f985 	bl	8005212 <lwip_htonl>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	891b      	ldrh	r3, [r3, #8]
 8009f0e:	461d      	mov	r5, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	899b      	ldrh	r3, [r3, #12]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fb f965 	bl	80051e8 <lwip_htons>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <tcp_free_acked_segments+0xc6>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <tcp_free_acked_segments+0xc8>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	442b      	add	r3, r5
 8009f32:	18e2      	adds	r2, r4, r3
 8009f34:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <tcp_free_acked_segments+0xf4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dd9c      	ble.n	8009e78 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bdb0      	pop	{r4, r5, r7, pc}
 8009f48:	08012c5c 	.word	0x08012c5c
 8009f4c:	08012f44 	.word	0x08012f44
 8009f50:	08012ca8 	.word	0x08012ca8
 8009f54:	20006bec 	.word	0x20006bec
 8009f58:	08012f6c 	.word	0x08012f6c
 8009f5c:	20006be8 	.word	0x20006be8

08009f60 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f60:	b5b0      	push	{r4, r5, r7, lr}
 8009f62:	b094      	sub	sp, #80	; 0x50
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <tcp_receive+0x20>
 8009f72:	4b91      	ldr	r3, [pc, #580]	; (800a1b8 <tcp_receive+0x258>)
 8009f74:	f240 427b 	movw	r2, #1147	; 0x47b
 8009f78:	4990      	ldr	r1, [pc, #576]	; (800a1bc <tcp_receive+0x25c>)
 8009f7a:	4891      	ldr	r0, [pc, #580]	; (800a1c0 <tcp_receive+0x260>)
 8009f7c:	f006 f93a 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7d1b      	ldrb	r3, [r3, #20]
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d806      	bhi.n	8009f96 <tcp_receive+0x36>
 8009f88:	4b8b      	ldr	r3, [pc, #556]	; (800a1b8 <tcp_receive+0x258>)
 8009f8a:	f240 427c 	movw	r2, #1148	; 0x47c
 8009f8e:	498d      	ldr	r1, [pc, #564]	; (800a1c4 <tcp_receive+0x264>)
 8009f90:	488b      	ldr	r0, [pc, #556]	; (800a1c0 <tcp_receive+0x260>)
 8009f92:	f006 f92f 	bl	80101f4 <iprintf>

  if (flags & TCP_ACK) {
 8009f96:	4b8c      	ldr	r3, [pc, #560]	; (800a1c8 <tcp_receive+0x268>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 8264 	beq.w	800a46c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009faa:	461a      	mov	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb0:	4413      	add	r3, r2
 8009fb2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fb8:	4b84      	ldr	r3, [pc, #528]	; (800a1cc <tcp_receive+0x26c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	db1b      	blt.n	8009ffa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fc6:	4b81      	ldr	r3, [pc, #516]	; (800a1cc <tcp_receive+0x26c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d106      	bne.n	8009fdc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fd2:	4b7f      	ldr	r3, [pc, #508]	; (800a1d0 <tcp_receive+0x270>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	db0e      	blt.n	8009ffa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fe0:	4b7b      	ldr	r3, [pc, #492]	; (800a1d0 <tcp_receive+0x270>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d125      	bne.n	800a034 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fe8:	4b7a      	ldr	r3, [pc, #488]	; (800a1d4 <tcp_receive+0x274>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	89db      	ldrh	r3, [r3, #14]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d91c      	bls.n	800a034 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009ffa:	4b76      	ldr	r3, [pc, #472]	; (800a1d4 <tcp_receive+0x274>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	89db      	ldrh	r3, [r3, #14]
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a014:	429a      	cmp	r2, r3
 800a016:	d205      	bcs.n	800a024 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a024:	4b69      	ldr	r3, [pc, #420]	; (800a1cc <tcp_receive+0x26c>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a02c:	4b68      	ldr	r3, [pc, #416]	; (800a1d0 <tcp_receive+0x270>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a034:	4b66      	ldr	r3, [pc, #408]	; (800a1d0 <tcp_receive+0x270>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dc58      	bgt.n	800a0f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a042:	4b65      	ldr	r3, [pc, #404]	; (800a1d8 <tcp_receive+0x278>)
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d14b      	bne.n	800a0e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a054:	4413      	add	r3, r2
 800a056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a058:	429a      	cmp	r2, r3
 800a05a:	d142      	bne.n	800a0e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a062:	2b00      	cmp	r3, #0
 800a064:	db3d      	blt.n	800a0e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06a:	4b59      	ldr	r3, [pc, #356]	; (800a1d0 <tcp_receive+0x270>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d137      	bne.n	800a0e2 <tcp_receive+0x182>
              found_dupack = 1;
 800a072:	2301      	movs	r3, #1
 800a074:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a07c:	2bff      	cmp	r3, #255	; 0xff
 800a07e:	d007      	beq.n	800a090 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a086:	3301      	adds	r3, #1
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a096:	2b03      	cmp	r3, #3
 800a098:	d91b      	bls.n	800a0d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d30a      	bcc.n	800a0c8 <tcp_receive+0x168>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0bc:	4413      	add	r3, r2
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0c6:	e004      	b.n	800a0d2 <tcp_receive+0x172>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d902      	bls.n	800a0e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f002 fb43 	bl	800c768 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f040 8161 	bne.w	800a3ac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0f2:	e15b      	b.n	800a3ac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0f4:	4b36      	ldr	r3, [pc, #216]	; (800a1d0 <tcp_receive+0x270>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	f2c0 814e 	blt.w	800a3a2 <tcp_receive+0x442>
 800a106:	4b32      	ldr	r3, [pc, #200]	; (800a1d0 <tcp_receive+0x270>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	f300 8146 	bgt.w	800a3a2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8b5b      	ldrh	r3, [r3, #26]
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d010      	beq.n	800a144 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	8b5b      	ldrh	r3, [r3, #26]
 800a126:	f023 0304 	bic.w	r3, r3, #4
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a152:	10db      	asrs	r3, r3, #3
 800a154:	b21b      	sxth	r3, r3
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4413      	add	r3, r2
 800a162:	b29b      	uxth	r3, r3
 800a164:	b21a      	sxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a16c:	4b18      	ldr	r3, [pc, #96]	; (800a1d0 <tcp_receive+0x270>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a176:	b29b      	uxth	r3, r3
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a184:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <tcp_receive+0x270>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7d1b      	ldrb	r3, [r3, #20]
 800a190:	2b03      	cmp	r3, #3
 800a192:	f240 8097 	bls.w	800a2c4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d245      	bcs.n	800a232 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	8b5b      	ldrh	r3, [r3, #26]
 800a1aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d014      	beq.n	800a1dc <tcp_receive+0x27c>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e013      	b.n	800a1de <tcp_receive+0x27e>
 800a1b6:	bf00      	nop
 800a1b8:	08012c5c 	.word	0x08012c5c
 800a1bc:	08012f8c 	.word	0x08012f8c
 800a1c0:	08012ca8 	.word	0x08012ca8
 800a1c4:	08012fa8 	.word	0x08012fa8
 800a1c8:	20006bf0 	.word	0x20006bf0
 800a1cc:	20006be4 	.word	0x20006be4
 800a1d0:	20006be8 	.word	0x20006be8
 800a1d4:	20006bd4 	.word	0x20006bd4
 800a1d8:	20006bee 	.word	0x20006bee
 800a1dc:	2302      	movs	r3, #2
 800a1de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a1e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ec:	fb12 f303 	smulbb	r3, r2, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	bf28      	it	cs
 800a1f8:	4613      	movcs	r3, r2
 800a1fa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a204:	4413      	add	r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a20e:	429a      	cmp	r2, r3
 800a210:	d309      	bcc.n	800a226 <tcp_receive+0x2c6>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a21a:	4413      	add	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a224:	e04e      	b.n	800a2c4 <tcp_receive+0x364>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a22c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a230:	e048      	b.n	800a2c4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a23a:	4413      	add	r3, r2
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a244:	429a      	cmp	r2, r3
 800a246:	d309      	bcc.n	800a25c <tcp_receive+0x2fc>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a24e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a250:	4413      	add	r3, r2
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a25a:	e004      	b.n	800a266 <tcp_receive+0x306>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a272:	429a      	cmp	r2, r3
 800a274:	d326      	bcc.n	800a2c4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a296:	4413      	add	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d30a      	bcc.n	800a2ba <tcp_receive+0x35a>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2ae:	4413      	add	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2b8:	e004      	b.n	800a2c4 <tcp_receive+0x364>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	4a98      	ldr	r2, [pc, #608]	; (800a530 <tcp_receive+0x5d0>)
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fdca 	bl	8009e68 <tcp_free_acked_segments>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e2:	4a94      	ldr	r2, [pc, #592]	; (800a534 <tcp_receive+0x5d4>)
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fdbf 	bl	8009e68 <tcp_free_acked_segments>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2fe:	861a      	strh	r2, [r3, #48]	; 0x30
 800a300:	e002      	b.n	800a308 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d103      	bne.n	800a31e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a324:	4b84      	ldr	r3, [pc, #528]	; (800a538 <tcp_receive+0x5d8>)
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	4413      	add	r3, r2
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	8b5b      	ldrh	r3, [r3, #26]
 800a336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d035      	beq.n	800a3aa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	2b00      	cmp	r3, #0
 800a344:	d118      	bne.n	800a378 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fa ff59 	bl	8005212 <lwip_htonl>
 800a360:	4603      	mov	r3, r0
 800a362:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a364:	2b00      	cmp	r3, #0
 800a366:	dc20      	bgt.n	800a3aa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8b5b      	ldrh	r3, [r3, #26]
 800a36c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a370:	b29a      	uxth	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a376:	e018      	b.n	800a3aa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	f7fa ff44 	bl	8005212 <lwip_htonl>
 800a38a:	4603      	mov	r3, r0
 800a38c:	1ae3      	subs	r3, r4, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	dc0b      	bgt.n	800a3aa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	8b5b      	ldrh	r3, [r3, #26]
 800a396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3a0:	e003      	b.n	800a3aa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f002 fbce 	bl	800cb44 <tcp_send_empty_ack>
 800a3a8:	e000      	b.n	800a3ac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3aa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d05b      	beq.n	800a46c <tcp_receive+0x50c>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b8:	4b60      	ldr	r3, [pc, #384]	; (800a53c <tcp_receive+0x5dc>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da54      	bge.n	800a46c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a3c2:	4b5f      	ldr	r3, [pc, #380]	; (800a540 <tcp_receive+0x5e0>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3e0:	10db      	asrs	r3, r3, #3
 800a3e2:	b21b      	sxth	r3, r3
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3fa:	4413      	add	r3, r2
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	b21a      	sxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a404:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a408:	2b00      	cmp	r3, #0
 800a40a:	da05      	bge.n	800a418 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a40c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a410:	425b      	negs	r3, r3
 800a412:	b29b      	uxth	r3, r3
 800a414:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a418:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a422:	109b      	asrs	r3, r3, #2
 800a424:	b21b      	sxth	r3, r3
 800a426:	b29b      	uxth	r3, r3
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a436:	b29a      	uxth	r2, r3
 800a438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a43c:	4413      	add	r3, r2
 800a43e:	b29b      	uxth	r3, r3
 800a440:	b21a      	sxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a44c:	10db      	asrs	r3, r3, #3
 800a44e:	b21b      	sxth	r3, r3
 800a450:	b29a      	uxth	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a458:	b29b      	uxth	r3, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	b21a      	sxth	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a46c:	4b35      	ldr	r3, [pc, #212]	; (800a544 <tcp_receive+0x5e4>)
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 84e2 	beq.w	800ae3a <tcp_receive+0xeda>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	2b06      	cmp	r3, #6
 800a47c:	f200 84dd 	bhi.w	800ae3a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a484:	4b30      	ldr	r3, [pc, #192]	; (800a548 <tcp_receive+0x5e8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f2c0 808f 	blt.w	800a5b0 <tcp_receive+0x650>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a496:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <tcp_receive+0x5e4>)
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	4619      	mov	r1, r3
 800a49c:	4b2a      	ldr	r3, [pc, #168]	; (800a548 <tcp_receive+0x5e8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	440b      	add	r3, r1
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f300 8082 	bgt.w	800a5b0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a4ac:	4b27      	ldr	r3, [pc, #156]	; (800a54c <tcp_receive+0x5ec>)
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <tcp_receive+0x5e8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a4be:	4b23      	ldr	r3, [pc, #140]	; (800a54c <tcp_receive+0x5ec>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <tcp_receive+0x574>
 800a4c6:	4b22      	ldr	r3, [pc, #136]	; (800a550 <tcp_receive+0x5f0>)
 800a4c8:	f240 5294 	movw	r2, #1428	; 0x594
 800a4cc:	4921      	ldr	r1, [pc, #132]	; (800a554 <tcp_receive+0x5f4>)
 800a4ce:	4822      	ldr	r0, [pc, #136]	; (800a558 <tcp_receive+0x5f8>)
 800a4d0:	f005 fe90 	bl	80101f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d906      	bls.n	800a4ec <tcp_receive+0x58c>
 800a4de:	4b1c      	ldr	r3, [pc, #112]	; (800a550 <tcp_receive+0x5f0>)
 800a4e0:	f240 5295 	movw	r2, #1429	; 0x595
 800a4e4:	491d      	ldr	r1, [pc, #116]	; (800a55c <tcp_receive+0x5fc>)
 800a4e6:	481c      	ldr	r0, [pc, #112]	; (800a558 <tcp_receive+0x5f8>)
 800a4e8:	f005 fe84 	bl	80101f4 <iprintf>
      off = (u16_t)off32;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a4f2:	4b16      	ldr	r3, [pc, #88]	; (800a54c <tcp_receive+0x5ec>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	891b      	ldrh	r3, [r3, #8]
 800a4f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d906      	bls.n	800a50e <tcp_receive+0x5ae>
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <tcp_receive+0x5f0>)
 800a502:	f240 5297 	movw	r2, #1431	; 0x597
 800a506:	4916      	ldr	r1, [pc, #88]	; (800a560 <tcp_receive+0x600>)
 800a508:	4813      	ldr	r0, [pc, #76]	; (800a558 <tcp_receive+0x5f8>)
 800a50a:	f005 fe73 	bl	80101f4 <iprintf>
      inseg.len -= off;
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <tcp_receive+0x5ec>)
 800a510:	891a      	ldrh	r2, [r3, #8]
 800a512:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	b29a      	uxth	r2, r3
 800a51a:	4b0c      	ldr	r3, [pc, #48]	; (800a54c <tcp_receive+0x5ec>)
 800a51c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a51e:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <tcp_receive+0x5ec>)
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	891a      	ldrh	r2, [r3, #8]
 800a524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a52c:	e02a      	b.n	800a584 <tcp_receive+0x624>
 800a52e:	bf00      	nop
 800a530:	08012fc4 	.word	0x08012fc4
 800a534:	08012fcc 	.word	0x08012fcc
 800a538:	20006bec 	.word	0x20006bec
 800a53c:	20006be8 	.word	0x20006be8
 800a540:	20006bac 	.word	0x20006bac
 800a544:	20006bee 	.word	0x20006bee
 800a548:	20006be4 	.word	0x20006be4
 800a54c:	20006bc4 	.word	0x20006bc4
 800a550:	08012c5c 	.word	0x08012c5c
 800a554:	08012fd4 	.word	0x08012fd4
 800a558:	08012ca8 	.word	0x08012ca8
 800a55c:	08012fe4 	.word	0x08012fe4
 800a560:	08012ff4 	.word	0x08012ff4
        off -= p->len;
 800a564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a566:	895b      	ldrh	r3, [r3, #10]
 800a568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a574:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a576:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a57a:	2200      	movs	r2, #0
 800a57c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a586:	895b      	ldrh	r3, [r3, #10]
 800a588:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d8e9      	bhi.n	800a564 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a594:	4619      	mov	r1, r3
 800a596:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a598:	f7fc f8be 	bl	8006718 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	4a91      	ldr	r2, [pc, #580]	; (800a7e8 <tcp_receive+0x888>)
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	4b91      	ldr	r3, [pc, #580]	; (800a7ec <tcp_receive+0x88c>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	4a8f      	ldr	r2, [pc, #572]	; (800a7e8 <tcp_receive+0x888>)
 800a5aa:	6812      	ldr	r2, [r2, #0]
 800a5ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a5ae:	e00d      	b.n	800a5cc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a5b0:	4b8d      	ldr	r3, [pc, #564]	; (800a7e8 <tcp_receive+0x888>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da06      	bge.n	800a5cc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8b5b      	ldrh	r3, [r3, #26]
 800a5c2:	f043 0302 	orr.w	r3, r3, #2
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5cc:	4b86      	ldr	r3, [pc, #536]	; (800a7e8 <tcp_receive+0x888>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f2c0 842a 	blt.w	800ae30 <tcp_receive+0xed0>
 800a5dc:	4b82      	ldr	r3, [pc, #520]	; (800a7e8 <tcp_receive+0x888>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5e8:	440b      	add	r3, r1
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f300 841e 	bgt.w	800ae30 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5f8:	4b7b      	ldr	r3, [pc, #492]	; (800a7e8 <tcp_receive+0x888>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	f040 829a 	bne.w	800ab36 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a602:	4b7a      	ldr	r3, [pc, #488]	; (800a7ec <tcp_receive+0x88c>)
 800a604:	891c      	ldrh	r4, [r3, #8]
 800a606:	4b79      	ldr	r3, [pc, #484]	; (800a7ec <tcp_receive+0x88c>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa fdea 	bl	80051e8 <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <tcp_receive+0x6c4>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <tcp_receive+0x6c6>
 800a624:	2300      	movs	r3, #0
 800a626:	4423      	add	r3, r4
 800a628:	b29a      	uxth	r2, r3
 800a62a:	4b71      	ldr	r3, [pc, #452]	; (800a7f0 <tcp_receive+0x890>)
 800a62c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a632:	4b6f      	ldr	r3, [pc, #444]	; (800a7f0 <tcp_receive+0x890>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d275      	bcs.n	800a726 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a63a:	4b6c      	ldr	r3, [pc, #432]	; (800a7ec <tcp_receive+0x88c>)
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	899b      	ldrh	r3, [r3, #12]
 800a640:	b29b      	uxth	r3, r3
 800a642:	4618      	mov	r0, r3
 800a644:	f7fa fdd0 	bl	80051e8 <lwip_htons>
 800a648:	4603      	mov	r3, r0
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01f      	beq.n	800a694 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a654:	4b65      	ldr	r3, [pc, #404]	; (800a7ec <tcp_receive+0x88c>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	899b      	ldrh	r3, [r3, #12]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	b21b      	sxth	r3, r3
 800a65e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a662:	b21c      	sxth	r4, r3
 800a664:	4b61      	ldr	r3, [pc, #388]	; (800a7ec <tcp_receive+0x88c>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fa fdbb 	bl	80051e8 <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	b29b      	uxth	r3, r3
 800a678:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fa fdb2 	bl	80051e8 <lwip_htons>
 800a684:	4603      	mov	r3, r0
 800a686:	b21b      	sxth	r3, r3
 800a688:	4323      	orrs	r3, r4
 800a68a:	b21a      	sxth	r2, r3
 800a68c:	4b57      	ldr	r3, [pc, #348]	; (800a7ec <tcp_receive+0x88c>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	b292      	uxth	r2, r2
 800a692:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a698:	4b54      	ldr	r3, [pc, #336]	; (800a7ec <tcp_receive+0x88c>)
 800a69a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a69c:	4b53      	ldr	r3, [pc, #332]	; (800a7ec <tcp_receive+0x88c>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	899b      	ldrh	r3, [r3, #12]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fa fd9f 	bl	80051e8 <lwip_htons>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <tcp_receive+0x762>
            inseg.len -= 1;
 800a6b6:	4b4d      	ldr	r3, [pc, #308]	; (800a7ec <tcp_receive+0x88c>)
 800a6b8:	891b      	ldrh	r3, [r3, #8]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	4b4b      	ldr	r3, [pc, #300]	; (800a7ec <tcp_receive+0x88c>)
 800a6c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a6c2:	4b4a      	ldr	r3, [pc, #296]	; (800a7ec <tcp_receive+0x88c>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4a49      	ldr	r2, [pc, #292]	; (800a7ec <tcp_receive+0x88c>)
 800a6c8:	8912      	ldrh	r2, [r2, #8]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fb ff23 	bl	8006518 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a6d2:	4b46      	ldr	r3, [pc, #280]	; (800a7ec <tcp_receive+0x88c>)
 800a6d4:	891c      	ldrh	r4, [r3, #8]
 800a6d6:	4b45      	ldr	r3, [pc, #276]	; (800a7ec <tcp_receive+0x88c>)
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	899b      	ldrh	r3, [r3, #12]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fa fd82 	bl	80051e8 <lwip_htons>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <tcp_receive+0x794>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <tcp_receive+0x796>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4423      	add	r3, r4
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	4b3d      	ldr	r3, [pc, #244]	; (800a7f0 <tcp_receive+0x890>)
 800a6fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6fe:	4b3c      	ldr	r3, [pc, #240]	; (800a7f0 <tcp_receive+0x890>)
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <tcp_receive+0x888>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	441a      	add	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a712:	440b      	add	r3, r1
 800a714:	429a      	cmp	r2, r3
 800a716:	d006      	beq.n	800a726 <tcp_receive+0x7c6>
 800a718:	4b36      	ldr	r3, [pc, #216]	; (800a7f4 <tcp_receive+0x894>)
 800a71a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a71e:	4936      	ldr	r1, [pc, #216]	; (800a7f8 <tcp_receive+0x898>)
 800a720:	4836      	ldr	r0, [pc, #216]	; (800a7fc <tcp_receive+0x89c>)
 800a722:	f005 fd67 	bl	80101f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 80e7 	beq.w	800a8fe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a730:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <tcp_receive+0x88c>)
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	899b      	ldrh	r3, [r3, #12]
 800a736:	b29b      	uxth	r3, r3
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fa fd55 	bl	80051e8 <lwip_htons>
 800a73e:	4603      	mov	r3, r0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d010      	beq.n	800a76c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a74a:	e00a      	b.n	800a762 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a750:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7fd fc9e 	bl	800809e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1f0      	bne.n	800a74c <tcp_receive+0x7ec>
 800a76a:	e0c8      	b.n	800a8fe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a772:	e052      	b.n	800a81a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	899b      	ldrh	r3, [r3, #12]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fa fd33 	bl	80051e8 <lwip_htons>
 800a782:	4603      	mov	r3, r0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d03d      	beq.n	800a80a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a78e:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <tcp_receive+0x88c>)
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	899b      	ldrh	r3, [r3, #12]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4618      	mov	r0, r3
 800a798:	f7fa fd26 	bl	80051e8 <lwip_htons>
 800a79c:	4603      	mov	r3, r0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d130      	bne.n	800a80a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a7a8:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <tcp_receive+0x88c>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	899b      	ldrh	r3, [r3, #12]
 800a7ae:	b29c      	uxth	r4, r3
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	f7fa fd19 	bl	80051e8 <lwip_htons>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <tcp_receive+0x88c>)
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4322      	orrs	r2, r4
 800a7c0:	b292      	uxth	r2, r2
 800a7c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <tcp_receive+0x88c>)
 800a7c6:	891c      	ldrh	r4, [r3, #8]
 800a7c8:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <tcp_receive+0x88c>)
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	899b      	ldrh	r3, [r3, #12]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fa fd09 	bl	80051e8 <lwip_htons>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00e      	beq.n	800a800 <tcp_receive+0x8a0>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e00d      	b.n	800a802 <tcp_receive+0x8a2>
 800a7e6:	bf00      	nop
 800a7e8:	20006be4 	.word	0x20006be4
 800a7ec:	20006bc4 	.word	0x20006bc4
 800a7f0:	20006bee 	.word	0x20006bee
 800a7f4:	08012c5c 	.word	0x08012c5c
 800a7f8:	08013004 	.word	0x08013004
 800a7fc:	08012ca8 	.word	0x08012ca8
 800a800:	2300      	movs	r3, #0
 800a802:	4423      	add	r3, r4
 800a804:	b29a      	uxth	r2, r3
 800a806:	4b98      	ldr	r3, [pc, #608]	; (800aa68 <tcp_receive+0xb08>)
 800a808:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f7fd fc42 	bl	800809e <tcp_seg_free>
            while (next &&
 800a81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00e      	beq.n	800a83e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a820:	4b91      	ldr	r3, [pc, #580]	; (800aa68 <tcp_receive+0xb08>)
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	461a      	mov	r2, r3
 800a826:	4b91      	ldr	r3, [pc, #580]	; (800aa6c <tcp_receive+0xb0c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	441a      	add	r2, r3
 800a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a834:	8909      	ldrh	r1, [r1, #8]
 800a836:	440b      	add	r3, r1
 800a838:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	da9a      	bge.n	800a774 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d059      	beq.n	800a8f8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a844:	4b88      	ldr	r3, [pc, #544]	; (800aa68 <tcp_receive+0xb08>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	4b88      	ldr	r3, [pc, #544]	; (800aa6c <tcp_receive+0xb0c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	441a      	add	r2, r3
 800a850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dd4d      	ble.n	800a8f8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	b29a      	uxth	r2, r3
 800a864:	4b81      	ldr	r3, [pc, #516]	; (800aa6c <tcp_receive+0xb0c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	4b80      	ldr	r3, [pc, #512]	; (800aa70 <tcp_receive+0xb10>)
 800a870:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a872:	4b7f      	ldr	r3, [pc, #508]	; (800aa70 <tcp_receive+0xb10>)
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	899b      	ldrh	r3, [r3, #12]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fa fcb4 	bl	80051e8 <lwip_htons>
 800a880:	4603      	mov	r3, r0
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d005      	beq.n	800a898 <tcp_receive+0x938>
                inseg.len -= 1;
 800a88c:	4b78      	ldr	r3, [pc, #480]	; (800aa70 <tcp_receive+0xb10>)
 800a88e:	891b      	ldrh	r3, [r3, #8]
 800a890:	3b01      	subs	r3, #1
 800a892:	b29a      	uxth	r2, r3
 800a894:	4b76      	ldr	r3, [pc, #472]	; (800aa70 <tcp_receive+0xb10>)
 800a896:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a898:	4b75      	ldr	r3, [pc, #468]	; (800aa70 <tcp_receive+0xb10>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4a74      	ldr	r2, [pc, #464]	; (800aa70 <tcp_receive+0xb10>)
 800a89e:	8912      	ldrh	r2, [r2, #8]
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fb fe38 	bl	8006518 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a8a8:	4b71      	ldr	r3, [pc, #452]	; (800aa70 <tcp_receive+0xb10>)
 800a8aa:	891c      	ldrh	r4, [r3, #8]
 800a8ac:	4b70      	ldr	r3, [pc, #448]	; (800aa70 <tcp_receive+0xb10>)
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	899b      	ldrh	r3, [r3, #12]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fa fc97 	bl	80051e8 <lwip_htons>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <tcp_receive+0x96a>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <tcp_receive+0x96c>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4423      	add	r3, r4
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	4b65      	ldr	r3, [pc, #404]	; (800aa68 <tcp_receive+0xb08>)
 800a8d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a8d4:	4b64      	ldr	r3, [pc, #400]	; (800aa68 <tcp_receive+0xb08>)
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4b64      	ldr	r3, [pc, #400]	; (800aa6c <tcp_receive+0xb0c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	441a      	add	r2, r3
 800a8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d006      	beq.n	800a8f8 <tcp_receive+0x998>
 800a8ea:	4b62      	ldr	r3, [pc, #392]	; (800aa74 <tcp_receive+0xb14>)
 800a8ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a8f0:	4961      	ldr	r1, [pc, #388]	; (800aa78 <tcp_receive+0xb18>)
 800a8f2:	4862      	ldr	r0, [pc, #392]	; (800aa7c <tcp_receive+0xb1c>)
 800a8f4:	f005 fc7e 	bl	80101f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a8fe:	4b5a      	ldr	r3, [pc, #360]	; (800aa68 <tcp_receive+0xb08>)
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	4b59      	ldr	r3, [pc, #356]	; (800aa6c <tcp_receive+0xb0c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	441a      	add	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a912:	4b55      	ldr	r3, [pc, #340]	; (800aa68 <tcp_receive+0xb08>)
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d206      	bcs.n	800a928 <tcp_receive+0x9c8>
 800a91a:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <tcp_receive+0xb14>)
 800a91c:	f240 6207 	movw	r2, #1543	; 0x607
 800a920:	4957      	ldr	r1, [pc, #348]	; (800aa80 <tcp_receive+0xb20>)
 800a922:	4856      	ldr	r0, [pc, #344]	; (800aa7c <tcp_receive+0xb1c>)
 800a924:	f005 fc66 	bl	80101f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a92c:	4b4e      	ldr	r3, [pc, #312]	; (800aa68 <tcp_receive+0xb08>)
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	b29a      	uxth	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7fc fe8b 	bl	8007654 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a93e:	4b4c      	ldr	r3, [pc, #304]	; (800aa70 <tcp_receive+0xb10>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	891b      	ldrh	r3, [r3, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d006      	beq.n	800a956 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a948:	4b49      	ldr	r3, [pc, #292]	; (800aa70 <tcp_receive+0xb10>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a4d      	ldr	r2, [pc, #308]	; (800aa84 <tcp_receive+0xb24>)
 800a94e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a950:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <tcp_receive+0xb10>)
 800a952:	2200      	movs	r2, #0
 800a954:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a956:	4b46      	ldr	r3, [pc, #280]	; (800aa70 <tcp_receive+0xb10>)
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	899b      	ldrh	r3, [r3, #12]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fa fc42 	bl	80051e8 <lwip_htons>
 800a964:	4603      	mov	r3, r0
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80b8 	beq.w	800aae2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a972:	4b45      	ldr	r3, [pc, #276]	; (800aa88 <tcp_receive+0xb28>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f043 0320 	orr.w	r3, r3, #32
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	4b42      	ldr	r3, [pc, #264]	; (800aa88 <tcp_receive+0xb28>)
 800a97e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a980:	e0af      	b.n	800aae2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a986:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	4a36      	ldr	r2, [pc, #216]	; (800aa6c <tcp_receive+0xb0c>)
 800a992:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	891b      	ldrh	r3, [r3, #8]
 800a998:	461c      	mov	r4, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	899b      	ldrh	r3, [r3, #12]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fa fc20 	bl	80051e8 <lwip_htons>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0303 	and.w	r3, r3, #3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <tcp_receive+0xa58>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e000      	b.n	800a9ba <tcp_receive+0xa5a>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	191a      	adds	r2, r3, r4
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	441a      	add	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ca:	461c      	mov	r4, r3
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	891b      	ldrh	r3, [r3, #8]
 800a9d0:	461d      	mov	r5, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	899b      	ldrh	r3, [r3, #12]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fa fc04 	bl	80051e8 <lwip_htons>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <tcp_receive+0xa90>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <tcp_receive+0xa92>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	442b      	add	r3, r5
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d206      	bcs.n	800aa06 <tcp_receive+0xaa6>
 800a9f8:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <tcp_receive+0xb14>)
 800a9fa:	f240 622b 	movw	r2, #1579	; 0x62b
 800a9fe:	4923      	ldr	r1, [pc, #140]	; (800aa8c <tcp_receive+0xb2c>)
 800aa00:	481e      	ldr	r0, [pc, #120]	; (800aa7c <tcp_receive+0xb1c>)
 800aa02:	f005 fbf7 	bl	80101f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	891b      	ldrh	r3, [r3, #8]
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fa fbe7 	bl	80051e8 <lwip_htons>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <tcp_receive+0xaca>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <tcp_receive+0xacc>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	1919      	adds	r1, r3, r4
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa32:	b28b      	uxth	r3, r1
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7fc fe09 	bl	8007654 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	891b      	ldrh	r3, [r3, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d028      	beq.n	800aa9e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <tcp_receive+0xb24>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01d      	beq.n	800aa90 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800aa54:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <tcp_receive+0xb24>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f7fb ffa2 	bl	80069a8 <pbuf_cat>
 800aa64:	e018      	b.n	800aa98 <tcp_receive+0xb38>
 800aa66:	bf00      	nop
 800aa68:	20006bee 	.word	0x20006bee
 800aa6c:	20006be4 	.word	0x20006be4
 800aa70:	20006bc4 	.word	0x20006bc4
 800aa74:	08012c5c 	.word	0x08012c5c
 800aa78:	0801303c 	.word	0x0801303c
 800aa7c:	08012ca8 	.word	0x08012ca8
 800aa80:	08013078 	.word	0x08013078
 800aa84:	20006bf4 	.word	0x20006bf4
 800aa88:	20006bf1 	.word	0x20006bf1
 800aa8c:	08013098 	.word	0x08013098
            } else {
              recv_data = cseg->p;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4a70      	ldr	r2, [pc, #448]	; (800ac58 <tcp_receive+0xcf8>)
 800aa96:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	899b      	ldrh	r3, [r3, #12]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fa fb9e 	bl	80051e8 <lwip_htons>
 800aaac:	4603      	mov	r3, r0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00d      	beq.n	800aad4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aab8:	4b68      	ldr	r3, [pc, #416]	; (800ac5c <tcp_receive+0xcfc>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f043 0320 	orr.w	r3, r3, #32
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	4b66      	ldr	r3, [pc, #408]	; (800ac5c <tcp_receive+0xcfc>)
 800aac4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	7d1b      	ldrb	r3, [r3, #20]
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d102      	bne.n	800aad4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2207      	movs	r2, #7
 800aad2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aadc:	68b8      	ldr	r0, [r7, #8]
 800aade:	f7fd fade 	bl	800809e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d008      	beq.n	800aafc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	f43f af43 	beq.w	800a982 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	8b5b      	ldrh	r3, [r3, #26]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00e      	beq.n	800ab26 <tcp_receive+0xbc6>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	8b5b      	ldrh	r3, [r3, #26]
 800ab0c:	f023 0301 	bic.w	r3, r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	835a      	strh	r2, [r3, #26]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8b5b      	ldrh	r3, [r3, #26]
 800ab1a:	f043 0302 	orr.w	r3, r3, #2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab24:	e188      	b.n	800ae38 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	8b5b      	ldrh	r3, [r3, #26]
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab34:	e180      	b.n	800ae38 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab3e:	4848      	ldr	r0, [pc, #288]	; (800ac60 <tcp_receive+0xd00>)
 800ab40:	f7fd fae4 	bl	800810c <tcp_seg_copy>
 800ab44:	4602      	mov	r2, r0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	675a      	str	r2, [r3, #116]	; 0x74
 800ab4a:	e16d      	b.n	800ae28 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab56:	e157      	b.n	800ae08 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	4b41      	ldr	r3, [pc, #260]	; (800ac64 <tcp_receive+0xd04>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d11d      	bne.n	800aba2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab66:	4b3e      	ldr	r3, [pc, #248]	; (800ac60 <tcp_receive+0xd00>)
 800ab68:	891a      	ldrh	r2, [r3, #8]
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	891b      	ldrh	r3, [r3, #8]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	f240 814f 	bls.w	800ae12 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab74:	483a      	ldr	r0, [pc, #232]	; (800ac60 <tcp_receive+0xd00>)
 800ab76:	f7fd fac9 	bl	800810c <tcp_seg_copy>
 800ab7a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 8149 	beq.w	800ae16 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	e002      	b.n	800ab98 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab9a:	6978      	ldr	r0, [r7, #20]
 800ab9c:	f7ff f8dc 	bl	8009d58 <tcp_oos_insert_segment>
                }
                break;
 800aba0:	e139      	b.n	800ae16 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d117      	bne.n	800abd8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aba8:	4b2e      	ldr	r3, [pc, #184]	; (800ac64 <tcp_receive+0xd04>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	da57      	bge.n	800ac68 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abb8:	4829      	ldr	r0, [pc, #164]	; (800ac60 <tcp_receive+0xd00>)
 800abba:	f7fd faa7 	bl	800810c <tcp_seg_copy>
 800abbe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 8129 	beq.w	800ae1a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800abce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abd0:	69b8      	ldr	r0, [r7, #24]
 800abd2:	f7ff f8c1 	bl	8009d58 <tcp_oos_insert_segment>
                  }
                  break;
 800abd6:	e120      	b.n	800ae1a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800abd8:	4b22      	ldr	r3, [pc, #136]	; (800ac64 <tcp_receive+0xd04>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	db3e      	blt.n	800ac68 <tcp_receive+0xd08>
 800abea:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <tcp_receive+0xd04>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	3301      	adds	r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc35      	bgt.n	800ac68 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abfc:	4818      	ldr	r0, [pc, #96]	; (800ac60 <tcp_receive+0xd00>)
 800abfe:	f7fd fa85 	bl	800810c <tcp_seg_copy>
 800ac02:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 8109 	beq.w	800ae1e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac14:	8912      	ldrh	r2, [r2, #8]
 800ac16:	441a      	add	r2, r3
 800ac18:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <tcp_receive+0xd04>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	dd12      	ble.n	800ac48 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ac22:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <tcp_receive+0xd04>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3e:	891b      	ldrh	r3, [r3, #8]
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fb fc68 	bl	8006518 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac50:	69f8      	ldr	r0, [r7, #28]
 800ac52:	f7ff f881 	bl	8009d58 <tcp_oos_insert_segment>
                  }
                  break;
 800ac56:	e0e2      	b.n	800ae1e <tcp_receive+0xebe>
 800ac58:	20006bf4 	.word	0x20006bf4
 800ac5c:	20006bf1 	.word	0x20006bf1
 800ac60:	20006bc4 	.word	0x20006bc4
 800ac64:	20006be4 	.word	0x20006be4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 80c6 	bne.w	800ae02 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac76:	4b80      	ldr	r3, [pc, #512]	; (800ae78 <tcp_receive+0xf18>)
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f340 80bd 	ble.w	800ae02 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fa faa9 	bl	80051e8 <lwip_htons>
 800ac96:	4603      	mov	r3, r0
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f040 80bf 	bne.w	800ae22 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aca4:	4875      	ldr	r0, [pc, #468]	; (800ae7c <tcp_receive+0xf1c>)
 800aca6:	f7fd fa31 	bl	800810c <tcp_seg_copy>
 800acaa:	4602      	mov	r2, r0
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 80b6 	beq.w	800ae26 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acc2:	8912      	ldrh	r2, [r2, #8]
 800acc4:	441a      	add	r2, r3
 800acc6:	4b6c      	ldr	r3, [pc, #432]	; (800ae78 <tcp_receive+0xf18>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd12      	ble.n	800acf6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800acd0:	4b69      	ldr	r3, [pc, #420]	; (800ae78 <tcp_receive+0xf18>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	b29b      	uxth	r3, r3
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	891b      	ldrh	r3, [r3, #8]
 800acee:	4619      	mov	r1, r3
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7fb fc11 	bl	8006518 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800acf6:	4b62      	ldr	r3, [pc, #392]	; (800ae80 <tcp_receive+0xf20>)
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b5e      	ldr	r3, [pc, #376]	; (800ae78 <tcp_receive+0xf18>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	441a      	add	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad0a:	440b      	add	r3, r1
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f340 8089 	ble.w	800ae26 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	899b      	ldrh	r3, [r3, #12]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fa fa62 	bl	80051e8 <lwip_htons>
 800ad24:	4603      	mov	r3, r0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d022      	beq.n	800ad76 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	899b      	ldrh	r3, [r3, #12]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	b21b      	sxth	r3, r3
 800ad3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad40:	b21c      	sxth	r4, r3
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	899b      	ldrh	r3, [r3, #12]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fa fa4b 	bl	80051e8 <lwip_htons>
 800ad52:	4603      	mov	r3, r0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fa fa42 	bl	80051e8 <lwip_htons>
 800ad64:	4603      	mov	r3, r0
 800ad66:	b21b      	sxth	r3, r3
 800ad68:	4323      	orrs	r3, r4
 800ad6a:	b21a      	sxth	r2, r3
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	b292      	uxth	r2, r2
 800ad74:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad80:	4413      	add	r3, r2
 800ad82:	b299      	uxth	r1, r3
 800ad84:	4b3c      	ldr	r3, [pc, #240]	; (800ae78 <tcp_receive+0xf18>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	1a8a      	subs	r2, r1, r2
 800ad90:	b292      	uxth	r2, r2
 800ad92:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	891b      	ldrh	r3, [r3, #8]
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f7fb fbb8 	bl	8006518 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	891c      	ldrh	r4, [r3, #8]
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fa fa15 	bl	80051e8 <lwip_htons>
 800adbe:	4603      	mov	r3, r0
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	f003 0303 	and.w	r3, r3, #3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <tcp_receive+0xe6e>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <tcp_receive+0xe70>
 800adce:	2300      	movs	r3, #0
 800add0:	4423      	add	r3, r4
 800add2:	b29a      	uxth	r2, r3
 800add4:	4b2a      	ldr	r3, [pc, #168]	; (800ae80 <tcp_receive+0xf20>)
 800add6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <tcp_receive+0xf20>)
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	4b26      	ldr	r3, [pc, #152]	; (800ae78 <tcp_receive+0xf18>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	441a      	add	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adec:	440b      	add	r3, r1
 800adee:	429a      	cmp	r2, r3
 800adf0:	d019      	beq.n	800ae26 <tcp_receive+0xec6>
 800adf2:	4b24      	ldr	r3, [pc, #144]	; (800ae84 <tcp_receive+0xf24>)
 800adf4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800adf8:	4923      	ldr	r1, [pc, #140]	; (800ae88 <tcp_receive+0xf28>)
 800adfa:	4824      	ldr	r0, [pc, #144]	; (800ae8c <tcp_receive+0xf2c>)
 800adfc:	f005 f9fa 	bl	80101f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ae00:	e011      	b.n	800ae26 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f47f aea4 	bne.w	800ab58 <tcp_receive+0xbf8>
 800ae10:	e00a      	b.n	800ae28 <tcp_receive+0xec8>
                break;
 800ae12:	bf00      	nop
 800ae14:	e008      	b.n	800ae28 <tcp_receive+0xec8>
                break;
 800ae16:	bf00      	nop
 800ae18:	e006      	b.n	800ae28 <tcp_receive+0xec8>
                  break;
 800ae1a:	bf00      	nop
 800ae1c:	e004      	b.n	800ae28 <tcp_receive+0xec8>
                  break;
 800ae1e:	bf00      	nop
 800ae20:	e002      	b.n	800ae28 <tcp_receive+0xec8>
                  break;
 800ae22:	bf00      	nop
 800ae24:	e000      	b.n	800ae28 <tcp_receive+0xec8>
                break;
 800ae26:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f001 fe8b 	bl	800cb44 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ae2e:	e003      	b.n	800ae38 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 fe87 	bl	800cb44 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae36:	e01a      	b.n	800ae6e <tcp_receive+0xf0e>
 800ae38:	e019      	b.n	800ae6e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <tcp_receive+0xf18>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db0a      	blt.n	800ae5e <tcp_receive+0xefe>
 800ae48:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <tcp_receive+0xf18>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae54:	440b      	add	r3, r1
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	3301      	adds	r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dd07      	ble.n	800ae6e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	8b5b      	ldrh	r3, [r3, #26]
 800ae62:	f043 0302 	orr.w	r3, r3, #2
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae6c:	e7ff      	b.n	800ae6e <tcp_receive+0xf0e>
 800ae6e:	bf00      	nop
 800ae70:	3750      	adds	r7, #80	; 0x50
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bdb0      	pop	{r4, r5, r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20006be4 	.word	0x20006be4
 800ae7c:	20006bc4 	.word	0x20006bc4
 800ae80:	20006bee 	.word	0x20006bee
 800ae84:	08012c5c 	.word	0x08012c5c
 800ae88:	08013004 	.word	0x08013004
 800ae8c:	08012ca8 	.word	0x08012ca8

0800ae90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae96:	4b15      	ldr	r3, [pc, #84]	; (800aeec <tcp_get_next_optbyte+0x5c>)
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	b291      	uxth	r1, r2
 800ae9e:	4a13      	ldr	r2, [pc, #76]	; (800aeec <tcp_get_next_optbyte+0x5c>)
 800aea0:	8011      	strh	r1, [r2, #0]
 800aea2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aea4:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <tcp_get_next_optbyte+0x60>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <tcp_get_next_optbyte+0x26>
 800aeac:	4b11      	ldr	r3, [pc, #68]	; (800aef4 <tcp_get_next_optbyte+0x64>)
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	88fa      	ldrh	r2, [r7, #6]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d208      	bcs.n	800aec8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <tcp_get_next_optbyte+0x68>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3314      	adds	r3, #20
 800aebc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	4413      	add	r3, r2
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	e00b      	b.n	800aee0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aec8:	88fb      	ldrh	r3, [r7, #6]
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <tcp_get_next_optbyte+0x64>)
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <tcp_get_next_optbyte+0x60>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	797b      	ldrb	r3, [r7, #5]
 800aedc:	4413      	add	r3, r2
 800aede:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20006be0 	.word	0x20006be0
 800aef0:	20006bdc 	.word	0x20006bdc
 800aef4:	20006bda 	.word	0x20006bda
 800aef8:	20006bd4 	.word	0x20006bd4

0800aefc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <tcp_parseopt+0x1c>
 800af0a:	4b32      	ldr	r3, [pc, #200]	; (800afd4 <tcp_parseopt+0xd8>)
 800af0c:	f240 727d 	movw	r2, #1917	; 0x77d
 800af10:	4931      	ldr	r1, [pc, #196]	; (800afd8 <tcp_parseopt+0xdc>)
 800af12:	4832      	ldr	r0, [pc, #200]	; (800afdc <tcp_parseopt+0xe0>)
 800af14:	f005 f96e 	bl	80101f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800af18:	4b31      	ldr	r3, [pc, #196]	; (800afe0 <tcp_parseopt+0xe4>)
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d055      	beq.n	800afcc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af20:	4b30      	ldr	r3, [pc, #192]	; (800afe4 <tcp_parseopt+0xe8>)
 800af22:	2200      	movs	r2, #0
 800af24:	801a      	strh	r2, [r3, #0]
 800af26:	e045      	b.n	800afb4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800af28:	f7ff ffb2 	bl	800ae90 <tcp_get_next_optbyte>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d006      	beq.n	800af44 <tcp_parseopt+0x48>
 800af36:	2b02      	cmp	r3, #2
 800af38:	dc2b      	bgt.n	800af92 <tcp_parseopt+0x96>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d041      	beq.n	800afc2 <tcp_parseopt+0xc6>
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d127      	bne.n	800af92 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af42:	e037      	b.n	800afb4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af44:	f7ff ffa4 	bl	800ae90 <tcp_get_next_optbyte>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d13b      	bne.n	800afc6 <tcp_parseopt+0xca>
 800af4e:	4b25      	ldr	r3, [pc, #148]	; (800afe4 <tcp_parseopt+0xe8>)
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a22      	ldr	r2, [pc, #136]	; (800afe0 <tcp_parseopt+0xe4>)
 800af56:	8812      	ldrh	r2, [r2, #0]
 800af58:	4293      	cmp	r3, r2
 800af5a:	da34      	bge.n	800afc6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af5c:	f7ff ff98 	bl	800ae90 <tcp_get_next_optbyte>
 800af60:	4603      	mov	r3, r0
 800af62:	b29b      	uxth	r3, r3
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af68:	f7ff ff92 	bl	800ae90 <tcp_get_next_optbyte>
 800af6c:	4603      	mov	r3, r0
 800af6e:	b29a      	uxth	r2, r3
 800af70:	89bb      	ldrh	r3, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af76:	89bb      	ldrh	r3, [r7, #12]
 800af78:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af7c:	d804      	bhi.n	800af88 <tcp_parseopt+0x8c>
 800af7e:	89bb      	ldrh	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <tcp_parseopt+0x8c>
 800af84:	89ba      	ldrh	r2, [r7, #12]
 800af86:	e001      	b.n	800af8c <tcp_parseopt+0x90>
 800af88:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af90:	e010      	b.n	800afb4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af92:	f7ff ff7d 	bl	800ae90 <tcp_get_next_optbyte>
 800af96:	4603      	mov	r3, r0
 800af98:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d914      	bls.n	800afca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <tcp_parseopt+0xe8>)
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	4413      	add	r3, r2
 800afaa:	b29b      	uxth	r3, r3
 800afac:	3b02      	subs	r3, #2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	4b0c      	ldr	r3, [pc, #48]	; (800afe4 <tcp_parseopt+0xe8>)
 800afb2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800afb4:	4b0b      	ldr	r3, [pc, #44]	; (800afe4 <tcp_parseopt+0xe8>)
 800afb6:	881a      	ldrh	r2, [r3, #0]
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <tcp_parseopt+0xe4>)
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d3b3      	bcc.n	800af28 <tcp_parseopt+0x2c>
 800afc0:	e004      	b.n	800afcc <tcp_parseopt+0xd0>
          return;
 800afc2:	bf00      	nop
 800afc4:	e002      	b.n	800afcc <tcp_parseopt+0xd0>
            return;
 800afc6:	bf00      	nop
 800afc8:	e000      	b.n	800afcc <tcp_parseopt+0xd0>
            return;
 800afca:	bf00      	nop
      }
    }
  }
}
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	08012c5c 	.word	0x08012c5c
 800afd8:	080130c0 	.word	0x080130c0
 800afdc:	08012ca8 	.word	0x08012ca8
 800afe0:	20006bd8 	.word	0x20006bd8
 800afe4:	20006be0 	.word	0x20006be0

0800afe8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <tcp_trigger_input_pcb_close+0x1c>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f043 0310 	orr.w	r3, r3, #16
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	4b03      	ldr	r3, [pc, #12]	; (800b004 <tcp_trigger_input_pcb_close+0x1c>)
 800aff8:	701a      	strb	r2, [r3, #0]
}
 800affa:	bf00      	nop
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	20006bf1 	.word	0x20006bf1

0800b008 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <tcp_route+0x28>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	7a1b      	ldrb	r3, [r3, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d006      	beq.n	800b030 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	7a1b      	ldrb	r3, [r3, #8]
 800b026:	4618      	mov	r0, r3
 800b028:	f7fb f89c 	bl	8006164 <netif_get_by_index>
 800b02c:	4603      	mov	r3, r0
 800b02e:	e003      	b.n	800b038 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f003 fe8f 	bl	800ed54 <ip4_route>
 800b036:	4603      	mov	r3, r0
  }
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d105      	bne.n	800b062 <tcp_create_segment+0x22>
 800b056:	4b44      	ldr	r3, [pc, #272]	; (800b168 <tcp_create_segment+0x128>)
 800b058:	22a3      	movs	r2, #163	; 0xa3
 800b05a:	4944      	ldr	r1, [pc, #272]	; (800b16c <tcp_create_segment+0x12c>)
 800b05c:	4844      	ldr	r0, [pc, #272]	; (800b170 <tcp_create_segment+0x130>)
 800b05e:	f005 f8c9 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d105      	bne.n	800b074 <tcp_create_segment+0x34>
 800b068:	4b3f      	ldr	r3, [pc, #252]	; (800b168 <tcp_create_segment+0x128>)
 800b06a:	22a4      	movs	r2, #164	; 0xa4
 800b06c:	4941      	ldr	r1, [pc, #260]	; (800b174 <tcp_create_segment+0x134>)
 800b06e:	4840      	ldr	r0, [pc, #256]	; (800b170 <tcp_create_segment+0x130>)
 800b070:	f005 f8c0 	bl	80101f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b082:	2003      	movs	r0, #3
 800b084:	f7fa fd70 	bl	8005b68 <memp_malloc>
 800b088:	6138      	str	r0, [r7, #16]
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d104      	bne.n	800b09a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b090:	68b8      	ldr	r0, [r7, #8]
 800b092:	f7fb fbc7 	bl	8006824 <pbuf_free>
    return NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	e061      	b.n	800b15e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b0a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	891a      	ldrh	r2, [r3, #8]
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d205      	bcs.n	800b0c6 <tcp_create_segment+0x86>
 800b0ba:	4b2b      	ldr	r3, [pc, #172]	; (800b168 <tcp_create_segment+0x128>)
 800b0bc:	22b0      	movs	r2, #176	; 0xb0
 800b0be:	492e      	ldr	r1, [pc, #184]	; (800b178 <tcp_create_segment+0x138>)
 800b0c0:	482b      	ldr	r0, [pc, #172]	; (800b170 <tcp_create_segment+0x130>)
 800b0c2:	f005 f897 	bl	80101f4 <iprintf>
  seg->len = p->tot_len - optlen;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	891a      	ldrh	r2, [r3, #8]
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0d6:	2114      	movs	r1, #20
 800b0d8:	68b8      	ldr	r0, [r7, #8]
 800b0da:	f7fb fb0d 	bl	80066f8 <pbuf_add_header>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b0e4:	6938      	ldr	r0, [r7, #16]
 800b0e6:	f7fc ffda 	bl	800809e <tcp_seg_free>
    return NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e037      	b.n	800b15e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8ada      	ldrh	r2, [r3, #22]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	68dc      	ldr	r4, [r3, #12]
 800b100:	4610      	mov	r0, r2
 800b102:	f7fa f871 	bl	80051e8 <lwip_htons>
 800b106:	4603      	mov	r3, r0
 800b108:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8b1a      	ldrh	r2, [r3, #24]
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	68dc      	ldr	r4, [r3, #12]
 800b112:	4610      	mov	r0, r2
 800b114:	f7fa f868 	bl	80051e8 <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	68dc      	ldr	r4, [r3, #12]
 800b120:	6838      	ldr	r0, [r7, #0]
 800b122:	f7fa f876 	bl	8005212 <lwip_htonl>
 800b126:	4603      	mov	r3, r0
 800b128:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	089b      	lsrs	r3, r3, #2
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	b29b      	uxth	r3, r3
 800b132:	3305      	adds	r3, #5
 800b134:	b29b      	uxth	r3, r3
 800b136:	031b      	lsls	r3, r3, #12
 800b138:	b29a      	uxth	r2, r3
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4313      	orrs	r3, r2
 800b140:	b29a      	uxth	r2, r3
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	68dc      	ldr	r4, [r3, #12]
 800b146:	4610      	mov	r0, r2
 800b148:	f7fa f84e 	bl	80051e8 <lwip_htons>
 800b14c:	4603      	mov	r3, r0
 800b14e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	749a      	strb	r2, [r3, #18]
 800b158:	2200      	movs	r2, #0
 800b15a:	74da      	strb	r2, [r3, #19]
  return seg;
 800b15c:	693b      	ldr	r3, [r7, #16]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	bd90      	pop	{r4, r7, pc}
 800b166:	bf00      	nop
 800b168:	080130dc 	.word	0x080130dc
 800b16c:	08013110 	.word	0x08013110
 800b170:	08013130 	.word	0x08013130
 800b174:	08013158 	.word	0x08013158
 800b178:	0801317c 	.word	0x0801317c

0800b17c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	607b      	str	r3, [r7, #4]
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
 800b188:	460b      	mov	r3, r1
 800b18a:	81bb      	strh	r3, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b190:	89bb      	ldrh	r3, [r7, #12]
 800b192:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <tcp_pbuf_prealloc+0x2a>
 800b19a:	4b30      	ldr	r3, [pc, #192]	; (800b25c <tcp_pbuf_prealloc+0xe0>)
 800b19c:	22e8      	movs	r2, #232	; 0xe8
 800b19e:	4930      	ldr	r1, [pc, #192]	; (800b260 <tcp_pbuf_prealloc+0xe4>)
 800b1a0:	4830      	ldr	r0, [pc, #192]	; (800b264 <tcp_pbuf_prealloc+0xe8>)
 800b1a2:	f005 f827 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d105      	bne.n	800b1b8 <tcp_pbuf_prealloc+0x3c>
 800b1ac:	4b2b      	ldr	r3, [pc, #172]	; (800b25c <tcp_pbuf_prealloc+0xe0>)
 800b1ae:	22e9      	movs	r2, #233	; 0xe9
 800b1b0:	492d      	ldr	r1, [pc, #180]	; (800b268 <tcp_pbuf_prealloc+0xec>)
 800b1b2:	482c      	ldr	r0, [pc, #176]	; (800b264 <tcp_pbuf_prealloc+0xe8>)
 800b1b4:	f005 f81e 	bl	80101f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b1b8:	89ba      	ldrh	r2, [r7, #12]
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d221      	bcs.n	800b204 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d111      	bne.n	800b1f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	8b5b      	ldrh	r3, [r3, #26]
 800b1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d115      	bne.n	800b204 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b1d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d103      	bne.n	800b1f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b1f0:	89bb      	ldrh	r3, [r7, #12]
 800b1f2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b1f6:	f023 0203 	bic.w	r2, r3, #3
 800b1fa:	897b      	ldrh	r3, [r7, #10]
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	bf28      	it	cs
 800b200:	4613      	movcs	r3, r2
 800b202:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b204:	8af9      	ldrh	r1, [r7, #22]
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fb f825 	bl	800625c <pbuf_alloc>
 800b212:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e019      	b.n	800b252 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <tcp_pbuf_prealloc+0xb8>
 800b226:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <tcp_pbuf_prealloc+0xe0>)
 800b228:	f240 120b 	movw	r2, #267	; 0x10b
 800b22c:	490f      	ldr	r1, [pc, #60]	; (800b26c <tcp_pbuf_prealloc+0xf0>)
 800b22e:	480d      	ldr	r0, [pc, #52]	; (800b264 <tcp_pbuf_prealloc+0xe8>)
 800b230:	f004 ffe0 	bl	80101f4 <iprintf>
  *oversize = p->len - length;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	895a      	ldrh	r2, [r3, #10]
 800b238:	89bb      	ldrh	r3, [r7, #12]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	89ba      	ldrh	r2, [r7, #12]
 800b246:	811a      	strh	r2, [r3, #8]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	891a      	ldrh	r2, [r3, #8]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	815a      	strh	r2, [r3, #10]
  return p;
 800b250:	693b      	ldr	r3, [r7, #16]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	080130dc 	.word	0x080130dc
 800b260:	08013194 	.word	0x08013194
 800b264:	08013130 	.word	0x08013130
 800b268:	080131b8 	.word	0x080131b8
 800b26c:	080131d8 	.word	0x080131d8

0800b270 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <tcp_write_checks+0x20>
 800b282:	4b33      	ldr	r3, [pc, #204]	; (800b350 <tcp_write_checks+0xe0>)
 800b284:	f240 1233 	movw	r2, #307	; 0x133
 800b288:	4932      	ldr	r1, [pc, #200]	; (800b354 <tcp_write_checks+0xe4>)
 800b28a:	4833      	ldr	r0, [pc, #204]	; (800b358 <tcp_write_checks+0xe8>)
 800b28c:	f004 ffb2 	bl	80101f4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7d1b      	ldrb	r3, [r3, #20]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d00e      	beq.n	800b2b6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b29c:	2b07      	cmp	r3, #7
 800b29e:	d00a      	beq.n	800b2b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d006      	beq.n	800b2b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d002      	beq.n	800b2b6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b2b0:	f06f 030a 	mvn.w	r3, #10
 800b2b4:	e048      	b.n	800b348 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b2b6:	887b      	ldrh	r3, [r7, #2]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <tcp_write_checks+0x50>
    return ERR_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e043      	b.n	800b348 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2c6:	887a      	ldrh	r2, [r7, #2]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d909      	bls.n	800b2e0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	8b5b      	ldrh	r3, [r3, #26]
 800b2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295
 800b2de:	e033      	b.n	800b348 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2e6:	2b08      	cmp	r3, #8
 800b2e8:	d909      	bls.n	800b2fe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	8b5b      	ldrh	r3, [r3, #26]
 800b2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fc:	e024      	b.n	800b348 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00f      	beq.n	800b328 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11a      	bne.n	800b346 <tcp_write_checks+0xd6>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d116      	bne.n	800b346 <tcp_write_checks+0xd6>
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <tcp_write_checks+0xe0>)
 800b31a:	f240 1255 	movw	r2, #341	; 0x155
 800b31e:	490f      	ldr	r1, [pc, #60]	; (800b35c <tcp_write_checks+0xec>)
 800b320:	480d      	ldr	r0, [pc, #52]	; (800b358 <tcp_write_checks+0xe8>)
 800b322:	f004 ff67 	bl	80101f4 <iprintf>
 800b326:	e00e      	b.n	800b346 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <tcp_write_checks+0xc8>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <tcp_write_checks+0xd6>
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <tcp_write_checks+0xe0>)
 800b33a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b33e:	4908      	ldr	r1, [pc, #32]	; (800b360 <tcp_write_checks+0xf0>)
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <tcp_write_checks+0xe8>)
 800b342:	f004 ff57 	bl	80101f4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	080130dc 	.word	0x080130dc
 800b354:	080131ec 	.word	0x080131ec
 800b358:	08013130 	.word	0x08013130
 800b35c:	0801320c 	.word	0x0801320c
 800b360:	08013248 	.word	0x08013248

0800b364 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b09b      	sub	sp, #108	; 0x6c
 800b368:	af04      	add	r7, sp, #16
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4611      	mov	r1, r2
 800b370:	461a      	mov	r2, r3
 800b372:	460b      	mov	r3, r1
 800b374:	80fb      	strh	r3, [r7, #6]
 800b376:	4613      	mov	r3, r2
 800b378:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b37a:	2300      	movs	r3, #0
 800b37c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	653b      	str	r3, [r7, #80]	; 0x50
 800b382:	2300      	movs	r3, #0
 800b384:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b386:	2300      	movs	r3, #0
 800b388:	64bb      	str	r3, [r7, #72]	; 0x48
 800b38a:	2300      	movs	r3, #0
 800b38c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b38e:	2300      	movs	r3, #0
 800b390:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d109      	bne.n	800b3c0 <tcp_write+0x5c>
 800b3ac:	4ba4      	ldr	r3, [pc, #656]	; (800b640 <tcp_write+0x2dc>)
 800b3ae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b3b2:	49a4      	ldr	r1, [pc, #656]	; (800b644 <tcp_write+0x2e0>)
 800b3b4:	48a4      	ldr	r0, [pc, #656]	; (800b648 <tcp_write+0x2e4>)
 800b3b6:	f004 ff1d 	bl	80101f4 <iprintf>
 800b3ba:	f06f 030f 	mvn.w	r3, #15
 800b3be:	e32a      	b.n	800ba16 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	bf28      	it	cs
 800b3d2:	4613      	movcs	r3, r2
 800b3d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <tcp_write+0x7e>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e0:	e000      	b.n	800b3e4 <tcp_write+0x80>
 800b3e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <tcp_write+0x9c>
 800b3ec:	4b94      	ldr	r3, [pc, #592]	; (800b640 <tcp_write+0x2dc>)
 800b3ee:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b3f2:	4996      	ldr	r1, [pc, #600]	; (800b64c <tcp_write+0x2e8>)
 800b3f4:	4894      	ldr	r0, [pc, #592]	; (800b648 <tcp_write+0x2e4>)
 800b3f6:	f004 fefd 	bl	80101f4 <iprintf>
 800b3fa:	f06f 030f 	mvn.w	r3, #15
 800b3fe:	e30a      	b.n	800ba16 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b400:	88fb      	ldrh	r3, [r7, #6]
 800b402:	4619      	mov	r1, r3
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff ff33 	bl	800b270 <tcp_write_checks>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b410:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <tcp_write+0xba>
    return err;
 800b418:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b41c:	e2fb      	b.n	800ba16 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b424:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80f6 	beq.w	800b624 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	653b      	str	r3, [r7, #80]	; 0x50
 800b43e:	e002      	b.n	800b446 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1f8      	bne.n	800b440 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b450:	7a9b      	ldrb	r3, [r3, #10]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	b29b      	uxth	r3, r3
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b45c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b460:	891b      	ldrh	r3, [r3, #8]
 800b462:	4619      	mov	r1, r3
 800b464:	8c3b      	ldrh	r3, [r7, #32]
 800b466:	440b      	add	r3, r1
 800b468:	429a      	cmp	r2, r3
 800b46a:	da06      	bge.n	800b47a <tcp_write+0x116>
 800b46c:	4b74      	ldr	r3, [pc, #464]	; (800b640 <tcp_write+0x2dc>)
 800b46e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b472:	4977      	ldr	r1, [pc, #476]	; (800b650 <tcp_write+0x2ec>)
 800b474:	4874      	ldr	r0, [pc, #464]	; (800b648 <tcp_write+0x2e4>)
 800b476:	f004 febd 	bl	80101f4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47c:	891a      	ldrh	r2, [r3, #8]
 800b47e:	8c3b      	ldrh	r3, [r7, #32]
 800b480:	4413      	add	r3, r2
 800b482:	b29b      	uxth	r3, r3
 800b484:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b490:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b492:	8a7b      	ldrh	r3, [r7, #18]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d026      	beq.n	800b4e6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b498:	8a7b      	ldrh	r3, [r7, #18]
 800b49a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d206      	bcs.n	800b4ae <tcp_write+0x14a>
 800b4a0:	4b67      	ldr	r3, [pc, #412]	; (800b640 <tcp_write+0x2dc>)
 800b4a2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b4a6:	496b      	ldr	r1, [pc, #428]	; (800b654 <tcp_write+0x2f0>)
 800b4a8:	4867      	ldr	r0, [pc, #412]	; (800b648 <tcp_write+0x2e4>)
 800b4aa:	f004 fea3 	bl	80101f4 <iprintf>
      seg = last_unsent;
 800b4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b4b2:	8a7b      	ldrh	r3, [r7, #18]
 800b4b4:	88fa      	ldrh	r2, [r7, #6]
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	bf28      	it	cs
 800b4ba:	4613      	movcs	r3, r2
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	bf28      	it	cs
 800b4c4:	4613      	movcs	r3, r2
 800b4c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b4c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b4d4:	8a7a      	ldrh	r2, [r7, #18]
 800b4d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b4de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4e6:	8a7b      	ldrh	r3, [r7, #18]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00b      	beq.n	800b504 <tcp_write+0x1a0>
 800b4ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d006      	beq.n	800b504 <tcp_write+0x1a0>
 800b4f6:	4b52      	ldr	r3, [pc, #328]	; (800b640 <tcp_write+0x2dc>)
 800b4f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4fc:	4956      	ldr	r1, [pc, #344]	; (800b658 <tcp_write+0x2f4>)
 800b4fe:	4852      	ldr	r0, [pc, #328]	; (800b648 <tcp_write+0x2e4>)
 800b500:	f004 fe78 	bl	80101f4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b508:	88fb      	ldrh	r3, [r7, #6]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	f080 8167 	bcs.w	800b7de <tcp_write+0x47a>
 800b510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 8163 	beq.w	800b7de <tcp_write+0x47a>
 800b518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51a:	891b      	ldrh	r3, [r3, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 815e 	beq.w	800b7de <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b522:	88fa      	ldrh	r2, [r7, #6]
 800b524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b528:	1ad2      	subs	r2, r2, r3
 800b52a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b52c:	4293      	cmp	r3, r2
 800b52e:	bfa8      	it	ge
 800b530:	4613      	movge	r3, r2
 800b532:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b536:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b538:	797b      	ldrb	r3, [r7, #5]
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d027      	beq.n	800b592 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b542:	f107 0012 	add.w	r0, r7, #18
 800b546:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b548:	8bf9      	ldrh	r1, [r7, #30]
 800b54a:	2301      	movs	r3, #1
 800b54c:	9302      	str	r3, [sp, #8]
 800b54e:	797b      	ldrb	r3, [r7, #5]
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	4603      	mov	r3, r0
 800b558:	2000      	movs	r0, #0
 800b55a:	f7ff fe0f 	bl	800b17c <tcp_pbuf_prealloc>
 800b55e:	6578      	str	r0, [r7, #84]	; 0x54
 800b560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b562:	2b00      	cmp	r3, #0
 800b564:	f000 8225 	beq.w	800b9b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b56a:	6858      	ldr	r0, [r3, #4]
 800b56c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	4413      	add	r3, r2
 800b574:	8bfa      	ldrh	r2, [r7, #30]
 800b576:	4619      	mov	r1, r3
 800b578:	f004 fe0c 	bl	8010194 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b57c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b57e:	f7fb f9d9 	bl	8006934 <pbuf_clen>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b58a:	4413      	add	r3, r2
 800b58c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b590:	e041      	b.n	800b616 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
 800b598:	e002      	b.n	800b5a0 <tcp_write+0x23c>
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1f8      	bne.n	800b59a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5aa:	7b1b      	ldrb	r3, [r3, #12]
 800b5ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d115      	bne.n	800b5e0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5ba:	8952      	ldrh	r2, [r2, #10]
 800b5bc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d10d      	bne.n	800b5e0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b5c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <tcp_write+0x276>
 800b5cc:	4b1c      	ldr	r3, [pc, #112]	; (800b640 <tcp_write+0x2dc>)
 800b5ce:	f240 2231 	movw	r2, #561	; 0x231
 800b5d2:	4922      	ldr	r1, [pc, #136]	; (800b65c <tcp_write+0x2f8>)
 800b5d4:	481c      	ldr	r0, [pc, #112]	; (800b648 <tcp_write+0x2e4>)
 800b5d6:	f004 fe0d 	bl	80101f4 <iprintf>
          extendlen = seglen;
 800b5da:	8bfb      	ldrh	r3, [r7, #30]
 800b5dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b5de:	e01a      	b.n	800b616 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5e0:	8bfb      	ldrh	r3, [r7, #30]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7fa fe38 	bl	800625c <pbuf_alloc>
 800b5ec:	6578      	str	r0, [r7, #84]	; 0x54
 800b5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 81e0 	beq.w	800b9b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b5f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	441a      	add	r2, r3
 800b5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b600:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b602:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b604:	f7fb f996 	bl	8006934 <pbuf_clen>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b610:	4413      	add	r3, r2
 800b612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b616:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b61a:	8bfb      	ldrh	r3, [r7, #30]
 800b61c:	4413      	add	r3, r2
 800b61e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b622:	e0dc      	b.n	800b7de <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80d7 	beq.w	800b7de <tcp_write+0x47a>
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <tcp_write+0x2dc>)
 800b632:	f240 224a 	movw	r2, #586	; 0x24a
 800b636:	490a      	ldr	r1, [pc, #40]	; (800b660 <tcp_write+0x2fc>)
 800b638:	4803      	ldr	r0, [pc, #12]	; (800b648 <tcp_write+0x2e4>)
 800b63a:	f004 fddb 	bl	80101f4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b63e:	e0ce      	b.n	800b7de <tcp_write+0x47a>
 800b640:	080130dc 	.word	0x080130dc
 800b644:	0801327c 	.word	0x0801327c
 800b648:	08013130 	.word	0x08013130
 800b64c:	08013294 	.word	0x08013294
 800b650:	080132c8 	.word	0x080132c8
 800b654:	080132e0 	.word	0x080132e0
 800b658:	08013300 	.word	0x08013300
 800b65c:	08013320 	.word	0x08013320
 800b660:	0801334c 	.word	0x0801334c
    struct pbuf *p;
    u16_t left = len - pos;
 800b664:	88fa      	ldrh	r2, [r7, #6]
 800b666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b66e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b672:	b29b      	uxth	r3, r3
 800b674:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b67a:	8b7a      	ldrh	r2, [r7, #26]
 800b67c:	8bbb      	ldrh	r3, [r7, #28]
 800b67e:	4293      	cmp	r3, r2
 800b680:	bf28      	it	cs
 800b682:	4613      	movcs	r3, r2
 800b684:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b686:	797b      	ldrb	r3, [r7, #5]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d036      	beq.n	800b6fe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b694:	b29a      	uxth	r2, r3
 800b696:	8b3b      	ldrh	r3, [r7, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	b299      	uxth	r1, r3
 800b69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bf0c      	ite	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	2300      	movne	r3, #0
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	f107 0012 	add.w	r0, r7, #18
 800b6ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	797b      	ldrb	r3, [r7, #5]
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2036      	movs	r0, #54	; 0x36
 800b6bc:	f7ff fd5e 	bl	800b17c <tcp_pbuf_prealloc>
 800b6c0:	6338      	str	r0, [r7, #48]	; 0x30
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8178 	beq.w	800b9ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	895b      	ldrh	r3, [r3, #10]
 800b6ce:	8b3a      	ldrh	r2, [r7, #24]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d906      	bls.n	800b6e2 <tcp_write+0x37e>
 800b6d4:	4b8c      	ldr	r3, [pc, #560]	; (800b908 <tcp_write+0x5a4>)
 800b6d6:	f240 2266 	movw	r2, #614	; 0x266
 800b6da:	498c      	ldr	r1, [pc, #560]	; (800b90c <tcp_write+0x5a8>)
 800b6dc:	488c      	ldr	r0, [pc, #560]	; (800b910 <tcp_write+0x5ac>)
 800b6de:	f004 fd89 	bl	80101f4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6ea:	18d0      	adds	r0, r2, r3
 800b6ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	8b3a      	ldrh	r2, [r7, #24]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f004 fd4c 	bl	8010194 <memcpy>
 800b6fc:	e02f      	b.n	800b75e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b6fe:	8a7b      	ldrh	r3, [r7, #18]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <tcp_write+0x3ae>
 800b704:	4b80      	ldr	r3, [pc, #512]	; (800b908 <tcp_write+0x5a4>)
 800b706:	f240 2271 	movw	r2, #625	; 0x271
 800b70a:	4982      	ldr	r1, [pc, #520]	; (800b914 <tcp_write+0x5b0>)
 800b70c:	4880      	ldr	r0, [pc, #512]	; (800b910 <tcp_write+0x5ac>)
 800b70e:	f004 fd71 	bl	80101f4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b712:	8b3b      	ldrh	r3, [r7, #24]
 800b714:	2201      	movs	r2, #1
 800b716:	4619      	mov	r1, r3
 800b718:	2036      	movs	r0, #54	; 0x36
 800b71a:	f7fa fd9f 	bl	800625c <pbuf_alloc>
 800b71e:	6178      	str	r0, [r7, #20]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	f000 814b 	beq.w	800b9be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	441a      	add	r2, r3
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b734:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b738:	b29b      	uxth	r3, r3
 800b73a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b73e:	4619      	mov	r1, r3
 800b740:	2036      	movs	r0, #54	; 0x36
 800b742:	f7fa fd8b 	bl	800625c <pbuf_alloc>
 800b746:	6338      	str	r0, [r7, #48]	; 0x30
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b74e:	6978      	ldr	r0, [r7, #20]
 800b750:	f7fb f868 	bl	8006824 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b754:	e136      	b.n	800b9c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b756:	6979      	ldr	r1, [r7, #20]
 800b758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b75a:	f7fb f925 	bl	80069a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b75e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b760:	f7fb f8e8 	bl	8006934 <pbuf_clen>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b76c:	4413      	add	r3, r2
 800b76e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b776:	2b09      	cmp	r3, #9
 800b778:	d903      	bls.n	800b782 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77c:	f7fb f852 	bl	8006824 <pbuf_free>
      goto memerr;
 800b780:	e120      	b.n	800b9c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b78a:	441a      	add	r2, r3
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	4613      	mov	r3, r2
 800b794:	2200      	movs	r2, #0
 800b796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff fc51 	bl	800b040 <tcp_create_segment>
 800b79e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 810d 	beq.w	800b9c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <tcp_write+0x450>
      queue = seg;
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b0:	647b      	str	r3, [r7, #68]	; 0x44
 800b7b2:	e00c      	b.n	800b7ce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <tcp_write+0x464>
 800b7ba:	4b53      	ldr	r3, [pc, #332]	; (800b908 <tcp_write+0x5a4>)
 800b7bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b7c0:	4955      	ldr	r1, [pc, #340]	; (800b918 <tcp_write+0x5b4>)
 800b7c2:	4853      	ldr	r0, [pc, #332]	; (800b910 <tcp_write+0x5ac>)
 800b7c4:	f004 fd16 	bl	80101f4 <iprintf>
      prev_seg->next = seg;
 800b7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7cc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b7d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7d6:	8b3b      	ldrh	r3, [r7, #24]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b7de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	f4ff af3d 	bcc.w	800b664 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b7ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d02c      	beq.n	800b84a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7f6:	e01e      	b.n	800b836 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	891a      	ldrh	r2, [r3, #8]
 800b7fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7fe:	4413      	add	r3, r2
 800b800:	b29a      	uxth	r2, r3
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d110      	bne.n	800b830 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b814:	8952      	ldrh	r2, [r2, #10]
 800b816:	4413      	add	r3, r2
 800b818:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b81a:	68b9      	ldr	r1, [r7, #8]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f004 fcb9 	bl	8010194 <memcpy>
        p->len += oversize_used;
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	895a      	ldrh	r2, [r3, #10]
 800b826:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b828:	4413      	add	r3, r2
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1dd      	bne.n	800b7f8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b83e:	891a      	ldrh	r2, [r3, #8]
 800b840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b842:	4413      	add	r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b848:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b84a:	8a7a      	ldrh	r2, [r7, #18]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b854:	2b00      	cmp	r3, #0
 800b856:	d018      	beq.n	800b88a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <tcp_write+0x508>
 800b85e:	4b2a      	ldr	r3, [pc, #168]	; (800b908 <tcp_write+0x5a4>)
 800b860:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b864:	492d      	ldr	r1, [pc, #180]	; (800b91c <tcp_write+0x5b8>)
 800b866:	482a      	ldr	r0, [pc, #168]	; (800b910 <tcp_write+0x5ac>)
 800b868:	f004 fcc4 	bl	80101f4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b872:	4618      	mov	r0, r3
 800b874:	f7fb f898 	bl	80069a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87a:	891a      	ldrh	r2, [r3, #8]
 800b87c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b87e:	891b      	ldrh	r3, [r3, #8]
 800b880:	4413      	add	r3, r2
 800b882:	b29a      	uxth	r2, r3
 800b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b886:	811a      	strh	r2, [r3, #8]
 800b888:	e037      	b.n	800b8fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b88a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d034      	beq.n	800b8fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <tcp_write+0x53a>
 800b896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <tcp_write+0x548>
 800b89e:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <tcp_write+0x5a4>)
 800b8a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b8a4:	491e      	ldr	r1, [pc, #120]	; (800b920 <tcp_write+0x5bc>)
 800b8a6:	481a      	ldr	r0, [pc, #104]	; (800b910 <tcp_write+0x5ac>)
 800b8a8:	f004 fca4 	bl	80101f4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8b2:	e009      	b.n	800b8c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	891a      	ldrh	r2, [r3, #8]
 800b8b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8ba:	4413      	add	r3, r2
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1f1      	bne.n	800b8b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	891a      	ldrh	r2, [r3, #8]
 800b8d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	895a      	ldrh	r2, [r3, #10]
 800b8e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8e4:	4413      	add	r3, r2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ee:	891a      	ldrh	r2, [r3, #8]
 800b8f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8f2:	4413      	add	r3, r2
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d111      	bne.n	800b924 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b904:	66da      	str	r2, [r3, #108]	; 0x6c
 800b906:	e010      	b.n	800b92a <tcp_write+0x5c6>
 800b908:	080130dc 	.word	0x080130dc
 800b90c:	0801337c 	.word	0x0801337c
 800b910:	08013130 	.word	0x08013130
 800b914:	080133bc 	.word	0x080133bc
 800b918:	080133cc 	.word	0x080133cc
 800b91c:	080133e0 	.word	0x080133e0
 800b920:	08013418 	.word	0x08013418
  } else {
    last_unsent->next = queue;
 800b924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b928:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b92e:	88fb      	ldrh	r3, [r7, #6]
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29a      	uxth	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b94e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00e      	beq.n	800b97a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <tcp_write+0x616>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d106      	bne.n	800b97a <tcp_write+0x616>
 800b96c:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <tcp_write+0x6bc>)
 800b96e:	f240 3212 	movw	r2, #786	; 0x312
 800b972:	492c      	ldr	r1, [pc, #176]	; (800ba24 <tcp_write+0x6c0>)
 800b974:	482c      	ldr	r0, [pc, #176]	; (800ba28 <tcp_write+0x6c4>)
 800b976:	f004 fc3d 	bl	80101f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d016      	beq.n	800b9ae <tcp_write+0x64a>
 800b980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d012      	beq.n	800b9ae <tcp_write+0x64a>
 800b988:	797b      	ldrb	r3, [r7, #5]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10d      	bne.n	800b9ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	899b      	ldrh	r3, [r3, #12]
 800b998:	b29c      	uxth	r4, r3
 800b99a:	2008      	movs	r0, #8
 800b99c:	f7f9 fc24 	bl	80051e8 <lwip_htons>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4322      	orrs	r2, r4
 800b9aa:	b292      	uxth	r2, r2
 800b9ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e031      	b.n	800ba16 <tcp_write+0x6b2>
          goto memerr;
 800b9b2:	bf00      	nop
 800b9b4:	e006      	b.n	800b9c4 <tcp_write+0x660>
            goto memerr;
 800b9b6:	bf00      	nop
 800b9b8:	e004      	b.n	800b9c4 <tcp_write+0x660>
        goto memerr;
 800b9ba:	bf00      	nop
 800b9bc:	e002      	b.n	800b9c4 <tcp_write+0x660>
        goto memerr;
 800b9be:	bf00      	nop
 800b9c0:	e000      	b.n	800b9c4 <tcp_write+0x660>
      goto memerr;
 800b9c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8b5b      	ldrh	r3, [r3, #26]
 800b9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b9d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9da:	f7fa ff23 	bl	8006824 <pbuf_free>
  }
  if (queue != NULL) {
 800b9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <tcp_write+0x686>
    tcp_segs_free(queue);
 800b9e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b9e6:	f7fc fb45 	bl	8008074 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <tcp_write+0x6ae>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d106      	bne.n	800ba12 <tcp_write+0x6ae>
 800ba04:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <tcp_write+0x6bc>)
 800ba06:	f240 3227 	movw	r2, #807	; 0x327
 800ba0a:	4906      	ldr	r1, [pc, #24]	; (800ba24 <tcp_write+0x6c0>)
 800ba0c:	4806      	ldr	r0, [pc, #24]	; (800ba28 <tcp_write+0x6c4>)
 800ba0e:	f004 fbf1 	bl	80101f4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	375c      	adds	r7, #92	; 0x5c
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd90      	pop	{r4, r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	080130dc 	.word	0x080130dc
 800ba24:	08013450 	.word	0x08013450
 800ba28:	08013130 	.word	0x08013130

0800ba2c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ba2c:	b590      	push	{r4, r7, lr}
 800ba2e:	b08b      	sub	sp, #44	; 0x2c
 800ba30:	af02      	add	r7, sp, #8
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <tcp_split_unsent_seg+0x2c>
 800ba4a:	4b95      	ldr	r3, [pc, #596]	; (800bca0 <tcp_split_unsent_seg+0x274>)
 800ba4c:	f240 324b 	movw	r2, #843	; 0x34b
 800ba50:	4994      	ldr	r1, [pc, #592]	; (800bca4 <tcp_split_unsent_seg+0x278>)
 800ba52:	4895      	ldr	r0, [pc, #596]	; (800bca8 <tcp_split_unsent_seg+0x27c>)
 800ba54:	f004 fbce 	bl	80101f4 <iprintf>

  useg = pcb->unsent;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba5c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d102      	bne.n	800ba6a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	e116      	b.n	800bc98 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ba6a:	887b      	ldrh	r3, [r7, #2]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d109      	bne.n	800ba84 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ba70:	4b8b      	ldr	r3, [pc, #556]	; (800bca0 <tcp_split_unsent_seg+0x274>)
 800ba72:	f240 3253 	movw	r2, #851	; 0x353
 800ba76:	498d      	ldr	r1, [pc, #564]	; (800bcac <tcp_split_unsent_seg+0x280>)
 800ba78:	488b      	ldr	r0, [pc, #556]	; (800bca8 <tcp_split_unsent_seg+0x27c>)
 800ba7a:	f004 fbbb 	bl	80101f4 <iprintf>
    return ERR_VAL;
 800ba7e:	f06f 0305 	mvn.w	r3, #5
 800ba82:	e109      	b.n	800bc98 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	891b      	ldrh	r3, [r3, #8]
 800ba88:	887a      	ldrh	r2, [r7, #2]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d301      	bcc.n	800ba92 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e102      	b.n	800bc98 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba96:	887a      	ldrh	r2, [r7, #2]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d906      	bls.n	800baaa <tcp_split_unsent_seg+0x7e>
 800ba9c:	4b80      	ldr	r3, [pc, #512]	; (800bca0 <tcp_split_unsent_seg+0x274>)
 800ba9e:	f240 325b 	movw	r2, #859	; 0x35b
 800baa2:	4983      	ldr	r1, [pc, #524]	; (800bcb0 <tcp_split_unsent_seg+0x284>)
 800baa4:	4880      	ldr	r0, [pc, #512]	; (800bca8 <tcp_split_unsent_seg+0x27c>)
 800baa6:	f004 fba5 	bl	80101f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	891b      	ldrh	r3, [r3, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <tcp_split_unsent_seg+0x94>
 800bab2:	4b7b      	ldr	r3, [pc, #492]	; (800bca0 <tcp_split_unsent_seg+0x274>)
 800bab4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bab8:	497e      	ldr	r1, [pc, #504]	; (800bcb4 <tcp_split_unsent_seg+0x288>)
 800baba:	487b      	ldr	r0, [pc, #492]	; (800bca8 <tcp_split_unsent_seg+0x27c>)
 800babc:	f004 fb9a 	bl	80101f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	7a9b      	ldrb	r3, [r3, #10]
 800bac4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	891a      	ldrh	r2, [r3, #8]
 800bad6:	887b      	ldrh	r3, [r7, #2]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	b29a      	uxth	r2, r3
 800bae0:	89bb      	ldrh	r3, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800baea:	4619      	mov	r1, r3
 800baec:	2036      	movs	r0, #54	; 0x36
 800baee:	f7fa fbb5 	bl	800625c <pbuf_alloc>
 800baf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f000 80b7 	beq.w	800bc6a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	891a      	ldrh	r2, [r3, #8]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	887b      	ldrh	r3, [r7, #2]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	6858      	ldr	r0, [r3, #4]
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	18d1      	adds	r1, r2, r3
 800bb1c:	897b      	ldrh	r3, [r7, #10]
 800bb1e:	89ba      	ldrh	r2, [r7, #12]
 800bb20:	f7fb f87a 	bl	8006c18 <pbuf_copy_partial>
 800bb24:	4603      	mov	r3, r0
 800bb26:	461a      	mov	r2, r3
 800bb28:	89bb      	ldrh	r3, [r7, #12]
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	f040 809f 	bne.w	800bc6e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	899b      	ldrh	r3, [r3, #12]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f9 fb55 	bl	80051e8 <lwip_htons>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb46:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bb48:	2300      	movs	r3, #0
 800bb4a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bb4c:	7efb      	ldrb	r3, [r7, #27]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bb56:	7efb      	ldrb	r3, [r7, #27]
 800bb58:	f023 0308 	bic.w	r3, r3, #8
 800bb5c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bb5e:	7ebb      	ldrb	r3, [r7, #26]
 800bb60:	f043 0308 	orr.w	r3, r3, #8
 800bb64:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bb66:	7efb      	ldrb	r3, [r7, #27]
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bb70:	7efb      	ldrb	r3, [r7, #27]
 800bb72:	f023 0301 	bic.w	r3, r3, #1
 800bb76:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bb78:	7ebb      	ldrb	r3, [r7, #26]
 800bb7a:	f043 0301 	orr.w	r3, r3, #1
 800bb7e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f9 fb43 	bl	8005212 <lwip_htonl>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	887b      	ldrh	r3, [r7, #2]
 800bb90:	18d1      	adds	r1, r2, r3
 800bb92:	7eba      	ldrb	r2, [r7, #26]
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	6939      	ldr	r1, [r7, #16]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff fa4f 	bl	800b040 <tcp_create_segment>
 800bba2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d063      	beq.n	800bc72 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fa fec0 	bl	8006934 <pbuf_clen>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	6858      	ldr	r0, [r3, #4]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	891a      	ldrh	r2, [r3, #8]
 800bbd2:	89bb      	ldrh	r3, [r7, #12]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f7fa fc9d 	bl	8006518 <pbuf_realloc>
  useg->len -= remainder;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	891a      	ldrh	r2, [r3, #8]
 800bbe2:	89bb      	ldrh	r3, [r7, #12]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	b29c      	uxth	r4, r3
 800bbf4:	7efb      	ldrb	r3, [r7, #27]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f9 faf5 	bl	80051e8 <lwip_htons>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	4322      	orrs	r2, r4
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fa fe8f 	bl	8006934 <pbuf_clen>
 800bc16:	4603      	mov	r3, r0
 800bc18:	461a      	mov	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc20:	4413      	add	r3, r2
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fa fe80 	bl	8006934 <pbuf_clen>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461a      	mov	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc3e:	4413      	add	r3, r2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	69fa      	ldr	r2, [r7, #28]
 800bc54:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	e016      	b.n	800bc98 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bc6a:	bf00      	nop
 800bc6c:	e002      	b.n	800bc74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc6e:	bf00      	nop
 800bc70:	e000      	b.n	800bc74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc72:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d006      	beq.n	800bc88 <tcp_split_unsent_seg+0x25c>
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <tcp_split_unsent_seg+0x274>)
 800bc7c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bc80:	490d      	ldr	r1, [pc, #52]	; (800bcb8 <tcp_split_unsent_seg+0x28c>)
 800bc82:	4809      	ldr	r0, [pc, #36]	; (800bca8 <tcp_split_unsent_seg+0x27c>)
 800bc84:	f004 fab6 	bl	80101f4 <iprintf>
  if (p != NULL) {
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bc8e:	6938      	ldr	r0, [r7, #16]
 800bc90:	f7fa fdc8 	bl	8006824 <pbuf_free>
  }

  return ERR_MEM;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3724      	adds	r7, #36	; 0x24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd90      	pop	{r4, r7, pc}
 800bca0:	080130dc 	.word	0x080130dc
 800bca4:	08013470 	.word	0x08013470
 800bca8:	08013130 	.word	0x08013130
 800bcac:	08013494 	.word	0x08013494
 800bcb0:	080134b8 	.word	0x080134b8
 800bcb4:	080134c8 	.word	0x080134c8
 800bcb8:	080134d8 	.word	0x080134d8

0800bcbc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bcbc:	b590      	push	{r4, r7, lr}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d106      	bne.n	800bcd8 <tcp_send_fin+0x1c>
 800bcca:	4b21      	ldr	r3, [pc, #132]	; (800bd50 <tcp_send_fin+0x94>)
 800bccc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bcd0:	4920      	ldr	r1, [pc, #128]	; (800bd54 <tcp_send_fin+0x98>)
 800bcd2:	4821      	ldr	r0, [pc, #132]	; (800bd58 <tcp_send_fin+0x9c>)
 800bcd4:	f004 fa8e 	bl	80101f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d02e      	beq.n	800bd3e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e002      	b.n	800bcee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1f8      	bne.n	800bce8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	899b      	ldrh	r3, [r3, #12]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f9 fa72 	bl	80051e8 <lwip_htons>
 800bd04:	4603      	mov	r3, r0
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d116      	bne.n	800bd3e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	899b      	ldrh	r3, [r3, #12]
 800bd16:	b29c      	uxth	r4, r3
 800bd18:	2001      	movs	r0, #1
 800bd1a:	f7f9 fa65 	bl	80051e8 <lwip_htons>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	461a      	mov	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	4322      	orrs	r2, r4
 800bd28:	b292      	uxth	r2, r2
 800bd2a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	8b5b      	ldrh	r3, [r3, #26]
 800bd30:	f043 0320 	orr.w	r3, r3, #32
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e004      	b.n	800bd48 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bd3e:	2101      	movs	r1, #1
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f80b 	bl	800bd5c <tcp_enqueue_flags>
 800bd46:	4603      	mov	r3, r0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd90      	pop	{r4, r7, pc}
 800bd50:	080130dc 	.word	0x080130dc
 800bd54:	080134e4 	.word	0x080134e4
 800bd58:	08013130 	.word	0x08013130

0800bd5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	; 0x28
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	f003 0303 	and.w	r3, r3, #3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <tcp_enqueue_flags+0x2c>
 800bd7a:	4b67      	ldr	r3, [pc, #412]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800bd7c:	f240 4211 	movw	r2, #1041	; 0x411
 800bd80:	4966      	ldr	r1, [pc, #408]	; (800bf1c <tcp_enqueue_flags+0x1c0>)
 800bd82:	4867      	ldr	r0, [pc, #412]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800bd84:	f004 fa36 	bl	80101f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_enqueue_flags+0x40>
 800bd8e:	4b62      	ldr	r3, [pc, #392]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800bd90:	f240 4213 	movw	r2, #1043	; 0x413
 800bd94:	4963      	ldr	r1, [pc, #396]	; (800bf24 <tcp_enqueue_flags+0x1c8>)
 800bd96:	4862      	ldr	r0, [pc, #392]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800bd98:	f004 fa2c 	bl	80101f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bda6:	2301      	movs	r3, #1
 800bda8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bdaa:	7ffb      	ldrb	r3, [r7, #31]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0304 	and.w	r3, r3, #4
 800bdb4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	2036      	movs	r0, #54	; 0x36
 800bdc2:	f7fa fa4b 	bl	800625c <pbuf_alloc>
 800bdc6:	6138      	str	r0, [r7, #16]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d109      	bne.n	800bde2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	8b5b      	ldrh	r3, [r3, #26]
 800bdd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bddc:	f04f 33ff 	mov.w	r3, #4294967295
 800bde0:	e095      	b.n	800bf0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	895a      	ldrh	r2, [r3, #10]
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d206      	bcs.n	800bdfc <tcp_enqueue_flags+0xa0>
 800bdee:	4b4a      	ldr	r3, [pc, #296]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800bdf0:	f240 4239 	movw	r2, #1081	; 0x439
 800bdf4:	494c      	ldr	r1, [pc, #304]	; (800bf28 <tcp_enqueue_flags+0x1cc>)
 800bdf6:	484a      	ldr	r0, [pc, #296]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800bdf8:	f004 f9fc 	bl	80101f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	7ffb      	ldrb	r3, [r7, #31]
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	460b      	mov	r3, r1
 800be08:	6939      	ldr	r1, [r7, #16]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff f918 	bl	800b040 <tcp_create_segment>
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d109      	bne.n	800be2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	8b5b      	ldrh	r3, [r3, #26]
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	b29a      	uxth	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800be26:	f04f 33ff 	mov.w	r3, #4294967295
 800be2a:	e070      	b.n	800bf0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	f003 0303 	and.w	r3, r3, #3
 800be34:	2b00      	cmp	r3, #0
 800be36:	d006      	beq.n	800be46 <tcp_enqueue_flags+0xea>
 800be38:	4b37      	ldr	r3, [pc, #220]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800be3a:	f240 4242 	movw	r2, #1090	; 0x442
 800be3e:	493b      	ldr	r1, [pc, #236]	; (800bf2c <tcp_enqueue_flags+0x1d0>)
 800be40:	4837      	ldr	r0, [pc, #220]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800be42:	f004 f9d7 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	891b      	ldrh	r3, [r3, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d006      	beq.n	800be5c <tcp_enqueue_flags+0x100>
 800be4e:	4b32      	ldr	r3, [pc, #200]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800be50:	f240 4243 	movw	r2, #1091	; 0x443
 800be54:	4936      	ldr	r1, [pc, #216]	; (800bf30 <tcp_enqueue_flags+0x1d4>)
 800be56:	4832      	ldr	r0, [pc, #200]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800be58:	f004 f9cc 	bl	80101f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d103      	bne.n	800be6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	66da      	str	r2, [r3, #108]	; 0x6c
 800be6a:	e00d      	b.n	800be88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	e002      	b.n	800be7a <tcp_enqueue_flags+0x11e>
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	61bb      	str	r3, [r7, #24]
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1f8      	bne.n	800be74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	f003 0302 	and.w	r3, r3, #2
 800be96:	2b00      	cmp	r3, #0
 800be98:	d104      	bne.n	800bea4 <tcp_enqueue_flags+0x148>
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	8b5b      	ldrh	r3, [r3, #26]
 800bebc:	f043 0320 	orr.w	r3, r3, #32
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	f7fa fd32 	bl	8006934 <pbuf_clen>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800beda:	4413      	add	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00e      	beq.n	800bf0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10a      	bne.n	800bf0c <tcp_enqueue_flags+0x1b0>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d106      	bne.n	800bf0c <tcp_enqueue_flags+0x1b0>
 800befe:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <tcp_enqueue_flags+0x1bc>)
 800bf00:	f240 4265 	movw	r2, #1125	; 0x465
 800bf04:	490b      	ldr	r1, [pc, #44]	; (800bf34 <tcp_enqueue_flags+0x1d8>)
 800bf06:	4806      	ldr	r0, [pc, #24]	; (800bf20 <tcp_enqueue_flags+0x1c4>)
 800bf08:	f004 f974 	bl	80101f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3720      	adds	r7, #32
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	080130dc 	.word	0x080130dc
 800bf1c:	08013500 	.word	0x08013500
 800bf20:	08013130 	.word	0x08013130
 800bf24:	08013558 	.word	0x08013558
 800bf28:	08013578 	.word	0x08013578
 800bf2c:	080135b4 	.word	0x080135b4
 800bf30:	080135cc 	.word	0x080135cc
 800bf34:	080135f8 	.word	0x080135f8

0800bf38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bf38:	b5b0      	push	{r4, r5, r7, lr}
 800bf3a:	b08a      	sub	sp, #40	; 0x28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <tcp_output+0x1c>
 800bf46:	4b8a      	ldr	r3, [pc, #552]	; (800c170 <tcp_output+0x238>)
 800bf48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf4c:	4989      	ldr	r1, [pc, #548]	; (800c174 <tcp_output+0x23c>)
 800bf4e:	488a      	ldr	r0, [pc, #552]	; (800c178 <tcp_output+0x240>)
 800bf50:	f004 f950 	bl	80101f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7d1b      	ldrb	r3, [r3, #20]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d106      	bne.n	800bf6a <tcp_output+0x32>
 800bf5c:	4b84      	ldr	r3, [pc, #528]	; (800c170 <tcp_output+0x238>)
 800bf5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bf62:	4986      	ldr	r1, [pc, #536]	; (800c17c <tcp_output+0x244>)
 800bf64:	4884      	ldr	r0, [pc, #528]	; (800c178 <tcp_output+0x240>)
 800bf66:	f004 f945 	bl	80101f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bf6a:	4b85      	ldr	r3, [pc, #532]	; (800c180 <tcp_output+0x248>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d101      	bne.n	800bf78 <tcp_output+0x40>
    return ERR_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e1ce      	b.n	800c316 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf84:	4293      	cmp	r3, r2
 800bf86:	bf28      	it	cs
 800bf88:	4613      	movcs	r3, r2
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10b      	bne.n	800bfb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	8b5b      	ldrh	r3, [r3, #26]
 800bf9e:	f003 0302 	and.w	r3, r3, #2
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 81aa 	beq.w	800c2fc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fdcb 	bl	800cb44 <tcp_send_empty_ack>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	e1b1      	b.n	800c316 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	461a      	mov	r2, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff f824 	bl	800b008 <tcp_route>
 800bfc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d102      	bne.n	800bfce <tcp_output+0x96>
    return ERR_RTE;
 800bfc8:	f06f 0303 	mvn.w	r3, #3
 800bfcc:	e1a3      	b.n	800c316 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <tcp_output+0xa4>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d111      	bne.n	800c000 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <tcp_output+0xb0>
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	e000      	b.n	800bfea <tcp_output+0xb2>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <tcp_output+0xc0>
      return ERR_RTE;
 800bff2:	f06f 0303 	mvn.w	r3, #3
 800bff6:	e18e      	b.n	800c316 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	f7f9 f903 	bl	8005212 <lwip_htonl>
 800c00c:	4602      	mov	r2, r0
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c016:	8912      	ldrh	r2, [r2, #8]
 800c018:	4413      	add	r3, r2
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d227      	bcs.n	800c070 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c026:	461a      	mov	r2, r3
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d114      	bne.n	800c058 <tcp_output+0x120>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c032:	2b00      	cmp	r3, #0
 800c034:	d110      	bne.n	800c058 <tcp_output+0x120>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10b      	bne.n	800c058 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	8b5b      	ldrh	r3, [r3, #26]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 814d 	beq.w	800c300 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fd6c 	bl	800cb44 <tcp_send_empty_ack>
 800c06c:	4603      	mov	r3, r0
 800c06e:	e152      	b.n	800c316 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 811c 	beq.w	800c2be <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c086:	e002      	b.n	800c08e <tcp_output+0x156>
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	623b      	str	r3, [r7, #32]
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1f8      	bne.n	800c088 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c096:	e112      	b.n	800c2be <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	899b      	ldrh	r3, [r3, #12]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f9 f8a1 	bl	80051e8 <lwip_htons>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d006      	beq.n	800c0c0 <tcp_output+0x188>
 800c0b2:	4b2f      	ldr	r3, [pc, #188]	; (800c170 <tcp_output+0x238>)
 800c0b4:	f240 5236 	movw	r2, #1334	; 0x536
 800c0b8:	4932      	ldr	r1, [pc, #200]	; (800c184 <tcp_output+0x24c>)
 800c0ba:	482f      	ldr	r0, [pc, #188]	; (800c178 <tcp_output+0x240>)
 800c0bc:	f004 f89a 	bl	80101f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01f      	beq.n	800c108 <tcp_output+0x1d0>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8b5b      	ldrh	r3, [r3, #26]
 800c0cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d119      	bne.n	800c108 <tcp_output+0x1d0>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00b      	beq.n	800c0f4 <tcp_output+0x1bc>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d110      	bne.n	800c108 <tcp_output+0x1d0>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ea:	891a      	ldrh	r2, [r3, #8]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d209      	bcs.n	800c108 <tcp_output+0x1d0>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d004      	beq.n	800c108 <tcp_output+0x1d0>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c104:	2b08      	cmp	r3, #8
 800c106:	d901      	bls.n	800c10c <tcp_output+0x1d4>
 800c108:	2301      	movs	r3, #1
 800c10a:	e000      	b.n	800c10e <tcp_output+0x1d6>
 800c10c:	2300      	movs	r3, #0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8b5b      	ldrh	r3, [r3, #26]
 800c116:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 80e4 	beq.w	800c2e8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7d1b      	ldrb	r3, [r3, #20]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d00d      	beq.n	800c144 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	899b      	ldrh	r3, [r3, #12]
 800c12e:	b29c      	uxth	r4, r3
 800c130:	2010      	movs	r0, #16
 800c132:	f7f9 f859 	bl	80051e8 <lwip_htons>
 800c136:	4603      	mov	r3, r0
 800c138:	461a      	mov	r2, r3
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	4322      	orrs	r2, r4
 800c140:	b292      	uxth	r2, r2
 800c142:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c14a:	f000 f909 	bl	800c360 <tcp_output_segment>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d016      	beq.n	800c188 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	8b5b      	ldrh	r3, [r3, #26]
 800c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	835a      	strh	r2, [r3, #26]
      return err;
 800c168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16c:	e0d3      	b.n	800c316 <tcp_output+0x3de>
 800c16e:	bf00      	nop
 800c170:	080130dc 	.word	0x080130dc
 800c174:	08013620 	.word	0x08013620
 800c178:	08013130 	.word	0x08013130
 800c17c:	08013638 	.word	0x08013638
 800c180:	20006bf8 	.word	0x20006bf8
 800c184:	08013660 	.word	0x08013660
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	7d1b      	ldrb	r3, [r3, #20]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d006      	beq.n	800c1a6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	8b5b      	ldrh	r3, [r3, #26]
 800c19c:	f023 0303 	bic.w	r3, r3, #3
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f9 f830 	bl	8005212 <lwip_htonl>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	891b      	ldrh	r3, [r3, #8]
 800c1b8:	461d      	mov	r5, r3
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	899b      	ldrh	r3, [r3, #12]
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f9 f810 	bl	80051e8 <lwip_htons>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <tcp_output+0x2a0>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e000      	b.n	800c1da <tcp_output+0x2a2>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	442b      	add	r3, r5
 800c1dc:	4423      	add	r3, r4
 800c1de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	da02      	bge.n	800c1f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	891b      	ldrh	r3, [r3, #8]
 800c1f6:	461c      	mov	r4, r3
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	899b      	ldrh	r3, [r3, #12]
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	4618      	mov	r0, r3
 800c202:	f7f8 fff1 	bl	80051e8 <lwip_htons>
 800c206:	4603      	mov	r3, r0
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <tcp_output+0x2de>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <tcp_output+0x2e0>
 800c216:	2300      	movs	r3, #0
 800c218:	4423      	add	r3, r4
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d049      	beq.n	800c2b2 <tcp_output+0x37a>
      seg->next = NULL;
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <tcp_output+0x300>
        pcb->unacked = seg;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c230:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	623b      	str	r3, [r7, #32]
 800c236:	e03f      	b.n	800c2b8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f8 ffe7 	bl	8005212 <lwip_htonl>
 800c244:	4604      	mov	r4, r0
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7f8 ffe0 	bl	8005212 <lwip_htonl>
 800c252:	4603      	mov	r3, r0
 800c254:	1ae3      	subs	r3, r4, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	da24      	bge.n	800c2a4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	3370      	adds	r3, #112	; 0x70
 800c25e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c260:	e002      	b.n	800c268 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d011      	beq.n	800c294 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	4618      	mov	r0, r3
 800c27a:	f7f8 ffca 	bl	8005212 <lwip_htonl>
 800c27e:	4604      	mov	r4, r0
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	4618      	mov	r0, r3
 800c288:	f7f8 ffc3 	bl	8005212 <lwip_htonl>
 800c28c:	4603      	mov	r3, r0
 800c28e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c290:	2b00      	cmp	r3, #0
 800c292:	dbe6      	blt.n	800c262 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	e009      	b.n	800c2b8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	623b      	str	r3, [r7, #32]
 800c2b0:	e002      	b.n	800c2b8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c2b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2b4:	f7fb fef3 	bl	800809e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f8 ffa1 	bl	8005212 <lwip_htonl>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2da:	8912      	ldrh	r2, [r2, #8]
 800c2dc:	4413      	add	r3, r2
  while (seg != NULL &&
 800c2de:	69ba      	ldr	r2, [r7, #24]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	f4bf aed9 	bcs.w	800c098 <tcp_output+0x160>
 800c2e6:	e000      	b.n	800c2ea <tcp_output+0x3b2>
      break;
 800c2e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d108      	bne.n	800c304 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c2fa:	e004      	b.n	800c306 <tcp_output+0x3ce>
    goto output_done;
 800c2fc:	bf00      	nop
 800c2fe:	e002      	b.n	800c306 <tcp_output+0x3ce>
    goto output_done;
 800c300:	bf00      	nop
 800c302:	e000      	b.n	800c306 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c304:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	8b5b      	ldrh	r3, [r3, #26]
 800c30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3728      	adds	r7, #40	; 0x28
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bdb0      	pop	{r4, r5, r7, pc}
 800c31e:	bf00      	nop

0800c320 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <tcp_output_segment_busy+0x1c>
 800c32e:	4b09      	ldr	r3, [pc, #36]	; (800c354 <tcp_output_segment_busy+0x34>)
 800c330:	f240 529a 	movw	r2, #1434	; 0x59a
 800c334:	4908      	ldr	r1, [pc, #32]	; (800c358 <tcp_output_segment_busy+0x38>)
 800c336:	4809      	ldr	r0, [pc, #36]	; (800c35c <tcp_output_segment_busy+0x3c>)
 800c338:	f003 ff5c 	bl	80101f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	7b9b      	ldrb	r3, [r3, #14]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d001      	beq.n	800c34a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c346:	2301      	movs	r3, #1
 800c348:	e000      	b.n	800c34c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	080130dc 	.word	0x080130dc
 800c358:	08013678 	.word	0x08013678
 800c35c:	08013130 	.word	0x08013130

0800c360 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c360:	b5b0      	push	{r4, r5, r7, lr}
 800c362:	b08c      	sub	sp, #48	; 0x30
 800c364:	af04      	add	r7, sp, #16
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d106      	bne.n	800c380 <tcp_output_segment+0x20>
 800c372:	4b63      	ldr	r3, [pc, #396]	; (800c500 <tcp_output_segment+0x1a0>)
 800c374:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c378:	4962      	ldr	r1, [pc, #392]	; (800c504 <tcp_output_segment+0x1a4>)
 800c37a:	4863      	ldr	r0, [pc, #396]	; (800c508 <tcp_output_segment+0x1a8>)
 800c37c:	f003 ff3a 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <tcp_output_segment+0x34>
 800c386:	4b5e      	ldr	r3, [pc, #376]	; (800c500 <tcp_output_segment+0x1a0>)
 800c388:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c38c:	495f      	ldr	r1, [pc, #380]	; (800c50c <tcp_output_segment+0x1ac>)
 800c38e:	485e      	ldr	r0, [pc, #376]	; (800c508 <tcp_output_segment+0x1a8>)
 800c390:	f003 ff30 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <tcp_output_segment+0x48>
 800c39a:	4b59      	ldr	r3, [pc, #356]	; (800c500 <tcp_output_segment+0x1a0>)
 800c39c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c3a0:	495b      	ldr	r1, [pc, #364]	; (800c510 <tcp_output_segment+0x1b0>)
 800c3a2:	4859      	ldr	r0, [pc, #356]	; (800c508 <tcp_output_segment+0x1a8>)
 800c3a4:	f003 ff26 	bl	80101f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7ff ffb9 	bl	800c320 <tcp_output_segment_busy>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e09f      	b.n	800c4f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	68dc      	ldr	r4, [r3, #12]
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	f7f8 ff26 	bl	8005212 <lwip_htonl>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68dc      	ldr	r4, [r3, #12]
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f7f8 ff08 	bl	80051e8 <lwip_htons>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c3e4:	441a      	add	r2, r3
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	3314      	adds	r3, #20
 800c3f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7a9b      	ldrb	r3, [r3, #10]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d015      	beq.n	800c42a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	3304      	adds	r3, #4
 800c402:	461a      	mov	r2, r3
 800c404:	6879      	ldr	r1, [r7, #4]
 800c406:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c40a:	f7fc fa33 	bl	8008874 <tcp_eff_send_mss_netif>
 800c40e:	4603      	mov	r3, r0
 800c410:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c412:	8b7b      	ldrh	r3, [r7, #26]
 800c414:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c418:	4618      	mov	r0, r3
 800c41a:	f7f8 fefa 	bl	8005212 <lwip_htonl>
 800c41e:	4602      	mov	r2, r0
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	3304      	adds	r3, #4
 800c428:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	da02      	bge.n	800c43a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2200      	movs	r2, #0
 800c438:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10c      	bne.n	800c45c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c442:	4b34      	ldr	r3, [pc, #208]	; (800c514 <tcp_output_segment+0x1b4>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	f7f8 fede 	bl	8005212 <lwip_htonl>
 800c456:	4602      	mov	r2, r0
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	68da      	ldr	r2, [r3, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	8959      	ldrh	r1, [r3, #10]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	8b3a      	ldrh	r2, [r7, #24]
 800c476:	1a8a      	subs	r2, r1, r2
 800c478:	b292      	uxth	r2, r2
 800c47a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	8919      	ldrh	r1, [r3, #8]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	8b3a      	ldrh	r2, [r7, #24]
 800c488:	1a8a      	subs	r2, r1, r2
 800c48a:	b292      	uxth	r2, r2
 800c48c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	68d2      	ldr	r2, [r2, #12]
 800c496:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	741a      	strb	r2, [r3, #16]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f103 0214 	add.w	r2, r3, #20
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	7a9b      	ldrb	r3, [r3, #10]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	f003 0304 	and.w	r3, r3, #4
 800c4b6:	4413      	add	r3, r2
 800c4b8:	69fa      	ldr	r2, [r7, #28]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d006      	beq.n	800c4cc <tcp_output_segment+0x16c>
 800c4be:	4b10      	ldr	r3, [pc, #64]	; (800c500 <tcp_output_segment+0x1a0>)
 800c4c0:	f240 621c 	movw	r2, #1564	; 0x61c
 800c4c4:	4914      	ldr	r1, [pc, #80]	; (800c518 <tcp_output_segment+0x1b8>)
 800c4c6:	4810      	ldr	r0, [pc, #64]	; (800c508 <tcp_output_segment+0x1a8>)
 800c4c8:	f003 fe94 	bl	80101f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6858      	ldr	r0, [r3, #4]
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	1d1c      	adds	r4, r3, #4
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	7add      	ldrb	r5, [r3, #11]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	7a9b      	ldrb	r3, [r3, #10]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	9202      	str	r2, [sp, #8]
 800c4e2:	2206      	movs	r2, #6
 800c4e4:	9201      	str	r2, [sp, #4]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	462b      	mov	r3, r5
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	f002 fdf0 	bl	800f0d0 <ip4_output_if>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c500:	080130dc 	.word	0x080130dc
 800c504:	080136a0 	.word	0x080136a0
 800c508:	08013130 	.word	0x08013130
 800c50c:	080136c0 	.word	0x080136c0
 800c510:	080136e0 	.word	0x080136e0
 800c514:	20006bac 	.word	0x20006bac
 800c518:	08013704 	.word	0x08013704

0800c51c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c51c:	b5b0      	push	{r4, r5, r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d106      	bne.n	800c538 <tcp_rexmit_rto_prepare+0x1c>
 800c52a:	4b31      	ldr	r3, [pc, #196]	; (800c5f0 <tcp_rexmit_rto_prepare+0xd4>)
 800c52c:	f240 6263 	movw	r2, #1635	; 0x663
 800c530:	4930      	ldr	r1, [pc, #192]	; (800c5f4 <tcp_rexmit_rto_prepare+0xd8>)
 800c532:	4831      	ldr	r0, [pc, #196]	; (800c5f8 <tcp_rexmit_rto_prepare+0xdc>)
 800c534:	f003 fe5e 	bl	80101f4 <iprintf>

  if (pcb->unacked == NULL) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c540:	f06f 0305 	mvn.w	r3, #5
 800c544:	e050      	b.n	800c5e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	e00b      	b.n	800c566 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fee6 	bl	800c320 <tcp_output_segment_busy>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c55a:	f06f 0305 	mvn.w	r3, #5
 800c55e:	e043      	b.n	800c5e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1ef      	bne.n	800c54e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff fed6 	bl	800c320 <tcp_output_segment_busy>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c57a:	f06f 0305 	mvn.w	r3, #5
 800c57e:	e033      	b.n	800c5e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8b5b      	ldrh	r3, [r3, #26]
 800c59a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f8 fe31 	bl	8005212 <lwip_htonl>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	891b      	ldrh	r3, [r3, #8]
 800c5b6:	461d      	mov	r5, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	899b      	ldrh	r3, [r3, #12]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f8 fe11 	bl	80051e8 <lwip_htons>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	f003 0303 	and.w	r3, r3, #3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <tcp_rexmit_rto_prepare+0xba>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e000      	b.n	800c5d8 <tcp_rexmit_rto_prepare+0xbc>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	442b      	add	r3, r5
 800c5da:	18e2      	adds	r2, r4, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f0:	080130dc 	.word	0x080130dc
 800c5f4:	08013718 	.word	0x08013718
 800c5f8:	08013130 	.word	0x08013130

0800c5fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <tcp_rexmit_rto_commit+0x1c>
 800c60a:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <tcp_rexmit_rto_commit+0x44>)
 800c60c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c610:	490c      	ldr	r1, [pc, #48]	; (800c644 <tcp_rexmit_rto_commit+0x48>)
 800c612:	480d      	ldr	r0, [pc, #52]	; (800c648 <tcp_rexmit_rto_commit+0x4c>)
 800c614:	f003 fdee 	bl	80101f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c61e:	2bff      	cmp	r3, #255	; 0xff
 800c620:	d007      	beq.n	800c632 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c628:	3301      	adds	r3, #1
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff fc80 	bl	800bf38 <tcp_output>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	080130dc 	.word	0x080130dc
 800c644:	0801373c 	.word	0x0801373c
 800c648:	08013130 	.word	0x08013130

0800c64c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <tcp_rexmit_rto+0x1c>
 800c65a:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <tcp_rexmit_rto+0x38>)
 800c65c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c660:	4909      	ldr	r1, [pc, #36]	; (800c688 <tcp_rexmit_rto+0x3c>)
 800c662:	480a      	ldr	r0, [pc, #40]	; (800c68c <tcp_rexmit_rto+0x40>)
 800c664:	f003 fdc6 	bl	80101f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ff57 	bl	800c51c <tcp_rexmit_rto_prepare>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff ffc1 	bl	800c5fc <tcp_rexmit_rto_commit>
  }
}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	080130dc 	.word	0x080130dc
 800c688:	08013760 	.word	0x08013760
 800c68c:	08013130 	.word	0x08013130

0800c690 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <tcp_rexmit+0x1c>
 800c69e:	4b2f      	ldr	r3, [pc, #188]	; (800c75c <tcp_rexmit+0xcc>)
 800c6a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c6a4:	492e      	ldr	r1, [pc, #184]	; (800c760 <tcp_rexmit+0xd0>)
 800c6a6:	482f      	ldr	r0, [pc, #188]	; (800c764 <tcp_rexmit+0xd4>)
 800c6a8:	f003 fda4 	bl	80101f4 <iprintf>

  if (pcb->unacked == NULL) {
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c6b4:	f06f 0305 	mvn.w	r3, #5
 800c6b8:	e04c      	b.n	800c754 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c6c0:	68b8      	ldr	r0, [r7, #8]
 800c6c2:	f7ff fe2d 	bl	800c320 <tcp_output_segment_busy>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c6cc:	f06f 0305 	mvn.w	r3, #5
 800c6d0:	e040      	b.n	800c754 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	336c      	adds	r3, #108	; 0x6c
 800c6de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6e0:	e002      	b.n	800c6e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d011      	beq.n	800c714 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f8 fd8a 	bl	8005212 <lwip_htonl>
 800c6fe:	4604      	mov	r4, r0
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	4618      	mov	r0, r3
 800c708:	f7f8 fd83 	bl	8005212 <lwip_htonl>
 800c70c:	4603      	mov	r3, r0
 800c70e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c710:	2b00      	cmp	r3, #0
 800c712:	dbe6      	blt.n	800c6e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d103      	bne.n	800c732 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c738:	2bff      	cmp	r3, #255	; 0xff
 800c73a:	d007      	beq.n	800c74c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c742:	3301      	adds	r3, #1
 800c744:	b2da      	uxtb	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd90      	pop	{r4, r7, pc}
 800c75c:	080130dc 	.word	0x080130dc
 800c760:	0801377c 	.word	0x0801377c
 800c764:	08013130 	.word	0x08013130

0800c768 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <tcp_rexmit_fast+0x1c>
 800c776:	4b2a      	ldr	r3, [pc, #168]	; (800c820 <tcp_rexmit_fast+0xb8>)
 800c778:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c77c:	4929      	ldr	r1, [pc, #164]	; (800c824 <tcp_rexmit_fast+0xbc>)
 800c77e:	482a      	ldr	r0, [pc, #168]	; (800c828 <tcp_rexmit_fast+0xc0>)
 800c780:	f003 fd38 	bl	80101f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d044      	beq.n	800c816 <tcp_rexmit_fast+0xae>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8b5b      	ldrh	r3, [r3, #26]
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d13e      	bne.n	800c816 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff ff79 	bl	800c690 <tcp_rexmit>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d138      	bne.n	800c816 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	bf28      	it	cs
 800c7b4:	4613      	movcs	r3, r2
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	0fda      	lsrs	r2, r3, #31
 800c7ba:	4413      	add	r3, r2
 800c7bc:	105b      	asrs	r3, r3, #1
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d206      	bcs.n	800c7e6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	0049      	lsls	r1, r1, #1
 800c7f4:	440b      	add	r3, r1
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	4413      	add	r3, r2
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	8b5b      	ldrh	r3, [r3, #26]
 800c806:	f043 0304 	orr.w	r3, r3, #4
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c816:	bf00      	nop
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	080130dc 	.word	0x080130dc
 800c824:	08013794 	.word	0x08013794
 800c828:	08013130 	.word	0x08013130

0800c82c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	460b      	mov	r3, r1
 800c838:	817b      	strh	r3, [r7, #10]
 800c83a:	4613      	mov	r3, r2
 800c83c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c83e:	897a      	ldrh	r2, [r7, #10]
 800c840:	893b      	ldrh	r3, [r7, #8]
 800c842:	4413      	add	r3, r2
 800c844:	b29b      	uxth	r3, r3
 800c846:	3314      	adds	r3, #20
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c84e:	4619      	mov	r1, r3
 800c850:	2022      	movs	r0, #34	; 0x22
 800c852:	f7f9 fd03 	bl	800625c <pbuf_alloc>
 800c856:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d04d      	beq.n	800c8fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	3313      	adds	r3, #19
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	8952      	ldrh	r2, [r2, #10]
 800c866:	4293      	cmp	r3, r2
 800c868:	db06      	blt.n	800c878 <tcp_output_alloc_header_common+0x4c>
 800c86a:	4b26      	ldr	r3, [pc, #152]	; (800c904 <tcp_output_alloc_header_common+0xd8>)
 800c86c:	f240 7223 	movw	r2, #1827	; 0x723
 800c870:	4925      	ldr	r1, [pc, #148]	; (800c908 <tcp_output_alloc_header_common+0xdc>)
 800c872:	4826      	ldr	r0, [pc, #152]	; (800c90c <tcp_output_alloc_header_common+0xe0>)
 800c874:	f003 fcbe 	bl	80101f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c87e:	8c3b      	ldrh	r3, [r7, #32]
 800c880:	4618      	mov	r0, r3
 800c882:	f7f8 fcb1 	bl	80051e8 <lwip_htons>
 800c886:	4603      	mov	r3, r0
 800c888:	461a      	mov	r2, r3
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c890:	4618      	mov	r0, r3
 800c892:	f7f8 fca9 	bl	80051e8 <lwip_htons>
 800c896:	4603      	mov	r3, r0
 800c898:	461a      	mov	r2, r3
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f7f8 fcb4 	bl	8005212 <lwip_htonl>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c8b0:	897b      	ldrh	r3, [r7, #10]
 800c8b2:	089b      	lsrs	r3, r3, #2
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	3305      	adds	r3, #5
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	031b      	lsls	r3, r3, #12
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7f8 fc8d 	bl	80051e8 <lwip_htons>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c8d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7f8 fc85 	bl	80051e8 <lwip_htons>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	741a      	strb	r2, [r3, #16]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	749a      	strb	r2, [r3, #18]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c8fa:	697b      	ldr	r3, [r7, #20]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	080130dc 	.word	0x080130dc
 800c908:	080137b4 	.word	0x080137b4
 800c90c:	08013130 	.word	0x08013130

0800c910 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c910:	b5b0      	push	{r4, r5, r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af04      	add	r7, sp, #16
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	607b      	str	r3, [r7, #4]
 800c91a:	460b      	mov	r3, r1
 800c91c:	817b      	strh	r3, [r7, #10]
 800c91e:	4613      	mov	r3, r2
 800c920:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d106      	bne.n	800c936 <tcp_output_alloc_header+0x26>
 800c928:	4b15      	ldr	r3, [pc, #84]	; (800c980 <tcp_output_alloc_header+0x70>)
 800c92a:	f240 7242 	movw	r2, #1858	; 0x742
 800c92e:	4915      	ldr	r1, [pc, #84]	; (800c984 <tcp_output_alloc_header+0x74>)
 800c930:	4815      	ldr	r0, [pc, #84]	; (800c988 <tcp_output_alloc_header+0x78>)
 800c932:	f003 fc5f 	bl	80101f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	8adb      	ldrh	r3, [r3, #22]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	8b12      	ldrh	r2, [r2, #24]
 800c942:	68f9      	ldr	r1, [r7, #12]
 800c944:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c946:	893d      	ldrh	r5, [r7, #8]
 800c948:	897c      	ldrh	r4, [r7, #10]
 800c94a:	9103      	str	r1, [sp, #12]
 800c94c:	2110      	movs	r1, #16
 800c94e:	9102      	str	r1, [sp, #8]
 800c950:	9201      	str	r2, [sp, #4]
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	462a      	mov	r2, r5
 800c958:	4621      	mov	r1, r4
 800c95a:	f7ff ff67 	bl	800c82c <tcp_output_alloc_header_common>
 800c95e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c96e:	441a      	add	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c974:	697b      	ldr	r3, [r7, #20]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bdb0      	pop	{r4, r5, r7, pc}
 800c97e:	bf00      	nop
 800c980:	080130dc 	.word	0x080130dc
 800c984:	080137e4 	.word	0x080137e4
 800c988:	08013130 	.word	0x08013130

0800c98c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4611      	mov	r1, r2
 800c998:	461a      	mov	r2, r3
 800c99a:	460b      	mov	r3, r1
 800c99c:	71fb      	strb	r3, [r7, #7]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d106      	bne.n	800c9ba <tcp_output_fill_options+0x2e>
 800c9ac:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <tcp_output_fill_options+0x70>)
 800c9ae:	f240 7256 	movw	r2, #1878	; 0x756
 800c9b2:	4913      	ldr	r1, [pc, #76]	; (800ca00 <tcp_output_fill_options+0x74>)
 800c9b4:	4813      	ldr	r0, [pc, #76]	; (800ca04 <tcp_output_fill_options+0x78>)
 800c9b6:	f003 fc1d 	bl	80101f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	3314      	adds	r3, #20
 800c9c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	f103 0214 	add.w	r2, r3, #20
 800c9cc:	8bfb      	ldrh	r3, [r7, #30]
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	440b      	add	r3, r1
 800c9dc:	4413      	add	r3, r2
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d006      	beq.n	800c9f2 <tcp_output_fill_options+0x66>
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <tcp_output_fill_options+0x70>)
 800c9e6:	f240 7275 	movw	r2, #1909	; 0x775
 800c9ea:	4907      	ldr	r1, [pc, #28]	; (800ca08 <tcp_output_fill_options+0x7c>)
 800c9ec:	4805      	ldr	r0, [pc, #20]	; (800ca04 <tcp_output_fill_options+0x78>)
 800c9ee:	f003 fc01 	bl	80101f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c9f2:	bf00      	nop
 800c9f4:	3720      	adds	r7, #32
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	080130dc 	.word	0x080130dc
 800ca00:	0801380c 	.word	0x0801380c
 800ca04:	08013130 	.word	0x08013130
 800ca08:	08013704 	.word	0x08013704

0800ca0c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08a      	sub	sp, #40	; 0x28
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d106      	bne.n	800ca2e <tcp_output_control_segment+0x22>
 800ca20:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <tcp_output_control_segment+0x88>)
 800ca22:	f240 7287 	movw	r2, #1927	; 0x787
 800ca26:	491c      	ldr	r1, [pc, #112]	; (800ca98 <tcp_output_control_segment+0x8c>)
 800ca28:	481c      	ldr	r0, [pc, #112]	; (800ca9c <tcp_output_control_segment+0x90>)
 800ca2a:	f003 fbe3 	bl	80101f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f7fe fae8 	bl	800b008 <tcp_route>
 800ca38:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ca40:	23fc      	movs	r3, #252	; 0xfc
 800ca42:	75fb      	strb	r3, [r7, #23]
 800ca44:	e01c      	b.n	800ca80 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d006      	beq.n	800ca5a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	7adb      	ldrb	r3, [r3, #11]
 800ca50:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	7a9b      	ldrb	r3, [r3, #10]
 800ca56:	757b      	strb	r3, [r7, #21]
 800ca58:	e003      	b.n	800ca62 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ca5a:	23ff      	movs	r3, #255	; 0xff
 800ca5c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ca62:	7dba      	ldrb	r2, [r7, #22]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	9302      	str	r3, [sp, #8]
 800ca68:	2306      	movs	r3, #6
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	7d7b      	ldrb	r3, [r7, #21]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	4613      	mov	r3, r2
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	68b8      	ldr	r0, [r7, #8]
 800ca78:	f002 fb2a 	bl	800f0d0 <ip4_output_if>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ca80:	68b8      	ldr	r0, [r7, #8]
 800ca82:	f7f9 fecf 	bl	8006824 <pbuf_free>
  return err;
 800ca86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	080130dc 	.word	0x080130dc
 800ca98:	08013834 	.word	0x08013834
 800ca9c:	08013130 	.word	0x08013130

0800caa0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800caa0:	b590      	push	{r4, r7, lr}
 800caa2:	b08b      	sub	sp, #44	; 0x2c
 800caa4:	af04      	add	r7, sp, #16
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d106      	bne.n	800cac2 <tcp_rst+0x22>
 800cab4:	4b1f      	ldr	r3, [pc, #124]	; (800cb34 <tcp_rst+0x94>)
 800cab6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800caba:	491f      	ldr	r1, [pc, #124]	; (800cb38 <tcp_rst+0x98>)
 800cabc:	481f      	ldr	r0, [pc, #124]	; (800cb3c <tcp_rst+0x9c>)
 800cabe:	f003 fb99 	bl	80101f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <tcp_rst+0x36>
 800cac8:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <tcp_rst+0x94>)
 800caca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cace:	491c      	ldr	r1, [pc, #112]	; (800cb40 <tcp_rst+0xa0>)
 800cad0:	481a      	ldr	r0, [pc, #104]	; (800cb3c <tcp_rst+0x9c>)
 800cad2:	f003 fb8f 	bl	80101f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cad6:	2300      	movs	r3, #0
 800cad8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cada:	f246 0308 	movw	r3, #24584	; 0x6008
 800cade:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
 800cae2:	b29c      	uxth	r4, r3
 800cae4:	68b8      	ldr	r0, [r7, #8]
 800cae6:	f7f8 fb94 	bl	8005212 <lwip_htonl>
 800caea:	4602      	mov	r2, r0
 800caec:	8abb      	ldrh	r3, [r7, #20]
 800caee:	9303      	str	r3, [sp, #12]
 800caf0:	2314      	movs	r3, #20
 800caf2:	9302      	str	r3, [sp, #8]
 800caf4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	4613      	mov	r3, r2
 800cafe:	2200      	movs	r2, #0
 800cb00:	4621      	mov	r1, r4
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fe92 	bl	800c82c <tcp_output_alloc_header_common>
 800cb08:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00c      	beq.n	800cb2a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	2200      	movs	r2, #0
 800cb14:	6939      	ldr	r1, [r7, #16]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f7ff ff38 	bl	800c98c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	6939      	ldr	r1, [r7, #16]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7ff ff72 	bl	800ca0c <tcp_output_control_segment>
 800cb28:	e000      	b.n	800cb2c <tcp_rst+0x8c>
    return;
 800cb2a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd90      	pop	{r4, r7, pc}
 800cb32:	bf00      	nop
 800cb34:	080130dc 	.word	0x080130dc
 800cb38:	08013860 	.word	0x08013860
 800cb3c:	08013130 	.word	0x08013130
 800cb40:	0801387c 	.word	0x0801387c

0800cb44 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cb44:	b590      	push	{r4, r7, lr}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <tcp_send_empty_ack+0x24>
 800cb5a:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <tcp_send_empty_ack+0xb8>)
 800cb5c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cb60:	4927      	ldr	r1, [pc, #156]	; (800cc00 <tcp_send_empty_ack+0xbc>)
 800cb62:	4828      	ldr	r0, [pc, #160]	; (800cc04 <tcp_send_empty_ack+0xc0>)
 800cb64:	f003 fb46 	bl	80101f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb68:	7dfb      	ldrb	r3, [r7, #23]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cb74:	7d7b      	ldrb	r3, [r7, #21]
 800cb76:	b29c      	uxth	r4, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7f8 fb48 	bl	8005212 <lwip_htonl>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2200      	movs	r2, #0
 800cb86:	4621      	mov	r1, r4
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fec1 	bl	800c910 <tcp_output_alloc_header>
 800cb8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d109      	bne.n	800cbaa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	8b5b      	ldrh	r3, [r3, #26]
 800cb9a:	f043 0303 	orr.w	r3, r3, #3
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cba4:	f06f 0301 	mvn.w	r3, #1
 800cba8:	e023      	b.n	800cbf2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cbaa:	7dbb      	ldrb	r3, [r7, #22]
 800cbac:	7dfa      	ldrb	r2, [r7, #23]
 800cbae:	6939      	ldr	r1, [r7, #16]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff feeb 	bl	800c98c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	6939      	ldr	r1, [r7, #16]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff ff24 	bl	800ca0c <tcp_output_control_segment>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cbc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d007      	beq.n	800cbe0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	8b5b      	ldrh	r3, [r3, #26]
 800cbd4:	f043 0303 	orr.w	r3, r3, #3
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	835a      	strh	r2, [r3, #26]
 800cbde:	e006      	b.n	800cbee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	8b5b      	ldrh	r3, [r3, #26]
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd90      	pop	{r4, r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	080130dc 	.word	0x080130dc
 800cc00:	08013898 	.word	0x08013898
 800cc04:	08013130 	.word	0x08013130

0800cc08 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b087      	sub	sp, #28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc10:	2300      	movs	r3, #0
 800cc12:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <tcp_keepalive+0x20>
 800cc1a:	4b18      	ldr	r3, [pc, #96]	; (800cc7c <tcp_keepalive+0x74>)
 800cc1c:	f640 0224 	movw	r2, #2084	; 0x824
 800cc20:	4917      	ldr	r1, [pc, #92]	; (800cc80 <tcp_keepalive+0x78>)
 800cc22:	4818      	ldr	r0, [pc, #96]	; (800cc84 <tcp_keepalive+0x7c>)
 800cc24:	f003 fae6 	bl	80101f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cc28:	7dfb      	ldrb	r3, [r7, #23]
 800cc2a:	b29c      	uxth	r4, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7f8 faed 	bl	8005212 <lwip_htonl>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff fe66 	bl	800c910 <tcp_output_alloc_header>
 800cc44:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc50:	e010      	b.n	800cc74 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	2200      	movs	r2, #0
 800cc56:	6939      	ldr	r1, [r7, #16]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff fe97 	bl	800c98c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3304      	adds	r3, #4
 800cc64:	6939      	ldr	r1, [r7, #16]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff fed0 	bl	800ca0c <tcp_output_control_segment>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	371c      	adds	r7, #28
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd90      	pop	{r4, r7, pc}
 800cc7c:	080130dc 	.word	0x080130dc
 800cc80:	080138b8 	.word	0x080138b8
 800cc84:	08013130 	.word	0x08013130

0800cc88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b08b      	sub	sp, #44	; 0x2c
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc90:	2300      	movs	r3, #0
 800cc92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d106      	bne.n	800ccaa <tcp_zero_window_probe+0x22>
 800cc9c:	4b4c      	ldr	r3, [pc, #304]	; (800cdd0 <tcp_zero_window_probe+0x148>)
 800cc9e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cca2:	494c      	ldr	r1, [pc, #304]	; (800cdd4 <tcp_zero_window_probe+0x14c>)
 800cca4:	484c      	ldr	r0, [pc, #304]	; (800cdd8 <tcp_zero_window_probe+0x150>)
 800cca6:	f003 faa5 	bl	80101f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e086      	b.n	800cdc8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ccc0:	2bff      	cmp	r3, #255	; 0xff
 800ccc2:	d007      	beq.n	800ccd4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ccca:	3301      	adds	r3, #1
 800cccc:	b2da      	uxtb	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	899b      	ldrh	r3, [r3, #12]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7f8 fa83 	bl	80051e8 <lwip_htons>
 800cce2:	4603      	mov	r3, r0
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <tcp_zero_window_probe+0x72>
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	891b      	ldrh	r3, [r3, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <tcp_zero_window_probe+0x72>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e000      	b.n	800ccfc <tcp_zero_window_probe+0x74>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ccfe:	7ffb      	ldrb	r3, [r7, #31]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	bf0c      	ite	eq
 800cd04:	2301      	moveq	r3, #1
 800cd06:	2300      	movne	r3, #0
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd10:	b299      	uxth	r1, r3
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	8bba      	ldrh	r2, [r7, #28]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fdf8 	bl	800c910 <tcp_output_alloc_header>
 800cd20:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cd28:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2c:	e04c      	b.n	800cdc8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cd34:	7ffb      	ldrb	r3, [r7, #31]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d011      	beq.n	800cd5e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	899b      	ldrh	r3, [r3, #12]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd46:	b21c      	sxth	r4, r3
 800cd48:	2011      	movs	r0, #17
 800cd4a:	f7f8 fa4d 	bl	80051e8 <lwip_htons>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	b21b      	sxth	r3, r3
 800cd52:	4323      	orrs	r3, r4
 800cd54:	b21b      	sxth	r3, r3
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	819a      	strh	r2, [r3, #12]
 800cd5c:	e010      	b.n	800cd80 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	3314      	adds	r3, #20
 800cd64:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	6858      	ldr	r0, [r3, #4]
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	891a      	ldrh	r2, [r3, #8]
 800cd70:	6a3b      	ldr	r3, [r7, #32]
 800cd72:	891b      	ldrh	r3, [r3, #8]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	2201      	movs	r2, #1
 800cd7a:	6939      	ldr	r1, [r7, #16]
 800cd7c:	f7f9 ff4c 	bl	8006c18 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f8 fa43 	bl	8005212 <lwip_htonl>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	3301      	adds	r3, #1
 800cd90:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	da02      	bge.n	800cda4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda8:	2200      	movs	r2, #0
 800cdaa:	69b9      	ldr	r1, [r7, #24]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff fded 	bl	800c98c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	69b9      	ldr	r1, [r7, #24]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff fe26 	bl	800ca0c <tcp_output_control_segment>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cdc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	372c      	adds	r7, #44	; 0x2c
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd90      	pop	{r4, r7, pc}
 800cdd0:	080130dc 	.word	0x080130dc
 800cdd4:	080138d4 	.word	0x080138d4
 800cdd8:	08013130 	.word	0x08013130

0800cddc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cde4:	f7fa f806 	bl	8006df4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <tcpip_tcp_timer+0x38>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d103      	bne.n	800cdf8 <tcpip_tcp_timer+0x1c>
 800cdf0:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <tcpip_tcp_timer+0x3c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d005      	beq.n	800ce04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4908      	ldr	r1, [pc, #32]	; (800ce1c <tcpip_tcp_timer+0x40>)
 800cdfc:	20fa      	movs	r0, #250	; 0xfa
 800cdfe:	f000 f8f3 	bl	800cfe8 <sys_timeout>
 800ce02:	e003      	b.n	800ce0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ce04:	4b06      	ldr	r3, [pc, #24]	; (800ce20 <tcpip_tcp_timer+0x44>)
 800ce06:	2200      	movs	r2, #0
 800ce08:	601a      	str	r2, [r3, #0]
  }
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20006bb8 	.word	0x20006bb8
 800ce18:	20006bbc 	.word	0x20006bbc
 800ce1c:	0800cddd 	.word	0x0800cddd
 800ce20:	20006c04 	.word	0x20006c04

0800ce24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <tcp_timer_needed+0x30>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10f      	bne.n	800ce50 <tcp_timer_needed+0x2c>
 800ce30:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <tcp_timer_needed+0x34>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <tcp_timer_needed+0x1c>
 800ce38:	4b08      	ldr	r3, [pc, #32]	; (800ce5c <tcp_timer_needed+0x38>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <tcp_timer_needed+0x30>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce46:	2200      	movs	r2, #0
 800ce48:	4905      	ldr	r1, [pc, #20]	; (800ce60 <tcp_timer_needed+0x3c>)
 800ce4a:	20fa      	movs	r0, #250	; 0xfa
 800ce4c:	f000 f8cc 	bl	800cfe8 <sys_timeout>
  }
}
 800ce50:	bf00      	nop
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20006c04 	.word	0x20006c04
 800ce58:	20006bb8 	.word	0x20006bb8
 800ce5c:	20006bbc 	.word	0x20006bbc
 800ce60:	0800cddd 	.word	0x0800cddd

0800ce64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce70:	2006      	movs	r0, #6
 800ce72:	f7f8 fe79 	bl	8005b68 <memp_malloc>
 800ce76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d109      	bne.n	800ce92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d151      	bne.n	800cf28 <sys_timeout_abs+0xc4>
 800ce84:	4b2a      	ldr	r3, [pc, #168]	; (800cf30 <sys_timeout_abs+0xcc>)
 800ce86:	22be      	movs	r2, #190	; 0xbe
 800ce88:	492a      	ldr	r1, [pc, #168]	; (800cf34 <sys_timeout_abs+0xd0>)
 800ce8a:	482b      	ldr	r0, [pc, #172]	; (800cf38 <sys_timeout_abs+0xd4>)
 800ce8c:	f003 f9b2 	bl	80101f4 <iprintf>
    return;
 800ce90:	e04a      	b.n	800cf28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ceaa:	4b24      	ldr	r3, [pc, #144]	; (800cf3c <sys_timeout_abs+0xd8>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d103      	bne.n	800ceba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ceb2:	4a22      	ldr	r2, [pc, #136]	; (800cf3c <sys_timeout_abs+0xd8>)
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	6013      	str	r3, [r2, #0]
    return;
 800ceb8:	e037      	b.n	800cf2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	4b1f      	ldr	r3, [pc, #124]	; (800cf3c <sys_timeout_abs+0xd8>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	0fdb      	lsrs	r3, r3, #31
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d007      	beq.n	800cee2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ced2:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <sys_timeout_abs+0xd8>)
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ceda:	4a18      	ldr	r2, [pc, #96]	; (800cf3c <sys_timeout_abs+0xd8>)
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6013      	str	r3, [r2, #0]
 800cee0:	e023      	b.n	800cf2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cee2:	4b16      	ldr	r3, [pc, #88]	; (800cf3c <sys_timeout_abs+0xd8>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	617b      	str	r3, [r7, #20]
 800cee8:	e01a      	b.n	800cf20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <sys_timeout_abs+0xa6>
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	0fdb      	lsrs	r3, r3, #31
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d007      	beq.n	800cf1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	601a      	str	r2, [r3, #0]
        break;
 800cf18:	e007      	b.n	800cf2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e1      	bne.n	800ceea <sys_timeout_abs+0x86>
 800cf26:	e000      	b.n	800cf2a <sys_timeout_abs+0xc6>
    return;
 800cf28:	bf00      	nop
      }
    }
  }
}
 800cf2a:	3718      	adds	r7, #24
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	080138f8 	.word	0x080138f8
 800cf34:	0801392c 	.word	0x0801392c
 800cf38:	0801396c 	.word	0x0801396c
 800cf3c:	20006bfc 	.word	0x20006bfc

0800cf40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	4798      	blx	r3

  now = sys_now();
 800cf52:	f7f6 fd29 	bl	80039a8 <sys_now>
 800cf56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	4b0f      	ldr	r3, [pc, #60]	; (800cf9c <lwip_cyclic_timer+0x5c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4413      	add	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	0fdb      	lsrs	r3, r3, #31
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d009      	beq.n	800cf8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	4907      	ldr	r1, [pc, #28]	; (800cfa0 <lwip_cyclic_timer+0x60>)
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff ff6e 	bl	800ce64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cf88:	e004      	b.n	800cf94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4904      	ldr	r1, [pc, #16]	; (800cfa0 <lwip_cyclic_timer+0x60>)
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7ff ff68 	bl	800ce64 <sys_timeout_abs>
}
 800cf94:	bf00      	nop
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20006c00 	.word	0x20006c00
 800cfa0:	0800cf41 	.word	0x0800cf41

0800cfa4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfaa:	2301      	movs	r3, #1
 800cfac:	607b      	str	r3, [r7, #4]
 800cfae:	e00e      	b.n	800cfce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cfb0:	4a0b      	ldr	r2, [pc, #44]	; (800cfe0 <sys_timeouts_init+0x3c>)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	4a08      	ldr	r2, [pc, #32]	; (800cfe0 <sys_timeouts_init+0x3c>)
 800cfbe:	4413      	add	r3, r2
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	4908      	ldr	r1, [pc, #32]	; (800cfe4 <sys_timeouts_init+0x40>)
 800cfc4:	f000 f810 	bl	800cfe8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	607b      	str	r3, [r7, #4]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d9ed      	bls.n	800cfb0 <sys_timeouts_init+0xc>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	0801495c 	.word	0x0801495c
 800cfe4:	0800cf41 	.word	0x0800cf41

0800cfe8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cffa:	d306      	bcc.n	800d00a <sys_timeout+0x22>
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <sys_timeout+0x40>)
 800cffe:	f240 1229 	movw	r2, #297	; 0x129
 800d002:	490a      	ldr	r1, [pc, #40]	; (800d02c <sys_timeout+0x44>)
 800d004:	480a      	ldr	r0, [pc, #40]	; (800d030 <sys_timeout+0x48>)
 800d006:	f003 f8f5 	bl	80101f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d00a:	f7f6 fccd 	bl	80039a8 <sys_now>
 800d00e:	4602      	mov	r2, r0
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	68b9      	ldr	r1, [r7, #8]
 800d01a:	6978      	ldr	r0, [r7, #20]
 800d01c:	f7ff ff22 	bl	800ce64 <sys_timeout_abs>
#endif
}
 800d020:	bf00      	nop
 800d022:	3718      	adds	r7, #24
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	080138f8 	.word	0x080138f8
 800d02c:	08013994 	.word	0x08013994
 800d030:	0801396c 	.word	0x0801396c

0800d034 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d03a:	f7f6 fcb5 	bl	80039a8 <sys_now>
 800d03e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d040:	4b1a      	ldr	r3, [pc, #104]	; (800d0ac <sys_check_timeouts+0x78>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <sys_check_timeouts+0x1a>
 800d04a:	f7f9 f8b1 	bl	80061b0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d04e:	4b18      	ldr	r3, [pc, #96]	; (800d0b0 <sys_check_timeouts+0x7c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d022      	beq.n	800d0a0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	0fdb      	lsrs	r3, r3, #31
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d11a      	bne.n	800d0a4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a0f      	ldr	r2, [pc, #60]	; (800d0b0 <sys_check_timeouts+0x7c>)
 800d074:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	4a0b      	ldr	r2, [pc, #44]	; (800d0b4 <sys_check_timeouts+0x80>)
 800d088:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	2006      	movs	r0, #6
 800d08e:	f7f8 fdb7 	bl	8005c00 <memp_free>
    if (handler != NULL) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0d3      	beq.n	800d040 <sys_check_timeouts+0xc>
      handler(arg);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6838      	ldr	r0, [r7, #0]
 800d09c:	4798      	blx	r3
  do {
 800d09e:	e7cf      	b.n	800d040 <sys_check_timeouts+0xc>
      return;
 800d0a0:	bf00      	nop
 800d0a2:	e000      	b.n	800d0a6 <sys_check_timeouts+0x72>
      return;
 800d0a4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	20006ba9 	.word	0x20006ba9
 800d0b0:	20006bfc 	.word	0x20006bfc
 800d0b4:	20006c00 	.word	0x20006c00

0800d0b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d0bc:	f003 f8b2 	bl	8010224 <rand>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	4b01      	ldr	r3, [pc, #4]	; (800d0d8 <udp_init+0x20>)
 800d0d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0d4:	bf00      	nop
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20000018 	.word	0x20000018

0800d0dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d0e6:	4b17      	ldr	r3, [pc, #92]	; (800d144 <udp_new_port+0x68>)
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	b291      	uxth	r1, r2
 800d0ee:	4a15      	ldr	r2, [pc, #84]	; (800d144 <udp_new_port+0x68>)
 800d0f0:	8011      	strh	r1, [r2, #0]
 800d0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d103      	bne.n	800d102 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d0fa:	4b12      	ldr	r3, [pc, #72]	; (800d144 <udp_new_port+0x68>)
 800d0fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d100:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d102:	4b11      	ldr	r3, [pc, #68]	; (800d148 <udp_new_port+0x6c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	e011      	b.n	800d12e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	8a5a      	ldrh	r2, [r3, #18]
 800d10e:	4b0d      	ldr	r3, [pc, #52]	; (800d144 <udp_new_port+0x68>)
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d108      	bne.n	800d128 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	3301      	adds	r3, #1
 800d11a:	80fb      	strh	r3, [r7, #6]
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d122:	d3e0      	bcc.n	800d0e6 <udp_new_port+0xa>
        return 0;
 800d124:	2300      	movs	r3, #0
 800d126:	e007      	b.n	800d138 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	603b      	str	r3, [r7, #0]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1ea      	bne.n	800d10a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d134:	4b03      	ldr	r3, [pc, #12]	; (800d144 <udp_new_port+0x68>)
 800d136:	881b      	ldrh	r3, [r3, #0]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	20000018 	.word	0x20000018
 800d148:	20006c08 	.word	0x20006c08

0800d14c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d105      	bne.n	800d16c <udp_input_local_match+0x20>
 800d160:	4b27      	ldr	r3, [pc, #156]	; (800d200 <udp_input_local_match+0xb4>)
 800d162:	2287      	movs	r2, #135	; 0x87
 800d164:	4927      	ldr	r1, [pc, #156]	; (800d204 <udp_input_local_match+0xb8>)
 800d166:	4828      	ldr	r0, [pc, #160]	; (800d208 <udp_input_local_match+0xbc>)
 800d168:	f003 f844 	bl	80101f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d105      	bne.n	800d17e <udp_input_local_match+0x32>
 800d172:	4b23      	ldr	r3, [pc, #140]	; (800d200 <udp_input_local_match+0xb4>)
 800d174:	2288      	movs	r2, #136	; 0x88
 800d176:	4925      	ldr	r1, [pc, #148]	; (800d20c <udp_input_local_match+0xc0>)
 800d178:	4823      	ldr	r0, [pc, #140]	; (800d208 <udp_input_local_match+0xbc>)
 800d17a:	f003 f83b 	bl	80101f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	7a1b      	ldrb	r3, [r3, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00b      	beq.n	800d19e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	7a1a      	ldrb	r2, [r3, #8]
 800d18a:	4b21      	ldr	r3, [pc, #132]	; (800d210 <udp_input_local_match+0xc4>)
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d192:	3301      	adds	r3, #1
 800d194:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d196:	429a      	cmp	r2, r3
 800d198:	d001      	beq.n	800d19e <udp_input_local_match+0x52>
    return 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	e02b      	b.n	800d1f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d018      	beq.n	800d1d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d013      	beq.n	800d1d2 <udp_input_local_match+0x86>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00f      	beq.n	800d1d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d1b2:	4b17      	ldr	r3, [pc, #92]	; (800d210 <udp_input_local_match+0xc4>)
 800d1b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ba:	d00a      	beq.n	800d1d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4b13      	ldr	r3, [pc, #76]	; (800d210 <udp_input_local_match+0xc4>)
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	405a      	eors	r2, r3
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d110      	bne.n	800d1f4 <udp_input_local_match+0xa8>
          return 1;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e00f      	b.n	800d1f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d009      	beq.n	800d1f0 <udp_input_local_match+0xa4>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d005      	beq.n	800d1f0 <udp_input_local_match+0xa4>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <udp_input_local_match+0xc4>)
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d101      	bne.n	800d1f4 <udp_input_local_match+0xa8>
        return 1;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e000      	b.n	800d1f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	080139e0 	.word	0x080139e0
 800d204:	08013a10 	.word	0x08013a10
 800d208:	08013a34 	.word	0x08013a34
 800d20c:	08013a5c 	.word	0x08013a5c
 800d210:	2000363c 	.word	0x2000363c

0800d214 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d214:	b590      	push	{r4, r7, lr}
 800d216:	b08d      	sub	sp, #52	; 0x34
 800d218:	af02      	add	r7, sp, #8
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d105      	bne.n	800d234 <udp_input+0x20>
 800d228:	4b7c      	ldr	r3, [pc, #496]	; (800d41c <udp_input+0x208>)
 800d22a:	22cf      	movs	r2, #207	; 0xcf
 800d22c:	497c      	ldr	r1, [pc, #496]	; (800d420 <udp_input+0x20c>)
 800d22e:	487d      	ldr	r0, [pc, #500]	; (800d424 <udp_input+0x210>)
 800d230:	f002 ffe0 	bl	80101f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <udp_input+0x32>
 800d23a:	4b78      	ldr	r3, [pc, #480]	; (800d41c <udp_input+0x208>)
 800d23c:	22d0      	movs	r2, #208	; 0xd0
 800d23e:	497a      	ldr	r1, [pc, #488]	; (800d428 <udp_input+0x214>)
 800d240:	4878      	ldr	r0, [pc, #480]	; (800d424 <udp_input+0x210>)
 800d242:	f002 ffd7 	bl	80101f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	895b      	ldrh	r3, [r3, #10]
 800d24a:	2b07      	cmp	r3, #7
 800d24c:	d803      	bhi.n	800d256 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7f9 fae8 	bl	8006824 <pbuf_free>
    goto end;
 800d254:	e0de      	b.n	800d414 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d25c:	4b73      	ldr	r3, [pc, #460]	; (800d42c <udp_input+0x218>)
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	4a72      	ldr	r2, [pc, #456]	; (800d42c <udp_input+0x218>)
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f002 f80a 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800d26c:	4603      	mov	r3, r0
 800d26e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	b29b      	uxth	r3, r3
 800d276:	4618      	mov	r0, r3
 800d278:	f7f7 ffb6 	bl	80051e8 <lwip_htons>
 800d27c:	4603      	mov	r3, r0
 800d27e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	885b      	ldrh	r3, [r3, #2]
 800d284:	b29b      	uxth	r3, r3
 800d286:	4618      	mov	r0, r3
 800d288:	f7f7 ffae 	bl	80051e8 <lwip_htons>
 800d28c:	4603      	mov	r3, r0
 800d28e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d290:	2300      	movs	r3, #0
 800d292:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d294:	2300      	movs	r3, #0
 800d296:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d29c:	4b64      	ldr	r3, [pc, #400]	; (800d430 <udp_input+0x21c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d2a2:	e054      	b.n	800d34e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	8a5b      	ldrh	r3, [r3, #18]
 800d2a8:	89fa      	ldrh	r2, [r7, #14]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d14a      	bne.n	800d344 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d2ae:	7cfb      	ldrb	r3, [r7, #19]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2b6:	f7ff ff49 	bl	800d14c <udp_input_local_match>
 800d2ba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d041      	beq.n	800d344 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	7c1b      	ldrb	r3, [r3, #16]
 800d2c4:	f003 0304 	and.w	r3, r3, #4
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d11d      	bne.n	800d308 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d102      	bne.n	800d2d8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d4:	61fb      	str	r3, [r7, #28]
 800d2d6:	e017      	b.n	800d308 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d2d8:	7cfb      	ldrb	r3, [r7, #19]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d014      	beq.n	800d308 <udp_input+0xf4>
 800d2de:	4b53      	ldr	r3, [pc, #332]	; (800d42c <udp_input+0x218>)
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e6:	d10f      	bne.n	800d308 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d008      	beq.n	800d308 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d101      	bne.n	800d308 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	8a9b      	ldrh	r3, [r3, #20]
 800d30c:	8a3a      	ldrh	r2, [r7, #16]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d118      	bne.n	800d344 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d316:	2b00      	cmp	r3, #0
 800d318:	d005      	beq.n	800d326 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	4b43      	ldr	r3, [pc, #268]	; (800d42c <udp_input+0x218>)
 800d320:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d322:	429a      	cmp	r2, r3
 800d324:	d10e      	bne.n	800d344 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d014      	beq.n	800d356 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d334:	4b3e      	ldr	r3, [pc, #248]	; (800d430 <udp_input+0x21c>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d33c:	4a3c      	ldr	r2, [pc, #240]	; (800d430 <udp_input+0x21c>)
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d342:	e008      	b.n	800d356 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	627b      	str	r3, [r7, #36]	; 0x24
 800d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1a7      	bne.n	800d2a4 <udp_input+0x90>
 800d354:	e000      	b.n	800d358 <udp_input+0x144>
        break;
 800d356:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <udp_input+0x15a>
    for_us = 1;
 800d368:	2301      	movs	r3, #1
 800d36a:	76fb      	strb	r3, [r7, #27]
 800d36c:	e00a      	b.n	800d384 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	3304      	adds	r3, #4
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	4b2d      	ldr	r3, [pc, #180]	; (800d42c <udp_input+0x218>)
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	429a      	cmp	r2, r3
 800d37a:	bf0c      	ite	eq
 800d37c:	2301      	moveq	r3, #1
 800d37e:	2300      	movne	r3, #0
 800d380:	b2db      	uxtb	r3, r3
 800d382:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d384:	7efb      	ldrb	r3, [r7, #27]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d041      	beq.n	800d40e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d38a:	2108      	movs	r1, #8
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7f9 f9c3 	bl	8006718 <pbuf_remove_header>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00a      	beq.n	800d3ae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d398:	4b20      	ldr	r3, [pc, #128]	; (800d41c <udp_input+0x208>)
 800d39a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d39e:	4925      	ldr	r1, [pc, #148]	; (800d434 <udp_input+0x220>)
 800d3a0:	4820      	ldr	r0, [pc, #128]	; (800d424 <udp_input+0x210>)
 800d3a2:	f002 ff27 	bl	80101f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7f9 fa3c 	bl	8006824 <pbuf_free>
      goto end;
 800d3ac:	e032      	b.n	800d414 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00a      	beq.n	800d3d2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	699c      	ldr	r4, [r3, #24]
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	69d8      	ldr	r0, [r3, #28]
 800d3c4:	8a3b      	ldrh	r3, [r7, #16]
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	4b1b      	ldr	r3, [pc, #108]	; (800d438 <udp_input+0x224>)
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d3d0:	e021      	b.n	800d416 <udp_input+0x202>
        pbuf_free(p);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7f9 fa26 	bl	8006824 <pbuf_free>
        goto end;
 800d3d8:	e01c      	b.n	800d414 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d3da:	7cfb      	ldrb	r3, [r7, #19]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d112      	bne.n	800d406 <udp_input+0x1f2>
 800d3e0:	4b12      	ldr	r3, [pc, #72]	; (800d42c <udp_input+0x218>)
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3e8:	2be0      	cmp	r3, #224	; 0xe0
 800d3ea:	d00c      	beq.n	800d406 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d3ec:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <udp_input+0x218>)
 800d3ee:	899b      	ldrh	r3, [r3, #12]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	b21b      	sxth	r3, r3
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7f9 fa00 	bl	80067fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d3fe:	2103      	movs	r1, #3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f001 fc1d 	bl	800ec40 <icmp_dest_unreach>
      pbuf_free(p);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7f9 fa0c 	bl	8006824 <pbuf_free>
  return;
 800d40c:	e003      	b.n	800d416 <udp_input+0x202>
    pbuf_free(p);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7f9 fa08 	bl	8006824 <pbuf_free>
  return;
 800d414:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d416:	372c      	adds	r7, #44	; 0x2c
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd90      	pop	{r4, r7, pc}
 800d41c:	080139e0 	.word	0x080139e0
 800d420:	08013a84 	.word	0x08013a84
 800d424:	08013a34 	.word	0x08013a34
 800d428:	08013a9c 	.word	0x08013a9c
 800d42c:	2000363c 	.word	0x2000363c
 800d430:	20006c08 	.word	0x20006c08
 800d434:	08013ab8 	.word	0x08013ab8
 800d438:	2000364c 	.word	0x2000364c

0800d43c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d109      	bne.n	800d460 <udp_send+0x24>
 800d44c:	4b11      	ldr	r3, [pc, #68]	; (800d494 <udp_send+0x58>)
 800d44e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d452:	4911      	ldr	r1, [pc, #68]	; (800d498 <udp_send+0x5c>)
 800d454:	4811      	ldr	r0, [pc, #68]	; (800d49c <udp_send+0x60>)
 800d456:	f002 fecd 	bl	80101f4 <iprintf>
 800d45a:	f06f 030f 	mvn.w	r3, #15
 800d45e:	e015      	b.n	800d48c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d109      	bne.n	800d47a <udp_send+0x3e>
 800d466:	4b0b      	ldr	r3, [pc, #44]	; (800d494 <udp_send+0x58>)
 800d468:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d46c:	490c      	ldr	r1, [pc, #48]	; (800d4a0 <udp_send+0x64>)
 800d46e:	480b      	ldr	r0, [pc, #44]	; (800d49c <udp_send+0x60>)
 800d470:	f002 fec0 	bl	80101f4 <iprintf>
 800d474:	f06f 030f 	mvn.w	r3, #15
 800d478:	e008      	b.n	800d48c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8a9b      	ldrh	r3, [r3, #20]
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f80d 	bl	800d4a4 <udp_sendto>
 800d48a:	4603      	mov	r3, r0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	080139e0 	.word	0x080139e0
 800d498:	08013ad4 	.word	0x08013ad4
 800d49c:	08013a34 	.word	0x08013a34
 800d4a0:	08013aec 	.word	0x08013aec

0800d4a4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <udp_sendto+0x28>
 800d4b8:	4b23      	ldr	r3, [pc, #140]	; (800d548 <udp_sendto+0xa4>)
 800d4ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d4be:	4923      	ldr	r1, [pc, #140]	; (800d54c <udp_sendto+0xa8>)
 800d4c0:	4823      	ldr	r0, [pc, #140]	; (800d550 <udp_sendto+0xac>)
 800d4c2:	f002 fe97 	bl	80101f4 <iprintf>
 800d4c6:	f06f 030f 	mvn.w	r3, #15
 800d4ca:	e038      	b.n	800d53e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d109      	bne.n	800d4e6 <udp_sendto+0x42>
 800d4d2:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <udp_sendto+0xa4>)
 800d4d4:	f240 2219 	movw	r2, #537	; 0x219
 800d4d8:	491e      	ldr	r1, [pc, #120]	; (800d554 <udp_sendto+0xb0>)
 800d4da:	481d      	ldr	r0, [pc, #116]	; (800d550 <udp_sendto+0xac>)
 800d4dc:	f002 fe8a 	bl	80101f4 <iprintf>
 800d4e0:	f06f 030f 	mvn.w	r3, #15
 800d4e4:	e02b      	b.n	800d53e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <udp_sendto+0x5c>
 800d4ec:	4b16      	ldr	r3, [pc, #88]	; (800d548 <udp_sendto+0xa4>)
 800d4ee:	f240 221a 	movw	r2, #538	; 0x21a
 800d4f2:	4919      	ldr	r1, [pc, #100]	; (800d558 <udp_sendto+0xb4>)
 800d4f4:	4816      	ldr	r0, [pc, #88]	; (800d550 <udp_sendto+0xac>)
 800d4f6:	f002 fe7d 	bl	80101f4 <iprintf>
 800d4fa:	f06f 030f 	mvn.w	r3, #15
 800d4fe:	e01e      	b.n	800d53e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	7a1b      	ldrb	r3, [r3, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	7a1b      	ldrb	r3, [r3, #8]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7f8 fe29 	bl	8006164 <netif_get_by_index>
 800d512:	6178      	str	r0, [r7, #20]
 800d514:	e003      	b.n	800d51e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 fc1c 	bl	800ed54 <ip4_route>
 800d51c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d102      	bne.n	800d52a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d524:	f06f 0303 	mvn.w	r3, #3
 800d528:	e009      	b.n	800d53e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d52a:	887a      	ldrh	r2, [r7, #2]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	4613      	mov	r3, r2
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f000 f810 	bl	800d55c <udp_sendto_if>
 800d53c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	080139e0 	.word	0x080139e0
 800d54c:	08013b04 	.word	0x08013b04
 800d550:	08013a34 	.word	0x08013a34
 800d554:	08013b1c 	.word	0x08013b1c
 800d558:	08013b38 	.word	0x08013b38

0800d55c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af02      	add	r7, sp, #8
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d109      	bne.n	800d584 <udp_sendto_if+0x28>
 800d570:	4b2e      	ldr	r3, [pc, #184]	; (800d62c <udp_sendto_if+0xd0>)
 800d572:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d576:	492e      	ldr	r1, [pc, #184]	; (800d630 <udp_sendto_if+0xd4>)
 800d578:	482e      	ldr	r0, [pc, #184]	; (800d634 <udp_sendto_if+0xd8>)
 800d57a:	f002 fe3b 	bl	80101f4 <iprintf>
 800d57e:	f06f 030f 	mvn.w	r3, #15
 800d582:	e04f      	b.n	800d624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d109      	bne.n	800d59e <udp_sendto_if+0x42>
 800d58a:	4b28      	ldr	r3, [pc, #160]	; (800d62c <udp_sendto_if+0xd0>)
 800d58c:	f240 2281 	movw	r2, #641	; 0x281
 800d590:	4929      	ldr	r1, [pc, #164]	; (800d638 <udp_sendto_if+0xdc>)
 800d592:	4828      	ldr	r0, [pc, #160]	; (800d634 <udp_sendto_if+0xd8>)
 800d594:	f002 fe2e 	bl	80101f4 <iprintf>
 800d598:	f06f 030f 	mvn.w	r3, #15
 800d59c:	e042      	b.n	800d624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d109      	bne.n	800d5b8 <udp_sendto_if+0x5c>
 800d5a4:	4b21      	ldr	r3, [pc, #132]	; (800d62c <udp_sendto_if+0xd0>)
 800d5a6:	f240 2282 	movw	r2, #642	; 0x282
 800d5aa:	4924      	ldr	r1, [pc, #144]	; (800d63c <udp_sendto_if+0xe0>)
 800d5ac:	4821      	ldr	r0, [pc, #132]	; (800d634 <udp_sendto_if+0xd8>)
 800d5ae:	f002 fe21 	bl	80101f4 <iprintf>
 800d5b2:	f06f 030f 	mvn.w	r3, #15
 800d5b6:	e035      	b.n	800d624 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <udp_sendto_if+0x76>
 800d5be:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <udp_sendto_if+0xd0>)
 800d5c0:	f240 2283 	movw	r2, #643	; 0x283
 800d5c4:	491e      	ldr	r1, [pc, #120]	; (800d640 <udp_sendto_if+0xe4>)
 800d5c6:	481b      	ldr	r0, [pc, #108]	; (800d634 <udp_sendto_if+0xd8>)
 800d5c8:	f002 fe14 	bl	80101f4 <iprintf>
 800d5cc:	f06f 030f 	mvn.w	r3, #15
 800d5d0:	e028      	b.n	800d624 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d009      	beq.n	800d5ec <udp_sendto_if+0x90>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d005      	beq.n	800d5ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d5e8:	2be0      	cmp	r3, #224	; 0xe0
 800d5ea:	d103      	bne.n	800d5f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	e00b      	b.n	800d60c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d002      	beq.n	800d608 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d602:	f06f 0303 	mvn.w	r3, #3
 800d606:	e00d      	b.n	800d624 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d60c:	887a      	ldrh	r2, [r7, #2]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	4613      	mov	r3, r2
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	68b9      	ldr	r1, [r7, #8]
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f000 f811 	bl	800d644 <udp_sendto_if_src>
 800d622:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	080139e0 	.word	0x080139e0
 800d630:	08013b54 	.word	0x08013b54
 800d634:	08013a34 	.word	0x08013a34
 800d638:	08013b70 	.word	0x08013b70
 800d63c:	08013b8c 	.word	0x08013b8c
 800d640:	08013bac 	.word	0x08013bac

0800d644 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08c      	sub	sp, #48	; 0x30
 800d648:	af04      	add	r7, sp, #16
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d109      	bne.n	800d66c <udp_sendto_if_src+0x28>
 800d658:	4b65      	ldr	r3, [pc, #404]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d65a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d65e:	4965      	ldr	r1, [pc, #404]	; (800d7f4 <udp_sendto_if_src+0x1b0>)
 800d660:	4865      	ldr	r0, [pc, #404]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d662:	f002 fdc7 	bl	80101f4 <iprintf>
 800d666:	f06f 030f 	mvn.w	r3, #15
 800d66a:	e0bc      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <udp_sendto_if_src+0x42>
 800d672:	4b5f      	ldr	r3, [pc, #380]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d674:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d678:	4960      	ldr	r1, [pc, #384]	; (800d7fc <udp_sendto_if_src+0x1b8>)
 800d67a:	485f      	ldr	r0, [pc, #380]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d67c:	f002 fdba 	bl	80101f4 <iprintf>
 800d680:	f06f 030f 	mvn.w	r3, #15
 800d684:	e0af      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d109      	bne.n	800d6a0 <udp_sendto_if_src+0x5c>
 800d68c:	4b58      	ldr	r3, [pc, #352]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d68e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d692:	495b      	ldr	r1, [pc, #364]	; (800d800 <udp_sendto_if_src+0x1bc>)
 800d694:	4858      	ldr	r0, [pc, #352]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d696:	f002 fdad 	bl	80101f4 <iprintf>
 800d69a:	f06f 030f 	mvn.w	r3, #15
 800d69e:	e0a2      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d109      	bne.n	800d6ba <udp_sendto_if_src+0x76>
 800d6a6:	4b52      	ldr	r3, [pc, #328]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d6a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d6ac:	4955      	ldr	r1, [pc, #340]	; (800d804 <udp_sendto_if_src+0x1c0>)
 800d6ae:	4852      	ldr	r0, [pc, #328]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d6b0:	f002 fda0 	bl	80101f4 <iprintf>
 800d6b4:	f06f 030f 	mvn.w	r3, #15
 800d6b8:	e095      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d109      	bne.n	800d6d4 <udp_sendto_if_src+0x90>
 800d6c0:	4b4b      	ldr	r3, [pc, #300]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d6c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d6c6:	4950      	ldr	r1, [pc, #320]	; (800d808 <udp_sendto_if_src+0x1c4>)
 800d6c8:	484b      	ldr	r0, [pc, #300]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d6ca:	f002 fd93 	bl	80101f4 <iprintf>
 800d6ce:	f06f 030f 	mvn.w	r3, #15
 800d6d2:	e088      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	8a5b      	ldrh	r3, [r3, #18]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10f      	bne.n	800d6fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	8a5b      	ldrh	r3, [r3, #18]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 f893 	bl	800d810 <udp_bind>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d6ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d6f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d6fa:	e074      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	891b      	ldrh	r3, [r3, #8]
 800d700:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d704:	4293      	cmp	r3, r2
 800d706:	d902      	bls.n	800d70e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	e06b      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d70e:	2108      	movs	r1, #8
 800d710:	68b8      	ldr	r0, [r7, #8]
 800d712:	f7f8 fff1 	bl	80066f8 <pbuf_add_header>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d015      	beq.n	800d748 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d71c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d720:	2108      	movs	r1, #8
 800d722:	2022      	movs	r0, #34	; 0x22
 800d724:	f7f8 fd9a 	bl	800625c <pbuf_alloc>
 800d728:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d730:	f04f 33ff 	mov.w	r3, #4294967295
 800d734:	e057      	b.n	800d7e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d006      	beq.n	800d74c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	69f8      	ldr	r0, [r7, #28]
 800d742:	f7f9 f987 	bl	8006a54 <pbuf_chain>
 800d746:	e001      	b.n	800d74c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	895b      	ldrh	r3, [r3, #10]
 800d750:	2b07      	cmp	r3, #7
 800d752:	d806      	bhi.n	800d762 <udp_sendto_if_src+0x11e>
 800d754:	4b26      	ldr	r3, [pc, #152]	; (800d7f0 <udp_sendto_if_src+0x1ac>)
 800d756:	f240 320d 	movw	r2, #781	; 0x30d
 800d75a:	492c      	ldr	r1, [pc, #176]	; (800d80c <udp_sendto_if_src+0x1c8>)
 800d75c:	4826      	ldr	r0, [pc, #152]	; (800d7f8 <udp_sendto_if_src+0x1b4>)
 800d75e:	f002 fd49 	bl	80101f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	8a5b      	ldrh	r3, [r3, #18]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7f7 fd3b 	bl	80051e8 <lwip_htons>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d77a:	887b      	ldrh	r3, [r7, #2]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7f7 fd33 	bl	80051e8 <lwip_htons>
 800d782:	4603      	mov	r3, r0
 800d784:	461a      	mov	r2, r3
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	719a      	strb	r2, [r3, #6]
 800d790:	2200      	movs	r2, #0
 800d792:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	891b      	ldrh	r3, [r3, #8]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7f7 fd25 	bl	80051e8 <lwip_htons>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d7a6:	2311      	movs	r3, #17
 800d7a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	7adb      	ldrb	r3, [r3, #11]
 800d7ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	7a9b      	ldrb	r3, [r3, #10]
 800d7b4:	7cb9      	ldrb	r1, [r7, #18]
 800d7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b8:	9202      	str	r2, [sp, #8]
 800d7ba:	7cfa      	ldrb	r2, [r7, #19]
 800d7bc:	9201      	str	r2, [sp, #4]
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7c6:	69f8      	ldr	r0, [r7, #28]
 800d7c8:	f001 fcac 	bl	800f124 <ip4_output_if_src>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d7d0:	69fa      	ldr	r2, [r7, #28]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d004      	beq.n	800d7e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d7d8:	69f8      	ldr	r0, [r7, #28]
 800d7da:	f7f9 f823 	bl	8006824 <pbuf_free>
    q = NULL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d7e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3720      	adds	r7, #32
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	080139e0 	.word	0x080139e0
 800d7f4:	08013bcc 	.word	0x08013bcc
 800d7f8:	08013a34 	.word	0x08013a34
 800d7fc:	08013bec 	.word	0x08013bec
 800d800:	08013c0c 	.word	0x08013c0c
 800d804:	08013c30 	.word	0x08013c30
 800d808:	08013c54 	.word	0x08013c54
 800d80c:	08013c78 	.word	0x08013c78

0800d810 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d101      	bne.n	800d828 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d824:	4b39      	ldr	r3, [pc, #228]	; (800d90c <udp_bind+0xfc>)
 800d826:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <udp_bind+0x32>
 800d82e:	4b38      	ldr	r3, [pc, #224]	; (800d910 <udp_bind+0x100>)
 800d830:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d834:	4937      	ldr	r1, [pc, #220]	; (800d914 <udp_bind+0x104>)
 800d836:	4838      	ldr	r0, [pc, #224]	; (800d918 <udp_bind+0x108>)
 800d838:	f002 fcdc 	bl	80101f4 <iprintf>
 800d83c:	f06f 030f 	mvn.w	r3, #15
 800d840:	e060      	b.n	800d904 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d846:	4b35      	ldr	r3, [pc, #212]	; (800d91c <udp_bind+0x10c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e009      	b.n	800d862 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	429a      	cmp	r2, r3
 800d854:	d102      	bne.n	800d85c <udp_bind+0x4c>
      rebind = 1;
 800d856:	2301      	movs	r3, #1
 800d858:	74fb      	strb	r3, [r7, #19]
      break;
 800d85a:	e005      	b.n	800d868 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1f2      	bne.n	800d84e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d868:	88fb      	ldrh	r3, [r7, #6]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d109      	bne.n	800d882 <udp_bind+0x72>
    port = udp_new_port();
 800d86e:	f7ff fc35 	bl	800d0dc <udp_new_port>
 800d872:	4603      	mov	r3, r0
 800d874:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d12c      	bne.n	800d8d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d87c:	f06f 0307 	mvn.w	r3, #7
 800d880:	e040      	b.n	800d904 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d882:	4b26      	ldr	r3, [pc, #152]	; (800d91c <udp_bind+0x10c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	617b      	str	r3, [r7, #20]
 800d888:	e022      	b.n	800d8d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d01b      	beq.n	800d8ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	8a5b      	ldrh	r3, [r3, #18]
 800d896:	88fa      	ldrh	r2, [r7, #6]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d116      	bne.n	800d8ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d00d      	beq.n	800d8c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <udp_bind+0xb4>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d006      	beq.n	800d8c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d8b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d8c4:	f06f 0307 	mvn.w	r3, #7
 800d8c8:	e01c      	b.n	800d904 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1d9      	bne.n	800d88a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <udp_bind+0xd2>
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	e000      	b.n	800d8e4 <udp_bind+0xd4>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	88fa      	ldrh	r2, [r7, #6]
 800d8ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d8ee:	7cfb      	ldrb	r3, [r7, #19]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d8f4:	4b09      	ldr	r3, [pc, #36]	; (800d91c <udp_bind+0x10c>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d8fc:	4a07      	ldr	r2, [pc, #28]	; (800d91c <udp_bind+0x10c>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	08014974 	.word	0x08014974
 800d910:	080139e0 	.word	0x080139e0
 800d914:	08013ca8 	.word	0x08013ca8
 800d918:	08013a34 	.word	0x08013a34
 800d91c:	20006c08 	.word	0x20006c08

0800d920 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d109      	bne.n	800d948 <udp_connect+0x28>
 800d934:	4b2c      	ldr	r3, [pc, #176]	; (800d9e8 <udp_connect+0xc8>)
 800d936:	f240 4235 	movw	r2, #1077	; 0x435
 800d93a:	492c      	ldr	r1, [pc, #176]	; (800d9ec <udp_connect+0xcc>)
 800d93c:	482c      	ldr	r0, [pc, #176]	; (800d9f0 <udp_connect+0xd0>)
 800d93e:	f002 fc59 	bl	80101f4 <iprintf>
 800d942:	f06f 030f 	mvn.w	r3, #15
 800d946:	e04b      	b.n	800d9e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d109      	bne.n	800d962 <udp_connect+0x42>
 800d94e:	4b26      	ldr	r3, [pc, #152]	; (800d9e8 <udp_connect+0xc8>)
 800d950:	f240 4236 	movw	r2, #1078	; 0x436
 800d954:	4927      	ldr	r1, [pc, #156]	; (800d9f4 <udp_connect+0xd4>)
 800d956:	4826      	ldr	r0, [pc, #152]	; (800d9f0 <udp_connect+0xd0>)
 800d958:	f002 fc4c 	bl	80101f4 <iprintf>
 800d95c:	f06f 030f 	mvn.w	r3, #15
 800d960:	e03e      	b.n	800d9e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8a5b      	ldrh	r3, [r3, #18]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10f      	bne.n	800d98a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	8a5b      	ldrh	r3, [r3, #18]
 800d970:	461a      	mov	r2, r3
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff ff4c 	bl	800d810 <udp_bind>
 800d978:	4603      	mov	r3, r0
 800d97a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d97c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <udp_connect+0x6a>
      return err;
 800d984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d988:	e02a      	b.n	800d9e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <udp_connect+0x76>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	e000      	b.n	800d998 <udp_connect+0x78>
 800d996:	2300      	movs	r3, #0
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	88fa      	ldrh	r2, [r7, #6]
 800d9a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	7c1b      	ldrb	r3, [r3, #16]
 800d9a6:	f043 0304 	orr.w	r3, r3, #4
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9b0:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <udp_connect+0xd8>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e008      	b.n	800d9ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d101      	bne.n	800d9c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e00d      	b.n	800d9e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1f3      	bne.n	800d9b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d9d0:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <udp_connect+0xd8>)
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d9d8:	4a07      	ldr	r2, [pc, #28]	; (800d9f8 <udp_connect+0xd8>)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	080139e0 	.word	0x080139e0
 800d9ec:	08013cc0 	.word	0x08013cc0
 800d9f0:	08013a34 	.word	0x08013a34
 800d9f4:	08013cdc 	.word	0x08013cdc
 800d9f8:	20006c08 	.word	0x20006c08

0800d9fc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d107      	bne.n	800da1a <udp_disconnect+0x1e>
 800da0a:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <udp_disconnect+0x44>)
 800da0c:	f240 426a 	movw	r2, #1130	; 0x46a
 800da10:	490c      	ldr	r1, [pc, #48]	; (800da44 <udp_disconnect+0x48>)
 800da12:	480d      	ldr	r0, [pc, #52]	; (800da48 <udp_disconnect+0x4c>)
 800da14:	f002 fbee 	bl	80101f4 <iprintf>
 800da18:	e00f      	b.n	800da3a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7c1b      	ldrb	r3, [r3, #16]
 800da30:	f023 0304 	bic.w	r3, r3, #4
 800da34:	b2da      	uxtb	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	741a      	strb	r2, [r3, #16]
}
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	080139e0 	.word	0x080139e0
 800da44:	08013cf8 	.word	0x08013cf8
 800da48:	08013a34 	.word	0x08013a34

0800da4c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d107      	bne.n	800da6e <udp_recv+0x22>
 800da5e:	4b08      	ldr	r3, [pc, #32]	; (800da80 <udp_recv+0x34>)
 800da60:	f240 428a 	movw	r2, #1162	; 0x48a
 800da64:	4907      	ldr	r1, [pc, #28]	; (800da84 <udp_recv+0x38>)
 800da66:	4808      	ldr	r0, [pc, #32]	; (800da88 <udp_recv+0x3c>)
 800da68:	f002 fbc4 	bl	80101f4 <iprintf>
 800da6c:	e005      	b.n	800da7a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	61da      	str	r2, [r3, #28]
}
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	080139e0 	.word	0x080139e0
 800da84:	08013d14 	.word	0x08013d14
 800da88:	08013a34 	.word	0x08013a34

0800da8c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d107      	bne.n	800daaa <udp_remove+0x1e>
 800da9a:	4b19      	ldr	r3, [pc, #100]	; (800db00 <udp_remove+0x74>)
 800da9c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800daa0:	4918      	ldr	r1, [pc, #96]	; (800db04 <udp_remove+0x78>)
 800daa2:	4819      	ldr	r0, [pc, #100]	; (800db08 <udp_remove+0x7c>)
 800daa4:	f002 fba6 	bl	80101f4 <iprintf>
 800daa8:	e026      	b.n	800daf8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800daaa:	4b18      	ldr	r3, [pc, #96]	; (800db0c <udp_remove+0x80>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d105      	bne.n	800dac0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800dab4:	4b15      	ldr	r3, [pc, #84]	; (800db0c <udp_remove+0x80>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	4a14      	ldr	r2, [pc, #80]	; (800db0c <udp_remove+0x80>)
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	e017      	b.n	800daf0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dac0:	4b12      	ldr	r3, [pc, #72]	; (800db0c <udp_remove+0x80>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e010      	b.n	800daea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <udp_remove+0x58>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d104      	bne.n	800dae4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68da      	ldr	r2, [r3, #12]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	60da      	str	r2, [r3, #12]
        break;
 800dae2:	e005      	b.n	800daf0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	60fb      	str	r3, [r7, #12]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1eb      	bne.n	800dac8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800daf0:	6879      	ldr	r1, [r7, #4]
 800daf2:	2000      	movs	r0, #0
 800daf4:	f7f8 f884 	bl	8005c00 <memp_free>
}
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	080139e0 	.word	0x080139e0
 800db04:	08013d2c 	.word	0x08013d2c
 800db08:	08013a34 	.word	0x08013a34
 800db0c:	20006c08 	.word	0x20006c08

0800db10 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800db16:	2000      	movs	r0, #0
 800db18:	f7f8 f826 	bl	8005b68 <memp_malloc>
 800db1c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d007      	beq.n	800db34 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800db24:	2220      	movs	r2, #32
 800db26:	2100      	movs	r1, #0
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f002 fb5b 	bl	80101e4 <memset>
    pcb->ttl = UDP_TTL;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	22ff      	movs	r2, #255	; 0xff
 800db32:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800db34:	687b      	ldr	r3, [r7, #4]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01e      	beq.n	800db8e <udp_netif_ip_addr_changed+0x4e>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d01a      	beq.n	800db8e <udp_netif_ip_addr_changed+0x4e>
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d017      	beq.n	800db8e <udp_netif_ip_addr_changed+0x4e>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d013      	beq.n	800db8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db66:	4b0d      	ldr	r3, [pc, #52]	; (800db9c <udp_netif_ip_addr_changed+0x5c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	e00c      	b.n	800db88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d103      	bne.n	800db82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	60fb      	str	r3, [r7, #12]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1ef      	bne.n	800db6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800db8e:	bf00      	nop
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	20006c08 	.word	0x20006c08

0800dba0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dba8:	4915      	ldr	r1, [pc, #84]	; (800dc00 <etharp_free_entry+0x60>)
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	4613      	mov	r3, r2
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	4413      	add	r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	440b      	add	r3, r1
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d013      	beq.n	800dbe4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dbbc:	4910      	ldr	r1, [pc, #64]	; (800dc00 <etharp_free_entry+0x60>)
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	440b      	add	r3, r1
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7f8 fe29 	bl	8006824 <pbuf_free>
    arp_table[i].q = NULL;
 800dbd2:	490b      	ldr	r1, [pc, #44]	; (800dc00 <etharp_free_entry+0x60>)
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	440b      	add	r3, r1
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dbe4:	4906      	ldr	r1, [pc, #24]	; (800dc00 <etharp_free_entry+0x60>)
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4413      	add	r3, r2
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	440b      	add	r3, r1
 800dbf2:	3314      	adds	r3, #20
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20006c0c 	.word	0x20006c0c

0800dc04 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	607b      	str	r3, [r7, #4]
 800dc0e:	e096      	b.n	800dd3e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dc10:	494f      	ldr	r1, [pc, #316]	; (800dd50 <etharp_tmr+0x14c>)
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	4613      	mov	r3, r2
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	4413      	add	r3, r2
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	440b      	add	r3, r1
 800dc1e:	3314      	adds	r3, #20
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dc24:	78fb      	ldrb	r3, [r7, #3]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f000 8086 	beq.w	800dd38 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dc2c:	4948      	ldr	r1, [pc, #288]	; (800dd50 <etharp_tmr+0x14c>)
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	4613      	mov	r3, r2
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	4413      	add	r3, r2
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	440b      	add	r3, r1
 800dc3a:	3312      	adds	r3, #18
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	b298      	uxth	r0, r3
 800dc42:	4943      	ldr	r1, [pc, #268]	; (800dd50 <etharp_tmr+0x14c>)
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	4613      	mov	r3, r2
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	4413      	add	r3, r2
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	440b      	add	r3, r1
 800dc50:	3312      	adds	r3, #18
 800dc52:	4602      	mov	r2, r0
 800dc54:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc56:	493e      	ldr	r1, [pc, #248]	; (800dd50 <etharp_tmr+0x14c>)
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	4413      	add	r3, r2
 800dc60:	00db      	lsls	r3, r3, #3
 800dc62:	440b      	add	r3, r1
 800dc64:	3312      	adds	r3, #18
 800dc66:	881b      	ldrh	r3, [r3, #0]
 800dc68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dc6c:	d215      	bcs.n	800dc9a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc6e:	4938      	ldr	r1, [pc, #224]	; (800dd50 <etharp_tmr+0x14c>)
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d10e      	bne.n	800dca2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dc84:	4932      	ldr	r1, [pc, #200]	; (800dd50 <etharp_tmr+0x14c>)
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	440b      	add	r3, r1
 800dc92:	3312      	adds	r3, #18
 800dc94:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d903      	bls.n	800dca2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff ff80 	bl	800dba0 <etharp_free_entry>
 800dca0:	e04a      	b.n	800dd38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dca2:	492b      	ldr	r1, [pc, #172]	; (800dd50 <etharp_tmr+0x14c>)
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	4613      	mov	r3, r2
 800dca8:	005b      	lsls	r3, r3, #1
 800dcaa:	4413      	add	r3, r2
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	440b      	add	r3, r1
 800dcb0:	3314      	adds	r3, #20
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d10a      	bne.n	800dcce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dcb8:	4925      	ldr	r1, [pc, #148]	; (800dd50 <etharp_tmr+0x14c>)
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	440b      	add	r3, r1
 800dcc6:	3314      	adds	r3, #20
 800dcc8:	2204      	movs	r2, #4
 800dcca:	701a      	strb	r2, [r3, #0]
 800dccc:	e034      	b.n	800dd38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dcce:	4920      	ldr	r1, [pc, #128]	; (800dd50 <etharp_tmr+0x14c>)
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4413      	add	r3, r2
 800dcd8:	00db      	lsls	r3, r3, #3
 800dcda:	440b      	add	r3, r1
 800dcdc:	3314      	adds	r3, #20
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b04      	cmp	r3, #4
 800dce2:	d10a      	bne.n	800dcfa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dce4:	491a      	ldr	r1, [pc, #104]	; (800dd50 <etharp_tmr+0x14c>)
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	4613      	mov	r3, r2
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	4413      	add	r3, r2
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	440b      	add	r3, r1
 800dcf2:	3314      	adds	r3, #20
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	e01e      	b.n	800dd38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dcfa:	4915      	ldr	r1, [pc, #84]	; (800dd50 <etharp_tmr+0x14c>)
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	005b      	lsls	r3, r3, #1
 800dd02:	4413      	add	r3, r2
 800dd04:	00db      	lsls	r3, r3, #3
 800dd06:	440b      	add	r3, r1
 800dd08:	3314      	adds	r3, #20
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d113      	bne.n	800dd38 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dd10:	490f      	ldr	r1, [pc, #60]	; (800dd50 <etharp_tmr+0x14c>)
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	4613      	mov	r3, r2
 800dd16:	005b      	lsls	r3, r3, #1
 800dd18:	4413      	add	r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	440b      	add	r3, r1
 800dd1e:	3308      	adds	r3, #8
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	4613      	mov	r3, r2
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	4413      	add	r3, r2
 800dd2a:	00db      	lsls	r3, r3, #3
 800dd2c:	4a08      	ldr	r2, [pc, #32]	; (800dd50 <etharp_tmr+0x14c>)
 800dd2e:	4413      	add	r3, r2
 800dd30:	3304      	adds	r3, #4
 800dd32:	4619      	mov	r1, r3
 800dd34:	f000 fe6e 	bl	800ea14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	607b      	str	r3, [r7, #4]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b09      	cmp	r3, #9
 800dd42:	f77f af65 	ble.w	800dc10 <etharp_tmr+0xc>
      }
    }
  }
}
 800dd46:	bf00      	nop
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20006c0c 	.word	0x20006c0c

0800dd54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08a      	sub	sp, #40	; 0x28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dd62:	230a      	movs	r3, #10
 800dd64:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd66:	230a      	movs	r3, #10
 800dd68:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dd6a:	230a      	movs	r3, #10
 800dd6c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dd72:	230a      	movs	r3, #10
 800dd74:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	83bb      	strh	r3, [r7, #28]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	837b      	strh	r3, [r7, #26]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd82:	2300      	movs	r3, #0
 800dd84:	843b      	strh	r3, [r7, #32]
 800dd86:	e0ae      	b.n	800dee6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dd88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd8c:	49a6      	ldr	r1, [pc, #664]	; (800e028 <etharp_find_entry+0x2d4>)
 800dd8e:	4613      	mov	r3, r2
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	4413      	add	r3, r2
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	440b      	add	r3, r1
 800dd98:	3314      	adds	r3, #20
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dd9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dda2:	2b0a      	cmp	r3, #10
 800dda4:	d105      	bne.n	800ddb2 <etharp_find_entry+0x5e>
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ddac:	8c3b      	ldrh	r3, [r7, #32]
 800ddae:	847b      	strh	r3, [r7, #34]	; 0x22
 800ddb0:	e095      	b.n	800dede <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ddb2:	7dfb      	ldrb	r3, [r7, #23]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 8092 	beq.w	800dede <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d009      	beq.n	800ddd4 <etharp_find_entry+0x80>
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d806      	bhi.n	800ddd4 <etharp_find_entry+0x80>
 800ddc6:	4b99      	ldr	r3, [pc, #612]	; (800e02c <etharp_find_entry+0x2d8>)
 800ddc8:	f240 1223 	movw	r2, #291	; 0x123
 800ddcc:	4998      	ldr	r1, [pc, #608]	; (800e030 <etharp_find_entry+0x2dc>)
 800ddce:	4899      	ldr	r0, [pc, #612]	; (800e034 <etharp_find_entry+0x2e0>)
 800ddd0:	f002 fa10 	bl	80101f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d020      	beq.n	800de1c <etharp_find_entry+0xc8>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6819      	ldr	r1, [r3, #0]
 800ddde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dde2:	4891      	ldr	r0, [pc, #580]	; (800e028 <etharp_find_entry+0x2d4>)
 800dde4:	4613      	mov	r3, r2
 800dde6:	005b      	lsls	r3, r3, #1
 800dde8:	4413      	add	r3, r2
 800ddea:	00db      	lsls	r3, r3, #3
 800ddec:	4403      	add	r3, r0
 800ddee:	3304      	adds	r3, #4
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4299      	cmp	r1, r3
 800ddf4:	d112      	bne.n	800de1c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00c      	beq.n	800de16 <etharp_find_entry+0xc2>
 800ddfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de00:	4989      	ldr	r1, [pc, #548]	; (800e028 <etharp_find_entry+0x2d4>)
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	00db      	lsls	r3, r3, #3
 800de0a:	440b      	add	r3, r1
 800de0c:	3308      	adds	r3, #8
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	429a      	cmp	r2, r3
 800de14:	d102      	bne.n	800de1c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800de16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de1a:	e100      	b.n	800e01e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d140      	bne.n	800dea4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800de22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de26:	4980      	ldr	r1, [pc, #512]	; (800e028 <etharp_find_entry+0x2d4>)
 800de28:	4613      	mov	r3, r2
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	4413      	add	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	440b      	add	r3, r1
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01a      	beq.n	800de6e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800de38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de3c:	497a      	ldr	r1, [pc, #488]	; (800e028 <etharp_find_entry+0x2d4>)
 800de3e:	4613      	mov	r3, r2
 800de40:	005b      	lsls	r3, r3, #1
 800de42:	4413      	add	r3, r2
 800de44:	00db      	lsls	r3, r3, #3
 800de46:	440b      	add	r3, r1
 800de48:	3312      	adds	r3, #18
 800de4a:	881b      	ldrh	r3, [r3, #0]
 800de4c:	8bba      	ldrh	r2, [r7, #28]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d845      	bhi.n	800dede <etharp_find_entry+0x18a>
            old_queue = i;
 800de52:	8c3b      	ldrh	r3, [r7, #32]
 800de54:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800de56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de5a:	4973      	ldr	r1, [pc, #460]	; (800e028 <etharp_find_entry+0x2d4>)
 800de5c:	4613      	mov	r3, r2
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	4413      	add	r3, r2
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	440b      	add	r3, r1
 800de66:	3312      	adds	r3, #18
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	83bb      	strh	r3, [r7, #28]
 800de6c:	e037      	b.n	800dede <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800de6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de72:	496d      	ldr	r1, [pc, #436]	; (800e028 <etharp_find_entry+0x2d4>)
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	440b      	add	r3, r1
 800de7e:	3312      	adds	r3, #18
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	8b7a      	ldrh	r2, [r7, #26]
 800de84:	429a      	cmp	r2, r3
 800de86:	d82a      	bhi.n	800dede <etharp_find_entry+0x18a>
            old_pending = i;
 800de88:	8c3b      	ldrh	r3, [r7, #32]
 800de8a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800de8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de90:	4965      	ldr	r1, [pc, #404]	; (800e028 <etharp_find_entry+0x2d4>)
 800de92:	4613      	mov	r3, r2
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	4413      	add	r3, r2
 800de98:	00db      	lsls	r3, r3, #3
 800de9a:	440b      	add	r3, r1
 800de9c:	3312      	adds	r3, #18
 800de9e:	881b      	ldrh	r3, [r3, #0]
 800dea0:	837b      	strh	r3, [r7, #26]
 800dea2:	e01c      	b.n	800dede <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d919      	bls.n	800dede <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800deaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800deae:	495e      	ldr	r1, [pc, #376]	; (800e028 <etharp_find_entry+0x2d4>)
 800deb0:	4613      	mov	r3, r2
 800deb2:	005b      	lsls	r3, r3, #1
 800deb4:	4413      	add	r3, r2
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	440b      	add	r3, r1
 800deba:	3312      	adds	r3, #18
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	8b3a      	ldrh	r2, [r7, #24]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d80c      	bhi.n	800dede <etharp_find_entry+0x18a>
            old_stable = i;
 800dec4:	8c3b      	ldrh	r3, [r7, #32]
 800dec6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800dec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800decc:	4956      	ldr	r1, [pc, #344]	; (800e028 <etharp_find_entry+0x2d4>)
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	3312      	adds	r3, #18
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dede:	8c3b      	ldrh	r3, [r7, #32]
 800dee0:	3301      	adds	r3, #1
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	843b      	strh	r3, [r7, #32]
 800dee6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800deea:	2b09      	cmp	r3, #9
 800deec:	f77f af4c 	ble.w	800dd88 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800def0:	7afb      	ldrb	r3, [r7, #11]
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	2b00      	cmp	r3, #0
 800def8:	d108      	bne.n	800df0c <etharp_find_entry+0x1b8>
 800defa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800defe:	2b0a      	cmp	r3, #10
 800df00:	d107      	bne.n	800df12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800df02:	7afb      	ldrb	r3, [r7, #11]
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800df0c:	f04f 33ff 	mov.w	r3, #4294967295
 800df10:	e085      	b.n	800e01e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800df12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800df16:	2b09      	cmp	r3, #9
 800df18:	dc02      	bgt.n	800df20 <etharp_find_entry+0x1cc>
    i = empty;
 800df1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df1c:	843b      	strh	r3, [r7, #32]
 800df1e:	e039      	b.n	800df94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800df20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df24:	2b09      	cmp	r3, #9
 800df26:	dc14      	bgt.n	800df52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800df28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800df2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df30:	493d      	ldr	r1, [pc, #244]	; (800e028 <etharp_find_entry+0x2d4>)
 800df32:	4613      	mov	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	4413      	add	r3, r2
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	440b      	add	r3, r1
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d018      	beq.n	800df74 <etharp_find_entry+0x220>
 800df42:	4b3a      	ldr	r3, [pc, #232]	; (800e02c <etharp_find_entry+0x2d8>)
 800df44:	f240 126d 	movw	r2, #365	; 0x16d
 800df48:	493b      	ldr	r1, [pc, #236]	; (800e038 <etharp_find_entry+0x2e4>)
 800df4a:	483a      	ldr	r0, [pc, #232]	; (800e034 <etharp_find_entry+0x2e0>)
 800df4c:	f002 f952 	bl	80101f4 <iprintf>
 800df50:	e010      	b.n	800df74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800df52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df56:	2b09      	cmp	r3, #9
 800df58:	dc02      	bgt.n	800df60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800df5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df5c:	843b      	strh	r3, [r7, #32]
 800df5e:	e009      	b.n	800df74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800df60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df64:	2b09      	cmp	r3, #9
 800df66:	dc02      	bgt.n	800df6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800df68:	8bfb      	ldrh	r3, [r7, #30]
 800df6a:	843b      	strh	r3, [r7, #32]
 800df6c:	e002      	b.n	800df74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800df6e:	f04f 33ff 	mov.w	r3, #4294967295
 800df72:	e054      	b.n	800e01e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df78:	2b09      	cmp	r3, #9
 800df7a:	dd06      	ble.n	800df8a <etharp_find_entry+0x236>
 800df7c:	4b2b      	ldr	r3, [pc, #172]	; (800e02c <etharp_find_entry+0x2d8>)
 800df7e:	f240 127f 	movw	r2, #383	; 0x17f
 800df82:	492e      	ldr	r1, [pc, #184]	; (800e03c <etharp_find_entry+0x2e8>)
 800df84:	482b      	ldr	r0, [pc, #172]	; (800e034 <etharp_find_entry+0x2e0>)
 800df86:	f002 f935 	bl	80101f4 <iprintf>
    etharp_free_entry(i);
 800df8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fe06 	bl	800dba0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df98:	2b09      	cmp	r3, #9
 800df9a:	dd06      	ble.n	800dfaa <etharp_find_entry+0x256>
 800df9c:	4b23      	ldr	r3, [pc, #140]	; (800e02c <etharp_find_entry+0x2d8>)
 800df9e:	f240 1283 	movw	r2, #387	; 0x183
 800dfa2:	4926      	ldr	r1, [pc, #152]	; (800e03c <etharp_find_entry+0x2e8>)
 800dfa4:	4823      	ldr	r0, [pc, #140]	; (800e034 <etharp_find_entry+0x2e0>)
 800dfa6:	f002 f925 	bl	80101f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dfaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfae:	491e      	ldr	r1, [pc, #120]	; (800e028 <etharp_find_entry+0x2d4>)
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	3314      	adds	r3, #20
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <etharp_find_entry+0x27c>
 800dfc2:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <etharp_find_entry+0x2d8>)
 800dfc4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800dfc8:	491d      	ldr	r1, [pc, #116]	; (800e040 <etharp_find_entry+0x2ec>)
 800dfca:	481a      	ldr	r0, [pc, #104]	; (800e034 <etharp_find_entry+0x2e0>)
 800dfcc:	f002 f912 	bl	80101f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00b      	beq.n	800dfee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dfd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6819      	ldr	r1, [r3, #0]
 800dfde:	4812      	ldr	r0, [pc, #72]	; (800e028 <etharp_find_entry+0x2d4>)
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	4403      	add	r3, r0
 800dfea:	3304      	adds	r3, #4
 800dfec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dfee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dff2:	490d      	ldr	r1, [pc, #52]	; (800e028 <etharp_find_entry+0x2d4>)
 800dff4:	4613      	mov	r3, r2
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	4413      	add	r3, r2
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	440b      	add	r3, r1
 800dffe:	3312      	adds	r3, #18
 800e000:	2200      	movs	r2, #0
 800e002:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e004:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e008:	4907      	ldr	r1, [pc, #28]	; (800e028 <etharp_find_entry+0x2d4>)
 800e00a:	4613      	mov	r3, r2
 800e00c:	005b      	lsls	r3, r3, #1
 800e00e:	4413      	add	r3, r2
 800e010:	00db      	lsls	r3, r3, #3
 800e012:	440b      	add	r3, r1
 800e014:	3308      	adds	r3, #8
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e01a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3728      	adds	r7, #40	; 0x28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20006c0c 	.word	0x20006c0c
 800e02c:	08013d44 	.word	0x08013d44
 800e030:	08013d7c 	.word	0x08013d7c
 800e034:	08013dbc 	.word	0x08013dbc
 800e038:	08013de4 	.word	0x08013de4
 800e03c:	08013dfc 	.word	0x08013dfc
 800e040:	08013e10 	.word	0x08013e10

0800e044 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af02      	add	r7, sp, #8
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e058:	2b06      	cmp	r3, #6
 800e05a:	d006      	beq.n	800e06a <etharp_update_arp_entry+0x26>
 800e05c:	4b48      	ldr	r3, [pc, #288]	; (800e180 <etharp_update_arp_entry+0x13c>)
 800e05e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e062:	4948      	ldr	r1, [pc, #288]	; (800e184 <etharp_update_arp_entry+0x140>)
 800e064:	4848      	ldr	r0, [pc, #288]	; (800e188 <etharp_update_arp_entry+0x144>)
 800e066:	f002 f8c5 	bl	80101f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d012      	beq.n	800e096 <etharp_update_arp_entry+0x52>
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00e      	beq.n	800e096 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68f9      	ldr	r1, [r7, #12]
 800e07e:	4618      	mov	r0, r3
 800e080:	f001 f8fe 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800e084:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e086:	2b00      	cmp	r3, #0
 800e088:	d105      	bne.n	800e096 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e092:	2be0      	cmp	r3, #224	; 0xe0
 800e094:	d102      	bne.n	800e09c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e096:	f06f 030f 	mvn.w	r3, #15
 800e09a:	e06c      	b.n	800e176 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e09c:	78fb      	ldrb	r3, [r7, #3]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	68b8      	ldr	r0, [r7, #8]
 800e0a4:	f7ff fe56 	bl	800dd54 <etharp_find_entry>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e0ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	da02      	bge.n	800e0ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e0b4:	8afb      	ldrh	r3, [r7, #22]
 800e0b6:	b25b      	sxtb	r3, r3
 800e0b8:	e05d      	b.n	800e176 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e0ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0be:	4933      	ldr	r1, [pc, #204]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	440b      	add	r3, r1
 800e0ca:	3314      	adds	r3, #20
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e0d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0d4:	492d      	ldr	r1, [pc, #180]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	4413      	add	r3, r2
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	440b      	add	r3, r1
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e0e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	005b      	lsls	r3, r3, #1
 800e0ee:	4413      	add	r3, r2
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	4a25      	ldr	r2, [pc, #148]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e0f6:	4413      	add	r3, r2
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	2206      	movs	r2, #6
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f002 f848 	bl	8010194 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e108:	4920      	ldr	r1, [pc, #128]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	440b      	add	r3, r1
 800e114:	3312      	adds	r3, #18
 800e116:	2200      	movs	r2, #0
 800e118:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e11a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e11e:	491b      	ldr	r1, [pc, #108]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d021      	beq.n	800e174 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e134:	4915      	ldr	r1, [pc, #84]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e136:	4613      	mov	r3, r2
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	4413      	add	r3, r2
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	440b      	add	r3, r1
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e144:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e148:	4910      	ldr	r1, [pc, #64]	; (800e18c <etharp_update_arp_entry+0x148>)
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	440b      	add	r3, r1
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e15e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6939      	ldr	r1, [r7, #16]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f001 ff97 	bl	801009c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e16e:	6938      	ldr	r0, [r7, #16]
 800e170:	f7f8 fb58 	bl	8006824 <pbuf_free>
  }
  return ERR_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	08013d44 	.word	0x08013d44
 800e184:	08013e3c 	.word	0x08013e3c
 800e188:	08013dbc 	.word	0x08013dbc
 800e18c:	20006c0c 	.word	0x20006c0c

0800e190 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e198:	2300      	movs	r3, #0
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e01e      	b.n	800e1dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e19e:	4913      	ldr	r1, [pc, #76]	; (800e1ec <etharp_cleanup_netif+0x5c>)
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	440b      	add	r3, r1
 800e1ac:	3314      	adds	r3, #20
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e1b2:	7afb      	ldrb	r3, [r7, #11]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00e      	beq.n	800e1d6 <etharp_cleanup_netif+0x46>
 800e1b8:	490c      	ldr	r1, [pc, #48]	; (800e1ec <etharp_cleanup_netif+0x5c>)
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	4413      	add	r3, r2
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	440b      	add	r3, r1
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d102      	bne.n	800e1d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7ff fce5 	bl	800dba0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b09      	cmp	r3, #9
 800e1e0:	dddd      	ble.n	800e19e <etharp_cleanup_netif+0xe>
    }
  }
}
 800e1e2:	bf00      	nop
 800e1e4:	bf00      	nop
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20006c0c 	.word	0x20006c0c

0800e1f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e1f0:	b5b0      	push	{r4, r5, r7, lr}
 800e1f2:	b08a      	sub	sp, #40	; 0x28
 800e1f4:	af04      	add	r7, sp, #16
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d107      	bne.n	800e210 <etharp_input+0x20>
 800e200:	4b3d      	ldr	r3, [pc, #244]	; (800e2f8 <etharp_input+0x108>)
 800e202:	f240 228a 	movw	r2, #650	; 0x28a
 800e206:	493d      	ldr	r1, [pc, #244]	; (800e2fc <etharp_input+0x10c>)
 800e208:	483d      	ldr	r0, [pc, #244]	; (800e300 <etharp_input+0x110>)
 800e20a:	f001 fff3 	bl	80101f4 <iprintf>
 800e20e:	e06f      	b.n	800e2f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e220:	d10c      	bne.n	800e23c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e226:	2b06      	cmp	r3, #6
 800e228:	d108      	bne.n	800e23c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d104      	bne.n	800e23c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d003      	beq.n	800e244 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f7f8 faf1 	bl	8006824 <pbuf_free>
    return;
 800e242:	e055      	b.n	800e2f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	330e      	adds	r3, #14
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	3318      	adds	r3, #24
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	3304      	adds	r3, #4
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d102      	bne.n	800e264 <etharp_input+0x74>
    for_us = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	75fb      	strb	r3, [r7, #23]
 800e262:	e009      	b.n	800e278 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	3304      	adds	r3, #4
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	bf0c      	ite	eq
 800e270:	2301      	moveq	r3, #1
 800e272:	2300      	movne	r3, #0
 800e274:	b2db      	uxtb	r3, r3
 800e276:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	f103 0208 	add.w	r2, r3, #8
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d001      	beq.n	800e288 <etharp_input+0x98>
 800e284:	2301      	movs	r3, #1
 800e286:	e000      	b.n	800e28a <etharp_input+0x9a>
 800e288:	2302      	movs	r3, #2
 800e28a:	f107 010c 	add.w	r1, r7, #12
 800e28e:	6838      	ldr	r0, [r7, #0]
 800e290:	f7ff fed8 	bl	800e044 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	88db      	ldrh	r3, [r3, #6]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e29e:	d003      	beq.n	800e2a8 <etharp_input+0xb8>
 800e2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2a4:	d01e      	beq.n	800e2e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e2a6:	e020      	b.n	800e2ea <etharp_input+0xfa>
      if (for_us) {
 800e2a8:	7dfb      	ldrb	r3, [r7, #23]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d01c      	beq.n	800e2e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e2c8:	2102      	movs	r1, #2
 800e2ca:	9103      	str	r1, [sp, #12]
 800e2cc:	f107 010c 	add.w	r1, r7, #12
 800e2d0:	9102      	str	r1, [sp, #8]
 800e2d2:	9201      	str	r2, [sp, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4601      	mov	r1, r0
 800e2dc:	6838      	ldr	r0, [r7, #0]
 800e2de:	f000 faeb 	bl	800e8b8 <etharp_raw>
      break;
 800e2e2:	e001      	b.n	800e2e8 <etharp_input+0xf8>
      break;
 800e2e4:	bf00      	nop
 800e2e6:	e000      	b.n	800e2ea <etharp_input+0xfa>
      break;
 800e2e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7f8 fa9a 	bl	8006824 <pbuf_free>
}
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	08013d44 	.word	0x08013d44
 800e2fc:	08013e94 	.word	0x08013e94
 800e300:	08013dbc 	.word	0x08013dbc

0800e304 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af02      	add	r7, sp, #8
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	4613      	mov	r3, r2
 800e310:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e312:	79fa      	ldrb	r2, [r7, #7]
 800e314:	4944      	ldr	r1, [pc, #272]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e316:	4613      	mov	r3, r2
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4413      	add	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	440b      	add	r3, r1
 800e320:	3314      	adds	r3, #20
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d806      	bhi.n	800e336 <etharp_output_to_arp_index+0x32>
 800e328:	4b40      	ldr	r3, [pc, #256]	; (800e42c <etharp_output_to_arp_index+0x128>)
 800e32a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e32e:	4940      	ldr	r1, [pc, #256]	; (800e430 <etharp_output_to_arp_index+0x12c>)
 800e330:	4840      	ldr	r0, [pc, #256]	; (800e434 <etharp_output_to_arp_index+0x130>)
 800e332:	f001 ff5f 	bl	80101f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e336:	79fa      	ldrb	r2, [r7, #7]
 800e338:	493b      	ldr	r1, [pc, #236]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e33a:	4613      	mov	r3, r2
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	4413      	add	r3, r2
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	440b      	add	r3, r1
 800e344:	3314      	adds	r3, #20
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d153      	bne.n	800e3f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e34c:	79fa      	ldrb	r2, [r7, #7]
 800e34e:	4936      	ldr	r1, [pc, #216]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e350:	4613      	mov	r3, r2
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	4413      	add	r3, r2
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	440b      	add	r3, r1
 800e35a:	3312      	adds	r3, #18
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e362:	d919      	bls.n	800e398 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e364:	79fa      	ldrb	r2, [r7, #7]
 800e366:	4613      	mov	r3, r2
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	4413      	add	r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	4a2e      	ldr	r2, [pc, #184]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e370:	4413      	add	r3, r2
 800e372:	3304      	adds	r3, #4
 800e374:	4619      	mov	r1, r3
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f000 fb4c 	bl	800ea14 <etharp_request>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d138      	bne.n	800e3f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e382:	79fa      	ldrb	r2, [r7, #7]
 800e384:	4928      	ldr	r1, [pc, #160]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e386:	4613      	mov	r3, r2
 800e388:	005b      	lsls	r3, r3, #1
 800e38a:	4413      	add	r3, r2
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	440b      	add	r3, r1
 800e390:	3314      	adds	r3, #20
 800e392:	2203      	movs	r2, #3
 800e394:	701a      	strb	r2, [r3, #0]
 800e396:	e02d      	b.n	800e3f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e398:	79fa      	ldrb	r2, [r7, #7]
 800e39a:	4923      	ldr	r1, [pc, #140]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e39c:	4613      	mov	r3, r2
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	4413      	add	r3, r2
 800e3a2:	00db      	lsls	r3, r3, #3
 800e3a4:	440b      	add	r3, r1
 800e3a6:	3312      	adds	r3, #18
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e3ae:	d321      	bcc.n	800e3f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e3b0:	79fa      	ldrb	r2, [r7, #7]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	4a1b      	ldr	r2, [pc, #108]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e3bc:	4413      	add	r3, r2
 800e3be:	1d19      	adds	r1, r3, #4
 800e3c0:	79fa      	ldrb	r2, [r7, #7]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	4413      	add	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	4a16      	ldr	r2, [pc, #88]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e3ce:	4413      	add	r3, r2
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 fafb 	bl	800e9d0 <etharp_request_dst>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d109      	bne.n	800e3f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e3e0:	79fa      	ldrb	r2, [r7, #7]
 800e3e2:	4911      	ldr	r1, [pc, #68]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	4413      	add	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	440b      	add	r3, r1
 800e3ee:	3314      	adds	r3, #20
 800e3f0:	2203      	movs	r2, #3
 800e3f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e3fa:	79fa      	ldrb	r2, [r7, #7]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	4413      	add	r3, r2
 800e402:	00db      	lsls	r3, r3, #3
 800e404:	3308      	adds	r3, #8
 800e406:	4a08      	ldr	r2, [pc, #32]	; (800e428 <etharp_output_to_arp_index+0x124>)
 800e408:	4413      	add	r3, r2
 800e40a:	3304      	adds	r3, #4
 800e40c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e410:	9200      	str	r2, [sp, #0]
 800e412:	460a      	mov	r2, r1
 800e414:	68b9      	ldr	r1, [r7, #8]
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f001 fe40 	bl	801009c <ethernet_output>
 800e41c:	4603      	mov	r3, r0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20006c0c 	.word	0x20006c0c
 800e42c:	08013d44 	.word	0x08013d44
 800e430:	08013eb4 	.word	0x08013eb4
 800e434:	08013dbc 	.word	0x08013dbc

0800e438 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08a      	sub	sp, #40	; 0x28
 800e43c:	af02      	add	r7, sp, #8
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d106      	bne.n	800e45c <etharp_output+0x24>
 800e44e:	4b73      	ldr	r3, [pc, #460]	; (800e61c <etharp_output+0x1e4>)
 800e450:	f240 321e 	movw	r2, #798	; 0x31e
 800e454:	4972      	ldr	r1, [pc, #456]	; (800e620 <etharp_output+0x1e8>)
 800e456:	4873      	ldr	r0, [pc, #460]	; (800e624 <etharp_output+0x1ec>)
 800e458:	f001 fecc 	bl	80101f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <etharp_output+0x38>
 800e462:	4b6e      	ldr	r3, [pc, #440]	; (800e61c <etharp_output+0x1e4>)
 800e464:	f240 321f 	movw	r2, #799	; 0x31f
 800e468:	496f      	ldr	r1, [pc, #444]	; (800e628 <etharp_output+0x1f0>)
 800e46a:	486e      	ldr	r0, [pc, #440]	; (800e624 <etharp_output+0x1ec>)
 800e46c:	f001 fec2 	bl	80101f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <etharp_output+0x4c>
 800e476:	4b69      	ldr	r3, [pc, #420]	; (800e61c <etharp_output+0x1e4>)
 800e478:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e47c:	496b      	ldr	r1, [pc, #428]	; (800e62c <etharp_output+0x1f4>)
 800e47e:	4869      	ldr	r0, [pc, #420]	; (800e624 <etharp_output+0x1ec>)
 800e480:	f001 feb8 	bl	80101f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	68f9      	ldr	r1, [r7, #12]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fef8 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e496:	4b66      	ldr	r3, [pc, #408]	; (800e630 <etharp_output+0x1f8>)
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	e0af      	b.n	800e5fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4a4:	2be0      	cmp	r3, #224	; 0xe0
 800e4a6:	d118      	bne.n	800e4da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e4b0:	235e      	movs	r3, #94	; 0x5e
 800e4b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3303      	adds	r3, #3
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e4d2:	f107 0310 	add.w	r3, r7, #16
 800e4d6:	61fb      	str	r3, [r7, #28]
 800e4d8:	e090      	b.n	800e5fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	3304      	adds	r3, #4
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	405a      	eors	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3308      	adds	r3, #8
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d012      	beq.n	800e518 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e4f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d00b      	beq.n	800e518 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	330c      	adds	r3, #12
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d003      	beq.n	800e512 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	330c      	adds	r3, #12
 800e50e:	61bb      	str	r3, [r7, #24]
 800e510:	e002      	b.n	800e518 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e512:	f06f 0303 	mvn.w	r3, #3
 800e516:	e07d      	b.n	800e614 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e518:	4b46      	ldr	r3, [pc, #280]	; (800e634 <etharp_output+0x1fc>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	4619      	mov	r1, r3
 800e51e:	4a46      	ldr	r2, [pc, #280]	; (800e638 <etharp_output+0x200>)
 800e520:	460b      	mov	r3, r1
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	440b      	add	r3, r1
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	4413      	add	r3, r2
 800e52a:	3314      	adds	r3, #20
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d925      	bls.n	800e57e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e532:	4b40      	ldr	r3, [pc, #256]	; (800e634 <etharp_output+0x1fc>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	4619      	mov	r1, r3
 800e538:	4a3f      	ldr	r2, [pc, #252]	; (800e638 <etharp_output+0x200>)
 800e53a:	460b      	mov	r3, r1
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	440b      	add	r3, r1
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	4413      	add	r3, r2
 800e544:	3308      	adds	r3, #8
 800e546:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d117      	bne.n	800e57e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	4b38      	ldr	r3, [pc, #224]	; (800e634 <etharp_output+0x1fc>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	4937      	ldr	r1, [pc, #220]	; (800e638 <etharp_output+0x200>)
 800e55a:	4603      	mov	r3, r0
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	4403      	add	r3, r0
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	440b      	add	r3, r1
 800e564:	3304      	adds	r3, #4
 800e566:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e568:	429a      	cmp	r2, r3
 800e56a:	d108      	bne.n	800e57e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e56c:	4b31      	ldr	r3, [pc, #196]	; (800e634 <etharp_output+0x1fc>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	461a      	mov	r2, r3
 800e572:	68b9      	ldr	r1, [r7, #8]
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f7ff fec5 	bl	800e304 <etharp_output_to_arp_index>
 800e57a:	4603      	mov	r3, r0
 800e57c:	e04a      	b.n	800e614 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e57e:	2300      	movs	r3, #0
 800e580:	75fb      	strb	r3, [r7, #23]
 800e582:	e031      	b.n	800e5e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e584:	7dfa      	ldrb	r2, [r7, #23]
 800e586:	492c      	ldr	r1, [pc, #176]	; (800e638 <etharp_output+0x200>)
 800e588:	4613      	mov	r3, r2
 800e58a:	005b      	lsls	r3, r3, #1
 800e58c:	4413      	add	r3, r2
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	440b      	add	r3, r1
 800e592:	3314      	adds	r3, #20
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	2b01      	cmp	r3, #1
 800e598:	d923      	bls.n	800e5e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e59a:	7dfa      	ldrb	r2, [r7, #23]
 800e59c:	4926      	ldr	r1, [pc, #152]	; (800e638 <etharp_output+0x200>)
 800e59e:	4613      	mov	r3, r2
 800e5a0:	005b      	lsls	r3, r3, #1
 800e5a2:	4413      	add	r3, r2
 800e5a4:	00db      	lsls	r3, r3, #3
 800e5a6:	440b      	add	r3, r1
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d117      	bne.n	800e5e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	6819      	ldr	r1, [r3, #0]
 800e5b6:	7dfa      	ldrb	r2, [r7, #23]
 800e5b8:	481f      	ldr	r0, [pc, #124]	; (800e638 <etharp_output+0x200>)
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	4403      	add	r3, r0
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e5c8:	4299      	cmp	r1, r3
 800e5ca:	d10a      	bne.n	800e5e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e5cc:	4a19      	ldr	r2, [pc, #100]	; (800e634 <etharp_output+0x1fc>)
 800e5ce:	7dfb      	ldrb	r3, [r7, #23]
 800e5d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7ff fe93 	bl	800e304 <etharp_output_to_arp_index>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	e018      	b.n	800e614 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	75fb      	strb	r3, [r7, #23]
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	2b09      	cmp	r3, #9
 800e5ec:	d9ca      	bls.n	800e584 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	69b9      	ldr	r1, [r7, #24]
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f000 f822 	bl	800e63c <etharp_query>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	e00b      	b.n	800e614 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	68b9      	ldr	r1, [r7, #8]
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f001 fd45 	bl	801009c <ethernet_output>
 800e612:	4603      	mov	r3, r0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3720      	adds	r7, #32
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	08013d44 	.word	0x08013d44
 800e620:	08013e94 	.word	0x08013e94
 800e624:	08013dbc 	.word	0x08013dbc
 800e628:	08013ee4 	.word	0x08013ee4
 800e62c:	08013e84 	.word	0x08013e84
 800e630:	08014978 	.word	0x08014978
 800e634:	20006cfc 	.word	0x20006cfc
 800e638:	20006c0c 	.word	0x20006c0c

0800e63c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08c      	sub	sp, #48	; 0x30
 800e640:	af02      	add	r7, sp, #8
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3326      	adds	r3, #38	; 0x26
 800e64c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e64e:	23ff      	movs	r3, #255	; 0xff
 800e650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68f9      	ldr	r1, [r7, #12]
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 fe0e 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10c      	bne.n	800e684 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e672:	2be0      	cmp	r3, #224	; 0xe0
 800e674:	d006      	beq.n	800e684 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e684:	f06f 030f 	mvn.w	r3, #15
 800e688:	e101      	b.n	800e88e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	2101      	movs	r1, #1
 800e68e:	68b8      	ldr	r0, [r7, #8]
 800e690:	f7ff fb60 	bl	800dd54 <etharp_find_entry>
 800e694:	4603      	mov	r3, r0
 800e696:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da02      	bge.n	800e6a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e6a0:	8a7b      	ldrh	r3, [r7, #18]
 800e6a2:	b25b      	sxtb	r3, r3
 800e6a4:	e0f3      	b.n	800e88e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e6a6:	8a7b      	ldrh	r3, [r7, #18]
 800e6a8:	2b7e      	cmp	r3, #126	; 0x7e
 800e6aa:	d906      	bls.n	800e6ba <etharp_query+0x7e>
 800e6ac:	4b7a      	ldr	r3, [pc, #488]	; (800e898 <etharp_query+0x25c>)
 800e6ae:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e6b2:	497a      	ldr	r1, [pc, #488]	; (800e89c <etharp_query+0x260>)
 800e6b4:	487a      	ldr	r0, [pc, #488]	; (800e8a0 <etharp_query+0x264>)
 800e6b6:	f001 fd9d 	bl	80101f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e6ba:	8a7b      	ldrh	r3, [r7, #18]
 800e6bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e6be:	7c7a      	ldrb	r2, [r7, #17]
 800e6c0:	4978      	ldr	r1, [pc, #480]	; (800e8a4 <etharp_query+0x268>)
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	4413      	add	r3, r2
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	440b      	add	r3, r1
 800e6cc:	3314      	adds	r3, #20
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d115      	bne.n	800e700 <etharp_query+0xc4>
    is_new_entry = 1;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e6d8:	7c7a      	ldrb	r2, [r7, #17]
 800e6da:	4972      	ldr	r1, [pc, #456]	; (800e8a4 <etharp_query+0x268>)
 800e6dc:	4613      	mov	r3, r2
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	440b      	add	r3, r1
 800e6e6:	3314      	adds	r3, #20
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e6ec:	7c7a      	ldrb	r2, [r7, #17]
 800e6ee:	496d      	ldr	r1, [pc, #436]	; (800e8a4 <etharp_query+0x268>)
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	00db      	lsls	r3, r3, #3
 800e6f8:	440b      	add	r3, r1
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e700:	7c7a      	ldrb	r2, [r7, #17]
 800e702:	4968      	ldr	r1, [pc, #416]	; (800e8a4 <etharp_query+0x268>)
 800e704:	4613      	mov	r3, r2
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	4413      	add	r3, r2
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	440b      	add	r3, r1
 800e70e:	3314      	adds	r3, #20
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d011      	beq.n	800e73a <etharp_query+0xfe>
 800e716:	7c7a      	ldrb	r2, [r7, #17]
 800e718:	4962      	ldr	r1, [pc, #392]	; (800e8a4 <etharp_query+0x268>)
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	00db      	lsls	r3, r3, #3
 800e722:	440b      	add	r3, r1
 800e724:	3314      	adds	r3, #20
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d806      	bhi.n	800e73a <etharp_query+0xfe>
 800e72c:	4b5a      	ldr	r3, [pc, #360]	; (800e898 <etharp_query+0x25c>)
 800e72e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e732:	495d      	ldr	r1, [pc, #372]	; (800e8a8 <etharp_query+0x26c>)
 800e734:	485a      	ldr	r0, [pc, #360]	; (800e8a0 <etharp_query+0x264>)
 800e736:	f001 fd5d 	bl	80101f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d102      	bne.n	800e746 <etharp_query+0x10a>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10c      	bne.n	800e760 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e746:	68b9      	ldr	r1, [r7, #8]
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f000 f963 	bl	800ea14 <etharp_request>
 800e74e:	4603      	mov	r3, r0
 800e750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d102      	bne.n	800e760 <etharp_query+0x124>
      return result;
 800e75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e75e:	e096      	b.n	800e88e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <etharp_query+0x138>
 800e766:	4b4c      	ldr	r3, [pc, #304]	; (800e898 <etharp_query+0x25c>)
 800e768:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e76c:	494f      	ldr	r1, [pc, #316]	; (800e8ac <etharp_query+0x270>)
 800e76e:	484c      	ldr	r0, [pc, #304]	; (800e8a0 <etharp_query+0x264>)
 800e770:	f001 fd40 	bl	80101f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e774:	7c7a      	ldrb	r2, [r7, #17]
 800e776:	494b      	ldr	r1, [pc, #300]	; (800e8a4 <etharp_query+0x268>)
 800e778:	4613      	mov	r3, r2
 800e77a:	005b      	lsls	r3, r3, #1
 800e77c:	4413      	add	r3, r2
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	440b      	add	r3, r1
 800e782:	3314      	adds	r3, #20
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d917      	bls.n	800e7ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e78a:	4a49      	ldr	r2, [pc, #292]	; (800e8b0 <etharp_query+0x274>)
 800e78c:	7c7b      	ldrb	r3, [r7, #17]
 800e78e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e790:	7c7a      	ldrb	r2, [r7, #17]
 800e792:	4613      	mov	r3, r2
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	4413      	add	r3, r2
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	3308      	adds	r3, #8
 800e79c:	4a41      	ldr	r2, [pc, #260]	; (800e8a4 <etharp_query+0x268>)
 800e79e:	4413      	add	r3, r2
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7a6:	9200      	str	r2, [sp, #0]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f001 fc75 	bl	801009c <ethernet_output>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7b8:	e067      	b.n	800e88a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e7ba:	7c7a      	ldrb	r2, [r7, #17]
 800e7bc:	4939      	ldr	r1, [pc, #228]	; (800e8a4 <etharp_query+0x268>)
 800e7be:	4613      	mov	r3, r2
 800e7c0:	005b      	lsls	r3, r3, #1
 800e7c2:	4413      	add	r3, r2
 800e7c4:	00db      	lsls	r3, r3, #3
 800e7c6:	440b      	add	r3, r1
 800e7c8:	3314      	adds	r3, #20
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d15c      	bne.n	800e88a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e7d8:	e01c      	b.n	800e814 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	895a      	ldrh	r2, [r3, #10]
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	891b      	ldrh	r3, [r3, #8]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d10a      	bne.n	800e7fc <etharp_query+0x1c0>
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d006      	beq.n	800e7fc <etharp_query+0x1c0>
 800e7ee:	4b2a      	ldr	r3, [pc, #168]	; (800e898 <etharp_query+0x25c>)
 800e7f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e7f4:	492f      	ldr	r1, [pc, #188]	; (800e8b4 <etharp_query+0x278>)
 800e7f6:	482a      	ldr	r0, [pc, #168]	; (800e8a0 <etharp_query+0x264>)
 800e7f8:	f001 fcfc 	bl	80101f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	7b1b      	ldrb	r3, [r3, #12]
 800e800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <etharp_query+0x1d2>
        copy_needed = 1;
 800e808:	2301      	movs	r3, #1
 800e80a:	61bb      	str	r3, [r7, #24]
        break;
 800e80c:	e005      	b.n	800e81a <etharp_query+0x1de>
      }
      p = p->next;
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1df      	bne.n	800e7da <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d007      	beq.n	800e830 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e826:	200e      	movs	r0, #14
 800e828:	f7f8 fa68 	bl	8006cfc <pbuf_clone>
 800e82c:	61f8      	str	r0, [r7, #28]
 800e82e:	e004      	b.n	800e83a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e834:	69f8      	ldr	r0, [r7, #28]
 800e836:	f7f8 f895 	bl	8006964 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d021      	beq.n	800e884 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e840:	7c7a      	ldrb	r2, [r7, #17]
 800e842:	4918      	ldr	r1, [pc, #96]	; (800e8a4 <etharp_query+0x268>)
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	440b      	add	r3, r1
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00a      	beq.n	800e86a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e854:	7c7a      	ldrb	r2, [r7, #17]
 800e856:	4913      	ldr	r1, [pc, #76]	; (800e8a4 <etharp_query+0x268>)
 800e858:	4613      	mov	r3, r2
 800e85a:	005b      	lsls	r3, r3, #1
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	440b      	add	r3, r1
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f7f7 ffdd 	bl	8006824 <pbuf_free>
      }
      arp_table[i].q = p;
 800e86a:	7c7a      	ldrb	r2, [r7, #17]
 800e86c:	490d      	ldr	r1, [pc, #52]	; (800e8a4 <etharp_query+0x268>)
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	440b      	add	r3, r1
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e882:	e002      	b.n	800e88a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e884:	23ff      	movs	r3, #255	; 0xff
 800e886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3728      	adds	r7, #40	; 0x28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	08013d44 	.word	0x08013d44
 800e89c:	08013ef0 	.word	0x08013ef0
 800e8a0:	08013dbc 	.word	0x08013dbc
 800e8a4:	20006c0c 	.word	0x20006c0c
 800e8a8:	08013f00 	.word	0x08013f00
 800e8ac:	08013ee4 	.word	0x08013ee4
 800e8b0:	20006cfc 	.word	0x20006cfc
 800e8b4:	08013f28 	.word	0x08013f28

0800e8b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08a      	sub	sp, #40	; 0x28
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <etharp_raw+0x26>
 800e8d0:	4b3a      	ldr	r3, [pc, #232]	; (800e9bc <etharp_raw+0x104>)
 800e8d2:	f240 4257 	movw	r2, #1111	; 0x457
 800e8d6:	493a      	ldr	r1, [pc, #232]	; (800e9c0 <etharp_raw+0x108>)
 800e8d8:	483a      	ldr	r0, [pc, #232]	; (800e9c4 <etharp_raw+0x10c>)
 800e8da:	f001 fc8b 	bl	80101f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e8de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8e2:	211c      	movs	r1, #28
 800e8e4:	200e      	movs	r0, #14
 800e8e6:	f7f7 fcb9 	bl	800625c <pbuf_alloc>
 800e8ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	e05d      	b.n	800e9b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	895b      	ldrh	r3, [r3, #10]
 800e8fc:	2b1b      	cmp	r3, #27
 800e8fe:	d806      	bhi.n	800e90e <etharp_raw+0x56>
 800e900:	4b2e      	ldr	r3, [pc, #184]	; (800e9bc <etharp_raw+0x104>)
 800e902:	f240 4262 	movw	r2, #1122	; 0x462
 800e906:	4930      	ldr	r1, [pc, #192]	; (800e9c8 <etharp_raw+0x110>)
 800e908:	482e      	ldr	r0, [pc, #184]	; (800e9c4 <etharp_raw+0x10c>)
 800e90a:	f001 fc73 	bl	80101f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e916:	4618      	mov	r0, r3
 800e918:	f7f6 fc66 	bl	80051e8 <lwip_htons>
 800e91c:	4603      	mov	r3, r0
 800e91e:	461a      	mov	r2, r3
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e92a:	2b06      	cmp	r3, #6
 800e92c:	d006      	beq.n	800e93c <etharp_raw+0x84>
 800e92e:	4b23      	ldr	r3, [pc, #140]	; (800e9bc <etharp_raw+0x104>)
 800e930:	f240 4269 	movw	r2, #1129	; 0x469
 800e934:	4925      	ldr	r1, [pc, #148]	; (800e9cc <etharp_raw+0x114>)
 800e936:	4823      	ldr	r0, [pc, #140]	; (800e9c4 <etharp_raw+0x10c>)
 800e938:	f001 fc5c 	bl	80101f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	3308      	adds	r3, #8
 800e940:	2206      	movs	r2, #6
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	4618      	mov	r0, r3
 800e946:	f001 fc25 	bl	8010194 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	3312      	adds	r3, #18
 800e94e:	2206      	movs	r2, #6
 800e950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e952:	4618      	mov	r0, r3
 800e954:	f001 fc1e 	bl	8010194 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	330e      	adds	r3, #14
 800e95c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e95e:	6812      	ldr	r2, [r2, #0]
 800e960:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	3318      	adds	r3, #24
 800e966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	2200      	movs	r2, #0
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	f042 0201 	orr.w	r2, r2, #1
 800e978:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f042 0208 	orr.w	r2, r2, #8
 800e982:	709a      	strb	r2, [r3, #2]
 800e984:	2200      	movs	r2, #0
 800e986:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2206      	movs	r2, #6
 800e98c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2204      	movs	r2, #4
 800e992:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e994:	f640 0306 	movw	r3, #2054	; 0x806
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	69b9      	ldr	r1, [r7, #24]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f001 fb7b 	bl	801009c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e9a6:	69b8      	ldr	r0, [r7, #24]
 800e9a8:	f7f7 ff3c 	bl	8006824 <pbuf_free>
  p = NULL;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e9b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3720      	adds	r7, #32
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	08013d44 	.word	0x08013d44
 800e9c0:	08013e94 	.word	0x08013e94
 800e9c4:	08013dbc 	.word	0x08013dbc
 800e9c8:	08013f44 	.word	0x08013f44
 800e9cc:	08013f78 	.word	0x08013f78

0800e9d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af04      	add	r7, sp, #16
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	9203      	str	r2, [sp, #12]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	9202      	str	r2, [sp, #8]
 800e9f4:	4a06      	ldr	r2, [pc, #24]	; (800ea10 <etharp_request_dst+0x40>)
 800e9f6:	9201      	str	r2, [sp, #4]
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff5a 	bl	800e8b8 <etharp_raw>
 800ea04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	08014980 	.word	0x08014980

0800ea14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ea1e:	4a05      	ldr	r2, [pc, #20]	; (800ea34 <etharp_request+0x20>)
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff ffd4 	bl	800e9d0 <etharp_request_dst>
 800ea28:	4603      	mov	r3, r0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	08014978 	.word	0x08014978

0800ea38 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08e      	sub	sp, #56	; 0x38
 800ea3c:	af04      	add	r7, sp, #16
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ea42:	4b79      	ldr	r3, [pc, #484]	; (800ec28 <icmp_input+0x1f0>)
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	f003 030f 	and.w	r3, r3, #15
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ea58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea5a:	2b13      	cmp	r3, #19
 800ea5c:	f240 80cd 	bls.w	800ebfa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	895b      	ldrh	r3, [r3, #10]
 800ea64:	2b03      	cmp	r3, #3
 800ea66:	f240 80ca 	bls.w	800ebfe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ea74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f000 80b7 	beq.w	800ebec <icmp_input+0x1b4>
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	f040 80b7 	bne.w	800ebf2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ea84:	4b69      	ldr	r3, [pc, #420]	; (800ec2c <icmp_input+0x1f4>)
 800ea86:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea88:	4b67      	ldr	r3, [pc, #412]	; (800ec28 <icmp_input+0x1f0>)
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea90:	2be0      	cmp	r3, #224	; 0xe0
 800ea92:	f000 80bb 	beq.w	800ec0c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ea96:	4b64      	ldr	r3, [pc, #400]	; (800ec28 <icmp_input+0x1f0>)
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	4a63      	ldr	r2, [pc, #396]	; (800ec28 <icmp_input+0x1f0>)
 800ea9c:	6812      	ldr	r2, [r2, #0]
 800ea9e:	4611      	mov	r1, r2
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 fbed 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f040 80b1 	bne.w	800ec10 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	891b      	ldrh	r3, [r3, #8]
 800eab2:	2b07      	cmp	r3, #7
 800eab4:	f240 80a5 	bls.w	800ec02 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaba:	330e      	adds	r3, #14
 800eabc:	4619      	mov	r1, r3
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7f7 fe1a 	bl	80066f8 <pbuf_add_header>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d04b      	beq.n	800eb62 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	891a      	ldrh	r2, [r3, #8]
 800eace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ead0:	4413      	add	r3, r2
 800ead2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	8b7a      	ldrh	r2, [r7, #26]
 800eada:	429a      	cmp	r2, r3
 800eadc:	f0c0 809a 	bcc.w	800ec14 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800eae0:	8b7b      	ldrh	r3, [r7, #26]
 800eae2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eae6:	4619      	mov	r1, r3
 800eae8:	200e      	movs	r0, #14
 800eaea:	f7f7 fbb7 	bl	800625c <pbuf_alloc>
 800eaee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8090 	beq.w	800ec18 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	895b      	ldrh	r3, [r3, #10]
 800eafc:	461a      	mov	r2, r3
 800eafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb00:	3308      	adds	r3, #8
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d203      	bcs.n	800eb0e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800eb06:	6978      	ldr	r0, [r7, #20]
 800eb08:	f7f7 fe8c 	bl	8006824 <pbuf_free>
          goto icmperr;
 800eb0c:	e085      	b.n	800ec1a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eb14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb16:	4618      	mov	r0, r3
 800eb18:	f001 fb3c 	bl	8010194 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eb1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6978      	ldr	r0, [r7, #20]
 800eb22:	f7f7 fdf9 	bl	8006718 <pbuf_remove_header>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d009      	beq.n	800eb40 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eb2c:	4b40      	ldr	r3, [pc, #256]	; (800ec30 <icmp_input+0x1f8>)
 800eb2e:	22b6      	movs	r2, #182	; 0xb6
 800eb30:	4940      	ldr	r1, [pc, #256]	; (800ec34 <icmp_input+0x1fc>)
 800eb32:	4841      	ldr	r0, [pc, #260]	; (800ec38 <icmp_input+0x200>)
 800eb34:	f001 fb5e 	bl	80101f4 <iprintf>
          pbuf_free(r);
 800eb38:	6978      	ldr	r0, [r7, #20]
 800eb3a:	f7f7 fe73 	bl	8006824 <pbuf_free>
          goto icmperr;
 800eb3e:	e06c      	b.n	800ec1a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eb40:	6879      	ldr	r1, [r7, #4]
 800eb42:	6978      	ldr	r0, [r7, #20]
 800eb44:	f7f7 ff96 	bl	8006a74 <pbuf_copy>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eb4e:	6978      	ldr	r0, [r7, #20]
 800eb50:	f7f7 fe68 	bl	8006824 <pbuf_free>
          goto icmperr;
 800eb54:	e061      	b.n	800ec1a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7f7 fe64 	bl	8006824 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	607b      	str	r3, [r7, #4]
 800eb60:	e00f      	b.n	800eb82 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eb62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb64:	330e      	adds	r3, #14
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7f7 fdd5 	bl	8006718 <pbuf_remove_header>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d006      	beq.n	800eb82 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800eb74:	4b2e      	ldr	r3, [pc, #184]	; (800ec30 <icmp_input+0x1f8>)
 800eb76:	22c7      	movs	r2, #199	; 0xc7
 800eb78:	4930      	ldr	r1, [pc, #192]	; (800ec3c <icmp_input+0x204>)
 800eb7a:	482f      	ldr	r0, [pc, #188]	; (800ec38 <icmp_input+0x200>)
 800eb7c:	f001 fb3a 	bl	80101f4 <iprintf>
          goto icmperr;
 800eb80:	e04b      	b.n	800ec1a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800eb88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7f7 fdb3 	bl	80066f8 <pbuf_add_header>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d12b      	bne.n	800ebf0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800eba6:	4b20      	ldr	r3, [pc, #128]	; (800ec28 <icmp_input+0x1f0>)
 800eba8:	691a      	ldr	r2, [r3, #16]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	709a      	strb	r2, [r3, #2]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	22ff      	movs	r2, #255	; 0xff
 800ebc2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	729a      	strb	r2, [r3, #10]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	9302      	str	r3, [sp, #8]
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	23ff      	movs	r3, #255	; 0xff
 800ebdc:	2200      	movs	r2, #0
 800ebde:	69f9      	ldr	r1, [r7, #28]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 fa75 	bl	800f0d0 <ip4_output_if>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ebea:	e001      	b.n	800ebf0 <icmp_input+0x1b8>
      break;
 800ebec:	bf00      	nop
 800ebee:	e000      	b.n	800ebf2 <icmp_input+0x1ba>
      break;
 800ebf0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7f7 fe16 	bl	8006824 <pbuf_free>
  return;
 800ebf8:	e013      	b.n	800ec22 <icmp_input+0x1ea>
    goto lenerr;
 800ebfa:	bf00      	nop
 800ebfc:	e002      	b.n	800ec04 <icmp_input+0x1cc>
    goto lenerr;
 800ebfe:	bf00      	nop
 800ec00:	e000      	b.n	800ec04 <icmp_input+0x1cc>
        goto lenerr;
 800ec02:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7f7 fe0d 	bl	8006824 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ec0a:	e00a      	b.n	800ec22 <icmp_input+0x1ea>
        goto icmperr;
 800ec0c:	bf00      	nop
 800ec0e:	e004      	b.n	800ec1a <icmp_input+0x1e2>
        goto icmperr;
 800ec10:	bf00      	nop
 800ec12:	e002      	b.n	800ec1a <icmp_input+0x1e2>
          goto icmperr;
 800ec14:	bf00      	nop
 800ec16:	e000      	b.n	800ec1a <icmp_input+0x1e2>
          goto icmperr;
 800ec18:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7f7 fe02 	bl	8006824 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ec20:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ec22:	3728      	adds	r7, #40	; 0x28
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	2000363c 	.word	0x2000363c
 800ec2c:	20003650 	.word	0x20003650
 800ec30:	08013fbc 	.word	0x08013fbc
 800ec34:	08013ff4 	.word	0x08013ff4
 800ec38:	0801402c 	.word	0x0801402c
 800ec3c:	08014054 	.word	0x08014054

0800ec40 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	2103      	movs	r1, #3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f814 	bl	800ec80 <icmp_send_response>
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	210b      	movs	r1, #11
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f804 	bl	800ec80 <icmp_send_response>
}
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08c      	sub	sp, #48	; 0x30
 800ec84:	af04      	add	r7, sp, #16
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70fb      	strb	r3, [r7, #3]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ec90:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec94:	2124      	movs	r1, #36	; 0x24
 800ec96:	2022      	movs	r0, #34	; 0x22
 800ec98:	f7f7 fae0 	bl	800625c <pbuf_alloc>
 800ec9c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d04c      	beq.n	800ed3e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	895b      	ldrh	r3, [r3, #10]
 800eca8:	2b23      	cmp	r3, #35	; 0x23
 800ecaa:	d806      	bhi.n	800ecba <icmp_send_response+0x3a>
 800ecac:	4b26      	ldr	r3, [pc, #152]	; (800ed48 <icmp_send_response+0xc8>)
 800ecae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ecb2:	4926      	ldr	r1, [pc, #152]	; (800ed4c <icmp_send_response+0xcc>)
 800ecb4:	4826      	ldr	r0, [pc, #152]	; (800ed50 <icmp_send_response+0xd0>)
 800ecb6:	f001 fa9d 	bl	80101f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	78fa      	ldrb	r2, [r7, #3]
 800ecca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	78ba      	ldrb	r2, [r7, #2]
 800ecd0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	711a      	strb	r2, [r3, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	2200      	movs	r2, #0
 800ece0:	719a      	strb	r2, [r3, #6]
 800ece2:	2200      	movs	r2, #0
 800ece4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f103 0008 	add.w	r0, r3, #8
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	221c      	movs	r2, #28
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f001 fa4d 	bl	8010194 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ed00:	f107 030c 	add.w	r3, r7, #12
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 f825 	bl	800ed54 <ip4_route>
 800ed0a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d011      	beq.n	800ed36 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2200      	movs	r2, #0
 800ed16:	709a      	strb	r2, [r3, #2]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ed1c:	f107 020c 	add.w	r2, r7, #12
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	9302      	str	r3, [sp, #8]
 800ed24:	2301      	movs	r3, #1
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	23ff      	movs	r3, #255	; 0xff
 800ed2e:	2100      	movs	r1, #0
 800ed30:	69f8      	ldr	r0, [r7, #28]
 800ed32:	f000 f9cd 	bl	800f0d0 <ip4_output_if>
  }
  pbuf_free(q);
 800ed36:	69f8      	ldr	r0, [r7, #28]
 800ed38:	f7f7 fd74 	bl	8006824 <pbuf_free>
 800ed3c:	e000      	b.n	800ed40 <icmp_send_response+0xc0>
    return;
 800ed3e:	bf00      	nop
}
 800ed40:	3720      	adds	r7, #32
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	08013fbc 	.word	0x08013fbc
 800ed4c:	08014088 	.word	0x08014088
 800ed50:	0801402c 	.word	0x0801402c

0800ed54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ed5c:	4b33      	ldr	r3, [pc, #204]	; (800ee2c <ip4_route+0xd8>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	60fb      	str	r3, [r7, #12]
 800ed62:	e036      	b.n	800edd2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed6a:	f003 0301 	and.w	r3, r3, #1
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d02b      	beq.n	800edcc <ip4_route+0x78>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed7a:	089b      	lsrs	r3, r3, #2
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d022      	beq.n	800edcc <ip4_route+0x78>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01d      	beq.n	800edcc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	3304      	adds	r3, #4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	405a      	eors	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	3308      	adds	r3, #8
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4013      	ands	r3, r2
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	e038      	b.n	800ee1e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edb2:	f003 0302 	and.w	r3, r3, #2
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d108      	bne.n	800edcc <ip4_route+0x78>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	330c      	adds	r3, #12
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d101      	bne.n	800edcc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	e028      	b.n	800ee1e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1c5      	bne.n	800ed64 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800edd8:	4b15      	ldr	r3, [pc, #84]	; (800ee30 <ip4_route+0xdc>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01a      	beq.n	800ee16 <ip4_route+0xc2>
 800ede0:	4b13      	ldr	r3, [pc, #76]	; (800ee30 <ip4_route+0xdc>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	d012      	beq.n	800ee16 <ip4_route+0xc2>
 800edf0:	4b0f      	ldr	r3, [pc, #60]	; (800ee30 <ip4_route+0xdc>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00a      	beq.n	800ee16 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ee00:	4b0b      	ldr	r3, [pc, #44]	; (800ee30 <ip4_route+0xdc>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3304      	adds	r3, #4
 800ee06:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d004      	beq.n	800ee16 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	2b7f      	cmp	r3, #127	; 0x7f
 800ee14:	d101      	bne.n	800ee1a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	e001      	b.n	800ee1e <ip4_route+0xca>
  }

  return netif_default;
 800ee1a:	4b05      	ldr	r3, [pc, #20]	; (800ee30 <ip4_route+0xdc>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	20006ba0 	.word	0x20006ba0
 800ee30:	20006ba4 	.word	0x20006ba4

0800ee34 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d016      	beq.n	800ee7a <ip4_input_accept+0x46>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d011      	beq.n	800ee7a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee56:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <ip4_input_accept+0x50>)
 800ee58:	695a      	ldr	r2, [r3, #20]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d008      	beq.n	800ee76 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ee64:	4b07      	ldr	r3, [pc, #28]	; (800ee84 <ip4_input_accept+0x50>)
 800ee66:	695b      	ldr	r3, [r3, #20]
 800ee68:	6879      	ldr	r1, [r7, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fa08 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800ee70:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e000      	b.n	800ee7c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	2000363c 	.word	0x2000363c

0800ee88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	091b      	lsrs	r3, r3, #4
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d004      	beq.n	800eeae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7f7 fcbd 	bl	8006824 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e107      	b.n	800f0be <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f003 030f 	and.w	r3, r3, #15
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	885b      	ldrh	r3, [r3, #2]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7f6 f98f 	bl	80051e8 <lwip_htons>
 800eeca:	4603      	mov	r3, r0
 800eecc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	891b      	ldrh	r3, [r3, #8]
 800eed2:	89ba      	ldrh	r2, [r7, #12]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d204      	bcs.n	800eee2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eed8:	89bb      	ldrh	r3, [r7, #12]
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7f7 fb1b 	bl	8006518 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	895b      	ldrh	r3, [r3, #10]
 800eee6:	89fa      	ldrh	r2, [r7, #14]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d807      	bhi.n	800eefc <ip4_input+0x74>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	891b      	ldrh	r3, [r3, #8]
 800eef0:	89ba      	ldrh	r2, [r7, #12]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d802      	bhi.n	800eefc <ip4_input+0x74>
 800eef6:	89fb      	ldrh	r3, [r7, #14]
 800eef8:	2b13      	cmp	r3, #19
 800eefa:	d804      	bhi.n	800ef06 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7f7 fc91 	bl	8006824 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ef02:	2300      	movs	r3, #0
 800ef04:	e0db      	b.n	800f0be <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	4a6f      	ldr	r2, [pc, #444]	; (800f0c8 <ip4_input+0x240>)
 800ef0c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	4a6d      	ldr	r2, [pc, #436]	; (800f0c8 <ip4_input+0x240>)
 800ef14:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef16:	4b6c      	ldr	r3, [pc, #432]	; (800f0c8 <ip4_input+0x240>)
 800ef18:	695b      	ldr	r3, [r3, #20]
 800ef1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef1e:	2be0      	cmp	r3, #224	; 0xe0
 800ef20:	d112      	bne.n	800ef48 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d007      	beq.n	800ef42 <ip4_input+0xba>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	3304      	adds	r3, #4
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <ip4_input+0xba>
      netif = inp;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	613b      	str	r3, [r7, #16]
 800ef40:	e02a      	b.n	800ef98 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	613b      	str	r3, [r7, #16]
 800ef46:	e027      	b.n	800ef98 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ef48:	6838      	ldr	r0, [r7, #0]
 800ef4a:	f7ff ff73 	bl	800ee34 <ip4_input_accept>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <ip4_input+0xd2>
      netif = inp;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	e01e      	b.n	800ef98 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ef5e:	4b5a      	ldr	r3, [pc, #360]	; (800f0c8 <ip4_input+0x240>)
 800ef60:	695b      	ldr	r3, [r3, #20]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b7f      	cmp	r3, #127	; 0x7f
 800ef66:	d017      	beq.n	800ef98 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ef68:	4b58      	ldr	r3, [pc, #352]	; (800f0cc <ip4_input+0x244>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	613b      	str	r3, [r7, #16]
 800ef6e:	e00e      	b.n	800ef8e <ip4_input+0x106>
          if (netif == inp) {
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d006      	beq.n	800ef86 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ef78:	6938      	ldr	r0, [r7, #16]
 800ef7a:	f7ff ff5b 	bl	800ee34 <ip4_input_accept>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d108      	bne.n	800ef96 <ip4_input+0x10e>
 800ef84:	e000      	b.n	800ef88 <ip4_input+0x100>
            continue;
 800ef86:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	613b      	str	r3, [r7, #16]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1ed      	bne.n	800ef70 <ip4_input+0xe8>
 800ef94:	e000      	b.n	800ef98 <ip4_input+0x110>
            break;
 800ef96:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef98:	4b4b      	ldr	r3, [pc, #300]	; (800f0c8 <ip4_input+0x240>)
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f96e 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d105      	bne.n	800efb6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800efaa:	4b47      	ldr	r3, [pc, #284]	; (800f0c8 <ip4_input+0x240>)
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800efb2:	2be0      	cmp	r3, #224	; 0xe0
 800efb4:	d104      	bne.n	800efc0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7f7 fc34 	bl	8006824 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e07e      	b.n	800f0be <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d104      	bne.n	800efd0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7f7 fc2c 	bl	8006824 <pbuf_free>
    return ERR_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	e076      	b.n	800f0be <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	88db      	ldrh	r3, [r3, #6]
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	461a      	mov	r2, r3
 800efd8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800efdc:	4013      	ands	r3, r2
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00b      	beq.n	800effa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fc92 	bl	800f90c <ip4_reass>
 800efe8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d101      	bne.n	800eff4 <ip4_input+0x16c>
      return ERR_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	e064      	b.n	800f0be <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800effa:	4a33      	ldr	r2, [pc, #204]	; (800f0c8 <ip4_input+0x240>)
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f000:	4a31      	ldr	r2, [pc, #196]	; (800f0c8 <ip4_input+0x240>)
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f006:	4a30      	ldr	r2, [pc, #192]	; (800f0c8 <ip4_input+0x240>)
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	f003 030f 	and.w	r3, r3, #15
 800f014:	b2db      	uxtb	r3, r3
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	4b2a      	ldr	r3, [pc, #168]	; (800f0c8 <ip4_input+0x240>)
 800f01e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f020:	89fb      	ldrh	r3, [r7, #14]
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7f7 fb77 	bl	8006718 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	7a5b      	ldrb	r3, [r3, #9]
 800f02e:	2b11      	cmp	r3, #17
 800f030:	d006      	beq.n	800f040 <ip4_input+0x1b8>
 800f032:	2b11      	cmp	r3, #17
 800f034:	dc13      	bgt.n	800f05e <ip4_input+0x1d6>
 800f036:	2b01      	cmp	r3, #1
 800f038:	d00c      	beq.n	800f054 <ip4_input+0x1cc>
 800f03a:	2b06      	cmp	r3, #6
 800f03c:	d005      	beq.n	800f04a <ip4_input+0x1c2>
 800f03e:	e00e      	b.n	800f05e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7fe f8e6 	bl	800d214 <udp_input>
        break;
 800f048:	e026      	b.n	800f098 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7f9 fccf 	bl	80089f0 <tcp_input>
        break;
 800f052:	e021      	b.n	800f098 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff fcee 	bl	800ea38 <icmp_input>
        break;
 800f05c:	e01c      	b.n	800f098 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f05e:	4b1a      	ldr	r3, [pc, #104]	; (800f0c8 <ip4_input+0x240>)
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	6939      	ldr	r1, [r7, #16]
 800f064:	4618      	mov	r0, r3
 800f066:	f000 f90b 	bl	800f280 <ip4_addr_isbroadcast_u32>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10f      	bne.n	800f090 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f070:	4b15      	ldr	r3, [pc, #84]	; (800f0c8 <ip4_input+0x240>)
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f078:	2be0      	cmp	r3, #224	; 0xe0
 800f07a:	d009      	beq.n	800f090 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f07c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f080:	4619      	mov	r1, r3
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7f7 fbbb 	bl	80067fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f088:	2102      	movs	r1, #2
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff fdd8 	bl	800ec40 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f7f7 fbc7 	bl	8006824 <pbuf_free>
        break;
 800f096:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f098:	4b0b      	ldr	r3, [pc, #44]	; (800f0c8 <ip4_input+0x240>)
 800f09a:	2200      	movs	r2, #0
 800f09c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f09e:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <ip4_input+0x240>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f0a4:	4b08      	ldr	r3, [pc, #32]	; (800f0c8 <ip4_input+0x240>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f0aa:	4b07      	ldr	r3, [pc, #28]	; (800f0c8 <ip4_input+0x240>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f0b0:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <ip4_input+0x240>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f0b6:	4b04      	ldr	r3, [pc, #16]	; (800f0c8 <ip4_input+0x240>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	2000363c 	.word	0x2000363c
 800f0cc:	20006ba0 	.word	0x20006ba0

0800f0d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08a      	sub	sp, #40	; 0x28
 800f0d4:	af04      	add	r7, sp, #16
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d009      	beq.n	800f0fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d003      	beq.n	800f0f6 <ip4_output_if+0x26>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d102      	bne.n	800f0fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f0fc:	78fa      	ldrb	r2, [r7, #3]
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	9302      	str	r3, [sp, #8]
 800f102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	4613      	mov	r3, r2
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	6979      	ldr	r1, [r7, #20]
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 f805 	bl	800f124 <ip4_output_if_src>
 800f11a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b088      	sub	sp, #32
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	7b9b      	ldrb	r3, [r3, #14]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d006      	beq.n	800f148 <ip4_output_if_src+0x24>
 800f13a:	4b4b      	ldr	r3, [pc, #300]	; (800f268 <ip4_output_if_src+0x144>)
 800f13c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f140:	494a      	ldr	r1, [pc, #296]	; (800f26c <ip4_output_if_src+0x148>)
 800f142:	484b      	ldr	r0, [pc, #300]	; (800f270 <ip4_output_if_src+0x14c>)
 800f144:	f001 f856 	bl	80101f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d060      	beq.n	800f210 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f14e:	2314      	movs	r3, #20
 800f150:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f152:	2114      	movs	r1, #20
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f7f7 facf 	bl	80066f8 <pbuf_add_header>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f160:	f06f 0301 	mvn.w	r3, #1
 800f164:	e07c      	b.n	800f260 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	895b      	ldrh	r3, [r3, #10]
 800f170:	2b13      	cmp	r3, #19
 800f172:	d806      	bhi.n	800f182 <ip4_output_if_src+0x5e>
 800f174:	4b3c      	ldr	r3, [pc, #240]	; (800f268 <ip4_output_if_src+0x144>)
 800f176:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f17a:	493e      	ldr	r1, [pc, #248]	; (800f274 <ip4_output_if_src+0x150>)
 800f17c:	483c      	ldr	r0, [pc, #240]	; (800f270 <ip4_output_if_src+0x14c>)
 800f17e:	f001 f839 	bl	80101f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	78fa      	ldrb	r2, [r7, #3]
 800f186:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f18e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f198:	8b7b      	ldrh	r3, [r7, #26]
 800f19a:	089b      	lsrs	r3, r3, #2
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a4:	b2da      	uxtb	r2, r3
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f1b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	891b      	ldrh	r3, [r3, #8]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7f6 f816 	bl	80051e8 <lwip_htons>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461a      	mov	r2, r3
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	719a      	strb	r2, [r3, #6]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f1ce:	4b2a      	ldr	r3, [pc, #168]	; (800f278 <ip4_output_if_src+0x154>)
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f6 f808 	bl	80051e8 <lwip_htons>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	461a      	mov	r2, r3
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f1e0:	4b25      	ldr	r3, [pc, #148]	; (800f278 <ip4_output_if_src+0x154>)
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	4b23      	ldr	r3, [pc, #140]	; (800f278 <ip4_output_if_src+0x154>)
 800f1ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d104      	bne.n	800f1fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f1f2:	4b22      	ldr	r3, [pc, #136]	; (800f27c <ip4_output_if_src+0x158>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	60da      	str	r2, [r3, #12]
 800f1fa:	e003      	b.n	800f204 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	2200      	movs	r2, #0
 800f208:	729a      	strb	r2, [r3, #10]
 800f20a:	2200      	movs	r2, #0
 800f20c:	72da      	strb	r2, [r3, #11]
 800f20e:	e00f      	b.n	800f230 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	895b      	ldrh	r3, [r3, #10]
 800f214:	2b13      	cmp	r3, #19
 800f216:	d802      	bhi.n	800f21e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f218:	f06f 0301 	mvn.w	r3, #1
 800f21c:	e020      	b.n	800f260 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f22a:	f107 0314 	add.w	r3, r7, #20
 800f22e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00c      	beq.n	800f252 <ip4_output_if_src+0x12e>
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	891a      	ldrh	r2, [r3, #8]
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f240:	429a      	cmp	r2, r3
 800f242:	d906      	bls.n	800f252 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f000 fd53 	bl	800fcf4 <ip4_frag>
 800f24e:	4603      	mov	r3, r0
 800f250:	e006      	b.n	800f260 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	68f9      	ldr	r1, [r7, #12]
 800f25a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f25c:	4798      	blx	r3
 800f25e:	4603      	mov	r3, r0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3720      	adds	r7, #32
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	080140b4 	.word	0x080140b4
 800f26c:	080140e8 	.word	0x080140e8
 800f270:	080140f4 	.word	0x080140f4
 800f274:	0801411c 	.word	0x0801411c
 800f278:	20006cfe 	.word	0x20006cfe
 800f27c:	08014974 	.word	0x08014974

0800f280 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f294:	d002      	beq.n	800f29c <ip4_addr_isbroadcast_u32+0x1c>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d101      	bne.n	800f2a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e02a      	b.n	800f2f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e021      	b.n	800f2f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d101      	bne.n	800f2c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e019      	b.n	800f2f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	405a      	eors	r2, r3
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10d      	bne.n	800f2f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	43da      	mvns	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d101      	bne.n	800f2f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e000      	b.n	800f2f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f2f4:	2300      	movs	r3, #0
  }
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
	...

0800f304 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f30e:	4b12      	ldr	r3, [pc, #72]	; (800f358 <ip_reass_tmr+0x54>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f314:	e018      	b.n	800f348 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	7fdb      	ldrb	r3, [r3, #31]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00b      	beq.n	800f336 <ip_reass_tmr+0x32>
      r->timer--;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	7fdb      	ldrb	r3, [r3, #31]
 800f322:	3b01      	subs	r3, #1
 800f324:	b2da      	uxtb	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	e008      	b.n	800f348 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f80a 	bl	800f35c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1e3      	bne.n	800f316 <ip_reass_tmr+0x12>
    }
  }
}
 800f34e:	bf00      	nop
 800f350:	bf00      	nop
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20006d00 	.word	0x20006d00

0800f35c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b088      	sub	sp, #32
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d105      	bne.n	800f37e <ip_reass_free_complete_datagram+0x22>
 800f372:	4b45      	ldr	r3, [pc, #276]	; (800f488 <ip_reass_free_complete_datagram+0x12c>)
 800f374:	22ab      	movs	r2, #171	; 0xab
 800f376:	4945      	ldr	r1, [pc, #276]	; (800f48c <ip_reass_free_complete_datagram+0x130>)
 800f378:	4845      	ldr	r0, [pc, #276]	; (800f490 <ip_reass_free_complete_datagram+0x134>)
 800f37a:	f000 ff3b 	bl	80101f4 <iprintf>
  if (prev != NULL) {
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00a      	beq.n	800f39a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d005      	beq.n	800f39a <ip_reass_free_complete_datagram+0x3e>
 800f38e:	4b3e      	ldr	r3, [pc, #248]	; (800f488 <ip_reass_free_complete_datagram+0x12c>)
 800f390:	22ad      	movs	r2, #173	; 0xad
 800f392:	4940      	ldr	r1, [pc, #256]	; (800f494 <ip_reass_free_complete_datagram+0x138>)
 800f394:	483e      	ldr	r0, [pc, #248]	; (800f490 <ip_reass_free_complete_datagram+0x134>)
 800f396:	f000 ff2d 	bl	80101f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	889b      	ldrh	r3, [r3, #4]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d12a      	bne.n	800f402 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	6858      	ldr	r0, [r3, #4]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	2214      	movs	r2, #20
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f000 fee5 	bl	8010194 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f3ca:	2101      	movs	r1, #1
 800f3cc:	69b8      	ldr	r0, [r7, #24]
 800f3ce:	f7ff fc47 	bl	800ec60 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f3d2:	69b8      	ldr	r0, [r7, #24]
 800f3d4:	f7f7 faae 	bl	8006934 <pbuf_clen>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f3dc:	8bfa      	ldrh	r2, [r7, #30]
 800f3de:	8a7b      	ldrh	r3, [r7, #18]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e6:	db05      	blt.n	800f3f4 <ip_reass_free_complete_datagram+0x98>
 800f3e8:	4b27      	ldr	r3, [pc, #156]	; (800f488 <ip_reass_free_complete_datagram+0x12c>)
 800f3ea:	22bc      	movs	r2, #188	; 0xbc
 800f3ec:	492a      	ldr	r1, [pc, #168]	; (800f498 <ip_reass_free_complete_datagram+0x13c>)
 800f3ee:	4828      	ldr	r0, [pc, #160]	; (800f490 <ip_reass_free_complete_datagram+0x134>)
 800f3f0:	f000 ff00 	bl	80101f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f3f4:	8bfa      	ldrh	r2, [r7, #30]
 800f3f6:	8a7b      	ldrh	r3, [r7, #18]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f3fc:	69b8      	ldr	r0, [r7, #24]
 800f3fe:	f7f7 fa11 	bl	8006824 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f408:	e01f      	b.n	800f44a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f7f7 fa8a 	bl	8006934 <pbuf_clen>
 800f420:	4603      	mov	r3, r0
 800f422:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f424:	8bfa      	ldrh	r2, [r7, #30]
 800f426:	8a7b      	ldrh	r3, [r7, #18]
 800f428:	4413      	add	r3, r2
 800f42a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f42e:	db05      	blt.n	800f43c <ip_reass_free_complete_datagram+0xe0>
 800f430:	4b15      	ldr	r3, [pc, #84]	; (800f488 <ip_reass_free_complete_datagram+0x12c>)
 800f432:	22cc      	movs	r2, #204	; 0xcc
 800f434:	4918      	ldr	r1, [pc, #96]	; (800f498 <ip_reass_free_complete_datagram+0x13c>)
 800f436:	4816      	ldr	r0, [pc, #88]	; (800f490 <ip_reass_free_complete_datagram+0x134>)
 800f438:	f000 fedc 	bl	80101f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f43c:	8bfa      	ldrh	r2, [r7, #30]
 800f43e:	8a7b      	ldrh	r3, [r7, #18]
 800f440:	4413      	add	r3, r2
 800f442:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7f7 f9ed 	bl	8006824 <pbuf_free>
  while (p != NULL) {
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d1dc      	bne.n	800f40a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f450:	6839      	ldr	r1, [r7, #0]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f8c2 	bl	800f5dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f458:	4b10      	ldr	r3, [pc, #64]	; (800f49c <ip_reass_free_complete_datagram+0x140>)
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	8bfa      	ldrh	r2, [r7, #30]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d905      	bls.n	800f46e <ip_reass_free_complete_datagram+0x112>
 800f462:	4b09      	ldr	r3, [pc, #36]	; (800f488 <ip_reass_free_complete_datagram+0x12c>)
 800f464:	22d2      	movs	r2, #210	; 0xd2
 800f466:	490e      	ldr	r1, [pc, #56]	; (800f4a0 <ip_reass_free_complete_datagram+0x144>)
 800f468:	4809      	ldr	r0, [pc, #36]	; (800f490 <ip_reass_free_complete_datagram+0x134>)
 800f46a:	f000 fec3 	bl	80101f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f46e:	4b0b      	ldr	r3, [pc, #44]	; (800f49c <ip_reass_free_complete_datagram+0x140>)
 800f470:	881a      	ldrh	r2, [r3, #0]
 800f472:	8bfb      	ldrh	r3, [r7, #30]
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	b29a      	uxth	r2, r3
 800f478:	4b08      	ldr	r3, [pc, #32]	; (800f49c <ip_reass_free_complete_datagram+0x140>)
 800f47a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f47c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3720      	adds	r7, #32
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	0801414c 	.word	0x0801414c
 800f48c:	08014188 	.word	0x08014188
 800f490:	08014194 	.word	0x08014194
 800f494:	080141bc 	.word	0x080141bc
 800f498:	080141d0 	.word	0x080141d0
 800f49c:	20006d04 	.word	0x20006d04
 800f4a0:	080141f0 	.word	0x080141f0

0800f4a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b08a      	sub	sp, #40	; 0x28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f4c2:	4b28      	ldr	r3, [pc, #160]	; (800f564 <ip_reass_remove_oldest_datagram+0xc0>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f4c8:	e030      	b.n	800f52c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	695a      	ldr	r2, [r3, #20]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d10c      	bne.n	800f4f0 <ip_reass_remove_oldest_datagram+0x4c>
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	699a      	ldr	r2, [r3, #24]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d106      	bne.n	800f4f0 <ip_reass_remove_oldest_datagram+0x4c>
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	899a      	ldrh	r2, [r3, #12]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	889b      	ldrh	r3, [r3, #4]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d014      	beq.n	800f51a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d104      	bne.n	800f506 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	61bb      	str	r3, [r7, #24]
 800f504:	e009      	b.n	800f51a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	7fda      	ldrb	r2, [r3, #31]
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	7fdb      	ldrb	r3, [r3, #31]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d803      	bhi.n	800f51a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f524:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1cb      	bne.n	800f4ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d008      	beq.n	800f54a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f538:	69b9      	ldr	r1, [r7, #24]
 800f53a:	6a38      	ldr	r0, [r7, #32]
 800f53c:	f7ff ff0e 	bl	800f35c <ip_reass_free_complete_datagram>
 800f540:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f542:	697a      	ldr	r2, [r7, #20]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	4413      	add	r3, r2
 800f548:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f54a:	697a      	ldr	r2, [r7, #20]
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	da02      	bge.n	800f558 <ip_reass_remove_oldest_datagram+0xb4>
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b01      	cmp	r3, #1
 800f556:	dcac      	bgt.n	800f4b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f558:	697b      	ldr	r3, [r7, #20]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3728      	adds	r7, #40	; 0x28
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	20006d00 	.word	0x20006d00

0800f568 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f572:	2004      	movs	r0, #4
 800f574:	f7f6 faf8 	bl	8005b68 <memp_malloc>
 800f578:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d110      	bne.n	800f5a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff ff8e 	bl	800f4a4 <ip_reass_remove_oldest_datagram>
 800f588:	4602      	mov	r2, r0
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	dc03      	bgt.n	800f598 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f590:	2004      	movs	r0, #4
 800f592:	f7f6 fae9 	bl	8005b68 <memp_malloc>
 800f596:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	e016      	b.n	800f5d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f5a2:	2220      	movs	r2, #32
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 fe1c 	bl	80101e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	220f      	movs	r2, #15
 800f5b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f5b2:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <ip_reass_enqueue_new_datagram+0x70>)
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f5ba:	4a07      	ldr	r2, [pc, #28]	; (800f5d8 <ip_reass_enqueue_new_datagram+0x70>)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	2214      	movs	r2, #20
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f000 fde3 	bl	8010194 <memcpy>
  return ipr;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20006d00 	.word	0x20006d00

0800f5dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f5e6:	4b10      	ldr	r3, [pc, #64]	; (800f628 <ip_reass_dequeue_datagram+0x4c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d104      	bne.n	800f5fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a0c      	ldr	r2, [pc, #48]	; (800f628 <ip_reass_dequeue_datagram+0x4c>)
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	e00d      	b.n	800f616 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d106      	bne.n	800f60e <ip_reass_dequeue_datagram+0x32>
 800f600:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <ip_reass_dequeue_datagram+0x50>)
 800f602:	f240 1245 	movw	r2, #325	; 0x145
 800f606:	490a      	ldr	r1, [pc, #40]	; (800f630 <ip_reass_dequeue_datagram+0x54>)
 800f608:	480a      	ldr	r0, [pc, #40]	; (800f634 <ip_reass_dequeue_datagram+0x58>)
 800f60a:	f000 fdf3 	bl	80101f4 <iprintf>
    prev->next = ipr->next;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f616:	6879      	ldr	r1, [r7, #4]
 800f618:	2004      	movs	r0, #4
 800f61a:	f7f6 faf1 	bl	8005c00 <memp_free>
}
 800f61e:	bf00      	nop
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	20006d00 	.word	0x20006d00
 800f62c:	0801414c 	.word	0x0801414c
 800f630:	08014214 	.word	0x08014214
 800f634:	08014194 	.word	0x08014194

0800f638 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b08c      	sub	sp, #48	; 0x30
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f644:	2300      	movs	r3, #0
 800f646:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f648:	2301      	movs	r3, #1
 800f64a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	885b      	ldrh	r3, [r3, #2]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f5 fdc5 	bl	80051e8 <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	f003 030f 	and.w	r3, r3, #15
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f670:	7e7b      	ldrb	r3, [r7, #25]
 800f672:	b29b      	uxth	r3, r3
 800f674:	8b7a      	ldrh	r2, [r7, #26]
 800f676:	429a      	cmp	r2, r3
 800f678:	d202      	bcs.n	800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f67a:	f04f 33ff 	mov.w	r3, #4294967295
 800f67e:	e135      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f680:	7e7b      	ldrb	r3, [r7, #25]
 800f682:	b29b      	uxth	r3, r3
 800f684:	8b7a      	ldrh	r2, [r7, #26]
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	88db      	ldrh	r3, [r3, #6]
 800f68e:	b29b      	uxth	r3, r3
 800f690:	4618      	mov	r0, r3
 800f692:	f7f5 fda9 	bl	80051e8 <lwip_htons>
 800f696:	4603      	mov	r3, r0
 800f698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	00db      	lsls	r3, r3, #3
 800f6a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	701a      	strb	r2, [r3, #0]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	705a      	strb	r2, [r3, #1]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	709a      	strb	r2, [r3, #2]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	8afa      	ldrh	r2, [r7, #22]
 800f6be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f6c0:	8afa      	ldrh	r2, [r7, #22]
 800f6c2:	8b7b      	ldrh	r3, [r7, #26]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	88db      	ldrh	r3, [r3, #6]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	8afa      	ldrh	r2, [r7, #22]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d902      	bls.n	800f6de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6dc:	e106      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f6e4:	e068      	b.n	800f7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	889b      	ldrh	r3, [r3, #4]
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	889b      	ldrh	r3, [r3, #4]
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d235      	bcs.n	800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f700:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f704:	2b00      	cmp	r3, #0
 800f706:	d020      	beq.n	800f74a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70a:	889b      	ldrh	r3, [r3, #4]
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	88db      	ldrh	r3, [r3, #6]
 800f712:	b29b      	uxth	r3, r3
 800f714:	429a      	cmp	r2, r3
 800f716:	d307      	bcc.n	800f728 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71a:	88db      	ldrh	r3, [r3, #6]
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	889b      	ldrh	r3, [r3, #4]
 800f722:	b29b      	uxth	r3, r3
 800f724:	429a      	cmp	r2, r3
 800f726:	d902      	bls.n	800f72e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f728:	f04f 33ff 	mov.w	r3, #4294967295
 800f72c:	e0de      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f730:	68ba      	ldr	r2, [r7, #8]
 800f732:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f736:	88db      	ldrh	r3, [r3, #6]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73c:	889b      	ldrh	r3, [r3, #4]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	429a      	cmp	r2, r3
 800f742:	d03d      	beq.n	800f7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f748:	e03a      	b.n	800f7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	88db      	ldrh	r3, [r3, #6]
 800f74e:	b29a      	uxth	r2, r3
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	889b      	ldrh	r3, [r3, #4]
 800f754:	b29b      	uxth	r3, r3
 800f756:	429a      	cmp	r2, r3
 800f758:	d902      	bls.n	800f760 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295
 800f75e:	e0c5      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	605a      	str	r2, [r3, #4]
      break;
 800f766:	e02b      	b.n	800f7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76a:	889b      	ldrh	r3, [r3, #4]
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	889b      	ldrh	r3, [r3, #4]
 800f772:	b29b      	uxth	r3, r3
 800f774:	429a      	cmp	r2, r3
 800f776:	d102      	bne.n	800f77e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f778:	f04f 33ff 	mov.w	r3, #4294967295
 800f77c:	e0b6      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	889b      	ldrh	r3, [r3, #4]
 800f782:	b29a      	uxth	r2, r3
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	88db      	ldrh	r3, [r3, #6]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d202      	bcs.n	800f794 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f78e:	f04f 33ff 	mov.w	r3, #4294967295
 800f792:	e0ab      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	2b00      	cmp	r3, #0
 800f798:	d009      	beq.n	800f7ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79c:	88db      	ldrh	r3, [r3, #6]
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	889b      	ldrh	r3, [r3, #4]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d001      	beq.n	800f7ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d193      	bne.n	800f6e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f7be:	e000      	b.n	800f7c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f7c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d12d      	bne.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01c      	beq.n	800f808 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	88db      	ldrh	r3, [r3, #6]
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d906      	bls.n	800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f7de:	4b45      	ldr	r3, [pc, #276]	; (800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f7e4:	4944      	ldr	r1, [pc, #272]	; (800f8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f7e6:	4845      	ldr	r0, [pc, #276]	; (800f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7e8:	f000 fd04 	bl	80101f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f4:	88db      	ldrh	r3, [r3, #6]
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	889b      	ldrh	r3, [r3, #4]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d010      	beq.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	623b      	str	r3, [r7, #32]
 800f806:	e00d      	b.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d006      	beq.n	800f81e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f810:	4b38      	ldr	r3, [pc, #224]	; (800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f812:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f816:	493a      	ldr	r1, [pc, #232]	; (800f900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f818:	4838      	ldr	r0, [pc, #224]	; (800f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f81a:	f000 fceb 	bl	80101f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d105      	bne.n	800f836 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	7f9b      	ldrb	r3, [r3, #30]
 800f82e:	f003 0301 	and.w	r3, r3, #1
 800f832:	2b00      	cmp	r3, #0
 800f834:	d059      	beq.n	800f8ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d04f      	beq.n	800f8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d006      	beq.n	800f852 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	889b      	ldrh	r3, [r3, #4]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	623b      	str	r3, [r7, #32]
 800f856:	e041      	b.n	800f8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f862:	e012      	b.n	800f88a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86c:	88db      	ldrh	r3, [r3, #6]
 800f86e:	b29a      	uxth	r2, r3
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	889b      	ldrh	r3, [r3, #4]
 800f874:	b29b      	uxth	r3, r3
 800f876:	429a      	cmp	r2, r3
 800f878:	d002      	beq.n	800f880 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	623b      	str	r3, [r7, #32]
            break;
 800f87e:	e007      	b.n	800f890 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f882:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1e9      	bne.n	800f864 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f890:	6a3b      	ldr	r3, [r7, #32]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d022      	beq.n	800f8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f89e:	4b15      	ldr	r3, [pc, #84]	; (800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f8a0:	f240 12df 	movw	r2, #479	; 0x1df
 800f8a4:	4917      	ldr	r1, [pc, #92]	; (800f904 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f8a6:	4815      	ldr	r0, [pc, #84]	; (800f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f8a8:	f000 fca4 	bl	80101f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d106      	bne.n	800f8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f8b8:	4b0e      	ldr	r3, [pc, #56]	; (800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f8ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f8be:	4911      	ldr	r1, [pc, #68]	; (800f904 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f8c0:	480e      	ldr	r0, [pc, #56]	; (800f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f8c2:	f000 fc97 	bl	80101f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d006      	beq.n	800f8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f8ce:	4b09      	ldr	r3, [pc, #36]	; (800f8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f8d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f8d4:	490c      	ldr	r1, [pc, #48]	; (800f908 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f8d6:	4809      	ldr	r0, [pc, #36]	; (800f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f8d8:	f000 fc8c 	bl	80101f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bf14      	ite	ne
 800f8e2:	2301      	movne	r3, #1
 800f8e4:	2300      	moveq	r3, #0
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	e000      	b.n	800f8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3730      	adds	r7, #48	; 0x30
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	0801414c 	.word	0x0801414c
 800f8f8:	08014230 	.word	0x08014230
 800f8fc:	08014194 	.word	0x08014194
 800f900:	08014250 	.word	0x08014250
 800f904:	08014288 	.word	0x08014288
 800f908:	08014298 	.word	0x08014298

0800f90c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08e      	sub	sp, #56	; 0x38
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	f003 030f 	and.w	r3, r3, #15
 800f922:	b2db      	uxtb	r3, r3
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	b2db      	uxtb	r3, r3
 800f928:	2b14      	cmp	r3, #20
 800f92a:	f040 8171 	bne.w	800fc10 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f930:	88db      	ldrh	r3, [r3, #6]
 800f932:	b29b      	uxth	r3, r3
 800f934:	4618      	mov	r0, r3
 800f936:	f7f5 fc57 	bl	80051e8 <lwip_htons>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f940:	b29b      	uxth	r3, r3
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f5 fc4b 	bl	80051e8 <lwip_htons>
 800f952:	4603      	mov	r3, r0
 800f954:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	f003 030f 	and.w	r3, r3, #15
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f96e:	429a      	cmp	r2, r3
 800f970:	f0c0 8150 	bcc.w	800fc14 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f978:	b29b      	uxth	r3, r3
 800f97a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7f6 ffd7 	bl	8006934 <pbuf_clen>
 800f986:	4603      	mov	r3, r0
 800f988:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f98a:	4b8c      	ldr	r3, [pc, #560]	; (800fbbc <ip4_reass+0x2b0>)
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	461a      	mov	r2, r3
 800f990:	8c3b      	ldrh	r3, [r7, #32]
 800f992:	4413      	add	r3, r2
 800f994:	2b0a      	cmp	r3, #10
 800f996:	dd10      	ble.n	800f9ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f998:	8c3b      	ldrh	r3, [r7, #32]
 800f99a:	4619      	mov	r1, r3
 800f99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99e:	f7ff fd81 	bl	800f4a4 <ip_reass_remove_oldest_datagram>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f000 8137 	beq.w	800fc18 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f9aa:	4b84      	ldr	r3, [pc, #528]	; (800fbbc <ip4_reass+0x2b0>)
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	8c3b      	ldrh	r3, [r7, #32]
 800f9b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f9b4:	2b0a      	cmp	r3, #10
 800f9b6:	f300 812f 	bgt.w	800fc18 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f9ba:	4b81      	ldr	r3, [pc, #516]	; (800fbc0 <ip4_reass+0x2b4>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	633b      	str	r3, [r7, #48]	; 0x30
 800f9c0:	e015      	b.n	800f9ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	695a      	ldr	r2, [r3, #20]
 800f9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d10c      	bne.n	800f9e8 <ip4_reass+0xdc>
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d0:	699a      	ldr	r2, [r3, #24]
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d106      	bne.n	800f9e8 <ip4_reass+0xdc>
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	899a      	ldrh	r2, [r3, #12]
 800f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e0:	889b      	ldrh	r3, [r3, #4]
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d006      	beq.n	800f9f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d1e6      	bne.n	800f9c2 <ip4_reass+0xb6>
 800f9f4:	e000      	b.n	800f9f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f9f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d109      	bne.n	800fa12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f9fe:	8c3b      	ldrh	r3, [r7, #32]
 800fa00:	4619      	mov	r1, r3
 800fa02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa04:	f7ff fdb0 	bl	800f568 <ip_reass_enqueue_new_datagram>
 800fa08:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d11c      	bne.n	800fa4a <ip4_reass+0x13e>
      goto nullreturn;
 800fa10:	e105      	b.n	800fc1e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa14:	88db      	ldrh	r3, [r3, #6]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f5 fbe5 	bl	80051e8 <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d110      	bne.n	800fa4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2a:	89db      	ldrh	r3, [r3, #14]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f5 fbdb 	bl	80051e8 <lwip_htons>
 800fa32:	4603      	mov	r3, r0
 800fa34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	3308      	adds	r3, #8
 800fa40:	2214      	movs	r2, #20
 800fa42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 fba5 	bl	8010194 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	88db      	ldrh	r3, [r3, #6]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	f003 0320 	and.w	r3, r3, #32
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	bf0c      	ite	eq
 800fa58:	2301      	moveq	r3, #1
 800fa5a:	2300      	movne	r3, #0
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00e      	beq.n	800fa84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fa66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa6a:	4413      	add	r3, r2
 800fa6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fa6e:	8b7a      	ldrh	r2, [r7, #26]
 800fa70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f0c0 80a0 	bcc.w	800fbb8 <ip4_reass+0x2ac>
 800fa78:	8b7b      	ldrh	r3, [r7, #26]
 800fa7a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	f200 809a 	bhi.w	800fbb8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	6879      	ldr	r1, [r7, #4]
 800fa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8a:	f7ff fdd5 	bl	800f638 <ip_reass_chain_frag_into_datagram_and_validate>
 800fa8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa96:	f000 809b 	beq.w	800fbd0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fa9a:	4b48      	ldr	r3, [pc, #288]	; (800fbbc <ip4_reass+0x2b0>)
 800fa9c:	881a      	ldrh	r2, [r3, #0]
 800fa9e:	8c3b      	ldrh	r3, [r7, #32]
 800faa0:	4413      	add	r3, r2
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	4b45      	ldr	r3, [pc, #276]	; (800fbbc <ip4_reass+0x2b0>)
 800faa6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00d      	beq.n	800faca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800faae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fab2:	4413      	add	r3, r2
 800fab4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab8:	8a7a      	ldrh	r2, [r7, #18]
 800faba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabe:	7f9b      	ldrb	r3, [r3, #30]
 800fac0:	f043 0301 	orr.w	r3, r3, #1
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	d171      	bne.n	800fbb4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad2:	8b9b      	ldrh	r3, [r3, #28]
 800fad4:	3314      	adds	r3, #20
 800fad6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	3308      	adds	r3, #8
 800faee:	2214      	movs	r2, #20
 800faf0:	4619      	mov	r1, r3
 800faf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faf4:	f000 fb4e 	bl	8010194 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800faf8:	8a3b      	ldrh	r3, [r7, #16]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f5 fb74 	bl	80051e8 <lwip_htons>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	719a      	strb	r2, [r3, #6]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	2200      	movs	r2, #0
 800fb16:	729a      	strb	r2, [r3, #10]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fb22:	e00d      	b.n	800fb40 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fb2a:	2114      	movs	r1, #20
 800fb2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb2e:	f7f6 fdf3 	bl	8006718 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fb32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7f6 ff37 	bl	80069a8 <pbuf_cat>
      r = iprh->next_pbuf;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1ee      	bne.n	800fb24 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fb46:	4b1e      	ldr	r3, [pc, #120]	; (800fbc0 <ip4_reass+0x2b4>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d102      	bne.n	800fb56 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fb50:	2300      	movs	r3, #0
 800fb52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb54:	e010      	b.n	800fb78 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb56:	4b1a      	ldr	r3, [pc, #104]	; (800fbc0 <ip4_reass+0x2b4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb5c:	e007      	b.n	800fb6e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d006      	beq.n	800fb76 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1f4      	bne.n	800fb5e <ip4_reass+0x252>
 800fb74:	e000      	b.n	800fb78 <ip4_reass+0x26c>
          break;
 800fb76:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fb78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb7c:	f7ff fd2e 	bl	800f5dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7f6 fed7 	bl	8006934 <pbuf_clen>
 800fb86:	4603      	mov	r3, r0
 800fb88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fb8a:	4b0c      	ldr	r3, [pc, #48]	; (800fbbc <ip4_reass+0x2b0>)
 800fb8c:	881b      	ldrh	r3, [r3, #0]
 800fb8e:	8c3a      	ldrh	r2, [r7, #32]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d906      	bls.n	800fba2 <ip4_reass+0x296>
 800fb94:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <ip4_reass+0x2b8>)
 800fb96:	f240 229b 	movw	r2, #667	; 0x29b
 800fb9a:	490b      	ldr	r1, [pc, #44]	; (800fbc8 <ip4_reass+0x2bc>)
 800fb9c:	480b      	ldr	r0, [pc, #44]	; (800fbcc <ip4_reass+0x2c0>)
 800fb9e:	f000 fb29 	bl	80101f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fba2:	4b06      	ldr	r3, [pc, #24]	; (800fbbc <ip4_reass+0x2b0>)
 800fba4:	881a      	ldrh	r2, [r3, #0]
 800fba6:	8c3b      	ldrh	r3, [r7, #32]
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	4b03      	ldr	r3, [pc, #12]	; (800fbbc <ip4_reass+0x2b0>)
 800fbae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	e038      	b.n	800fc26 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	e036      	b.n	800fc26 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800fbb8:	bf00      	nop
 800fbba:	e00a      	b.n	800fbd2 <ip4_reass+0x2c6>
 800fbbc:	20006d04 	.word	0x20006d04
 800fbc0:	20006d00 	.word	0x20006d00
 800fbc4:	0801414c 	.word	0x0801414c
 800fbc8:	080142bc 	.word	0x080142bc
 800fbcc:	08014194 	.word	0x08014194
    goto nullreturn_ipr;
 800fbd0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d106      	bne.n	800fbe6 <ip4_reass+0x2da>
 800fbd8:	4b15      	ldr	r3, [pc, #84]	; (800fc30 <ip4_reass+0x324>)
 800fbda:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fbde:	4915      	ldr	r1, [pc, #84]	; (800fc34 <ip4_reass+0x328>)
 800fbe0:	4815      	ldr	r0, [pc, #84]	; (800fc38 <ip4_reass+0x32c>)
 800fbe2:	f000 fb07 	bl	80101f4 <iprintf>
  if (ipr->p == NULL) {
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d116      	bne.n	800fc1c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fbee:	4b13      	ldr	r3, [pc, #76]	; (800fc3c <ip4_reass+0x330>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d006      	beq.n	800fc06 <ip4_reass+0x2fa>
 800fbf8:	4b0d      	ldr	r3, [pc, #52]	; (800fc30 <ip4_reass+0x324>)
 800fbfa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fbfe:	4910      	ldr	r1, [pc, #64]	; (800fc40 <ip4_reass+0x334>)
 800fc00:	480d      	ldr	r0, [pc, #52]	; (800fc38 <ip4_reass+0x32c>)
 800fc02:	f000 faf7 	bl	80101f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fc06:	2100      	movs	r1, #0
 800fc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc0a:	f7ff fce7 	bl	800f5dc <ip_reass_dequeue_datagram>
 800fc0e:	e006      	b.n	800fc1e <ip4_reass+0x312>
    goto nullreturn;
 800fc10:	bf00      	nop
 800fc12:	e004      	b.n	800fc1e <ip4_reass+0x312>
    goto nullreturn;
 800fc14:	bf00      	nop
 800fc16:	e002      	b.n	800fc1e <ip4_reass+0x312>
      goto nullreturn;
 800fc18:	bf00      	nop
 800fc1a:	e000      	b.n	800fc1e <ip4_reass+0x312>
  }

nullreturn:
 800fc1c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7f6 fe00 	bl	8006824 <pbuf_free>
  return NULL;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3738      	adds	r7, #56	; 0x38
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	0801414c 	.word	0x0801414c
 800fc34:	080142d8 	.word	0x080142d8
 800fc38:	08014194 	.word	0x08014194
 800fc3c:	20006d00 	.word	0x20006d00
 800fc40:	080142e4 	.word	0x080142e4

0800fc44 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fc48:	2005      	movs	r0, #5
 800fc4a:	f7f5 ff8d 	bl	8005b68 <memp_malloc>
 800fc4e:	4603      	mov	r3, r0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d106      	bne.n	800fc70 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fc62:	4b07      	ldr	r3, [pc, #28]	; (800fc80 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fc64:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fc68:	4906      	ldr	r1, [pc, #24]	; (800fc84 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fc6a:	4807      	ldr	r0, [pc, #28]	; (800fc88 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fc6c:	f000 fac2 	bl	80101f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fc70:	6879      	ldr	r1, [r7, #4]
 800fc72:	2005      	movs	r0, #5
 800fc74:	f7f5 ffc4 	bl	8005c00 <memp_free>
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	0801414c 	.word	0x0801414c
 800fc84:	08014304 	.word	0x08014304
 800fc88:	08014194 	.word	0x08014194

0800fc8c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d106      	bne.n	800fcac <ipfrag_free_pbuf_custom+0x20>
 800fc9e:	4b11      	ldr	r3, [pc, #68]	; (800fce4 <ipfrag_free_pbuf_custom+0x58>)
 800fca0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fca4:	4910      	ldr	r1, [pc, #64]	; (800fce8 <ipfrag_free_pbuf_custom+0x5c>)
 800fca6:	4811      	ldr	r0, [pc, #68]	; (800fcec <ipfrag_free_pbuf_custom+0x60>)
 800fca8:	f000 faa4 	bl	80101f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d006      	beq.n	800fcc2 <ipfrag_free_pbuf_custom+0x36>
 800fcb4:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <ipfrag_free_pbuf_custom+0x58>)
 800fcb6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fcba:	490d      	ldr	r1, [pc, #52]	; (800fcf0 <ipfrag_free_pbuf_custom+0x64>)
 800fcbc:	480b      	ldr	r0, [pc, #44]	; (800fcec <ipfrag_free_pbuf_custom+0x60>)
 800fcbe:	f000 fa99 	bl	80101f4 <iprintf>
  if (pcr->original != NULL) {
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f6 fda8 	bl	8006824 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff ffbd 	bl	800fc54 <ip_frag_free_pbuf_custom_ref>
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	0801414c 	.word	0x0801414c
 800fce8:	08014310 	.word	0x08014310
 800fcec:	08014194 	.word	0x08014194
 800fcf0:	0801431c 	.word	0x0801431c

0800fcf4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b094      	sub	sp, #80	; 0x50
 800fcf8:	af02      	add	r7, sp, #8
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd0a:	3b14      	subs	r3, #20
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	da00      	bge.n	800fd12 <ip4_frag+0x1e>
 800fd10:	3307      	adds	r3, #7
 800fd12:	10db      	asrs	r3, r3, #3
 800fd14:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fd16:	2314      	movs	r3, #20
 800fd18:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd22:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b14      	cmp	r3, #20
 800fd34:	d002      	beq.n	800fd3c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fd36:	f06f 0305 	mvn.w	r3, #5
 800fd3a:	e110      	b.n	800ff5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	895b      	ldrh	r3, [r3, #10]
 800fd40:	2b13      	cmp	r3, #19
 800fd42:	d809      	bhi.n	800fd58 <ip4_frag+0x64>
 800fd44:	4b88      	ldr	r3, [pc, #544]	; (800ff68 <ip4_frag+0x274>)
 800fd46:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fd4a:	4988      	ldr	r1, [pc, #544]	; (800ff6c <ip4_frag+0x278>)
 800fd4c:	4888      	ldr	r0, [pc, #544]	; (800ff70 <ip4_frag+0x27c>)
 800fd4e:	f000 fa51 	bl	80101f4 <iprintf>
 800fd52:	f06f 0305 	mvn.w	r3, #5
 800fd56:	e102      	b.n	800ff5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	88db      	ldrh	r3, [r3, #6]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f5 fa42 	bl	80051e8 <lwip_htons>
 800fd64:	4603      	mov	r3, r0
 800fd66:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fd68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fd72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd78:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	891b      	ldrh	r3, [r3, #8]
 800fd7e:	3b14      	subs	r3, #20
 800fd80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fd84:	e0e1      	b.n	800ff4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fd86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd90:	4293      	cmp	r3, r2
 800fd92:	bf28      	it	cs
 800fd94:	4613      	movcs	r3, r2
 800fd96:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fd98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd9c:	2114      	movs	r1, #20
 800fd9e:	200e      	movs	r0, #14
 800fda0:	f7f6 fa5c 	bl	800625c <pbuf_alloc>
 800fda4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 80d5 	beq.w	800ff58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	895b      	ldrh	r3, [r3, #10]
 800fdb2:	2b13      	cmp	r3, #19
 800fdb4:	d806      	bhi.n	800fdc4 <ip4_frag+0xd0>
 800fdb6:	4b6c      	ldr	r3, [pc, #432]	; (800ff68 <ip4_frag+0x274>)
 800fdb8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fdbc:	496d      	ldr	r1, [pc, #436]	; (800ff74 <ip4_frag+0x280>)
 800fdbe:	486c      	ldr	r0, [pc, #432]	; (800ff70 <ip4_frag+0x27c>)
 800fdc0:	f000 fa18 	bl	80101f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	2214      	movs	r2, #20
 800fdca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 f9e1 	bl	8010194 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fdd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fdda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fdde:	e064      	b.n	800feaa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	895a      	ldrh	r2, [r3, #10]
 800fde4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	895b      	ldrh	r3, [r3, #10]
 800fdee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d906      	bls.n	800fe02 <ip4_frag+0x10e>
 800fdf4:	4b5c      	ldr	r3, [pc, #368]	; (800ff68 <ip4_frag+0x274>)
 800fdf6:	f240 322d 	movw	r2, #813	; 0x32d
 800fdfa:	495f      	ldr	r1, [pc, #380]	; (800ff78 <ip4_frag+0x284>)
 800fdfc:	485c      	ldr	r0, [pc, #368]	; (800ff70 <ip4_frag+0x27c>)
 800fdfe:	f000 f9f9 	bl	80101f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fe02:	8bfa      	ldrh	r2, [r7, #30]
 800fe04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	bf28      	it	cs
 800fe0c:	4613      	movcs	r3, r2
 800fe0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fe12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d105      	bne.n	800fe26 <ip4_frag+0x132>
        poff = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	60fb      	str	r3, [r7, #12]
        continue;
 800fe24:	e041      	b.n	800feaa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fe26:	f7ff ff0d 	bl	800fc44 <ip_frag_alloc_pbuf_custom_ref>
 800fe2a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d103      	bne.n	800fe3a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fe32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe34:	f7f6 fcf6 	bl	8006824 <pbuf_free>
        goto memerr;
 800fe38:	e08f      	b.n	800ff5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fe3a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fe40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe42:	4413      	add	r3, r2
 800fe44:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fe48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fe4c:	9201      	str	r2, [sp, #4]
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	4603      	mov	r3, r0
 800fe52:	2241      	movs	r2, #65	; 0x41
 800fe54:	2000      	movs	r0, #0
 800fe56:	f7f6 fb2b 	bl	80064b0 <pbuf_alloced_custom>
 800fe5a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d106      	bne.n	800fe70 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fe62:	69b8      	ldr	r0, [r7, #24]
 800fe64:	f7ff fef6 	bl	800fc54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fe68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe6a:	f7f6 fcdb 	bl	8006824 <pbuf_free>
        goto memerr;
 800fe6e:	e074      	b.n	800ff5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f7f6 fd77 	bl	8006964 <pbuf_ref>
      pcr->original = p;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	4a3f      	ldr	r2, [pc, #252]	; (800ff7c <ip4_frag+0x288>)
 800fe80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fe82:	6979      	ldr	r1, [r7, #20]
 800fe84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe86:	f7f6 fd8f 	bl	80069a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fe8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fe8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fe98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d004      	beq.n	800feaa <ip4_frag+0x1b6>
        poff = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800feaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d196      	bne.n	800fde0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800feb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800feb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800feb8:	4413      	add	r3, r2
 800feba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fec0:	f1a3 0213 	sub.w	r2, r3, #19
 800fec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fec8:	429a      	cmp	r2, r3
 800feca:	bfcc      	ite	gt
 800fecc:	2301      	movgt	r3, #1
 800fece:	2300      	movle	r3, #0
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fed4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fedc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <ip4_frag+0x1f6>
 800fee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d003      	beq.n	800fef2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800feea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800feec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fef0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f5 f977 	bl	80051e8 <lwip_htons>
 800fefa:	4603      	mov	r3, r0
 800fefc:	461a      	mov	r2, r3
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ff02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff04:	3314      	adds	r3, #20
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f5 f96d 	bl	80051e8 <lwip_htons>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	461a      	mov	r2, r3
 800ff12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	2200      	movs	r2, #0
 800ff1a:	729a      	strb	r2, [r3, #10]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	695b      	ldr	r3, [r3, #20]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff28:	68b8      	ldr	r0, [r7, #8]
 800ff2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ff2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff2e:	f7f6 fc79 	bl	8006824 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ff32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ff3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ff42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ff44:	4413      	add	r3, r2
 800ff46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ff4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f47f af19 	bne.w	800fd86 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	e002      	b.n	800ff5e <ip4_frag+0x26a>
      goto memerr;
 800ff58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ff5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3748      	adds	r7, #72	; 0x48
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	0801414c 	.word	0x0801414c
 800ff6c:	08014328 	.word	0x08014328
 800ff70:	08014194 	.word	0x08014194
 800ff74:	08014344 	.word	0x08014344
 800ff78:	08014364 	.word	0x08014364
 800ff7c:	0800fc8d 	.word	0x0800fc8d

0800ff80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ff8a:	230e      	movs	r3, #14
 800ff8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	895b      	ldrh	r3, [r3, #10]
 800ff92:	2b0e      	cmp	r3, #14
 800ff94:	d96e      	bls.n	8010074 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	7bdb      	ldrb	r3, [r3, #15]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	7b1a      	ldrb	r2, [r3, #12]
 800ffb6:	7b5b      	ldrb	r3, [r3, #13]
 800ffb8:	021b      	lsls	r3, r3, #8
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	f003 0301 	and.w	r3, r3, #1
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d023      	beq.n	8010012 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d10f      	bne.n	800fff2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	785b      	ldrb	r3, [r3, #1]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d11b      	bne.n	8010012 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ffde:	2b5e      	cmp	r3, #94	; 0x5e
 800ffe0:	d117      	bne.n	8010012 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7b5b      	ldrb	r3, [r3, #13]
 800ffe6:	f043 0310 	orr.w	r3, r3, #16
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	735a      	strb	r2, [r3, #13]
 800fff0:	e00f      	b.n	8010012 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2206      	movs	r2, #6
 800fff6:	4928      	ldr	r1, [pc, #160]	; (8010098 <ethernet_input+0x118>)
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 f8bb 	bl	8010174 <memcmp>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d106      	bne.n	8010012 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	7b5b      	ldrb	r3, [r3, #13]
 8010008:	f043 0308 	orr.w	r3, r3, #8
 801000c:	b2da      	uxtb	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010012:	89fb      	ldrh	r3, [r7, #14]
 8010014:	2b08      	cmp	r3, #8
 8010016:	d003      	beq.n	8010020 <ethernet_input+0xa0>
 8010018:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801001c:	d014      	beq.n	8010048 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801001e:	e032      	b.n	8010086 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010026:	f003 0308 	and.w	r3, r3, #8
 801002a:	2b00      	cmp	r3, #0
 801002c:	d024      	beq.n	8010078 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801002e:	8afb      	ldrh	r3, [r7, #22]
 8010030:	4619      	mov	r1, r3
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f7f6 fb70 	bl	8006718 <pbuf_remove_header>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d11e      	bne.n	801007c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fe ff21 	bl	800ee88 <ip4_input>
      break;
 8010046:	e013      	b.n	8010070 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801004e:	f003 0308 	and.w	r3, r3, #8
 8010052:	2b00      	cmp	r3, #0
 8010054:	d014      	beq.n	8010080 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010056:	8afb      	ldrh	r3, [r7, #22]
 8010058:	4619      	mov	r1, r3
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7f6 fb5c 	bl	8006718 <pbuf_remove_header>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10e      	bne.n	8010084 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7fe f8c1 	bl	800e1f0 <etharp_input>
      break;
 801006e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	e00c      	b.n	801008e <ethernet_input+0x10e>
    goto free_and_return;
 8010074:	bf00      	nop
 8010076:	e006      	b.n	8010086 <ethernet_input+0x106>
        goto free_and_return;
 8010078:	bf00      	nop
 801007a:	e004      	b.n	8010086 <ethernet_input+0x106>
        goto free_and_return;
 801007c:	bf00      	nop
 801007e:	e002      	b.n	8010086 <ethernet_input+0x106>
        goto free_and_return;
 8010080:	bf00      	nop
 8010082:	e000      	b.n	8010086 <ethernet_input+0x106>
        goto free_and_return;
 8010084:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7f6 fbcc 	bl	8006824 <pbuf_free>
  return ERR_OK;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	08014978 	.word	0x08014978

0801009c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
 80100a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80100aa:	8c3b      	ldrh	r3, [r7, #32]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7f5 f89b 	bl	80051e8 <lwip_htons>
 80100b2:	4603      	mov	r3, r0
 80100b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80100b6:	210e      	movs	r1, #14
 80100b8:	68b8      	ldr	r0, [r7, #8]
 80100ba:	f7f6 fb1d 	bl	80066f8 <pbuf_add_header>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d125      	bne.n	8010110 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	8afa      	ldrh	r2, [r7, #22]
 80100ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	2206      	movs	r2, #6
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f000 f85c 	bl	8010194 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	3306      	adds	r3, #6
 80100e0:	2206      	movs	r2, #6
 80100e2:	6879      	ldr	r1, [r7, #4]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f000 f855 	bl	8010194 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100f0:	2b06      	cmp	r3, #6
 80100f2:	d006      	beq.n	8010102 <ethernet_output+0x66>
 80100f4:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <ethernet_output+0x84>)
 80100f6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80100fa:	490a      	ldr	r1, [pc, #40]	; (8010124 <ethernet_output+0x88>)
 80100fc:	480a      	ldr	r0, [pc, #40]	; (8010128 <ethernet_output+0x8c>)
 80100fe:	f000 f879 	bl	80101f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	4798      	blx	r3
 801010c:	4603      	mov	r3, r0
 801010e:	e002      	b.n	8010116 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010110:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010112:	f06f 0301 	mvn.w	r3, #1
}
 8010116:	4618      	mov	r0, r3
 8010118:	3718      	adds	r7, #24
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	08014374 	.word	0x08014374
 8010124:	080143ac 	.word	0x080143ac
 8010128:	080143e0 	.word	0x080143e0

0801012c <__libc_init_array>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	4d0d      	ldr	r5, [pc, #52]	; (8010164 <__libc_init_array+0x38>)
 8010130:	4c0d      	ldr	r4, [pc, #52]	; (8010168 <__libc_init_array+0x3c>)
 8010132:	1b64      	subs	r4, r4, r5
 8010134:	10a4      	asrs	r4, r4, #2
 8010136:	2600      	movs	r6, #0
 8010138:	42a6      	cmp	r6, r4
 801013a:	d109      	bne.n	8010150 <__libc_init_array+0x24>
 801013c:	4d0b      	ldr	r5, [pc, #44]	; (801016c <__libc_init_array+0x40>)
 801013e:	4c0c      	ldr	r4, [pc, #48]	; (8010170 <__libc_init_array+0x44>)
 8010140:	f001 fa7e 	bl	8011640 <_init>
 8010144:	1b64      	subs	r4, r4, r5
 8010146:	10a4      	asrs	r4, r4, #2
 8010148:	2600      	movs	r6, #0
 801014a:	42a6      	cmp	r6, r4
 801014c:	d105      	bne.n	801015a <__libc_init_array+0x2e>
 801014e:	bd70      	pop	{r4, r5, r6, pc}
 8010150:	f855 3b04 	ldr.w	r3, [r5], #4
 8010154:	4798      	blx	r3
 8010156:	3601      	adds	r6, #1
 8010158:	e7ee      	b.n	8010138 <__libc_init_array+0xc>
 801015a:	f855 3b04 	ldr.w	r3, [r5], #4
 801015e:	4798      	blx	r3
 8010160:	3601      	adds	r6, #1
 8010162:	e7f2      	b.n	801014a <__libc_init_array+0x1e>
 8010164:	08014ad8 	.word	0x08014ad8
 8010168:	08014ad8 	.word	0x08014ad8
 801016c:	08014ad8 	.word	0x08014ad8
 8010170:	08014adc 	.word	0x08014adc

08010174 <memcmp>:
 8010174:	b510      	push	{r4, lr}
 8010176:	3901      	subs	r1, #1
 8010178:	4402      	add	r2, r0
 801017a:	4290      	cmp	r0, r2
 801017c:	d101      	bne.n	8010182 <memcmp+0xe>
 801017e:	2000      	movs	r0, #0
 8010180:	e005      	b.n	801018e <memcmp+0x1a>
 8010182:	7803      	ldrb	r3, [r0, #0]
 8010184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010188:	42a3      	cmp	r3, r4
 801018a:	d001      	beq.n	8010190 <memcmp+0x1c>
 801018c:	1b18      	subs	r0, r3, r4
 801018e:	bd10      	pop	{r4, pc}
 8010190:	3001      	adds	r0, #1
 8010192:	e7f2      	b.n	801017a <memcmp+0x6>

08010194 <memcpy>:
 8010194:	440a      	add	r2, r1
 8010196:	4291      	cmp	r1, r2
 8010198:	f100 33ff 	add.w	r3, r0, #4294967295
 801019c:	d100      	bne.n	80101a0 <memcpy+0xc>
 801019e:	4770      	bx	lr
 80101a0:	b510      	push	{r4, lr}
 80101a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101aa:	4291      	cmp	r1, r2
 80101ac:	d1f9      	bne.n	80101a2 <memcpy+0xe>
 80101ae:	bd10      	pop	{r4, pc}

080101b0 <memmove>:
 80101b0:	4288      	cmp	r0, r1
 80101b2:	b510      	push	{r4, lr}
 80101b4:	eb01 0402 	add.w	r4, r1, r2
 80101b8:	d902      	bls.n	80101c0 <memmove+0x10>
 80101ba:	4284      	cmp	r4, r0
 80101bc:	4623      	mov	r3, r4
 80101be:	d807      	bhi.n	80101d0 <memmove+0x20>
 80101c0:	1e43      	subs	r3, r0, #1
 80101c2:	42a1      	cmp	r1, r4
 80101c4:	d008      	beq.n	80101d8 <memmove+0x28>
 80101c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101ce:	e7f8      	b.n	80101c2 <memmove+0x12>
 80101d0:	4402      	add	r2, r0
 80101d2:	4601      	mov	r1, r0
 80101d4:	428a      	cmp	r2, r1
 80101d6:	d100      	bne.n	80101da <memmove+0x2a>
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101e2:	e7f7      	b.n	80101d4 <memmove+0x24>

080101e4 <memset>:
 80101e4:	4402      	add	r2, r0
 80101e6:	4603      	mov	r3, r0
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d100      	bne.n	80101ee <memset+0xa>
 80101ec:	4770      	bx	lr
 80101ee:	f803 1b01 	strb.w	r1, [r3], #1
 80101f2:	e7f9      	b.n	80101e8 <memset+0x4>

080101f4 <iprintf>:
 80101f4:	b40f      	push	{r0, r1, r2, r3}
 80101f6:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <iprintf+0x2c>)
 80101f8:	b513      	push	{r0, r1, r4, lr}
 80101fa:	681c      	ldr	r4, [r3, #0]
 80101fc:	b124      	cbz	r4, 8010208 <iprintf+0x14>
 80101fe:	69a3      	ldr	r3, [r4, #24]
 8010200:	b913      	cbnz	r3, 8010208 <iprintf+0x14>
 8010202:	4620      	mov	r0, r4
 8010204:	f000 f904 	bl	8010410 <__sinit>
 8010208:	ab05      	add	r3, sp, #20
 801020a:	9a04      	ldr	r2, [sp, #16]
 801020c:	68a1      	ldr	r1, [r4, #8]
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	4620      	mov	r0, r4
 8010212:	f000 fc1d 	bl	8010a50 <_vfiprintf_r>
 8010216:	b002      	add	sp, #8
 8010218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801021c:	b004      	add	sp, #16
 801021e:	4770      	bx	lr
 8010220:	2000001c 	.word	0x2000001c

08010224 <rand>:
 8010224:	4b16      	ldr	r3, [pc, #88]	; (8010280 <rand+0x5c>)
 8010226:	b510      	push	{r4, lr}
 8010228:	681c      	ldr	r4, [r3, #0]
 801022a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801022c:	b9b3      	cbnz	r3, 801025c <rand+0x38>
 801022e:	2018      	movs	r0, #24
 8010230:	f000 f9a0 	bl	8010574 <malloc>
 8010234:	63a0      	str	r0, [r4, #56]	; 0x38
 8010236:	b928      	cbnz	r0, 8010244 <rand+0x20>
 8010238:	4602      	mov	r2, r0
 801023a:	4b12      	ldr	r3, [pc, #72]	; (8010284 <rand+0x60>)
 801023c:	4812      	ldr	r0, [pc, #72]	; (8010288 <rand+0x64>)
 801023e:	214e      	movs	r1, #78	; 0x4e
 8010240:	f000 f870 	bl	8010324 <__assert_func>
 8010244:	4a11      	ldr	r2, [pc, #68]	; (801028c <rand+0x68>)
 8010246:	4b12      	ldr	r3, [pc, #72]	; (8010290 <rand+0x6c>)
 8010248:	e9c0 2300 	strd	r2, r3, [r0]
 801024c:	4b11      	ldr	r3, [pc, #68]	; (8010294 <rand+0x70>)
 801024e:	6083      	str	r3, [r0, #8]
 8010250:	230b      	movs	r3, #11
 8010252:	8183      	strh	r3, [r0, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	2300      	movs	r3, #0
 8010258:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801025c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801025e:	4a0e      	ldr	r2, [pc, #56]	; (8010298 <rand+0x74>)
 8010260:	6920      	ldr	r0, [r4, #16]
 8010262:	6963      	ldr	r3, [r4, #20]
 8010264:	490d      	ldr	r1, [pc, #52]	; (801029c <rand+0x78>)
 8010266:	4342      	muls	r2, r0
 8010268:	fb01 2203 	mla	r2, r1, r3, r2
 801026c:	fba0 0101 	umull	r0, r1, r0, r1
 8010270:	1c43      	adds	r3, r0, #1
 8010272:	eb42 0001 	adc.w	r0, r2, r1
 8010276:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801027a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801027e:	bd10      	pop	{r4, pc}
 8010280:	2000001c 	.word	0x2000001c
 8010284:	0801498c 	.word	0x0801498c
 8010288:	080149a3 	.word	0x080149a3
 801028c:	abcd330e 	.word	0xabcd330e
 8010290:	e66d1234 	.word	0xe66d1234
 8010294:	0005deec 	.word	0x0005deec
 8010298:	5851f42d 	.word	0x5851f42d
 801029c:	4c957f2d 	.word	0x4c957f2d

080102a0 <siprintf>:
 80102a0:	b40e      	push	{r1, r2, r3}
 80102a2:	b500      	push	{lr}
 80102a4:	b09c      	sub	sp, #112	; 0x70
 80102a6:	ab1d      	add	r3, sp, #116	; 0x74
 80102a8:	9002      	str	r0, [sp, #8]
 80102aa:	9006      	str	r0, [sp, #24]
 80102ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80102b0:	4809      	ldr	r0, [pc, #36]	; (80102d8 <siprintf+0x38>)
 80102b2:	9107      	str	r1, [sp, #28]
 80102b4:	9104      	str	r1, [sp, #16]
 80102b6:	4909      	ldr	r1, [pc, #36]	; (80102dc <siprintf+0x3c>)
 80102b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80102bc:	9105      	str	r1, [sp, #20]
 80102be:	6800      	ldr	r0, [r0, #0]
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	a902      	add	r1, sp, #8
 80102c4:	f000 fa9a 	bl	80107fc <_svfiprintf_r>
 80102c8:	9b02      	ldr	r3, [sp, #8]
 80102ca:	2200      	movs	r2, #0
 80102cc:	701a      	strb	r2, [r3, #0]
 80102ce:	b01c      	add	sp, #112	; 0x70
 80102d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102d4:	b003      	add	sp, #12
 80102d6:	4770      	bx	lr
 80102d8:	2000001c 	.word	0x2000001c
 80102dc:	ffff0208 	.word	0xffff0208

080102e0 <strchr>:
 80102e0:	b2c9      	uxtb	r1, r1
 80102e2:	4603      	mov	r3, r0
 80102e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e8:	b11a      	cbz	r2, 80102f2 <strchr+0x12>
 80102ea:	428a      	cmp	r2, r1
 80102ec:	d1f9      	bne.n	80102e2 <strchr+0x2>
 80102ee:	4618      	mov	r0, r3
 80102f0:	4770      	bx	lr
 80102f2:	2900      	cmp	r1, #0
 80102f4:	bf18      	it	ne
 80102f6:	2300      	movne	r3, #0
 80102f8:	e7f9      	b.n	80102ee <strchr+0xe>

080102fa <strncmp>:
 80102fa:	b510      	push	{r4, lr}
 80102fc:	b17a      	cbz	r2, 801031e <strncmp+0x24>
 80102fe:	4603      	mov	r3, r0
 8010300:	3901      	subs	r1, #1
 8010302:	1884      	adds	r4, r0, r2
 8010304:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010308:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801030c:	4290      	cmp	r0, r2
 801030e:	d101      	bne.n	8010314 <strncmp+0x1a>
 8010310:	42a3      	cmp	r3, r4
 8010312:	d101      	bne.n	8010318 <strncmp+0x1e>
 8010314:	1a80      	subs	r0, r0, r2
 8010316:	bd10      	pop	{r4, pc}
 8010318:	2800      	cmp	r0, #0
 801031a:	d1f3      	bne.n	8010304 <strncmp+0xa>
 801031c:	e7fa      	b.n	8010314 <strncmp+0x1a>
 801031e:	4610      	mov	r0, r2
 8010320:	e7f9      	b.n	8010316 <strncmp+0x1c>
	...

08010324 <__assert_func>:
 8010324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010326:	4614      	mov	r4, r2
 8010328:	461a      	mov	r2, r3
 801032a:	4b09      	ldr	r3, [pc, #36]	; (8010350 <__assert_func+0x2c>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4605      	mov	r5, r0
 8010330:	68d8      	ldr	r0, [r3, #12]
 8010332:	b14c      	cbz	r4, 8010348 <__assert_func+0x24>
 8010334:	4b07      	ldr	r3, [pc, #28]	; (8010354 <__assert_func+0x30>)
 8010336:	9100      	str	r1, [sp, #0]
 8010338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801033c:	4906      	ldr	r1, [pc, #24]	; (8010358 <__assert_func+0x34>)
 801033e:	462b      	mov	r3, r5
 8010340:	f000 f8e4 	bl	801050c <fiprintf>
 8010344:	f000 ff6e 	bl	8011224 <abort>
 8010348:	4b04      	ldr	r3, [pc, #16]	; (801035c <__assert_func+0x38>)
 801034a:	461c      	mov	r4, r3
 801034c:	e7f3      	b.n	8010336 <__assert_func+0x12>
 801034e:	bf00      	nop
 8010350:	2000001c 	.word	0x2000001c
 8010354:	080149fe 	.word	0x080149fe
 8010358:	08014a0b 	.word	0x08014a0b
 801035c:	08014a39 	.word	0x08014a39

08010360 <std>:
 8010360:	2300      	movs	r3, #0
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	e9c0 3300 	strd	r3, r3, [r0]
 801036a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801036e:	6083      	str	r3, [r0, #8]
 8010370:	8181      	strh	r1, [r0, #12]
 8010372:	6643      	str	r3, [r0, #100]	; 0x64
 8010374:	81c2      	strh	r2, [r0, #14]
 8010376:	6183      	str	r3, [r0, #24]
 8010378:	4619      	mov	r1, r3
 801037a:	2208      	movs	r2, #8
 801037c:	305c      	adds	r0, #92	; 0x5c
 801037e:	f7ff ff31 	bl	80101e4 <memset>
 8010382:	4b05      	ldr	r3, [pc, #20]	; (8010398 <std+0x38>)
 8010384:	6263      	str	r3, [r4, #36]	; 0x24
 8010386:	4b05      	ldr	r3, [pc, #20]	; (801039c <std+0x3c>)
 8010388:	62a3      	str	r3, [r4, #40]	; 0x28
 801038a:	4b05      	ldr	r3, [pc, #20]	; (80103a0 <std+0x40>)
 801038c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801038e:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <std+0x44>)
 8010390:	6224      	str	r4, [r4, #32]
 8010392:	6323      	str	r3, [r4, #48]	; 0x30
 8010394:	bd10      	pop	{r4, pc}
 8010396:	bf00      	nop
 8010398:	08010ff9 	.word	0x08010ff9
 801039c:	0801101b 	.word	0x0801101b
 80103a0:	08011053 	.word	0x08011053
 80103a4:	08011077 	.word	0x08011077

080103a8 <_cleanup_r>:
 80103a8:	4901      	ldr	r1, [pc, #4]	; (80103b0 <_cleanup_r+0x8>)
 80103aa:	f000 b8c1 	b.w	8010530 <_fwalk_reent>
 80103ae:	bf00      	nop
 80103b0:	08011361 	.word	0x08011361

080103b4 <__sfmoreglue>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	2268      	movs	r2, #104	; 0x68
 80103b8:	1e4d      	subs	r5, r1, #1
 80103ba:	4355      	muls	r5, r2
 80103bc:	460e      	mov	r6, r1
 80103be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103c2:	f000 f94b 	bl	801065c <_malloc_r>
 80103c6:	4604      	mov	r4, r0
 80103c8:	b140      	cbz	r0, 80103dc <__sfmoreglue+0x28>
 80103ca:	2100      	movs	r1, #0
 80103cc:	e9c0 1600 	strd	r1, r6, [r0]
 80103d0:	300c      	adds	r0, #12
 80103d2:	60a0      	str	r0, [r4, #8]
 80103d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103d8:	f7ff ff04 	bl	80101e4 <memset>
 80103dc:	4620      	mov	r0, r4
 80103de:	bd70      	pop	{r4, r5, r6, pc}

080103e0 <__sfp_lock_acquire>:
 80103e0:	4801      	ldr	r0, [pc, #4]	; (80103e8 <__sfp_lock_acquire+0x8>)
 80103e2:	f000 b8c5 	b.w	8010570 <__retarget_lock_acquire_recursive>
 80103e6:	bf00      	nop
 80103e8:	20006d0d 	.word	0x20006d0d

080103ec <__sfp_lock_release>:
 80103ec:	4801      	ldr	r0, [pc, #4]	; (80103f4 <__sfp_lock_release+0x8>)
 80103ee:	f000 b8c0 	b.w	8010572 <__retarget_lock_release_recursive>
 80103f2:	bf00      	nop
 80103f4:	20006d0d 	.word	0x20006d0d

080103f8 <__sinit_lock_acquire>:
 80103f8:	4801      	ldr	r0, [pc, #4]	; (8010400 <__sinit_lock_acquire+0x8>)
 80103fa:	f000 b8b9 	b.w	8010570 <__retarget_lock_acquire_recursive>
 80103fe:	bf00      	nop
 8010400:	20006d0e 	.word	0x20006d0e

08010404 <__sinit_lock_release>:
 8010404:	4801      	ldr	r0, [pc, #4]	; (801040c <__sinit_lock_release+0x8>)
 8010406:	f000 b8b4 	b.w	8010572 <__retarget_lock_release_recursive>
 801040a:	bf00      	nop
 801040c:	20006d0e 	.word	0x20006d0e

08010410 <__sinit>:
 8010410:	b510      	push	{r4, lr}
 8010412:	4604      	mov	r4, r0
 8010414:	f7ff fff0 	bl	80103f8 <__sinit_lock_acquire>
 8010418:	69a3      	ldr	r3, [r4, #24]
 801041a:	b11b      	cbz	r3, 8010424 <__sinit+0x14>
 801041c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010420:	f7ff bff0 	b.w	8010404 <__sinit_lock_release>
 8010424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010428:	6523      	str	r3, [r4, #80]	; 0x50
 801042a:	4b13      	ldr	r3, [pc, #76]	; (8010478 <__sinit+0x68>)
 801042c:	4a13      	ldr	r2, [pc, #76]	; (801047c <__sinit+0x6c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	62a2      	str	r2, [r4, #40]	; 0x28
 8010432:	42a3      	cmp	r3, r4
 8010434:	bf04      	itt	eq
 8010436:	2301      	moveq	r3, #1
 8010438:	61a3      	streq	r3, [r4, #24]
 801043a:	4620      	mov	r0, r4
 801043c:	f000 f820 	bl	8010480 <__sfp>
 8010440:	6060      	str	r0, [r4, #4]
 8010442:	4620      	mov	r0, r4
 8010444:	f000 f81c 	bl	8010480 <__sfp>
 8010448:	60a0      	str	r0, [r4, #8]
 801044a:	4620      	mov	r0, r4
 801044c:	f000 f818 	bl	8010480 <__sfp>
 8010450:	2200      	movs	r2, #0
 8010452:	60e0      	str	r0, [r4, #12]
 8010454:	2104      	movs	r1, #4
 8010456:	6860      	ldr	r0, [r4, #4]
 8010458:	f7ff ff82 	bl	8010360 <std>
 801045c:	68a0      	ldr	r0, [r4, #8]
 801045e:	2201      	movs	r2, #1
 8010460:	2109      	movs	r1, #9
 8010462:	f7ff ff7d 	bl	8010360 <std>
 8010466:	68e0      	ldr	r0, [r4, #12]
 8010468:	2202      	movs	r2, #2
 801046a:	2112      	movs	r1, #18
 801046c:	f7ff ff78 	bl	8010360 <std>
 8010470:	2301      	movs	r3, #1
 8010472:	61a3      	str	r3, [r4, #24]
 8010474:	e7d2      	b.n	801041c <__sinit+0xc>
 8010476:	bf00      	nop
 8010478:	08014988 	.word	0x08014988
 801047c:	080103a9 	.word	0x080103a9

08010480 <__sfp>:
 8010480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010482:	4607      	mov	r7, r0
 8010484:	f7ff ffac 	bl	80103e0 <__sfp_lock_acquire>
 8010488:	4b1e      	ldr	r3, [pc, #120]	; (8010504 <__sfp+0x84>)
 801048a:	681e      	ldr	r6, [r3, #0]
 801048c:	69b3      	ldr	r3, [r6, #24]
 801048e:	b913      	cbnz	r3, 8010496 <__sfp+0x16>
 8010490:	4630      	mov	r0, r6
 8010492:	f7ff ffbd 	bl	8010410 <__sinit>
 8010496:	3648      	adds	r6, #72	; 0x48
 8010498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801049c:	3b01      	subs	r3, #1
 801049e:	d503      	bpl.n	80104a8 <__sfp+0x28>
 80104a0:	6833      	ldr	r3, [r6, #0]
 80104a2:	b30b      	cbz	r3, 80104e8 <__sfp+0x68>
 80104a4:	6836      	ldr	r6, [r6, #0]
 80104a6:	e7f7      	b.n	8010498 <__sfp+0x18>
 80104a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104ac:	b9d5      	cbnz	r5, 80104e4 <__sfp+0x64>
 80104ae:	4b16      	ldr	r3, [pc, #88]	; (8010508 <__sfp+0x88>)
 80104b0:	60e3      	str	r3, [r4, #12]
 80104b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104b6:	6665      	str	r5, [r4, #100]	; 0x64
 80104b8:	f000 f859 	bl	801056e <__retarget_lock_init_recursive>
 80104bc:	f7ff ff96 	bl	80103ec <__sfp_lock_release>
 80104c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80104c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104c8:	6025      	str	r5, [r4, #0]
 80104ca:	61a5      	str	r5, [r4, #24]
 80104cc:	2208      	movs	r2, #8
 80104ce:	4629      	mov	r1, r5
 80104d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104d4:	f7ff fe86 	bl	80101e4 <memset>
 80104d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104e0:	4620      	mov	r0, r4
 80104e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e4:	3468      	adds	r4, #104	; 0x68
 80104e6:	e7d9      	b.n	801049c <__sfp+0x1c>
 80104e8:	2104      	movs	r1, #4
 80104ea:	4638      	mov	r0, r7
 80104ec:	f7ff ff62 	bl	80103b4 <__sfmoreglue>
 80104f0:	4604      	mov	r4, r0
 80104f2:	6030      	str	r0, [r6, #0]
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d1d5      	bne.n	80104a4 <__sfp+0x24>
 80104f8:	f7ff ff78 	bl	80103ec <__sfp_lock_release>
 80104fc:	230c      	movs	r3, #12
 80104fe:	603b      	str	r3, [r7, #0]
 8010500:	e7ee      	b.n	80104e0 <__sfp+0x60>
 8010502:	bf00      	nop
 8010504:	08014988 	.word	0x08014988
 8010508:	ffff0001 	.word	0xffff0001

0801050c <fiprintf>:
 801050c:	b40e      	push	{r1, r2, r3}
 801050e:	b503      	push	{r0, r1, lr}
 8010510:	4601      	mov	r1, r0
 8010512:	ab03      	add	r3, sp, #12
 8010514:	4805      	ldr	r0, [pc, #20]	; (801052c <fiprintf+0x20>)
 8010516:	f853 2b04 	ldr.w	r2, [r3], #4
 801051a:	6800      	ldr	r0, [r0, #0]
 801051c:	9301      	str	r3, [sp, #4]
 801051e:	f000 fa97 	bl	8010a50 <_vfiprintf_r>
 8010522:	b002      	add	sp, #8
 8010524:	f85d eb04 	ldr.w	lr, [sp], #4
 8010528:	b003      	add	sp, #12
 801052a:	4770      	bx	lr
 801052c:	2000001c 	.word	0x2000001c

08010530 <_fwalk_reent>:
 8010530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010534:	4606      	mov	r6, r0
 8010536:	4688      	mov	r8, r1
 8010538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801053c:	2700      	movs	r7, #0
 801053e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010542:	f1b9 0901 	subs.w	r9, r9, #1
 8010546:	d505      	bpl.n	8010554 <_fwalk_reent+0x24>
 8010548:	6824      	ldr	r4, [r4, #0]
 801054a:	2c00      	cmp	r4, #0
 801054c:	d1f7      	bne.n	801053e <_fwalk_reent+0xe>
 801054e:	4638      	mov	r0, r7
 8010550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010554:	89ab      	ldrh	r3, [r5, #12]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d907      	bls.n	801056a <_fwalk_reent+0x3a>
 801055a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801055e:	3301      	adds	r3, #1
 8010560:	d003      	beq.n	801056a <_fwalk_reent+0x3a>
 8010562:	4629      	mov	r1, r5
 8010564:	4630      	mov	r0, r6
 8010566:	47c0      	blx	r8
 8010568:	4307      	orrs	r7, r0
 801056a:	3568      	adds	r5, #104	; 0x68
 801056c:	e7e9      	b.n	8010542 <_fwalk_reent+0x12>

0801056e <__retarget_lock_init_recursive>:
 801056e:	4770      	bx	lr

08010570 <__retarget_lock_acquire_recursive>:
 8010570:	4770      	bx	lr

08010572 <__retarget_lock_release_recursive>:
 8010572:	4770      	bx	lr

08010574 <malloc>:
 8010574:	4b02      	ldr	r3, [pc, #8]	; (8010580 <malloc+0xc>)
 8010576:	4601      	mov	r1, r0
 8010578:	6818      	ldr	r0, [r3, #0]
 801057a:	f000 b86f 	b.w	801065c <_malloc_r>
 801057e:	bf00      	nop
 8010580:	2000001c 	.word	0x2000001c

08010584 <_free_r>:
 8010584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010586:	2900      	cmp	r1, #0
 8010588:	d044      	beq.n	8010614 <_free_r+0x90>
 801058a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801058e:	9001      	str	r0, [sp, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	f1a1 0404 	sub.w	r4, r1, #4
 8010596:	bfb8      	it	lt
 8010598:	18e4      	addlt	r4, r4, r3
 801059a:	f000 ff95 	bl	80114c8 <__malloc_lock>
 801059e:	4a1e      	ldr	r2, [pc, #120]	; (8010618 <_free_r+0x94>)
 80105a0:	9801      	ldr	r0, [sp, #4]
 80105a2:	6813      	ldr	r3, [r2, #0]
 80105a4:	b933      	cbnz	r3, 80105b4 <_free_r+0x30>
 80105a6:	6063      	str	r3, [r4, #4]
 80105a8:	6014      	str	r4, [r2, #0]
 80105aa:	b003      	add	sp, #12
 80105ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105b0:	f000 bf90 	b.w	80114d4 <__malloc_unlock>
 80105b4:	42a3      	cmp	r3, r4
 80105b6:	d908      	bls.n	80105ca <_free_r+0x46>
 80105b8:	6825      	ldr	r5, [r4, #0]
 80105ba:	1961      	adds	r1, r4, r5
 80105bc:	428b      	cmp	r3, r1
 80105be:	bf01      	itttt	eq
 80105c0:	6819      	ldreq	r1, [r3, #0]
 80105c2:	685b      	ldreq	r3, [r3, #4]
 80105c4:	1949      	addeq	r1, r1, r5
 80105c6:	6021      	streq	r1, [r4, #0]
 80105c8:	e7ed      	b.n	80105a6 <_free_r+0x22>
 80105ca:	461a      	mov	r2, r3
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	b10b      	cbz	r3, 80105d4 <_free_r+0x50>
 80105d0:	42a3      	cmp	r3, r4
 80105d2:	d9fa      	bls.n	80105ca <_free_r+0x46>
 80105d4:	6811      	ldr	r1, [r2, #0]
 80105d6:	1855      	adds	r5, r2, r1
 80105d8:	42a5      	cmp	r5, r4
 80105da:	d10b      	bne.n	80105f4 <_free_r+0x70>
 80105dc:	6824      	ldr	r4, [r4, #0]
 80105de:	4421      	add	r1, r4
 80105e0:	1854      	adds	r4, r2, r1
 80105e2:	42a3      	cmp	r3, r4
 80105e4:	6011      	str	r1, [r2, #0]
 80105e6:	d1e0      	bne.n	80105aa <_free_r+0x26>
 80105e8:	681c      	ldr	r4, [r3, #0]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	6053      	str	r3, [r2, #4]
 80105ee:	4421      	add	r1, r4
 80105f0:	6011      	str	r1, [r2, #0]
 80105f2:	e7da      	b.n	80105aa <_free_r+0x26>
 80105f4:	d902      	bls.n	80105fc <_free_r+0x78>
 80105f6:	230c      	movs	r3, #12
 80105f8:	6003      	str	r3, [r0, #0]
 80105fa:	e7d6      	b.n	80105aa <_free_r+0x26>
 80105fc:	6825      	ldr	r5, [r4, #0]
 80105fe:	1961      	adds	r1, r4, r5
 8010600:	428b      	cmp	r3, r1
 8010602:	bf04      	itt	eq
 8010604:	6819      	ldreq	r1, [r3, #0]
 8010606:	685b      	ldreq	r3, [r3, #4]
 8010608:	6063      	str	r3, [r4, #4]
 801060a:	bf04      	itt	eq
 801060c:	1949      	addeq	r1, r1, r5
 801060e:	6021      	streq	r1, [r4, #0]
 8010610:	6054      	str	r4, [r2, #4]
 8010612:	e7ca      	b.n	80105aa <_free_r+0x26>
 8010614:	b003      	add	sp, #12
 8010616:	bd30      	pop	{r4, r5, pc}
 8010618:	20006d10 	.word	0x20006d10

0801061c <sbrk_aligned>:
 801061c:	b570      	push	{r4, r5, r6, lr}
 801061e:	4e0e      	ldr	r6, [pc, #56]	; (8010658 <sbrk_aligned+0x3c>)
 8010620:	460c      	mov	r4, r1
 8010622:	6831      	ldr	r1, [r6, #0]
 8010624:	4605      	mov	r5, r0
 8010626:	b911      	cbnz	r1, 801062e <sbrk_aligned+0x12>
 8010628:	f000 fcd6 	bl	8010fd8 <_sbrk_r>
 801062c:	6030      	str	r0, [r6, #0]
 801062e:	4621      	mov	r1, r4
 8010630:	4628      	mov	r0, r5
 8010632:	f000 fcd1 	bl	8010fd8 <_sbrk_r>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	d00a      	beq.n	8010650 <sbrk_aligned+0x34>
 801063a:	1cc4      	adds	r4, r0, #3
 801063c:	f024 0403 	bic.w	r4, r4, #3
 8010640:	42a0      	cmp	r0, r4
 8010642:	d007      	beq.n	8010654 <sbrk_aligned+0x38>
 8010644:	1a21      	subs	r1, r4, r0
 8010646:	4628      	mov	r0, r5
 8010648:	f000 fcc6 	bl	8010fd8 <_sbrk_r>
 801064c:	3001      	adds	r0, #1
 801064e:	d101      	bne.n	8010654 <sbrk_aligned+0x38>
 8010650:	f04f 34ff 	mov.w	r4, #4294967295
 8010654:	4620      	mov	r0, r4
 8010656:	bd70      	pop	{r4, r5, r6, pc}
 8010658:	20006d14 	.word	0x20006d14

0801065c <_malloc_r>:
 801065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010660:	1ccd      	adds	r5, r1, #3
 8010662:	f025 0503 	bic.w	r5, r5, #3
 8010666:	3508      	adds	r5, #8
 8010668:	2d0c      	cmp	r5, #12
 801066a:	bf38      	it	cc
 801066c:	250c      	movcc	r5, #12
 801066e:	2d00      	cmp	r5, #0
 8010670:	4607      	mov	r7, r0
 8010672:	db01      	blt.n	8010678 <_malloc_r+0x1c>
 8010674:	42a9      	cmp	r1, r5
 8010676:	d905      	bls.n	8010684 <_malloc_r+0x28>
 8010678:	230c      	movs	r3, #12
 801067a:	603b      	str	r3, [r7, #0]
 801067c:	2600      	movs	r6, #0
 801067e:	4630      	mov	r0, r6
 8010680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010684:	4e2e      	ldr	r6, [pc, #184]	; (8010740 <_malloc_r+0xe4>)
 8010686:	f000 ff1f 	bl	80114c8 <__malloc_lock>
 801068a:	6833      	ldr	r3, [r6, #0]
 801068c:	461c      	mov	r4, r3
 801068e:	bb34      	cbnz	r4, 80106de <_malloc_r+0x82>
 8010690:	4629      	mov	r1, r5
 8010692:	4638      	mov	r0, r7
 8010694:	f7ff ffc2 	bl	801061c <sbrk_aligned>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	4604      	mov	r4, r0
 801069c:	d14d      	bne.n	801073a <_malloc_r+0xde>
 801069e:	6834      	ldr	r4, [r6, #0]
 80106a0:	4626      	mov	r6, r4
 80106a2:	2e00      	cmp	r6, #0
 80106a4:	d140      	bne.n	8010728 <_malloc_r+0xcc>
 80106a6:	6823      	ldr	r3, [r4, #0]
 80106a8:	4631      	mov	r1, r6
 80106aa:	4638      	mov	r0, r7
 80106ac:	eb04 0803 	add.w	r8, r4, r3
 80106b0:	f000 fc92 	bl	8010fd8 <_sbrk_r>
 80106b4:	4580      	cmp	r8, r0
 80106b6:	d13a      	bne.n	801072e <_malloc_r+0xd2>
 80106b8:	6821      	ldr	r1, [r4, #0]
 80106ba:	3503      	adds	r5, #3
 80106bc:	1a6d      	subs	r5, r5, r1
 80106be:	f025 0503 	bic.w	r5, r5, #3
 80106c2:	3508      	adds	r5, #8
 80106c4:	2d0c      	cmp	r5, #12
 80106c6:	bf38      	it	cc
 80106c8:	250c      	movcc	r5, #12
 80106ca:	4629      	mov	r1, r5
 80106cc:	4638      	mov	r0, r7
 80106ce:	f7ff ffa5 	bl	801061c <sbrk_aligned>
 80106d2:	3001      	adds	r0, #1
 80106d4:	d02b      	beq.n	801072e <_malloc_r+0xd2>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	442b      	add	r3, r5
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	e00e      	b.n	80106fc <_malloc_r+0xa0>
 80106de:	6822      	ldr	r2, [r4, #0]
 80106e0:	1b52      	subs	r2, r2, r5
 80106e2:	d41e      	bmi.n	8010722 <_malloc_r+0xc6>
 80106e4:	2a0b      	cmp	r2, #11
 80106e6:	d916      	bls.n	8010716 <_malloc_r+0xba>
 80106e8:	1961      	adds	r1, r4, r5
 80106ea:	42a3      	cmp	r3, r4
 80106ec:	6025      	str	r5, [r4, #0]
 80106ee:	bf18      	it	ne
 80106f0:	6059      	strne	r1, [r3, #4]
 80106f2:	6863      	ldr	r3, [r4, #4]
 80106f4:	bf08      	it	eq
 80106f6:	6031      	streq	r1, [r6, #0]
 80106f8:	5162      	str	r2, [r4, r5]
 80106fa:	604b      	str	r3, [r1, #4]
 80106fc:	4638      	mov	r0, r7
 80106fe:	f104 060b 	add.w	r6, r4, #11
 8010702:	f000 fee7 	bl	80114d4 <__malloc_unlock>
 8010706:	f026 0607 	bic.w	r6, r6, #7
 801070a:	1d23      	adds	r3, r4, #4
 801070c:	1af2      	subs	r2, r6, r3
 801070e:	d0b6      	beq.n	801067e <_malloc_r+0x22>
 8010710:	1b9b      	subs	r3, r3, r6
 8010712:	50a3      	str	r3, [r4, r2]
 8010714:	e7b3      	b.n	801067e <_malloc_r+0x22>
 8010716:	6862      	ldr	r2, [r4, #4]
 8010718:	42a3      	cmp	r3, r4
 801071a:	bf0c      	ite	eq
 801071c:	6032      	streq	r2, [r6, #0]
 801071e:	605a      	strne	r2, [r3, #4]
 8010720:	e7ec      	b.n	80106fc <_malloc_r+0xa0>
 8010722:	4623      	mov	r3, r4
 8010724:	6864      	ldr	r4, [r4, #4]
 8010726:	e7b2      	b.n	801068e <_malloc_r+0x32>
 8010728:	4634      	mov	r4, r6
 801072a:	6876      	ldr	r6, [r6, #4]
 801072c:	e7b9      	b.n	80106a2 <_malloc_r+0x46>
 801072e:	230c      	movs	r3, #12
 8010730:	603b      	str	r3, [r7, #0]
 8010732:	4638      	mov	r0, r7
 8010734:	f000 fece 	bl	80114d4 <__malloc_unlock>
 8010738:	e7a1      	b.n	801067e <_malloc_r+0x22>
 801073a:	6025      	str	r5, [r4, #0]
 801073c:	e7de      	b.n	80106fc <_malloc_r+0xa0>
 801073e:	bf00      	nop
 8010740:	20006d10 	.word	0x20006d10

08010744 <__ssputs_r>:
 8010744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010748:	688e      	ldr	r6, [r1, #8]
 801074a:	429e      	cmp	r6, r3
 801074c:	4682      	mov	sl, r0
 801074e:	460c      	mov	r4, r1
 8010750:	4690      	mov	r8, r2
 8010752:	461f      	mov	r7, r3
 8010754:	d838      	bhi.n	80107c8 <__ssputs_r+0x84>
 8010756:	898a      	ldrh	r2, [r1, #12]
 8010758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801075c:	d032      	beq.n	80107c4 <__ssputs_r+0x80>
 801075e:	6825      	ldr	r5, [r4, #0]
 8010760:	6909      	ldr	r1, [r1, #16]
 8010762:	eba5 0901 	sub.w	r9, r5, r1
 8010766:	6965      	ldr	r5, [r4, #20]
 8010768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801076c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010770:	3301      	adds	r3, #1
 8010772:	444b      	add	r3, r9
 8010774:	106d      	asrs	r5, r5, #1
 8010776:	429d      	cmp	r5, r3
 8010778:	bf38      	it	cc
 801077a:	461d      	movcc	r5, r3
 801077c:	0553      	lsls	r3, r2, #21
 801077e:	d531      	bpl.n	80107e4 <__ssputs_r+0xa0>
 8010780:	4629      	mov	r1, r5
 8010782:	f7ff ff6b 	bl	801065c <_malloc_r>
 8010786:	4606      	mov	r6, r0
 8010788:	b950      	cbnz	r0, 80107a0 <__ssputs_r+0x5c>
 801078a:	230c      	movs	r3, #12
 801078c:	f8ca 3000 	str.w	r3, [sl]
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010796:	81a3      	strh	r3, [r4, #12]
 8010798:	f04f 30ff 	mov.w	r0, #4294967295
 801079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a0:	6921      	ldr	r1, [r4, #16]
 80107a2:	464a      	mov	r2, r9
 80107a4:	f7ff fcf6 	bl	8010194 <memcpy>
 80107a8:	89a3      	ldrh	r3, [r4, #12]
 80107aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	6126      	str	r6, [r4, #16]
 80107b6:	6165      	str	r5, [r4, #20]
 80107b8:	444e      	add	r6, r9
 80107ba:	eba5 0509 	sub.w	r5, r5, r9
 80107be:	6026      	str	r6, [r4, #0]
 80107c0:	60a5      	str	r5, [r4, #8]
 80107c2:	463e      	mov	r6, r7
 80107c4:	42be      	cmp	r6, r7
 80107c6:	d900      	bls.n	80107ca <__ssputs_r+0x86>
 80107c8:	463e      	mov	r6, r7
 80107ca:	6820      	ldr	r0, [r4, #0]
 80107cc:	4632      	mov	r2, r6
 80107ce:	4641      	mov	r1, r8
 80107d0:	f7ff fcee 	bl	80101b0 <memmove>
 80107d4:	68a3      	ldr	r3, [r4, #8]
 80107d6:	1b9b      	subs	r3, r3, r6
 80107d8:	60a3      	str	r3, [r4, #8]
 80107da:	6823      	ldr	r3, [r4, #0]
 80107dc:	4433      	add	r3, r6
 80107de:	6023      	str	r3, [r4, #0]
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7db      	b.n	801079c <__ssputs_r+0x58>
 80107e4:	462a      	mov	r2, r5
 80107e6:	f000 fe7b 	bl	80114e0 <_realloc_r>
 80107ea:	4606      	mov	r6, r0
 80107ec:	2800      	cmp	r0, #0
 80107ee:	d1e1      	bne.n	80107b4 <__ssputs_r+0x70>
 80107f0:	6921      	ldr	r1, [r4, #16]
 80107f2:	4650      	mov	r0, sl
 80107f4:	f7ff fec6 	bl	8010584 <_free_r>
 80107f8:	e7c7      	b.n	801078a <__ssputs_r+0x46>
	...

080107fc <_svfiprintf_r>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	4698      	mov	r8, r3
 8010802:	898b      	ldrh	r3, [r1, #12]
 8010804:	061b      	lsls	r3, r3, #24
 8010806:	b09d      	sub	sp, #116	; 0x74
 8010808:	4607      	mov	r7, r0
 801080a:	460d      	mov	r5, r1
 801080c:	4614      	mov	r4, r2
 801080e:	d50e      	bpl.n	801082e <_svfiprintf_r+0x32>
 8010810:	690b      	ldr	r3, [r1, #16]
 8010812:	b963      	cbnz	r3, 801082e <_svfiprintf_r+0x32>
 8010814:	2140      	movs	r1, #64	; 0x40
 8010816:	f7ff ff21 	bl	801065c <_malloc_r>
 801081a:	6028      	str	r0, [r5, #0]
 801081c:	6128      	str	r0, [r5, #16]
 801081e:	b920      	cbnz	r0, 801082a <_svfiprintf_r+0x2e>
 8010820:	230c      	movs	r3, #12
 8010822:	603b      	str	r3, [r7, #0]
 8010824:	f04f 30ff 	mov.w	r0, #4294967295
 8010828:	e0d1      	b.n	80109ce <_svfiprintf_r+0x1d2>
 801082a:	2340      	movs	r3, #64	; 0x40
 801082c:	616b      	str	r3, [r5, #20]
 801082e:	2300      	movs	r3, #0
 8010830:	9309      	str	r3, [sp, #36]	; 0x24
 8010832:	2320      	movs	r3, #32
 8010834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010838:	f8cd 800c 	str.w	r8, [sp, #12]
 801083c:	2330      	movs	r3, #48	; 0x30
 801083e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80109e8 <_svfiprintf_r+0x1ec>
 8010842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010846:	f04f 0901 	mov.w	r9, #1
 801084a:	4623      	mov	r3, r4
 801084c:	469a      	mov	sl, r3
 801084e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010852:	b10a      	cbz	r2, 8010858 <_svfiprintf_r+0x5c>
 8010854:	2a25      	cmp	r2, #37	; 0x25
 8010856:	d1f9      	bne.n	801084c <_svfiprintf_r+0x50>
 8010858:	ebba 0b04 	subs.w	fp, sl, r4
 801085c:	d00b      	beq.n	8010876 <_svfiprintf_r+0x7a>
 801085e:	465b      	mov	r3, fp
 8010860:	4622      	mov	r2, r4
 8010862:	4629      	mov	r1, r5
 8010864:	4638      	mov	r0, r7
 8010866:	f7ff ff6d 	bl	8010744 <__ssputs_r>
 801086a:	3001      	adds	r0, #1
 801086c:	f000 80aa 	beq.w	80109c4 <_svfiprintf_r+0x1c8>
 8010870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010872:	445a      	add	r2, fp
 8010874:	9209      	str	r2, [sp, #36]	; 0x24
 8010876:	f89a 3000 	ldrb.w	r3, [sl]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 80a2 	beq.w	80109c4 <_svfiprintf_r+0x1c8>
 8010880:	2300      	movs	r3, #0
 8010882:	f04f 32ff 	mov.w	r2, #4294967295
 8010886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801088a:	f10a 0a01 	add.w	sl, sl, #1
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	9307      	str	r3, [sp, #28]
 8010892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010896:	931a      	str	r3, [sp, #104]	; 0x68
 8010898:	4654      	mov	r4, sl
 801089a:	2205      	movs	r2, #5
 801089c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108a0:	4851      	ldr	r0, [pc, #324]	; (80109e8 <_svfiprintf_r+0x1ec>)
 80108a2:	f7ef fcad 	bl	8000200 <memchr>
 80108a6:	9a04      	ldr	r2, [sp, #16]
 80108a8:	b9d8      	cbnz	r0, 80108e2 <_svfiprintf_r+0xe6>
 80108aa:	06d0      	lsls	r0, r2, #27
 80108ac:	bf44      	itt	mi
 80108ae:	2320      	movmi	r3, #32
 80108b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108b4:	0711      	lsls	r1, r2, #28
 80108b6:	bf44      	itt	mi
 80108b8:	232b      	movmi	r3, #43	; 0x2b
 80108ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108be:	f89a 3000 	ldrb.w	r3, [sl]
 80108c2:	2b2a      	cmp	r3, #42	; 0x2a
 80108c4:	d015      	beq.n	80108f2 <_svfiprintf_r+0xf6>
 80108c6:	9a07      	ldr	r2, [sp, #28]
 80108c8:	4654      	mov	r4, sl
 80108ca:	2000      	movs	r0, #0
 80108cc:	f04f 0c0a 	mov.w	ip, #10
 80108d0:	4621      	mov	r1, r4
 80108d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108d6:	3b30      	subs	r3, #48	; 0x30
 80108d8:	2b09      	cmp	r3, #9
 80108da:	d94e      	bls.n	801097a <_svfiprintf_r+0x17e>
 80108dc:	b1b0      	cbz	r0, 801090c <_svfiprintf_r+0x110>
 80108de:	9207      	str	r2, [sp, #28]
 80108e0:	e014      	b.n	801090c <_svfiprintf_r+0x110>
 80108e2:	eba0 0308 	sub.w	r3, r0, r8
 80108e6:	fa09 f303 	lsl.w	r3, r9, r3
 80108ea:	4313      	orrs	r3, r2
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	46a2      	mov	sl, r4
 80108f0:	e7d2      	b.n	8010898 <_svfiprintf_r+0x9c>
 80108f2:	9b03      	ldr	r3, [sp, #12]
 80108f4:	1d19      	adds	r1, r3, #4
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	9103      	str	r1, [sp, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	bfbb      	ittet	lt
 80108fe:	425b      	neglt	r3, r3
 8010900:	f042 0202 	orrlt.w	r2, r2, #2
 8010904:	9307      	strge	r3, [sp, #28]
 8010906:	9307      	strlt	r3, [sp, #28]
 8010908:	bfb8      	it	lt
 801090a:	9204      	strlt	r2, [sp, #16]
 801090c:	7823      	ldrb	r3, [r4, #0]
 801090e:	2b2e      	cmp	r3, #46	; 0x2e
 8010910:	d10c      	bne.n	801092c <_svfiprintf_r+0x130>
 8010912:	7863      	ldrb	r3, [r4, #1]
 8010914:	2b2a      	cmp	r3, #42	; 0x2a
 8010916:	d135      	bne.n	8010984 <_svfiprintf_r+0x188>
 8010918:	9b03      	ldr	r3, [sp, #12]
 801091a:	1d1a      	adds	r2, r3, #4
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	9203      	str	r2, [sp, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	bfb8      	it	lt
 8010924:	f04f 33ff 	movlt.w	r3, #4294967295
 8010928:	3402      	adds	r4, #2
 801092a:	9305      	str	r3, [sp, #20]
 801092c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80109f8 <_svfiprintf_r+0x1fc>
 8010930:	7821      	ldrb	r1, [r4, #0]
 8010932:	2203      	movs	r2, #3
 8010934:	4650      	mov	r0, sl
 8010936:	f7ef fc63 	bl	8000200 <memchr>
 801093a:	b140      	cbz	r0, 801094e <_svfiprintf_r+0x152>
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	eba0 000a 	sub.w	r0, r0, sl
 8010942:	fa03 f000 	lsl.w	r0, r3, r0
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	4303      	orrs	r3, r0
 801094a:	3401      	adds	r4, #1
 801094c:	9304      	str	r3, [sp, #16]
 801094e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010952:	4826      	ldr	r0, [pc, #152]	; (80109ec <_svfiprintf_r+0x1f0>)
 8010954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010958:	2206      	movs	r2, #6
 801095a:	f7ef fc51 	bl	8000200 <memchr>
 801095e:	2800      	cmp	r0, #0
 8010960:	d038      	beq.n	80109d4 <_svfiprintf_r+0x1d8>
 8010962:	4b23      	ldr	r3, [pc, #140]	; (80109f0 <_svfiprintf_r+0x1f4>)
 8010964:	bb1b      	cbnz	r3, 80109ae <_svfiprintf_r+0x1b2>
 8010966:	9b03      	ldr	r3, [sp, #12]
 8010968:	3307      	adds	r3, #7
 801096a:	f023 0307 	bic.w	r3, r3, #7
 801096e:	3308      	adds	r3, #8
 8010970:	9303      	str	r3, [sp, #12]
 8010972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010974:	4433      	add	r3, r6
 8010976:	9309      	str	r3, [sp, #36]	; 0x24
 8010978:	e767      	b.n	801084a <_svfiprintf_r+0x4e>
 801097a:	fb0c 3202 	mla	r2, ip, r2, r3
 801097e:	460c      	mov	r4, r1
 8010980:	2001      	movs	r0, #1
 8010982:	e7a5      	b.n	80108d0 <_svfiprintf_r+0xd4>
 8010984:	2300      	movs	r3, #0
 8010986:	3401      	adds	r4, #1
 8010988:	9305      	str	r3, [sp, #20]
 801098a:	4619      	mov	r1, r3
 801098c:	f04f 0c0a 	mov.w	ip, #10
 8010990:	4620      	mov	r0, r4
 8010992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010996:	3a30      	subs	r2, #48	; 0x30
 8010998:	2a09      	cmp	r2, #9
 801099a:	d903      	bls.n	80109a4 <_svfiprintf_r+0x1a8>
 801099c:	2b00      	cmp	r3, #0
 801099e:	d0c5      	beq.n	801092c <_svfiprintf_r+0x130>
 80109a0:	9105      	str	r1, [sp, #20]
 80109a2:	e7c3      	b.n	801092c <_svfiprintf_r+0x130>
 80109a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80109a8:	4604      	mov	r4, r0
 80109aa:	2301      	movs	r3, #1
 80109ac:	e7f0      	b.n	8010990 <_svfiprintf_r+0x194>
 80109ae:	ab03      	add	r3, sp, #12
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	462a      	mov	r2, r5
 80109b4:	4b0f      	ldr	r3, [pc, #60]	; (80109f4 <_svfiprintf_r+0x1f8>)
 80109b6:	a904      	add	r1, sp, #16
 80109b8:	4638      	mov	r0, r7
 80109ba:	f3af 8000 	nop.w
 80109be:	1c42      	adds	r2, r0, #1
 80109c0:	4606      	mov	r6, r0
 80109c2:	d1d6      	bne.n	8010972 <_svfiprintf_r+0x176>
 80109c4:	89ab      	ldrh	r3, [r5, #12]
 80109c6:	065b      	lsls	r3, r3, #25
 80109c8:	f53f af2c 	bmi.w	8010824 <_svfiprintf_r+0x28>
 80109cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109ce:	b01d      	add	sp, #116	; 0x74
 80109d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d4:	ab03      	add	r3, sp, #12
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	462a      	mov	r2, r5
 80109da:	4b06      	ldr	r3, [pc, #24]	; (80109f4 <_svfiprintf_r+0x1f8>)
 80109dc:	a904      	add	r1, sp, #16
 80109de:	4638      	mov	r0, r7
 80109e0:	f000 f9d4 	bl	8010d8c <_printf_i>
 80109e4:	e7eb      	b.n	80109be <_svfiprintf_r+0x1c2>
 80109e6:	bf00      	nop
 80109e8:	08014a9c 	.word	0x08014a9c
 80109ec:	08014aa6 	.word	0x08014aa6
 80109f0:	00000000 	.word	0x00000000
 80109f4:	08010745 	.word	0x08010745
 80109f8:	08014aa2 	.word	0x08014aa2

080109fc <__sfputc_r>:
 80109fc:	6893      	ldr	r3, [r2, #8]
 80109fe:	3b01      	subs	r3, #1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	b410      	push	{r4}
 8010a04:	6093      	str	r3, [r2, #8]
 8010a06:	da08      	bge.n	8010a1a <__sfputc_r+0x1e>
 8010a08:	6994      	ldr	r4, [r2, #24]
 8010a0a:	42a3      	cmp	r3, r4
 8010a0c:	db01      	blt.n	8010a12 <__sfputc_r+0x16>
 8010a0e:	290a      	cmp	r1, #10
 8010a10:	d103      	bne.n	8010a1a <__sfputc_r+0x1e>
 8010a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a16:	f000 bb33 	b.w	8011080 <__swbuf_r>
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	1c58      	adds	r0, r3, #1
 8010a1e:	6010      	str	r0, [r2, #0]
 8010a20:	7019      	strb	r1, [r3, #0]
 8010a22:	4608      	mov	r0, r1
 8010a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a28:	4770      	bx	lr

08010a2a <__sfputs_r>:
 8010a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	460f      	mov	r7, r1
 8010a30:	4614      	mov	r4, r2
 8010a32:	18d5      	adds	r5, r2, r3
 8010a34:	42ac      	cmp	r4, r5
 8010a36:	d101      	bne.n	8010a3c <__sfputs_r+0x12>
 8010a38:	2000      	movs	r0, #0
 8010a3a:	e007      	b.n	8010a4c <__sfputs_r+0x22>
 8010a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a40:	463a      	mov	r2, r7
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7ff ffda 	bl	80109fc <__sfputc_r>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d1f3      	bne.n	8010a34 <__sfputs_r+0xa>
 8010a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a50 <_vfiprintf_r>:
 8010a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	460d      	mov	r5, r1
 8010a56:	b09d      	sub	sp, #116	; 0x74
 8010a58:	4614      	mov	r4, r2
 8010a5a:	4698      	mov	r8, r3
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	b118      	cbz	r0, 8010a68 <_vfiprintf_r+0x18>
 8010a60:	6983      	ldr	r3, [r0, #24]
 8010a62:	b90b      	cbnz	r3, 8010a68 <_vfiprintf_r+0x18>
 8010a64:	f7ff fcd4 	bl	8010410 <__sinit>
 8010a68:	4b89      	ldr	r3, [pc, #548]	; (8010c90 <_vfiprintf_r+0x240>)
 8010a6a:	429d      	cmp	r5, r3
 8010a6c:	d11b      	bne.n	8010aa6 <_vfiprintf_r+0x56>
 8010a6e:	6875      	ldr	r5, [r6, #4]
 8010a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a72:	07d9      	lsls	r1, r3, #31
 8010a74:	d405      	bmi.n	8010a82 <_vfiprintf_r+0x32>
 8010a76:	89ab      	ldrh	r3, [r5, #12]
 8010a78:	059a      	lsls	r2, r3, #22
 8010a7a:	d402      	bmi.n	8010a82 <_vfiprintf_r+0x32>
 8010a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a7e:	f7ff fd77 	bl	8010570 <__retarget_lock_acquire_recursive>
 8010a82:	89ab      	ldrh	r3, [r5, #12]
 8010a84:	071b      	lsls	r3, r3, #28
 8010a86:	d501      	bpl.n	8010a8c <_vfiprintf_r+0x3c>
 8010a88:	692b      	ldr	r3, [r5, #16]
 8010a8a:	b9eb      	cbnz	r3, 8010ac8 <_vfiprintf_r+0x78>
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f000 fb5a 	bl	8011148 <__swsetup_r>
 8010a94:	b1c0      	cbz	r0, 8010ac8 <_vfiprintf_r+0x78>
 8010a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a98:	07dc      	lsls	r4, r3, #31
 8010a9a:	d50e      	bpl.n	8010aba <_vfiprintf_r+0x6a>
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	b01d      	add	sp, #116	; 0x74
 8010aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa6:	4b7b      	ldr	r3, [pc, #492]	; (8010c94 <_vfiprintf_r+0x244>)
 8010aa8:	429d      	cmp	r5, r3
 8010aaa:	d101      	bne.n	8010ab0 <_vfiprintf_r+0x60>
 8010aac:	68b5      	ldr	r5, [r6, #8]
 8010aae:	e7df      	b.n	8010a70 <_vfiprintf_r+0x20>
 8010ab0:	4b79      	ldr	r3, [pc, #484]	; (8010c98 <_vfiprintf_r+0x248>)
 8010ab2:	429d      	cmp	r5, r3
 8010ab4:	bf08      	it	eq
 8010ab6:	68f5      	ldreq	r5, [r6, #12]
 8010ab8:	e7da      	b.n	8010a70 <_vfiprintf_r+0x20>
 8010aba:	89ab      	ldrh	r3, [r5, #12]
 8010abc:	0598      	lsls	r0, r3, #22
 8010abe:	d4ed      	bmi.n	8010a9c <_vfiprintf_r+0x4c>
 8010ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ac2:	f7ff fd56 	bl	8010572 <__retarget_lock_release_recursive>
 8010ac6:	e7e9      	b.n	8010a9c <_vfiprintf_r+0x4c>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	9309      	str	r3, [sp, #36]	; 0x24
 8010acc:	2320      	movs	r3, #32
 8010ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ad6:	2330      	movs	r3, #48	; 0x30
 8010ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c9c <_vfiprintf_r+0x24c>
 8010adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ae0:	f04f 0901 	mov.w	r9, #1
 8010ae4:	4623      	mov	r3, r4
 8010ae6:	469a      	mov	sl, r3
 8010ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aec:	b10a      	cbz	r2, 8010af2 <_vfiprintf_r+0xa2>
 8010aee:	2a25      	cmp	r2, #37	; 0x25
 8010af0:	d1f9      	bne.n	8010ae6 <_vfiprintf_r+0x96>
 8010af2:	ebba 0b04 	subs.w	fp, sl, r4
 8010af6:	d00b      	beq.n	8010b10 <_vfiprintf_r+0xc0>
 8010af8:	465b      	mov	r3, fp
 8010afa:	4622      	mov	r2, r4
 8010afc:	4629      	mov	r1, r5
 8010afe:	4630      	mov	r0, r6
 8010b00:	f7ff ff93 	bl	8010a2a <__sfputs_r>
 8010b04:	3001      	adds	r0, #1
 8010b06:	f000 80aa 	beq.w	8010c5e <_vfiprintf_r+0x20e>
 8010b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b0c:	445a      	add	r2, fp
 8010b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8010b10:	f89a 3000 	ldrb.w	r3, [sl]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 80a2 	beq.w	8010c5e <_vfiprintf_r+0x20e>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b24:	f10a 0a01 	add.w	sl, sl, #1
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	9307      	str	r3, [sp, #28]
 8010b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b30:	931a      	str	r3, [sp, #104]	; 0x68
 8010b32:	4654      	mov	r4, sl
 8010b34:	2205      	movs	r2, #5
 8010b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b3a:	4858      	ldr	r0, [pc, #352]	; (8010c9c <_vfiprintf_r+0x24c>)
 8010b3c:	f7ef fb60 	bl	8000200 <memchr>
 8010b40:	9a04      	ldr	r2, [sp, #16]
 8010b42:	b9d8      	cbnz	r0, 8010b7c <_vfiprintf_r+0x12c>
 8010b44:	06d1      	lsls	r1, r2, #27
 8010b46:	bf44      	itt	mi
 8010b48:	2320      	movmi	r3, #32
 8010b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b4e:	0713      	lsls	r3, r2, #28
 8010b50:	bf44      	itt	mi
 8010b52:	232b      	movmi	r3, #43	; 0x2b
 8010b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b58:	f89a 3000 	ldrb.w	r3, [sl]
 8010b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b5e:	d015      	beq.n	8010b8c <_vfiprintf_r+0x13c>
 8010b60:	9a07      	ldr	r2, [sp, #28]
 8010b62:	4654      	mov	r4, sl
 8010b64:	2000      	movs	r0, #0
 8010b66:	f04f 0c0a 	mov.w	ip, #10
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b70:	3b30      	subs	r3, #48	; 0x30
 8010b72:	2b09      	cmp	r3, #9
 8010b74:	d94e      	bls.n	8010c14 <_vfiprintf_r+0x1c4>
 8010b76:	b1b0      	cbz	r0, 8010ba6 <_vfiprintf_r+0x156>
 8010b78:	9207      	str	r2, [sp, #28]
 8010b7a:	e014      	b.n	8010ba6 <_vfiprintf_r+0x156>
 8010b7c:	eba0 0308 	sub.w	r3, r0, r8
 8010b80:	fa09 f303 	lsl.w	r3, r9, r3
 8010b84:	4313      	orrs	r3, r2
 8010b86:	9304      	str	r3, [sp, #16]
 8010b88:	46a2      	mov	sl, r4
 8010b8a:	e7d2      	b.n	8010b32 <_vfiprintf_r+0xe2>
 8010b8c:	9b03      	ldr	r3, [sp, #12]
 8010b8e:	1d19      	adds	r1, r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	9103      	str	r1, [sp, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bfbb      	ittet	lt
 8010b98:	425b      	neglt	r3, r3
 8010b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8010b9e:	9307      	strge	r3, [sp, #28]
 8010ba0:	9307      	strlt	r3, [sp, #28]
 8010ba2:	bfb8      	it	lt
 8010ba4:	9204      	strlt	r2, [sp, #16]
 8010ba6:	7823      	ldrb	r3, [r4, #0]
 8010ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8010baa:	d10c      	bne.n	8010bc6 <_vfiprintf_r+0x176>
 8010bac:	7863      	ldrb	r3, [r4, #1]
 8010bae:	2b2a      	cmp	r3, #42	; 0x2a
 8010bb0:	d135      	bne.n	8010c1e <_vfiprintf_r+0x1ce>
 8010bb2:	9b03      	ldr	r3, [sp, #12]
 8010bb4:	1d1a      	adds	r2, r3, #4
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	9203      	str	r2, [sp, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	bfb8      	it	lt
 8010bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bc2:	3402      	adds	r4, #2
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010cac <_vfiprintf_r+0x25c>
 8010bca:	7821      	ldrb	r1, [r4, #0]
 8010bcc:	2203      	movs	r2, #3
 8010bce:	4650      	mov	r0, sl
 8010bd0:	f7ef fb16 	bl	8000200 <memchr>
 8010bd4:	b140      	cbz	r0, 8010be8 <_vfiprintf_r+0x198>
 8010bd6:	2340      	movs	r3, #64	; 0x40
 8010bd8:	eba0 000a 	sub.w	r0, r0, sl
 8010bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8010be0:	9b04      	ldr	r3, [sp, #16]
 8010be2:	4303      	orrs	r3, r0
 8010be4:	3401      	adds	r4, #1
 8010be6:	9304      	str	r3, [sp, #16]
 8010be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bec:	482c      	ldr	r0, [pc, #176]	; (8010ca0 <_vfiprintf_r+0x250>)
 8010bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bf2:	2206      	movs	r2, #6
 8010bf4:	f7ef fb04 	bl	8000200 <memchr>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d03f      	beq.n	8010c7c <_vfiprintf_r+0x22c>
 8010bfc:	4b29      	ldr	r3, [pc, #164]	; (8010ca4 <_vfiprintf_r+0x254>)
 8010bfe:	bb1b      	cbnz	r3, 8010c48 <_vfiprintf_r+0x1f8>
 8010c00:	9b03      	ldr	r3, [sp, #12]
 8010c02:	3307      	adds	r3, #7
 8010c04:	f023 0307 	bic.w	r3, r3, #7
 8010c08:	3308      	adds	r3, #8
 8010c0a:	9303      	str	r3, [sp, #12]
 8010c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c0e:	443b      	add	r3, r7
 8010c10:	9309      	str	r3, [sp, #36]	; 0x24
 8010c12:	e767      	b.n	8010ae4 <_vfiprintf_r+0x94>
 8010c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c18:	460c      	mov	r4, r1
 8010c1a:	2001      	movs	r0, #1
 8010c1c:	e7a5      	b.n	8010b6a <_vfiprintf_r+0x11a>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	3401      	adds	r4, #1
 8010c22:	9305      	str	r3, [sp, #20]
 8010c24:	4619      	mov	r1, r3
 8010c26:	f04f 0c0a 	mov.w	ip, #10
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c30:	3a30      	subs	r2, #48	; 0x30
 8010c32:	2a09      	cmp	r2, #9
 8010c34:	d903      	bls.n	8010c3e <_vfiprintf_r+0x1ee>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d0c5      	beq.n	8010bc6 <_vfiprintf_r+0x176>
 8010c3a:	9105      	str	r1, [sp, #20]
 8010c3c:	e7c3      	b.n	8010bc6 <_vfiprintf_r+0x176>
 8010c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c42:	4604      	mov	r4, r0
 8010c44:	2301      	movs	r3, #1
 8010c46:	e7f0      	b.n	8010c2a <_vfiprintf_r+0x1da>
 8010c48:	ab03      	add	r3, sp, #12
 8010c4a:	9300      	str	r3, [sp, #0]
 8010c4c:	462a      	mov	r2, r5
 8010c4e:	4b16      	ldr	r3, [pc, #88]	; (8010ca8 <_vfiprintf_r+0x258>)
 8010c50:	a904      	add	r1, sp, #16
 8010c52:	4630      	mov	r0, r6
 8010c54:	f3af 8000 	nop.w
 8010c58:	4607      	mov	r7, r0
 8010c5a:	1c78      	adds	r0, r7, #1
 8010c5c:	d1d6      	bne.n	8010c0c <_vfiprintf_r+0x1bc>
 8010c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c60:	07d9      	lsls	r1, r3, #31
 8010c62:	d405      	bmi.n	8010c70 <_vfiprintf_r+0x220>
 8010c64:	89ab      	ldrh	r3, [r5, #12]
 8010c66:	059a      	lsls	r2, r3, #22
 8010c68:	d402      	bmi.n	8010c70 <_vfiprintf_r+0x220>
 8010c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c6c:	f7ff fc81 	bl	8010572 <__retarget_lock_release_recursive>
 8010c70:	89ab      	ldrh	r3, [r5, #12]
 8010c72:	065b      	lsls	r3, r3, #25
 8010c74:	f53f af12 	bmi.w	8010a9c <_vfiprintf_r+0x4c>
 8010c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c7a:	e711      	b.n	8010aa0 <_vfiprintf_r+0x50>
 8010c7c:	ab03      	add	r3, sp, #12
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	462a      	mov	r2, r5
 8010c82:	4b09      	ldr	r3, [pc, #36]	; (8010ca8 <_vfiprintf_r+0x258>)
 8010c84:	a904      	add	r1, sp, #16
 8010c86:	4630      	mov	r0, r6
 8010c88:	f000 f880 	bl	8010d8c <_printf_i>
 8010c8c:	e7e4      	b.n	8010c58 <_vfiprintf_r+0x208>
 8010c8e:	bf00      	nop
 8010c90:	08014a5c 	.word	0x08014a5c
 8010c94:	08014a7c 	.word	0x08014a7c
 8010c98:	08014a3c 	.word	0x08014a3c
 8010c9c:	08014a9c 	.word	0x08014a9c
 8010ca0:	08014aa6 	.word	0x08014aa6
 8010ca4:	00000000 	.word	0x00000000
 8010ca8:	08010a2b 	.word	0x08010a2b
 8010cac:	08014aa2 	.word	0x08014aa2

08010cb0 <_printf_common>:
 8010cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb4:	4616      	mov	r6, r2
 8010cb6:	4699      	mov	r9, r3
 8010cb8:	688a      	ldr	r2, [r1, #8]
 8010cba:	690b      	ldr	r3, [r1, #16]
 8010cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	bfb8      	it	lt
 8010cc4:	4613      	movlt	r3, r2
 8010cc6:	6033      	str	r3, [r6, #0]
 8010cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ccc:	4607      	mov	r7, r0
 8010cce:	460c      	mov	r4, r1
 8010cd0:	b10a      	cbz	r2, 8010cd6 <_printf_common+0x26>
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	6033      	str	r3, [r6, #0]
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	0699      	lsls	r1, r3, #26
 8010cda:	bf42      	ittt	mi
 8010cdc:	6833      	ldrmi	r3, [r6, #0]
 8010cde:	3302      	addmi	r3, #2
 8010ce0:	6033      	strmi	r3, [r6, #0]
 8010ce2:	6825      	ldr	r5, [r4, #0]
 8010ce4:	f015 0506 	ands.w	r5, r5, #6
 8010ce8:	d106      	bne.n	8010cf8 <_printf_common+0x48>
 8010cea:	f104 0a19 	add.w	sl, r4, #25
 8010cee:	68e3      	ldr	r3, [r4, #12]
 8010cf0:	6832      	ldr	r2, [r6, #0]
 8010cf2:	1a9b      	subs	r3, r3, r2
 8010cf4:	42ab      	cmp	r3, r5
 8010cf6:	dc26      	bgt.n	8010d46 <_printf_common+0x96>
 8010cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010cfc:	1e13      	subs	r3, r2, #0
 8010cfe:	6822      	ldr	r2, [r4, #0]
 8010d00:	bf18      	it	ne
 8010d02:	2301      	movne	r3, #1
 8010d04:	0692      	lsls	r2, r2, #26
 8010d06:	d42b      	bmi.n	8010d60 <_printf_common+0xb0>
 8010d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d0c:	4649      	mov	r1, r9
 8010d0e:	4638      	mov	r0, r7
 8010d10:	47c0      	blx	r8
 8010d12:	3001      	adds	r0, #1
 8010d14:	d01e      	beq.n	8010d54 <_printf_common+0xa4>
 8010d16:	6823      	ldr	r3, [r4, #0]
 8010d18:	68e5      	ldr	r5, [r4, #12]
 8010d1a:	6832      	ldr	r2, [r6, #0]
 8010d1c:	f003 0306 	and.w	r3, r3, #6
 8010d20:	2b04      	cmp	r3, #4
 8010d22:	bf08      	it	eq
 8010d24:	1aad      	subeq	r5, r5, r2
 8010d26:	68a3      	ldr	r3, [r4, #8]
 8010d28:	6922      	ldr	r2, [r4, #16]
 8010d2a:	bf0c      	ite	eq
 8010d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d30:	2500      	movne	r5, #0
 8010d32:	4293      	cmp	r3, r2
 8010d34:	bfc4      	itt	gt
 8010d36:	1a9b      	subgt	r3, r3, r2
 8010d38:	18ed      	addgt	r5, r5, r3
 8010d3a:	2600      	movs	r6, #0
 8010d3c:	341a      	adds	r4, #26
 8010d3e:	42b5      	cmp	r5, r6
 8010d40:	d11a      	bne.n	8010d78 <_printf_common+0xc8>
 8010d42:	2000      	movs	r0, #0
 8010d44:	e008      	b.n	8010d58 <_printf_common+0xa8>
 8010d46:	2301      	movs	r3, #1
 8010d48:	4652      	mov	r2, sl
 8010d4a:	4649      	mov	r1, r9
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	47c0      	blx	r8
 8010d50:	3001      	adds	r0, #1
 8010d52:	d103      	bne.n	8010d5c <_printf_common+0xac>
 8010d54:	f04f 30ff 	mov.w	r0, #4294967295
 8010d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	e7c6      	b.n	8010cee <_printf_common+0x3e>
 8010d60:	18e1      	adds	r1, r4, r3
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	2030      	movs	r0, #48	; 0x30
 8010d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d6a:	4422      	add	r2, r4
 8010d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d74:	3302      	adds	r3, #2
 8010d76:	e7c7      	b.n	8010d08 <_printf_common+0x58>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	4638      	mov	r0, r7
 8010d80:	47c0      	blx	r8
 8010d82:	3001      	adds	r0, #1
 8010d84:	d0e6      	beq.n	8010d54 <_printf_common+0xa4>
 8010d86:	3601      	adds	r6, #1
 8010d88:	e7d9      	b.n	8010d3e <_printf_common+0x8e>
	...

08010d8c <_printf_i>:
 8010d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d90:	7e0f      	ldrb	r7, [r1, #24]
 8010d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d94:	2f78      	cmp	r7, #120	; 0x78
 8010d96:	4691      	mov	r9, r2
 8010d98:	4680      	mov	r8, r0
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	469a      	mov	sl, r3
 8010d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010da2:	d807      	bhi.n	8010db4 <_printf_i+0x28>
 8010da4:	2f62      	cmp	r7, #98	; 0x62
 8010da6:	d80a      	bhi.n	8010dbe <_printf_i+0x32>
 8010da8:	2f00      	cmp	r7, #0
 8010daa:	f000 80d8 	beq.w	8010f5e <_printf_i+0x1d2>
 8010dae:	2f58      	cmp	r7, #88	; 0x58
 8010db0:	f000 80a3 	beq.w	8010efa <_printf_i+0x16e>
 8010db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010dbc:	e03a      	b.n	8010e34 <_printf_i+0xa8>
 8010dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010dc2:	2b15      	cmp	r3, #21
 8010dc4:	d8f6      	bhi.n	8010db4 <_printf_i+0x28>
 8010dc6:	a101      	add	r1, pc, #4	; (adr r1, 8010dcc <_printf_i+0x40>)
 8010dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010dcc:	08010e25 	.word	0x08010e25
 8010dd0:	08010e39 	.word	0x08010e39
 8010dd4:	08010db5 	.word	0x08010db5
 8010dd8:	08010db5 	.word	0x08010db5
 8010ddc:	08010db5 	.word	0x08010db5
 8010de0:	08010db5 	.word	0x08010db5
 8010de4:	08010e39 	.word	0x08010e39
 8010de8:	08010db5 	.word	0x08010db5
 8010dec:	08010db5 	.word	0x08010db5
 8010df0:	08010db5 	.word	0x08010db5
 8010df4:	08010db5 	.word	0x08010db5
 8010df8:	08010f45 	.word	0x08010f45
 8010dfc:	08010e69 	.word	0x08010e69
 8010e00:	08010f27 	.word	0x08010f27
 8010e04:	08010db5 	.word	0x08010db5
 8010e08:	08010db5 	.word	0x08010db5
 8010e0c:	08010f67 	.word	0x08010f67
 8010e10:	08010db5 	.word	0x08010db5
 8010e14:	08010e69 	.word	0x08010e69
 8010e18:	08010db5 	.word	0x08010db5
 8010e1c:	08010db5 	.word	0x08010db5
 8010e20:	08010f2f 	.word	0x08010f2f
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	1d1a      	adds	r2, r3, #4
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	602a      	str	r2, [r5, #0]
 8010e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e34:	2301      	movs	r3, #1
 8010e36:	e0a3      	b.n	8010f80 <_printf_i+0x1f4>
 8010e38:	6820      	ldr	r0, [r4, #0]
 8010e3a:	6829      	ldr	r1, [r5, #0]
 8010e3c:	0606      	lsls	r6, r0, #24
 8010e3e:	f101 0304 	add.w	r3, r1, #4
 8010e42:	d50a      	bpl.n	8010e5a <_printf_i+0xce>
 8010e44:	680e      	ldr	r6, [r1, #0]
 8010e46:	602b      	str	r3, [r5, #0]
 8010e48:	2e00      	cmp	r6, #0
 8010e4a:	da03      	bge.n	8010e54 <_printf_i+0xc8>
 8010e4c:	232d      	movs	r3, #45	; 0x2d
 8010e4e:	4276      	negs	r6, r6
 8010e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e54:	485e      	ldr	r0, [pc, #376]	; (8010fd0 <_printf_i+0x244>)
 8010e56:	230a      	movs	r3, #10
 8010e58:	e019      	b.n	8010e8e <_printf_i+0x102>
 8010e5a:	680e      	ldr	r6, [r1, #0]
 8010e5c:	602b      	str	r3, [r5, #0]
 8010e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010e62:	bf18      	it	ne
 8010e64:	b236      	sxthne	r6, r6
 8010e66:	e7ef      	b.n	8010e48 <_printf_i+0xbc>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	6820      	ldr	r0, [r4, #0]
 8010e6c:	1d19      	adds	r1, r3, #4
 8010e6e:	6029      	str	r1, [r5, #0]
 8010e70:	0601      	lsls	r1, r0, #24
 8010e72:	d501      	bpl.n	8010e78 <_printf_i+0xec>
 8010e74:	681e      	ldr	r6, [r3, #0]
 8010e76:	e002      	b.n	8010e7e <_printf_i+0xf2>
 8010e78:	0646      	lsls	r6, r0, #25
 8010e7a:	d5fb      	bpl.n	8010e74 <_printf_i+0xe8>
 8010e7c:	881e      	ldrh	r6, [r3, #0]
 8010e7e:	4854      	ldr	r0, [pc, #336]	; (8010fd0 <_printf_i+0x244>)
 8010e80:	2f6f      	cmp	r7, #111	; 0x6f
 8010e82:	bf0c      	ite	eq
 8010e84:	2308      	moveq	r3, #8
 8010e86:	230a      	movne	r3, #10
 8010e88:	2100      	movs	r1, #0
 8010e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e8e:	6865      	ldr	r5, [r4, #4]
 8010e90:	60a5      	str	r5, [r4, #8]
 8010e92:	2d00      	cmp	r5, #0
 8010e94:	bfa2      	ittt	ge
 8010e96:	6821      	ldrge	r1, [r4, #0]
 8010e98:	f021 0104 	bicge.w	r1, r1, #4
 8010e9c:	6021      	strge	r1, [r4, #0]
 8010e9e:	b90e      	cbnz	r6, 8010ea4 <_printf_i+0x118>
 8010ea0:	2d00      	cmp	r5, #0
 8010ea2:	d04d      	beq.n	8010f40 <_printf_i+0x1b4>
 8010ea4:	4615      	mov	r5, r2
 8010ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8010eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8010eae:	5dc7      	ldrb	r7, [r0, r7]
 8010eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010eb4:	4637      	mov	r7, r6
 8010eb6:	42bb      	cmp	r3, r7
 8010eb8:	460e      	mov	r6, r1
 8010eba:	d9f4      	bls.n	8010ea6 <_printf_i+0x11a>
 8010ebc:	2b08      	cmp	r3, #8
 8010ebe:	d10b      	bne.n	8010ed8 <_printf_i+0x14c>
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	07de      	lsls	r6, r3, #31
 8010ec4:	d508      	bpl.n	8010ed8 <_printf_i+0x14c>
 8010ec6:	6923      	ldr	r3, [r4, #16]
 8010ec8:	6861      	ldr	r1, [r4, #4]
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	bfde      	ittt	le
 8010ece:	2330      	movle	r3, #48	; 0x30
 8010ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ed8:	1b52      	subs	r2, r2, r5
 8010eda:	6122      	str	r2, [r4, #16]
 8010edc:	f8cd a000 	str.w	sl, [sp]
 8010ee0:	464b      	mov	r3, r9
 8010ee2:	aa03      	add	r2, sp, #12
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	f7ff fee2 	bl	8010cb0 <_printf_common>
 8010eec:	3001      	adds	r0, #1
 8010eee:	d14c      	bne.n	8010f8a <_printf_i+0x1fe>
 8010ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef4:	b004      	add	sp, #16
 8010ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010efa:	4835      	ldr	r0, [pc, #212]	; (8010fd0 <_printf_i+0x244>)
 8010efc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f00:	6829      	ldr	r1, [r5, #0]
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f08:	6029      	str	r1, [r5, #0]
 8010f0a:	061d      	lsls	r5, r3, #24
 8010f0c:	d514      	bpl.n	8010f38 <_printf_i+0x1ac>
 8010f0e:	07df      	lsls	r7, r3, #31
 8010f10:	bf44      	itt	mi
 8010f12:	f043 0320 	orrmi.w	r3, r3, #32
 8010f16:	6023      	strmi	r3, [r4, #0]
 8010f18:	b91e      	cbnz	r6, 8010f22 <_printf_i+0x196>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	f023 0320 	bic.w	r3, r3, #32
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	2310      	movs	r3, #16
 8010f24:	e7b0      	b.n	8010e88 <_printf_i+0xfc>
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	f043 0320 	orr.w	r3, r3, #32
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	2378      	movs	r3, #120	; 0x78
 8010f30:	4828      	ldr	r0, [pc, #160]	; (8010fd4 <_printf_i+0x248>)
 8010f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f36:	e7e3      	b.n	8010f00 <_printf_i+0x174>
 8010f38:	0659      	lsls	r1, r3, #25
 8010f3a:	bf48      	it	mi
 8010f3c:	b2b6      	uxthmi	r6, r6
 8010f3e:	e7e6      	b.n	8010f0e <_printf_i+0x182>
 8010f40:	4615      	mov	r5, r2
 8010f42:	e7bb      	b.n	8010ebc <_printf_i+0x130>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	6826      	ldr	r6, [r4, #0]
 8010f48:	6961      	ldr	r1, [r4, #20]
 8010f4a:	1d18      	adds	r0, r3, #4
 8010f4c:	6028      	str	r0, [r5, #0]
 8010f4e:	0635      	lsls	r5, r6, #24
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	d501      	bpl.n	8010f58 <_printf_i+0x1cc>
 8010f54:	6019      	str	r1, [r3, #0]
 8010f56:	e002      	b.n	8010f5e <_printf_i+0x1d2>
 8010f58:	0670      	lsls	r0, r6, #25
 8010f5a:	d5fb      	bpl.n	8010f54 <_printf_i+0x1c8>
 8010f5c:	8019      	strh	r1, [r3, #0]
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6123      	str	r3, [r4, #16]
 8010f62:	4615      	mov	r5, r2
 8010f64:	e7ba      	b.n	8010edc <_printf_i+0x150>
 8010f66:	682b      	ldr	r3, [r5, #0]
 8010f68:	1d1a      	adds	r2, r3, #4
 8010f6a:	602a      	str	r2, [r5, #0]
 8010f6c:	681d      	ldr	r5, [r3, #0]
 8010f6e:	6862      	ldr	r2, [r4, #4]
 8010f70:	2100      	movs	r1, #0
 8010f72:	4628      	mov	r0, r5
 8010f74:	f7ef f944 	bl	8000200 <memchr>
 8010f78:	b108      	cbz	r0, 8010f7e <_printf_i+0x1f2>
 8010f7a:	1b40      	subs	r0, r0, r5
 8010f7c:	6060      	str	r0, [r4, #4]
 8010f7e:	6863      	ldr	r3, [r4, #4]
 8010f80:	6123      	str	r3, [r4, #16]
 8010f82:	2300      	movs	r3, #0
 8010f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f88:	e7a8      	b.n	8010edc <_printf_i+0x150>
 8010f8a:	6923      	ldr	r3, [r4, #16]
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	4649      	mov	r1, r9
 8010f90:	4640      	mov	r0, r8
 8010f92:	47d0      	blx	sl
 8010f94:	3001      	adds	r0, #1
 8010f96:	d0ab      	beq.n	8010ef0 <_printf_i+0x164>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	079b      	lsls	r3, r3, #30
 8010f9c:	d413      	bmi.n	8010fc6 <_printf_i+0x23a>
 8010f9e:	68e0      	ldr	r0, [r4, #12]
 8010fa0:	9b03      	ldr	r3, [sp, #12]
 8010fa2:	4298      	cmp	r0, r3
 8010fa4:	bfb8      	it	lt
 8010fa6:	4618      	movlt	r0, r3
 8010fa8:	e7a4      	b.n	8010ef4 <_printf_i+0x168>
 8010faa:	2301      	movs	r3, #1
 8010fac:	4632      	mov	r2, r6
 8010fae:	4649      	mov	r1, r9
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	47d0      	blx	sl
 8010fb4:	3001      	adds	r0, #1
 8010fb6:	d09b      	beq.n	8010ef0 <_printf_i+0x164>
 8010fb8:	3501      	adds	r5, #1
 8010fba:	68e3      	ldr	r3, [r4, #12]
 8010fbc:	9903      	ldr	r1, [sp, #12]
 8010fbe:	1a5b      	subs	r3, r3, r1
 8010fc0:	42ab      	cmp	r3, r5
 8010fc2:	dcf2      	bgt.n	8010faa <_printf_i+0x21e>
 8010fc4:	e7eb      	b.n	8010f9e <_printf_i+0x212>
 8010fc6:	2500      	movs	r5, #0
 8010fc8:	f104 0619 	add.w	r6, r4, #25
 8010fcc:	e7f5      	b.n	8010fba <_printf_i+0x22e>
 8010fce:	bf00      	nop
 8010fd0:	08014aad 	.word	0x08014aad
 8010fd4:	08014abe 	.word	0x08014abe

08010fd8 <_sbrk_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d06      	ldr	r5, [pc, #24]	; (8010ff4 <_sbrk_r+0x1c>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	602b      	str	r3, [r5, #0]
 8010fe4:	f7ef fd52 	bl	8000a8c <_sbrk>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d102      	bne.n	8010ff2 <_sbrk_r+0x1a>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	b103      	cbz	r3, 8010ff2 <_sbrk_r+0x1a>
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	20006d08 	.word	0x20006d08

08010ff8 <__sread>:
 8010ff8:	b510      	push	{r4, lr}
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011000:	f000 fa9e 	bl	8011540 <_read_r>
 8011004:	2800      	cmp	r0, #0
 8011006:	bfab      	itete	ge
 8011008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801100a:	89a3      	ldrhlt	r3, [r4, #12]
 801100c:	181b      	addge	r3, r3, r0
 801100e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011012:	bfac      	ite	ge
 8011014:	6563      	strge	r3, [r4, #84]	; 0x54
 8011016:	81a3      	strhlt	r3, [r4, #12]
 8011018:	bd10      	pop	{r4, pc}

0801101a <__swrite>:
 801101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801101e:	461f      	mov	r7, r3
 8011020:	898b      	ldrh	r3, [r1, #12]
 8011022:	05db      	lsls	r3, r3, #23
 8011024:	4605      	mov	r5, r0
 8011026:	460c      	mov	r4, r1
 8011028:	4616      	mov	r6, r2
 801102a:	d505      	bpl.n	8011038 <__swrite+0x1e>
 801102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011030:	2302      	movs	r3, #2
 8011032:	2200      	movs	r2, #0
 8011034:	f000 f9d0 	bl	80113d8 <_lseek_r>
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801103e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011042:	81a3      	strh	r3, [r4, #12]
 8011044:	4632      	mov	r2, r6
 8011046:	463b      	mov	r3, r7
 8011048:	4628      	mov	r0, r5
 801104a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801104e:	f000 b869 	b.w	8011124 <_write_r>

08011052 <__sseek>:
 8011052:	b510      	push	{r4, lr}
 8011054:	460c      	mov	r4, r1
 8011056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801105a:	f000 f9bd 	bl	80113d8 <_lseek_r>
 801105e:	1c43      	adds	r3, r0, #1
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	bf15      	itete	ne
 8011064:	6560      	strne	r0, [r4, #84]	; 0x54
 8011066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801106a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801106e:	81a3      	strheq	r3, [r4, #12]
 8011070:	bf18      	it	ne
 8011072:	81a3      	strhne	r3, [r4, #12]
 8011074:	bd10      	pop	{r4, pc}

08011076 <__sclose>:
 8011076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801107a:	f000 b8db 	b.w	8011234 <_close_r>
	...

08011080 <__swbuf_r>:
 8011080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011082:	460e      	mov	r6, r1
 8011084:	4614      	mov	r4, r2
 8011086:	4605      	mov	r5, r0
 8011088:	b118      	cbz	r0, 8011092 <__swbuf_r+0x12>
 801108a:	6983      	ldr	r3, [r0, #24]
 801108c:	b90b      	cbnz	r3, 8011092 <__swbuf_r+0x12>
 801108e:	f7ff f9bf 	bl	8010410 <__sinit>
 8011092:	4b21      	ldr	r3, [pc, #132]	; (8011118 <__swbuf_r+0x98>)
 8011094:	429c      	cmp	r4, r3
 8011096:	d12b      	bne.n	80110f0 <__swbuf_r+0x70>
 8011098:	686c      	ldr	r4, [r5, #4]
 801109a:	69a3      	ldr	r3, [r4, #24]
 801109c:	60a3      	str	r3, [r4, #8]
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	071a      	lsls	r2, r3, #28
 80110a2:	d52f      	bpl.n	8011104 <__swbuf_r+0x84>
 80110a4:	6923      	ldr	r3, [r4, #16]
 80110a6:	b36b      	cbz	r3, 8011104 <__swbuf_r+0x84>
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	6820      	ldr	r0, [r4, #0]
 80110ac:	1ac0      	subs	r0, r0, r3
 80110ae:	6963      	ldr	r3, [r4, #20]
 80110b0:	b2f6      	uxtb	r6, r6
 80110b2:	4283      	cmp	r3, r0
 80110b4:	4637      	mov	r7, r6
 80110b6:	dc04      	bgt.n	80110c2 <__swbuf_r+0x42>
 80110b8:	4621      	mov	r1, r4
 80110ba:	4628      	mov	r0, r5
 80110bc:	f000 f950 	bl	8011360 <_fflush_r>
 80110c0:	bb30      	cbnz	r0, 8011110 <__swbuf_r+0x90>
 80110c2:	68a3      	ldr	r3, [r4, #8]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	60a3      	str	r3, [r4, #8]
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	6022      	str	r2, [r4, #0]
 80110ce:	701e      	strb	r6, [r3, #0]
 80110d0:	6963      	ldr	r3, [r4, #20]
 80110d2:	3001      	adds	r0, #1
 80110d4:	4283      	cmp	r3, r0
 80110d6:	d004      	beq.n	80110e2 <__swbuf_r+0x62>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	07db      	lsls	r3, r3, #31
 80110dc:	d506      	bpl.n	80110ec <__swbuf_r+0x6c>
 80110de:	2e0a      	cmp	r6, #10
 80110e0:	d104      	bne.n	80110ec <__swbuf_r+0x6c>
 80110e2:	4621      	mov	r1, r4
 80110e4:	4628      	mov	r0, r5
 80110e6:	f000 f93b 	bl	8011360 <_fflush_r>
 80110ea:	b988      	cbnz	r0, 8011110 <__swbuf_r+0x90>
 80110ec:	4638      	mov	r0, r7
 80110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f0:	4b0a      	ldr	r3, [pc, #40]	; (801111c <__swbuf_r+0x9c>)
 80110f2:	429c      	cmp	r4, r3
 80110f4:	d101      	bne.n	80110fa <__swbuf_r+0x7a>
 80110f6:	68ac      	ldr	r4, [r5, #8]
 80110f8:	e7cf      	b.n	801109a <__swbuf_r+0x1a>
 80110fa:	4b09      	ldr	r3, [pc, #36]	; (8011120 <__swbuf_r+0xa0>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	bf08      	it	eq
 8011100:	68ec      	ldreq	r4, [r5, #12]
 8011102:	e7ca      	b.n	801109a <__swbuf_r+0x1a>
 8011104:	4621      	mov	r1, r4
 8011106:	4628      	mov	r0, r5
 8011108:	f000 f81e 	bl	8011148 <__swsetup_r>
 801110c:	2800      	cmp	r0, #0
 801110e:	d0cb      	beq.n	80110a8 <__swbuf_r+0x28>
 8011110:	f04f 37ff 	mov.w	r7, #4294967295
 8011114:	e7ea      	b.n	80110ec <__swbuf_r+0x6c>
 8011116:	bf00      	nop
 8011118:	08014a5c 	.word	0x08014a5c
 801111c:	08014a7c 	.word	0x08014a7c
 8011120:	08014a3c 	.word	0x08014a3c

08011124 <_write_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d07      	ldr	r5, [pc, #28]	; (8011144 <_write_r+0x20>)
 8011128:	4604      	mov	r4, r0
 801112a:	4608      	mov	r0, r1
 801112c:	4611      	mov	r1, r2
 801112e:	2200      	movs	r2, #0
 8011130:	602a      	str	r2, [r5, #0]
 8011132:	461a      	mov	r2, r3
 8011134:	f7ef fc59 	bl	80009ea <_write>
 8011138:	1c43      	adds	r3, r0, #1
 801113a:	d102      	bne.n	8011142 <_write_r+0x1e>
 801113c:	682b      	ldr	r3, [r5, #0]
 801113e:	b103      	cbz	r3, 8011142 <_write_r+0x1e>
 8011140:	6023      	str	r3, [r4, #0]
 8011142:	bd38      	pop	{r3, r4, r5, pc}
 8011144:	20006d08 	.word	0x20006d08

08011148 <__swsetup_r>:
 8011148:	4b32      	ldr	r3, [pc, #200]	; (8011214 <__swsetup_r+0xcc>)
 801114a:	b570      	push	{r4, r5, r6, lr}
 801114c:	681d      	ldr	r5, [r3, #0]
 801114e:	4606      	mov	r6, r0
 8011150:	460c      	mov	r4, r1
 8011152:	b125      	cbz	r5, 801115e <__swsetup_r+0x16>
 8011154:	69ab      	ldr	r3, [r5, #24]
 8011156:	b913      	cbnz	r3, 801115e <__swsetup_r+0x16>
 8011158:	4628      	mov	r0, r5
 801115a:	f7ff f959 	bl	8010410 <__sinit>
 801115e:	4b2e      	ldr	r3, [pc, #184]	; (8011218 <__swsetup_r+0xd0>)
 8011160:	429c      	cmp	r4, r3
 8011162:	d10f      	bne.n	8011184 <__swsetup_r+0x3c>
 8011164:	686c      	ldr	r4, [r5, #4]
 8011166:	89a3      	ldrh	r3, [r4, #12]
 8011168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801116c:	0719      	lsls	r1, r3, #28
 801116e:	d42c      	bmi.n	80111ca <__swsetup_r+0x82>
 8011170:	06dd      	lsls	r5, r3, #27
 8011172:	d411      	bmi.n	8011198 <__swsetup_r+0x50>
 8011174:	2309      	movs	r3, #9
 8011176:	6033      	str	r3, [r6, #0]
 8011178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801117c:	81a3      	strh	r3, [r4, #12]
 801117e:	f04f 30ff 	mov.w	r0, #4294967295
 8011182:	e03e      	b.n	8011202 <__swsetup_r+0xba>
 8011184:	4b25      	ldr	r3, [pc, #148]	; (801121c <__swsetup_r+0xd4>)
 8011186:	429c      	cmp	r4, r3
 8011188:	d101      	bne.n	801118e <__swsetup_r+0x46>
 801118a:	68ac      	ldr	r4, [r5, #8]
 801118c:	e7eb      	b.n	8011166 <__swsetup_r+0x1e>
 801118e:	4b24      	ldr	r3, [pc, #144]	; (8011220 <__swsetup_r+0xd8>)
 8011190:	429c      	cmp	r4, r3
 8011192:	bf08      	it	eq
 8011194:	68ec      	ldreq	r4, [r5, #12]
 8011196:	e7e6      	b.n	8011166 <__swsetup_r+0x1e>
 8011198:	0758      	lsls	r0, r3, #29
 801119a:	d512      	bpl.n	80111c2 <__swsetup_r+0x7a>
 801119c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801119e:	b141      	cbz	r1, 80111b2 <__swsetup_r+0x6a>
 80111a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111a4:	4299      	cmp	r1, r3
 80111a6:	d002      	beq.n	80111ae <__swsetup_r+0x66>
 80111a8:	4630      	mov	r0, r6
 80111aa:	f7ff f9eb 	bl	8010584 <_free_r>
 80111ae:	2300      	movs	r3, #0
 80111b0:	6363      	str	r3, [r4, #52]	; 0x34
 80111b2:	89a3      	ldrh	r3, [r4, #12]
 80111b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111b8:	81a3      	strh	r3, [r4, #12]
 80111ba:	2300      	movs	r3, #0
 80111bc:	6063      	str	r3, [r4, #4]
 80111be:	6923      	ldr	r3, [r4, #16]
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	f043 0308 	orr.w	r3, r3, #8
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	6923      	ldr	r3, [r4, #16]
 80111cc:	b94b      	cbnz	r3, 80111e2 <__swsetup_r+0x9a>
 80111ce:	89a3      	ldrh	r3, [r4, #12]
 80111d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111d8:	d003      	beq.n	80111e2 <__swsetup_r+0x9a>
 80111da:	4621      	mov	r1, r4
 80111dc:	4630      	mov	r0, r6
 80111de:	f000 f933 	bl	8011448 <__smakebuf_r>
 80111e2:	89a0      	ldrh	r0, [r4, #12]
 80111e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111e8:	f010 0301 	ands.w	r3, r0, #1
 80111ec:	d00a      	beq.n	8011204 <__swsetup_r+0xbc>
 80111ee:	2300      	movs	r3, #0
 80111f0:	60a3      	str	r3, [r4, #8]
 80111f2:	6963      	ldr	r3, [r4, #20]
 80111f4:	425b      	negs	r3, r3
 80111f6:	61a3      	str	r3, [r4, #24]
 80111f8:	6923      	ldr	r3, [r4, #16]
 80111fa:	b943      	cbnz	r3, 801120e <__swsetup_r+0xc6>
 80111fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011200:	d1ba      	bne.n	8011178 <__swsetup_r+0x30>
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	0781      	lsls	r1, r0, #30
 8011206:	bf58      	it	pl
 8011208:	6963      	ldrpl	r3, [r4, #20]
 801120a:	60a3      	str	r3, [r4, #8]
 801120c:	e7f4      	b.n	80111f8 <__swsetup_r+0xb0>
 801120e:	2000      	movs	r0, #0
 8011210:	e7f7      	b.n	8011202 <__swsetup_r+0xba>
 8011212:	bf00      	nop
 8011214:	2000001c 	.word	0x2000001c
 8011218:	08014a5c 	.word	0x08014a5c
 801121c:	08014a7c 	.word	0x08014a7c
 8011220:	08014a3c 	.word	0x08014a3c

08011224 <abort>:
 8011224:	b508      	push	{r3, lr}
 8011226:	2006      	movs	r0, #6
 8011228:	f000 f9c4 	bl	80115b4 <raise>
 801122c:	2001      	movs	r0, #1
 801122e:	f7ef fbb5 	bl	800099c <_exit>
	...

08011234 <_close_r>:
 8011234:	b538      	push	{r3, r4, r5, lr}
 8011236:	4d06      	ldr	r5, [pc, #24]	; (8011250 <_close_r+0x1c>)
 8011238:	2300      	movs	r3, #0
 801123a:	4604      	mov	r4, r0
 801123c:	4608      	mov	r0, r1
 801123e:	602b      	str	r3, [r5, #0]
 8011240:	f7ef fbef 	bl	8000a22 <_close>
 8011244:	1c43      	adds	r3, r0, #1
 8011246:	d102      	bne.n	801124e <_close_r+0x1a>
 8011248:	682b      	ldr	r3, [r5, #0]
 801124a:	b103      	cbz	r3, 801124e <_close_r+0x1a>
 801124c:	6023      	str	r3, [r4, #0]
 801124e:	bd38      	pop	{r3, r4, r5, pc}
 8011250:	20006d08 	.word	0x20006d08

08011254 <__sflush_r>:
 8011254:	898a      	ldrh	r2, [r1, #12]
 8011256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801125a:	4605      	mov	r5, r0
 801125c:	0710      	lsls	r0, r2, #28
 801125e:	460c      	mov	r4, r1
 8011260:	d458      	bmi.n	8011314 <__sflush_r+0xc0>
 8011262:	684b      	ldr	r3, [r1, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	dc05      	bgt.n	8011274 <__sflush_r+0x20>
 8011268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801126a:	2b00      	cmp	r3, #0
 801126c:	dc02      	bgt.n	8011274 <__sflush_r+0x20>
 801126e:	2000      	movs	r0, #0
 8011270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011276:	2e00      	cmp	r6, #0
 8011278:	d0f9      	beq.n	801126e <__sflush_r+0x1a>
 801127a:	2300      	movs	r3, #0
 801127c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011280:	682f      	ldr	r7, [r5, #0]
 8011282:	602b      	str	r3, [r5, #0]
 8011284:	d032      	beq.n	80112ec <__sflush_r+0x98>
 8011286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011288:	89a3      	ldrh	r3, [r4, #12]
 801128a:	075a      	lsls	r2, r3, #29
 801128c:	d505      	bpl.n	801129a <__sflush_r+0x46>
 801128e:	6863      	ldr	r3, [r4, #4]
 8011290:	1ac0      	subs	r0, r0, r3
 8011292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011294:	b10b      	cbz	r3, 801129a <__sflush_r+0x46>
 8011296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011298:	1ac0      	subs	r0, r0, r3
 801129a:	2300      	movs	r3, #0
 801129c:	4602      	mov	r2, r0
 801129e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112a0:	6a21      	ldr	r1, [r4, #32]
 80112a2:	4628      	mov	r0, r5
 80112a4:	47b0      	blx	r6
 80112a6:	1c43      	adds	r3, r0, #1
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	d106      	bne.n	80112ba <__sflush_r+0x66>
 80112ac:	6829      	ldr	r1, [r5, #0]
 80112ae:	291d      	cmp	r1, #29
 80112b0:	d82c      	bhi.n	801130c <__sflush_r+0xb8>
 80112b2:	4a2a      	ldr	r2, [pc, #168]	; (801135c <__sflush_r+0x108>)
 80112b4:	40ca      	lsrs	r2, r1
 80112b6:	07d6      	lsls	r6, r2, #31
 80112b8:	d528      	bpl.n	801130c <__sflush_r+0xb8>
 80112ba:	2200      	movs	r2, #0
 80112bc:	6062      	str	r2, [r4, #4]
 80112be:	04d9      	lsls	r1, r3, #19
 80112c0:	6922      	ldr	r2, [r4, #16]
 80112c2:	6022      	str	r2, [r4, #0]
 80112c4:	d504      	bpl.n	80112d0 <__sflush_r+0x7c>
 80112c6:	1c42      	adds	r2, r0, #1
 80112c8:	d101      	bne.n	80112ce <__sflush_r+0x7a>
 80112ca:	682b      	ldr	r3, [r5, #0]
 80112cc:	b903      	cbnz	r3, 80112d0 <__sflush_r+0x7c>
 80112ce:	6560      	str	r0, [r4, #84]	; 0x54
 80112d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112d2:	602f      	str	r7, [r5, #0]
 80112d4:	2900      	cmp	r1, #0
 80112d6:	d0ca      	beq.n	801126e <__sflush_r+0x1a>
 80112d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112dc:	4299      	cmp	r1, r3
 80112de:	d002      	beq.n	80112e6 <__sflush_r+0x92>
 80112e0:	4628      	mov	r0, r5
 80112e2:	f7ff f94f 	bl	8010584 <_free_r>
 80112e6:	2000      	movs	r0, #0
 80112e8:	6360      	str	r0, [r4, #52]	; 0x34
 80112ea:	e7c1      	b.n	8011270 <__sflush_r+0x1c>
 80112ec:	6a21      	ldr	r1, [r4, #32]
 80112ee:	2301      	movs	r3, #1
 80112f0:	4628      	mov	r0, r5
 80112f2:	47b0      	blx	r6
 80112f4:	1c41      	adds	r1, r0, #1
 80112f6:	d1c7      	bne.n	8011288 <__sflush_r+0x34>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0c4      	beq.n	8011288 <__sflush_r+0x34>
 80112fe:	2b1d      	cmp	r3, #29
 8011300:	d001      	beq.n	8011306 <__sflush_r+0xb2>
 8011302:	2b16      	cmp	r3, #22
 8011304:	d101      	bne.n	801130a <__sflush_r+0xb6>
 8011306:	602f      	str	r7, [r5, #0]
 8011308:	e7b1      	b.n	801126e <__sflush_r+0x1a>
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011310:	81a3      	strh	r3, [r4, #12]
 8011312:	e7ad      	b.n	8011270 <__sflush_r+0x1c>
 8011314:	690f      	ldr	r7, [r1, #16]
 8011316:	2f00      	cmp	r7, #0
 8011318:	d0a9      	beq.n	801126e <__sflush_r+0x1a>
 801131a:	0793      	lsls	r3, r2, #30
 801131c:	680e      	ldr	r6, [r1, #0]
 801131e:	bf08      	it	eq
 8011320:	694b      	ldreq	r3, [r1, #20]
 8011322:	600f      	str	r7, [r1, #0]
 8011324:	bf18      	it	ne
 8011326:	2300      	movne	r3, #0
 8011328:	eba6 0807 	sub.w	r8, r6, r7
 801132c:	608b      	str	r3, [r1, #8]
 801132e:	f1b8 0f00 	cmp.w	r8, #0
 8011332:	dd9c      	ble.n	801126e <__sflush_r+0x1a>
 8011334:	6a21      	ldr	r1, [r4, #32]
 8011336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011338:	4643      	mov	r3, r8
 801133a:	463a      	mov	r2, r7
 801133c:	4628      	mov	r0, r5
 801133e:	47b0      	blx	r6
 8011340:	2800      	cmp	r0, #0
 8011342:	dc06      	bgt.n	8011352 <__sflush_r+0xfe>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	f04f 30ff 	mov.w	r0, #4294967295
 8011350:	e78e      	b.n	8011270 <__sflush_r+0x1c>
 8011352:	4407      	add	r7, r0
 8011354:	eba8 0800 	sub.w	r8, r8, r0
 8011358:	e7e9      	b.n	801132e <__sflush_r+0xda>
 801135a:	bf00      	nop
 801135c:	20400001 	.word	0x20400001

08011360 <_fflush_r>:
 8011360:	b538      	push	{r3, r4, r5, lr}
 8011362:	690b      	ldr	r3, [r1, #16]
 8011364:	4605      	mov	r5, r0
 8011366:	460c      	mov	r4, r1
 8011368:	b913      	cbnz	r3, 8011370 <_fflush_r+0x10>
 801136a:	2500      	movs	r5, #0
 801136c:	4628      	mov	r0, r5
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	b118      	cbz	r0, 801137a <_fflush_r+0x1a>
 8011372:	6983      	ldr	r3, [r0, #24]
 8011374:	b90b      	cbnz	r3, 801137a <_fflush_r+0x1a>
 8011376:	f7ff f84b 	bl	8010410 <__sinit>
 801137a:	4b14      	ldr	r3, [pc, #80]	; (80113cc <_fflush_r+0x6c>)
 801137c:	429c      	cmp	r4, r3
 801137e:	d11b      	bne.n	80113b8 <_fflush_r+0x58>
 8011380:	686c      	ldr	r4, [r5, #4]
 8011382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d0ef      	beq.n	801136a <_fflush_r+0xa>
 801138a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801138c:	07d0      	lsls	r0, r2, #31
 801138e:	d404      	bmi.n	801139a <_fflush_r+0x3a>
 8011390:	0599      	lsls	r1, r3, #22
 8011392:	d402      	bmi.n	801139a <_fflush_r+0x3a>
 8011394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011396:	f7ff f8eb 	bl	8010570 <__retarget_lock_acquire_recursive>
 801139a:	4628      	mov	r0, r5
 801139c:	4621      	mov	r1, r4
 801139e:	f7ff ff59 	bl	8011254 <__sflush_r>
 80113a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113a4:	07da      	lsls	r2, r3, #31
 80113a6:	4605      	mov	r5, r0
 80113a8:	d4e0      	bmi.n	801136c <_fflush_r+0xc>
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	059b      	lsls	r3, r3, #22
 80113ae:	d4dd      	bmi.n	801136c <_fflush_r+0xc>
 80113b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113b2:	f7ff f8de 	bl	8010572 <__retarget_lock_release_recursive>
 80113b6:	e7d9      	b.n	801136c <_fflush_r+0xc>
 80113b8:	4b05      	ldr	r3, [pc, #20]	; (80113d0 <_fflush_r+0x70>)
 80113ba:	429c      	cmp	r4, r3
 80113bc:	d101      	bne.n	80113c2 <_fflush_r+0x62>
 80113be:	68ac      	ldr	r4, [r5, #8]
 80113c0:	e7df      	b.n	8011382 <_fflush_r+0x22>
 80113c2:	4b04      	ldr	r3, [pc, #16]	; (80113d4 <_fflush_r+0x74>)
 80113c4:	429c      	cmp	r4, r3
 80113c6:	bf08      	it	eq
 80113c8:	68ec      	ldreq	r4, [r5, #12]
 80113ca:	e7da      	b.n	8011382 <_fflush_r+0x22>
 80113cc:	08014a5c 	.word	0x08014a5c
 80113d0:	08014a7c 	.word	0x08014a7c
 80113d4:	08014a3c 	.word	0x08014a3c

080113d8 <_lseek_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4d07      	ldr	r5, [pc, #28]	; (80113f8 <_lseek_r+0x20>)
 80113dc:	4604      	mov	r4, r0
 80113de:	4608      	mov	r0, r1
 80113e0:	4611      	mov	r1, r2
 80113e2:	2200      	movs	r2, #0
 80113e4:	602a      	str	r2, [r5, #0]
 80113e6:	461a      	mov	r2, r3
 80113e8:	f7ef fb42 	bl	8000a70 <_lseek>
 80113ec:	1c43      	adds	r3, r0, #1
 80113ee:	d102      	bne.n	80113f6 <_lseek_r+0x1e>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	b103      	cbz	r3, 80113f6 <_lseek_r+0x1e>
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	bd38      	pop	{r3, r4, r5, pc}
 80113f8:	20006d08 	.word	0x20006d08

080113fc <__swhatbuf_r>:
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	460e      	mov	r6, r1
 8011400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011404:	2900      	cmp	r1, #0
 8011406:	b096      	sub	sp, #88	; 0x58
 8011408:	4614      	mov	r4, r2
 801140a:	461d      	mov	r5, r3
 801140c:	da08      	bge.n	8011420 <__swhatbuf_r+0x24>
 801140e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011412:	2200      	movs	r2, #0
 8011414:	602a      	str	r2, [r5, #0]
 8011416:	061a      	lsls	r2, r3, #24
 8011418:	d410      	bmi.n	801143c <__swhatbuf_r+0x40>
 801141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801141e:	e00e      	b.n	801143e <__swhatbuf_r+0x42>
 8011420:	466a      	mov	r2, sp
 8011422:	f000 f8e3 	bl	80115ec <_fstat_r>
 8011426:	2800      	cmp	r0, #0
 8011428:	dbf1      	blt.n	801140e <__swhatbuf_r+0x12>
 801142a:	9a01      	ldr	r2, [sp, #4]
 801142c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011430:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011434:	425a      	negs	r2, r3
 8011436:	415a      	adcs	r2, r3
 8011438:	602a      	str	r2, [r5, #0]
 801143a:	e7ee      	b.n	801141a <__swhatbuf_r+0x1e>
 801143c:	2340      	movs	r3, #64	; 0x40
 801143e:	2000      	movs	r0, #0
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	b016      	add	sp, #88	; 0x58
 8011444:	bd70      	pop	{r4, r5, r6, pc}
	...

08011448 <__smakebuf_r>:
 8011448:	898b      	ldrh	r3, [r1, #12]
 801144a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801144c:	079d      	lsls	r5, r3, #30
 801144e:	4606      	mov	r6, r0
 8011450:	460c      	mov	r4, r1
 8011452:	d507      	bpl.n	8011464 <__smakebuf_r+0x1c>
 8011454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	6123      	str	r3, [r4, #16]
 801145c:	2301      	movs	r3, #1
 801145e:	6163      	str	r3, [r4, #20]
 8011460:	b002      	add	sp, #8
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	ab01      	add	r3, sp, #4
 8011466:	466a      	mov	r2, sp
 8011468:	f7ff ffc8 	bl	80113fc <__swhatbuf_r>
 801146c:	9900      	ldr	r1, [sp, #0]
 801146e:	4605      	mov	r5, r0
 8011470:	4630      	mov	r0, r6
 8011472:	f7ff f8f3 	bl	801065c <_malloc_r>
 8011476:	b948      	cbnz	r0, 801148c <__smakebuf_r+0x44>
 8011478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147c:	059a      	lsls	r2, r3, #22
 801147e:	d4ef      	bmi.n	8011460 <__smakebuf_r+0x18>
 8011480:	f023 0303 	bic.w	r3, r3, #3
 8011484:	f043 0302 	orr.w	r3, r3, #2
 8011488:	81a3      	strh	r3, [r4, #12]
 801148a:	e7e3      	b.n	8011454 <__smakebuf_r+0xc>
 801148c:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <__smakebuf_r+0x7c>)
 801148e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	6020      	str	r0, [r4, #0]
 8011494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011498:	81a3      	strh	r3, [r4, #12]
 801149a:	9b00      	ldr	r3, [sp, #0]
 801149c:	6163      	str	r3, [r4, #20]
 801149e:	9b01      	ldr	r3, [sp, #4]
 80114a0:	6120      	str	r0, [r4, #16]
 80114a2:	b15b      	cbz	r3, 80114bc <__smakebuf_r+0x74>
 80114a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114a8:	4630      	mov	r0, r6
 80114aa:	f000 f8b1 	bl	8011610 <_isatty_r>
 80114ae:	b128      	cbz	r0, 80114bc <__smakebuf_r+0x74>
 80114b0:	89a3      	ldrh	r3, [r4, #12]
 80114b2:	f023 0303 	bic.w	r3, r3, #3
 80114b6:	f043 0301 	orr.w	r3, r3, #1
 80114ba:	81a3      	strh	r3, [r4, #12]
 80114bc:	89a0      	ldrh	r0, [r4, #12]
 80114be:	4305      	orrs	r5, r0
 80114c0:	81a5      	strh	r5, [r4, #12]
 80114c2:	e7cd      	b.n	8011460 <__smakebuf_r+0x18>
 80114c4:	080103a9 	.word	0x080103a9

080114c8 <__malloc_lock>:
 80114c8:	4801      	ldr	r0, [pc, #4]	; (80114d0 <__malloc_lock+0x8>)
 80114ca:	f7ff b851 	b.w	8010570 <__retarget_lock_acquire_recursive>
 80114ce:	bf00      	nop
 80114d0:	20006d0c 	.word	0x20006d0c

080114d4 <__malloc_unlock>:
 80114d4:	4801      	ldr	r0, [pc, #4]	; (80114dc <__malloc_unlock+0x8>)
 80114d6:	f7ff b84c 	b.w	8010572 <__retarget_lock_release_recursive>
 80114da:	bf00      	nop
 80114dc:	20006d0c 	.word	0x20006d0c

080114e0 <_realloc_r>:
 80114e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e4:	4680      	mov	r8, r0
 80114e6:	4614      	mov	r4, r2
 80114e8:	460e      	mov	r6, r1
 80114ea:	b921      	cbnz	r1, 80114f6 <_realloc_r+0x16>
 80114ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114f0:	4611      	mov	r1, r2
 80114f2:	f7ff b8b3 	b.w	801065c <_malloc_r>
 80114f6:	b92a      	cbnz	r2, 8011504 <_realloc_r+0x24>
 80114f8:	f7ff f844 	bl	8010584 <_free_r>
 80114fc:	4625      	mov	r5, r4
 80114fe:	4628      	mov	r0, r5
 8011500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011504:	f000 f894 	bl	8011630 <_malloc_usable_size_r>
 8011508:	4284      	cmp	r4, r0
 801150a:	4607      	mov	r7, r0
 801150c:	d802      	bhi.n	8011514 <_realloc_r+0x34>
 801150e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011512:	d812      	bhi.n	801153a <_realloc_r+0x5a>
 8011514:	4621      	mov	r1, r4
 8011516:	4640      	mov	r0, r8
 8011518:	f7ff f8a0 	bl	801065c <_malloc_r>
 801151c:	4605      	mov	r5, r0
 801151e:	2800      	cmp	r0, #0
 8011520:	d0ed      	beq.n	80114fe <_realloc_r+0x1e>
 8011522:	42bc      	cmp	r4, r7
 8011524:	4622      	mov	r2, r4
 8011526:	4631      	mov	r1, r6
 8011528:	bf28      	it	cs
 801152a:	463a      	movcs	r2, r7
 801152c:	f7fe fe32 	bl	8010194 <memcpy>
 8011530:	4631      	mov	r1, r6
 8011532:	4640      	mov	r0, r8
 8011534:	f7ff f826 	bl	8010584 <_free_r>
 8011538:	e7e1      	b.n	80114fe <_realloc_r+0x1e>
 801153a:	4635      	mov	r5, r6
 801153c:	e7df      	b.n	80114fe <_realloc_r+0x1e>
	...

08011540 <_read_r>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	4d07      	ldr	r5, [pc, #28]	; (8011560 <_read_r+0x20>)
 8011544:	4604      	mov	r4, r0
 8011546:	4608      	mov	r0, r1
 8011548:	4611      	mov	r1, r2
 801154a:	2200      	movs	r2, #0
 801154c:	602a      	str	r2, [r5, #0]
 801154e:	461a      	mov	r2, r3
 8011550:	f7ef fa2e 	bl	80009b0 <_read>
 8011554:	1c43      	adds	r3, r0, #1
 8011556:	d102      	bne.n	801155e <_read_r+0x1e>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	b103      	cbz	r3, 801155e <_read_r+0x1e>
 801155c:	6023      	str	r3, [r4, #0]
 801155e:	bd38      	pop	{r3, r4, r5, pc}
 8011560:	20006d08 	.word	0x20006d08

08011564 <_raise_r>:
 8011564:	291f      	cmp	r1, #31
 8011566:	b538      	push	{r3, r4, r5, lr}
 8011568:	4604      	mov	r4, r0
 801156a:	460d      	mov	r5, r1
 801156c:	d904      	bls.n	8011578 <_raise_r+0x14>
 801156e:	2316      	movs	r3, #22
 8011570:	6003      	str	r3, [r0, #0]
 8011572:	f04f 30ff 	mov.w	r0, #4294967295
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801157a:	b112      	cbz	r2, 8011582 <_raise_r+0x1e>
 801157c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011580:	b94b      	cbnz	r3, 8011596 <_raise_r+0x32>
 8011582:	4620      	mov	r0, r4
 8011584:	f000 f830 	bl	80115e8 <_getpid_r>
 8011588:	462a      	mov	r2, r5
 801158a:	4601      	mov	r1, r0
 801158c:	4620      	mov	r0, r4
 801158e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011592:	f000 b817 	b.w	80115c4 <_kill_r>
 8011596:	2b01      	cmp	r3, #1
 8011598:	d00a      	beq.n	80115b0 <_raise_r+0x4c>
 801159a:	1c59      	adds	r1, r3, #1
 801159c:	d103      	bne.n	80115a6 <_raise_r+0x42>
 801159e:	2316      	movs	r3, #22
 80115a0:	6003      	str	r3, [r0, #0]
 80115a2:	2001      	movs	r0, #1
 80115a4:	e7e7      	b.n	8011576 <_raise_r+0x12>
 80115a6:	2400      	movs	r4, #0
 80115a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115ac:	4628      	mov	r0, r5
 80115ae:	4798      	blx	r3
 80115b0:	2000      	movs	r0, #0
 80115b2:	e7e0      	b.n	8011576 <_raise_r+0x12>

080115b4 <raise>:
 80115b4:	4b02      	ldr	r3, [pc, #8]	; (80115c0 <raise+0xc>)
 80115b6:	4601      	mov	r1, r0
 80115b8:	6818      	ldr	r0, [r3, #0]
 80115ba:	f7ff bfd3 	b.w	8011564 <_raise_r>
 80115be:	bf00      	nop
 80115c0:	2000001c 	.word	0x2000001c

080115c4 <_kill_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d07      	ldr	r5, [pc, #28]	; (80115e4 <_kill_r+0x20>)
 80115c8:	2300      	movs	r3, #0
 80115ca:	4604      	mov	r4, r0
 80115cc:	4608      	mov	r0, r1
 80115ce:	4611      	mov	r1, r2
 80115d0:	602b      	str	r3, [r5, #0]
 80115d2:	f7ef f9d1 	bl	8000978 <_kill>
 80115d6:	1c43      	adds	r3, r0, #1
 80115d8:	d102      	bne.n	80115e0 <_kill_r+0x1c>
 80115da:	682b      	ldr	r3, [r5, #0]
 80115dc:	b103      	cbz	r3, 80115e0 <_kill_r+0x1c>
 80115de:	6023      	str	r3, [r4, #0]
 80115e0:	bd38      	pop	{r3, r4, r5, pc}
 80115e2:	bf00      	nop
 80115e4:	20006d08 	.word	0x20006d08

080115e8 <_getpid_r>:
 80115e8:	f7ef b9be 	b.w	8000968 <_getpid>

080115ec <_fstat_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d07      	ldr	r5, [pc, #28]	; (801160c <_fstat_r+0x20>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	4611      	mov	r1, r2
 80115f8:	602b      	str	r3, [r5, #0]
 80115fa:	f7ef fa1e 	bl	8000a3a <_fstat>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	d102      	bne.n	8011608 <_fstat_r+0x1c>
 8011602:	682b      	ldr	r3, [r5, #0]
 8011604:	b103      	cbz	r3, 8011608 <_fstat_r+0x1c>
 8011606:	6023      	str	r3, [r4, #0]
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop
 801160c:	20006d08 	.word	0x20006d08

08011610 <_isatty_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4d06      	ldr	r5, [pc, #24]	; (801162c <_isatty_r+0x1c>)
 8011614:	2300      	movs	r3, #0
 8011616:	4604      	mov	r4, r0
 8011618:	4608      	mov	r0, r1
 801161a:	602b      	str	r3, [r5, #0]
 801161c:	f7ef fa1d 	bl	8000a5a <_isatty>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d102      	bne.n	801162a <_isatty_r+0x1a>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	b103      	cbz	r3, 801162a <_isatty_r+0x1a>
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	20006d08 	.word	0x20006d08

08011630 <_malloc_usable_size_r>:
 8011630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011634:	1f18      	subs	r0, r3, #4
 8011636:	2b00      	cmp	r3, #0
 8011638:	bfbc      	itt	lt
 801163a:	580b      	ldrlt	r3, [r1, r0]
 801163c:	18c0      	addlt	r0, r0, r3
 801163e:	4770      	bx	lr

08011640 <_init>:
 8011640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011642:	bf00      	nop
 8011644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011646:	bc08      	pop	{r3}
 8011648:	469e      	mov	lr, r3
 801164a:	4770      	bx	lr

0801164c <_fini>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	bf00      	nop
 8011650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011652:	bc08      	pop	{r3}
 8011654:	469e      	mov	lr, r3
 8011656:	4770      	bx	lr
