
Ethernet_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033c8  08010fd4  08010fd4  00020fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801439c  0801439c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801439c  0801439c  0002439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143a4  080143a4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143a4  080143a4  000243a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143a8  080143a8  000243a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080143ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c98  20000080  0801442c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006d18  0801442c  00036d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b2f9  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005378  00000000  00000000  0005b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  00060728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  000618a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d2fb  00000000  00000000  00062958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cf98  00000000  00000000  0008fc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d94c4  00000000  00000000  000acbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001860af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  0018612c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010fbc 	.word	0x08010fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08010fbc 	.word	0x08010fbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LedCGIhandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
    uint32_t i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

    if (iIndex == 0) {
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10b      	bne.n	80005d0 <LedCGIhandler+0x30>

        //turning the LED lights off
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005be:	4824      	ldr	r0, [pc, #144]	; (8000650 <LedCGIhandler+0xb0>)
 80005c0:	f002 f93a 	bl	8002838 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4821      	ldr	r0, [pc, #132]	; (8000650 <LedCGIhandler+0xb0>)
 80005cc:	f002 f934 	bl	8002838 <HAL_GPIO_WritePin>

    }

    for (i = 0; i < iNumParams; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	e033      	b.n	800063e <LedCGIhandler+0x9e>

        if (strcmp(pcParam[i], "led") == 0)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	491c      	ldr	r1, [pc, #112]	; (8000654 <LedCGIhandler+0xb4>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf4 	bl	80001d0 <strcmp>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d124      	bne.n	8000638 <LedCGIhandler+0x98>

        {

            if (strcmp(pcValue[i], "1") == 0) {
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4917      	ldr	r1, [pc, #92]	; (8000658 <LedCGIhandler+0xb8>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strcmp>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d106      	bne.n	8000614 <LedCGIhandler+0x74>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <LedCGIhandler+0xb0>)
 800060e:	f002 f913 	bl	8002838 <HAL_GPIO_WritePin>
 8000612:	e011      	b.n	8000638 <LedCGIhandler+0x98>
            }

            else if (strcmp(pcValue[i], "2") == 0) {
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	490f      	ldr	r1, [pc, #60]	; (800065c <LedCGIhandler+0xbc>)
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd5 	bl	80001d0 <strcmp>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <LedCGIhandler+0x98>

                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <LedCGIhandler+0xb0>)
 8000634:	f002 f900 	bl	8002838 <HAL_GPIO_WritePin>
    for (i = 0; i < iNumParams; i++) {
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	429a      	cmp	r2, r3
 8000644:	d3c7      	bcc.n	80005d6 <LedCGIhandler+0x36>
            }

        }

    }
    return "/index2.html";
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <LedCGIhandler+0xc0>)
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020c00 	.word	0x40020c00
 8000654:	08010ff0 	.word	0x08010ff0
 8000658:	08010ff4 	.word	0x08010ff4
 800065c:	08010ff8 	.word	0x08010ff8
 8000660:	08010ffc 	.word	0x08010ffc

08000664 <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen)
{
 8000664:	b4b0      	push	{r4, r5, r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]

	if(iIndex == 0)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10a      	bne.n	800068c <mySSIHandler+0x28>
	{
		sprintf(pcInsert,"1234 ABC");
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	490d      	ldr	r1, [pc, #52]	; (80006b0 <mySSIHandler+0x4c>)
 800067a:	461a      	mov	r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	cb03      	ldmia	r3!, {r0, r1}
 8000680:	6010      	str	r0, [r2, #0]
 8000682:	6051      	str	r1, [r2, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	7213      	strb	r3, [r2, #8]
		return 8;
 8000688:	2308      	movs	r3, #8
 800068a:	e00b      	b.n	80006a4 <mySSIHandler+0x40>
	}
	else
	{
		sprintf(pcInsert,"ADC Volagte 3.300 V");
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <mySSIHandler+0x50>)
 8000690:	461d      	mov	r5, r3
 8000692:	4614      	mov	r4, r2
 8000694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000696:	6028      	str	r0, [r5, #0]
 8000698:	6069      	str	r1, [r5, #4]
 800069a:	60aa      	str	r2, [r5, #8]
 800069c:	60eb      	str	r3, [r5, #12]
 800069e:	6820      	ldr	r0, [r4, #0]
 80006a0:	6128      	str	r0, [r5, #16]
		return 19;
 80006a2:	2313      	movs	r3, #19
	}

	return 0;
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bcb0      	pop	{r4, r5, r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	0801100c 	.word	0x0801100c
 80006b4:	08011018 	.word	0x08011018

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fc82 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f828 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f890 	bl	80007e8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006c8:	f002 fd0a 	bl	80030e0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80006cc:	f000 fa0a 	bl	8000ae4 <tcp_echoserver_init>
  udp_echoserver_init();
 80006d0:	f000 fc0e 	bl	8000ef0 <udp_echoserver_init>
  httpd_init();
 80006d4:	f004 fcca 	bl	800506c <httpd_init>

  theCGItable[0] = LedCGI;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <main+0x4c>)
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <main+0x50>)
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(theCGItable, 1);
 80006e4:	2101      	movs	r1, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <main+0x4c>)
 80006e8:	f004 fd22 	bl	8005130 <http_set_cgi_handlers>

  http_set_ssi_handler(mySSIHandler, (char const **) theSSItags, 2);
 80006ec:	2202      	movs	r2, #2
 80006ee:	4907      	ldr	r1, [pc, #28]	; (800070c <main+0x54>)
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <main+0x58>)
 80006f2:	f004 fcdb 	bl	80050ac <http_set_ssi_handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80006f6:	f002 fe25 	bl	8003344 <MX_LWIP_Process>
	  HAL_Delay(50);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fcd4 	bl	80010a8 <HAL_Delay>
	  MX_LWIP_Process();
 8000700:	e7f9      	b.n	80006f6 <main+0x3e>
 8000702:	bf00      	nop
 8000704:	20000674 	.word	0x20000674
 8000708:	08013d84 	.word	0x08013d84
 800070c:	20000000 	.word	0x20000000
 8000710:	08000665 	.word	0x08000665

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f00f fd02 	bl	801012c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000788:	23a8      	movs	r3, #168	; 0xa8
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f002 f867 	bl	800286c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f88e 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fac0 	bl	8002d4c <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f877 	bl	80008c4 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xd4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000892:	f001 ffd1 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000896:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xd8>)
 80008b0:	f001 fe28 	bl	8002504 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 fb76 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e00a      	b.n	80009a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000992:	f3af 8000 	nop.w
 8000996:	4601      	mov	r1, r0
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	60ba      	str	r2, [r7, #8]
 800099e:	b2ca      	uxtb	r2, r1
 80009a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf0      	blt.n	8000992 <_read+0x12>
	}

return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e009      	b.n	80009e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf1      	blt.n	80009cc <_write+0x12>
	}
	return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:

int _close(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x16>
		heap_end = &end;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <_sbrk+0x50>)
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <_sbrk+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <_sbrk+0x50>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <_sbrk+0x50>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	466a      	mov	r2, sp
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d905      	bls.n	8000a92 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_sbrk+0x58>)
 8000a88:	220c      	movs	r2, #12
 8000a8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	e006      	b.n	8000aa0 <_sbrk+0x44>
	}

	heap_end += incr;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <_sbrk+0x50>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <_sbrk+0x50>)
 8000a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	20006d18 	.word	0x20006d18
 8000ab4:	20006d14 	.word	0x20006d14

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SystemInit+0x28>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <SystemInit+0x28>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SystemInit+0x28>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000aea:	f007 fca7 	bl	800843c <tcp_new>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000af2:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d022      	beq.n	8000b42 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2207      	movs	r2, #7
 8000b02:	4913      	ldr	r1, [pc, #76]	; (8000b50 <tcp_echoserver_init+0x6c>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f006 fbf9 	bl	80072fc <tcp_bind>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 fca5 	bl	800746c <tcp_listen_with_backlog>
 8000b22:	4602      	mov	r2, r0
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000b26:	601a      	str	r2, [r3, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4909      	ldr	r1, [pc, #36]	; (8000b54 <tcp_echoserver_init+0x70>)
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fd12 	bl	8008558 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000b34:	e005      	b.n	8000b42 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <tcp_echoserver_init+0x68>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f005 f833 	bl	8005ba8 <memp_free>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000a0 	.word	0x200000a0
 8000b50:	080142f0 	.word	0x080142f0
 8000b54:	08000b59 	.word	0x08000b59

08000b58 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b66:	2101      	movs	r1, #1
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f007 fa75 	bl	8008058 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f004 fe60 	bl	8005834 <mem_malloc>
 8000b74:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d01f      	beq.n	8000bbc <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000b94:	6939      	ldr	r1, [r7, #16]
 8000b96:	68b8      	ldr	r0, [r7, #8]
 8000b98:	f007 fc66 	bl	8008468 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000b9c:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <tcp_echoserver_accept+0x7c>)
 8000b9e:	68b8      	ldr	r0, [r7, #8]
 8000ba0:	f007 fc74 	bl	800848c <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <tcp_echoserver_accept+0x80>)
 8000ba6:	68b8      	ldr	r0, [r7, #8]
 8000ba8:	f007 fcb4 	bl	8008514 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	490b      	ldr	r1, [pc, #44]	; (8000bdc <tcp_echoserver_accept+0x84>)
 8000bb0:	68b8      	ldr	r0, [r7, #8]
 8000bb2:	f007 fce9 	bl	8008588 <tcp_poll>
    
    ret_err = ERR_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	75fb      	strb	r3, [r7, #23]
 8000bba:	e005      	b.n	8000bc8 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f000 f96f 	bl	8000ea2 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000bc4:	23ff      	movs	r3, #255	; 0xff
 8000bc6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08000be1 	.word	0x08000be1
 8000bd8:	08000d29 	.word	0x08000d29
 8000bdc:	08000d4d 	.word	0x08000d4d

08000be0 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <tcp_echoserver_recv+0x20>
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <tcp_echoserver_recv+0x134>)
 8000bf6:	22ad      	movs	r2, #173	; 0xad
 8000bf8:	4947      	ldr	r1, [pc, #284]	; (8000d18 <tcp_echoserver_recv+0x138>)
 8000bfa:	4848      	ldr	r0, [pc, #288]	; (8000d1c <tcp_echoserver_recv+0x13c>)
 8000bfc:	f00f fa9e 	bl	801013c <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d104      	bne.n	8000c22 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000c18:	69b9      	ldr	r1, [r7, #24]
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f000 f941 	bl	8000ea2 <tcp_echoserver_connection_close>
 8000c20:	e007      	b.n	8000c32 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000c22:	493f      	ldr	r1, [pc, #252]	; (8000d20 <tcp_echoserver_recv+0x140>)
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f007 fc53 	bl	80084d0 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000c2a:	69b9      	ldr	r1, [r7, #24]
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f000 f8e5 	bl	8000dfc <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	77fb      	strb	r3, [r7, #31]
 8000c36:	e067      	b.n	8000d08 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00b      	beq.n	8000c58 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d005      	beq.n	8000c52 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f005 fdb9 	bl	80067c4 <pbuf_free>
    }
    ret_err = err;
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	77fb      	strb	r3, [r7, #31]
 8000c56:	e057      	b.n	8000d08 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d114      	bne.n	8000c8a <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2202      	movs	r2, #2
 8000c64:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c6c:	492c      	ldr	r1, [pc, #176]	; (8000d20 <tcp_echoserver_recv+0x140>)
 8000c6e:	68b8      	ldr	r0, [r7, #8]
 8000c70:	f007 fc2e 	bl	80084d0 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <tcp_echoserver_recv+0x144>)
 8000c7a:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000c7c:	69b9      	ldr	r1, [r7, #24]
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f000 f8bc 	bl	8000dfc <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	e03e      	b.n	8000d08 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d119      	bne.n	8000cc6 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10b      	bne.n	8000cb2 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <tcp_echoserver_recv+0x144>)
 8000ca6:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000ca8:	69b9      	ldr	r1, [r7, #24]
 8000caa:	68b8      	ldr	r0, [r7, #8]
 8000cac:	f000 f8a6 	bl	8000dfc <tcp_echoserver_send>
 8000cb0:	e006      	b.n	8000cc0 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f005 fe9a 	bl	80069f4 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	77fb      	strb	r3, [r7, #31]
 8000cc4:	e020      	b.n	8000d08 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d10e      	bne.n	8000cec <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	891b      	ldrh	r3, [r3, #8]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68b8      	ldr	r0, [r7, #8]
 8000cd6:	f006 fcdf 	bl	8007698 <tcp_recved>
    es->p = NULL;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f005 fd6f 	bl	80067c4 <pbuf_free>
    ret_err = ERR_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	e00d      	b.n	8000d08 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	891b      	ldrh	r3, [r3, #8]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	68b8      	ldr	r0, [r7, #8]
 8000cf4:	f006 fcd0 	bl	8007698 <tcp_recved>
    es->p = NULL;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f005 fd60 	bl	80067c4 <pbuf_free>
    ret_err = ERR_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000d08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0801102c 	.word	0x0801102c
 8000d18:	0801104c 	.word	0x0801104c
 8000d1c:	08011058 	.word	0x08011058
 8000d20:	08000dad 	.word	0x08000dad
 8000d24:	08011080 	.word	0x08011080

08000d28 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f004 fc12 	bl	8005568 <mem_free>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d017      	beq.n	8000d90 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d008      	beq.n	8000d7a <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000d68:	490f      	ldr	r1, [pc, #60]	; (8000da8 <tcp_echoserver_poll+0x5c>)
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	f007 fbb0 	bl	80084d0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f000 f842 	bl	8000dfc <tcp_echoserver_send>
 8000d78:	e007      	b.n	8000d8a <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d103      	bne.n	8000d8a <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	6838      	ldr	r0, [r7, #0]
 8000d86:	f000 f88c 	bl	8000ea2 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e004      	b.n	8000d9a <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000d90:	6838      	ldr	r0, [r7, #0]
 8000d92:	f006 faa7 	bl	80072e4 <tcp_abort>
    ret_err = ERR_ABRT;
 8000d96:	23f3      	movs	r3, #243	; 0xf3
 8000d98:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	08000dad 	.word	0x08000dad

08000dac <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000dcc:	490a      	ldr	r1, [pc, #40]	; (8000df8 <tcp_echoserver_sent+0x4c>)
 8000dce:	68b8      	ldr	r0, [r7, #8]
 8000dd0:	f007 fb7e 	bl	80084d0 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000dd4:	6979      	ldr	r1, [r7, #20]
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f000 f810 	bl	8000dfc <tcp_echoserver_send>
 8000ddc:	e007      	b.n	8000dee <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d103      	bne.n	8000dee <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000de6:	6979      	ldr	r1, [r7, #20]
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f000 f85a 	bl	8000ea2 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	08000dad 	.word	0x08000dad

08000dfc <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000e0a:	e036      	b.n	8000e7a <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6859      	ldr	r1, [r3, #4]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	895a      	ldrh	r2, [r3, #10]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f00a fa5f 	bl	800b2e0 <tcp_write>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d11d      	bne.n	8000e6a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fd5b 	bl	8006904 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000e4e:	6938      	ldr	r0, [r7, #16]
 8000e50:	f005 fcb8 	bl	80067c4 <pbuf_free>
 8000e54:	4603      	mov	r3, r0
 8000e56:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f7      	beq.n	8000e4e <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000e5e:	89fb      	ldrh	r3, [r7, #14]
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f006 fc18 	bl	8007698 <tcp_recved>
 8000e68:	e007      	b.n	8000e7a <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d102      	bne.n	8000e7a <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	895a      	ldrh	r2, [r3, #10]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d9b8      	bls.n	8000e0c <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000eac:	2100      	movs	r1, #0
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f007 fada 	bl	8008468 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f007 fb0a 	bl	80084d0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f007 fae4 	bl	800848c <tcp_recv>
  tcp_err(tpcb, NULL);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f007 fb24 	bl	8008514 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f007 fb59 	bl	8008588 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f004 fb43 	bl	8005568 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f006 f914 	bl	8007110 <tcp_close>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000ef6:	f00c fdd9 	bl	800daac <udp_new>
 8000efa:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d013      	beq.n	8000f2a <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000f02:	2207      	movs	r2, #7
 8000f04:	490b      	ldr	r1, [pc, #44]	; (8000f34 <udp_echoserver_init+0x44>)
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f00c fc50 	bl	800d7ac <udp_bind>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4907      	ldr	r1, [pc, #28]	; (8000f38 <udp_echoserver_init+0x48>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f00c fd63 	bl	800d9e8 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000f22:	e002      	b.n	8000f2a <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f00c fd7f 	bl	800da28 <udp_remove>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	080142f0 	.word	0x080142f0
 8000f38:	08000f3d 	.word	0x08000f3d

08000f3c <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f00c fcb4 	bl	800d8bc <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f00c fa3e 	bl	800d3d8 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f00c fd1b 	bl	800d998 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f005 fc2e 	bl	80067c4 <pbuf_free>
   
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f76:	e003      	b.n	8000f80 <LoopCopyDataInit>

08000f78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f7e:	3104      	adds	r1, #4

08000f80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f88:	d3f6      	bcc.n	8000f78 <CopyDataInit>
  ldr  r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f8c:	e002      	b.n	8000f94 <LoopFillZerobss>

08000f8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f90:	f842 3b04 	str.w	r3, [r2], #4

08000f94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f98:	d3f9      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff fd8d 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f00f f887 	bl	80100b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fb89 	bl	80006b8 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fac:	080143ac 	.word	0x080143ac
  ldr  r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fb4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000fb8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000fbc:	20006d18 	.word	0x20006d18

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f92f 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fc6c 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f939 	bl	800129e <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f90f 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000008 	.word	0x20000008
 8001060:	20000010 	.word	0x20000010
 8001064:	2000000c 	.word	0x2000000c

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000010 	.word	0x20000010
 800108c:	2000067c 	.word	0x2000067c

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000067c 	.word	0x2000067c

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_Delay+0x40>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000010 	.word	0x20000010

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff47 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff5c 	bl	8001134 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb0 	bl	800120c <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012c8:	4baa      	ldr	r3, [pc, #680]	; (8001574 <HAL_ETH_Init+0x2bc>)
 80012ca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e185      	b.n	80015ea <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f002 f832 	bl	800335c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_ETH_Init+0x2c0>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	4a9d      	ldr	r2, [pc, #628]	; (8001578 <HAL_ETH_Init+0x2c0>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	6453      	str	r3, [r2, #68]	; 0x44
 8001308:	4b9b      	ldr	r3, [pc, #620]	; (8001578 <HAL_ETH_Init+0x2c0>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001314:	4b99      	ldr	r3, [pc, #612]	; (800157c <HAL_ETH_Init+0x2c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a98      	ldr	r2, [pc, #608]	; (800157c <HAL_ETH_Init+0x2c4>)
 800131a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800131e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001320:	4b96      	ldr	r3, [pc, #600]	; (800157c <HAL_ETH_Init+0x2c4>)
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4994      	ldr	r1, [pc, #592]	; (800157c <HAL_ETH_Init+0x2c4>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001346:	f7ff fea3 	bl	8001090 <HAL_GetTick>
 800134a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800134c:	e011      	b.n	8001372 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800134e:	f7ff fe9f 	bl	8001090 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800135c:	d909      	bls.n	8001372 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e13b      	b.n	80015ea <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e4      	bne.n	800134e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f023 031c 	bic.w	r3, r3, #28
 8001392:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001394:	f001 fe98 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8001398:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4a78      	ldr	r2, [pc, #480]	; (8001580 <HAL_ETH_Init+0x2c8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d908      	bls.n	80013b4 <HAL_ETH_Init+0xfc>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a77      	ldr	r2, [pc, #476]	; (8001584 <HAL_ETH_Init+0x2cc>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d804      	bhi.n	80013b4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e027      	b.n	8001404 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4a73      	ldr	r2, [pc, #460]	; (8001584 <HAL_ETH_Init+0x2cc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d908      	bls.n	80013ce <HAL_ETH_Init+0x116>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4a72      	ldr	r2, [pc, #456]	; (8001588 <HAL_ETH_Init+0x2d0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d804      	bhi.n	80013ce <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f043 030c 	orr.w	r3, r3, #12
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e01a      	b.n	8001404 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4a6d      	ldr	r2, [pc, #436]	; (8001588 <HAL_ETH_Init+0x2d0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d903      	bls.n	80013de <HAL_ETH_Init+0x126>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_ETH_Init+0x2d4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d911      	bls.n	8001402 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4a6a      	ldr	r2, [pc, #424]	; (800158c <HAL_ETH_Init+0x2d4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d908      	bls.n	80013f8 <HAL_ETH_Init+0x140>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4a69      	ldr	r2, [pc, #420]	; (8001590 <HAL_ETH_Init+0x2d8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d804      	bhi.n	80013f8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e005      	b.n	8001404 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	e000      	b.n	8001404 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001402:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800140c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fb9a 	bl	8001b4c <HAL_ETH_WritePHYRegister>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fd4f 	bl	8001ec8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0d9      	b.n	80015ea <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001436:	20ff      	movs	r0, #255	; 0xff
 8001438:	f7ff fe36 	bl	80010a8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a7 	beq.w	8001594 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001446:	f7ff fe23 	bl	8001090 <HAL_GetTick>
 800144a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	461a      	mov	r2, r3
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fb11 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800145a:	f7ff fe19 	bl	8001090 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d90f      	bls.n	800148c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001470:	6939      	ldr	r1, [r7, #16]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fd28 	bl	8001ec8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0ae      	b.n	80015ea <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0da      	beq.n	800144c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fb55 	bl	8001b4c <HAL_ETH_WritePHYRegister>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fd0a 	bl	8001ec8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014bc:	2301      	movs	r3, #1
 80014be:	e094      	b.n	80015ea <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fde6 	bl	8001090 <HAL_GetTick>
 80014c4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	461a      	mov	r2, r3
 80014cc:	2101      	movs	r1, #1
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fad4 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014d4:	f7ff fddc 	bl	8001090 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d90f      	bls.n	8001506 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fceb 	bl	8001ec8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e071      	b.n	80015ea <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0da      	beq.n	80014c6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	461a      	mov	r2, r3
 8001516:	211f      	movs	r1, #31
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 faaf 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fccc 	bl	8001ec8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001538:	2301      	movs	r3, #1
 800153a:	e056      	b.n	80015ea <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	e002      	b.n	8001556 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	e037      	b.n	80015d8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e032      	b.n	80015d8 <HAL_ETH_Init+0x320>
 8001572:	bf00      	nop
 8001574:	03938700 	.word	0x03938700
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	01312cff 	.word	0x01312cff
 8001584:	02160ebf 	.word	0x02160ebf
 8001588:	039386ff 	.word	0x039386ff
 800158c:	05f5e0ff 	.word	0x05f5e0ff
 8001590:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 facd 	bl	8001b4c <HAL_ETH_WritePHYRegister>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fc82 	bl	8001ec8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00c      	b.n	80015ea <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015d4:	f7ff fd68 	bl	80010a8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fc74 	bl	8001ec8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop

080015f4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ETH_DMATxDescListInit+0x20>
 8001610:	2302      	movs	r3, #2
 8001612:	e052      	b.n	80016ba <HAL_ETH_DMATxDescListInit+0xc6>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e030      	b.n	8001692 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001640:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	d208      	bcs.n	8001686 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	015b      	lsls	r3, r3, #5
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4413      	add	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	e002      	b.n	800168c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3ca      	bcc.n	8001630 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	3310      	adds	r3, #16
 80016a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b087      	sub	sp, #28
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ETH_DMARxDescListInit+0x20>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e056      	b.n	8001794 <HAL_ETH_DMARxDescListInit+0xce>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e034      	b.n	800176c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4413      	add	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001712:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800171a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	461a      	mov	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d208      	bcs.n	8001760 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	461a      	mov	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e002      	b.n	8001766 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d3c6      	bcc.n	8001702 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177e:	330c      	adds	r3, #12
 8001780:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ETH_TransmitFrame+0x24>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0cd      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0b8      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da09      	bge.n	800180c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2212      	movs	r2, #18
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0a9      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001812:	4293      	cmp	r3, r2
 8001814:	d915      	bls.n	8001842 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_ETH_TransmitFrame+0x1cc>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_ETH_TransmitFrame+0x1cc>)
 8001826:	fba3 1302 	umull	r1, r3, r3, r2
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e001      	b.n	8001846 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001842:	2301      	movs	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d11c      	bne.n	8001886 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800185a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001866:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001876:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
 8001884:	e04b      	b.n	800191e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e044      	b.n	8001916 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800189a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3b01      	subs	r3, #1
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d116      	bne.n	80018f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ETH_TransmitFrame+0x1d0>)
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018f2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001902:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3b6      	bcc.n	800188c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	3314      	adds	r3, #20
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	3314      	adds	r3, #20
 800193c:	2204      	movs	r2, #4
 800193e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	3304      	adds	r3, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	ac02b00b 	.word	0xac02b00b
 8001970:	fffffa0c 	.word	0xfffffa0c

08001974 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ETH_GetReceivedFrame+0x1a>
 800198a:	2302      	movs	r3, #2
 800198c:	e070      	b.n	8001a70 <HAL_ETH_GetReceivedFrame+0xfc>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db5a      	blt.n	8001a5e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d030      	beq.n	8001a18 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d103      	bne.n	80019d0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019e4:	3b04      	subs	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e02b      	b.n	8001a70 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
 8001a46:	e00a      	b.n	8001a5e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	460b      	mov	r3, r1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b82      	cmp	r3, #130	; 0x82
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e050      	b.n	8001b44 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2282      	movs	r2, #130	; 0x82
 8001aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 031c 	and.w	r3, r3, #28
 8001ab8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8a1b      	ldrh	r3, [r3, #16]
 8001abe:	02db      	lsls	r3, r3, #11
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ac8:	897b      	ldrh	r3, [r7, #10]
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f023 0302 	bic.w	r3, r3, #2
 8001adc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aee:	f7ff facf 	bl	8001090 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af4:	e015      	b.n	8001b22 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001af6:	f7ff facb 	bl	8001090 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d309      	bcc.n	8001b1a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e014      	b.n	8001b44 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e4      	bne.n	8001af6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	460b      	mov	r3, r1
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b42      	cmp	r3, #66	; 0x42
 8001b6c:	d101      	bne.n	8001b72 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e04e      	b.n	8001c10 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 031c 	and.w	r3, r3, #28
 8001b88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8a1b      	ldrh	r3, [r3, #16]
 8001b8e:	02db      	lsls	r3, r3, #11
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc8:	f7ff fa62 	bl	8001090 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bce:	e015      	b.n	8001bfc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bd0:	f7ff fa5e 	bl	8001090 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d309      	bcc.n	8001bf4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e00d      	b.n	8001c10 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e4      	bne.n	8001bd0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ETH_Start+0x16>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e01f      	b.n	8001c6e <HAL_ETH_Start+0x56>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fb44 	bl	80022cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fb7b 	bl	8002340 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fc12 	bl	8002474 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fbaf 	bl	80023b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fbdc 	bl	8002414 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ETH_Stop+0x16>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e01f      	b.n	8001ccc <HAL_ETH_Stop+0x56>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fba1 	bl	80023e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fbce 	bl	8002444 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fb66 	bl	800237a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fbe0 	bl	8002474 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fb26 	bl	8002306 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ETH_ConfigMAC+0x1c>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e0e4      	b.n	8001eba <HAL_ETH_ConfigMAC+0x1e6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80b1 	beq.w	8001e6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d20:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d26:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d2c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d32:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d38:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d3e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d44:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d4a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d50:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d56:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d5c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f7ff f994 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001da2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001da8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001dae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001dba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dbc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff f96e 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ddc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001de6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e1c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff f937 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff f924 	bl	80010a8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	61da      	str	r2, [r3, #28]
 8001e68:	e01e      	b.n	8001ea8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e78:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff f904 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	ff20810f 	.word	0xff20810f

08001ec8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b0      	sub	sp, #192	; 0xc0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
 8001f14:	e001      	b.n	8001f1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa0:	4bac      	ldr	r3, [pc, #688]	; (8002254 <ETH_MACDMAConfig+0x38c>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fb0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fb4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fbe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fc2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fc8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fcc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fd0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fd4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fd8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fdc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff f853 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800200c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800200e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002010:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002014:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800201a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800201c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002020:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002026:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800202c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002030:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002038:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800203a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff f82e 	bl	80010a8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002054:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800205e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002068:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002074:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002078:	f64f 7341 	movw	r3, #65345	; 0xff41
 800207c:	4013      	ands	r3, r2
 800207e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002086:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002088:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800208c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800208e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002092:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002098:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800209a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800209e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020a4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7fe ffef 	bl	80010a8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe ffda 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800210c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002110:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002122:	2304      	movs	r3, #4
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800212c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002142:	2300      	movs	r3, #0
 8002144:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002146:	2300      	movs	r3, #0
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	3318      	adds	r3, #24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800215a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <ETH_MACDMAConfig+0x390>)
 8002160:	4013      	ands	r3, r2
 8002162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002166:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002168:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800216a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800216c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800216e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002170:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002172:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002174:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002176:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002178:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800217a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800217c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800217e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002182:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002186:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	3318      	adds	r3, #24
 800219c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	3318      	adds	r3, #24
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ff78 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	3318      	adds	r3, #24
 80021c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002200:	2001      	movs	r0, #1
 8002202:	f7fe ff51 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002212:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10f      	bne.n	800223c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	331c      	adds	r3, #28
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	331c      	adds	r3, #28
 800223a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	461a      	mov	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f809 	bl	800225c <ETH_MACAddressConfig>
}
 800224a:	bf00      	nop
 800224c:	37c0      	adds	r7, #192	; 0xc0
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	ff20810f 	.word	0xff20810f
 8002258:	f8de3f23 	.word	0xf8de3f23

0800225c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3305      	adds	r3, #5
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	3204      	adds	r2, #4
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <ETH_MACAddressConfig+0x68>)
 800227e:	4413      	add	r3, r2
 8002280:	461a      	mov	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3303      	adds	r3, #3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	061a      	lsls	r2, r3, #24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3302      	adds	r3, #2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	4313      	orrs	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <ETH_MACAddressConfig+0x6c>)
 80022ae:	4413      	add	r3, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	6013      	str	r3, [r2, #0]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40028040 	.word	0x40028040
 80022c8:	40028044 	.word	0x40028044

080022cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0208 	orr.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f000 f8e9 	bl	80024c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0208 	bic.w	r2, r2, #8
 8002320:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 f8cc 	bl	80024c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0204 	orr.w	r2, r2, #4
 800235a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002364:	2001      	movs	r0, #1
 8002366:	f000 f8af 	bl	80024c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0204 	bic.w	r2, r2, #4
 8002394:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 f892 	bl	80024c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c4:	3318      	adds	r3, #24
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	3318      	adds	r3, #24
 80023d6:	601a      	str	r2, [r3, #0]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	3318      	adds	r3, #24
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002404:	3318      	adds	r3, #24
 8002406:	601a      	str	r2, [r3, #0]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	3318      	adds	r3, #24
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0202 	orr.w	r2, r2, #2
 8002430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002434:	3318      	adds	r3, #24
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002454:	3318      	adds	r3, #24
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0202 	bic.w	r2, r2, #2
 8002460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002464:	3318      	adds	r3, #24
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	3318      	adds	r3, #24
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	3318      	adds	r3, #24
 800249a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a4:	3318      	adds	r3, #24
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f000 f80c 	bl	80024c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	3318      	adds	r3, #24
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <ETH_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <ETH_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80024e4:	bf00      	nop
  } 
  while (Delay --);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <ETH_Delay+0x1c>
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	20000008 	.word	0x20000008
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	e16b      	b.n	80027f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	f040 815a 	bne.w	80027f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d00b      	beq.n	800255e <HAL_GPIO_Init+0x5a>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002552:	2b11      	cmp	r3, #17
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b12      	cmp	r3, #18
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0xfc>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b12      	cmp	r3, #18
 80025fe:	d123      	bne.n	8002648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	08da      	lsrs	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3208      	adds	r2, #8
 8002608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	220f      	movs	r2, #15
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	08da      	lsrs	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3208      	adds	r2, #8
 8002642:	69b9      	ldr	r1, [r7, #24]
 8002644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0203 	and.w	r2, r3, #3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80b4 	beq.w	80027f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <HAL_GPIO_Init+0x308>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a5e      	ldr	r2, [pc, #376]	; (800280c <HAL_GPIO_Init+0x308>)
 8002694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_GPIO_Init+0x308>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_GPIO_Init+0x30c>)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_Init+0x310>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <HAL_GPIO_Init+0x226>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_GPIO_Init+0x314>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d025      	beq.n	8002726 <HAL_GPIO_Init+0x222>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4f      	ldr	r2, [pc, #316]	; (800281c <HAL_GPIO_Init+0x318>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x21e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <HAL_GPIO_Init+0x31c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x21a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_GPIO_Init+0x320>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x216>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x324>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x212>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4b      	ldr	r2, [pc, #300]	; (800282c <HAL_GPIO_Init+0x328>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x20e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4a      	ldr	r2, [pc, #296]	; (8002830 <HAL_GPIO_Init+0x32c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x20a>
 800270a:	2307      	movs	r3, #7
 800270c:	e00e      	b.n	800272c <HAL_GPIO_Init+0x228>
 800270e:	2308      	movs	r3, #8
 8002710:	e00c      	b.n	800272c <HAL_GPIO_Init+0x228>
 8002712:	2306      	movs	r3, #6
 8002714:	e00a      	b.n	800272c <HAL_GPIO_Init+0x228>
 8002716:	2305      	movs	r3, #5
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x228>
 800271a:	2304      	movs	r3, #4
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x228>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x228>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x228>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x228>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800273c:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_GPIO_Init+0x30c>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274a:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_GPIO_Init+0x330>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276e:	4a31      	ldr	r2, [pc, #196]	; (8002834 <HAL_GPIO_Init+0x330>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <HAL_GPIO_Init+0x330>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <HAL_GPIO_Init+0x330>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_GPIO_Init+0x330>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_GPIO_Init+0x330>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_GPIO_Init+0x330>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_GPIO_Init+0x330>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f ae90 	bls.w	8002520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	40021c00 	.word	0x40021c00
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 8002844:	4613      	mov	r3, r2
 8002846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002848:	787b      	ldrb	r3, [r7, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002854:	e003      	b.n	800285e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	041a      	lsls	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e25b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d075      	beq.n	8002976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288a:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d00c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d112      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b9d      	ldr	r3, [pc, #628]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b99      	ldr	r3, [pc, #612]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x108>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e236      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x74>
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x98>
 80028ea:	4b8b      	ldr	r3, [pc, #556]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a87      	ldr	r2, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 8002904:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a83      	ldr	r2, [pc, #524]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fbb4 	bl	8001090 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fbb0 	bl	8001090 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1fb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xc0>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fba0 	bl	8001090 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fb9c 	bl	8001090 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1e7      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b6c      	ldr	r3, [pc, #432]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0xe8>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d063      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002982:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x152>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1bb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4952      	ldr	r1, [pc, #328]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	e03a      	b.n	8002a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_OscConfig+0x2b0>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fb55 	bl	8001090 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe fb51 	bl	8001090 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e19c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4940      	ldr	r1, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
 8002a1c:	e015      	b.n	8002a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0x2b0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fb34 	bl	8001090 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fb30 	bl	8001090 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e17b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d030      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_RCC_OscConfig+0x2b4>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fb14 	bl	8001090 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fb10 	bl	8001090 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e15b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x200>
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x2b4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fafd 	bl	8001090 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe faf9 	bl	8001090 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e144      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a0 	beq.w	8002c06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fabf 	bl	8001090 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e011      	b.n	8002b3a <HAL_RCC_OscConfig+0x2ce>
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
 8002b20:	42470e80 	.word	0x42470e80
 8002b24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fe fab2 	bl	8001090 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0fd      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b81      	ldr	r3, [pc, #516]	; (8002d40 <HAL_RCC_OscConfig+0x4d4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a7c      	ldr	r2, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x32a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x312>
 8002b64:	4b77      	ldr	r3, [pc, #476]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	4b74      	ldr	r3, [pc, #464]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a73      	ldr	r2, [pc, #460]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x32a>
 8002b7e:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a70      	ldr	r2, [pc, #448]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a6d      	ldr	r2, [pc, #436]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fa77 	bl	8001090 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fa73 	bl	8001090 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0bc      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x33a>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fa61 	bl	8001090 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fa5d 	bl	8001090 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0a6      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a51      	ldr	r2, [pc, #324]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8092 	beq.w	8002d34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d141      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fa31 	bl	8001090 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fa2d 	bl	8001090 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e078      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	4933      	ldr	r1, [pc, #204]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7a:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa06 	bl	8001090 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fa02 	bl	8001090 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e04d      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x41c>
 8002ca6:	e045      	b.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe f9ef 	bl	8001090 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f9eb 	bl	8001090 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e036      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x44a>
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e029      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d115      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470060 	.word	0x42470060

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe f928 	bl	8001090 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe f924 	bl	8001090 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe f888 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08013d8c 	.word	0x08013d8c
 8002f10:	20000008 	.word	0x20000008
 8002f14:	2000000c 	.word	0x2000000c

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d007      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x32>
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x38>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80b4 	bne.w	80030ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f46:	60bb      	str	r3, [r7, #8]
       break;
 8002f48:	e0b3      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f4c:	60bb      	str	r3, [r7, #8]
      break;
 8002f4e:	e0b0      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d04a      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	ea03 0501 	and.w	r5, r3, r1
 8002f7c:	ea04 0602 	and.w	r6, r4, r2
 8002f80:	4629      	mov	r1, r5
 8002f82:	4632      	mov	r2, r6
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	0154      	lsls	r4, r2, #5
 8002f8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f92:	014b      	lsls	r3, r1, #5
 8002f94:	4619      	mov	r1, r3
 8002f96:	4622      	mov	r2, r4
 8002f98:	1b49      	subs	r1, r1, r5
 8002f9a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	0194      	lsls	r4, r2, #6
 8002fa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fac:	018b      	lsls	r3, r1, #6
 8002fae:	1a5b      	subs	r3, r3, r1
 8002fb0:	eb64 0402 	sbc.w	r4, r4, r2
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	00e2      	lsls	r2, r4, #3
 8002fbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	195b      	adds	r3, r3, r5
 8002fca:	eb44 0406 	adc.w	r4, r4, r6
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	0262      	lsls	r2, r4, #9
 8002fd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fdc:	0259      	lsls	r1, r3, #9
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f04f 0400 	mov.w	r4, #0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f7fd f956 	bl	80002a0 <__aeabi_uldivmod>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e049      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	f240 11ff 	movw	r1, #511	; 0x1ff
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	ea03 0501 	and.w	r5, r3, r1
 8003012:	ea04 0602 	and.w	r6, r4, r2
 8003016:	4629      	mov	r1, r5
 8003018:	4632      	mov	r2, r6
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	0154      	lsls	r4, r2, #5
 8003024:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003028:	014b      	lsls	r3, r1, #5
 800302a:	4619      	mov	r1, r3
 800302c:	4622      	mov	r2, r4
 800302e:	1b49      	subs	r1, r1, r5
 8003030:	eb62 0206 	sbc.w	r2, r2, r6
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f04f 0400 	mov.w	r4, #0
 800303c:	0194      	lsls	r4, r2, #6
 800303e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003042:	018b      	lsls	r3, r1, #6
 8003044:	1a5b      	subs	r3, r3, r1
 8003046:	eb64 0402 	sbc.w	r4, r4, r2
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	00e2      	lsls	r2, r4, #3
 8003054:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	460b      	mov	r3, r1
 800305c:	4614      	mov	r4, r2
 800305e:	195b      	adds	r3, r3, r5
 8003060:	eb44 0406 	adc.w	r4, r4, r6
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	02a2      	lsls	r2, r4, #10
 800306e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003072:	0299      	lsls	r1, r3, #10
 8003074:	460b      	mov	r3, r1
 8003076:	4614      	mov	r4, r2
 8003078:	4618      	mov	r0, r3
 800307a:	4621      	mov	r1, r4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	461a      	mov	r2, r3
 8003084:	4623      	mov	r3, r4
 8003086:	f7fd f90b 	bl	80002a0 <__aeabi_uldivmod>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	60bb      	str	r3, [r7, #8]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030ae:	60bb      	str	r3, [r7, #8]
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	68bb      	ldr	r3, [r7, #8]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000008 	.word	0x20000008

080030e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80030e6:	4b8d      	ldr	r3, [pc, #564]	; (800331c <MX_LWIP_Init+0x23c>)
 80030e8:	22c0      	movs	r2, #192	; 0xc0
 80030ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80030ec:	4b8b      	ldr	r3, [pc, #556]	; (800331c <MX_LWIP_Init+0x23c>)
 80030ee:	22a8      	movs	r2, #168	; 0xa8
 80030f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80030f2:	4b8a      	ldr	r3, [pc, #552]	; (800331c <MX_LWIP_Init+0x23c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <MX_LWIP_Init+0x23c>)
 80030fa:	220a      	movs	r2, #10
 80030fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <MX_LWIP_Init+0x240>)
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003104:	4b86      	ldr	r3, [pc, #536]	; (8003320 <MX_LWIP_Init+0x240>)
 8003106:	22ff      	movs	r2, #255	; 0xff
 8003108:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <MX_LWIP_Init+0x240>)
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003110:	4b83      	ldr	r3, [pc, #524]	; (8003320 <MX_LWIP_Init+0x240>)
 8003112:	2200      	movs	r2, #0
 8003114:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003116:	4b83      	ldr	r3, [pc, #524]	; (8003324 <MX_LWIP_Init+0x244>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800311c:	4b81      	ldr	r3, [pc, #516]	; (8003324 <MX_LWIP_Init+0x244>)
 800311e:	2200      	movs	r2, #0
 8003120:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003122:	4b80      	ldr	r3, [pc, #512]	; (8003324 <MX_LWIP_Init+0x244>)
 8003124:	2200      	movs	r2, #0
 8003126:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003128:	4b7e      	ldr	r3, [pc, #504]	; (8003324 <MX_LWIP_Init+0x244>)
 800312a:	2200      	movs	r2, #0
 800312c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800312e:	f002 f8c7 	bl	80052c0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003132:	4b7a      	ldr	r3, [pc, #488]	; (800331c <MX_LWIP_Init+0x23c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	061a      	lsls	r2, r3, #24
 8003138:	4b78      	ldr	r3, [pc, #480]	; (800331c <MX_LWIP_Init+0x23c>)
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	4b76      	ldr	r3, [pc, #472]	; (800331c <MX_LWIP_Init+0x23c>)
 8003142:	789b      	ldrb	r3, [r3, #2]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	4313      	orrs	r3, r2
 8003148:	4a74      	ldr	r2, [pc, #464]	; (800331c <MX_LWIP_Init+0x23c>)
 800314a:	78d2      	ldrb	r2, [r2, #3]
 800314c:	4313      	orrs	r3, r2
 800314e:	061a      	lsls	r2, r3, #24
 8003150:	4b72      	ldr	r3, [pc, #456]	; (800331c <MX_LWIP_Init+0x23c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	0619      	lsls	r1, r3, #24
 8003156:	4b71      	ldr	r3, [pc, #452]	; (800331c <MX_LWIP_Init+0x23c>)
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	4319      	orrs	r1, r3
 800315e:	4b6f      	ldr	r3, [pc, #444]	; (800331c <MX_LWIP_Init+0x23c>)
 8003160:	789b      	ldrb	r3, [r3, #2]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	430b      	orrs	r3, r1
 8003166:	496d      	ldr	r1, [pc, #436]	; (800331c <MX_LWIP_Init+0x23c>)
 8003168:	78c9      	ldrb	r1, [r1, #3]
 800316a:	430b      	orrs	r3, r1
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003172:	431a      	orrs	r2, r3
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <MX_LWIP_Init+0x23c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	0619      	lsls	r1, r3, #24
 800317a:	4b68      	ldr	r3, [pc, #416]	; (800331c <MX_LWIP_Init+0x23c>)
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	4319      	orrs	r1, r3
 8003182:	4b66      	ldr	r3, [pc, #408]	; (800331c <MX_LWIP_Init+0x23c>)
 8003184:	789b      	ldrb	r3, [r3, #2]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	430b      	orrs	r3, r1
 800318a:	4964      	ldr	r1, [pc, #400]	; (800331c <MX_LWIP_Init+0x23c>)
 800318c:	78c9      	ldrb	r1, [r1, #3]
 800318e:	430b      	orrs	r3, r1
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003196:	431a      	orrs	r2, r3
 8003198:	4b60      	ldr	r3, [pc, #384]	; (800331c <MX_LWIP_Init+0x23c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	0619      	lsls	r1, r3, #24
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <MX_LWIP_Init+0x23c>)
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	4319      	orrs	r1, r3
 80031a6:	4b5d      	ldr	r3, [pc, #372]	; (800331c <MX_LWIP_Init+0x23c>)
 80031a8:	789b      	ldrb	r3, [r3, #2]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	430b      	orrs	r3, r1
 80031ae:	495b      	ldr	r1, [pc, #364]	; (800331c <MX_LWIP_Init+0x23c>)
 80031b0:	78c9      	ldrb	r1, [r1, #3]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <MX_LWIP_Init+0x248>)
 80031ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80031bc:	4b58      	ldr	r3, [pc, #352]	; (8003320 <MX_LWIP_Init+0x240>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	061a      	lsls	r2, r3, #24
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <MX_LWIP_Init+0x240>)
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	431a      	orrs	r2, r3
 80031ca:	4b55      	ldr	r3, [pc, #340]	; (8003320 <MX_LWIP_Init+0x240>)
 80031cc:	789b      	ldrb	r3, [r3, #2]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4313      	orrs	r3, r2
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <MX_LWIP_Init+0x240>)
 80031d4:	78d2      	ldrb	r2, [r2, #3]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	061a      	lsls	r2, r3, #24
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <MX_LWIP_Init+0x240>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	0619      	lsls	r1, r3, #24
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <MX_LWIP_Init+0x240>)
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	4319      	orrs	r1, r3
 80031e8:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <MX_LWIP_Init+0x240>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	430b      	orrs	r3, r1
 80031f0:	494b      	ldr	r1, [pc, #300]	; (8003320 <MX_LWIP_Init+0x240>)
 80031f2:	78c9      	ldrb	r1, [r1, #3]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031fc:	431a      	orrs	r2, r3
 80031fe:	4b48      	ldr	r3, [pc, #288]	; (8003320 <MX_LWIP_Init+0x240>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	0619      	lsls	r1, r3, #24
 8003204:	4b46      	ldr	r3, [pc, #280]	; (8003320 <MX_LWIP_Init+0x240>)
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	4319      	orrs	r1, r3
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <MX_LWIP_Init+0x240>)
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	430b      	orrs	r3, r1
 8003214:	4942      	ldr	r1, [pc, #264]	; (8003320 <MX_LWIP_Init+0x240>)
 8003216:	78c9      	ldrb	r1, [r1, #3]
 8003218:	430b      	orrs	r3, r1
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003220:	431a      	orrs	r2, r3
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <MX_LWIP_Init+0x240>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	0619      	lsls	r1, r3, #24
 8003228:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <MX_LWIP_Init+0x240>)
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	4319      	orrs	r1, r3
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <MX_LWIP_Init+0x240>)
 8003232:	789b      	ldrb	r3, [r3, #2]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	430b      	orrs	r3, r1
 8003238:	4939      	ldr	r1, [pc, #228]	; (8003320 <MX_LWIP_Init+0x240>)
 800323a:	78c9      	ldrb	r1, [r1, #3]
 800323c:	430b      	orrs	r3, r1
 800323e:	0e1b      	lsrs	r3, r3, #24
 8003240:	4313      	orrs	r3, r2
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <MX_LWIP_Init+0x24c>)
 8003244:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <MX_LWIP_Init+0x244>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	061a      	lsls	r2, r3, #24
 800324c:	4b35      	ldr	r3, [pc, #212]	; (8003324 <MX_LWIP_Init+0x244>)
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <MX_LWIP_Init+0x244>)
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	4313      	orrs	r3, r2
 800325c:	4a31      	ldr	r2, [pc, #196]	; (8003324 <MX_LWIP_Init+0x244>)
 800325e:	78d2      	ldrb	r2, [r2, #3]
 8003260:	4313      	orrs	r3, r2
 8003262:	061a      	lsls	r2, r3, #24
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <MX_LWIP_Init+0x244>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	0619      	lsls	r1, r3, #24
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <MX_LWIP_Init+0x244>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	4319      	orrs	r1, r3
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <MX_LWIP_Init+0x244>)
 8003274:	789b      	ldrb	r3, [r3, #2]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	430b      	orrs	r3, r1
 800327a:	492a      	ldr	r1, [pc, #168]	; (8003324 <MX_LWIP_Init+0x244>)
 800327c:	78c9      	ldrb	r1, [r1, #3]
 800327e:	430b      	orrs	r3, r1
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003286:	431a      	orrs	r2, r3
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <MX_LWIP_Init+0x244>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	0619      	lsls	r1, r3, #24
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <MX_LWIP_Init+0x244>)
 8003290:	785b      	ldrb	r3, [r3, #1]
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	4319      	orrs	r1, r3
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <MX_LWIP_Init+0x244>)
 8003298:	789b      	ldrb	r3, [r3, #2]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	430b      	orrs	r3, r1
 800329e:	4921      	ldr	r1, [pc, #132]	; (8003324 <MX_LWIP_Init+0x244>)
 80032a0:	78c9      	ldrb	r1, [r1, #3]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032aa:	431a      	orrs	r2, r3
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <MX_LWIP_Init+0x244>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	0619      	lsls	r1, r3, #24
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <MX_LWIP_Init+0x244>)
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	4319      	orrs	r1, r3
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <MX_LWIP_Init+0x244>)
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	430b      	orrs	r3, r1
 80032c2:	4918      	ldr	r1, [pc, #96]	; (8003324 <MX_LWIP_Init+0x244>)
 80032c4:	78c9      	ldrb	r1, [r1, #3]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <MX_LWIP_Init+0x250>)
 80032ce:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_LWIP_Init+0x254>)
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <MX_LWIP_Init+0x258>)
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2300      	movs	r3, #0
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <MX_LWIP_Init+0x250>)
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <MX_LWIP_Init+0x24c>)
 80032e0:	4911      	ldr	r1, [pc, #68]	; (8003328 <MX_LWIP_Init+0x248>)
 80032e2:	4816      	ldr	r0, [pc, #88]	; (800333c <MX_LWIP_Init+0x25c>)
 80032e4:	f002 fc92 	bl	8005c0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80032e8:	4814      	ldr	r0, [pc, #80]	; (800333c <MX_LWIP_Init+0x25c>)
 80032ea:	f002 fe41 	bl	8005f70 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <MX_LWIP_Init+0x25c>)
 80032f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003300:	480e      	ldr	r0, [pc, #56]	; (800333c <MX_LWIP_Init+0x25c>)
 8003302:	f002 fe45 	bl	8005f90 <netif_set_up>
 8003306:	e002      	b.n	800330e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <MX_LWIP_Init+0x25c>)
 800330a:	f002 fead 	bl	8006068 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800330e:	490c      	ldr	r1, [pc, #48]	; (8003340 <MX_LWIP_Init+0x260>)
 8003310:	480a      	ldr	r0, [pc, #40]	; (800333c <MX_LWIP_Init+0x25c>)
 8003312:	f002 fedb 	bl	80060cc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200006c0 	.word	0x200006c0
 8003320:	200006bc 	.word	0x200006bc
 8003324:	20000680 	.word	0x20000680
 8003328:	200006b8 	.word	0x200006b8
 800332c:	200006c4 	.word	0x200006c4
 8003330:	200006c8 	.word	0x200006c8
 8003334:	0800ff05 	.word	0x0800ff05
 8003338:	080038e9 	.word	0x080038e9
 800333c:	20000684 	.word	0x20000684
 8003340:	08003955 	.word	0x08003955

08003344 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003348:	4803      	ldr	r0, [pc, #12]	; (8003358 <MX_LWIP_Process+0x14>)
 800334a:	f000 faad 	bl	80038a8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800334e:	f009 fe3f 	bl	800cfd0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000684 	.word	0x20000684

0800335c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	; 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a46      	ldr	r2, [pc, #280]	; (8003494 <HAL_ETH_MspInit+0x138>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f040 8085 	bne.w	800348a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	4a43      	ldr	r2, [pc, #268]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 800338a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338e:	6313      	str	r3, [r2, #48]	; 0x30
 8003390:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033aa:	6313      	str	r3, [r2, #48]	; 0x30
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4a35      	ldr	r2, [pc, #212]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
 80033c8:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6313      	str	r3, [r2, #48]	; 0x30
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_ETH_MspInit+0x13c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003428:	2332      	movs	r3, #50	; 0x32
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003438:	230b      	movs	r3, #11
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	4816      	ldr	r0, [pc, #88]	; (800349c <HAL_ETH_MspInit+0x140>)
 8003444:	f7ff f85e 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003448:	2386      	movs	r3, #134	; 0x86
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003458:	230b      	movs	r3, #11
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	480f      	ldr	r0, [pc, #60]	; (80034a0 <HAL_ETH_MspInit+0x144>)
 8003464:	f7ff f84e 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003468:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800347a:	230b      	movs	r3, #11
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	4619      	mov	r1, r3
 8003484:	4807      	ldr	r0, [pc, #28]	; (80034a4 <HAL_ETH_MspInit+0x148>)
 8003486:	f7ff f83d 	bl	8002504 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800348a:	bf00      	nop
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40028000 	.word	0x40028000
 8003498:	40023800 	.word	0x40023800
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400

080034a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <low_level_init+0x144>)
 80034b6:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <low_level_init+0x148>)
 80034b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <low_level_init+0x144>)
 80034bc:	2201      	movs	r2, #1
 80034be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <low_level_init+0x144>)
 80034c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <low_level_init+0x144>)
 80034ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <low_level_init+0x144>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80034d6:	2300      	movs	r3, #0
 80034d8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80034de:	23e1      	movs	r3, #225	; 0xe1
 80034e0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80034e2:	2300      	movs	r3, #0
 80034e4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80034ee:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <low_level_init+0x144>)
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <low_level_init+0x144>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80034fc:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <low_level_init+0x144>)
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <low_level_init+0x144>)
 8003504:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003508:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800350a:	4838      	ldr	r0, [pc, #224]	; (80035ec <low_level_init+0x144>)
 800350c:	f7fd fed4 	bl	80012b8 <HAL_ETH_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	b2da      	uxtb	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800352c:	2304      	movs	r3, #4
 800352e:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <low_level_init+0x14c>)
 8003530:	4931      	ldr	r1, [pc, #196]	; (80035f8 <low_level_init+0x150>)
 8003532:	482e      	ldr	r0, [pc, #184]	; (80035ec <low_level_init+0x144>)
 8003534:	f7fe f85e 	bl	80015f4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003538:	2304      	movs	r3, #4
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <low_level_init+0x154>)
 800353c:	4930      	ldr	r1, [pc, #192]	; (8003600 <low_level_init+0x158>)
 800353e:	482b      	ldr	r0, [pc, #172]	; (80035ec <low_level_init+0x144>)
 8003540:	f7fe f8c1 	bl	80016c6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2206      	movs	r2, #6
 8003548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <low_level_init+0x144>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <low_level_init+0x144>)
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	785a      	ldrb	r2, [r3, #1]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <low_level_init+0x144>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	789a      	ldrb	r2, [r3, #2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <low_level_init+0x144>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	78da      	ldrb	r2, [r3, #3]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <low_level_init+0x144>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	791a      	ldrb	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <low_level_init+0x144>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	795a      	ldrb	r2, [r3, #5]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800359a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035a2:	f043 030a 	orr.w	r3, r3, #10
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80035ae:	480f      	ldr	r0, [pc, #60]	; (80035ec <low_level_init+0x144>)
 80035b0:	f7fe fb32 	bl	8001c18 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	461a      	mov	r2, r3
 80035ba:	211d      	movs	r1, #29
 80035bc:	480b      	ldr	r0, [pc, #44]	; (80035ec <low_level_init+0x144>)
 80035be:	f7fe fa5d 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f043 030b 	orr.w	r3, r3, #11
 80035c8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	461a      	mov	r2, r3
 80035ce:	211d      	movs	r1, #29
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <low_level_init+0x144>)
 80035d2:	f7fe fabb 	bl	8001b4c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	461a      	mov	r2, r3
 80035dc:	211d      	movs	r1, #29
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <low_level_init+0x144>)
 80035e0:	f7fe fa4c 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20001f9c 	.word	0x20001f9c
 80035f0:	40028000 	.word	0x40028000
 80035f4:	20001fe4 	.word	0x20001fe4
 80035f8:	200006cc 	.word	0x200006cc
 80035fc:	2000074c 	.word	0x2000074c
 8003600:	20001f1c 	.word	0x20001f1c

08003604 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <low_level_output+0x138>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003626:	4b45      	ldr	r3, [pc, #276]	; (800373c <low_level_output+0x138>)
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	e05a      	b.n	80036ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da03      	bge.n	8003646 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800363e:	23f8      	movs	r3, #248	; 0xf8
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003644:	e05c      	b.n	8003700 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	895b      	ldrh	r3, [r3, #10]
 800364a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003650:	e02f      	b.n	80036b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	18d0      	adds	r0, r2, r3
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	18d1      	adds	r1, r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003666:	3304      	adds	r3, #4
 8003668:	461a      	mov	r2, r3
 800366a:	f00c fd54 	bl	8010116 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da03      	bge.n	8003684 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800367c:	23f8      	movs	r3, #248	; 0xf8
 800367e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003682:	e03d      	b.n	8003700 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003694:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036bc:	4293      	cmp	r3, r2
 80036be:	d8c8      	bhi.n	8003652 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	18d0      	adds	r0, r2, r3
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4413      	add	r3, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f00c fd20 	bl	8010116 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1a1      	bne.n	8003636 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	4811      	ldr	r0, [pc, #68]	; (800373c <low_level_output+0x138>)
 80036f6:	f7fe f853 	bl	80017a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <low_level_output+0x138>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	3314      	adds	r3, #20
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <low_level_output+0x138>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	3314      	adds	r3, #20
 800371e:	2220      	movs	r2, #32
 8003720:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <low_level_output+0x138>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	3304      	adds	r3, #4
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20001f9c 	.word	0x20001f9c

08003740 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003764:	484f      	ldr	r0, [pc, #316]	; (80038a4 <low_level_input+0x164>)
 8003766:	f7fe f905 	bl	8001974 <HAL_ETH_GetReceivedFrame>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <low_level_input+0x34>

    return NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	e092      	b.n	800389a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <low_level_input+0x164>)
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <low_level_input+0x164>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800378c:	4619      	mov	r1, r3
 800378e:	2000      	movs	r0, #0
 8003790:	f002 fd38 	bl	8006204 <pbuf_alloc>
 8003794:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d04b      	beq.n	8003834 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800379c:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <low_level_input+0x164>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037aa:	e040      	b.n	800382e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	895b      	ldrh	r3, [r3, #10]
 80037b0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80037b6:	e021      	b.n	80037fc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	18d0      	adds	r0, r2, r3
 80037c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	18d1      	adds	r1, r2, r3
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80037cc:	3304      	adds	r3, #4
 80037ce:	461a      	mov	r2, r3
 80037d0:	f00c fca1 	bl	8010116 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80037ea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80037f6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003806:	4293      	cmp	r3, r2
 8003808:	d8d6      	bhi.n	80037b8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	18d0      	adds	r0, r2, r3
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4619      	mov	r1, r3
 800381c:	f00c fc7b 	bl	8010116 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1bb      	bne.n	80037ac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <low_level_input+0x164>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e00b      	b.n	8003858 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <low_level_input+0x164>)
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3ee      	bcc.n	8003840 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <low_level_input+0x164>)
 8003864:	2200      	movs	r2, #0
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <low_level_input+0x164>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	3314      	adds	r3, #20
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <low_level_input+0x164>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003884:	3314      	adds	r3, #20
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <low_level_input+0x164>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003892:	3308      	adds	r3, #8
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800389a:	4618      	mov	r0, r3
 800389c:	3730      	adds	r7, #48	; 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20001f9c 	.word	0x20001f9c

080038a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff45 	bl	8003740 <low_level_input>
 80038b6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	4798      	blx	r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80038cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f002 ff75 	bl	80067c4 <pbuf_free>
    p = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e000      	b.n	80038e2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80038e0:	bf00      	nop
  }
}
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <ethernetif_init+0x1c>
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <ethernetif_init+0x48>)
 80038f8:	f240 2207 	movw	r2, #519	; 0x207
 80038fc:	490d      	ldr	r1, [pc, #52]	; (8003934 <ethernetif_init+0x4c>)
 80038fe:	480e      	ldr	r0, [pc, #56]	; (8003938 <ethernetif_init+0x50>)
 8003900:	f00c fc1c 	bl	801013c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2273      	movs	r2, #115	; 0x73
 8003908:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2274      	movs	r2, #116	; 0x74
 8003910:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <ethernetif_init+0x54>)
 8003918:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <ethernetif_init+0x58>)
 800391e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fdc1 	bl	80034a8 <low_level_init>

  return ERR_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	0801108c 	.word	0x0801108c
 8003934:	080110a8 	.word	0x080110a8
 8003938:	080110b8 	.word	0x080110b8
 800393c:	0800e3d5 	.word	0x0800e3d5
 8003940:	08003605 	.word	0x08003605

08003944 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003948:	f7fd fba2 	bl	8001090 <HAL_GetTick>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d05d      	beq.n	8003a32 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d03f      	beq.n	80039fe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800397e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003982:	2100      	movs	r1, #0
 8003984:	4830      	ldr	r0, [pc, #192]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003986:	f7fe f8e1 	bl	8001b4c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd fb81 	bl	8001090 <HAL_GetTick>
 800398e:	4603      	mov	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	461a      	mov	r2, r3
 8003998:	2101      	movs	r1, #1
 800399a:	482b      	ldr	r0, [pc, #172]	; (8003a48 <ethernetif_update_config+0xf4>)
 800399c:	f7fe f86e 	bl	8001a7c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80039a0:	f7fd fb76 	bl	8001090 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ae:	d828      	bhi.n	8003a02 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0eb      	beq.n	8003992 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	461a      	mov	r2, r3
 80039c0:	211f      	movs	r1, #31
 80039c2:	4821      	ldr	r0, [pc, #132]	; (8003a48 <ethernetif_update_config+0xf4>)
 80039c4:	f7fe f85a 	bl	8001a7c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <ethernetif_update_config+0xf4>)
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e002      	b.n	80039e2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <ethernetif_update_config+0xf4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <ethernetif_update_config+0xf4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	e016      	b.n	8003a22 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <ethernetif_update_config+0xf4>)
 80039f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	e011      	b.n	8003a22 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <ethernetif_update_config+0xb0>
          goto error;
 8003a02:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a14:	4313      	orrs	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	480a      	ldr	r0, [pc, #40]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a1e:	f7fe f895 	bl	8001b4c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003a22:	2100      	movs	r1, #0
 8003a24:	4808      	ldr	r0, [pc, #32]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a26:	f7fe f955 	bl	8001cd4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003a2a:	4807      	ldr	r0, [pc, #28]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a2c:	f7fe f8f4 	bl	8001c18 <HAL_ETH_Start>
 8003a30:	e002      	b.n	8003a38 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <ethernetif_update_config+0xf4>)
 8003a34:	f7fe f91f 	bl	8001c76 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f807 	bl	8003a4c <ethernetif_notify_conn_changed>
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20001f9c 	.word	0x20001f9c

08003a4c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <fs_open+0x16>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <fs_open+0x1c>
    return ERR_ARG;
 8003a76:	f06f 030f 	mvn.w	r3, #15
 8003a7a:	e028      	b.n	8003ace <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <fs_open+0x78>)
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e020      	b.n	8003ac4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f7fc fba1 	bl	80001d0 <strcmp>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d114      	bne.n	8003abe <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	7c1a      	ldrb	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e007      	b.n	8003ace <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1db      	bne.n	8003a82 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003aca:	f06f 0305 	mvn.w	r3, #5
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	080141c0 	.word	0x080141c0

08003adc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8003b14:	20e0      	movs	r0, #224	; 0xe0
 8003b16:	f001 fe8d 	bl	8005834 <mem_malloc>
 8003b1a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8003b22:	22e0      	movs	r2, #224	; 0xe0
 8003b24:	2100      	movs	r1, #0
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f00c fb00 	bl	801012c <memset>
  }
  return ret;
 8003b2c:	687b      	ldr	r3, [r7, #4]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 fd0f 	bl	8005568 <mem_free>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003b5a:	22b0      	movs	r2, #176	; 0xb0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f00c fae4 	bl	801012c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003b72:	20b0      	movs	r0, #176	; 0xb0
 8003b74:	f001 fe5e 	bl	8005834 <mem_malloc>
 8003b78:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ffe6 	bl	8003b52 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003b86:	687b      	ldr	r3, [r7, #4]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff99 	bl	8003adc <fs_close>
    hs->handle = NULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ffba 	bl	8003b36 <http_ssi_state_free>
    hs->ssi = NULL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f002 fdf5 	bl	80067c4 <pbuf_free>
    hs->req = NULL;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <http_state_free+0x1a>
    http_state_eof(hs);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ffca 	bl	8003b90 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 fcb3 	bl	8005568 <mem_free>
  }
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <http_write+0x22>
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <http_write+0xc8>)
 8003c22:	f240 2219 	movw	r2, #537	; 0x219
 8003c26:	492c      	ldr	r1, [pc, #176]	; (8003cd8 <http_write+0xcc>)
 8003c28:	482c      	ldr	r0, [pc, #176]	; (8003cdc <http_write+0xd0>)
 8003c2a:	f00c fa87 	bl	801013c <iprintf>
  len = *length;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <http_write+0x32>
    return ERR_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e045      	b.n	8003cca <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c44:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003c46:	8aba      	ldrh	r2, [r7, #20]
 8003c48:	8afb      	ldrh	r3, [r7, #22]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d201      	bcs.n	8003c52 <http_write+0x46>
    len = max_len;
 8003c4e:	8abb      	ldrh	r3, [r7, #20]
 8003c50:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003c5a:	8afa      	ldrh	r2, [r7, #22]
 8003c5c:	8abb      	ldrh	r3, [r7, #20]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d901      	bls.n	8003c66 <http_write+0x5a>
    len = max_len;
 8003c62:	8abb      	ldrh	r3, [r7, #20]
 8003c64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	8afa      	ldrh	r2, [r7, #22]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f007 fb37 	bl	800b2e0 <tcp_write>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003c76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d10f      	bne.n	8003ca0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d902      	bls.n	8003c9a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	82fb      	strh	r3, [r7, #22]
 8003c98:	e002      	b.n	8003ca0 <http_write+0x94>
      } else {
        len /= 2;
 8003c9a:	8afb      	ldrh	r3, [r7, #22]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003ca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d102      	bne.n	8003cb0 <http_write+0xa4>
 8003caa:	8afb      	ldrh	r3, [r7, #22]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d8da      	bhi.n	8003c66 <http_write+0x5a>

  if (err == ERR_OK) {
 8003cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8afa      	ldrh	r2, [r7, #22]
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	e002      	b.n	8003cc6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003cc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	0801115c 	.word	0x0801115c
 8003cd8:	08011194 	.word	0x08011194
 8003cdc:	080111a4 	.word	0x080111a4

08003ce0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f004 fbb9 	bl	8008468 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f004 fbc7 	bl	800848c <tcp_recv>
  altcp_err(pcb, NULL);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f004 fc07 	bl	8008514 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f004 fc3c 	bl	8008588 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003d10:	2100      	movs	r1, #0
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f004 fbdc 	bl	80084d0 <tcp_sent>
  if (hs != NULL) {
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003d1e:	68b8      	ldr	r0, [r7, #8]
 8003d20:	f7ff ff62 	bl	8003be8 <http_state_free>
  }

  if (abort_conn) {
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f003 fada 	bl	80072e4 <tcp_abort>
    return ERR_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e00f      	b.n	8003d54 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f003 f9eb 	bl	8007110 <tcp_close>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003d46:	2204      	movs	r2, #4
 8003d48:	4904      	ldr	r1, [pc, #16]	; (8003d5c <http_close_or_abort_conn+0x7c>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f004 fc1c 	bl	8008588 <tcp_poll>
  }
  return err;
 8003d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08004ddf 	.word	0x08004ddf

08003d60 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffb6 	bl	8003ce0 <http_close_or_abort_conn>
 8003d74:	4603      	mov	r3, r0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffe8 	bl	8003d60 <http_close_conn>
  }
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <extract_uri_parameters+0x18>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <extract_uri_parameters+0x1c>
    return (0);
 8003db0:	2300      	movs	r3, #0
 8003db2:	e04b      	b.n	8003e4c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e03f      	b.n	8003e3e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	320c      	adds	r2, #12
 8003dc4:	6979      	ldr	r1, [r7, #20]
 8003dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003dce:	2126      	movs	r1, #38	; 0x26
 8003dd0:	6978      	ldr	r0, [r7, #20]
 8003dd2:	f00c f9ff 	bl	80101d4 <strchr>
 8003dd6:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <extract_uri_parameters+0x54>
      *pair = '\0';
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
      pair++;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3301      	adds	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e00c      	b.n	8003e06 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003dec:	2120      	movs	r1, #32
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f00c f9f0 	bl	80101d4 <strchr>
 8003df4:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003e06:	213d      	movs	r1, #61	; 0x3d
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f00c f9e3 	bl	80101d4 <strchr>
 8003e0e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <extract_uri_parameters+0x94>
      *equals = '\0';
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	321c      	adds	r2, #28
 8003e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e2a:	e005      	b.n	8003e38 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	321c      	adds	r2, #28
 8003e32:	2100      	movs	r1, #0
 8003e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	dc02      	bgt.n	8003e4a <extract_uri_parameters+0xb2>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1b9      	bne.n	8003dbe <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003e4a:	693b      	ldr	r3, [r7, #16]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <get_tag_insert+0x1c>
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <get_tag_insert+0x154>)
 8003e64:	f44f 7241 	mov.w	r2, #772	; 0x304
 8003e68:	4950      	ldr	r1, [pc, #320]	; (8003fac <get_tag_insert+0x158>)
 8003e6a:	4851      	ldr	r0, [pc, #324]	; (8003fb0 <get_tag_insert+0x15c>)
 8003e6c:	f00c f966 	bl	801013c <iprintf>
  ssi = hs->ssi;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <get_tag_insert+0x36>
 8003e7c:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <get_tag_insert+0x154>)
 8003e7e:	f240 3206 	movw	r2, #774	; 0x306
 8003e82:	494c      	ldr	r1, [pc, #304]	; (8003fb4 <get_tag_insert+0x160>)
 8003e84:	484a      	ldr	r0, [pc, #296]	; (8003fb0 <get_tag_insert+0x15c>)
 8003e86:	f00c f959 	bl	801013c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <get_tag_insert+0x164>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02e      	beq.n	8003ef0 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <get_tag_insert+0x168>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02a      	beq.n	8003ef0 <get_tag_insert+0x9c>
 8003e9a:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <get_tag_insert+0x16c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d026      	beq.n	8003ef0 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e01e      	b.n	8003ee6 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f103 0012 	add.w	r0, r3, #18
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <get_tag_insert+0x168>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fc f988 	bl	80001d0 <strcmp>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <get_tag_insert+0x164>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	f102 011b 	add.w	r1, r2, #27
 8003ed0:	22c0      	movs	r2, #192	; 0xc0
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	4798      	blx	r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003ede:	e060      	b.n	8003fa2 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <get_tag_insert+0x16c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dbdb      	blt.n	8003ea8 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3312      	adds	r3, #18
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc f975 	bl	80001e4 <strlen>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2ba6      	cmp	r3, #166	; 0xa6
 8003efe:	d818      	bhi.n	8003f32 <get_tag_insert+0xde>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	3312      	adds	r3, #18
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc f96d 	bl	80001e4 <strlen>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d810      	bhi.n	8003f32 <get_tag_insert+0xde>
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3312      	adds	r3, #18
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc f965 	bl	80001e4 <strlen>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2ba6      	cmp	r3, #166	; 0xa6
 8003f1e:	d806      	bhi.n	8003f2e <get_tag_insert+0xda>
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3312      	adds	r3, #18
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc f95d 	bl	80001e4 <strlen>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	e002      	b.n	8003f34 <get_tag_insert+0xe0>
 8003f2e:	23a7      	movs	r3, #167	; 0xa7
 8003f30:	e000      	b.n	8003f34 <get_tag_insert+0xe0>
 8003f32:	2309      	movs	r3, #9
 8003f34:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	331b      	adds	r3, #27
 8003f3a:	2212      	movs	r2, #18
 8003f3c:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <get_tag_insert+0x170>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f00c f8e9 	bl	8010116 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3312      	adds	r3, #18
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4619      	mov	r1, r3
 8003f52:	f00c f8e0 	bl	8010116 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3312      	adds	r3, #18
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3303      	adds	r3, #3
 8003f62:	2207      	movs	r2, #7
 8003f64:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <get_tag_insert+0x174>)
 8003f66:	4618      	mov	r0, r3
 8003f68:	f00c f8d5 	bl	8010116 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3319      	adds	r3, #25
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	2200      	movs	r2, #0
 8003f76:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	331b      	adds	r3, #27
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc f931 	bl	80001e4 <strlen>
 8003f82:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d306      	bcc.n	8003f9a <get_tag_insert+0x146>
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <get_tag_insert+0x154>)
 8003f8e:	f240 323f 	movw	r2, #831	; 0x33f
 8003f92:	490e      	ldr	r1, [pc, #56]	; (8003fcc <get_tag_insert+0x178>)
 8003f94:	4806      	ldr	r0, [pc, #24]	; (8003fb0 <get_tag_insert+0x15c>)
 8003f96:	f00c f8d1 	bl	801013c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	81da      	strh	r2, [r3, #14]
}
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	0801115c 	.word	0x0801115c
 8003fac:	080111cc 	.word	0x080111cc
 8003fb0:	080111a4 	.word	0x080111a4
 8003fb4:	080111d8 	.word	0x080111d8
 8003fb8:	200004e4 	.word	0x200004e4
 8003fbc:	200004ec 	.word	0x200004ec
 8003fc0:	200004e8 	.word	0x200004e8
 8003fc4:	080111e4 	.word	0x080111e4
 8003fc8:	080111f8 	.word	0x080111f8
 8003fcc:	08011200 	.word	0x08011200

08003fd0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff feca 	bl	8003d7e <http_eof>
    return 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e016      	b.n	800401c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fd7c 	bl	8003af0 <fs_bytes_left>
 8003ff8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	dc05      	bgt.n	800400c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff febb 	bl	8003d7e <http_eof>
    return 0;
 8004008:	2300      	movs	r3, #0
 800400a:	e007      	b.n	800401c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <http_check_eof+0x54>)
 800400e:	f240 429d 	movw	r2, #1181	; 0x49d
 8004012:	4905      	ldr	r1, [pc, #20]	; (8004028 <http_check_eof+0x58>)
 8004014:	4805      	ldr	r0, [pc, #20]	; (800402c <http_check_eof+0x5c>)
 8004016:	f00c f891 	bl	801013c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800401a:	2301      	movs	r3, #1
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	0801115c 	.word	0x0801115c
 8004028:	08011210 	.word	0x08011210
 800402c:	080111a4 	.word	0x080111a4

08004030 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004046:	4293      	cmp	r3, r2
 8004048:	d803      	bhi.n	8004052 <http_send_data_nonssi+0x22>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b29b      	uxth	r3, r3
 8004050:	e001      	b.n	8004056 <http_send_data_nonssi+0x26>
 8004052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004056:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6999      	ldr	r1, [r3, #24]
 800405c:	f107 020c 	add.w	r2, r7, #12
 8004060:	2300      	movs	r3, #0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fdd2 	bl	8003c0c <http_write>
 8004068:	4603      	mov	r3, r0
 800406a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800406c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	89ba      	ldrh	r2, [r7, #12]
 800407e:	441a      	add	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	89ba      	ldrh	r2, [r7, #12]
 800408a:	1a9a      	subs	r2, r3, r2
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <http_send_data_ssi+0x2c>
 80040ba:	4b9e      	ldr	r3, [pc, #632]	; (8004334 <http_send_data_ssi+0x298>)
 80040bc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80040c0:	499d      	ldr	r1, [pc, #628]	; (8004338 <http_send_data_ssi+0x29c>)
 80040c2:	489e      	ldr	r0, [pc, #632]	; (800433c <http_send_data_ssi+0x2a0>)
 80040c4:	f00c f83a 	bl	801013c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80040ce:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	f240 8270 	bls.w	80045be <http_send_data_ssi+0x522>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040ee:	4293      	cmp	r3, r2
 80040f0:	dc07      	bgt.n	8004102 <http_send_data_ssi+0x66>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	b29b      	uxth	r3, r3
 8004100:	e001      	b.n	8004106 <http_send_data_ssi+0x6a>
 8004102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004106:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	f107 020e 	add.w	r2, r7, #14
 8004110:	2300      	movs	r3, #0
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fd7a 	bl	8003c0c <http_write>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800411c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <http_send_data_ssi+0xa4>
      data_to_send = 1;
 8004124:	2301      	movs	r3, #1
 8004126:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	89fa      	ldrh	r2, [r7, #14]
 800412e:	441a      	add	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	89fa      	ldrh	r2, [r7, #14]
 800413a:	1a9a      	subs	r2, r3, r2
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 8239 	bne.w	80045be <http_send_data_ssi+0x522>
      return data_to_send;
 800414c:	7dbb      	ldrb	r3, [r7, #22]
 800414e:	e281      	b.n	8004654 <http_send_data_ssi+0x5b8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <http_send_data_ssi+0xbe>
      return data_to_send;
 8004156:	7dbb      	ldrb	r3, [r7, #22]
 8004158:	e27c      	b.n	8004654 <http_send_data_ssi+0x5b8>
    }
    switch (ssi->tag_state) {
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004160:	2b04      	cmp	r3, #4
 8004162:	f200 822b 	bhi.w	80045bc <http_send_data_ssi+0x520>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <http_send_data_ssi+0xd0>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004181 	.word	0x08004181
 8004170:	080041d3 	.word	0x080041d3
 8004174:	08004245 	.word	0x08004245
 8004178:	08004393 	.word	0x08004393
 800417c:	080044df 	.word	0x080044df
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004180:	2300      	movs	r3, #0
 8004182:	757b      	strb	r3, [r7, #21]
 8004184:	e017      	b.n	80041b6 <http_send_data_ssi+0x11a>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	7d7b      	ldrb	r3, [r7, #21]
 800418e:	496c      	ldr	r1, [pc, #432]	; (8004340 <http_send_data_ssi+0x2a4>)
 8004190:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d10a      	bne.n	80041b0 <http_send_data_ssi+0x114>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	7d7a      	ldrb	r2, [r7, #21]
 800419e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2201      	movs	r2, #1
 80041ac:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80041ae:	e005      	b.n	80041bc <http_send_data_ssi+0x120>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80041b0:	7d7b      	ldrb	r3, [r7, #21]
 80041b2:	3301      	adds	r3, #1
 80041b4:	757b      	strb	r3, [r7, #21]
 80041b6:	7d7b      	ldrb	r3, [r7, #21]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d9e4      	bls.n	8004186 <http_send_data_ssi+0xea>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	601a      	str	r2, [r3, #0]
        break;
 80041d0:	e1f5      	b.n	80045be <http_send_data_ssi+0x522>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	7c1b      	ldrb	r3, [r3, #16]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <http_send_data_ssi+0x2a4>)
 80041da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	8992      	ldrh	r2, [r2, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <http_send_data_ssi+0x15e>
          ssi->tag_index = 0;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2200      	movs	r2, #0
 80041ee:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80041f8:	e1e1      	b.n	80045be <http_send_data_ssi+0x522>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	7c1b      	ldrb	r3, [r3, #16]
 8004204:	4619      	mov	r1, r3
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <http_send_data_ssi+0x2a4>)
 8004208:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800420c:	6939      	ldr	r1, [r7, #16]
 800420e:	8989      	ldrh	r1, [r1, #12]
 8004210:	440b      	add	r3, r1
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d106      	bne.n	8004226 <http_send_data_ssi+0x18a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	899b      	ldrh	r3, [r3, #12]
 800421c:	3301      	adds	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	819a      	strh	r2, [r3, #12]
 8004224:	e003      	b.n	800422e <http_send_data_ssi+0x192>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	601a      	str	r2, [r3, #0]
        }
        break;
 8004242:	e1bc      	b.n	80045be <http_send_data_ssi+0x522>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	899b      	ldrh	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11e      	bne.n	800428a <http_send_data_ssi+0x1ee>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b20      	cmp	r3, #32
 8004254:	d00e      	beq.n	8004274 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800425c:	2b09      	cmp	r3, #9
 800425e:	d009      	beq.n	8004274 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b0a      	cmp	r3, #10
 8004268:	d004      	beq.n	8004274 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\r'))) {
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004270:	2b0d      	cmp	r3, #13
 8004272:	d10a      	bne.n	800428a <http_send_data_ssi+0x1ee>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	601a      	str	r2, [r3, #0]
          break;
 8004288:	e199      	b.n	80045be <http_send_data_ssi+0x522>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	7c1b      	ldrb	r3, [r3, #16]
 8004294:	492a      	ldr	r1, [pc, #168]	; (8004340 <http_send_data_ssi+0x2a4>)
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d013      	beq.n	80042ca <http_send_data_ssi+0x22e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d00e      	beq.n	80042ca <http_send_data_ssi+0x22e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	d009      	beq.n	80042ca <http_send_data_ssi+0x22e>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042bc:	2b0a      	cmp	r3, #10
 80042be:	d004      	beq.n	80042ca <http_send_data_ssi+0x22e>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b0d      	cmp	r3, #13
 80042c8:	d142      	bne.n	8004350 <http_send_data_ssi+0x2b4>

          if (ssi->tag_index == 0) {
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	899b      	ldrh	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <http_send_data_ssi+0x240>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 80042da:	e04f      	b.n	800437c <http_send_data_ssi+0x2e0>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2203      	movs	r2, #3
 80042e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	899b      	ldrh	r3, [r3, #12]
 80042e8:	2bff      	cmp	r3, #255	; 0xff
 80042ea:	d906      	bls.n	80042fa <http_send_data_ssi+0x25e>
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <http_send_data_ssi+0x298>)
 80042ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80042f2:	4914      	ldr	r1, [pc, #80]	; (8004344 <http_send_data_ssi+0x2a8>)
 80042f4:	4811      	ldr	r0, [pc, #68]	; (800433c <http_send_data_ssi+0x2a0>)
 80042f6:	f00b ff21 	bl	801013c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	899b      	ldrh	r3, [r3, #12]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	899b      	ldrh	r3, [r3, #12]
 8004308:	461a      	mov	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	2200      	movs	r2, #0
 8004310:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	7c1b      	ldrb	r3, [r3, #16]
 800431c:	4908      	ldr	r1, [pc, #32]	; (8004340 <http_send_data_ssi+0x2a4>)
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d10e      	bne.n	8004348 <http_send_data_ssi+0x2ac>
              ssi->tag_index = 1;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2201      	movs	r2, #1
 800432e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8004330:	e024      	b.n	800437c <http_send_data_ssi+0x2e0>
 8004332:	bf00      	nop
 8004334:	0801115c 	.word	0x0801115c
 8004338:	080111d8 	.word	0x080111d8
 800433c:	080111a4 	.word	0x080111a4
 8004340:	08014210 	.word	0x08014210
 8004344:	08011248 	.word	0x08011248
            } else {
              ssi->tag_index = 0;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2200      	movs	r2, #0
 800434c:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800434e:	e015      	b.n	800437c <http_send_data_ssi+0x2e0>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	899b      	ldrh	r3, [r3, #12]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d80d      	bhi.n	8004374 <http_send_data_ssi+0x2d8>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	899b      	ldrh	r3, [r3, #12]
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	b288      	uxth	r0, r1
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	8188      	strh	r0, [r1, #12]
 8004368:	4619      	mov	r1, r3
 800436a:	7812      	ldrb	r2, [r2, #0]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	440b      	add	r3, r1
 8004370:	749a      	strb	r2, [r3, #18]
 8004372:	e003      	b.n	800437c <http_send_data_ssi+0x2e0>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	1e5a      	subs	r2, r3, #1
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	601a      	str	r2, [r3, #0]

        break;
 8004390:	e115      	b.n	80045be <http_send_data_ssi+0x522>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	899b      	ldrh	r3, [r3, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11e      	bne.n	80043d8 <http_send_data_ssi+0x33c>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d00e      	beq.n	80043c2 <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	d009      	beq.n	80043c2 <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b0a      	cmp	r3, #10
 80043b6:	d004      	beq.n	80043c2 <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\r'))) {
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043be:	2b0d      	cmp	r3, #13
 80043c0:	d10a      	bne.n	80043d8 <http_send_data_ssi+0x33c>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	601a      	str	r2, [r3, #0]
          break;
 80043d6:	e0f2      	b.n	80045be <http_send_data_ssi+0x522>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	7c1b      	ldrb	r3, [r3, #16]
 80043e2:	499e      	ldr	r1, [pc, #632]	; (800465c <http_send_data_ssi+0x5c0>)
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	6939      	ldr	r1, [r7, #16]
 80043ec:	8989      	ldrh	r1, [r1, #12]
 80043ee:	440b      	add	r3, r1
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d164      	bne.n	80044c0 <http_send_data_ssi+0x424>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	899b      	ldrh	r3, [r3, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	7c1b      	ldrb	r3, [r3, #16]
 800441a:	4a90      	ldr	r2, [pc, #576]	; (800465c <http_send_data_ssi+0x5c0>)
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	8992      	ldrh	r2, [r2, #12]
 8004426:	4413      	add	r3, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 80c7 	bne.w	80045be <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8004430:	6838      	ldr	r0, [r7, #0]
 8004432:	f7ff fd0f 	bl	8003e54 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2200      	movs	r2, #0
 800443a:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2204      	movs	r2, #4
 8004440:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	f240 80b2 	bls.w	80045be <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	461a      	mov	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800446a:	4293      	cmp	r3, r2
 800446c:	dc07      	bgt.n	800447e <http_send_data_ssi+0x3e2>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	e001      	b.n	8004482 <http_send_data_ssi+0x3e6>
 800447e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004482:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6999      	ldr	r1, [r3, #24]
 8004488:	f107 020e 	add.w	r2, r7, #14
 800448c:	2300      	movs	r3, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fbbc 	bl	8003c0c <http_write>
 8004494:	4603      	mov	r3, r0
 8004496:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8004498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 808e 	bne.w	80045be <http_send_data_ssi+0x522>
                data_to_send = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	89fa      	ldrh	r2, [r7, #14]
 80044ac:	441a      	add	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	89fa      	ldrh	r2, [r7, #14]
 80044b8:	1a9a      	subs	r2, r3, r2
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24
 80044be:	e07e      	b.n	80045be <http_send_data_ssi+0x522>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 80044dc:	e06f      	b.n	80045be <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d937      	bls.n	800455a <http_send_data_ssi+0x4be>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044fa:	4293      	cmp	r3, r2
 80044fc:	dc07      	bgt.n	800450e <http_send_data_ssi+0x472>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	461a      	mov	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	e001      	b.n	8004512 <http_send_data_ssi+0x476>
 800450e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004512:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <http_send_data_ssi+0x494>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	f107 020e 	add.w	r2, r7, #14
 8004522:	2300      	movs	r3, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fb71 	bl	8003c0c <http_write>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]
 800452e:	e001      	b.n	8004534 <http_send_data_ssi+0x498>
          } else {
            err = ERR_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8004534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d140      	bne.n	80045be <http_send_data_ssi+0x522>
            data_to_send = 1;
 800453c:	2301      	movs	r3, #1
 800453e:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	89fa      	ldrh	r2, [r7, #14]
 8004546:	441a      	add	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	89fa      	ldrh	r2, [r7, #14]
 8004552:	1a9a      	subs	r2, r3, r2
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
 8004558:	e031      	b.n	80045be <http_send_data_ssi+0x522>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	899a      	ldrh	r2, [r3, #12]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	89db      	ldrh	r3, [r3, #14]
 8004562:	429a      	cmp	r2, r3
 8004564:	d222      	bcs.n	80045ac <http_send_data_ssi+0x510>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	89da      	ldrh	r2, [r3, #14]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	899b      	ldrh	r3, [r3, #12]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	899b      	ldrh	r3, [r3, #12]
 8004578:	3318      	adds	r3, #24
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	1cd9      	adds	r1, r3, #3
 8004580:	f107 020e 	add.w	r2, r7, #14
 8004584:	2301      	movs	r3, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fb40 	bl	8003c0c <http_write>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8004590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d112      	bne.n	80045be <http_send_data_ssi+0x522>
              data_to_send = 1;
 8004598:	2301      	movs	r3, #1
 800459a:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	899a      	ldrh	r2, [r3, #12]
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	4413      	add	r3, r2
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	819a      	strh	r2, [r3, #12]
 80045aa:	e008      	b.n	80045be <http_send_data_ssi+0x522>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2200      	movs	r2, #0
 80045b0:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80045ba:	e000      	b.n	80045be <http_send_data_ssi+0x522>
        default:
          break;
 80045bc:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d003      	beq.n	80045d0 <http_send_data_ssi+0x534>
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <http_send_data_ssi+0x53e>
 80045d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f43f adbb 	beq.w	8004150 <http_send_data_ssi+0xb4>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d036      	beq.n	8004652 <http_send_data_ssi+0x5b6>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d930      	bls.n	8004652 <http_send_data_ssi+0x5b6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004600:	4293      	cmp	r3, r2
 8004602:	dc07      	bgt.n	8004614 <http_send_data_ssi+0x578>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	b29b      	uxth	r3, r3
 8004612:	e001      	b.n	8004618 <http_send_data_ssi+0x57c>
 8004614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004618:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	f107 020e 	add.w	r2, r7, #14
 8004622:	2300      	movs	r3, #0
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff faf1 	bl	8003c0c <http_write>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800462e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <http_send_data_ssi+0x5b6>
      data_to_send = 1;
 8004636:	2301      	movs	r3, #1
 8004638:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	89fa      	ldrh	r2, [r7, #14]
 8004640:	441a      	add	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	89fa      	ldrh	r2, [r7, #14]
 800464c:	1a9a      	subs	r2, r3, r2
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8004652:	7dbb      	ldrb	r3, [r7, #22]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08014210 	.word	0x08014210

08004660 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <http_send+0x18>
    return 0;
 8004674:	2300      	movs	r3, #0
 8004676:	e030      	b.n	80046da <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fca4 	bl	8003fd0 <http_check_eof>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <http_send+0x32>
      return 0;
 800468e:	2300      	movs	r3, #0
 8004690:	e023      	b.n	80046da <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fcfd 	bl	800409c <http_send_data_ssi>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e005      	b.n	80046b4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fcc0 	bl	8004030 <http_send_data_nonssi>
 80046b0:	4603      	mov	r3, r0
 80046b2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <http_send+0x78>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fa15 	bl	8003af0 <fs_bytes_left>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dc05      	bgt.n	80046d8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fb55 	bl	8003d7e <http_eof>
    return 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <http_get_404_file+0x80>)
 80046f2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7ff f9af 	bl	8003a60 <fs_open>
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8004706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d024      	beq.n	8004758 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4a15      	ldr	r2, [pc, #84]	; (8004768 <http_get_404_file+0x84>)
 8004712:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f7ff f99f 	bl	8003a60 <fs_open>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8004726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	4a0e      	ldr	r2, [pc, #56]	; (800476c <http_get_404_file+0x88>)
 8004732:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7ff f98f 	bl	8003a60 <fs_open>
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8004746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
        return NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8004758:	687b      	ldr	r3, [r7, #4]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	08011260 	.word	0x08011260
 8004768:	0801126c 	.word	0x0801126c
 800476c:	08011278 	.word	0x08011278

08004770 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <http_parse_request+0x24>
 8004786:	4b65      	ldr	r3, [pc, #404]	; (800491c <http_parse_request+0x1ac>)
 8004788:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800478c:	4964      	ldr	r1, [pc, #400]	; (8004920 <http_parse_request+0x1b0>)
 800478e:	4865      	ldr	r0, [pc, #404]	; (8004924 <http_parse_request+0x1b4>)
 8004790:	f00b fcd4 	bl	801013c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <http_parse_request+0x38>
 800479a:	4b60      	ldr	r3, [pc, #384]	; (800491c <http_parse_request+0x1ac>)
 800479c:	f240 72af 	movw	r2, #1967	; 0x7af
 80047a0:	4961      	ldr	r1, [pc, #388]	; (8004928 <http_parse_request+0x1b8>)
 80047a2:	4860      	ldr	r0, [pc, #384]	; (8004924 <http_parse_request+0x1b4>)
 80047a4:	f00b fcca 	bl	801013c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <http_parse_request+0x48>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80047b8:	f06f 0307 	mvn.w	r3, #7
 80047bc:	e0aa      	b.n	8004914 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	621a      	str	r2, [r3, #32]
 80047cc:	e005      	b.n	80047da <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 f8b7 	bl	8006948 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80047da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047dc:	f002 f892 	bl	8006904 <pbuf_ref>

  if (hs->req->next != NULL) {
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	891b      	ldrh	r3, [r3, #8]
 80047f0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bf28      	it	cs
 80047f8:	4613      	movcs	r3, r2
 80047fa:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6a18      	ldr	r0, [r3, #32]
 8004800:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004802:	2300      	movs	r3, #0
 8004804:	4949      	ldr	r1, [pc, #292]	; (800492c <http_parse_request+0x1bc>)
 8004806:	f002 f9d7 	bl	8006bb8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800480a:	4b48      	ldr	r3, [pc, #288]	; (800492c <http_parse_request+0x1bc>)
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
 800480e:	e005      	b.n	800481c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	895b      	ldrh	r3, [r3, #10]
 800481a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800481c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800481e:	2b06      	cmp	r3, #6
 8004820:	d963      	bls.n	80048ea <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004822:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004824:	461a      	mov	r2, r3
 8004826:	4942      	ldr	r1, [pc, #264]	; (8004930 <http_parse_request+0x1c0>)
 8004828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800482a:	f000 fcdf 	bl	80051ec <lwip_strnstr>
 800482e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d059      	beq.n	80048ea <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800483a:	2204      	movs	r2, #4
 800483c:	493d      	ldr	r1, [pc, #244]	; (8004934 <http_parse_request+0x1c4>)
 800483e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004840:	f00b fcd5 	bl	80101ee <strncmp>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d117      	bne.n	800487a <http_parse_request+0x10a>
        sp1 = data + 3;
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	3303      	adds	r3, #3
 800484e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	461a      	mov	r2, r3
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	8b7a      	ldrh	r2, [r7, #26]
 8004868:	4933      	ldr	r1, [pc, #204]	; (8004938 <http_parse_request+0x1c8>)
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fcbe 	bl	80051ec <lwip_strnstr>
 8004870:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <http_parse_request+0x12c>
 8004878:	e006      	b.n	8004888 <http_parse_request+0x118>
        data[4] = 0;
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	3304      	adds	r3, #4
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8004882:	f06f 030f 	mvn.w	r3, #15
 8004886:	e045      	b.n	8004914 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	8b7a      	ldrh	r2, [r7, #26]
 800488e:	4928      	ldr	r1, [pc, #160]	; (8004930 <http_parse_request+0x1c0>)
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fcab 	bl	80051ec <lwip_strnstr>
 8004896:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	3201      	adds	r2, #1
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01e      	beq.n	80048ea <http_parse_request+0x17a>
 80048ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d91a      	bls.n	80048ea <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80048b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048b6:	461a      	mov	r2, r3
 80048b8:	4920      	ldr	r1, [pc, #128]	; (800493c <http_parse_request+0x1cc>)
 80048ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048bc:	f000 fc96 	bl	80051ec <lwip_strnstr>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80048d2:	8b3b      	ldrh	r3, [r7, #24]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80048dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	68b8      	ldr	r0, [r7, #8]
 80048e2:	f000 f87f 	bl	80049e4 <http_find_file>
 80048e6:	4603      	mov	r3, r0
 80048e8:	e014      	b.n	8004914 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fff0 	bl	80068d4 <pbuf_clen>
 80048f4:	4603      	mov	r3, r0
 80048f6:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	891b      	ldrh	r3, [r3, #8]
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d205      	bcs.n	8004910 <http_parse_request+0x1a0>
 8004904:	8a7b      	ldrh	r3, [r7, #18]
 8004906:	2b05      	cmp	r3, #5
 8004908:	d802      	bhi.n	8004910 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800490a:	f06f 0304 	mvn.w	r3, #4
 800490e:	e001      	b.n	8004914 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8004910:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3738      	adds	r7, #56	; 0x38
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0801115c 	.word	0x0801115c
 8004920:	08011284 	.word	0x08011284
 8004924:	080111a4 	.word	0x080111a4
 8004928:	080111cc 	.word	0x080111cc
 800492c:	200000a4 	.word	0x200000a4
 8004930:	08011290 	.word	0x08011290
 8004934:	08011294 	.word	0x08011294
 8004938:	0801129c 	.word	0x0801129c
 800493c:	080112a0 	.word	0x080112a0

08004940 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d040      	beq.n	80049d6 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8004958:	213f      	movs	r1, #63	; 0x3f
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f00b fc3a 	bl	80101d4 <strchr>
 8004960:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	613b      	str	r3, [r7, #16]
    ext = uri;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004976:	212e      	movs	r1, #46	; 0x2e
 8004978:	6938      	ldr	r0, [r7, #16]
 800497a:	f00b fc2b 	bl	80101d4 <strchr>
 800497e:	6138      	str	r0, [r7, #16]
 8004980:	e009      	b.n	8004996 <http_uri_is_ssi+0x56>
      ext = sub;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	617b      	str	r3, [r7, #20]
      sub++;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3301      	adds	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800498c:	212e      	movs	r1, #46	; 0x2e
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f00b fc20 	bl	80101d4 <strchr>
 8004994:	6138      	str	r0, [r7, #16]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f2      	bne.n	8004982 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e010      	b.n	80049c4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <http_uri_is_ssi+0xa0>)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	4619      	mov	r1, r3
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f000 fc53 	bl	8005258 <lwip_stricmp>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <http_uri_is_ssi+0x7e>
        tag_check = 1;
 80049b8:	2301      	movs	r3, #1
 80049ba:	76fb      	strb	r3, [r7, #27]
        break;
 80049bc:	e005      	b.n	80049ca <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d9eb      	bls.n	80049a2 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <http_uri_is_ssi+0x96>
      *param = '?';
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	223f      	movs	r2, #63	; 0x3f
 80049d4:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80049d6:	7efb      	ldrb	r3, [r7, #27]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	080141d4 	.word	0x080141d4

080049e4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b093      	sub	sp, #76	; 0x4c
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fbef 	bl	80001e4 <strlen>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d072      	beq.n	8004af4 <http_find_file+0x110>
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3b01      	subs	r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b2f      	cmp	r3, #47	; 0x2f
 8004a1a:	d16b      	bne.n	8004af4 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a1c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a1e:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <http_find_file+0x23c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d102      	bne.n	8004a2a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d164      	bne.n	8004af4 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	2b3f      	cmp	r3, #63	; 0x3f
 8004a30:	bf28      	it	cs
 8004a32:	233f      	movcs	r3, #63	; 0x3f
 8004a34:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	4619      	mov	r1, r3
 8004a42:	4877      	ldr	r0, [pc, #476]	; (8004c20 <http_find_file+0x23c>)
 8004a44:	f00b fb67 	bl	8010116 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004a48:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <http_find_file+0x23c>)
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004a52:	2300      	movs	r3, #0
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a56:	e04a      	b.n	8004aee <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d028      	beq.n	8004ab0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004a64:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004a6c:	4a6d      	ldr	r2, [pc, #436]	; (8004c24 <http_find_file+0x240>)
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fbb5 	bl	80001e4 <strlen>
 8004a7a:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bf28      	it	cs
 8004a84:	4613      	movcs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <http_find_file+0x23c>)
 8004a8c:	1898      	adds	r0, r3, r2
 8004a8e:	4a65      	ldr	r2, [pc, #404]	; (8004c24 <http_find_file+0x240>)
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f00b fb3c 	bl	8010116 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a5e      	ldr	r2, [pc, #376]	; (8004c20 <http_find_file+0x23c>)
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004aaa:	4b5d      	ldr	r3, [pc, #372]	; (8004c20 <http_find_file+0x23c>)
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	e004      	b.n	8004aba <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004ab0:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <http_find_file+0x240>)
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe ffce 	bl	8003a60 <fs_open>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <http_find_file+0x104>
        uri = file_name;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <http_find_file+0x240>)
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4413      	add	r3, r2
 8004ae0:	791b      	ldrb	r3, [r3, #4]
 8004ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004ae6:	e005      	b.n	8004af4 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	3301      	adds	r3, #1
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d9b1      	bls.n	8004a58 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d176      	bne.n	8004be8 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	213f      	movs	r1, #63	; 0x3f
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00b fb68 	bl	80101d4 <strchr>
 8004b04:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
      params++;
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	3301      	adds	r3, #1
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004b18:	4b43      	ldr	r3, [pc, #268]	; (8004c28 <http_find_file+0x244>)
 8004b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8004b20:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <http_find_file+0x248>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d034      	beq.n	8004b92 <http_find_file+0x1ae>
 8004b28:	4b41      	ldr	r3, [pc, #260]	; (8004c30 <http_find_file+0x24c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d030      	beq.n	8004b92 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004b30:	2300      	movs	r3, #0
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
 8004b34:	e028      	b.n	8004b88 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <http_find_file+0x24c>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7fb fb43 	bl	80001d0 <strcmp>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d118      	bne.n	8004b82 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8004b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff f920 	bl	8003d98 <extract_uri_parameters>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <http_find_file+0x244>)
 8004b5c:	601a      	str	r2, [r3, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004b5e:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <http_find_file+0x24c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	685c      	ldr	r4, [r3, #4]
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <http_find_file+0x244>)
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7a:	47a0      	blx	r4
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60bb      	str	r3, [r7, #8]
          break;
 8004b80:	e007      	b.n	8004b92 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	3301      	adds	r3, #1
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <http_find_file+0x248>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	dbd1      	blt.n	8004b36 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe ff61 	bl	8003a60 <fs_open>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8004ba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bae:	e006      	b.n	8004bbe <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff fd94 	bl	80046e4 <http_get_404_file>
 8004bbc:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d011      	beq.n	8004be8 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	7c1b      	ldrb	r3, [r3, #16]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <http_find_file+0x1f4>
        tag_check = 1;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bd6:	e007      	b.n	8004be8 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bde:	f7ff feaf 	bl	8004940 <http_uri_is_ssi>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fd75 	bl	80046e4 <http_get_404_file>
 8004bfa:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f810 	bl	8004c34 <http_init_file>
 8004c14:	4603      	mov	r3, r0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3744      	adds	r7, #68	; 0x44
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200004a4 	.word	0x200004a4
 8004c24:	080141e8 	.word	0x080141e8
 8004c28:	200004f8 	.word	0x200004f8
 8004c2c:	200004f4 	.word	0x200004f4
 8004c30:	200004f0 	.word	0x200004f0

08004c34 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d07e      	beq.n	8004d46 <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <http_init_file+0x2a>
 8004c50:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <http_init_file+0x138>)
 8004c52:	f640 120b 	movw	r2, #2315	; 0x90b
 8004c56:	4946      	ldr	r1, [pc, #280]	; (8004d70 <http_init_file+0x13c>)
 8004c58:	4846      	ldr	r0, [pc, #280]	; (8004d74 <http_init_file+0x140>)
 8004c5a:	f00b fa6f 	bl	801013c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01c      	beq.n	8004ca0 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004c66:	f7fe ff52 	bl	8003b0e <http_ssi_state_alloc>
 8004c6a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2200      	movs	r2, #0
 8004c76:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da06      	bge.n	8004cc4 <http_init_file+0x90>
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <http_init_file+0x138>)
 8004cb8:	f640 1234 	movw	r2, #2356	; 0x934
 8004cbc:	492e      	ldr	r1, [pc, #184]	; (8004d78 <http_init_file+0x144>)
 8004cbe:	482d      	ldr	r0, [pc, #180]	; (8004d74 <http_init_file+0x140>)
 8004cc0:	f00b fa3c 	bl	801013c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	7c1b      	ldrb	r3, [r3, #16]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <http_init_file+0xbe>
 8004ce4:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <http_init_file+0x138>)
 8004ce6:	f640 1244 	movw	r2, #2372	; 0x944
 8004cea:	4924      	ldr	r1, [pc, #144]	; (8004d7c <http_init_file+0x148>)
 8004cec:	4821      	ldr	r0, [pc, #132]	; (8004d74 <http_init_file+0x140>)
 8004cee:	f00b fa25 	bl	801013c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d033      	beq.n	8004d60 <http_init_file+0x12c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	7c1b      	ldrb	r3, [r3, #16]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02c      	beq.n	8004d60 <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6998      	ldr	r0, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	461a      	mov	r2, r3
 8004d10:	491b      	ldr	r1, [pc, #108]	; (8004d80 <http_init_file+0x14c>)
 8004d12:	f000 fa6b 	bl	80051ec <lwip_strnstr>
 8004d16:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d020      	beq.n	8004d60 <http_init_file+0x12c>
        int diff = file_start + 4 - hs->file;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	3304      	adds	r3, #4
 8004d22:	461a      	mov	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	699a      	ldr	r2, [r3, #24]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	441a      	add	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad2      	subs	r2, r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
 8004d44:	e00c      	b.n	8004d60 <http_init_file+0x12c>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	0801115c 	.word	0x0801115c
 8004d70:	080112a8 	.word	0x080112a8
 8004d74:	080111a4 	.word	0x080111a4
 8004d78:	080112bc 	.word	0x080112bc
 8004d7c:	080112dc 	.word	0x080112dc
 8004d80:	080112a0 	.word	0x080112a0

08004d84 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <http_err+0x1c>
    http_state_free(hs);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7fe ff24 	bl	8003be8 <http_state_free>
  }
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <http_sent+0x1c>
    return ERR_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e008      	b.n	8004dd6 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	68b8      	ldr	r0, [r7, #8]
 8004dd0:	f7ff fc46 	bl	8004660 <http_send>

  return ERR_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8004df2:	2100      	movs	r1, #0
 8004df4:	6838      	ldr	r0, [r7, #0]
 8004df6:	f7fe ffb3 	bl	8003d60 <http_close_conn>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e021      	b.n	8004e46 <http_poll+0x68>
  } else {
    hs->retries++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d105      	bne.n	8004e28 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f7fe ff9e 	bl	8003d60 <http_close_conn>
      return ERR_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e00e      	b.n	8004e46 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	6838      	ldr	r0, [r7, #0]
 8004e34:	f7ff fc14 	bl	8004660 <http_send>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8004e3e:	6838      	ldr	r0, [r7, #0]
 8004e40:	f007 f83a 	bl	800beb8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d105      	bne.n	8004e76 <http_recv+0x26>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <http_recv+0x26>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d111      	bne.n	8004e9a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	891b      	ldrh	r3, [r3, #8]
 8004e80:	4619      	mov	r1, r3
 8004e82:	68b8      	ldr	r0, [r7, #8]
 8004e84:	f002 fc08 	bl	8007698 <tcp_recved>
      pbuf_free(p);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 fc9b 	bl	80067c4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	68b8      	ldr	r0, [r7, #8]
 8004e92:	f7fe ff65 	bl	8003d60 <http_close_conn>
    return ERR_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e055      	b.n	8004f46 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	891b      	ldrh	r3, [r3, #8]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68b8      	ldr	r0, [r7, #8]
 8004ea2:	f002 fbf9 	bl	8007698 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d147      	bne.n	8004f3e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fc5c 	bl	8004770 <http_parse_request>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004ebc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <http_recv+0xa0>
 8004ec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ec8:	f113 0f05 	cmn.w	r3, #5
 8004ecc:	d010      	beq.n	8004ef0 <http_recv+0xa0>
 8004ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ed2:	f113 0f10 	cmn.w	r3, #16
 8004ed6:	d00b      	beq.n	8004ef0 <http_recv+0xa0>
 8004ed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004edc:	f113 0f08 	cmn.w	r3, #8
 8004ee0:	d006      	beq.n	8004ef0 <http_recv+0xa0>
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <http_recv+0x100>)
 8004ee4:	f640 2205 	movw	r2, #2565	; 0xa05
 8004ee8:	491a      	ldr	r1, [pc, #104]	; (8004f54 <http_recv+0x104>)
 8004eea:	481b      	ldr	r0, [pc, #108]	; (8004f58 <http_recv+0x108>)
 8004eec:	f00b f926 	bl	801013c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ef4:	f113 0f05 	cmn.w	r3, #5
 8004ef8:	d00b      	beq.n	8004f12 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <http_recv+0xc2>
          pbuf_free(hs->req);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fc5c 	bl	80067c4 <pbuf_free>
          hs->req = NULL;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 fc56 	bl	80067c4 <pbuf_free>
      if (parsed == ERR_OK) {
 8004f18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004f20:	6979      	ldr	r1, [r7, #20]
 8004f22:	68b8      	ldr	r0, [r7, #8]
 8004f24:	f7ff fb9c 	bl	8004660 <http_send>
 8004f28:	e00c      	b.n	8004f44 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004f2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f2e:	f113 0f10 	cmn.w	r3, #16
 8004f32:	d107      	bne.n	8004f44 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f7fe ff12 	bl	8003d60 <http_close_conn>
 8004f3c:	e002      	b.n	8004f44 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc40 	bl	80067c4 <pbuf_free>
    }
  }
  return ERR_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	0801115c 	.word	0x0801115c
 8004f54:	08011308 	.word	0x08011308
 8004f58:	080111a4 	.word	0x080111a4

08004f5c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <http_accept+0x1c>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <http_accept+0x22>
    return ERR_VAL;
 8004f78:	f06f 0305 	mvn.w	r3, #5
 8004f7c:	e025      	b.n	8004fca <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004f7e:	2101      	movs	r1, #1
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f003 f869 	bl	8008058 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004f86:	f7fe fdf1 	bl	8003b6c <http_state_alloc>
 8004f8a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	e018      	b.n	8004fca <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f003 fa61 	bl	8008468 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004fa6:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <http_accept+0x78>)
 8004fa8:	68b8      	ldr	r0, [r7, #8]
 8004faa:	f003 fa6f 	bl	800848c <tcp_recv>
  altcp_err(pcb, http_err);
 8004fae:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <http_accept+0x7c>)
 8004fb0:	68b8      	ldr	r0, [r7, #8]
 8004fb2:	f003 faaf 	bl	8008514 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	4908      	ldr	r1, [pc, #32]	; (8004fdc <http_accept+0x80>)
 8004fba:	68b8      	ldr	r0, [r7, #8]
 8004fbc:	f003 fae4 	bl	8008588 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <http_accept+0x84>)
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f003 fa84 	bl	80084d0 <tcp_sent>

  return ERR_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08004e51 	.word	0x08004e51
 8004fd8:	08004d85 	.word	0x08004d85
 8004fdc:	08004ddf 	.word	0x08004ddf
 8004fe0:	08004da9 	.word	0x08004da9

08004fe4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d029      	beq.n	800504a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f003 f82d 	bl	8008058 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	461a      	mov	r2, r3
 8005002:	4914      	ldr	r1, [pc, #80]	; (8005054 <httpd_init_pcb+0x70>)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f002 f979 	bl	80072fc <tcp_bind>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <httpd_init_pcb+0x40>
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <httpd_init_pcb+0x74>)
 8005018:	f640 2257 	movw	r2, #2647	; 0xa57
 800501c:	490f      	ldr	r1, [pc, #60]	; (800505c <httpd_init_pcb+0x78>)
 800501e:	4810      	ldr	r0, [pc, #64]	; (8005060 <httpd_init_pcb+0x7c>)
 8005020:	f00b f88c 	bl	801013c <iprintf>
    pcb = altcp_listen(pcb);
 8005024:	21ff      	movs	r1, #255	; 0xff
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fa20 	bl	800746c <tcp_listen_with_backlog>
 800502c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <httpd_init_pcb+0x5e>
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <httpd_init_pcb+0x74>)
 8005036:	f640 2259 	movw	r2, #2649	; 0xa59
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <httpd_init_pcb+0x80>)
 800503c:	4808      	ldr	r0, [pc, #32]	; (8005060 <httpd_init_pcb+0x7c>)
 800503e:	f00b f87d 	bl	801013c <iprintf>
    altcp_accept(pcb, http_accept);
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <httpd_init_pcb+0x84>)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f003 fa87 	bl	8008558 <tcp_accept>
  }
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	080142f0 	.word	0x080142f0
 8005058:	0801115c 	.word	0x0801115c
 800505c:	08011334 	.word	0x08011334
 8005060:	080111a4 	.word	0x080111a4
 8005064:	08011350 	.word	0x08011350
 8005068:	08004f5d 	.word	0x08004f5d

0800506c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005072:	202e      	movs	r0, #46	; 0x2e
 8005074:	f003 f9ea 	bl	800844c <tcp_new_ip_type>
 8005078:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <httpd_init+0x22>
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <httpd_init+0x34>)
 8005082:	f640 2272 	movw	r2, #2674	; 0xa72
 8005086:	4907      	ldr	r1, [pc, #28]	; (80050a4 <httpd_init+0x38>)
 8005088:	4807      	ldr	r0, [pc, #28]	; (80050a8 <httpd_init+0x3c>)
 800508a:	f00b f857 	bl	801013c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800508e:	2150      	movs	r1, #80	; 0x50
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ffa7 	bl	8004fe4 <httpd_init_pcb>
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	0801115c 	.word	0x0801115c
 80050a4:	08011370 	.word	0x08011370
 80050a8:	080111a4 	.word	0x080111a4

080050ac <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <http_set_ssi_handler+0x20>
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <http_set_ssi_handler+0x64>)
 80050c0:	f640 2297 	movw	r2, #2711	; 0xa97
 80050c4:	4913      	ldr	r1, [pc, #76]	; (8005114 <http_set_ssi_handler+0x68>)
 80050c6:	4814      	ldr	r0, [pc, #80]	; (8005118 <http_set_ssi_handler+0x6c>)
 80050c8:	f00b f838 	bl	801013c <iprintf>
  httpd_ssi_handler = ssi_handler;
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <http_set_ssi_handler+0x70>)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <http_set_ssi_handler+0x3a>
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <http_set_ssi_handler+0x64>)
 80050da:	f640 229e 	movw	r2, #2718	; 0xa9e
 80050de:	4910      	ldr	r1, [pc, #64]	; (8005120 <http_set_ssi_handler+0x74>)
 80050e0:	480d      	ldr	r0, [pc, #52]	; (8005118 <http_set_ssi_handler+0x6c>)
 80050e2:	f00b f82b 	bl	801013c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dc06      	bgt.n	80050fa <http_set_ssi_handler+0x4e>
 80050ec:	4b08      	ldr	r3, [pc, #32]	; (8005110 <http_set_ssi_handler+0x64>)
 80050ee:	f640 229f 	movw	r2, #2719	; 0xa9f
 80050f2:	490c      	ldr	r1, [pc, #48]	; (8005124 <http_set_ssi_handler+0x78>)
 80050f4:	4808      	ldr	r0, [pc, #32]	; (8005118 <http_set_ssi_handler+0x6c>)
 80050f6:	f00b f821 	bl	801013c <iprintf>

  httpd_tags = tags;
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <http_set_ssi_handler+0x7c>)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <http_set_ssi_handler+0x80>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	0801115c 	.word	0x0801115c
 8005114:	0801138c 	.word	0x0801138c
 8005118:	080111a4 	.word	0x080111a4
 800511c:	200004e4 	.word	0x200004e4
 8005120:	080113a4 	.word	0x080113a4
 8005124:	080113b4 	.word	0x080113b4
 8005128:	200004ec 	.word	0x200004ec
 800512c:	200004e8 	.word	0x200004e8

08005130 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <http_set_cgi_handlers+0x1e>
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <http_set_cgi_handlers+0x48>)
 8005142:	f640 22b2 	movw	r2, #2738	; 0xab2
 8005146:	490d      	ldr	r1, [pc, #52]	; (800517c <http_set_cgi_handlers+0x4c>)
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <http_set_cgi_handlers+0x50>)
 800514a:	f00a fff7 	bl	801013c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dc06      	bgt.n	8005162 <http_set_cgi_handlers+0x32>
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <http_set_cgi_handlers+0x48>)
 8005156:	f640 22b3 	movw	r2, #2739	; 0xab3
 800515a:	490a      	ldr	r1, [pc, #40]	; (8005184 <http_set_cgi_handlers+0x54>)
 800515c:	4808      	ldr	r0, [pc, #32]	; (8005180 <http_set_cgi_handlers+0x50>)
 800515e:	f00a ffed 	bl	801013c <iprintf>

  httpd_cgis = cgis;
 8005162:	4a09      	ldr	r2, [pc, #36]	; (8005188 <http_set_cgi_handlers+0x58>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8005168:	4a08      	ldr	r2, [pc, #32]	; (800518c <http_set_cgi_handlers+0x5c>)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	0801115c 	.word	0x0801115c
 800517c:	080113cc 	.word	0x080113cc
 8005180:	080111a4 	.word	0x080111a4
 8005184:	080113dc 	.word	0x080113dc
 8005188:	200004f0 	.word	0x200004f0
 800518c:	200004f4 	.word	0x200004f4

08005190 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	b21a      	sxth	r2, r3
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	4313      	orrs	r3, r2
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	b29b      	uxth	r3, r3
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	061a      	lsls	r2, r3, #24
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	4313      	orrs	r3, r2
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f7fa fff3 	bl	80001e4 <strlen>
 80051fe:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	e022      	b.n	8005250 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e012      	b.n	8005236 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	781a      	ldrb	r2, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d109      	bne.n	8005230 <lwip_strnstr+0x44>
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	6978      	ldr	r0, [r7, #20]
 8005222:	f00a ffe4 	bl	80101ee <strncmp>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	e00f      	b.n	8005250 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3301      	adds	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <lwip_strnstr+0x62>
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	441a      	add	r2, r3
 8005244:	68f9      	ldr	r1, [r7, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	440b      	add	r3, r1
 800524a:	429a      	cmp	r2, r3
 800524c:	d9e0      	bls.n	8005210 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	603a      	str	r2, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	429a      	cmp	r2, r3
 800527c:	d016      	beq.n	80052ac <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005286:	7b7b      	ldrb	r3, [r7, #13]
 8005288:	2b60      	cmp	r3, #96	; 0x60
 800528a:	d90c      	bls.n	80052a6 <lwip_stricmp+0x4e>
 800528c:	7b7b      	ldrb	r3, [r7, #13]
 800528e:	2b7a      	cmp	r3, #122	; 0x7a
 8005290:	d809      	bhi.n	80052a6 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	f043 0320 	orr.w	r3, r3, #32
 8005298:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800529a:	7b7a      	ldrb	r2, [r7, #13]
 800529c:	7b3b      	ldrb	r3, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d003      	beq.n	80052aa <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e006      	b.n	80052b4 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e004      	b.n	80052b4 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80052aa:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1d7      	bne.n	8005262 <lwip_stricmp+0xa>
  return 0;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80052ca:	f000 f8d5 	bl	8005478 <mem_init>
  memp_init();
 80052ce:	f000 fbdb 	bl	8005a88 <memp_init>
  pbuf_init();
  netif_init();
 80052d2:	f000 fc93 	bl	8005bfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80052d6:	f007 febd 	bl	800d054 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80052da:	f001 fd11 	bl	8006d00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80052de:	f007 fe31 	bl	800cf44 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <ptr_to_mem+0x20>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4413      	add	r3, r2
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	200004fc 	.word	0x200004fc

08005310 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a05      	ldr	r2, [pc, #20]	; (8005330 <mem_to_ptr+0x20>)
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	b29b      	uxth	r3, r3
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200004fc 	.word	0x200004fc

08005334 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <plug_holes+0x120>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d206      	bcs.n	8005354 <plug_holes+0x20>
 8005346:	4b44      	ldr	r3, [pc, #272]	; (8005458 <plug_holes+0x124>)
 8005348:	f240 12df 	movw	r2, #479	; 0x1df
 800534c:	4943      	ldr	r1, [pc, #268]	; (800545c <plug_holes+0x128>)
 800534e:	4844      	ldr	r0, [pc, #272]	; (8005460 <plug_holes+0x12c>)
 8005350:	f00a fef4 	bl	801013c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005354:	4b43      	ldr	r3, [pc, #268]	; (8005464 <plug_holes+0x130>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d306      	bcc.n	800536c <plug_holes+0x38>
 800535e:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <plug_holes+0x124>)
 8005360:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005364:	4940      	ldr	r1, [pc, #256]	; (8005468 <plug_holes+0x134>)
 8005366:	483e      	ldr	r0, [pc, #248]	; (8005460 <plug_holes+0x12c>)
 8005368:	f00a fee8 	bl	801013c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	791b      	ldrb	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <plug_holes+0x4e>
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <plug_holes+0x124>)
 8005376:	f240 12e1 	movw	r2, #481	; 0x1e1
 800537a:	493c      	ldr	r1, [pc, #240]	; (800546c <plug_holes+0x138>)
 800537c:	4838      	ldr	r0, [pc, #224]	; (8005460 <plug_holes+0x12c>)
 800537e:	f00a fedd 	bl	801013c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800538a:	d906      	bls.n	800539a <plug_holes+0x66>
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <plug_holes+0x124>)
 800538e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005392:	4937      	ldr	r1, [pc, #220]	; (8005470 <plug_holes+0x13c>)
 8005394:	4832      	ldr	r0, [pc, #200]	; (8005460 <plug_holes+0x12c>)
 8005396:	f00a fed1 	bl	801013c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ffa4 	bl	80052ec <ptr_to_mem>
 80053a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d024      	beq.n	80053f8 <plug_holes+0xc4>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	791b      	ldrb	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d120      	bne.n	80053f8 <plug_holes+0xc4>
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <plug_holes+0x130>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d01b      	beq.n	80053f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80053c0:	4b2c      	ldr	r3, [pc, #176]	; (8005474 <plug_holes+0x140>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d102      	bne.n	80053d0 <plug_holes+0x9c>
      lfree = mem;
 80053ca:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <plug_holes+0x140>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	881a      	ldrh	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053e0:	d00a      	beq.n	80053f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff ff80 	bl	80052ec <ptr_to_mem>
 80053ec:	4604      	mov	r4, r0
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff ff8e 	bl	8005310 <mem_to_ptr>
 80053f4:	4603      	mov	r3, r0
 80053f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	885b      	ldrh	r3, [r3, #2]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff75 	bl	80052ec <ptr_to_mem>
 8005402:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d01f      	beq.n	800544c <plug_holes+0x118>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	791b      	ldrb	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11b      	bne.n	800544c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <plug_holes+0x140>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d102      	bne.n	8005424 <plug_holes+0xf0>
      lfree = pmem;
 800541e:	4a15      	ldr	r2, [pc, #84]	; (8005474 <plug_holes+0x140>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005434:	d00a      	beq.n	800544c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ff56 	bl	80052ec <ptr_to_mem>
 8005440:	4604      	mov	r4, r0
 8005442:	68b8      	ldr	r0, [r7, #8]
 8005444:	f7ff ff64 	bl	8005310 <mem_to_ptr>
 8005448:	4603      	mov	r3, r0
 800544a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	200004fc 	.word	0x200004fc
 8005458:	080113f8 	.word	0x080113f8
 800545c:	08011428 	.word	0x08011428
 8005460:	08011440 	.word	0x08011440
 8005464:	20000500 	.word	0x20000500
 8005468:	08011468 	.word	0x08011468
 800546c:	08011484 	.word	0x08011484
 8005470:	080114a0 	.word	0x080114a0
 8005474:	20000504 	.word	0x20000504

08005478 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <mem_init+0x68>)
 8005480:	3303      	adds	r3, #3
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	461a      	mov	r2, r3
 8005488:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <mem_init+0x6c>)
 800548a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800548c:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <mem_init+0x6c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005498:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80054a6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80054aa:	f7ff ff1f 	bl	80052ec <ptr_to_mem>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <mem_init+0x70>)
 80054b2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <mem_init+0x70>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <mem_init+0x70>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <mem_init+0x70>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <mem_init+0x6c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a05      	ldr	r2, [pc, #20]	; (80054ec <mem_init+0x74>)
 80054d6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200037cc 	.word	0x200037cc
 80054e4:	200004fc 	.word	0x200004fc
 80054e8:	20000500 	.word	0x20000500
 80054ec:	20000504 	.word	0x20000504

080054f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff09 	bl	8005310 <mem_to_ptr>
 80054fe:	4603      	mov	r3, r0
 8005500:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fef0 	bl	80052ec <ptr_to_mem>
 800550c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	885b      	ldrh	r3, [r3, #2]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff feea 	bl	80052ec <ptr_to_mem>
 8005518:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005522:	d818      	bhi.n	8005556 <mem_link_valid+0x66>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	885b      	ldrh	r3, [r3, #2]
 8005528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800552c:	d813      	bhi.n	8005556 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005532:	8afa      	ldrh	r2, [r7, #22]
 8005534:	429a      	cmp	r2, r3
 8005536:	d004      	beq.n	8005542 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	8afa      	ldrh	r2, [r7, #22]
 800553e:	429a      	cmp	r2, r3
 8005540:	d109      	bne.n	8005556 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <mem_link_valid+0x74>)
 8005544:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	429a      	cmp	r2, r3
 800554a:	d006      	beq.n	800555a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	8afa      	ldrh	r2, [r7, #22]
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <mem_link_valid+0x6a>
    return 0;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <mem_link_valid+0x6c>
  }
  return 1;
 800555a:	2301      	movs	r3, #1
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000500 	.word	0x20000500

08005568 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04c      	beq.n	8005610 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <mem_free+0xb0>)
 8005582:	f240 2273 	movw	r2, #627	; 0x273
 8005586:	4925      	ldr	r1, [pc, #148]	; (800561c <mem_free+0xb4>)
 8005588:	4825      	ldr	r0, [pc, #148]	; (8005620 <mem_free+0xb8>)
 800558a:	f00a fdd7 	bl	801013c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800558e:	e040      	b.n	8005612 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3b08      	subs	r3, #8
 8005594:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005596:	4b23      	ldr	r3, [pc, #140]	; (8005624 <mem_free+0xbc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d306      	bcc.n	80055ae <mem_free+0x46>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 020c 	add.w	r2, r3, #12
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <mem_free+0xc0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d907      	bls.n	80055be <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80055ae:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <mem_free+0xb0>)
 80055b0:	f240 227f 	movw	r2, #639	; 0x27f
 80055b4:	491d      	ldr	r1, [pc, #116]	; (800562c <mem_free+0xc4>)
 80055b6:	481a      	ldr	r0, [pc, #104]	; (8005620 <mem_free+0xb8>)
 80055b8:	f00a fdc0 	bl	801013c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055bc:	e029      	b.n	8005612 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <mem_free+0xb0>)
 80055c8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80055cc:	4918      	ldr	r1, [pc, #96]	; (8005630 <mem_free+0xc8>)
 80055ce:	4814      	ldr	r0, [pc, #80]	; (8005620 <mem_free+0xb8>)
 80055d0:	f00a fdb4 	bl	801013c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055d4:	e01d      	b.n	8005612 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff ff8a 	bl	80054f0 <mem_link_valid>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <mem_free+0xb0>)
 80055e4:	f240 2295 	movw	r2, #661	; 0x295
 80055e8:	4912      	ldr	r1, [pc, #72]	; (8005634 <mem_free+0xcc>)
 80055ea:	480d      	ldr	r0, [pc, #52]	; (8005620 <mem_free+0xb8>)
 80055ec:	f00a fda6 	bl	801013c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055f0:	e00f      	b.n	8005612 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <mem_free+0xd0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d202      	bcs.n	8005608 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005602:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <mem_free+0xd0>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff fe93 	bl	8005334 <plug_holes>
 800560e:	e000      	b.n	8005612 <mem_free+0xaa>
    return;
 8005610:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	080113f8 	.word	0x080113f8
 800561c:	080114cc 	.word	0x080114cc
 8005620:	08011440 	.word	0x08011440
 8005624:	200004fc 	.word	0x200004fc
 8005628:	20000500 	.word	0x20000500
 800562c:	080114f0 	.word	0x080114f0
 8005630:	0801150c 	.word	0x0801150c
 8005634:	08011534 	.word	0x08011534
 8005638:	20000504 	.word	0x20000504

0800563c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	3303      	adds	r3, #3
 800564c:	b29b      	uxth	r3, r3
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005654:	8bfb      	ldrh	r3, [r7, #30]
 8005656:	2b0b      	cmp	r3, #11
 8005658:	d801      	bhi.n	800565e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800565a:	230c      	movs	r3, #12
 800565c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800565e:	8bfb      	ldrh	r3, [r7, #30]
 8005660:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005664:	d803      	bhi.n	800566e <mem_trim+0x32>
 8005666:	8bfa      	ldrh	r2, [r7, #30]
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	429a      	cmp	r2, r3
 800566c:	d201      	bcs.n	8005672 <mem_trim+0x36>
    return NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	e0cc      	b.n	800580c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005672:	4b68      	ldr	r3, [pc, #416]	; (8005814 <mem_trim+0x1d8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d304      	bcc.n	8005686 <mem_trim+0x4a>
 800567c:	4b66      	ldr	r3, [pc, #408]	; (8005818 <mem_trim+0x1dc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d306      	bcc.n	8005694 <mem_trim+0x58>
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <mem_trim+0x1e0>)
 8005688:	f240 22d2 	movw	r2, #722	; 0x2d2
 800568c:	4964      	ldr	r1, [pc, #400]	; (8005820 <mem_trim+0x1e4>)
 800568e:	4865      	ldr	r0, [pc, #404]	; (8005824 <mem_trim+0x1e8>)
 8005690:	f00a fd54 	bl	801013c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005694:	4b5f      	ldr	r3, [pc, #380]	; (8005814 <mem_trim+0x1d8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d304      	bcc.n	80056a8 <mem_trim+0x6c>
 800569e:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <mem_trim+0x1dc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d301      	bcc.n	80056ac <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	e0af      	b.n	800580c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3b08      	subs	r3, #8
 80056b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80056b2:	69b8      	ldr	r0, [r7, #24]
 80056b4:	f7ff fe2c 	bl	8005310 <mem_to_ptr>
 80056b8:	4603      	mov	r3, r0
 80056ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	881a      	ldrh	r2, [r3, #0]
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b08      	subs	r3, #8
 80056c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80056ca:	8bfa      	ldrh	r2, [r7, #30]
 80056cc:	8abb      	ldrh	r3, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d906      	bls.n	80056e0 <mem_trim+0xa4>
 80056d2:	4b52      	ldr	r3, [pc, #328]	; (800581c <mem_trim+0x1e0>)
 80056d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80056d8:	4953      	ldr	r1, [pc, #332]	; (8005828 <mem_trim+0x1ec>)
 80056da:	4852      	ldr	r0, [pc, #328]	; (8005824 <mem_trim+0x1e8>)
 80056dc:	f00a fd2e 	bl	801013c <iprintf>
  if (newsize > size) {
 80056e0:	8bfa      	ldrh	r2, [r7, #30]
 80056e2:	8abb      	ldrh	r3, [r7, #20]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d901      	bls.n	80056ec <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e08f      	b.n	800580c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80056ec:	8bfa      	ldrh	r2, [r7, #30]
 80056ee:	8abb      	ldrh	r3, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d101      	bne.n	80056f8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	e089      	b.n	800580c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fdf5 	bl	80052ec <ptr_to_mem>
 8005702:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	791b      	ldrb	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d13f      	bne.n	800578c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005714:	d106      	bne.n	8005724 <mem_trim+0xe8>
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <mem_trim+0x1e0>)
 8005718:	f240 22f5 	movw	r2, #757	; 0x2f5
 800571c:	4943      	ldr	r1, [pc, #268]	; (800582c <mem_trim+0x1f0>)
 800571e:	4841      	ldr	r0, [pc, #260]	; (8005824 <mem_trim+0x1e8>)
 8005720:	f00a fd0c 	bl	801013c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800572a:	8afa      	ldrh	r2, [r7, #22]
 800572c:	8bfb      	ldrh	r3, [r7, #30]
 800572e:	4413      	add	r3, r2
 8005730:	b29b      	uxth	r3, r3
 8005732:	3308      	adds	r3, #8
 8005734:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005736:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <mem_trim+0x1f4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d106      	bne.n	800574e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fdd2 	bl	80052ec <ptr_to_mem>
 8005748:	4602      	mov	r2, r0
 800574a:	4b39      	ldr	r3, [pc, #228]	; (8005830 <mem_trim+0x1f4>)
 800574c:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800574e:	89fb      	ldrh	r3, [r7, #14]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fdcb 	bl	80052ec <ptr_to_mem>
 8005756:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2200      	movs	r2, #0
 800575c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	89ba      	ldrh	r2, [r7, #12]
 8005762:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	8afa      	ldrh	r2, [r7, #22]
 8005768:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	89fa      	ldrh	r2, [r7, #14]
 800576e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005778:	d047      	beq.n	800580a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fdb4 	bl	80052ec <ptr_to_mem>
 8005784:	4602      	mov	r2, r0
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	8053      	strh	r3, [r2, #2]
 800578a:	e03e      	b.n	800580a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800578c:	8bfb      	ldrh	r3, [r7, #30]
 800578e:	f103 0214 	add.w	r2, r3, #20
 8005792:	8abb      	ldrh	r3, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d838      	bhi.n	800580a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005798:	8afa      	ldrh	r2, [r7, #22]
 800579a:	8bfb      	ldrh	r3, [r7, #30]
 800579c:	4413      	add	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3308      	adds	r3, #8
 80057a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057ac:	d106      	bne.n	80057bc <mem_trim+0x180>
 80057ae:	4b1b      	ldr	r3, [pc, #108]	; (800581c <mem_trim+0x1e0>)
 80057b0:	f240 3216 	movw	r2, #790	; 0x316
 80057b4:	491d      	ldr	r1, [pc, #116]	; (800582c <mem_trim+0x1f0>)
 80057b6:	481b      	ldr	r0, [pc, #108]	; (8005824 <mem_trim+0x1e8>)
 80057b8:	f00a fcc0 	bl	801013c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80057bc:	89fb      	ldrh	r3, [r7, #14]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fd94 	bl	80052ec <ptr_to_mem>
 80057c4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80057c6:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <mem_trim+0x1f4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d202      	bcs.n	80057d6 <mem_trim+0x19a>
      lfree = mem2;
 80057d0:	4a17      	ldr	r2, [pc, #92]	; (8005830 <mem_trim+0x1f4>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2200      	movs	r2, #0
 80057da:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	881a      	ldrh	r2, [r3, #0]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	8afa      	ldrh	r2, [r7, #22]
 80057e8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	89fa      	ldrh	r2, [r7, #14]
 80057ee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057f8:	d007      	beq.n	800580a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fd74 	bl	80052ec <ptr_to_mem>
 8005804:	4602      	mov	r2, r0
 8005806:	89fb      	ldrh	r3, [r7, #14]
 8005808:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800580a:	687b      	ldr	r3, [r7, #4]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	200004fc 	.word	0x200004fc
 8005818:	20000500 	.word	0x20000500
 800581c:	080113f8 	.word	0x080113f8
 8005820:	08011568 	.word	0x08011568
 8005824:	08011440 	.word	0x08011440
 8005828:	08011580 	.word	0x08011580
 800582c:	080115a0 	.word	0x080115a0
 8005830:	20000504 	.word	0x20000504

08005834 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <mem_malloc+0x14>
    return NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	e0d9      	b.n	80059fc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	3303      	adds	r3, #3
 800584c:	b29b      	uxth	r3, r3
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005854:	8bbb      	ldrh	r3, [r7, #28]
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d801      	bhi.n	800585e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800585a:	230c      	movs	r3, #12
 800585c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800585e:	8bbb      	ldrh	r3, [r7, #28]
 8005860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005864:	d803      	bhi.n	800586e <mem_malloc+0x3a>
 8005866:	8bba      	ldrh	r2, [r7, #28]
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	429a      	cmp	r2, r3
 800586c:	d201      	bcs.n	8005872 <mem_malloc+0x3e>
    return NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	e0c4      	b.n	80059fc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005872:	4b64      	ldr	r3, [pc, #400]	; (8005a04 <mem_malloc+0x1d0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fd4a 	bl	8005310 <mem_to_ptr>
 800587c:	4603      	mov	r3, r0
 800587e:	83fb      	strh	r3, [r7, #30]
 8005880:	e0b4      	b.n	80059ec <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005882:	8bfb      	ldrh	r3, [r7, #30]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fd31 	bl	80052ec <ptr_to_mem>
 800588a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 80a4 	bne.w	80059de <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	8bfb      	ldrh	r3, [r7, #30]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f1a3 0208 	sub.w	r2, r3, #8
 80058a4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f0c0 8099 	bcc.w	80059de <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	8bfb      	ldrh	r3, [r7, #30]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f1a3 0208 	sub.w	r2, r3, #8
 80058ba:	8bbb      	ldrh	r3, [r7, #28]
 80058bc:	3314      	adds	r3, #20
 80058be:	429a      	cmp	r2, r3
 80058c0:	d333      	bcc.n	800592a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80058c2:	8bfa      	ldrh	r2, [r7, #30]
 80058c4:	8bbb      	ldrh	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3308      	adds	r3, #8
 80058cc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80058ce:	8a7b      	ldrh	r3, [r7, #18]
 80058d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058d4:	d106      	bne.n	80058e4 <mem_malloc+0xb0>
 80058d6:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <mem_malloc+0x1d4>)
 80058d8:	f240 3287 	movw	r2, #903	; 0x387
 80058dc:	494b      	ldr	r1, [pc, #300]	; (8005a0c <mem_malloc+0x1d8>)
 80058de:	484c      	ldr	r0, [pc, #304]	; (8005a10 <mem_malloc+0x1dc>)
 80058e0:	f00a fc2c 	bl	801013c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80058e4:	8a7b      	ldrh	r3, [r7, #18]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fd00 	bl	80052ec <ptr_to_mem>
 80058ec:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8bfa      	ldrh	r2, [r7, #30]
 8005900:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	8a7a      	ldrh	r2, [r7, #18]
 8005906:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2201      	movs	r2, #1
 800590c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005916:	d00b      	beq.n	8005930 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fce5 	bl	80052ec <ptr_to_mem>
 8005922:	4602      	mov	r2, r0
 8005924:	8a7b      	ldrh	r3, [r7, #18]
 8005926:	8053      	strh	r3, [r2, #2]
 8005928:	e002      	b.n	8005930 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2201      	movs	r2, #1
 800592e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005930:	4b34      	ldr	r3, [pc, #208]	; (8005a04 <mem_malloc+0x1d0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	429a      	cmp	r2, r3
 8005938:	d127      	bne.n	800598a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800593a:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <mem_malloc+0x1d0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005940:	e005      	b.n	800594e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fcd0 	bl	80052ec <ptr_to_mem>
 800594c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <mem_malloc+0x12c>
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <mem_malloc+0x1e0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	429a      	cmp	r2, r3
 800595e:	d1f0      	bne.n	8005942 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005960:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <mem_malloc+0x1d0>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005966:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <mem_malloc+0x1d0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <mem_malloc+0x1e0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d00b      	beq.n	800598a <mem_malloc+0x156>
 8005972:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <mem_malloc+0x1d0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <mem_malloc+0x156>
 800597c:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <mem_malloc+0x1d4>)
 800597e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005982:	4925      	ldr	r1, [pc, #148]	; (8005a18 <mem_malloc+0x1e4>)
 8005984:	4822      	ldr	r0, [pc, #136]	; (8005a10 <mem_malloc+0x1dc>)
 8005986:	f00a fbd9 	bl	801013c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800598a:	8bba      	ldrh	r2, [r7, #28]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	3308      	adds	r3, #8
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <mem_malloc+0x1e0>)
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	4293      	cmp	r3, r2
 8005998:	d906      	bls.n	80059a8 <mem_malloc+0x174>
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <mem_malloc+0x1d4>)
 800599c:	f240 32ba 	movw	r2, #954	; 0x3ba
 80059a0:	491e      	ldr	r1, [pc, #120]	; (8005a1c <mem_malloc+0x1e8>)
 80059a2:	481b      	ldr	r0, [pc, #108]	; (8005a10 <mem_malloc+0x1dc>)
 80059a4:	f00a fbca 	bl	801013c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <mem_malloc+0x18c>
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <mem_malloc+0x1d4>)
 80059b4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80059b8:	4919      	ldr	r1, [pc, #100]	; (8005a20 <mem_malloc+0x1ec>)
 80059ba:	4815      	ldr	r0, [pc, #84]	; (8005a10 <mem_malloc+0x1dc>)
 80059bc:	f00a fbbe 	bl	801013c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <mem_malloc+0x1a4>
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <mem_malloc+0x1d4>)
 80059cc:	f240 32be 	movw	r2, #958	; 0x3be
 80059d0:	4914      	ldr	r1, [pc, #80]	; (8005a24 <mem_malloc+0x1f0>)
 80059d2:	480f      	ldr	r0, [pc, #60]	; (8005a10 <mem_malloc+0x1dc>)
 80059d4:	f00a fbb2 	bl	801013c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3308      	adds	r3, #8
 80059dc:	e00e      	b.n	80059fc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80059de:	8bfb      	ldrh	r3, [r7, #30]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fc83 	bl	80052ec <ptr_to_mem>
 80059e6:	4603      	mov	r3, r0
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80059ec:	8bfa      	ldrh	r2, [r7, #30]
 80059ee:	8bbb      	ldrh	r3, [r7, #28]
 80059f0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f4ff af44 	bcc.w	8005882 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000504 	.word	0x20000504
 8005a08:	080113f8 	.word	0x080113f8
 8005a0c:	080115a0 	.word	0x080115a0
 8005a10:	08011440 	.word	0x08011440
 8005a14:	20000500 	.word	0x20000500
 8005a18:	080115b4 	.word	0x080115b4
 8005a1c:	080115d0 	.word	0x080115d0
 8005a20:	08011600 	.word	0x08011600
 8005a24:	08011630 	.word	0x08011630

08005a28 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e011      	b.n	8005a6e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	885b      	ldrh	r3, [r3, #2]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4293      	cmp	r3, r2
 8005a78:	dbe7      	blt.n	8005a4a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005a8e:	2300      	movs	r3, #0
 8005a90:	80fb      	strh	r3, [r7, #6]
 8005a92:	e009      	b.n	8005aa8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <memp_init+0x30>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ffc3 	bl	8005a28 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	80fb      	strh	r3, [r7, #6]
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d9f2      	bls.n	8005a94 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	0801428c 	.word	0x0801428c

08005abc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <do_memp_malloc_pool+0x38>
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <do_memp_malloc_pool+0x48>)
 8005ae8:	f240 1219 	movw	r2, #281	; 0x119
 8005aec:	4906      	ldr	r1, [pc, #24]	; (8005b08 <do_memp_malloc_pool+0x4c>)
 8005aee:	4807      	ldr	r0, [pc, #28]	; (8005b0c <do_memp_malloc_pool+0x50>)
 8005af0:	f00a fb24 	bl	801013c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e000      	b.n	8005afa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08011654 	.word	0x08011654
 8005b08:	08011684 	.word	0x08011684
 8005b0c:	080116a8 	.word	0x080116a8

08005b10 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d908      	bls.n	8005b32 <memp_malloc+0x22>
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <memp_malloc+0x3c>)
 8005b22:	f240 1257 	movw	r2, #343	; 0x157
 8005b26:	490a      	ldr	r1, [pc, #40]	; (8005b50 <memp_malloc+0x40>)
 8005b28:	480a      	ldr	r0, [pc, #40]	; (8005b54 <memp_malloc+0x44>)
 8005b2a:	f00a fb07 	bl	801013c <iprintf>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e008      	b.n	8005b44 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <memp_malloc+0x48>)
 8005b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffbe 	bl	8005abc <do_memp_malloc_pool>
 8005b40:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08011654 	.word	0x08011654
 8005b50:	080116e4 	.word	0x080116e4
 8005b54:	080116a8 	.word	0x080116a8
 8005b58:	0801428c 	.word	0x0801428c

08005b5c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <do_memp_free_pool+0x22>
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <do_memp_free_pool+0x40>)
 8005b72:	f240 126d 	movw	r2, #365	; 0x16d
 8005b76:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <do_memp_free_pool+0x44>)
 8005b78:	480a      	ldr	r0, [pc, #40]	; (8005ba4 <do_memp_free_pool+0x48>)
 8005b7a:	f00a fadf 	bl	801013c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	08011654 	.word	0x08011654
 8005ba0:	08011704 	.word	0x08011704
 8005ba4:	080116a8 	.word	0x080116a8

08005ba8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d907      	bls.n	8005bca <memp_free+0x22>
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <memp_free+0x44>)
 8005bbc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005bc0:	490b      	ldr	r1, [pc, #44]	; (8005bf0 <memp_free+0x48>)
 8005bc2:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <memp_free+0x4c>)
 8005bc4:	f00a faba 	bl	801013c <iprintf>
 8005bc8:	e00c      	b.n	8005be4 <memp_free+0x3c>

  if (mem == NULL) {
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <memp_free+0x50>)
 8005bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ffbe 	bl	8005b5c <do_memp_free_pool>
 8005be0:	e000      	b.n	8005be4 <memp_free+0x3c>
    return;
 8005be2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	08011654 	.word	0x08011654
 8005bf0:	08011724 	.word	0x08011724
 8005bf4:	080116a8 	.word	0x080116a8
 8005bf8:	0801428c 	.word	0x0801428c

08005bfc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <netif_add+0x26>
 8005c20:	4b57      	ldr	r3, [pc, #348]	; (8005d80 <netif_add+0x174>)
 8005c22:	f240 1227 	movw	r2, #295	; 0x127
 8005c26:	4957      	ldr	r1, [pc, #348]	; (8005d84 <netif_add+0x178>)
 8005c28:	4857      	ldr	r0, [pc, #348]	; (8005d88 <netif_add+0x17c>)
 8005c2a:	f00a fa87 	bl	801013c <iprintf>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e0a2      	b.n	8005d78 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d108      	bne.n	8005c4a <netif_add+0x3e>
 8005c38:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <netif_add+0x174>)
 8005c3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005c3e:	4953      	ldr	r1, [pc, #332]	; (8005d8c <netif_add+0x180>)
 8005c40:	4851      	ldr	r0, [pc, #324]	; (8005d88 <netif_add+0x17c>)
 8005c42:	f00a fa7b 	bl	801013c <iprintf>
 8005c46:	2300      	movs	r3, #0
 8005c48:	e096      	b.n	8005d78 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005c50:	4b4f      	ldr	r3, [pc, #316]	; (8005d90 <netif_add+0x184>)
 8005c52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005c5a:	4b4d      	ldr	r3, [pc, #308]	; (8005d90 <netif_add+0x184>)
 8005c5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005c64:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <netif_add+0x184>)
 8005c66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a45      	ldr	r2, [pc, #276]	; (8005d94 <netif_add+0x188>)
 8005c7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <netif_add+0x18c>)
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f913 	bl	8005edc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <netif_add+0xba>
    return NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e058      	b.n	8005d78 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ccc:	2bff      	cmp	r3, #255	; 0xff
 8005cce:	d103      	bne.n	8005cd8 <netif_add+0xcc>
        netif->num = 0;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <netif_add+0x190>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	e02b      	b.n	8005d3c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d106      	bne.n	8005cfa <netif_add+0xee>
 8005cec:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <netif_add+0x174>)
 8005cee:	f240 128b 	movw	r2, #395	; 0x18b
 8005cf2:	492b      	ldr	r1, [pc, #172]	; (8005da0 <netif_add+0x194>)
 8005cf4:	4824      	ldr	r0, [pc, #144]	; (8005d88 <netif_add+0x17c>)
 8005cf6:	f00a fa21 	bl	801013c <iprintf>
        num_netifs++;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2bff      	cmp	r3, #255	; 0xff
 8005d04:	dd06      	ble.n	8005d14 <netif_add+0x108>
 8005d06:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <netif_add+0x174>)
 8005d08:	f240 128d 	movw	r2, #397	; 0x18d
 8005d0c:	4925      	ldr	r1, [pc, #148]	; (8005da4 <netif_add+0x198>)
 8005d0e:	481e      	ldr	r0, [pc, #120]	; (8005d88 <netif_add+0x17c>)
 8005d10:	f00a fa14 	bl	801013c <iprintf>
        if (netif2->num == netif->num) {
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d108      	bne.n	8005d36 <netif_add+0x12a>
          netif->num++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005d34:	e005      	b.n	8005d42 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1d0      	bne.n	8005ce4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1be      	bne.n	8005cc6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8005d50:	d103      	bne.n	8005d5a <netif_add+0x14e>
    netif_num = 0;
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <netif_add+0x18c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	e006      	b.n	8005d68 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <netif_add+0x18c>)
 8005d66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <netif_add+0x190>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005d70:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <netif_add+0x190>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005d76:	68fb      	ldr	r3, [r7, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	08011740 	.word	0x08011740
 8005d84:	080117d4 	.word	0x080117d4
 8005d88:	08011790 	.word	0x08011790
 8005d8c:	080117f0 	.word	0x080117f0
 8005d90:	080142f0 	.word	0x080142f0
 8005d94:	080060ef 	.word	0x080060ef
 8005d98:	2000052c 	.word	0x2000052c
 8005d9c:	20006ce8 	.word	0x20006ce8
 8005da0:	08011814 	.word	0x08011814
 8005da4:	08011828 	.word	0x08011828

08005da8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 fd8d 	bl	80088d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f007 fe8d 	bl	800dadc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <netif_do_set_ipaddr+0x20>
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <netif_do_set_ipaddr+0x88>)
 8005de0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005de4:	491c      	ldr	r1, [pc, #112]	; (8005e58 <netif_do_set_ipaddr+0x8c>)
 8005de6:	481d      	ldr	r0, [pc, #116]	; (8005e5c <netif_do_set_ipaddr+0x90>)
 8005de8:	f00a f9a8 	bl	801013c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <netif_do_set_ipaddr+0x34>
 8005df2:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <netif_do_set_ipaddr+0x88>)
 8005df4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005df8:	4917      	ldr	r1, [pc, #92]	; (8005e58 <netif_do_set_ipaddr+0x8c>)
 8005dfa:	4818      	ldr	r0, [pc, #96]	; (8005e5c <netif_do_set_ipaddr+0x90>)
 8005dfc:	f00a f99e 	bl	801013c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3304      	adds	r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d01c      	beq.n	8005e48 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3304      	adds	r3, #4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e1e:	f107 0314 	add.w	r3, r7, #20
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ffbf 	bl	8005da8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <netif_do_set_ipaddr+0x6a>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	e000      	b.n	8005e38 <netif_do_set_ipaddr+0x6c>
 8005e36:	2300      	movs	r3, #0
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f8d2 	bl	8005fe8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	08011740 	.word	0x08011740
 8005e58:	08011858 	.word	0x08011858
 8005e5c:	08011790 	.word	0x08011790

08005e60 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3308      	adds	r3, #8
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d00a      	beq.n	8005e90 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <netif_do_set_netmask+0x26>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e000      	b.n	8005e88 <netif_do_set_netmask+0x28>
 8005e86:	2300      	movs	r3, #0
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d00a      	beq.n	8005ece <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <netif_do_set_gw+0x26>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	e000      	b.n	8005ec6 <netif_do_set_gw+0x28>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <netif_set_addr+0x90>)
 8005efa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <netif_set_addr+0x90>)
 8005f04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <netif_set_addr+0x90>)
 8005f0e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <netif_set_addr+0x42>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <netif_set_addr+0x46>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <netif_set_addr+0x48>
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d006      	beq.n	8005f3a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f2c:	f107 0310 	add.w	r3, r7, #16
 8005f30:	461a      	mov	r2, r3
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ff49 	bl	8005dcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff ff8e 	bl	8005e60 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ffa8 	bl	8005e9e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f54:	f107 0310 	add.w	r3, r7, #16
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff35 	bl	8005dcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005f62:	bf00      	nop
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	080142f0 	.word	0x080142f0

08005f70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <netif_set_default+0x1c>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20006cec 	.word	0x20006cec

08005f90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d107      	bne.n	8005fae <netif_set_up+0x1e>
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <netif_set_up+0x4c>)
 8005fa0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005fa4:	490e      	ldr	r1, [pc, #56]	; (8005fe0 <netif_set_up+0x50>)
 8005fa6:	480f      	ldr	r0, [pc, #60]	; (8005fe4 <netif_set_up+0x54>)
 8005fa8:	f00a f8c8 	bl	801013c <iprintf>
 8005fac:	e013      	b.n	8005fd6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10c      	bne.n	8005fd6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005fce:	2103      	movs	r1, #3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f809 	bl	8005fe8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	08011740 	.word	0x08011740
 8005fe0:	080118c8 	.word	0x080118c8
 8005fe4:	08011790 	.word	0x08011790

08005fe8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <netif_issue_reports+0x20>
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <netif_issue_reports+0x74>)
 8005ffc:	f240 326d 	movw	r2, #877	; 0x36d
 8006000:	4917      	ldr	r1, [pc, #92]	; (8006060 <netif_issue_reports+0x78>)
 8006002:	4818      	ldr	r0, [pc, #96]	; (8006064 <netif_issue_reports+0x7c>)
 8006004:	f00a f89a 	bl	801013c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01e      	beq.n	8006054 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800601c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006020:	2b00      	cmp	r3, #0
 8006022:	d017      	beq.n	8006054 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f008 fcaf 	bl	800e9b0 <etharp_request>
 8006052:	e000      	b.n	8006056 <netif_issue_reports+0x6e>
    return;
 8006054:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08011740 	.word	0x08011740
 8006060:	080118e4 	.word	0x080118e4
 8006064:	08011790 	.word	0x08011790

08006068 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <netif_set_down+0x1e>
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <netif_set_down+0x58>)
 8006078:	f240 329b 	movw	r2, #923	; 0x39b
 800607c:	4911      	ldr	r1, [pc, #68]	; (80060c4 <netif_set_down+0x5c>)
 800607e:	4812      	ldr	r0, [pc, #72]	; (80060c8 <netif_set_down+0x60>)
 8006080:	f00a f85c 	bl	801013c <iprintf>
 8006084:	e019      	b.n	80060ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f008 f839 	bl	800e12c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08011740 	.word	0x08011740
 80060c4:	08011908 	.word	0x08011908
 80060c8:	08011790 	.word	0x08011790

080060cc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	61da      	str	r2, [r3, #28]
  }
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80060fa:	f06f 030b 	mvn.w	r3, #11
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <netif_get_by_index+0x48>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e00c      	b.n	800613e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800612a:	3301      	adds	r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	79fa      	ldrb	r2, [r7, #7]
 8006130:	429a      	cmp	r2, r3
 8006132:	d101      	bne.n	8006138 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	e006      	b.n	8006146 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ef      	bne.n	8006124 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20006ce8 	.word	0x20006ce8

08006158 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <pbuf_free_ooseq+0x38>)
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006164:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <pbuf_free_ooseq+0x3c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	e00a      	b.n	8006182 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f002 fbeb 	bl	8008950 <tcp_free_ooseq>
      return;
 800617a:	e005      	b.n	8006188 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	607b      	str	r3, [r7, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f1      	bne.n	800616c <pbuf_free_ooseq+0x14>
    }
  }
}
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20006cf0 	.word	0x20006cf0
 8006194:	20006cf8 	.word	0x20006cf8

08006198 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <pbuf_pool_is_empty+0x14>)
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	20006cf0 	.word	0x20006cf0

080061b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	460b      	mov	r3, r1
 80061c0:	80fb      	strh	r3, [r7, #6]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88ba      	ldrh	r2, [r7, #4]
 80061dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80061de:	8b3b      	ldrh	r3, [r7, #24]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	7f3a      	ldrb	r2, [r7, #28]
 80061ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	73da      	strb	r2, [r3, #15]
}
 80061f8:	bf00      	nop
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af02      	add	r7, sp, #8
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
 800620e:	460b      	mov	r3, r1
 8006210:	80bb      	strh	r3, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	2b41      	cmp	r3, #65	; 0x41
 800621e:	d00b      	beq.n	8006238 <pbuf_alloc+0x34>
 8006220:	2b41      	cmp	r3, #65	; 0x41
 8006222:	dc02      	bgt.n	800622a <pbuf_alloc+0x26>
 8006224:	2b01      	cmp	r3, #1
 8006226:	d007      	beq.n	8006238 <pbuf_alloc+0x34>
 8006228:	e0c2      	b.n	80063b0 <pbuf_alloc+0x1ac>
 800622a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800622e:	d00b      	beq.n	8006248 <pbuf_alloc+0x44>
 8006230:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006234:	d070      	beq.n	8006318 <pbuf_alloc+0x114>
 8006236:	e0bb      	b.n	80063b0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006238:	887a      	ldrh	r2, [r7, #2]
 800623a:	88bb      	ldrh	r3, [r7, #4]
 800623c:	4619      	mov	r1, r3
 800623e:	2000      	movs	r0, #0
 8006240:	f000 f8d2 	bl	80063e8 <pbuf_alloc_reference>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006246:	e0bd      	b.n	80063c4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006250:	88bb      	ldrh	r3, [r7, #4]
 8006252:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006254:	2008      	movs	r0, #8
 8006256:	f7ff fc5b 	bl	8005b10 <memp_malloc>
 800625a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006262:	f7ff ff99 	bl	8006198 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800626c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800626e:	f000 faa9 	bl	80067c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	e0a7      	b.n	80063c6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006278:	3303      	adds	r3, #3
 800627a:	b29b      	uxth	r3, r3
 800627c:	f023 0303 	bic.w	r3, r3, #3
 8006280:	b29b      	uxth	r3, r3
 8006282:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006286:	b29b      	uxth	r3, r3
 8006288:	8b7a      	ldrh	r2, [r7, #26]
 800628a:	4293      	cmp	r3, r2
 800628c:	bf28      	it	cs
 800628e:	4613      	movcs	r3, r2
 8006290:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006294:	3310      	adds	r3, #16
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4413      	add	r3, r2
 800629a:	3303      	adds	r3, #3
 800629c:	f023 0303 	bic.w	r3, r3, #3
 80062a0:	4618      	mov	r0, r3
 80062a2:	89f9      	ldrh	r1, [r7, #14]
 80062a4:	8b7a      	ldrh	r2, [r7, #26]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	887b      	ldrh	r3, [r7, #2]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	460b      	mov	r3, r1
 80062b0:	4601      	mov	r1, r0
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f7ff ff7c 	bl	80061b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d006      	beq.n	80062d2 <pbuf_alloc+0xce>
 80062c4:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <pbuf_alloc+0x1cc>)
 80062c6:	f240 1201 	movw	r2, #257	; 0x101
 80062ca:	4942      	ldr	r1, [pc, #264]	; (80063d4 <pbuf_alloc+0x1d0>)
 80062cc:	4842      	ldr	r0, [pc, #264]	; (80063d8 <pbuf_alloc+0x1d4>)
 80062ce:	f009 ff35 	bl	801013c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80062d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d4:	3303      	adds	r3, #3
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80062de:	d106      	bne.n	80062ee <pbuf_alloc+0xea>
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <pbuf_alloc+0x1cc>)
 80062e2:	f240 1203 	movw	r2, #259	; 0x103
 80062e6:	493d      	ldr	r1, [pc, #244]	; (80063dc <pbuf_alloc+0x1d8>)
 80062e8:	483b      	ldr	r0, [pc, #236]	; (80063d8 <pbuf_alloc+0x1d4>)
 80062ea:	f009 ff27 	bl	801013c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
 80062f8:	e002      	b.n	8006300 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006304:	8b7a      	ldrh	r2, [r7, #26]
 8006306:	89fb      	ldrh	r3, [r7, #14]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006310:	8b7b      	ldrh	r3, [r7, #26]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d19e      	bne.n	8006254 <pbuf_alloc+0x50>
      break;
 8006316:	e055      	b.n	80063c4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800631a:	3303      	adds	r3, #3
 800631c:	b29b      	uxth	r3, r3
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	b29a      	uxth	r2, r3
 8006324:	88bb      	ldrh	r3, [r7, #4]
 8006326:	3303      	adds	r3, #3
 8006328:	b29b      	uxth	r3, r3
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	b29b      	uxth	r3, r3
 8006330:	4413      	add	r3, r2
 8006332:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006334:	8b3b      	ldrh	r3, [r7, #24]
 8006336:	3310      	adds	r3, #16
 8006338:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800633a:	8b3a      	ldrh	r2, [r7, #24]
 800633c:	88bb      	ldrh	r3, [r7, #4]
 800633e:	3303      	adds	r3, #3
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	429a      	cmp	r2, r3
 8006346:	d306      	bcc.n	8006356 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006348:	8afa      	ldrh	r2, [r7, #22]
 800634a:	88bb      	ldrh	r3, [r7, #4]
 800634c:	3303      	adds	r3, #3
 800634e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d201      	bcs.n	800635a <pbuf_alloc+0x156>
        return NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	e035      	b.n	80063c6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800635a:	8afb      	ldrh	r3, [r7, #22]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fa69 	bl	8005834 <mem_malloc>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <pbuf_alloc+0x16a>
        return NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	e02b      	b.n	80063c6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800636e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006370:	3310      	adds	r3, #16
 8006372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006374:	4413      	add	r3, r2
 8006376:	3303      	adds	r3, #3
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	4618      	mov	r0, r3
 800637e:	88b9      	ldrh	r1, [r7, #4]
 8006380:	88ba      	ldrh	r2, [r7, #4]
 8006382:	2300      	movs	r3, #0
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	460b      	mov	r3, r1
 800638c:	4601      	mov	r1, r0
 800638e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006390:	f7ff ff0e 	bl	80061b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <pbuf_alloc+0x1be>
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <pbuf_alloc+0x1cc>)
 80063a2:	f240 1223 	movw	r2, #291	; 0x123
 80063a6:	490e      	ldr	r1, [pc, #56]	; (80063e0 <pbuf_alloc+0x1dc>)
 80063a8:	480b      	ldr	r0, [pc, #44]	; (80063d8 <pbuf_alloc+0x1d4>)
 80063aa:	f009 fec7 	bl	801013c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80063ae:	e008      	b.n	80063c2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <pbuf_alloc+0x1cc>)
 80063b2:	f240 1227 	movw	r2, #295	; 0x127
 80063b6:	490b      	ldr	r1, [pc, #44]	; (80063e4 <pbuf_alloc+0x1e0>)
 80063b8:	4807      	ldr	r0, [pc, #28]	; (80063d8 <pbuf_alloc+0x1d4>)
 80063ba:	f009 febf 	bl	801013c <iprintf>
      return NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	e001      	b.n	80063c6 <pbuf_alloc+0x1c2>
      break;
 80063c2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	08011970 	.word	0x08011970
 80063d4:	080119a0 	.word	0x080119a0
 80063d8:	080119d0 	.word	0x080119d0
 80063dc:	080119f8 	.word	0x080119f8
 80063e0:	08011a2c 	.word	0x08011a2c
 80063e4:	08011a58 	.word	0x08011a58

080063e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	807b      	strh	r3, [r7, #2]
 80063f4:	4613      	mov	r3, r2
 80063f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80063f8:	883b      	ldrh	r3, [r7, #0]
 80063fa:	2b41      	cmp	r3, #65	; 0x41
 80063fc:	d009      	beq.n	8006412 <pbuf_alloc_reference+0x2a>
 80063fe:	883b      	ldrh	r3, [r7, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d006      	beq.n	8006412 <pbuf_alloc_reference+0x2a>
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <pbuf_alloc_reference+0x5c>)
 8006406:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800640a:	490f      	ldr	r1, [pc, #60]	; (8006448 <pbuf_alloc_reference+0x60>)
 800640c:	480f      	ldr	r0, [pc, #60]	; (800644c <pbuf_alloc_reference+0x64>)
 800640e:	f009 fe95 	bl	801013c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006412:	2007      	movs	r0, #7
 8006414:	f7ff fb7c 	bl	8005b10 <memp_malloc>
 8006418:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	e00b      	b.n	800643c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006424:	8879      	ldrh	r1, [r7, #2]
 8006426:	887a      	ldrh	r2, [r7, #2]
 8006428:	2300      	movs	r3, #0
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	883b      	ldrh	r3, [r7, #0]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	460b      	mov	r3, r1
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff febb 	bl	80061b0 <pbuf_init_alloced_pbuf>
  return p;
 800643a:	68fb      	ldr	r3, [r7, #12]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08011970 	.word	0x08011970
 8006448:	08011a74 	.word	0x08011a74
 800644c:	080119d0 	.word	0x080119d0

08006450 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	460b      	mov	r3, r1
 800645e:	81bb      	strh	r3, [r7, #12]
 8006460:	4613      	mov	r3, r2
 8006462:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	3303      	adds	r3, #3
 800646c:	f023 0203 	bic.w	r2, r3, #3
 8006470:	89bb      	ldrh	r3, [r7, #12]
 8006472:	441a      	add	r2, r3
 8006474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006476:	429a      	cmp	r2, r3
 8006478:	d901      	bls.n	800647e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	e018      	b.n	80064b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006484:	8a7b      	ldrh	r3, [r7, #18]
 8006486:	3303      	adds	r3, #3
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	4413      	add	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e001      	b.n	8006498 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	89b9      	ldrh	r1, [r7, #12]
 800649c:	89ba      	ldrh	r2, [r7, #12]
 800649e:	2302      	movs	r3, #2
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	897b      	ldrh	r3, [r7, #10]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	460b      	mov	r3, r1
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	f7ff fe81 	bl	80061b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80064ae:	687b      	ldr	r3, [r7, #4]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <pbuf_realloc+0x20>
 80064ca:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <pbuf_realloc+0xfc>)
 80064cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80064d0:	4939      	ldr	r1, [pc, #228]	; (80065b8 <pbuf_realloc+0x100>)
 80064d2:	483a      	ldr	r0, [pc, #232]	; (80065bc <pbuf_realloc+0x104>)
 80064d4:	f009 fe32 	bl	801013c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	891b      	ldrh	r3, [r3, #8]
 80064dc:	887a      	ldrh	r2, [r7, #2]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d264      	bcs.n	80065ac <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	891a      	ldrh	r2, [r3, #8]
 80064e6:	887b      	ldrh	r3, [r7, #2]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80064ec:	887b      	ldrh	r3, [r7, #2]
 80064ee:	817b      	strh	r3, [r7, #10]
  q = p;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80064f4:	e018      	b.n	8006528 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	895b      	ldrh	r3, [r3, #10]
 80064fa:	897a      	ldrh	r2, [r7, #10]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	891a      	ldrh	r2, [r3, #8]
 8006504:	893b      	ldrh	r3, [r7, #8]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <pbuf_realloc+0x70>
 800651a:	4b26      	ldr	r3, [pc, #152]	; (80065b4 <pbuf_realloc+0xfc>)
 800651c:	f240 12af 	movw	r2, #431	; 0x1af
 8006520:	4927      	ldr	r1, [pc, #156]	; (80065c0 <pbuf_realloc+0x108>)
 8006522:	4826      	ldr	r0, [pc, #152]	; (80065bc <pbuf_realloc+0x104>)
 8006524:	f009 fe0a 	bl	801013c <iprintf>
  while (rem_len > q->len) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	895b      	ldrh	r3, [r3, #10]
 800652c:	897a      	ldrh	r2, [r7, #10]
 800652e:	429a      	cmp	r2, r3
 8006530:	d8e1      	bhi.n	80064f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b1b      	ldrb	r3, [r3, #12]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	2b00      	cmp	r3, #0
 800653c:	d122      	bne.n	8006584 <pbuf_realloc+0xcc>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	897a      	ldrh	r2, [r7, #10]
 8006544:	429a      	cmp	r2, r3
 8006546:	d01d      	beq.n	8006584 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7b5b      	ldrb	r3, [r3, #13]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d117      	bne.n	8006584 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	461a      	mov	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	b29a      	uxth	r2, r3
 8006560:	897b      	ldrh	r3, [r7, #10]
 8006562:	4413      	add	r3, r2
 8006564:	b29b      	uxth	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff f867 	bl	800563c <mem_trim>
 800656e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <pbuf_realloc+0xcc>
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <pbuf_realloc+0xfc>)
 8006578:	f240 12bd 	movw	r2, #445	; 0x1bd
 800657c:	4911      	ldr	r1, [pc, #68]	; (80065c4 <pbuf_realloc+0x10c>)
 800657e:	480f      	ldr	r0, [pc, #60]	; (80065bc <pbuf_realloc+0x104>)
 8006580:	f009 fddc 	bl	801013c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	897a      	ldrh	r2, [r7, #10]
 8006588:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	895a      	ldrh	r2, [r3, #10]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f910 	bl	80067c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e000      	b.n	80065ae <pbuf_realloc+0xf6>
    return;
 80065ac:	bf00      	nop

}
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	08011970 	.word	0x08011970
 80065b8:	08011a88 	.word	0x08011a88
 80065bc:	080119d0 	.word	0x080119d0
 80065c0:	08011aa0 	.word	0x08011aa0
 80065c4:	08011ab8 	.word	0x08011ab8

080065c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <pbuf_add_header_impl+0x22>
 80065dc:	4b2b      	ldr	r3, [pc, #172]	; (800668c <pbuf_add_header_impl+0xc4>)
 80065de:	f240 12df 	movw	r2, #479	; 0x1df
 80065e2:	492b      	ldr	r1, [pc, #172]	; (8006690 <pbuf_add_header_impl+0xc8>)
 80065e4:	482b      	ldr	r0, [pc, #172]	; (8006694 <pbuf_add_header_impl+0xcc>)
 80065e6:	f009 fda9 	bl	801013c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <pbuf_add_header_impl+0x30>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d301      	bcc.n	80065fc <pbuf_add_header_impl+0x34>
    return 1;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e043      	b.n	8006684 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <pbuf_add_header_impl+0x3e>
    return 0;
 8006602:	2300      	movs	r3, #0
 8006604:	e03e      	b.n	8006684 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	891a      	ldrh	r2, [r3, #8]
 800660e:	8a7b      	ldrh	r3, [r7, #18]
 8006610:	4413      	add	r3, r2
 8006612:	b29b      	uxth	r3, r3
 8006614:	8a7a      	ldrh	r2, [r7, #18]
 8006616:	429a      	cmp	r2, r3
 8006618:	d901      	bls.n	800661e <pbuf_add_header_impl+0x56>
    return 1;
 800661a:	2301      	movs	r3, #1
 800661c:	e032      	b.n	8006684 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	7b1b      	ldrb	r3, [r3, #12]
 8006622:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006624:	8a3b      	ldrh	r3, [r7, #16]
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	425b      	negs	r3, r3
 8006636:	4413      	add	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3310      	adds	r3, #16
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	429a      	cmp	r2, r3
 8006642:	d20d      	bcs.n	8006660 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006644:	2301      	movs	r3, #1
 8006646:	e01d      	b.n	8006684 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	425b      	negs	r3, r3
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e001      	b.n	8006660 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800665c:	2301      	movs	r3, #1
 800665e:	e011      	b.n	8006684 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	895a      	ldrh	r2, [r3, #10]
 800666a:	8a7b      	ldrh	r3, [r7, #18]
 800666c:	4413      	add	r3, r2
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	891a      	ldrh	r2, [r3, #8]
 8006678:	8a7b      	ldrh	r3, [r7, #18]
 800667a:	4413      	add	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	811a      	strh	r2, [r3, #8]


  return 0;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	08011970 	.word	0x08011970
 8006690:	08011ad4 	.word	0x08011ad4
 8006694:	080119d0 	.word	0x080119d0

08006698 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80066a2:	2200      	movs	r2, #0
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff ff8e 	bl	80065c8 <pbuf_add_header_impl>
 80066ac:	4603      	mov	r3, r0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <pbuf_remove_header+0x1e>
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <pbuf_remove_header+0x94>)
 80066ca:	f240 224b 	movw	r2, #587	; 0x24b
 80066ce:	4920      	ldr	r1, [pc, #128]	; (8006750 <pbuf_remove_header+0x98>)
 80066d0:	4820      	ldr	r0, [pc, #128]	; (8006754 <pbuf_remove_header+0x9c>)
 80066d2:	f009 fd33 	bl	801013c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <pbuf_remove_header+0x2c>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d301      	bcc.n	80066e8 <pbuf_remove_header+0x30>
    return 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02c      	b.n	8006742 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <pbuf_remove_header+0x3a>
    return 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e027      	b.n	8006742 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	895b      	ldrh	r3, [r3, #10]
 80066fa:	89fa      	ldrh	r2, [r7, #14]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d908      	bls.n	8006712 <pbuf_remove_header+0x5a>
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <pbuf_remove_header+0x94>)
 8006702:	f240 2255 	movw	r2, #597	; 0x255
 8006706:	4914      	ldr	r1, [pc, #80]	; (8006758 <pbuf_remove_header+0xa0>)
 8006708:	4812      	ldr	r0, [pc, #72]	; (8006754 <pbuf_remove_header+0x9c>)
 800670a:	f009 fd17 	bl	801013c <iprintf>
 800670e:	2301      	movs	r3, #1
 8006710:	e017      	b.n	8006742 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	441a      	add	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	895a      	ldrh	r2, [r3, #10]
 8006728:	89fb      	ldrh	r3, [r7, #14]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	891a      	ldrh	r2, [r3, #8]
 8006736:	89fb      	ldrh	r3, [r7, #14]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	b29a      	uxth	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	08011970 	.word	0x08011970
 8006750:	08011ad4 	.word	0x08011ad4
 8006754:	080119d0 	.word	0x080119d0
 8006758:	08011ae0 	.word	0x08011ae0

0800675c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
 8006768:	4613      	mov	r3, r2
 800676a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800676c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da08      	bge.n	8006786 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006774:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006778:	425b      	negs	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff9b 	bl	80066b8 <pbuf_remove_header>
 8006782:	4603      	mov	r3, r0
 8006784:	e007      	b.n	8006796 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800678a:	787a      	ldrb	r2, [r7, #1]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff1a 	bl	80065c8 <pbuf_add_header_impl>
 8006794:	4603      	mov	r3, r0
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80067aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067ae:	2201      	movs	r2, #1
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff ffd2 	bl	800675c <pbuf_header_impl>
 80067b8:	4603      	mov	r3, r0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <pbuf_free+0x22>
 80067d8:	4b38      	ldr	r3, [pc, #224]	; (80068bc <pbuf_free+0xf8>)
 80067da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80067de:	4938      	ldr	r1, [pc, #224]	; (80068c0 <pbuf_free+0xfc>)
 80067e0:	4838      	ldr	r0, [pc, #224]	; (80068c4 <pbuf_free+0x100>)
 80067e2:	f009 fcab 	bl	801013c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e063      	b.n	80068b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80067ee:	e05c      	b.n	80068aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7b9b      	ldrb	r3, [r3, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <pbuf_free+0x42>
 80067f8:	4b30      	ldr	r3, [pc, #192]	; (80068bc <pbuf_free+0xf8>)
 80067fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80067fe:	4932      	ldr	r1, [pc, #200]	; (80068c8 <pbuf_free+0x104>)
 8006800:	4830      	ldr	r0, [pc, #192]	; (80068c4 <pbuf_free+0x100>)
 8006802:	f009 fc9b 	bl	801013c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7b9b      	ldrb	r3, [r3, #14]
 800680a:	3b01      	subs	r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	739a      	strb	r2, [r3, #14]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7b9b      	ldrb	r3, [r3, #14]
 8006816:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006818:	7dbb      	ldrb	r3, [r7, #22]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d143      	bne.n	80068a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7b1b      	ldrb	r3, [r3, #12]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7b5b      	ldrb	r3, [r3, #13]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <pbuf_free+0x90>
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <pbuf_free+0xf8>)
 8006848:	f240 22ff 	movw	r2, #767	; 0x2ff
 800684c:	491f      	ldr	r1, [pc, #124]	; (80068cc <pbuf_free+0x108>)
 800684e:	481d      	ldr	r0, [pc, #116]	; (80068c4 <pbuf_free+0x100>)
 8006850:	f009 fc74 	bl	801013c <iprintf>
        pc->custom_free_function(p);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
 800685c:	e01d      	b.n	800689a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d104      	bne.n	800686e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	2008      	movs	r0, #8
 8006868:	f7ff f99e 	bl	8005ba8 <memp_free>
 800686c:	e015      	b.n	800689a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d104      	bne.n	800687e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	2007      	movs	r0, #7
 8006878:	f7ff f996 	bl	8005ba8 <memp_free>
 800687c:	e00d      	b.n	800689a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <pbuf_free+0xc8>
          mem_free(p);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fe fe6f 	bl	8005568 <mem_free>
 800688a:	e006      	b.n	800689a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <pbuf_free+0xf8>)
 800688e:	f240 320f 	movw	r2, #783	; 0x30f
 8006892:	490f      	ldr	r1, [pc, #60]	; (80068d0 <pbuf_free+0x10c>)
 8006894:	480b      	ldr	r0, [pc, #44]	; (80068c4 <pbuf_free+0x100>)
 8006896:	f009 fc51 	bl	801013c <iprintf>
        }
      }
      count++;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	3301      	adds	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	e001      	b.n	80068aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d19f      	bne.n	80067f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	08011970 	.word	0x08011970
 80068c0:	08011ad4 	.word	0x08011ad4
 80068c4:	080119d0 	.word	0x080119d0
 80068c8:	08011b00 	.word	0x08011b00
 80068cc:	08011b18 	.word	0x08011b18
 80068d0:	08011b3c 	.word	0x08011b3c

080068d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80068e0:	e005      	b.n	80068ee <pbuf_clen+0x1a>
    ++len;
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	3301      	adds	r3, #1
 80068e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f6      	bne.n	80068e2 <pbuf_clen+0xe>
  }
  return len;
 80068f4:	89fb      	ldrh	r3, [r7, #14]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d010      	beq.n	8006934 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7b9b      	ldrb	r3, [r3, #14]
 8006916:	3301      	adds	r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7b9b      	ldrb	r3, [r3, #14]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <pbuf_ref+0x30>
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <pbuf_ref+0x38>)
 8006928:	f240 3242 	movw	r2, #834	; 0x342
 800692c:	4904      	ldr	r1, [pc, #16]	; (8006940 <pbuf_ref+0x3c>)
 800692e:	4805      	ldr	r0, [pc, #20]	; (8006944 <pbuf_ref+0x40>)
 8006930:	f009 fc04 	bl	801013c <iprintf>
  }
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	08011970 	.word	0x08011970
 8006940:	08011b50 	.word	0x08011b50
 8006944:	080119d0 	.word	0x080119d0

08006948 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <pbuf_cat+0x16>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <pbuf_cat+0x26>
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <pbuf_cat+0x98>)
 8006960:	f240 325a 	movw	r2, #858	; 0x35a
 8006964:	491f      	ldr	r1, [pc, #124]	; (80069e4 <pbuf_cat+0x9c>)
 8006966:	4820      	ldr	r0, [pc, #128]	; (80069e8 <pbuf_cat+0xa0>)
 8006968:	f009 fbe8 	bl	801013c <iprintf>
 800696c:	e034      	b.n	80069d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e00a      	b.n	800698a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	891a      	ldrh	r2, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	891b      	ldrh	r3, [r3, #8]
 800697c:	4413      	add	r3, r2
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	891a      	ldrh	r2, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	895b      	ldrh	r3, [r3, #10]
 800699a:	429a      	cmp	r2, r3
 800699c:	d006      	beq.n	80069ac <pbuf_cat+0x64>
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <pbuf_cat+0x98>)
 80069a0:	f240 3262 	movw	r2, #866	; 0x362
 80069a4:	4911      	ldr	r1, [pc, #68]	; (80069ec <pbuf_cat+0xa4>)
 80069a6:	4810      	ldr	r0, [pc, #64]	; (80069e8 <pbuf_cat+0xa0>)
 80069a8:	f009 fbc8 	bl	801013c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d006      	beq.n	80069c2 <pbuf_cat+0x7a>
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <pbuf_cat+0x98>)
 80069b6:	f240 3263 	movw	r2, #867	; 0x363
 80069ba:	490d      	ldr	r1, [pc, #52]	; (80069f0 <pbuf_cat+0xa8>)
 80069bc:	480a      	ldr	r0, [pc, #40]	; (80069e8 <pbuf_cat+0xa0>)
 80069be:	f009 fbbd 	bl	801013c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	891a      	ldrh	r2, [r3, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	891b      	ldrh	r3, [r3, #8]
 80069ca:	4413      	add	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	08011970 	.word	0x08011970
 80069e4:	08011b64 	.word	0x08011b64
 80069e8:	080119d0 	.word	0x080119d0
 80069ec:	08011b9c 	.word	0x08011b9c
 80069f0:	08011bcc 	.word	0x08011bcc

080069f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ffa1 	bl	8006948 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006a06:	6838      	ldr	r0, [r7, #0]
 8006a08:	f7ff ff7c 	bl	8006904 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <pbuf_copy+0x2a>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <pbuf_copy+0x2a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	891a      	ldrh	r2, [r3, #8]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	891b      	ldrh	r3, [r3, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d209      	bcs.n	8006a52 <pbuf_copy+0x3e>
 8006a3e:	4b57      	ldr	r3, [pc, #348]	; (8006b9c <pbuf_copy+0x188>)
 8006a40:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006a44:	4956      	ldr	r1, [pc, #344]	; (8006ba0 <pbuf_copy+0x18c>)
 8006a46:	4857      	ldr	r0, [pc, #348]	; (8006ba4 <pbuf_copy+0x190>)
 8006a48:	f009 fb78 	bl	801013c <iprintf>
 8006a4c:	f06f 030f 	mvn.w	r3, #15
 8006a50:	e09f      	b.n	8006b92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	895b      	ldrh	r3, [r3, #10]
 8006a56:	461a      	mov	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	895b      	ldrh	r3, [r3, #10]
 8006a60:	4619      	mov	r1, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1acb      	subs	r3, r1, r3
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d306      	bcc.n	8006a78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	895b      	ldrh	r3, [r3, #10]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e005      	b.n	8006a84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	895b      	ldrh	r3, [r3, #10]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	18d0      	adds	r0, r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4619      	mov	r1, r3
 8006a98:	f009 fb3d 	bl	8010116 <memcpy>
    offset_to += len;
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d906      	bls.n	8006ac6 <pbuf_copy+0xb2>
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <pbuf_copy+0x188>)
 8006aba:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006abe:	493a      	ldr	r1, [pc, #232]	; (8006ba8 <pbuf_copy+0x194>)
 8006ac0:	4838      	ldr	r0, [pc, #224]	; (8006ba4 <pbuf_copy+0x190>)
 8006ac2:	f009 fb3b 	bl	801013c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	895b      	ldrh	r3, [r3, #10]
 8006aca:	461a      	mov	r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d906      	bls.n	8006ae0 <pbuf_copy+0xcc>
 8006ad2:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <pbuf_copy+0x188>)
 8006ad4:	f240 32da 	movw	r2, #986	; 0x3da
 8006ad8:	4934      	ldr	r1, [pc, #208]	; (8006bac <pbuf_copy+0x198>)
 8006ada:	4832      	ldr	r0, [pc, #200]	; (8006ba4 <pbuf_copy+0x190>)
 8006adc:	f009 fb2e 	bl	801013c <iprintf>
    if (offset_from >= p_from->len) {
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	895b      	ldrh	r3, [r3, #10]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d304      	bcc.n	8006af6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	895b      	ldrh	r3, [r3, #10]
 8006afa:	461a      	mov	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d114      	bne.n	8006b2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <pbuf_copy+0x118>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <pbuf_copy+0x118>
 8006b18:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <pbuf_copy+0x188>)
 8006b1a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b1e:	4924      	ldr	r1, [pc, #144]	; (8006bb0 <pbuf_copy+0x19c>)
 8006b20:	4820      	ldr	r0, [pc, #128]	; (8006ba4 <pbuf_copy+0x190>)
 8006b22:	f009 fb0b 	bl	801013c <iprintf>
 8006b26:	f06f 030f 	mvn.w	r3, #15
 8006b2a:	e032      	b.n	8006b92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d013      	beq.n	8006b5a <pbuf_copy+0x146>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	895a      	ldrh	r2, [r3, #10]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	891b      	ldrh	r3, [r3, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d10d      	bne.n	8006b5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <pbuf_copy+0x146>
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <pbuf_copy+0x188>)
 8006b48:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8006b4c:	4919      	ldr	r1, [pc, #100]	; (8006bb4 <pbuf_copy+0x1a0>)
 8006b4e:	4815      	ldr	r0, [pc, #84]	; (8006ba4 <pbuf_copy+0x190>)
 8006b50:	f009 faf4 	bl	801013c <iprintf>
 8006b54:	f06f 0305 	mvn.w	r3, #5
 8006b58:	e01b      	b.n	8006b92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <pbuf_copy+0x174>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	895a      	ldrh	r2, [r3, #10]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	891b      	ldrh	r3, [r3, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d10d      	bne.n	8006b88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <pbuf_copy+0x174>
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <pbuf_copy+0x188>)
 8006b76:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006b7a:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <pbuf_copy+0x1a0>)
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <pbuf_copy+0x190>)
 8006b7e:	f009 fadd 	bl	801013c <iprintf>
 8006b82:	f06f 0305 	mvn.w	r3, #5
 8006b86:	e004      	b.n	8006b92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47f af61 	bne.w	8006a52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08011970 	.word	0x08011970
 8006ba0:	08011c18 	.word	0x08011c18
 8006ba4:	080119d0 	.word	0x080119d0
 8006ba8:	08011c48 	.word	0x08011c48
 8006bac:	08011c60 	.word	0x08011c60
 8006bb0:	08011c7c 	.word	0x08011c7c
 8006bb4:	08011c8c 	.word	0x08011c8c

08006bb8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	80fb      	strh	r3, [r7, #6]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d108      	bne.n	8006bee <pbuf_copy_partial+0x36>
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	; (8006c8c <pbuf_copy_partial+0xd4>)
 8006bde:	f240 420a 	movw	r2, #1034	; 0x40a
 8006be2:	492b      	ldr	r1, [pc, #172]	; (8006c90 <pbuf_copy_partial+0xd8>)
 8006be4:	482b      	ldr	r0, [pc, #172]	; (8006c94 <pbuf_copy_partial+0xdc>)
 8006be6:	f009 faa9 	bl	801013c <iprintf>
 8006bea:	2300      	movs	r3, #0
 8006bec:	e04a      	b.n	8006c84 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d108      	bne.n	8006c06 <pbuf_copy_partial+0x4e>
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <pbuf_copy_partial+0xd4>)
 8006bf6:	f240 420b 	movw	r2, #1035	; 0x40b
 8006bfa:	4927      	ldr	r1, [pc, #156]	; (8006c98 <pbuf_copy_partial+0xe0>)
 8006bfc:	4825      	ldr	r0, [pc, #148]	; (8006c94 <pbuf_copy_partial+0xdc>)
 8006bfe:	f009 fa9d 	bl	801013c <iprintf>
 8006c02:	2300      	movs	r3, #0
 8006c04:	e03e      	b.n	8006c84 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e034      	b.n	8006c76 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c0c:	88bb      	ldrh	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <pbuf_copy_partial+0x70>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	895b      	ldrh	r3, [r3, #10]
 8006c16:	88ba      	ldrh	r2, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d305      	bcc.n	8006c28 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	895b      	ldrh	r3, [r3, #10]
 8006c20:	88ba      	ldrh	r2, [r7, #4]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	80bb      	strh	r3, [r7, #4]
 8006c26:	e023      	b.n	8006c70 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	895a      	ldrh	r2, [r3, #10]
 8006c2c:	88bb      	ldrh	r3, [r7, #4]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c32:	8b3a      	ldrh	r2, [r7, #24]
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d901      	bls.n	8006c3e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c3e:	8b7b      	ldrh	r3, [r7, #26]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	18d0      	adds	r0, r2, r3
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	88bb      	ldrh	r3, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	8b3a      	ldrh	r2, [r7, #24]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f009 fa61 	bl	8010116 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006c54:	8afa      	ldrh	r2, [r7, #22]
 8006c56:	8b3b      	ldrh	r3, [r7, #24]
 8006c58:	4413      	add	r3, r2
 8006c5a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006c5c:	8b7a      	ldrh	r2, [r7, #26]
 8006c5e:	8b3b      	ldrh	r3, [r7, #24]
 8006c60:	4413      	add	r3, r2
 8006c62:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	8b3b      	ldrh	r3, [r7, #24]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <pbuf_copy_partial+0xca>
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1c4      	bne.n	8006c0c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006c82:	8afb      	ldrh	r3, [r7, #22]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3720      	adds	r7, #32
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08011970 	.word	0x08011970
 8006c90:	08011cb8 	.word	0x08011cb8
 8006c94:	080119d0 	.word	0x080119d0
 8006c98:	08011cd8 	.word	0x08011cd8

08006c9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	603a      	str	r2, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	8919      	ldrh	r1, [r3, #8]
 8006cb0:	88ba      	ldrh	r2, [r7, #4]
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff faa5 	bl	8006204 <pbuf_alloc>
 8006cba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <pbuf_clone+0x2a>
    return NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e011      	b.n	8006cea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff fea3 	bl	8006a14 <pbuf_copy>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006cd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d006      	beq.n	8006ce8 <pbuf_clone+0x4c>
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <pbuf_clone+0x58>)
 8006cdc:	f240 5224 	movw	r2, #1316	; 0x524
 8006ce0:	4905      	ldr	r1, [pc, #20]	; (8006cf8 <pbuf_clone+0x5c>)
 8006ce2:	4806      	ldr	r0, [pc, #24]	; (8006cfc <pbuf_clone+0x60>)
 8006ce4:	f009 fa2a 	bl	801013c <iprintf>
  return q;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08011970 	.word	0x08011970
 8006cf8:	08011de4 	.word	0x08011de4
 8006cfc:	080119d0 	.word	0x080119d0

08006d00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d04:	f009 fa32 	bl	801016c <rand>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <tcp_init+0x20>)
 8006d1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000012 	.word	0x20000012

08006d24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7d1b      	ldrb	r3, [r3, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d105      	bne.n	8006d40 <tcp_free+0x1c>
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <tcp_free+0x2c>)
 8006d36:	22d4      	movs	r2, #212	; 0xd4
 8006d38:	4906      	ldr	r1, [pc, #24]	; (8006d54 <tcp_free+0x30>)
 8006d3a:	4807      	ldr	r0, [pc, #28]	; (8006d58 <tcp_free+0x34>)
 8006d3c:	f009 f9fe 	bl	801013c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	2001      	movs	r0, #1
 8006d44:	f7fe ff30 	bl	8005ba8 <memp_free>
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	08011e70 	.word	0x08011e70
 8006d54:	08011ea0 	.word	0x08011ea0
 8006d58:	08011eb4 	.word	0x08011eb4

08006d5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7d1b      	ldrb	r3, [r3, #20]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d105      	bne.n	8006d78 <tcp_free_listen+0x1c>
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <tcp_free_listen+0x2c>)
 8006d6e:	22df      	movs	r2, #223	; 0xdf
 8006d70:	4906      	ldr	r1, [pc, #24]	; (8006d8c <tcp_free_listen+0x30>)
 8006d72:	4807      	ldr	r0, [pc, #28]	; (8006d90 <tcp_free_listen+0x34>)
 8006d74:	f009 f9e2 	bl	801013c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	f7fe ff14 	bl	8005ba8 <memp_free>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	08011e70 	.word	0x08011e70
 8006d8c:	08011edc 	.word	0x08011edc
 8006d90:	08011eb4 	.word	0x08011eb4

08006d94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006d98:	f001 f852 	bl	8007e40 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <tcp_tmr+0x28>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <tcp_tmr+0x28>)
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <tcp_tmr+0x28>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006db4:	f000 fd06 	bl	80077c4 <tcp_slowtmr>
  }
}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000052d 	.word	0x2000052d

08006dc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <tcp_remove_listener+0x1c>
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <tcp_remove_listener+0x48>)
 8006dd2:	22ff      	movs	r2, #255	; 0xff
 8006dd4:	490d      	ldr	r1, [pc, #52]	; (8006e0c <tcp_remove_listener+0x4c>)
 8006dd6:	480e      	ldr	r0, [pc, #56]	; (8006e10 <tcp_remove_listener+0x50>)
 8006dd8:	f009 f9b0 	bl	801013c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e00a      	b.n	8006df8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d102      	bne.n	8006df2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f1      	bne.n	8006de2 <tcp_remove_listener+0x22>
    }
  }
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	08011e70 	.word	0x08011e70
 8006e0c:	08011ef8 	.word	0x08011ef8
 8006e10:	08011eb4 	.word	0x08011eb4

08006e14 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <tcp_listen_closed+0x1c>
 8006e22:	4b14      	ldr	r3, [pc, #80]	; (8006e74 <tcp_listen_closed+0x60>)
 8006e24:	f240 1211 	movw	r2, #273	; 0x111
 8006e28:	4913      	ldr	r1, [pc, #76]	; (8006e78 <tcp_listen_closed+0x64>)
 8006e2a:	4814      	ldr	r0, [pc, #80]	; (8006e7c <tcp_listen_closed+0x68>)
 8006e2c:	f009 f986 	bl	801013c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d006      	beq.n	8006e46 <tcp_listen_closed+0x32>
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <tcp_listen_closed+0x60>)
 8006e3a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e3e:	4910      	ldr	r1, [pc, #64]	; (8006e80 <tcp_listen_closed+0x6c>)
 8006e40:	480e      	ldr	r0, [pc, #56]	; (8006e7c <tcp_listen_closed+0x68>)
 8006e42:	f009 f97b 	bl	801013c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e46:	2301      	movs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	e00b      	b.n	8006e64 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006e4c:	4a0d      	ldr	r2, [pc, #52]	; (8006e84 <tcp_listen_closed+0x70>)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff ffb1 	bl	8006dc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d9f0      	bls.n	8006e4c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08011e70 	.word	0x08011e70
 8006e78:	08011f20 	.word	0x08011f20
 8006e7c:	08011eb4 	.word	0x08011eb4
 8006e80:	08011f2c 	.word	0x08011f2c
 8006e84:	080142c8 	.word	0x080142c8

08006e88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006e88:	b5b0      	push	{r4, r5, r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <tcp_close_shutdown+0x20>
 8006e9a:	4b61      	ldr	r3, [pc, #388]	; (8007020 <tcp_close_shutdown+0x198>)
 8006e9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ea0:	4960      	ldr	r1, [pc, #384]	; (8007024 <tcp_close_shutdown+0x19c>)
 8006ea2:	4861      	ldr	r0, [pc, #388]	; (8007028 <tcp_close_shutdown+0x1a0>)
 8006ea4:	f009 f94a 	bl	801013c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d066      	beq.n	8006f7c <tcp_close_shutdown+0xf4>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7d1b      	ldrb	r3, [r3, #20]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d003      	beq.n	8006ebe <tcp_close_shutdown+0x36>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	2b07      	cmp	r3, #7
 8006ebc:	d15e      	bne.n	8006f7c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <tcp_close_shutdown+0x48>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ece:	d055      	beq.n	8006f7c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8b5b      	ldrh	r3, [r3, #26]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <tcp_close_shutdown+0x62>
 8006edc:	4b50      	ldr	r3, [pc, #320]	; (8007020 <tcp_close_shutdown+0x198>)
 8006ede:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006ee2:	4952      	ldr	r1, [pc, #328]	; (800702c <tcp_close_shutdown+0x1a4>)
 8006ee4:	4850      	ldr	r0, [pc, #320]	; (8007028 <tcp_close_shutdown+0x1a0>)
 8006ee6:	f009 f929 	bl	801013c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006ef2:	687d      	ldr	r5, [r7, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	8ad2      	ldrh	r2, [r2, #22]
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	8b09      	ldrh	r1, [r1, #24]
 8006f00:	9102      	str	r1, [sp, #8]
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	462b      	mov	r3, r5
 8006f08:	4622      	mov	r2, r4
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f005 fd97 	bl	800ca40 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fb68 	bl	80085e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f18:	4b45      	ldr	r3, [pc, #276]	; (8007030 <tcp_close_shutdown+0x1a8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d105      	bne.n	8006f2e <tcp_close_shutdown+0xa6>
 8006f22:	4b43      	ldr	r3, [pc, #268]	; (8007030 <tcp_close_shutdown+0x1a8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a41      	ldr	r2, [pc, #260]	; (8007030 <tcp_close_shutdown+0x1a8>)
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e013      	b.n	8006f56 <tcp_close_shutdown+0xce>
 8006f2e:	4b40      	ldr	r3, [pc, #256]	; (8007030 <tcp_close_shutdown+0x1a8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e00c      	b.n	8006f50 <tcp_close_shutdown+0xc8>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d104      	bne.n	8006f4a <tcp_close_shutdown+0xc2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	60da      	str	r2, [r3, #12]
 8006f48:	e005      	b.n	8006f56 <tcp_close_shutdown+0xce>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1ef      	bne.n	8006f36 <tcp_close_shutdown+0xae>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60da      	str	r2, [r3, #12]
 8006f5c:	4b35      	ldr	r3, [pc, #212]	; (8007034 <tcp_close_shutdown+0x1ac>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006f62:	4b35      	ldr	r3, [pc, #212]	; (8007038 <tcp_close_shutdown+0x1b0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d102      	bne.n	8006f72 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006f6c:	f003 fffa 	bl	800af64 <tcp_trigger_input_pcb_close>
 8006f70:	e002      	b.n	8006f78 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fed6 	bl	8006d24 <tcp_free>
      }
      return ERR_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e04d      	b.n	8007018 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7d1b      	ldrb	r3, [r3, #20]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d02d      	beq.n	8006fe0 <tcp_close_shutdown+0x158>
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d036      	beq.n	8006ff6 <tcp_close_shutdown+0x16e>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d13f      	bne.n	800700c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8adb      	ldrh	r3, [r3, #22]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d021      	beq.n	8006fd8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f94:	4b29      	ldr	r3, [pc, #164]	; (800703c <tcp_close_shutdown+0x1b4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d105      	bne.n	8006faa <tcp_close_shutdown+0x122>
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <tcp_close_shutdown+0x1b4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a25      	ldr	r2, [pc, #148]	; (800703c <tcp_close_shutdown+0x1b4>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	e013      	b.n	8006fd2 <tcp_close_shutdown+0x14a>
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <tcp_close_shutdown+0x1b4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	e00c      	b.n	8006fcc <tcp_close_shutdown+0x144>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d104      	bne.n	8006fc6 <tcp_close_shutdown+0x13e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	60da      	str	r2, [r3, #12]
 8006fc4:	e005      	b.n	8006fd2 <tcp_close_shutdown+0x14a>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	60bb      	str	r3, [r7, #8]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ef      	bne.n	8006fb2 <tcp_close_shutdown+0x12a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fea3 	bl	8006d24 <tcp_free>
      break;
 8006fde:	e01a      	b.n	8007016 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff ff17 	bl	8006e14 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4815      	ldr	r0, [pc, #84]	; (8007040 <tcp_close_shutdown+0x1b8>)
 8006fea:	f001 fb4d 	bl	8008688 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff feb4 	bl	8006d5c <tcp_free_listen>
      break;
 8006ff4:	e00f      	b.n	8007016 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	480d      	ldr	r0, [pc, #52]	; (8007030 <tcp_close_shutdown+0x1a8>)
 8006ffa:	f001 fb45 	bl	8008688 <tcp_pcb_remove>
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <tcp_close_shutdown+0x1ac>)
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fe8d 	bl	8006d24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800700a:	e004      	b.n	8007016 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f819 	bl	8007044 <tcp_close_shutdown_fin>
 8007012:	4603      	mov	r3, r0
 8007014:	e000      	b.n	8007018 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bdb0      	pop	{r4, r5, r7, pc}
 8007020:	08011e70 	.word	0x08011e70
 8007024:	08011f44 	.word	0x08011f44
 8007028:	08011eb4 	.word	0x08011eb4
 800702c:	08011f64 	.word	0x08011f64
 8007030:	20006cf8 	.word	0x20006cf8
 8007034:	20006cf4 	.word	0x20006cf4
 8007038:	20006d0c 	.word	0x20006d0c
 800703c:	20006d04 	.word	0x20006d04
 8007040:	20006d00 	.word	0x20006d00

08007044 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <tcp_close_shutdown_fin+0x1c>
 8007052:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <tcp_close_shutdown_fin+0xc0>)
 8007054:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007058:	492b      	ldr	r1, [pc, #172]	; (8007108 <tcp_close_shutdown_fin+0xc4>)
 800705a:	482c      	ldr	r0, [pc, #176]	; (800710c <tcp_close_shutdown_fin+0xc8>)
 800705c:	f009 f86e 	bl	801013c <iprintf>

  switch (pcb->state) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7d1b      	ldrb	r3, [r3, #20]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d010      	beq.n	800708a <tcp_close_shutdown_fin+0x46>
 8007068:	2b07      	cmp	r3, #7
 800706a:	d01b      	beq.n	80070a4 <tcp_close_shutdown_fin+0x60>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d126      	bne.n	80070be <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f004 fde3 	bl	800bc3c <tcp_send_fin>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800707a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d11f      	bne.n	80070c2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2205      	movs	r2, #5
 8007086:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007088:	e01b      	b.n	80070c2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f004 fdd6 	bl	800bc3c <tcp_send_fin>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d114      	bne.n	80070c6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2205      	movs	r2, #5
 80070a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070a2:	e010      	b.n	80070c6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f004 fdc9 	bl	800bc3c <tcp_send_fin>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2209      	movs	r2, #9
 80070ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070bc:	e005      	b.n	80070ca <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e01c      	b.n	80070fc <tcp_close_shutdown_fin+0xb8>
      break;
 80070c2:	bf00      	nop
 80070c4:	e002      	b.n	80070cc <tcp_close_shutdown_fin+0x88>
      break;
 80070c6:	bf00      	nop
 80070c8:	e000      	b.n	80070cc <tcp_close_shutdown_fin+0x88>
      break;
 80070ca:	bf00      	nop
  }

  if (err == ERR_OK) {
 80070cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f004 feef 	bl	800beb8 <tcp_output>
 80070da:	e00d      	b.n	80070f8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80070dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d108      	bne.n	80070f8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8b5b      	ldrh	r3, [r3, #26]
 80070ea:	f043 0308 	orr.w	r3, r3, #8
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e001      	b.n	80070fc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80070f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08011e70 	.word	0x08011e70
 8007108:	08011f20 	.word	0x08011f20
 800710c:	08011eb4 	.word	0x08011eb4

08007110 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <tcp_close+0x22>
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <tcp_close+0x4c>)
 8007120:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007124:	490e      	ldr	r1, [pc, #56]	; (8007160 <tcp_close+0x50>)
 8007126:	480f      	ldr	r0, [pc, #60]	; (8007164 <tcp_close+0x54>)
 8007128:	f009 f808 	bl	801013c <iprintf>
 800712c:	f06f 030f 	mvn.w	r3, #15
 8007130:	e00f      	b.n	8007152 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d006      	beq.n	8007148 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8b5b      	ldrh	r3, [r3, #26]
 800713e:	f043 0310 	orr.w	r3, r3, #16
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007148:	2101      	movs	r1, #1
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fe9c 	bl	8006e88 <tcp_close_shutdown>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08011e70 	.word	0x08011e70
 8007160:	08011f80 	.word	0x08011f80
 8007164:	08011eb4 	.word	0x08011eb4

08007168 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08e      	sub	sp, #56	; 0x38
 800716c:	af04      	add	r7, sp, #16
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d107      	bne.n	8007188 <tcp_abandon+0x20>
 8007178:	4b52      	ldr	r3, [pc, #328]	; (80072c4 <tcp_abandon+0x15c>)
 800717a:	f240 223d 	movw	r2, #573	; 0x23d
 800717e:	4952      	ldr	r1, [pc, #328]	; (80072c8 <tcp_abandon+0x160>)
 8007180:	4852      	ldr	r0, [pc, #328]	; (80072cc <tcp_abandon+0x164>)
 8007182:	f008 ffdb 	bl	801013c <iprintf>
 8007186:	e099      	b.n	80072bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7d1b      	ldrb	r3, [r3, #20]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d106      	bne.n	800719e <tcp_abandon+0x36>
 8007190:	4b4c      	ldr	r3, [pc, #304]	; (80072c4 <tcp_abandon+0x15c>)
 8007192:	f240 2241 	movw	r2, #577	; 0x241
 8007196:	494e      	ldr	r1, [pc, #312]	; (80072d0 <tcp_abandon+0x168>)
 8007198:	484c      	ldr	r0, [pc, #304]	; (80072cc <tcp_abandon+0x164>)
 800719a:	f008 ffcf 	bl	801013c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7d1b      	ldrb	r3, [r3, #20]
 80071a2:	2b0a      	cmp	r3, #10
 80071a4:	d107      	bne.n	80071b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	484a      	ldr	r0, [pc, #296]	; (80072d4 <tcp_abandon+0x16c>)
 80071aa:	f001 fa6d 	bl	8008688 <tcp_pcb_remove>
    tcp_free(pcb);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fdb8 	bl	8006d24 <tcp_free>
 80071b4:	e082      	b.n	80072bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7d1b      	ldrb	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d126      	bne.n	800722e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8adb      	ldrh	r3, [r3, #22]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02e      	beq.n	8007246 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80071e8:	4b3b      	ldr	r3, [pc, #236]	; (80072d8 <tcp_abandon+0x170>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d105      	bne.n	80071fe <tcp_abandon+0x96>
 80071f2:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <tcp_abandon+0x170>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4a37      	ldr	r2, [pc, #220]	; (80072d8 <tcp_abandon+0x170>)
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e013      	b.n	8007226 <tcp_abandon+0xbe>
 80071fe:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <tcp_abandon+0x170>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e00c      	b.n	8007220 <tcp_abandon+0xb8>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d104      	bne.n	800721a <tcp_abandon+0xb2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e005      	b.n	8007226 <tcp_abandon+0xbe>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ef      	bne.n	8007206 <tcp_abandon+0x9e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	60da      	str	r2, [r3, #12]
 800722c:	e00b      	b.n	8007246 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8adb      	ldrh	r3, [r3, #22]
 8007236:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4828      	ldr	r0, [pc, #160]	; (80072dc <tcp_abandon+0x174>)
 800723c:	f001 fa24 	bl	8008688 <tcp_pcb_remove>
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <tcp_abandon+0x178>)
 8007242:	2201      	movs	r2, #1
 8007244:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	2b00      	cmp	r3, #0
 800724c:	d004      	beq.n	8007258 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fed4 	bl	8008000 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fecb 	bl	8008000 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fec2 	bl	8008000 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3304      	adds	r3, #4
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	8b12      	ldrh	r2, [r2, #24]
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	460b      	mov	r3, r1
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f005 fbd0 	bl	800ca40 <tcp_rst>
    }
    last_state = pcb->state;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fd3c 	bl	8006d24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <tcp_abandon+0x154>
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f06f 010c 	mvn.w	r1, #12
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	4798      	blx	r3
  }
}
 80072bc:	3728      	adds	r7, #40	; 0x28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	08011e70 	.word	0x08011e70
 80072c8:	08011fb4 	.word	0x08011fb4
 80072cc:	08011eb4 	.word	0x08011eb4
 80072d0:	08011fd0 	.word	0x08011fd0
 80072d4:	20006d08 	.word	0x20006d08
 80072d8:	20006d04 	.word	0x20006d04
 80072dc:	20006cf8 	.word	0x20006cf8
 80072e0:	20006cf4 	.word	0x20006cf4

080072e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80072ec:	2101      	movs	r1, #1
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ff3a 	bl	8007168 <tcp_abandon>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800730a:	2304      	movs	r3, #4
 800730c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007314:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <tcp_bind+0x114>)
 8007316:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <tcp_bind+0x36>
 800731e:	4b3d      	ldr	r3, [pc, #244]	; (8007414 <tcp_bind+0x118>)
 8007320:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007324:	493c      	ldr	r1, [pc, #240]	; (8007418 <tcp_bind+0x11c>)
 8007326:	483d      	ldr	r0, [pc, #244]	; (800741c <tcp_bind+0x120>)
 8007328:	f008 ff08 	bl	801013c <iprintf>
 800732c:	f06f 030f 	mvn.w	r3, #15
 8007330:	e06a      	b.n	8007408 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	7d1b      	ldrb	r3, [r3, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <tcp_bind+0x52>
 800733a:	4b36      	ldr	r3, [pc, #216]	; (8007414 <tcp_bind+0x118>)
 800733c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007340:	4937      	ldr	r1, [pc, #220]	; (8007420 <tcp_bind+0x124>)
 8007342:	4836      	ldr	r0, [pc, #216]	; (800741c <tcp_bind+0x120>)
 8007344:	f008 fefa 	bl	801013c <iprintf>
 8007348:	f06f 0305 	mvn.w	r3, #5
 800734c:	e05c      	b.n	8007408 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007354:	f000 f9f0 	bl	8007738 <tcp_new_port>
 8007358:	4603      	mov	r3, r0
 800735a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d135      	bne.n	80073ce <tcp_bind+0xd2>
      return ERR_BUF;
 8007362:	f06f 0301 	mvn.w	r3, #1
 8007366:	e04f      	b.n	8007408 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e02b      	b.n	80073c6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <tcp_bind+0x128>)
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e01e      	b.n	80073ba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	8adb      	ldrh	r3, [r3, #22]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	429a      	cmp	r2, r3
 8007384:	d116      	bne.n	80073b4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007386:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <tcp_bind+0xb2>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d102      	bne.n	80073b4 <tcp_bind+0xb8>
              return ERR_USE;
 80073ae:	f06f 0307 	mvn.w	r3, #7
 80073b2:	e029      	b.n	8007408 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1dd      	bne.n	800737c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	dbcf      	blt.n	800736e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <tcp_bind+0xf2>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <tcp_bind+0xec>
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	e000      	b.n	80073ea <tcp_bind+0xee>
 80073e8:	2300      	movs	r3, #0
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <tcp_bind+0x12c>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <tcp_bind+0x12c>)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	f005 fcdf 	bl	800cdc4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	080142f0 	.word	0x080142f0
 8007414:	08011e70 	.word	0x08011e70
 8007418:	08012004 	.word	0x08012004
 800741c:	08011eb4 	.word	0x08011eb4
 8007420:	0801201c 	.word	0x0801201c
 8007424:	080142c8 	.word	0x080142c8
 8007428:	20006d04 	.word	0x20006d04

0800742c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <tcp_accept_null+0x22>
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <tcp_accept_null+0x34>)
 8007442:	f240 320f 	movw	r2, #783	; 0x30f
 8007446:	4907      	ldr	r1, [pc, #28]	; (8007464 <tcp_accept_null+0x38>)
 8007448:	4807      	ldr	r0, [pc, #28]	; (8007468 <tcp_accept_null+0x3c>)
 800744a:	f008 fe77 	bl	801013c <iprintf>

  tcp_abort(pcb);
 800744e:	68b8      	ldr	r0, [r7, #8]
 8007450:	f7ff ff48 	bl	80072e4 <tcp_abort>

  return ERR_ABRT;
 8007454:	f06f 030c 	mvn.w	r3, #12
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08011e70 	.word	0x08011e70
 8007464:	08012044 	.word	0x08012044
 8007468:	08011eb4 	.word	0x08011eb4

0800746c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	2200      	movs	r2, #0
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f806 	bl	8007490 <tcp_listen_with_backlog_and_err>
 8007484:	4603      	mov	r3, r0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	460b      	mov	r3, r1
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <tcp_listen_with_backlog_and_err+0x2c>
 80074a8:	4b47      	ldr	r3, [pc, #284]	; (80075c8 <tcp_listen_with_backlog_and_err+0x138>)
 80074aa:	f240 3259 	movw	r2, #857	; 0x359
 80074ae:	4947      	ldr	r1, [pc, #284]	; (80075cc <tcp_listen_with_backlog_and_err+0x13c>)
 80074b0:	4847      	ldr	r0, [pc, #284]	; (80075d0 <tcp_listen_with_backlog_and_err+0x140>)
 80074b2:	f008 fe43 	bl	801013c <iprintf>
 80074b6:	23f0      	movs	r3, #240	; 0xf0
 80074b8:	76fb      	strb	r3, [r7, #27]
 80074ba:	e079      	b.n	80075b0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	7d1b      	ldrb	r3, [r3, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d009      	beq.n	80074d8 <tcp_listen_with_backlog_and_err+0x48>
 80074c4:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <tcp_listen_with_backlog_and_err+0x138>)
 80074c6:	f240 325a 	movw	r2, #858	; 0x35a
 80074ca:	4942      	ldr	r1, [pc, #264]	; (80075d4 <tcp_listen_with_backlog_and_err+0x144>)
 80074cc:	4840      	ldr	r0, [pc, #256]	; (80075d0 <tcp_listen_with_backlog_and_err+0x140>)
 80074ce:	f008 fe35 	bl	801013c <iprintf>
 80074d2:	23f1      	movs	r3, #241	; 0xf1
 80074d4:	76fb      	strb	r3, [r7, #27]
 80074d6:	e06b      	b.n	80075b0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	7d1b      	ldrb	r3, [r3, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d104      	bne.n	80074ea <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80074e4:	23f7      	movs	r3, #247	; 0xf7
 80074e6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80074e8:	e062      	b.n	80075b0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80074ea:	2002      	movs	r0, #2
 80074ec:	f7fe fb10 	bl	8005b10 <memp_malloc>
 80074f0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80074f8:	23ff      	movs	r3, #255	; 0xff
 80074fa:	76fb      	strb	r3, [r7, #27]
    goto done;
 80074fc:	e058      	b.n	80075b0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8ada      	ldrh	r2, [r3, #22]
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2201      	movs	r2, #1
 8007512:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7d5a      	ldrb	r2, [r3, #21]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	7a5a      	ldrb	r2, [r3, #9]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2200      	movs	r2, #0
 8007528:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	7ada      	ldrb	r2, [r3, #11]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	7a9a      	ldrb	r2, [r3, #10]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8adb      	ldrh	r3, [r3, #22]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d021      	beq.n	800758e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800754a:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <tcp_listen_with_backlog_and_err+0x148>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d105      	bne.n	8007560 <tcp_listen_with_backlog_and_err+0xd0>
 8007554:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <tcp_listen_with_backlog_and_err+0x148>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <tcp_listen_with_backlog_and_err+0x148>)
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e013      	b.n	8007588 <tcp_listen_with_backlog_and_err+0xf8>
 8007560:	4b1d      	ldr	r3, [pc, #116]	; (80075d8 <tcp_listen_with_backlog_and_err+0x148>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e00c      	b.n	8007582 <tcp_listen_with_backlog_and_err+0xf2>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d104      	bne.n	800757c <tcp_listen_with_backlog_and_err+0xec>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	60da      	str	r2, [r3, #12]
 800757a:	e005      	b.n	8007588 <tcp_listen_with_backlog_and_err+0xf8>
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1ef      	bne.n	8007568 <tcp_listen_with_backlog_and_err+0xd8>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff fbc8 	bl	8006d24 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4a11      	ldr	r2, [pc, #68]	; (80075dc <tcp_listen_with_backlog_and_err+0x14c>)
 8007598:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <tcp_listen_with_backlog_and_err+0x150>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	4a0f      	ldr	r2, [pc, #60]	; (80075e0 <tcp_listen_with_backlog_and_err+0x150>)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	f005 fc0c 	bl	800cdc4 <tcp_timer_needed>
  res = ERR_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7efa      	ldrb	r2, [r7, #27]
 80075ba:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80075bc:	69fb      	ldr	r3, [r7, #28]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08011e70 	.word	0x08011e70
 80075cc:	08012064 	.word	0x08012064
 80075d0:	08011eb4 	.word	0x08011eb4
 80075d4:	08012094 	.word	0x08012094
 80075d8:	20006d04 	.word	0x20006d04
 80075dc:	0800742d 	.word	0x0800742d
 80075e0:	20006d00 	.word	0x20006d00

080075e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <tcp_update_rcv_ann_wnd+0x1c>
 80075f2:	4b25      	ldr	r3, [pc, #148]	; (8007688 <tcp_update_rcv_ann_wnd+0xa4>)
 80075f4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80075f8:	4924      	ldr	r1, [pc, #144]	; (800768c <tcp_update_rcv_ann_wnd+0xa8>)
 80075fa:	4825      	ldr	r0, [pc, #148]	; (8007690 <tcp_update_rcv_ann_wnd+0xac>)
 80075fc:	f008 fd9e 	bl	801013c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007614:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007618:	bf28      	it	cs
 800761a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800761e:	b292      	uxth	r2, r2
 8007620:	4413      	add	r3, r2
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	db08      	blt.n	800763c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	e020      	b.n	800767e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd03      	ble.n	8007652 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007650:	e014      	b.n	800767c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	d306      	bcc.n	8007674 <tcp_update_rcv_ann_wnd+0x90>
 8007666:	4b08      	ldr	r3, [pc, #32]	; (8007688 <tcp_update_rcv_ann_wnd+0xa4>)
 8007668:	f240 32b6 	movw	r2, #950	; 0x3b6
 800766c:	4909      	ldr	r1, [pc, #36]	; (8007694 <tcp_update_rcv_ann_wnd+0xb0>)
 800766e:	4808      	ldr	r0, [pc, #32]	; (8007690 <tcp_update_rcv_ann_wnd+0xac>)
 8007670:	f008 fd64 	bl	801013c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800767c:	2300      	movs	r3, #0
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	08011e70 	.word	0x08011e70
 800768c:	080120cc 	.word	0x080120cc
 8007690:	08011eb4 	.word	0x08011eb4
 8007694:	080120f0 	.word	0x080120f0

08007698 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <tcp_recved+0x22>
 80076aa:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <tcp_recved+0x90>)
 80076ac:	f240 32cf 	movw	r2, #975	; 0x3cf
 80076b0:	491e      	ldr	r1, [pc, #120]	; (800772c <tcp_recved+0x94>)
 80076b2:	481f      	ldr	r0, [pc, #124]	; (8007730 <tcp_recved+0x98>)
 80076b4:	f008 fd42 	bl	801013c <iprintf>
 80076b8:	e032      	b.n	8007720 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7d1b      	ldrb	r3, [r3, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d106      	bne.n	80076d0 <tcp_recved+0x38>
 80076c2:	4b19      	ldr	r3, [pc, #100]	; (8007728 <tcp_recved+0x90>)
 80076c4:	f240 32d3 	movw	r2, #979	; 0x3d3
 80076c8:	491a      	ldr	r1, [pc, #104]	; (8007734 <tcp_recved+0x9c>)
 80076ca:	4819      	ldr	r0, [pc, #100]	; (8007730 <tcp_recved+0x98>)
 80076cc:	f008 fd36 	bl	801013c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80076d4:	887b      	ldrh	r3, [r7, #2]
 80076d6:	4413      	add	r3, r2
 80076d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076e0:	d804      	bhi.n	80076ec <tcp_recved+0x54>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	89fa      	ldrh	r2, [r7, #14]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d204      	bcs.n	80076f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80076f2:	851a      	strh	r2, [r3, #40]	; 0x28
 80076f4:	e002      	b.n	80076fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	89fa      	ldrh	r2, [r7, #14]
 80076fa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ff71 	bl	80075e4 <tcp_update_rcv_ann_wnd>
 8007702:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800770a:	d309      	bcc.n	8007720 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8b5b      	ldrh	r3, [r3, #26]
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f004 fbcc 	bl	800beb8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	08011e70 	.word	0x08011e70
 800772c:	0801210c 	.word	0x0801210c
 8007730:	08011eb4 	.word	0x08011eb4
 8007734:	08012124 	.word	0x08012124

08007738 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007742:	4b1e      	ldr	r3, [pc, #120]	; (80077bc <tcp_new_port+0x84>)
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <tcp_new_port+0x84>)
 800774c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <tcp_new_port+0x84>)
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007756:	4293      	cmp	r3, r2
 8007758:	d103      	bne.n	8007762 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <tcp_new_port+0x84>)
 800775c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007760:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007762:	2300      	movs	r3, #0
 8007764:	71fb      	strb	r3, [r7, #7]
 8007766:	e01e      	b.n	80077a6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <tcp_new_port+0x88>)
 800776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	e011      	b.n	800779a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	8ada      	ldrh	r2, [r3, #22]
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <tcp_new_port+0x84>)
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d108      	bne.n	8007794 <tcp_new_port+0x5c>
        n++;
 8007782:	88bb      	ldrh	r3, [r7, #4]
 8007784:	3301      	adds	r3, #1
 8007786:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007788:	88bb      	ldrh	r3, [r7, #4]
 800778a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800778e:	d3d8      	bcc.n	8007742 <tcp_new_port+0xa>
          return 0;
 8007790:	2300      	movs	r3, #0
 8007792:	e00d      	b.n	80077b0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ea      	bne.n	8007776 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	3301      	adds	r3, #1
 80077a4:	71fb      	strb	r3, [r7, #7]
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d9dd      	bls.n	8007768 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <tcp_new_port+0x84>)
 80077ae:	881b      	ldrh	r3, [r3, #0]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000012 	.word	0x20000012
 80077c0:	080142c8 	.word	0x080142c8

080077c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b090      	sub	sp, #64	; 0x40
 80077c8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80077d0:	4b94      	ldr	r3, [pc, #592]	; (8007a24 <tcp_slowtmr+0x260>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a93      	ldr	r2, [pc, #588]	; (8007a24 <tcp_slowtmr+0x260>)
 80077d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80077da:	4b93      	ldr	r3, [pc, #588]	; (8007a28 <tcp_slowtmr+0x264>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	4b91      	ldr	r3, [pc, #580]	; (8007a28 <tcp_slowtmr+0x264>)
 80077e4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80077ea:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <tcp_slowtmr+0x268>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80077f0:	e29f      	b.n	8007d32 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	7d1b      	ldrb	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <tcp_slowtmr+0x44>
 80077fa:	4b8d      	ldr	r3, [pc, #564]	; (8007a30 <tcp_slowtmr+0x26c>)
 80077fc:	f240 42be 	movw	r2, #1214	; 0x4be
 8007800:	498c      	ldr	r1, [pc, #560]	; (8007a34 <tcp_slowtmr+0x270>)
 8007802:	488d      	ldr	r0, [pc, #564]	; (8007a38 <tcp_slowtmr+0x274>)
 8007804:	f008 fc9a 	bl	801013c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	7d1b      	ldrb	r3, [r3, #20]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d106      	bne.n	800781e <tcp_slowtmr+0x5a>
 8007810:	4b87      	ldr	r3, [pc, #540]	; (8007a30 <tcp_slowtmr+0x26c>)
 8007812:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007816:	4989      	ldr	r1, [pc, #548]	; (8007a3c <tcp_slowtmr+0x278>)
 8007818:	4887      	ldr	r0, [pc, #540]	; (8007a38 <tcp_slowtmr+0x274>)
 800781a:	f008 fc8f 	bl	801013c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	7d1b      	ldrb	r3, [r3, #20]
 8007822:	2b0a      	cmp	r3, #10
 8007824:	d106      	bne.n	8007834 <tcp_slowtmr+0x70>
 8007826:	4b82      	ldr	r3, [pc, #520]	; (8007a30 <tcp_slowtmr+0x26c>)
 8007828:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800782c:	4984      	ldr	r1, [pc, #528]	; (8007a40 <tcp_slowtmr+0x27c>)
 800782e:	4882      	ldr	r0, [pc, #520]	; (8007a38 <tcp_slowtmr+0x274>)
 8007830:	f008 fc84 	bl	801013c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	7f9a      	ldrb	r2, [r3, #30]
 8007838:	4b7b      	ldr	r3, [pc, #492]	; (8007a28 <tcp_slowtmr+0x264>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d105      	bne.n	800784c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800784a:	e272      	b.n	8007d32 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800784c:	4b76      	ldr	r3, [pc, #472]	; (8007a28 <tcp_slowtmr+0x264>)
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	7d1b      	ldrb	r3, [r3, #20]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d10a      	bne.n	800787e <tcp_slowtmr+0xba>
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800786e:	2b05      	cmp	r3, #5
 8007870:	d905      	bls.n	800787e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007876:	3301      	adds	r3, #1
 8007878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800787c:	e11e      	b.n	8007abc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007884:	2b0b      	cmp	r3, #11
 8007886:	d905      	bls.n	8007894 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800788c:	3301      	adds	r3, #1
 800788e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007892:	e113      	b.n	8007abc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800789a:	2b00      	cmp	r3, #0
 800789c:	d075      	beq.n	800798a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d006      	beq.n	80078b4 <tcp_slowtmr+0xf0>
 80078a6:	4b62      	ldr	r3, [pc, #392]	; (8007a30 <tcp_slowtmr+0x26c>)
 80078a8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80078ac:	4965      	ldr	r1, [pc, #404]	; (8007a44 <tcp_slowtmr+0x280>)
 80078ae:	4862      	ldr	r0, [pc, #392]	; (8007a38 <tcp_slowtmr+0x274>)
 80078b0:	f008 fc44 	bl	801013c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <tcp_slowtmr+0x106>
 80078bc:	4b5c      	ldr	r3, [pc, #368]	; (8007a30 <tcp_slowtmr+0x26c>)
 80078be:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80078c2:	4961      	ldr	r1, [pc, #388]	; (8007a48 <tcp_slowtmr+0x284>)
 80078c4:	485c      	ldr	r0, [pc, #368]	; (8007a38 <tcp_slowtmr+0x274>)
 80078c6:	f008 fc39 	bl	801013c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80078d0:	2b0b      	cmp	r3, #11
 80078d2:	d905      	bls.n	80078e0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80078d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d8:	3301      	adds	r3, #1
 80078da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078de:	e0ed      	b.n	8007abc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80078e6:	3b01      	subs	r3, #1
 80078e8:	4a58      	ldr	r2, [pc, #352]	; (8007a4c <tcp_slowtmr+0x288>)
 80078ea:	5cd3      	ldrb	r3, [r2, r3]
 80078ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80078f4:	7c7a      	ldrb	r2, [r7, #17]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d907      	bls.n	800790a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007900:	3301      	adds	r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007910:	7c7a      	ldrb	r2, [r7, #17]
 8007912:	429a      	cmp	r2, r3
 8007914:	f200 80d2 	bhi.w	8007abc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007918:	2301      	movs	r3, #1
 800791a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007928:	f005 f97e 	bl	800cc28 <tcp_zero_window_probe>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d014      	beq.n	800795c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007932:	2300      	movs	r3, #0
 8007934:	623b      	str	r3, [r7, #32]
 8007936:	e011      	b.n	800795c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800793e:	4619      	mov	r1, r3
 8007940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007942:	f004 f833 	bl	800b9ac <tcp_split_unsent_seg>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d107      	bne.n	800795c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800794c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794e:	f004 fab3 	bl	800beb8 <tcp_output>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80ac 	beq.w	8007abc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007972:	2b06      	cmp	r3, #6
 8007974:	f200 80a2 	bhi.w	8007abc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800797e:	3301      	adds	r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007988:	e098      	b.n	8007abc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007990:	2b00      	cmp	r3, #0
 8007992:	db0f      	blt.n	80079b4 <tcp_slowtmr+0x1f0>
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800799a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800799e:	4293      	cmp	r3, r2
 80079a0:	d008      	beq.n	80079b4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3301      	adds	r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	b21a      	sxth	r2, r3
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80079c0:	429a      	cmp	r2, r3
 80079c2:	db7b      	blt.n	8007abc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80079c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079c6:	f004 fd6f 	bl	800c4a8 <tcp_rexmit_rto_prepare>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <tcp_slowtmr+0x21c>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d171      	bne.n	8007abc <tcp_slowtmr+0x2f8>
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d06d      	beq.n	8007abc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	7d1b      	ldrb	r3, [r3, #20]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d03a      	beq.n	8007a5e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079ee:	2b0c      	cmp	r3, #12
 80079f0:	bf28      	it	cs
 80079f2:	230c      	movcs	r3, #12
 80079f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80079fc:	10db      	asrs	r3, r3, #3
 80079fe:	b21b      	sxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007a08:	4413      	add	r3, r2
 8007a0a:	7efa      	ldrb	r2, [r7, #27]
 8007a0c:	4910      	ldr	r1, [pc, #64]	; (8007a50 <tcp_slowtmr+0x28c>)
 8007a0e:	5c8a      	ldrb	r2, [r1, r2]
 8007a10:	4093      	lsls	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dc1a      	bgt.n	8007a54 <tcp_slowtmr+0x290>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	b21a      	sxth	r2, r3
 8007a22:	e019      	b.n	8007a58 <tcp_slowtmr+0x294>
 8007a24:	20006cfc 	.word	0x20006cfc
 8007a28:	2000052e 	.word	0x2000052e
 8007a2c:	20006cf8 	.word	0x20006cf8
 8007a30:	08011e70 	.word	0x08011e70
 8007a34:	080121b4 	.word	0x080121b4
 8007a38:	08011eb4 	.word	0x08011eb4
 8007a3c:	080121e0 	.word	0x080121e0
 8007a40:	0801220c 	.word	0x0801220c
 8007a44:	0801223c 	.word	0x0801223c
 8007a48:	08012270 	.word	0x08012270
 8007a4c:	080142c0 	.word	0x080142c0
 8007a50:	080142b0 	.word	0x080142b0
 8007a54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	2200      	movs	r2, #0
 8007a62:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf28      	it	cs
 8007a74:	4613      	movcs	r3, r2
 8007a76:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007a78:	8a7b      	ldrh	r3, [r7, #18]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d206      	bcs.n	8007aa4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ab8:	f004 fd66 	bl	800c588 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	7d1b      	ldrb	r3, [r3, #20]
 8007ac0:	2b06      	cmp	r3, #6
 8007ac2:	d111      	bne.n	8007ae8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	8b5b      	ldrh	r3, [r3, #26]
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ad0:	4b9d      	ldr	r3, [pc, #628]	; (8007d48 <tcp_slowtmr+0x584>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b28      	cmp	r3, #40	; 0x28
 8007adc:	d904      	bls.n	8007ae8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	7a5b      	ldrb	r3, [r3, #9]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d04c      	beq.n	8007b8e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d003      	beq.n	8007b04 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d144      	bne.n	8007b8e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b04:	4b90      	ldr	r3, [pc, #576]	; (8007d48 <tcp_slowtmr+0x584>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b14:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007b18:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007b1c:	498b      	ldr	r1, [pc, #556]	; (8007d4c <tcp_slowtmr+0x588>)
 8007b1e:	fba1 1303 	umull	r1, r3, r1, r3
 8007b22:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d90a      	bls.n	8007b3e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b36:	3301      	adds	r3, #1
 8007b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b3c:	e027      	b.n	8007b8e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b3e:	4b82      	ldr	r3, [pc, #520]	; (8007d48 <tcp_slowtmr+0x584>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007b54:	4618      	mov	r0, r3
 8007b56:	4b7e      	ldr	r3, [pc, #504]	; (8007d50 <tcp_slowtmr+0x58c>)
 8007b58:	fb03 f300 	mul.w	r3, r3, r0
 8007b5c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007b5e:	497b      	ldr	r1, [pc, #492]	; (8007d4c <tcp_slowtmr+0x588>)
 8007b60:	fba1 1303 	umull	r1, r3, r1, r3
 8007b64:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d911      	bls.n	8007b8e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b6c:	f005 f81c 	bl	800cba8 <tcp_keepalive>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007b76:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007b84:	3301      	adds	r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d011      	beq.n	8007bba <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007b96:	4b6c      	ldr	r3, [pc, #432]	; (8007d48 <tcp_slowtmr+0x584>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	460b      	mov	r3, r1
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	440b      	add	r3, r1
 8007bae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d302      	bcc.n	8007bba <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bb6:	f000 fecb 	bl	8008950 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	7d1b      	ldrb	r3, [r3, #20]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d10b      	bne.n	8007bda <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bc2:	4b61      	ldr	r3, [pc, #388]	; (8007d48 <tcp_slowtmr+0x584>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b28      	cmp	r3, #40	; 0x28
 8007bce:	d904      	bls.n	8007bda <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	7d1b      	ldrb	r3, [r3, #20]
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	d10b      	bne.n	8007bfa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007be2:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <tcp_slowtmr+0x584>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2bf0      	cmp	r3, #240	; 0xf0
 8007bee:	d904      	bls.n	8007bfa <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d060      	beq.n	8007cc4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c0c:	f000 fcec 	bl	80085e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d010      	beq.n	8007c38 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007c16:	4b4f      	ldr	r3, [pc, #316]	; (8007d54 <tcp_slowtmr+0x590>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d106      	bne.n	8007c2e <tcp_slowtmr+0x46a>
 8007c20:	4b4d      	ldr	r3, [pc, #308]	; (8007d58 <tcp_slowtmr+0x594>)
 8007c22:	f240 526d 	movw	r2, #1389	; 0x56d
 8007c26:	494d      	ldr	r1, [pc, #308]	; (8007d5c <tcp_slowtmr+0x598>)
 8007c28:	484d      	ldr	r0, [pc, #308]	; (8007d60 <tcp_slowtmr+0x59c>)
 8007c2a:	f008 fa87 	bl	801013c <iprintf>
        prev->next = pcb->next;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	60da      	str	r2, [r3, #12]
 8007c36:	e00f      	b.n	8007c58 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c38:	4b46      	ldr	r3, [pc, #280]	; (8007d54 <tcp_slowtmr+0x590>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d006      	beq.n	8007c50 <tcp_slowtmr+0x48c>
 8007c42:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <tcp_slowtmr+0x594>)
 8007c44:	f240 5271 	movw	r2, #1393	; 0x571
 8007c48:	4946      	ldr	r1, [pc, #280]	; (8007d64 <tcp_slowtmr+0x5a0>)
 8007c4a:	4845      	ldr	r0, [pc, #276]	; (8007d60 <tcp_slowtmr+0x59c>)
 8007c4c:	f008 fa76 	bl	801013c <iprintf>
        tcp_active_pcbs = pcb->next;
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	4a3f      	ldr	r2, [pc, #252]	; (8007d54 <tcp_slowtmr+0x590>)
 8007c56:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d013      	beq.n	8007c88 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007c68:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c70:	8ad2      	ldrh	r2, [r2, #22]
 8007c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c74:	8b09      	ldrh	r1, [r1, #24]
 8007c76:	9102      	str	r1, [sp, #8]
 8007c78:	9201      	str	r2, [sp, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4601      	mov	r1, r0
 8007c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c84:	f004 fedc 	bl	800ca40 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	7d1b      	ldrb	r3, [r3, #20]
 8007c92:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007c9e:	6838      	ldr	r0, [r7, #0]
 8007ca0:	f7ff f840 	bl	8006d24 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007ca4:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <tcp_slowtmr+0x5a4>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <tcp_slowtmr+0x4f6>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f06f 010c 	mvn.w	r1, #12
 8007cb6:	68b8      	ldr	r0, [r7, #8]
 8007cb8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007cba:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <tcp_slowtmr+0x5a4>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d037      	beq.n	8007d32 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007cc2:	e590      	b.n	80077e6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	7f1b      	ldrb	r3, [r3, #28]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	7f1a      	ldrb	r2, [r3, #28]
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	7f5b      	ldrb	r3, [r3, #29]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d325      	bcc.n	8007d32 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007cec:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <tcp_slowtmr+0x5a4>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <tcp_slowtmr+0x550>
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d04:	6912      	ldr	r2, [r2, #16]
 8007d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007d12:	e002      	b.n	8007d1a <tcp_slowtmr+0x556>
 8007d14:	2300      	movs	r3, #0
 8007d16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <tcp_slowtmr+0x5a4>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d000      	beq.n	8007d24 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007d22:	e560      	b.n	80077e6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007d24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2e:	f004 f8c3 	bl	800beb8 <tcp_output>
  while (pcb != NULL) {
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f47f ad5c 	bne.w	80077f2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <tcp_slowtmr+0x5a8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007d44:	e067      	b.n	8007e16 <tcp_slowtmr+0x652>
 8007d46:	bf00      	nop
 8007d48:	20006cfc 	.word	0x20006cfc
 8007d4c:	10624dd3 	.word	0x10624dd3
 8007d50:	000124f8 	.word	0x000124f8
 8007d54:	20006cf8 	.word	0x20006cf8
 8007d58:	08011e70 	.word	0x08011e70
 8007d5c:	080122a8 	.word	0x080122a8
 8007d60:	08011eb4 	.word	0x08011eb4
 8007d64:	080122d4 	.word	0x080122d4
 8007d68:	20006cf4 	.word	0x20006cf4
 8007d6c:	20006d08 	.word	0x20006d08
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	7d1b      	ldrb	r3, [r3, #20]
 8007d74:	2b0a      	cmp	r3, #10
 8007d76:	d006      	beq.n	8007d86 <tcp_slowtmr+0x5c2>
 8007d78:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <tcp_slowtmr+0x660>)
 8007d7a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007d7e:	492a      	ldr	r1, [pc, #168]	; (8007e28 <tcp_slowtmr+0x664>)
 8007d80:	482a      	ldr	r0, [pc, #168]	; (8007e2c <tcp_slowtmr+0x668>)
 8007d82:	f008 f9db 	bl	801013c <iprintf>
    pcb_remove = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007d8c:	4b28      	ldr	r3, [pc, #160]	; (8007e30 <tcp_slowtmr+0x66c>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2bf0      	cmp	r3, #240	; 0xf0
 8007d98:	d904      	bls.n	8007da4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d02f      	beq.n	8007e0c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dae:	f000 fc1b 	bl	80085e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <tcp_slowtmr+0x670>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d106      	bne.n	8007dd0 <tcp_slowtmr+0x60c>
 8007dc2:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <tcp_slowtmr+0x660>)
 8007dc4:	f240 52af 	movw	r2, #1455	; 0x5af
 8007dc8:	491b      	ldr	r1, [pc, #108]	; (8007e38 <tcp_slowtmr+0x674>)
 8007dca:	4818      	ldr	r0, [pc, #96]	; (8007e2c <tcp_slowtmr+0x668>)
 8007dcc:	f008 f9b6 	bl	801013c <iprintf>
        prev->next = pcb->next;
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	60da      	str	r2, [r3, #12]
 8007dd8:	e00f      	b.n	8007dfa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <tcp_slowtmr+0x670>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d006      	beq.n	8007df2 <tcp_slowtmr+0x62e>
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <tcp_slowtmr+0x660>)
 8007de6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007dea:	4914      	ldr	r1, [pc, #80]	; (8007e3c <tcp_slowtmr+0x678>)
 8007dec:	480f      	ldr	r0, [pc, #60]	; (8007e2c <tcp_slowtmr+0x668>)
 8007dee:	f008 f9a5 	bl	801013c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	4a0f      	ldr	r2, [pc, #60]	; (8007e34 <tcp_slowtmr+0x670>)
 8007df8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007e04:	69f8      	ldr	r0, [r7, #28]
 8007e06:	f7fe ff8d 	bl	8006d24 <tcp_free>
 8007e0a:	e004      	b.n	8007e16 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1a9      	bne.n	8007d70 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	3730      	adds	r7, #48	; 0x30
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bdb0      	pop	{r4, r5, r7, pc}
 8007e24:	08011e70 	.word	0x08011e70
 8007e28:	08012300 	.word	0x08012300
 8007e2c:	08011eb4 	.word	0x08011eb4
 8007e30:	20006cfc 	.word	0x20006cfc
 8007e34:	20006d08 	.word	0x20006d08
 8007e38:	08012330 	.word	0x08012330
 8007e3c:	08012358 	.word	0x08012358

08007e40 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007e46:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <tcp_fasttmr+0xbc>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b2b      	ldr	r3, [pc, #172]	; (8007efc <tcp_fasttmr+0xbc>)
 8007e50:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <tcp_fasttmr+0xc0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007e58:	e048      	b.n	8007eec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7f9a      	ldrb	r2, [r3, #30]
 8007e5e:	4b27      	ldr	r3, [pc, #156]	; (8007efc <tcp_fasttmr+0xbc>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d03f      	beq.n	8007ee6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <tcp_fasttmr+0xbc>)
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	8b5b      	ldrh	r3, [r3, #26]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d010      	beq.n	8007e9c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8b5b      	ldrh	r3, [r3, #26]
 8007e7e:	f043 0302 	orr.w	r3, r3, #2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f004 f815 	bl	800beb8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8b5b      	ldrh	r3, [r3, #26]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8b5b      	ldrh	r3, [r3, #26]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8b5b      	ldrh	r3, [r3, #26]
 8007eac:	f023 0308 	bic.w	r3, r3, #8
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff f8c4 	bl	8007044 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <tcp_fasttmr+0xc4>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f819 	bl	8007f08 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <tcp_fasttmr+0xc4>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d000      	beq.n	8007ee0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007ede:	e7b8      	b.n	8007e52 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	e002      	b.n	8007eec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1b3      	bne.n	8007e5a <tcp_fasttmr+0x1a>
    }
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	2000052e 	.word	0x2000052e
 8007f00:	20006cf8 	.word	0x20006cf8
 8007f04:	20006cf4 	.word	0x20006cf4

08007f08 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <tcp_process_refused_data+0x22>
 8007f16:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <tcp_process_refused_data+0xec>)
 8007f18:	f240 6209 	movw	r2, #1545	; 0x609
 8007f1c:	4936      	ldr	r1, [pc, #216]	; (8007ff8 <tcp_process_refused_data+0xf0>)
 8007f1e:	4837      	ldr	r0, [pc, #220]	; (8007ffc <tcp_process_refused_data+0xf4>)
 8007f20:	f008 f90c 	bl	801013c <iprintf>
 8007f24:	f06f 030f 	mvn.w	r3, #15
 8007f28:	e060      	b.n	8007fec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f2e:	7b5b      	ldrb	r3, [r3, #13]
 8007f30:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f36:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <tcp_process_refused_data+0x58>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6918      	ldr	r0, [r3, #16]
 8007f52:	2300      	movs	r3, #0
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	47a0      	blx	r4
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
 8007f5e:	e007      	b.n	8007f70 <tcp_process_refused_data+0x68>
 8007f60:	2300      	movs	r3, #0
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	2000      	movs	r0, #0
 8007f68:	f000 f8c0 	bl	80080ec <tcp_recv_null>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d12a      	bne.n	8007fce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d033      	beq.n	8007fea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f8a:	d005      	beq.n	8007f98 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f90:	3301      	adds	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <tcp_process_refused_data+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6918      	ldr	r0, [r3, #16]
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	47a0      	blx	r4
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	e001      	b.n	8007fbe <tcp_process_refused_data+0xb6>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc2:	f113 0f0d 	cmn.w	r3, #13
 8007fc6:	d110      	bne.n	8007fea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007fc8:	f06f 030c 	mvn.w	r3, #12
 8007fcc:	e00e      	b.n	8007fec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd2:	f113 0f0d 	cmn.w	r3, #13
 8007fd6:	d102      	bne.n	8007fde <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007fd8:	f06f 030c 	mvn.w	r3, #12
 8007fdc:	e006      	b.n	8007fec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007fe4:	f06f 0304 	mvn.w	r3, #4
 8007fe8:	e000      	b.n	8007fec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd90      	pop	{r4, r7, pc}
 8007ff4:	08011e70 	.word	0x08011e70
 8007ff8:	08012380 	.word	0x08012380
 8007ffc:	08011eb4 	.word	0x08011eb4

08008000 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008008:	e007      	b.n	800801a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f809 	bl	8008028 <tcp_seg_free>
    seg = next;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f4      	bne.n	800800a <tcp_segs_free+0xa>
  }
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fbbe 	bl	80067c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	2003      	movs	r0, #3
 800804c:	f7fd fdac 	bl	8005ba8 <memp_free>
  }
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d107      	bne.n	800807a <tcp_setprio+0x22>
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <tcp_setprio+0x30>)
 800806c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008070:	4906      	ldr	r1, [pc, #24]	; (800808c <tcp_setprio+0x34>)
 8008072:	4807      	ldr	r0, [pc, #28]	; (8008090 <tcp_setprio+0x38>)
 8008074:	f008 f862 	bl	801013c <iprintf>
 8008078:	e002      	b.n	8008080 <tcp_setprio+0x28>

  pcb->prio = prio;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	755a      	strb	r2, [r3, #21]
}
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	08011e70 	.word	0x08011e70
 800808c:	080123a8 	.word	0x080123a8
 8008090:	08011eb4 	.word	0x08011eb4

08008094 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <tcp_seg_copy+0x1c>
 80080a2:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <tcp_seg_copy+0x4c>)
 80080a4:	f240 6282 	movw	r2, #1666	; 0x682
 80080a8:	490e      	ldr	r1, [pc, #56]	; (80080e4 <tcp_seg_copy+0x50>)
 80080aa:	480f      	ldr	r0, [pc, #60]	; (80080e8 <tcp_seg_copy+0x54>)
 80080ac:	f008 f846 	bl	801013c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80080b0:	2003      	movs	r0, #3
 80080b2:	f7fd fd2d 	bl	8005b10 <memp_malloc>
 80080b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <tcp_seg_copy+0x2e>
    return NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	e00a      	b.n	80080d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80080c2:	2210      	movs	r2, #16
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f008 f825 	bl	8010116 <memcpy>
  pbuf_ref(cseg->p);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fc17 	bl	8006904 <pbuf_ref>
  return cseg;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08011e70 	.word	0x08011e70
 80080e4:	080123c4 	.word	0x080123c4
 80080e8:	08011eb4 	.word	0x08011eb4

080080ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <tcp_recv_null+0x28>
 8008100:	4b12      	ldr	r3, [pc, #72]	; (800814c <tcp_recv_null+0x60>)
 8008102:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008106:	4912      	ldr	r1, [pc, #72]	; (8008150 <tcp_recv_null+0x64>)
 8008108:	4812      	ldr	r0, [pc, #72]	; (8008154 <tcp_recv_null+0x68>)
 800810a:	f008 f817 	bl	801013c <iprintf>
 800810e:	f06f 030f 	mvn.w	r3, #15
 8008112:	e016      	b.n	8008142 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	891b      	ldrh	r3, [r3, #8]
 800811e:	4619      	mov	r1, r3
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f7ff fab9 	bl	8007698 <tcp_recved>
    pbuf_free(p);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fe fb4c 	bl	80067c4 <pbuf_free>
 800812c:	e008      	b.n	8008140 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800812e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008136:	68b8      	ldr	r0, [r7, #8]
 8008138:	f7fe ffea 	bl	8007110 <tcp_close>
 800813c:	4603      	mov	r3, r0
 800813e:	e000      	b.n	8008142 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	08011e70 	.word	0x08011e70
 8008150:	080123e0 	.word	0x080123e0
 8008154:	08011eb4 	.word	0x08011eb4

08008158 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	db01      	blt.n	800816e <tcp_kill_prio+0x16>
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	e000      	b.n	8008170 <tcp_kill_prio+0x18>
 800816e:	237f      	movs	r3, #127	; 0x7f
 8008170:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d034      	beq.n	80081e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	3b01      	subs	r3, #1
 800817c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008186:	4b19      	ldr	r3, [pc, #100]	; (80081ec <tcp_kill_prio+0x94>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e01f      	b.n	80081ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	7d5b      	ldrb	r3, [r3, #21]
 8008192:	7afa      	ldrb	r2, [r7, #11]
 8008194:	429a      	cmp	r2, r3
 8008196:	d80c      	bhi.n	80081b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d112      	bne.n	80081c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80081a2:	4b13      	ldr	r3, [pc, #76]	; (80081f0 <tcp_kill_prio+0x98>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d80a      	bhi.n	80081c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <tcp_kill_prio+0x98>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	7d5b      	ldrb	r3, [r3, #21]
 80081c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1dc      	bne.n	800818e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f7ff f882 	bl	80072e4 <tcp_abort>
 80081e0:	e000      	b.n	80081e4 <tcp_kill_prio+0x8c>
    return;
 80081e2:	bf00      	nop
  }
}
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20006cf8 	.word	0x20006cf8
 80081f0:	20006cfc 	.word	0x20006cfc

080081f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d009      	beq.n	8008218 <tcp_kill_state+0x24>
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b09      	cmp	r3, #9
 8008208:	d006      	beq.n	8008218 <tcp_kill_state+0x24>
 800820a:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <tcp_kill_state+0x80>)
 800820c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008210:	4919      	ldr	r1, [pc, #100]	; (8008278 <tcp_kill_state+0x84>)
 8008212:	481a      	ldr	r0, [pc, #104]	; (800827c <tcp_kill_state+0x88>)
 8008214:	f007 ff92 	bl	801013c <iprintf>

  inactivity = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800821c:	2300      	movs	r3, #0
 800821e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008220:	4b17      	ldr	r3, [pc, #92]	; (8008280 <tcp_kill_state+0x8c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	e017      	b.n	8008258 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	7d1b      	ldrb	r3, [r3, #20]
 800822c:	79fa      	ldrb	r2, [r7, #7]
 800822e:	429a      	cmp	r2, r3
 8008230:	d10f      	bne.n	8008252 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <tcp_kill_state+0x90>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d807      	bhi.n	8008252 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008242:	4b10      	ldr	r3, [pc, #64]	; (8008284 <tcp_kill_state+0x90>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e4      	bne.n	8008228 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008264:	2100      	movs	r1, #0
 8008266:	6938      	ldr	r0, [r7, #16]
 8008268:	f7fe ff7e 	bl	8007168 <tcp_abandon>
  }
}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	08011e70 	.word	0x08011e70
 8008278:	080123fc 	.word	0x080123fc
 800827c:	08011eb4 	.word	0x08011eb4
 8008280:	20006cf8 	.word	0x20006cf8
 8008284:	20006cfc 	.word	0x20006cfc

08008288 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <tcp_kill_timewait+0x58>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e012      	b.n	80082c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800829e:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <tcp_kill_timewait+0x5c>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d807      	bhi.n	80082be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <tcp_kill_timewait+0x5c>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e9      	bne.n	800829e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80082d0:	68b8      	ldr	r0, [r7, #8]
 80082d2:	f7ff f807 	bl	80072e4 <tcp_abort>
  }
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20006d08 	.word	0x20006d08
 80082e4:	20006cfc 	.word	0x20006cfc

080082e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <tcp_handle_closepend+0x48>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80082f4:	e014      	b.n	8008320 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	8b5b      	ldrh	r3, [r3, #26]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8b5b      	ldrh	r3, [r3, #26]
 800830c:	f023 0308 	bic.w	r3, r3, #8
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fe fe94 	bl	8007044 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e7      	bne.n	80082f6 <tcp_handle_closepend+0xe>
  }
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20006cf8 	.word	0x20006cf8

08008334 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800833e:	2001      	movs	r0, #1
 8008340:	f7fd fbe6 	bl	8005b10 <memp_malloc>
 8008344:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d126      	bne.n	800839a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800834c:	f7ff ffcc 	bl	80082e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008350:	f7ff ff9a 	bl	8008288 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008354:	2001      	movs	r0, #1
 8008356:	f7fd fbdb 	bl	8005b10 <memp_malloc>
 800835a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d11b      	bne.n	800839a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008362:	2009      	movs	r0, #9
 8008364:	f7ff ff46 	bl	80081f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008368:	2001      	movs	r0, #1
 800836a:	f7fd fbd1 	bl	8005b10 <memp_malloc>
 800836e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d111      	bne.n	800839a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008376:	2008      	movs	r0, #8
 8008378:	f7ff ff3c 	bl	80081f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800837c:	2001      	movs	r0, #1
 800837e:	f7fd fbc7 	bl	8005b10 <memp_malloc>
 8008382:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d107      	bne.n	800839a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fee3 	bl	8008158 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008392:	2001      	movs	r0, #1
 8008394:	f7fd fbbc 	bl	8005b10 <memp_malloc>
 8008398:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d03f      	beq.n	8008420 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80083a0:	229c      	movs	r2, #156	; 0x9c
 80083a2:	2100      	movs	r1, #0
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f007 fec1 	bl	801012c <memset>
    pcb->prio = prio;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	79fa      	ldrb	r2, [r7, #7]
 80083ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80083b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80083c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	22ff      	movs	r2, #255	; 0xff
 80083ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80083d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2206      	movs	r2, #6
 80083dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2206      	movs	r2, #6
 80083e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80083f6:	4b0d      	ldr	r3, [pc, #52]	; (800842c <tcp_alloc+0xf8>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <tcp_alloc+0xfc>)
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800840c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a08      	ldr	r2, [pc, #32]	; (8008434 <tcp_alloc+0x100>)
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a07      	ldr	r2, [pc, #28]	; (8008438 <tcp_alloc+0x104>)
 800841c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008420:	68fb      	ldr	r3, [r7, #12]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20006cfc 	.word	0x20006cfc
 8008430:	2000052e 	.word	0x2000052e
 8008434:	080080ed 	.word	0x080080ed
 8008438:	006ddd00 	.word	0x006ddd00

0800843c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008440:	2040      	movs	r0, #64	; 0x40
 8008442:	f7ff ff77 	bl	8008334 <tcp_alloc>
 8008446:	4603      	mov	r3, r0
}
 8008448:	4618      	mov	r0, r3
 800844a:	bd80      	pop	{r7, pc}

0800844c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008456:	2040      	movs	r0, #64	; 0x40
 8008458:	f7ff ff6c 	bl	8008334 <tcp_alloc>
 800845c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800845e:	68fb      	ldr	r3, [r7, #12]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	611a      	str	r2, [r3, #16]
  }
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00e      	beq.n	80084ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7d1b      	ldrb	r3, [r3, #20]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d106      	bne.n	80084b2 <tcp_recv+0x26>
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <tcp_recv+0x38>)
 80084a6:	f240 72df 	movw	r2, #2015	; 0x7df
 80084aa:	4907      	ldr	r1, [pc, #28]	; (80084c8 <tcp_recv+0x3c>)
 80084ac:	4807      	ldr	r0, [pc, #28]	; (80084cc <tcp_recv+0x40>)
 80084ae:	f007 fe45 	bl	801013c <iprintf>
    pcb->recv = recv;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	08011e70 	.word	0x08011e70
 80084c8:	0801240c 	.word	0x0801240c
 80084cc:	08011eb4 	.word	0x08011eb4

080084d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00e      	beq.n	80084fe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7d1b      	ldrb	r3, [r3, #20]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d106      	bne.n	80084f6 <tcp_sent+0x26>
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <tcp_sent+0x38>)
 80084ea:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80084ee:	4907      	ldr	r1, [pc, #28]	; (800850c <tcp_sent+0x3c>)
 80084f0:	4807      	ldr	r0, [pc, #28]	; (8008510 <tcp_sent+0x40>)
 80084f2:	f007 fe23 	bl	801013c <iprintf>
    pcb->sent = sent;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	08011e70 	.word	0x08011e70
 800850c:	08012434 	.word	0x08012434
 8008510:	08011eb4 	.word	0x08011eb4

08008514 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d106      	bne.n	800853a <tcp_err+0x26>
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <tcp_err+0x38>)
 800852e:	f640 020d 	movw	r2, #2061	; 0x80d
 8008532:	4907      	ldr	r1, [pc, #28]	; (8008550 <tcp_err+0x3c>)
 8008534:	4807      	ldr	r0, [pc, #28]	; (8008554 <tcp_err+0x40>)
 8008536:	f007 fe01 	bl	801013c <iprintf>
    pcb->errf = err;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08011e70 	.word	0x08011e70
 8008550:	0801245c 	.word	0x0801245c
 8008554:	08011eb4 	.word	0x08011eb4

08008558 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <tcp_accept+0x22>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d104      	bne.n	800857a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	619a      	str	r2, [r3, #24]
  }
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d107      	bne.n	80085ac <tcp_poll+0x24>
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <tcp_poll+0x50>)
 800859e:	f640 023d 	movw	r2, #2109	; 0x83d
 80085a2:	490e      	ldr	r1, [pc, #56]	; (80085dc <tcp_poll+0x54>)
 80085a4:	480e      	ldr	r0, [pc, #56]	; (80085e0 <tcp_poll+0x58>)
 80085a6:	f007 fdc9 	bl	801013c <iprintf>
 80085aa:	e011      	b.n	80085d0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	7d1b      	ldrb	r3, [r3, #20]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d106      	bne.n	80085c2 <tcp_poll+0x3a>
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <tcp_poll+0x50>)
 80085b6:	f640 023e 	movw	r2, #2110	; 0x83e
 80085ba:	490a      	ldr	r1, [pc, #40]	; (80085e4 <tcp_poll+0x5c>)
 80085bc:	4808      	ldr	r0, [pc, #32]	; (80085e0 <tcp_poll+0x58>)
 80085be:	f007 fdbd 	bl	801013c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	775a      	strb	r2, [r3, #29]
}
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	08011e70 	.word	0x08011e70
 80085dc:	08012484 	.word	0x08012484
 80085e0:	08011eb4 	.word	0x08011eb4
 80085e4:	0801249c 	.word	0x0801249c

080085e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d107      	bne.n	8008606 <tcp_pcb_purge+0x1e>
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <tcp_pcb_purge+0x94>)
 80085f8:	f640 0251 	movw	r2, #2129	; 0x851
 80085fc:	4920      	ldr	r1, [pc, #128]	; (8008680 <tcp_pcb_purge+0x98>)
 80085fe:	4821      	ldr	r0, [pc, #132]	; (8008684 <tcp_pcb_purge+0x9c>)
 8008600:	f007 fd9c 	bl	801013c <iprintf>
 8008604:	e037      	b.n	8008676 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7d1b      	ldrb	r3, [r3, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d033      	beq.n	8008676 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008612:	2b0a      	cmp	r3, #10
 8008614:	d02f      	beq.n	8008676 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800861a:	2b01      	cmp	r3, #1
 800861c:	d02b      	beq.n	8008676 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe f8ca 	bl	80067c4 <pbuf_free>
      pcb->refused_data = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f986 	bl	8008950 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800864a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fcd5 	bl	8008000 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fcd0 	bl	8008000 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	66da      	str	r2, [r3, #108]	; 0x6c
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	08011e70 	.word	0x08011e70
 8008680:	080124bc 	.word	0x080124bc
 8008684:	08011eb4 	.word	0x08011eb4

08008688 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <tcp_pcb_remove+0x1e>
 8008698:	4b3e      	ldr	r3, [pc, #248]	; (8008794 <tcp_pcb_remove+0x10c>)
 800869a:	f640 0283 	movw	r2, #2179	; 0x883
 800869e:	493e      	ldr	r1, [pc, #248]	; (8008798 <tcp_pcb_remove+0x110>)
 80086a0:	483e      	ldr	r0, [pc, #248]	; (800879c <tcp_pcb_remove+0x114>)
 80086a2:	f007 fd4b 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <tcp_pcb_remove+0x32>
 80086ac:	4b39      	ldr	r3, [pc, #228]	; (8008794 <tcp_pcb_remove+0x10c>)
 80086ae:	f640 0284 	movw	r2, #2180	; 0x884
 80086b2:	493b      	ldr	r1, [pc, #236]	; (80087a0 <tcp_pcb_remove+0x118>)
 80086b4:	4839      	ldr	r0, [pc, #228]	; (800879c <tcp_pcb_remove+0x114>)
 80086b6:	f007 fd41 	bl	801013c <iprintf>

  TCP_RMV(pcblist, pcb);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d105      	bne.n	80086d0 <tcp_pcb_remove+0x48>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e013      	b.n	80086f8 <tcp_pcb_remove+0x70>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e00c      	b.n	80086f2 <tcp_pcb_remove+0x6a>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d104      	bne.n	80086ec <tcp_pcb_remove+0x64>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	e005      	b.n	80086f8 <tcp_pcb_remove+0x70>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ef      	bne.n	80086d8 <tcp_pcb_remove+0x50>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80086fe:	6838      	ldr	r0, [r7, #0]
 8008700:	f7ff ff72 	bl	80085e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	2b0a      	cmp	r3, #10
 800870a:	d013      	beq.n	8008734 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008710:	2b01      	cmp	r3, #1
 8008712:	d00f      	beq.n	8008734 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	8b5b      	ldrh	r3, [r3, #26]
 8008718:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	8b5b      	ldrh	r3, [r3, #26]
 8008724:	f043 0302 	orr.w	r3, r3, #2
 8008728:	b29a      	uxth	r2, r3
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800872e:	6838      	ldr	r0, [r7, #0]
 8008730:	f003 fbc2 	bl	800beb8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	7d1b      	ldrb	r3, [r3, #20]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d020      	beq.n	800877e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d006      	beq.n	8008752 <tcp_pcb_remove+0xca>
 8008744:	4b13      	ldr	r3, [pc, #76]	; (8008794 <tcp_pcb_remove+0x10c>)
 8008746:	f640 0293 	movw	r2, #2195	; 0x893
 800874a:	4916      	ldr	r1, [pc, #88]	; (80087a4 <tcp_pcb_remove+0x11c>)
 800874c:	4813      	ldr	r0, [pc, #76]	; (800879c <tcp_pcb_remove+0x114>)
 800874e:	f007 fcf5 	bl	801013c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008756:	2b00      	cmp	r3, #0
 8008758:	d006      	beq.n	8008768 <tcp_pcb_remove+0xe0>
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <tcp_pcb_remove+0x10c>)
 800875c:	f640 0294 	movw	r2, #2196	; 0x894
 8008760:	4911      	ldr	r1, [pc, #68]	; (80087a8 <tcp_pcb_remove+0x120>)
 8008762:	480e      	ldr	r0, [pc, #56]	; (800879c <tcp_pcb_remove+0x114>)
 8008764:	f007 fcea 	bl	801013c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <tcp_pcb_remove+0xf6>
 8008770:	4b08      	ldr	r3, [pc, #32]	; (8008794 <tcp_pcb_remove+0x10c>)
 8008772:	f640 0296 	movw	r2, #2198	; 0x896
 8008776:	490d      	ldr	r1, [pc, #52]	; (80087ac <tcp_pcb_remove+0x124>)
 8008778:	4808      	ldr	r0, [pc, #32]	; (800879c <tcp_pcb_remove+0x114>)
 800877a:	f007 fcdf 	bl	801013c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	08011e70 	.word	0x08011e70
 8008798:	080124d8 	.word	0x080124d8
 800879c:	08011eb4 	.word	0x08011eb4
 80087a0:	080124f4 	.word	0x080124f4
 80087a4:	08012514 	.word	0x08012514
 80087a8:	0801252c 	.word	0x0801252c
 80087ac:	08012548 	.word	0x08012548

080087b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <tcp_next_iss+0x1c>
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <tcp_next_iss+0x38>)
 80087c0:	f640 02af 	movw	r2, #2223	; 0x8af
 80087c4:	4909      	ldr	r1, [pc, #36]	; (80087ec <tcp_next_iss+0x3c>)
 80087c6:	480a      	ldr	r0, [pc, #40]	; (80087f0 <tcp_next_iss+0x40>)
 80087c8:	f007 fcb8 	bl	801013c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80087cc:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <tcp_next_iss+0x44>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <tcp_next_iss+0x48>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4413      	add	r3, r2
 80087d6:	4a07      	ldr	r2, [pc, #28]	; (80087f4 <tcp_next_iss+0x44>)
 80087d8:	6013      	str	r3, [r2, #0]
  return iss;
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <tcp_next_iss+0x44>)
 80087dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	08011e70 	.word	0x08011e70
 80087ec:	08012560 	.word	0x08012560
 80087f0:	08011eb4 	.word	0x08011eb4
 80087f4:	20000014 	.word	0x20000014
 80087f8:	20006cfc 	.word	0x20006cfc

080087fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <tcp_eff_send_mss_netif+0x22>
 8008810:	4b14      	ldr	r3, [pc, #80]	; (8008864 <tcp_eff_send_mss_netif+0x68>)
 8008812:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008816:	4914      	ldr	r1, [pc, #80]	; (8008868 <tcp_eff_send_mss_netif+0x6c>)
 8008818:	4814      	ldr	r0, [pc, #80]	; (800886c <tcp_eff_send_mss_netif+0x70>)
 800881a:	f007 fc8f 	bl	801013c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008824:	89fb      	ldrh	r3, [r7, #14]
 8008826:	e019      	b.n	800885c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800882c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800882e:	8afb      	ldrh	r3, [r7, #22]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d012      	beq.n	800885a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008834:	2328      	movs	r3, #40	; 0x28
 8008836:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008838:	8afa      	ldrh	r2, [r7, #22]
 800883a:	8abb      	ldrh	r3, [r7, #20]
 800883c:	429a      	cmp	r2, r3
 800883e:	d904      	bls.n	800884a <tcp_eff_send_mss_netif+0x4e>
 8008840:	8afa      	ldrh	r2, [r7, #22]
 8008842:	8abb      	ldrh	r3, [r7, #20]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	b29b      	uxth	r3, r3
 8008848:	e000      	b.n	800884c <tcp_eff_send_mss_netif+0x50>
 800884a:	2300      	movs	r3, #0
 800884c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800884e:	8a7a      	ldrh	r2, [r7, #18]
 8008850:	89fb      	ldrh	r3, [r7, #14]
 8008852:	4293      	cmp	r3, r2
 8008854:	bf28      	it	cs
 8008856:	4613      	movcs	r3, r2
 8008858:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800885a:	89fb      	ldrh	r3, [r7, #14]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	08011e70 	.word	0x08011e70
 8008868:	0801257c 	.word	0x0801257c
 800886c:	08011eb4 	.word	0x08011eb4

08008870 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d119      	bne.n	80088b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008886:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800888a:	4910      	ldr	r1, [pc, #64]	; (80088cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800888c:	4810      	ldr	r0, [pc, #64]	; (80088d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800888e:	f007 fc55 	bl	801013c <iprintf>

  while (pcb != NULL) {
 8008892:	e011      	b.n	80088b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d108      	bne.n	80088b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7fe fd1c 	bl	80072e4 <tcp_abort>
      pcb = next;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e002      	b.n	80088b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1ea      	bne.n	8008894 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	08011e70 	.word	0x08011e70
 80088cc:	080125a4 	.word	0x080125a4
 80088d0:	08011eb4 	.word	0x08011eb4

080088d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d02a      	beq.n	800893a <tcp_netif_ip_addr_changed+0x66>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d026      	beq.n	800893a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <tcp_netif_ip_addr_changed+0x70>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff ffbc 	bl	8008870 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <tcp_netif_ip_addr_changed+0x74>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff ffb6 	bl	8008870 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d017      	beq.n	800893a <tcp_netif_ip_addr_changed+0x66>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d013      	beq.n	800893a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008912:	4b0e      	ldr	r3, [pc, #56]	; (800894c <tcp_netif_ip_addr_changed+0x78>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e00c      	b.n	8008934 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d103      	bne.n	800892e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1ef      	bne.n	800891a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20006cf8 	.word	0x20006cf8
 8008948:	20006d04 	.word	0x20006d04
 800894c:	20006d00 	.word	0x20006d00

08008950 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fb4b 	bl	8008000 <tcp_segs_free>
    pcb->ooseq = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b08d      	sub	sp, #52	; 0x34
 800897c:	af04      	add	r7, sp, #16
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d105      	bne.n	8008994 <tcp_input+0x1c>
 8008988:	4b9b      	ldr	r3, [pc, #620]	; (8008bf8 <tcp_input+0x280>)
 800898a:	2283      	movs	r2, #131	; 0x83
 800898c:	499b      	ldr	r1, [pc, #620]	; (8008bfc <tcp_input+0x284>)
 800898e:	489c      	ldr	r0, [pc, #624]	; (8008c00 <tcp_input+0x288>)
 8008990:	f007 fbd4 	bl	801013c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4a9a      	ldr	r2, [pc, #616]	; (8008c04 <tcp_input+0x28c>)
 800899a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	895b      	ldrh	r3, [r3, #10]
 80089a0:	2b13      	cmp	r3, #19
 80089a2:	f240 83c4 	bls.w	800912e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80089a6:	4b98      	ldr	r3, [pc, #608]	; (8008c08 <tcp_input+0x290>)
 80089a8:	695a      	ldr	r2, [r3, #20]
 80089aa:	4b97      	ldr	r3, [pc, #604]	; (8008c08 <tcp_input+0x290>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f006 fc31 	bl	800f218 <ip4_addr_isbroadcast_u32>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 83ba 	bne.w	8009132 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80089be:	4b92      	ldr	r3, [pc, #584]	; (8008c08 <tcp_input+0x290>)
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80089c6:	2be0      	cmp	r3, #224	; 0xe0
 80089c8:	f000 83b3 	beq.w	8009132 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80089cc:	4b8d      	ldr	r3, [pc, #564]	; (8008c04 <tcp_input+0x28c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	899b      	ldrh	r3, [r3, #12]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fc fbdb 	bl	8005190 <lwip_htons>
 80089da:	4603      	mov	r3, r0
 80089dc:	0b1b      	lsrs	r3, r3, #12
 80089de:	b29b      	uxth	r3, r3
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80089e6:	7cbb      	ldrb	r3, [r7, #18]
 80089e8:	2b13      	cmp	r3, #19
 80089ea:	f240 83a2 	bls.w	8009132 <tcp_input+0x7ba>
 80089ee:	7cbb      	ldrb	r3, [r7, #18]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	891b      	ldrh	r3, [r3, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	f200 839b 	bhi.w	8009132 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80089fc:	7cbb      	ldrb	r3, [r7, #18]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b14      	subs	r3, #20
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	4b81      	ldr	r3, [pc, #516]	; (8008c0c <tcp_input+0x294>)
 8008a06:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008a08:	4b81      	ldr	r3, [pc, #516]	; (8008c10 <tcp_input+0x298>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	895a      	ldrh	r2, [r3, #10]
 8008a12:	7cbb      	ldrb	r3, [r7, #18]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d309      	bcc.n	8008a2e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008a1a:	4b7c      	ldr	r3, [pc, #496]	; (8008c0c <tcp_input+0x294>)
 8008a1c:	881a      	ldrh	r2, [r3, #0]
 8008a1e:	4b7d      	ldr	r3, [pc, #500]	; (8008c14 <tcp_input+0x29c>)
 8008a20:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008a22:	7cbb      	ldrb	r3, [r7, #18]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fd fe46 	bl	80066b8 <pbuf_remove_header>
 8008a2c:	e04e      	b.n	8008acc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <tcp_input+0xca>
 8008a36:	4b70      	ldr	r3, [pc, #448]	; (8008bf8 <tcp_input+0x280>)
 8008a38:	22c2      	movs	r2, #194	; 0xc2
 8008a3a:	4977      	ldr	r1, [pc, #476]	; (8008c18 <tcp_input+0x2a0>)
 8008a3c:	4870      	ldr	r0, [pc, #448]	; (8008c00 <tcp_input+0x288>)
 8008a3e:	f007 fb7d 	bl	801013c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008a42:	2114      	movs	r1, #20
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7fd fe37 	bl	80066b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	895a      	ldrh	r2, [r3, #10]
 8008a4e:	4b71      	ldr	r3, [pc, #452]	; (8008c14 <tcp_input+0x29c>)
 8008a50:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008a52:	4b6e      	ldr	r3, [pc, #440]	; (8008c0c <tcp_input+0x294>)
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	4b6f      	ldr	r3, [pc, #444]	; (8008c14 <tcp_input+0x29c>)
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008a5e:	4b6d      	ldr	r3, [pc, #436]	; (8008c14 <tcp_input+0x29c>)
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fd fe27 	bl	80066b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	895b      	ldrh	r3, [r3, #10]
 8008a70:	8a3a      	ldrh	r2, [r7, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	f200 835f 	bhi.w	8009136 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4a64      	ldr	r2, [pc, #400]	; (8008c10 <tcp_input+0x298>)
 8008a80:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	8a3a      	ldrh	r2, [r7, #16]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fd fe14 	bl	80066b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	891a      	ldrh	r2, [r3, #8]
 8008a94:	8a3b      	ldrh	r3, [r7, #16]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	895b      	ldrh	r3, [r3, #10]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <tcp_input+0x13a>
 8008aa6:	4b54      	ldr	r3, [pc, #336]	; (8008bf8 <tcp_input+0x280>)
 8008aa8:	22df      	movs	r2, #223	; 0xdf
 8008aaa:	495c      	ldr	r1, [pc, #368]	; (8008c1c <tcp_input+0x2a4>)
 8008aac:	4854      	ldr	r0, [pc, #336]	; (8008c00 <tcp_input+0x288>)
 8008aae:	f007 fb45 	bl	801013c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	891a      	ldrh	r2, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	891b      	ldrh	r3, [r3, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d005      	beq.n	8008acc <tcp_input+0x154>
 8008ac0:	4b4d      	ldr	r3, [pc, #308]	; (8008bf8 <tcp_input+0x280>)
 8008ac2:	22e0      	movs	r2, #224	; 0xe0
 8008ac4:	4956      	ldr	r1, [pc, #344]	; (8008c20 <tcp_input+0x2a8>)
 8008ac6:	484e      	ldr	r0, [pc, #312]	; (8008c00 <tcp_input+0x288>)
 8008ac8:	f007 fb38 	bl	801013c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008acc:	4b4d      	ldr	r3, [pc, #308]	; (8008c04 <tcp_input+0x28c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	4b4b      	ldr	r3, [pc, #300]	; (8008c04 <tcp_input+0x28c>)
 8008ad6:	681c      	ldr	r4, [r3, #0]
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f7fc fb59 	bl	8005190 <lwip_htons>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008ae2:	4b48      	ldr	r3, [pc, #288]	; (8008c04 <tcp_input+0x28c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	4b46      	ldr	r3, [pc, #280]	; (8008c04 <tcp_input+0x28c>)
 8008aec:	681c      	ldr	r4, [r3, #0]
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fc fb4e 	bl	8005190 <lwip_htons>
 8008af4:	4603      	mov	r3, r0
 8008af6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008af8:	4b42      	ldr	r3, [pc, #264]	; (8008c04 <tcp_input+0x28c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <tcp_input+0x28c>)
 8008b00:	681c      	ldr	r4, [r3, #0]
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fc fb59 	bl	80051ba <lwip_htonl>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	4a45      	ldr	r2, [pc, #276]	; (8008c24 <tcp_input+0x2ac>)
 8008b10:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b12:	4b3c      	ldr	r3, [pc, #240]	; (8008c04 <tcp_input+0x28c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	4b3a      	ldr	r3, [pc, #232]	; (8008c04 <tcp_input+0x28c>)
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7fc fb4c 	bl	80051ba <lwip_htonl>
 8008b22:	4603      	mov	r3, r0
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <tcp_input+0x2b0>)
 8008b2a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008b2c:	4b35      	ldr	r3, [pc, #212]	; (8008c04 <tcp_input+0x28c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	89db      	ldrh	r3, [r3, #14]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	4b33      	ldr	r3, [pc, #204]	; (8008c04 <tcp_input+0x28c>)
 8008b36:	681c      	ldr	r4, [r3, #0]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fc fb29 	bl	8005190 <lwip_htons>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008b42:	4b30      	ldr	r3, [pc, #192]	; (8008c04 <tcp_input+0x28c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	899b      	ldrh	r3, [r3, #12]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fc fb20 	bl	8005190 <lwip_htons>
 8008b50:	4603      	mov	r3, r0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4b34      	ldr	r3, [pc, #208]	; (8008c2c <tcp_input+0x2b4>)
 8008b5c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	891a      	ldrh	r2, [r3, #8]
 8008b62:	4b33      	ldr	r3, [pc, #204]	; (8008c30 <tcp_input+0x2b8>)
 8008b64:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008b66:	4b31      	ldr	r3, [pc, #196]	; (8008c2c <tcp_input+0x2b4>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <tcp_input+0x214>
    tcplen++;
 8008b72:	4b2f      	ldr	r3, [pc, #188]	; (8008c30 <tcp_input+0x2b8>)
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	4b2d      	ldr	r3, [pc, #180]	; (8008c30 <tcp_input+0x2b8>)
 8008b7c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	891a      	ldrh	r2, [r3, #8]
 8008b82:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <tcp_input+0x2b8>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	f200 82d7 	bhi.w	800913a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b90:	4b28      	ldr	r3, [pc, #160]	; (8008c34 <tcp_input+0x2bc>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	e09d      	b.n	8008cd4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	7d1b      	ldrb	r3, [r3, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <tcp_input+0x234>
 8008ba0:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <tcp_input+0x280>)
 8008ba2:	22fb      	movs	r2, #251	; 0xfb
 8008ba4:	4924      	ldr	r1, [pc, #144]	; (8008c38 <tcp_input+0x2c0>)
 8008ba6:	4816      	ldr	r0, [pc, #88]	; (8008c00 <tcp_input+0x288>)
 8008ba8:	f007 fac8 	bl	801013c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	7d1b      	ldrb	r3, [r3, #20]
 8008bb0:	2b0a      	cmp	r3, #10
 8008bb2:	d105      	bne.n	8008bc0 <tcp_input+0x248>
 8008bb4:	4b10      	ldr	r3, [pc, #64]	; (8008bf8 <tcp_input+0x280>)
 8008bb6:	22fc      	movs	r2, #252	; 0xfc
 8008bb8:	4920      	ldr	r1, [pc, #128]	; (8008c3c <tcp_input+0x2c4>)
 8008bba:	4811      	ldr	r0, [pc, #68]	; (8008c00 <tcp_input+0x288>)
 8008bbc:	f007 fabe 	bl	801013c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	7d1b      	ldrb	r3, [r3, #20]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d105      	bne.n	8008bd4 <tcp_input+0x25c>
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <tcp_input+0x280>)
 8008bca:	22fd      	movs	r2, #253	; 0xfd
 8008bcc:	491c      	ldr	r1, [pc, #112]	; (8008c40 <tcp_input+0x2c8>)
 8008bce:	480c      	ldr	r0, [pc, #48]	; (8008c00 <tcp_input+0x288>)
 8008bd0:	f007 fab4 	bl	801013c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	7a1b      	ldrb	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d033      	beq.n	8008c44 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	7a1a      	ldrb	r2, [r3, #8]
 8008be0:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <tcp_input+0x290>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008be8:	3301      	adds	r3, #1
 8008bea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d029      	beq.n	8008c44 <tcp_input+0x2cc>
      prev = pcb;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	61bb      	str	r3, [r7, #24]
      continue;
 8008bf4:	e06b      	b.n	8008cce <tcp_input+0x356>
 8008bf6:	bf00      	nop
 8008bf8:	080125d8 	.word	0x080125d8
 8008bfc:	0801260c 	.word	0x0801260c
 8008c00:	08012624 	.word	0x08012624
 8008c04:	20000540 	.word	0x20000540
 8008c08:	200037b4 	.word	0x200037b4
 8008c0c:	20000544 	.word	0x20000544
 8008c10:	20000548 	.word	0x20000548
 8008c14:	20000546 	.word	0x20000546
 8008c18:	0801264c 	.word	0x0801264c
 8008c1c:	0801265c 	.word	0x0801265c
 8008c20:	08012668 	.word	0x08012668
 8008c24:	20000550 	.word	0x20000550
 8008c28:	20000554 	.word	0x20000554
 8008c2c:	2000055c 	.word	0x2000055c
 8008c30:	2000055a 	.word	0x2000055a
 8008c34:	20006cf8 	.word	0x20006cf8
 8008c38:	08012688 	.word	0x08012688
 8008c3c:	080126b0 	.word	0x080126b0
 8008c40:	080126dc 	.word	0x080126dc
    }

    if (pcb->remote_port == tcphdr->src &&
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	8b1a      	ldrh	r2, [r3, #24]
 8008c48:	4b94      	ldr	r3, [pc, #592]	; (8008e9c <tcp_input+0x524>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d13a      	bne.n	8008cca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	8ada      	ldrh	r2, [r3, #22]
 8008c58:	4b90      	ldr	r3, [pc, #576]	; (8008e9c <tcp_input+0x524>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d132      	bne.n	8008cca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b8d      	ldr	r3, [pc, #564]	; (8008ea0 <tcp_input+0x528>)
 8008c6a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d12c      	bne.n	8008cca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4b8a      	ldr	r3, [pc, #552]	; (8008ea0 <tcp_input+0x528>)
 8008c76:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d126      	bne.n	8008cca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d106      	bne.n	8008c94 <tcp_input+0x31c>
 8008c86:	4b87      	ldr	r3, [pc, #540]	; (8008ea4 <tcp_input+0x52c>)
 8008c88:	f240 120d 	movw	r2, #269	; 0x10d
 8008c8c:	4986      	ldr	r1, [pc, #536]	; (8008ea8 <tcp_input+0x530>)
 8008c8e:	4887      	ldr	r0, [pc, #540]	; (8008eac <tcp_input+0x534>)
 8008c90:	f007 fa54 	bl	801013c <iprintf>
      if (prev != NULL) {
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <tcp_input+0x338>
        prev->next = pcb->next;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008ca2:	4b83      	ldr	r3, [pc, #524]	; (8008eb0 <tcp_input+0x538>)
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008caa:	4a81      	ldr	r2, [pc, #516]	; (8008eb0 <tcp_input+0x538>)
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d111      	bne.n	8008cde <tcp_input+0x366>
 8008cba:	4b7a      	ldr	r3, [pc, #488]	; (8008ea4 <tcp_input+0x52c>)
 8008cbc:	f240 1215 	movw	r2, #277	; 0x115
 8008cc0:	497c      	ldr	r1, [pc, #496]	; (8008eb4 <tcp_input+0x53c>)
 8008cc2:	487a      	ldr	r0, [pc, #488]	; (8008eac <tcp_input+0x534>)
 8008cc4:	f007 fa3a 	bl	801013c <iprintf>
      break;
 8008cc8:	e009      	b.n	8008cde <tcp_input+0x366>
    }
    prev = pcb;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f47f af5e 	bne.w	8008b98 <tcp_input+0x220>
 8008cdc:	e000      	b.n	8008ce0 <tcp_input+0x368>
      break;
 8008cde:	bf00      	nop
  }

  if (pcb == NULL) {
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f040 8095 	bne.w	8008e12 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ce8:	4b73      	ldr	r3, [pc, #460]	; (8008eb8 <tcp_input+0x540>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e03f      	b.n	8008d70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	7d1b      	ldrb	r3, [r3, #20]
 8008cf4:	2b0a      	cmp	r3, #10
 8008cf6:	d006      	beq.n	8008d06 <tcp_input+0x38e>
 8008cf8:	4b6a      	ldr	r3, [pc, #424]	; (8008ea4 <tcp_input+0x52c>)
 8008cfa:	f240 121f 	movw	r2, #287	; 0x11f
 8008cfe:	496f      	ldr	r1, [pc, #444]	; (8008ebc <tcp_input+0x544>)
 8008d00:	486a      	ldr	r0, [pc, #424]	; (8008eac <tcp_input+0x534>)
 8008d02:	f007 fa1b 	bl	801013c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	7a1b      	ldrb	r3, [r3, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	7a1a      	ldrb	r2, [r3, #8]
 8008d12:	4b63      	ldr	r3, [pc, #396]	; (8008ea0 <tcp_input+0x528>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d122      	bne.n	8008d68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	8b1a      	ldrh	r2, [r3, #24]
 8008d26:	4b5d      	ldr	r3, [pc, #372]	; (8008e9c <tcp_input+0x524>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d11b      	bne.n	8008d6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	8ada      	ldrh	r2, [r3, #22]
 8008d36:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <tcp_input+0x524>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	885b      	ldrh	r3, [r3, #2]
 8008d3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d113      	bne.n	8008d6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	4b56      	ldr	r3, [pc, #344]	; (8008ea0 <tcp_input+0x528>)
 8008d48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d10d      	bne.n	8008d6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4b53      	ldr	r3, [pc, #332]	; (8008ea0 <tcp_input+0x528>)
 8008d54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d107      	bne.n	8008d6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008d5a:	69f8      	ldr	r0, [r7, #28]
 8008d5c:	f000 fb52 	bl	8009404 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7fd fd2f 	bl	80067c4 <pbuf_free>
        return;
 8008d66:	e1ee      	b.n	8009146 <tcp_input+0x7ce>
        continue;
 8008d68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1bc      	bne.n	8008cf0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d7a:	4b51      	ldr	r3, [pc, #324]	; (8008ec0 <tcp_input+0x548>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e02a      	b.n	8008dd8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	7a1b      	ldrb	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	7a1a      	ldrb	r2, [r3, #8]
 8008d8e:	4b44      	ldr	r3, [pc, #272]	; (8008ea0 <tcp_input+0x528>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d96:	3301      	adds	r3, #1
 8008d98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d002      	beq.n	8008da4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	61bb      	str	r3, [r7, #24]
        continue;
 8008da2:	e016      	b.n	8008dd2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	8ada      	ldrh	r2, [r3, #22]
 8008da8:	4b3c      	ldr	r3, [pc, #240]	; (8008e9c <tcp_input+0x524>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	885b      	ldrh	r3, [r3, #2]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d10c      	bne.n	8008dce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b39      	ldr	r3, [pc, #228]	; (8008ea0 <tcp_input+0x528>)
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d00f      	beq.n	8008de0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00d      	beq.n	8008de2 <tcp_input+0x46a>
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1d1      	bne.n	8008d82 <tcp_input+0x40a>
 8008dde:	e000      	b.n	8008de2 <tcp_input+0x46a>
            break;
 8008de0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d014      	beq.n	8008e12 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008df6:	4b32      	ldr	r3, [pc, #200]	; (8008ec0 <tcp_input+0x548>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008dfe:	4a30      	ldr	r2, [pc, #192]	; (8008ec0 <tcp_input+0x548>)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e04:	6978      	ldr	r0, [r7, #20]
 8008e06:	f000 f9ff 	bl	8009208 <tcp_listen_input>
      }
      pbuf_free(p);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fd fcda 	bl	80067c4 <pbuf_free>
      return;
 8008e10:	e199      	b.n	8009146 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8160 	beq.w	80090da <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <tcp_input+0x54c>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	891a      	ldrh	r2, [r3, #8]
 8008e24:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <tcp_input+0x54c>)
 8008e26:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008e28:	4a26      	ldr	r2, [pc, #152]	; (8008ec4 <tcp_input+0x54c>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008e2e:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <tcp_input+0x524>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a24      	ldr	r2, [pc, #144]	; (8008ec4 <tcp_input+0x54c>)
 8008e34:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <tcp_input+0x550>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008e3c:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <tcp_input+0x554>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <tcp_input+0x558>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008e48:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <tcp_input+0x55c>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0308 	and.w	r3, r3, #8
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d006      	beq.n	8008e62 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7b5b      	ldrb	r3, [r3, #13]
 8008e58:	f043 0301 	orr.w	r3, r3, #1
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d038      	beq.n	8008edc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008e6a:	69f8      	ldr	r0, [r7, #28]
 8008e6c:	f7ff f84c 	bl	8007f08 <tcp_process_refused_data>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f113 0f0d 	cmn.w	r3, #13
 8008e76:	d007      	beq.n	8008e88 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d02d      	beq.n	8008edc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008e80:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <tcp_input+0x560>)
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d029      	beq.n	8008edc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 8104 	bne.w	800909a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008e92:	69f8      	ldr	r0, [r7, #28]
 8008e94:	f003 fe26 	bl	800cae4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008e98:	e0ff      	b.n	800909a <tcp_input+0x722>
 8008e9a:	bf00      	nop
 8008e9c:	20000540 	.word	0x20000540
 8008ea0:	200037b4 	.word	0x200037b4
 8008ea4:	080125d8 	.word	0x080125d8
 8008ea8:	08012704 	.word	0x08012704
 8008eac:	08012624 	.word	0x08012624
 8008eb0:	20006cf8 	.word	0x20006cf8
 8008eb4:	08012730 	.word	0x08012730
 8008eb8:	20006d08 	.word	0x20006d08
 8008ebc:	0801275c 	.word	0x0801275c
 8008ec0:	20006d00 	.word	0x20006d00
 8008ec4:	20000530 	.word	0x20000530
 8008ec8:	20000560 	.word	0x20000560
 8008ecc:	2000055d 	.word	0x2000055d
 8008ed0:	20000558 	.word	0x20000558
 8008ed4:	2000055c 	.word	0x2000055c
 8008ed8:	2000055a 	.word	0x2000055a
      }
    }
    tcp_input_pcb = pcb;
 8008edc:	4a9b      	ldr	r2, [pc, #620]	; (800914c <tcp_input+0x7d4>)
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008ee2:	69f8      	ldr	r0, [r7, #28]
 8008ee4:	f000 fb0a 	bl	80094fc <tcp_process>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008eec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ef0:	f113 0f0d 	cmn.w	r3, #13
 8008ef4:	f000 80d3 	beq.w	800909e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008ef8:	4b95      	ldr	r3, [pc, #596]	; (8009150 <tcp_input+0x7d8>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d015      	beq.n	8008f30 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d008      	beq.n	8008f20 <tcp_input+0x5a8>
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	6912      	ldr	r2, [r2, #16]
 8008f18:	f06f 010d 	mvn.w	r1, #13
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	488c      	ldr	r0, [pc, #560]	; (8009154 <tcp_input+0x7dc>)
 8008f24:	f7ff fbb0 	bl	8008688 <tcp_pcb_remove>
        tcp_free(pcb);
 8008f28:	69f8      	ldr	r0, [r7, #28]
 8008f2a:	f7fd fefb 	bl	8006d24 <tcp_free>
 8008f2e:	e0c1      	b.n	80090b4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008f34:	4b88      	ldr	r3, [pc, #544]	; (8009158 <tcp_input+0x7e0>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01d      	beq.n	8008f78 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008f3c:	4b86      	ldr	r3, [pc, #536]	; (8009158 <tcp_input+0x7e0>)
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <tcp_input+0x5ea>
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	6910      	ldr	r0, [r2, #16]
 8008f56:	89fa      	ldrh	r2, [r7, #14]
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	4798      	blx	r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	74fb      	strb	r3, [r7, #19]
 8008f60:	e001      	b.n	8008f66 <tcp_input+0x5ee>
 8008f62:	2300      	movs	r3, #0
 8008f64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f6a:	f113 0f0d 	cmn.w	r3, #13
 8008f6e:	f000 8098 	beq.w	80090a2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008f72:	4b79      	ldr	r3, [pc, #484]	; (8009158 <tcp_input+0x7e0>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008f78:	69f8      	ldr	r0, [r7, #28]
 8008f7a:	f000 f905 	bl	8009188 <tcp_input_delayed_close>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f040 8090 	bne.w	80090a6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008f86:	4b75      	ldr	r3, [pc, #468]	; (800915c <tcp_input+0x7e4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d041      	beq.n	8009012 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d006      	beq.n	8008fa4 <tcp_input+0x62c>
 8008f96:	4b72      	ldr	r3, [pc, #456]	; (8009160 <tcp_input+0x7e8>)
 8008f98:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008f9c:	4971      	ldr	r1, [pc, #452]	; (8009164 <tcp_input+0x7ec>)
 8008f9e:	4872      	ldr	r0, [pc, #456]	; (8009168 <tcp_input+0x7f0>)
 8008fa0:	f007 f8cc 	bl	801013c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	8b5b      	ldrh	r3, [r3, #26]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008fb0:	4b6a      	ldr	r3, [pc, #424]	; (800915c <tcp_input+0x7e4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd fc05 	bl	80067c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008fba:	69f8      	ldr	r0, [r7, #28]
 8008fbc:	f7fe f992 	bl	80072e4 <tcp_abort>
            goto aborted;
 8008fc0:	e078      	b.n	80090b4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00c      	beq.n	8008fe6 <tcp_input+0x66e>
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	6918      	ldr	r0, [r3, #16]
 8008fd6:	4b61      	ldr	r3, [pc, #388]	; (800915c <tcp_input+0x7e4>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	69f9      	ldr	r1, [r7, #28]
 8008fde:	47a0      	blx	r4
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	74fb      	strb	r3, [r7, #19]
 8008fe4:	e008      	b.n	8008ff8 <tcp_input+0x680>
 8008fe6:	4b5d      	ldr	r3, [pc, #372]	; (800915c <tcp_input+0x7e4>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	2300      	movs	r3, #0
 8008fec:	69f9      	ldr	r1, [r7, #28]
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f7ff f87c 	bl	80080ec <tcp_recv_null>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008ff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ffc:	f113 0f0d 	cmn.w	r3, #13
 8009000:	d053      	beq.n	80090aa <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009002:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800900a:	4b54      	ldr	r3, [pc, #336]	; (800915c <tcp_input+0x7e4>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009012:	4b4f      	ldr	r3, [pc, #316]	; (8009150 <tcp_input+0x7d8>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d030      	beq.n	8009080 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902a:	7b5a      	ldrb	r2, [r3, #13]
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009030:	f042 0220 	orr.w	r2, r2, #32
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	735a      	strb	r2, [r3, #13]
 8009038:	e022      	b.n	8009080 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009042:	d005      	beq.n	8009050 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009048:	3301      	adds	r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <tcp_input+0x6fa>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	6918      	ldr	r0, [r3, #16]
 8009064:	2300      	movs	r3, #0
 8009066:	2200      	movs	r2, #0
 8009068:	69f9      	ldr	r1, [r7, #28]
 800906a:	47a0      	blx	r4
 800906c:	4603      	mov	r3, r0
 800906e:	74fb      	strb	r3, [r7, #19]
 8009070:	e001      	b.n	8009076 <tcp_input+0x6fe>
 8009072:	2300      	movs	r3, #0
 8009074:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800907a:	f113 0f0d 	cmn.w	r3, #13
 800907e:	d016      	beq.n	80090ae <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009080:	4b32      	ldr	r3, [pc, #200]	; (800914c <tcp_input+0x7d4>)
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009086:	69f8      	ldr	r0, [r7, #28]
 8009088:	f000 f87e 	bl	8009188 <tcp_input_delayed_close>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10f      	bne.n	80090b2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009092:	69f8      	ldr	r0, [r7, #28]
 8009094:	f002 ff10 	bl	800beb8 <tcp_output>
 8009098:	e00c      	b.n	80090b4 <tcp_input+0x73c>
        goto aborted;
 800909a:	bf00      	nop
 800909c:	e00a      	b.n	80090b4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800909e:	bf00      	nop
 80090a0:	e008      	b.n	80090b4 <tcp_input+0x73c>
              goto aborted;
 80090a2:	bf00      	nop
 80090a4:	e006      	b.n	80090b4 <tcp_input+0x73c>
          goto aborted;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <tcp_input+0x73c>
            goto aborted;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <tcp_input+0x73c>
              goto aborted;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <tcp_input+0x73c>
          goto aborted;
 80090b2:	bf00      	nop
    tcp_input_pcb = NULL;
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <tcp_input+0x7d4>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80090ba:	4b28      	ldr	r3, [pc, #160]	; (800915c <tcp_input+0x7e4>)
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80090c0:	4b2a      	ldr	r3, [pc, #168]	; (800916c <tcp_input+0x7f4>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d03d      	beq.n	8009144 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <tcp_input+0x7f4>)
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fd fb79 	bl	80067c4 <pbuf_free>
      inseg.p = NULL;
 80090d2:	4b26      	ldr	r3, [pc, #152]	; (800916c <tcp_input+0x7f4>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80090d8:	e034      	b.n	8009144 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80090da:	4b25      	ldr	r3, [pc, #148]	; (8009170 <tcp_input+0x7f8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	899b      	ldrh	r3, [r3, #12]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fc f854 	bl	8005190 <lwip_htons>
 80090e8:	4603      	mov	r3, r0
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d118      	bne.n	8009126 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090f4:	4b1f      	ldr	r3, [pc, #124]	; (8009174 <tcp_input+0x7fc>)
 80090f6:	6819      	ldr	r1, [r3, #0]
 80090f8:	4b1f      	ldr	r3, [pc, #124]	; (8009178 <tcp_input+0x800>)
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b1f      	ldr	r3, [pc, #124]	; (800917c <tcp_input+0x804>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <tcp_input+0x7f8>)
 8009106:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009108:	885b      	ldrh	r3, [r3, #2]
 800910a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800910c:	4a18      	ldr	r2, [pc, #96]	; (8009170 <tcp_input+0x7f8>)
 800910e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009110:	8812      	ldrh	r2, [r2, #0]
 8009112:	b292      	uxth	r2, r2
 8009114:	9202      	str	r2, [sp, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	4b19      	ldr	r3, [pc, #100]	; (8009180 <tcp_input+0x808>)
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	4b19      	ldr	r3, [pc, #100]	; (8009184 <tcp_input+0x80c>)
 800911e:	4602      	mov	r2, r0
 8009120:	2000      	movs	r0, #0
 8009122:	f003 fc8d 	bl	800ca40 <tcp_rst>
    pbuf_free(p);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fd fb4c 	bl	80067c4 <pbuf_free>
  return;
 800912c:	e00a      	b.n	8009144 <tcp_input+0x7cc>
    goto dropped;
 800912e:	bf00      	nop
 8009130:	e004      	b.n	800913c <tcp_input+0x7c4>
dropped:
 8009132:	bf00      	nop
 8009134:	e002      	b.n	800913c <tcp_input+0x7c4>
      goto dropped;
 8009136:	bf00      	nop
 8009138:	e000      	b.n	800913c <tcp_input+0x7c4>
      goto dropped;
 800913a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7fd fb41 	bl	80067c4 <pbuf_free>
 8009142:	e000      	b.n	8009146 <tcp_input+0x7ce>
  return;
 8009144:	bf00      	nop
}
 8009146:	3724      	adds	r7, #36	; 0x24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}
 800914c:	20006d0c 	.word	0x20006d0c
 8009150:	2000055d 	.word	0x2000055d
 8009154:	20006cf8 	.word	0x20006cf8
 8009158:	20000558 	.word	0x20000558
 800915c:	20000560 	.word	0x20000560
 8009160:	080125d8 	.word	0x080125d8
 8009164:	0801278c 	.word	0x0801278c
 8009168:	08012624 	.word	0x08012624
 800916c:	20000530 	.word	0x20000530
 8009170:	20000540 	.word	0x20000540
 8009174:	20000554 	.word	0x20000554
 8009178:	2000055a 	.word	0x2000055a
 800917c:	20000550 	.word	0x20000550
 8009180:	200037c4 	.word	0x200037c4
 8009184:	200037c8 	.word	0x200037c8

08009188 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <tcp_input_delayed_close+0x1c>
 8009196:	4b17      	ldr	r3, [pc, #92]	; (80091f4 <tcp_input_delayed_close+0x6c>)
 8009198:	f240 225a 	movw	r2, #602	; 0x25a
 800919c:	4916      	ldr	r1, [pc, #88]	; (80091f8 <tcp_input_delayed_close+0x70>)
 800919e:	4817      	ldr	r0, [pc, #92]	; (80091fc <tcp_input_delayed_close+0x74>)
 80091a0:	f006 ffcc 	bl	801013c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80091a4:	4b16      	ldr	r3, [pc, #88]	; (8009200 <tcp_input_delayed_close+0x78>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8b5b      	ldrh	r3, [r3, #26]
 80091b4:	f003 0310 	and.w	r3, r3, #16
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10d      	bne.n	80091d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d008      	beq.n	80091d8 <tcp_input_delayed_close+0x50>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6912      	ldr	r2, [r2, #16]
 80091d0:	f06f 010e 	mvn.w	r1, #14
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	480a      	ldr	r0, [pc, #40]	; (8009204 <tcp_input_delayed_close+0x7c>)
 80091dc:	f7ff fa54 	bl	8008688 <tcp_pcb_remove>
    tcp_free(pcb);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7fd fd9f 	bl	8006d24 <tcp_free>
    return 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	080125d8 	.word	0x080125d8
 80091f8:	080127a8 	.word	0x080127a8
 80091fc:	08012624 	.word	0x08012624
 8009200:	2000055d 	.word	0x2000055d
 8009204:	20006cf8 	.word	0x20006cf8

08009208 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b08b      	sub	sp, #44	; 0x2c
 800920c:	af04      	add	r7, sp, #16
 800920e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009210:	4b6f      	ldr	r3, [pc, #444]	; (80093d0 <tcp_listen_input+0x1c8>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	f040 80d3 	bne.w	80093c4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <tcp_listen_input+0x2a>
 8009224:	4b6b      	ldr	r3, [pc, #428]	; (80093d4 <tcp_listen_input+0x1cc>)
 8009226:	f240 2281 	movw	r2, #641	; 0x281
 800922a:	496b      	ldr	r1, [pc, #428]	; (80093d8 <tcp_listen_input+0x1d0>)
 800922c:	486b      	ldr	r0, [pc, #428]	; (80093dc <tcp_listen_input+0x1d4>)
 800922e:	f006 ff85 	bl	801013c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009232:	4b67      	ldr	r3, [pc, #412]	; (80093d0 <tcp_listen_input+0x1c8>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	d019      	beq.n	8009272 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800923e:	4b68      	ldr	r3, [pc, #416]	; (80093e0 <tcp_listen_input+0x1d8>)
 8009240:	6819      	ldr	r1, [r3, #0]
 8009242:	4b68      	ldr	r3, [pc, #416]	; (80093e4 <tcp_listen_input+0x1dc>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	4b67      	ldr	r3, [pc, #412]	; (80093e8 <tcp_listen_input+0x1e0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800924e:	4b67      	ldr	r3, [pc, #412]	; (80093ec <tcp_listen_input+0x1e4>)
 8009250:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009256:	4a65      	ldr	r2, [pc, #404]	; (80093ec <tcp_listen_input+0x1e4>)
 8009258:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800925a:	8812      	ldrh	r2, [r2, #0]
 800925c:	b292      	uxth	r2, r2
 800925e:	9202      	str	r2, [sp, #8]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	4b63      	ldr	r3, [pc, #396]	; (80093f0 <tcp_listen_input+0x1e8>)
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	4b63      	ldr	r3, [pc, #396]	; (80093f4 <tcp_listen_input+0x1ec>)
 8009268:	4602      	mov	r2, r0
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f003 fbe8 	bl	800ca40 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009270:	e0aa      	b.n	80093c8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8009272:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <tcp_listen_input+0x1c8>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a4 	beq.w	80093c8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7d5b      	ldrb	r3, [r3, #21]
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff f855 	bl	8008334 <tcp_alloc>
 800928a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d111      	bne.n	80092b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <tcp_listen_input+0xa8>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	6910      	ldr	r0, [r2, #16]
 80092a2:	f04f 32ff 	mov.w	r2, #4294967295
 80092a6:	2100      	movs	r1, #0
 80092a8:	4798      	blx	r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	73bb      	strb	r3, [r7, #14]
      return;
 80092ae:	e08c      	b.n	80093ca <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092b0:	23f0      	movs	r3, #240	; 0xf0
 80092b2:	73bb      	strb	r3, [r7, #14]
      return;
 80092b4:	e089      	b.n	80093ca <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80092b6:	4b50      	ldr	r3, [pc, #320]	; (80093f8 <tcp_listen_input+0x1f0>)
 80092b8:	695a      	ldr	r2, [r3, #20]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80092be:	4b4e      	ldr	r3, [pc, #312]	; (80093f8 <tcp_listen_input+0x1f0>)
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8ada      	ldrh	r2, [r3, #22]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80092ce:	4b47      	ldr	r3, [pc, #284]	; (80093ec <tcp_listen_input+0x1e4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2203      	movs	r2, #3
 80092de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80092e0:	4b41      	ldr	r3, [pc, #260]	; (80093e8 <tcp_listen_input+0x1e0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80092f2:	6978      	ldr	r0, [r7, #20]
 80092f4:	f7ff fa5c 	bl	80087b0 <tcp_next_iss>
 80092f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009312:	4b35      	ldr	r3, [pc, #212]	; (80093e8 <tcp_listen_input+0x1e0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1e5a      	subs	r2, r3, #1
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	f003 030c 	and.w	r3, r3, #12
 8009332:	b2da      	uxtb	r2, r3
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7a1a      	ldrb	r2, [r3, #8]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009340:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <tcp_listen_input+0x1f4>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	4a2c      	ldr	r2, [pc, #176]	; (80093fc <tcp_listen_input+0x1f4>)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	f003 fd39 	bl	800cdc4 <tcp_timer_needed>
 8009352:	4b2b      	ldr	r3, [pc, #172]	; (8009400 <tcp_listen_input+0x1f8>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009358:	6978      	ldr	r0, [r7, #20]
 800935a:	f001 fd8f 	bl	800ae7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <tcp_listen_input+0x1e4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	89db      	ldrh	r3, [r3, #14]
 8009364:	b29a      	uxth	r2, r3
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f005 fcb5 	bl	800ecf0 <ip4_route>
 8009386:	4601      	mov	r1, r0
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	3304      	adds	r3, #4
 800938c:	461a      	mov	r2, r3
 800938e:	4620      	mov	r0, r4
 8009390:	f7ff fa34 	bl	80087fc <tcp_eff_send_mss_netif>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800939c:	2112      	movs	r1, #18
 800939e:	6978      	ldr	r0, [r7, #20]
 80093a0:	f002 fc9c 	bl	800bcdc <tcp_enqueue_flags>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80093a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80093b0:	2100      	movs	r1, #0
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f7fd fed8 	bl	8007168 <tcp_abandon>
      return;
 80093b8:	e007      	b.n	80093ca <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f002 fd7c 	bl	800beb8 <tcp_output>
  return;
 80093c0:	bf00      	nop
 80093c2:	e001      	b.n	80093c8 <tcp_listen_input+0x1c0>
    return;
 80093c4:	bf00      	nop
 80093c6:	e000      	b.n	80093ca <tcp_listen_input+0x1c2>
  return;
 80093c8:	bf00      	nop
}
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd90      	pop	{r4, r7, pc}
 80093d0:	2000055c 	.word	0x2000055c
 80093d4:	080125d8 	.word	0x080125d8
 80093d8:	080127d0 	.word	0x080127d0
 80093dc:	08012624 	.word	0x08012624
 80093e0:	20000554 	.word	0x20000554
 80093e4:	2000055a 	.word	0x2000055a
 80093e8:	20000550 	.word	0x20000550
 80093ec:	20000540 	.word	0x20000540
 80093f0:	200037c4 	.word	0x200037c4
 80093f4:	200037c8 	.word	0x200037c8
 80093f8:	200037b4 	.word	0x200037b4
 80093fc:	20006cf8 	.word	0x20006cf8
 8009400:	20006cf4 	.word	0x20006cf4

08009404 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af04      	add	r7, sp, #16
 800940a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800940c:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <tcp_timewait_input+0xcc>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d154      	bne.n	80094c2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <tcp_timewait_input+0x28>
 800941e:	4b2d      	ldr	r3, [pc, #180]	; (80094d4 <tcp_timewait_input+0xd0>)
 8009420:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009424:	492c      	ldr	r1, [pc, #176]	; (80094d8 <tcp_timewait_input+0xd4>)
 8009426:	482d      	ldr	r0, [pc, #180]	; (80094dc <tcp_timewait_input+0xd8>)
 8009428:	f006 fe88 	bl	801013c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800942c:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <tcp_timewait_input+0xcc>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d02a      	beq.n	800948e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009438:	4b29      	ldr	r3, [pc, #164]	; (80094e0 <tcp_timewait_input+0xdc>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	db2d      	blt.n	80094a2 <tcp_timewait_input+0x9e>
 8009446:	4b26      	ldr	r3, [pc, #152]	; (80094e0 <tcp_timewait_input+0xdc>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009452:	440b      	add	r3, r1
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	dc23      	bgt.n	80094a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800945a:	4b22      	ldr	r3, [pc, #136]	; (80094e4 <tcp_timewait_input+0xe0>)
 800945c:	6819      	ldr	r1, [r3, #0]
 800945e:	4b22      	ldr	r3, [pc, #136]	; (80094e8 <tcp_timewait_input+0xe4>)
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	4b1e      	ldr	r3, [pc, #120]	; (80094e0 <tcp_timewait_input+0xdc>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800946a:	4b20      	ldr	r3, [pc, #128]	; (80094ec <tcp_timewait_input+0xe8>)
 800946c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800946e:	885b      	ldrh	r3, [r3, #2]
 8009470:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <tcp_timewait_input+0xe8>)
 8009474:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	b292      	uxth	r2, r2
 800947a:	9202      	str	r2, [sp, #8]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	4b1c      	ldr	r3, [pc, #112]	; (80094f0 <tcp_timewait_input+0xec>)
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <tcp_timewait_input+0xf0>)
 8009484:	4602      	mov	r2, r0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f003 fada 	bl	800ca40 <tcp_rst>
      return;
 800948c:	e01c      	b.n	80094c8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800948e:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <tcp_timewait_input+0xcc>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800949a:	4b17      	ldr	r3, [pc, #92]	; (80094f8 <tcp_timewait_input+0xf4>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80094a2:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <tcp_timewait_input+0xe4>)
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00d      	beq.n	80094c6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8b5b      	ldrh	r3, [r3, #26]
 80094ae:	f043 0302 	orr.w	r3, r3, #2
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f002 fcfd 	bl	800beb8 <tcp_output>
  }
  return;
 80094be:	bf00      	nop
 80094c0:	e001      	b.n	80094c6 <tcp_timewait_input+0xc2>
    return;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <tcp_timewait_input+0xc4>
  return;
 80094c6:	bf00      	nop
}
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	2000055c 	.word	0x2000055c
 80094d4:	080125d8 	.word	0x080125d8
 80094d8:	080127f0 	.word	0x080127f0
 80094dc:	08012624 	.word	0x08012624
 80094e0:	20000550 	.word	0x20000550
 80094e4:	20000554 	.word	0x20000554
 80094e8:	2000055a 	.word	0x2000055a
 80094ec:	20000540 	.word	0x20000540
 80094f0:	200037c4 	.word	0x200037c4
 80094f4:	200037c8 	.word	0x200037c8
 80094f8:	20006cfc 	.word	0x20006cfc

080094fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80094fc:	b590      	push	{r4, r7, lr}
 80094fe:	b08d      	sub	sp, #52	; 0x34
 8009500:	af04      	add	r7, sp, #16
 8009502:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <tcp_process+0x24>
 8009512:	4ba5      	ldr	r3, [pc, #660]	; (80097a8 <tcp_process+0x2ac>)
 8009514:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009518:	49a4      	ldr	r1, [pc, #656]	; (80097ac <tcp_process+0x2b0>)
 800951a:	48a5      	ldr	r0, [pc, #660]	; (80097b0 <tcp_process+0x2b4>)
 800951c:	f006 fe0e 	bl	801013c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009520:	4ba4      	ldr	r3, [pc, #656]	; (80097b4 <tcp_process+0x2b8>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d04e      	beq.n	80095ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d108      	bne.n	8009546 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009538:	4b9f      	ldr	r3, [pc, #636]	; (80097b8 <tcp_process+0x2bc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d123      	bne.n	8009588 <tcp_process+0x8c>
        acceptable = 1;
 8009540:	2301      	movs	r3, #1
 8009542:	76fb      	strb	r3, [r7, #27]
 8009544:	e020      	b.n	8009588 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800954a:	4b9c      	ldr	r3, [pc, #624]	; (80097bc <tcp_process+0x2c0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d102      	bne.n	8009558 <tcp_process+0x5c>
        acceptable = 1;
 8009552:	2301      	movs	r3, #1
 8009554:	76fb      	strb	r3, [r7, #27]
 8009556:	e017      	b.n	8009588 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009558:	4b98      	ldr	r3, [pc, #608]	; (80097bc <tcp_process+0x2c0>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	db10      	blt.n	8009588 <tcp_process+0x8c>
 8009566:	4b95      	ldr	r3, [pc, #596]	; (80097bc <tcp_process+0x2c0>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009572:	440b      	add	r3, r1
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	dc06      	bgt.n	8009588 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	8b5b      	ldrh	r3, [r3, #26]
 800957e:	f043 0302 	orr.w	r3, r3, #2
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009588:	7efb      	ldrb	r3, [r7, #27]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01b      	beq.n	80095c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7d1b      	ldrb	r3, [r3, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <tcp_process+0xa8>
 8009596:	4b84      	ldr	r3, [pc, #528]	; (80097a8 <tcp_process+0x2ac>)
 8009598:	f44f 724e 	mov.w	r2, #824	; 0x338
 800959c:	4988      	ldr	r1, [pc, #544]	; (80097c0 <tcp_process+0x2c4>)
 800959e:	4884      	ldr	r0, [pc, #528]	; (80097b0 <tcp_process+0x2b4>)
 80095a0:	f006 fdcc 	bl	801013c <iprintf>
      recv_flags |= TF_RESET;
 80095a4:	4b87      	ldr	r3, [pc, #540]	; (80097c4 <tcp_process+0x2c8>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	f043 0308 	orr.w	r3, r3, #8
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4b85      	ldr	r3, [pc, #532]	; (80097c4 <tcp_process+0x2c8>)
 80095b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	8b5b      	ldrh	r3, [r3, #26]
 80095b6:	f023 0301 	bic.w	r3, r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80095c0:	f06f 030d 	mvn.w	r3, #13
 80095c4:	e37a      	b.n	8009cbc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e378      	b.n	8009cbc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80095ca:	4b7a      	ldr	r3, [pc, #488]	; (80097b4 <tcp_process+0x2b8>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d010      	beq.n	80095f8 <tcp_process+0xfc>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7d1b      	ldrb	r3, [r3, #20]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d00c      	beq.n	80095f8 <tcp_process+0xfc>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	7d1b      	ldrb	r3, [r3, #20]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d008      	beq.n	80095f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	8b5b      	ldrh	r3, [r3, #26]
 80095ea:	f043 0302 	orr.w	r3, r3, #2
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e361      	b.n	8009cbc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8b5b      	ldrh	r3, [r3, #26]
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009604:	4b70      	ldr	r3, [pc, #448]	; (80097c8 <tcp_process+0x2cc>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 fc2d 	bl	800ae7c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7d1b      	ldrb	r3, [r3, #20]
 8009626:	3b02      	subs	r3, #2
 8009628:	2b07      	cmp	r3, #7
 800962a:	f200 8337 	bhi.w	8009c9c <tcp_process+0x7a0>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <tcp_process+0x138>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009655 	.word	0x08009655
 8009638:	08009885 	.word	0x08009885
 800963c:	080099fd 	.word	0x080099fd
 8009640:	08009a27 	.word	0x08009a27
 8009644:	08009b4b 	.word	0x08009b4b
 8009648:	080099fd 	.word	0x080099fd
 800964c:	08009bd7 	.word	0x08009bd7
 8009650:	08009c67 	.word	0x08009c67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009654:	4b57      	ldr	r3, [pc, #348]	; (80097b4 <tcp_process+0x2b8>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80e4 	beq.w	800982a <tcp_process+0x32e>
 8009662:	4b54      	ldr	r3, [pc, #336]	; (80097b4 <tcp_process+0x2b8>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 80dd 	beq.w	800982a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	4b50      	ldr	r3, [pc, #320]	; (80097b8 <tcp_process+0x2bc>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	f040 80d5 	bne.w	800982a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009680:	4b4e      	ldr	r3, [pc, #312]	; (80097bc <tcp_process+0x2c0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009692:	4b49      	ldr	r3, [pc, #292]	; (80097b8 <tcp_process+0x2bc>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800969a:	4b4c      	ldr	r3, [pc, #304]	; (80097cc <tcp_process+0x2d0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	89db      	ldrh	r3, [r3, #14]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80096b4:	4b41      	ldr	r3, [pc, #260]	; (80097bc <tcp_process+0x2c0>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2204      	movs	r2, #4
 80096c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4618      	mov	r0, r3
 80096ce:	f005 fb0f 	bl	800ecf0 <ip4_route>
 80096d2:	4601      	mov	r1, r0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	461a      	mov	r2, r3
 80096da:	4620      	mov	r0, r4
 80096dc:	f7ff f88e 	bl	80087fc <tcp_eff_send_mss_netif>
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ec:	009a      	lsls	r2, r3, #2
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80096f8:	428b      	cmp	r3, r1
 80096fa:	bf38      	it	cc
 80096fc:	460b      	movcc	r3, r1
 80096fe:	429a      	cmp	r2, r3
 8009700:	d204      	bcs.n	800970c <tcp_process+0x210>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	b29b      	uxth	r3, r3
 800970a:	e00d      	b.n	8009728 <tcp_process+0x22c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	f241 121c 	movw	r2, #4380	; 0x111c
 8009716:	4293      	cmp	r3, r2
 8009718:	d904      	bls.n	8009724 <tcp_process+0x228>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	b29b      	uxth	r3, r3
 8009722:	e001      	b.n	8009728 <tcp_process+0x22c>
 8009724:	f241 131c 	movw	r3, #4380	; 0x111c
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <tcp_process+0x24a>
 8009738:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <tcp_process+0x2ac>)
 800973a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800973e:	4924      	ldr	r1, [pc, #144]	; (80097d0 <tcp_process+0x2d4>)
 8009740:	481b      	ldr	r0, [pc, #108]	; (80097b0 <tcp_process+0x2b4>)
 8009742:	f006 fcfb 	bl	801013c <iprintf>
        --pcb->snd_queuelen;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800974c:	3b01      	subs	r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d111      	bne.n	8009786 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009766:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <tcp_process+0x280>
 800976e:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <tcp_process+0x2ac>)
 8009770:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009774:	4917      	ldr	r1, [pc, #92]	; (80097d4 <tcp_process+0x2d8>)
 8009776:	480e      	ldr	r0, [pc, #56]	; (80097b0 <tcp_process+0x2b4>)
 8009778:	f006 fce0 	bl	801013c <iprintf>
          pcb->unsent = rseg->next;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	66da      	str	r2, [r3, #108]	; 0x6c
 8009784:	e003      	b.n	800978e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800978e:	69f8      	ldr	r0, [r7, #28]
 8009790:	f7fe fc4a 	bl	8008028 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11d      	bne.n	80097d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80097a4:	e01f      	b.n	80097e6 <tcp_process+0x2ea>
 80097a6:	bf00      	nop
 80097a8:	080125d8 	.word	0x080125d8
 80097ac:	08012810 	.word	0x08012810
 80097b0:	08012624 	.word	0x08012624
 80097b4:	2000055c 	.word	0x2000055c
 80097b8:	20000554 	.word	0x20000554
 80097bc:	20000550 	.word	0x20000550
 80097c0:	0801282c 	.word	0x0801282c
 80097c4:	2000055d 	.word	0x2000055d
 80097c8:	20006cfc 	.word	0x20006cfc
 80097cc:	20000540 	.word	0x20000540
 80097d0:	0801284c 	.word	0x0801284c
 80097d4:	08012864 	.word	0x08012864
        } else {
          pcb->rtime = 0;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <tcp_process+0x30a>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6910      	ldr	r0, [r2, #16]
 80097fa:	2200      	movs	r2, #0
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4798      	blx	r3
 8009800:	4603      	mov	r3, r0
 8009802:	76bb      	strb	r3, [r7, #26]
 8009804:	e001      	b.n	800980a <tcp_process+0x30e>
 8009806:	2300      	movs	r3, #0
 8009808:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800980a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800980e:	f113 0f0d 	cmn.w	r3, #13
 8009812:	d102      	bne.n	800981a <tcp_process+0x31e>
          return ERR_ABRT;
 8009814:	f06f 030c 	mvn.w	r3, #12
 8009818:	e250      	b.n	8009cbc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	8b5b      	ldrh	r3, [r3, #26]
 800981e:	f043 0302 	orr.w	r3, r3, #2
 8009822:	b29a      	uxth	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009828:	e23a      	b.n	8009ca0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800982a:	4b9d      	ldr	r3, [pc, #628]	; (8009aa0 <tcp_process+0x5a4>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	f003 0310 	and.w	r3, r3, #16
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 8234 	beq.w	8009ca0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009838:	4b9a      	ldr	r3, [pc, #616]	; (8009aa4 <tcp_process+0x5a8>)
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	4b9a      	ldr	r3, [pc, #616]	; (8009aa8 <tcp_process+0x5ac>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	461a      	mov	r2, r3
 8009842:	4b9a      	ldr	r3, [pc, #616]	; (8009aac <tcp_process+0x5b0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009848:	4b99      	ldr	r3, [pc, #612]	; (8009ab0 <tcp_process+0x5b4>)
 800984a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800984c:	885b      	ldrh	r3, [r3, #2]
 800984e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009850:	4a97      	ldr	r2, [pc, #604]	; (8009ab0 <tcp_process+0x5b4>)
 8009852:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009854:	8812      	ldrh	r2, [r2, #0]
 8009856:	b292      	uxth	r2, r2
 8009858:	9202      	str	r2, [sp, #8]
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	4b95      	ldr	r3, [pc, #596]	; (8009ab4 <tcp_process+0x5b8>)
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4b95      	ldr	r3, [pc, #596]	; (8009ab8 <tcp_process+0x5bc>)
 8009862:	4602      	mov	r2, r0
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f003 f8eb 	bl	800ca40 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009870:	2b05      	cmp	r3, #5
 8009872:	f200 8215 	bhi.w	8009ca0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f002 feab 	bl	800c5d8 <tcp_rexmit_rto>
      break;
 8009882:	e20d      	b.n	8009ca0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009884:	4b86      	ldr	r3, [pc, #536]	; (8009aa0 <tcp_process+0x5a4>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 80a1 	beq.w	80099d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009892:	4b84      	ldr	r3, [pc, #528]	; (8009aa4 <tcp_process+0x5a8>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	db7e      	blt.n	80099a0 <tcp_process+0x4a4>
 80098a2:	4b80      	ldr	r3, [pc, #512]	; (8009aa4 <tcp_process+0x5a8>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dc77      	bgt.n	80099a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2204      	movs	r2, #4
 80098b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80098be:	23fa      	movs	r3, #250	; 0xfa
 80098c0:	76bb      	strb	r3, [r7, #26]
 80098c2:	e01d      	b.n	8009900 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <tcp_process+0x3e0>
 80098ce:	4b7b      	ldr	r3, [pc, #492]	; (8009abc <tcp_process+0x5c0>)
 80098d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80098d4:	497a      	ldr	r1, [pc, #488]	; (8009ac0 <tcp_process+0x5c4>)
 80098d6:	487b      	ldr	r0, [pc, #492]	; (8009ac4 <tcp_process+0x5c8>)
 80098d8:	f006 fc30 	bl	801013c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <tcp_process+0x400>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6910      	ldr	r0, [r2, #16]
 80098f0:	2200      	movs	r2, #0
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4798      	blx	r3
 80098f6:	4603      	mov	r3, r0
 80098f8:	76bb      	strb	r3, [r7, #26]
 80098fa:	e001      	b.n	8009900 <tcp_process+0x404>
 80098fc:	23f0      	movs	r3, #240	; 0xf0
 80098fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009900:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009908:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800990c:	f113 0f0d 	cmn.w	r3, #13
 8009910:	d002      	beq.n	8009918 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fd fce6 	bl	80072e4 <tcp_abort>
            }
            return ERR_ABRT;
 8009918:	f06f 030c 	mvn.w	r3, #12
 800991c:	e1ce      	b.n	8009cbc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fae0 	bl	8009ee4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009924:	4b68      	ldr	r3, [pc, #416]	; (8009ac8 <tcp_process+0x5cc>)
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <tcp_process+0x43c>
            recv_acked--;
 800992c:	4b66      	ldr	r3, [pc, #408]	; (8009ac8 <tcp_process+0x5cc>)
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	4b64      	ldr	r3, [pc, #400]	; (8009ac8 <tcp_process+0x5cc>)
 8009936:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800993c:	009a      	lsls	r2, r3, #2
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	f241 111c 	movw	r1, #4380	; 0x111c
 8009948:	428b      	cmp	r3, r1
 800994a:	bf38      	it	cc
 800994c:	460b      	movcc	r3, r1
 800994e:	429a      	cmp	r2, r3
 8009950:	d204      	bcs.n	800995c <tcp_process+0x460>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	b29b      	uxth	r3, r3
 800995a:	e00d      	b.n	8009978 <tcp_process+0x47c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	f241 121c 	movw	r2, #4380	; 0x111c
 8009966:	4293      	cmp	r3, r2
 8009968:	d904      	bls.n	8009974 <tcp_process+0x478>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	e001      	b.n	8009978 <tcp_process+0x47c>
 8009974:	f241 131c 	movw	r3, #4380	; 0x111c
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800997e:	4b53      	ldr	r3, [pc, #332]	; (8009acc <tcp_process+0x5d0>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	d037      	beq.n	80099fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8b5b      	ldrh	r3, [r3, #26]
 800998e:	f043 0302 	orr.w	r3, r3, #2
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2207      	movs	r2, #7
 800999c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800999e:	e02c      	b.n	80099fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099a0:	4b40      	ldr	r3, [pc, #256]	; (8009aa4 <tcp_process+0x5a8>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	4b40      	ldr	r3, [pc, #256]	; (8009aa8 <tcp_process+0x5ac>)
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b40      	ldr	r3, [pc, #256]	; (8009aac <tcp_process+0x5b0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099b0:	4b3f      	ldr	r3, [pc, #252]	; (8009ab0 <tcp_process+0x5b4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099b4:	885b      	ldrh	r3, [r3, #2]
 80099b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099b8:	4a3d      	ldr	r2, [pc, #244]	; (8009ab0 <tcp_process+0x5b4>)
 80099ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099bc:	8812      	ldrh	r2, [r2, #0]
 80099be:	b292      	uxth	r2, r2
 80099c0:	9202      	str	r2, [sp, #8]
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	4b3b      	ldr	r3, [pc, #236]	; (8009ab4 <tcp_process+0x5b8>)
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	4b3b      	ldr	r3, [pc, #236]	; (8009ab8 <tcp_process+0x5bc>)
 80099ca:	4602      	mov	r2, r0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f003 f837 	bl	800ca40 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80099d2:	e167      	b.n	8009ca4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80099d4:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <tcp_process+0x5a4>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 8161 	beq.w	8009ca4 <tcp_process+0x7a8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	1e5a      	subs	r2, r3, #1
 80099e8:	4b30      	ldr	r3, [pc, #192]	; (8009aac <tcp_process+0x5b0>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	f040 8159 	bne.w	8009ca4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f002 fe12 	bl	800c61c <tcp_rexmit>
      break;
 80099f8:	e154      	b.n	8009ca4 <tcp_process+0x7a8>
 80099fa:	e153      	b.n	8009ca4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa71 	bl	8009ee4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a02:	4b32      	ldr	r3, [pc, #200]	; (8009acc <tcp_process+0x5d0>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 814c 	beq.w	8009ca8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	8b5b      	ldrh	r3, [r3, #26]
 8009a14:	f043 0302 	orr.w	r3, r3, #2
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2207      	movs	r2, #7
 8009a22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a24:	e140      	b.n	8009ca8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa5c 	bl	8009ee4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a2c:	4b27      	ldr	r3, [pc, #156]	; (8009acc <tcp_process+0x5d0>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d071      	beq.n	8009b1c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a38:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <tcp_process+0x5a4>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d060      	beq.n	8009b06 <tcp_process+0x60a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a48:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <tcp_process+0x5a8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d15a      	bne.n	8009b06 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d156      	bne.n	8009b06 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8b5b      	ldrh	r3, [r3, #26]
 8009a5c:	f043 0302 	orr.w	r3, r3, #2
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7fe fdbe 	bl	80085e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009a6c:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <tcp_process+0x5d4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d105      	bne.n	8009a82 <tcp_process+0x586>
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <tcp_process+0x5d4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a14      	ldr	r2, [pc, #80]	; (8009ad0 <tcp_process+0x5d4>)
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e02e      	b.n	8009ae0 <tcp_process+0x5e4>
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <tcp_process+0x5d4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e027      	b.n	8009ada <tcp_process+0x5de>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d11f      	bne.n	8009ad4 <tcp_process+0x5d8>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	60da      	str	r2, [r3, #12]
 8009a9c:	e020      	b.n	8009ae0 <tcp_process+0x5e4>
 8009a9e:	bf00      	nop
 8009aa0:	2000055c 	.word	0x2000055c
 8009aa4:	20000554 	.word	0x20000554
 8009aa8:	2000055a 	.word	0x2000055a
 8009aac:	20000550 	.word	0x20000550
 8009ab0:	20000540 	.word	0x20000540
 8009ab4:	200037c4 	.word	0x200037c4
 8009ab8:	200037c8 	.word	0x200037c8
 8009abc:	080125d8 	.word	0x080125d8
 8009ac0:	08012878 	.word	0x08012878
 8009ac4:	08012624 	.word	0x08012624
 8009ac8:	20000558 	.word	0x20000558
 8009acc:	2000055d 	.word	0x2000055d
 8009ad0:	20006cf8 	.word	0x20006cf8
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1d4      	bne.n	8009a8a <tcp_process+0x58e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	60da      	str	r2, [r3, #12]
 8009ae6:	4b77      	ldr	r3, [pc, #476]	; (8009cc4 <tcp_process+0x7c8>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	220a      	movs	r2, #10
 8009af0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009af2:	4b75      	ldr	r3, [pc, #468]	; (8009cc8 <tcp_process+0x7cc>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60da      	str	r2, [r3, #12]
 8009afa:	4a73      	ldr	r2, [pc, #460]	; (8009cc8 <tcp_process+0x7cc>)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	f003 f960 	bl	800cdc4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b04:	e0d2      	b.n	8009cac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8b5b      	ldrh	r3, [r3, #26]
 8009b0a:	f043 0302 	orr.w	r3, r3, #2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2208      	movs	r2, #8
 8009b18:	751a      	strb	r2, [r3, #20]
      break;
 8009b1a:	e0c7      	b.n	8009cac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b1c:	4b6b      	ldr	r3, [pc, #428]	; (8009ccc <tcp_process+0x7d0>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 80c1 	beq.w	8009cac <tcp_process+0x7b0>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b2e:	4b68      	ldr	r3, [pc, #416]	; (8009cd0 <tcp_process+0x7d4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	f040 80ba 	bne.w	8009cac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 80b5 	bne.w	8009cac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2206      	movs	r2, #6
 8009b46:	751a      	strb	r2, [r3, #20]
      break;
 8009b48:	e0b0      	b.n	8009cac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f9ca 	bl	8009ee4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009b50:	4b60      	ldr	r3, [pc, #384]	; (8009cd4 <tcp_process+0x7d8>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80a9 	beq.w	8009cb0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8b5b      	ldrh	r3, [r3, #26]
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7fe fd3b 	bl	80085e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b72:	4b59      	ldr	r3, [pc, #356]	; (8009cd8 <tcp_process+0x7dc>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d105      	bne.n	8009b88 <tcp_process+0x68c>
 8009b7c:	4b56      	ldr	r3, [pc, #344]	; (8009cd8 <tcp_process+0x7dc>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	4a55      	ldr	r2, [pc, #340]	; (8009cd8 <tcp_process+0x7dc>)
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	e013      	b.n	8009bb0 <tcp_process+0x6b4>
 8009b88:	4b53      	ldr	r3, [pc, #332]	; (8009cd8 <tcp_process+0x7dc>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	e00c      	b.n	8009baa <tcp_process+0x6ae>
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d104      	bne.n	8009ba4 <tcp_process+0x6a8>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	e005      	b.n	8009bb0 <tcp_process+0x6b4>
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1ef      	bne.n	8009b90 <tcp_process+0x694>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	60da      	str	r2, [r3, #12]
 8009bb6:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <tcp_process+0x7c8>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	220a      	movs	r2, #10
 8009bc0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009bc2:	4b41      	ldr	r3, [pc, #260]	; (8009cc8 <tcp_process+0x7cc>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]
 8009bca:	4a3f      	ldr	r2, [pc, #252]	; (8009cc8 <tcp_process+0x7cc>)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	f003 f8f8 	bl	800cdc4 <tcp_timer_needed>
      }
      break;
 8009bd4:	e06c      	b.n	8009cb0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f984 	bl	8009ee4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009bdc:	4b3b      	ldr	r3, [pc, #236]	; (8009ccc <tcp_process+0x7d0>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d065      	beq.n	8009cb4 <tcp_process+0x7b8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bec:	4b38      	ldr	r3, [pc, #224]	; (8009cd0 <tcp_process+0x7d4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d15f      	bne.n	8009cb4 <tcp_process+0x7b8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d15b      	bne.n	8009cb4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fe fcf3 	bl	80085e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c02:	4b35      	ldr	r3, [pc, #212]	; (8009cd8 <tcp_process+0x7dc>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d105      	bne.n	8009c18 <tcp_process+0x71c>
 8009c0c:	4b32      	ldr	r3, [pc, #200]	; (8009cd8 <tcp_process+0x7dc>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	4a31      	ldr	r2, [pc, #196]	; (8009cd8 <tcp_process+0x7dc>)
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e013      	b.n	8009c40 <tcp_process+0x744>
 8009c18:	4b2f      	ldr	r3, [pc, #188]	; (8009cd8 <tcp_process+0x7dc>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e00c      	b.n	8009c3a <tcp_process+0x73e>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d104      	bne.n	8009c34 <tcp_process+0x738>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	e005      	b.n	8009c40 <tcp_process+0x744>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1ef      	bne.n	8009c20 <tcp_process+0x724>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <tcp_process+0x7c8>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	220a      	movs	r2, #10
 8009c50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c52:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <tcp_process+0x7cc>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	4a1b      	ldr	r2, [pc, #108]	; (8009cc8 <tcp_process+0x7cc>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	f003 f8b0 	bl	800cdc4 <tcp_timer_needed>
      }
      break;
 8009c64:	e026      	b.n	8009cb4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f93c 	bl	8009ee4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c6c:	4b17      	ldr	r3, [pc, #92]	; (8009ccc <tcp_process+0x7d0>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 0310 	and.w	r3, r3, #16
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01f      	beq.n	8009cb8 <tcp_process+0x7bc>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c7c:	4b14      	ldr	r3, [pc, #80]	; (8009cd0 <tcp_process+0x7d4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d119      	bne.n	8009cb8 <tcp_process+0x7bc>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d115      	bne.n	8009cb8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009c8c:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <tcp_process+0x7d8>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	f043 0310 	orr.w	r3, r3, #16
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <tcp_process+0x7d8>)
 8009c98:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009c9a:	e00d      	b.n	8009cb8 <tcp_process+0x7bc>
    default:
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e00c      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e00a      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e008      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e006      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009cac:	bf00      	nop
 8009cae:	e004      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e002      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <tcp_process+0x7be>
      break;
 8009cb8:	bf00      	nop
  }
  return ERR_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3724      	adds	r7, #36	; 0x24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd90      	pop	{r4, r7, pc}
 8009cc4:	20006cf4 	.word	0x20006cf4
 8009cc8:	20006d08 	.word	0x20006d08
 8009ccc:	2000055c 	.word	0x2000055c
 8009cd0:	20000554 	.word	0x20000554
 8009cd4:	2000055d 	.word	0x2000055d
 8009cd8:	20006cf8 	.word	0x20006cf8

08009cdc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <tcp_oos_insert_segment+0x1e>
 8009cec:	4b3b      	ldr	r3, [pc, #236]	; (8009ddc <tcp_oos_insert_segment+0x100>)
 8009cee:	f240 421f 	movw	r2, #1055	; 0x41f
 8009cf2:	493b      	ldr	r1, [pc, #236]	; (8009de0 <tcp_oos_insert_segment+0x104>)
 8009cf4:	483b      	ldr	r0, [pc, #236]	; (8009de4 <tcp_oos_insert_segment+0x108>)
 8009cf6:	f006 fa21 	bl	801013c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	899b      	ldrh	r3, [r3, #12]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fb fa44 	bl	8005190 <lwip_htons>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d028      	beq.n	8009d66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009d14:	6838      	ldr	r0, [r7, #0]
 8009d16:	f7fe f973 	bl	8008000 <tcp_segs_free>
    next = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	e056      	b.n	8009dce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	899b      	ldrh	r3, [r3, #12]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fb fa31 	bl	8005190 <lwip_htons>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00d      	beq.n	8009d56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	899b      	ldrh	r3, [r3, #12]
 8009d40:	b29c      	uxth	r4, r3
 8009d42:	2001      	movs	r0, #1
 8009d44:	f7fb fa24 	bl	8005190 <lwip_htons>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4322      	orrs	r2, r4
 8009d52:	b292      	uxth	r2, r2
 8009d54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7fe f961 	bl	8008028 <tcp_seg_free>
    while (next &&
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00e      	beq.n	8009d8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	891b      	ldrh	r3, [r3, #8]
 8009d70:	461a      	mov	r2, r3
 8009d72:	4b1d      	ldr	r3, [pc, #116]	; (8009de8 <tcp_oos_insert_segment+0x10c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	441a      	add	r2, r3
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	8909      	ldrh	r1, [r1, #8]
 8009d82:	440b      	add	r3, r1
 8009d84:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	daca      	bge.n	8009d20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01e      	beq.n	8009dce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	891b      	ldrh	r3, [r3, #8]
 8009d94:	461a      	mov	r2, r3
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <tcp_oos_insert_segment+0x10c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	441a      	add	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dd12      	ble.n	8009dce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <tcp_oos_insert_segment+0x10c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	891b      	ldrh	r3, [r3, #8]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fc fb75 	bl	80064b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}
 8009ddc:	080125d8 	.word	0x080125d8
 8009de0:	08012898 	.word	0x08012898
 8009de4:	08012624 	.word	0x08012624
 8009de8:	20000550 	.word	0x20000550

08009dec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009dec:	b5b0      	push	{r4, r5, r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009dfa:	e03e      	b.n	8009e7a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fc fd62 	bl	80068d4 <pbuf_clen>
 8009e10:	4603      	mov	r3, r0
 8009e12:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e1a:	8a7a      	ldrh	r2, [r7, #18]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d906      	bls.n	8009e2e <tcp_free_acked_segments+0x42>
 8009e20:	4b2a      	ldr	r3, [pc, #168]	; (8009ecc <tcp_free_acked_segments+0xe0>)
 8009e22:	f240 4257 	movw	r2, #1111	; 0x457
 8009e26:	492a      	ldr	r1, [pc, #168]	; (8009ed0 <tcp_free_acked_segments+0xe4>)
 8009e28:	482a      	ldr	r0, [pc, #168]	; (8009ed4 <tcp_free_acked_segments+0xe8>)
 8009e2a:	f006 f987 	bl	801013c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009e34:	8a7b      	ldrh	r3, [r7, #18]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	891a      	ldrh	r2, [r3, #8]
 8009e44:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <tcp_free_acked_segments+0xec>)
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	4413      	add	r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	4b22      	ldr	r3, [pc, #136]	; (8009ed8 <tcp_free_acked_segments+0xec>)
 8009e4e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009e50:	6978      	ldr	r0, [r7, #20]
 8009e52:	f7fe f8e9 	bl	8008028 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00c      	beq.n	8009e7a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <tcp_free_acked_segments+0x8e>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <tcp_free_acked_segments+0x8e>
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <tcp_free_acked_segments+0xe0>)
 8009e6e:	f240 4262 	movw	r2, #1122	; 0x462
 8009e72:	491a      	ldr	r1, [pc, #104]	; (8009edc <tcp_free_acked_segments+0xf0>)
 8009e74:	4817      	ldr	r0, [pc, #92]	; (8009ed4 <tcp_free_acked_segments+0xe8>)
 8009e76:	f006 f961 	bl	801013c <iprintf>
  while (seg_list != NULL &&
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d020      	beq.n	8009ec2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fb f997 	bl	80051ba <lwip_htonl>
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	891b      	ldrh	r3, [r3, #8]
 8009e92:	461d      	mov	r5, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	899b      	ldrh	r3, [r3, #12]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fb f977 	bl	8005190 <lwip_htons>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <tcp_free_acked_segments+0xc6>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <tcp_free_acked_segments+0xc8>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	442b      	add	r3, r5
 8009eb6:	18e2      	adds	r2, r4, r3
 8009eb8:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <tcp_free_acked_segments+0xf4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd9c      	ble.n	8009dfc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bdb0      	pop	{r4, r5, r7, pc}
 8009ecc:	080125d8 	.word	0x080125d8
 8009ed0:	080128c0 	.word	0x080128c0
 8009ed4:	08012624 	.word	0x08012624
 8009ed8:	20000558 	.word	0x20000558
 8009edc:	080128e8 	.word	0x080128e8
 8009ee0:	20000554 	.word	0x20000554

08009ee4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009ee4:	b5b0      	push	{r4, r5, r7, lr}
 8009ee6:	b094      	sub	sp, #80	; 0x50
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <tcp_receive+0x20>
 8009ef6:	4ba6      	ldr	r3, [pc, #664]	; (800a190 <tcp_receive+0x2ac>)
 8009ef8:	f240 427b 	movw	r2, #1147	; 0x47b
 8009efc:	49a5      	ldr	r1, [pc, #660]	; (800a194 <tcp_receive+0x2b0>)
 8009efe:	48a6      	ldr	r0, [pc, #664]	; (800a198 <tcp_receive+0x2b4>)
 8009f00:	f006 f91c 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7d1b      	ldrb	r3, [r3, #20]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d806      	bhi.n	8009f1a <tcp_receive+0x36>
 8009f0c:	4ba0      	ldr	r3, [pc, #640]	; (800a190 <tcp_receive+0x2ac>)
 8009f0e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009f12:	49a2      	ldr	r1, [pc, #648]	; (800a19c <tcp_receive+0x2b8>)
 8009f14:	48a0      	ldr	r0, [pc, #640]	; (800a198 <tcp_receive+0x2b4>)
 8009f16:	f006 f911 	bl	801013c <iprintf>

  if (flags & TCP_ACK) {
 8009f1a:	4ba1      	ldr	r3, [pc, #644]	; (800a1a0 <tcp_receive+0x2bc>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 8263 	beq.w	800a3ee <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f34:	4413      	add	r3, r2
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f3c:	4b99      	ldr	r3, [pc, #612]	; (800a1a4 <tcp_receive+0x2c0>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db1b      	blt.n	8009f7e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f4a:	4b96      	ldr	r3, [pc, #600]	; (800a1a4 <tcp_receive+0x2c0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d106      	bne.n	8009f60 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f56:	4b94      	ldr	r3, [pc, #592]	; (800a1a8 <tcp_receive+0x2c4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	db0e      	blt.n	8009f7e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f64:	4b90      	ldr	r3, [pc, #576]	; (800a1a8 <tcp_receive+0x2c4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d125      	bne.n	8009fb8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009f6c:	4b8f      	ldr	r3, [pc, #572]	; (800a1ac <tcp_receive+0x2c8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	89db      	ldrh	r3, [r3, #14]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d91c      	bls.n	8009fb8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009f7e:	4b8b      	ldr	r3, [pc, #556]	; (800a1ac <tcp_receive+0x2c8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	89db      	ldrh	r3, [r3, #14]
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d205      	bcs.n	8009fa8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009fa8:	4b7e      	ldr	r3, [pc, #504]	; (800a1a4 <tcp_receive+0x2c0>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009fb0:	4b7d      	ldr	r3, [pc, #500]	; (800a1a8 <tcp_receive+0x2c4>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009fb8:	4b7b      	ldr	r3, [pc, #492]	; (800a1a8 <tcp_receive+0x2c4>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dc58      	bgt.n	800a078 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009fc6:	4b7a      	ldr	r3, [pc, #488]	; (800a1b0 <tcp_receive+0x2cc>)
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d14b      	bne.n	800a066 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009fd8:	4413      	add	r3, r2
 8009fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d142      	bne.n	800a066 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	db3d      	blt.n	800a066 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fee:	4b6e      	ldr	r3, [pc, #440]	; (800a1a8 <tcp_receive+0x2c4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d137      	bne.n	800a066 <tcp_receive+0x182>
              found_dupack = 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a000:	2bff      	cmp	r3, #255	; 0xff
 800a002:	d007      	beq.n	800a014 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a00a:	3301      	adds	r3, #1
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d91b      	bls.n	800a056 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a028:	4413      	add	r3, r2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a032:	429a      	cmp	r2, r3
 800a034:	d30a      	bcc.n	800a04c <tcp_receive+0x168>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a040:	4413      	add	r3, r2
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a04a:	e004      	b.n	800a056 <tcp_receive+0x172>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a052:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d902      	bls.n	800a066 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f002 fb47 	bl	800c6f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f040 8160 	bne.w	800a32e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a076:	e15a      	b.n	800a32e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a078:	4b4b      	ldr	r3, [pc, #300]	; (800a1a8 <tcp_receive+0x2c4>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	3b01      	subs	r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	f2c0 814d 	blt.w	800a324 <tcp_receive+0x440>
 800a08a:	4b47      	ldr	r3, [pc, #284]	; (800a1a8 <tcp_receive+0x2c4>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	f300 8145 	bgt.w	800a324 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	8b5b      	ldrh	r3, [r3, #26]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d010      	beq.n	800a0c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8b5b      	ldrh	r3, [r3, #26]
 800a0aa:	f023 0304 	bic.w	r3, r3, #4
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0d6:	10db      	asrs	r3, r3, #3
 800a0d8:	b21b      	sxth	r3, r3
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	b21a      	sxth	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a0f0:	4b2d      	ldr	r3, [pc, #180]	; (800a1a8 <tcp_receive+0x2c4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a108:	4b27      	ldr	r3, [pc, #156]	; (800a1a8 <tcp_receive+0x2c4>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7d1b      	ldrb	r3, [r3, #20]
 800a114:	2b03      	cmp	r3, #3
 800a116:	f240 8096 	bls.w	800a246 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a126:	429a      	cmp	r2, r3
 800a128:	d244      	bcs.n	800a1b4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	8b5b      	ldrh	r3, [r3, #26]
 800a12e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <tcp_receive+0x256>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <tcp_receive+0x258>
 800a13a:	2302      	movs	r3, #2
 800a13c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a140:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a14a:	fb12 f303 	smulbb	r3, r2, r3
 800a14e:	b29b      	uxth	r3, r3
 800a150:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a152:	4293      	cmp	r3, r2
 800a154:	bf28      	it	cs
 800a156:	4613      	movcs	r3, r2
 800a158:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a160:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a162:	4413      	add	r3, r2
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d309      	bcc.n	800a184 <tcp_receive+0x2a0>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a176:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a178:	4413      	add	r3, r2
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a182:	e060      	b.n	800a246 <tcp_receive+0x362>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a18a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a18e:	e05a      	b.n	800a246 <tcp_receive+0x362>
 800a190:	080125d8 	.word	0x080125d8
 800a194:	08012908 	.word	0x08012908
 800a198:	08012624 	.word	0x08012624
 800a19c:	08012924 	.word	0x08012924
 800a1a0:	2000055c 	.word	0x2000055c
 800a1a4:	20000550 	.word	0x20000550
 800a1a8:	20000554 	.word	0x20000554
 800a1ac:	20000540 	.word	0x20000540
 800a1b0:	2000055a 	.word	0x2000055a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1bc:	4413      	add	r3, r2
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d309      	bcc.n	800a1de <tcp_receive+0x2fa>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1d2:	4413      	add	r3, r2
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a1dc:	e004      	b.n	800a1e8 <tcp_receive+0x304>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d326      	bcc.n	800a246 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a218:	4413      	add	r3, r2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a222:	429a      	cmp	r2, r3
 800a224:	d30a      	bcc.n	800a23c <tcp_receive+0x358>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a230:	4413      	add	r3, r2
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a23a:	e004      	b.n	800a246 <tcp_receive+0x362>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24e:	4a98      	ldr	r2, [pc, #608]	; (800a4b0 <tcp_receive+0x5cc>)
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fdcb 	bl	8009dec <tcp_free_acked_segments>
 800a256:	4602      	mov	r2, r0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a264:	4a93      	ldr	r2, [pc, #588]	; (800a4b4 <tcp_receive+0x5d0>)
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff fdc0 	bl	8009dec <tcp_free_acked_segments>
 800a26c:	4602      	mov	r2, r0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	2b00      	cmp	r3, #0
 800a278:	d104      	bne.n	800a284 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a280:	861a      	strh	r2, [r3, #48]	; 0x30
 800a282:	e002      	b.n	800a28a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a2a6:	4b84      	ldr	r3, [pc, #528]	; (800a4b8 <tcp_receive+0x5d4>)
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	8b5b      	ldrh	r3, [r3, #26]
 800a2b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d035      	beq.n	800a32c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d118      	bne.n	800a2fa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00c      	beq.n	800a2ea <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fa ff6c 	bl	80051ba <lwip_htonl>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	dc20      	bgt.n	800a32c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	8b5b      	ldrh	r3, [r3, #26]
 800a2ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a2f8:	e018      	b.n	800a32c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4618      	mov	r0, r3
 800a308:	f7fa ff57 	bl	80051ba <lwip_htonl>
 800a30c:	4603      	mov	r3, r0
 800a30e:	1ae3      	subs	r3, r4, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc0b      	bgt.n	800a32c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8b5b      	ldrh	r3, [r3, #26]
 800a318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a322:	e003      	b.n	800a32c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f002 fbdd 	bl	800cae4 <tcp_send_empty_ack>
 800a32a:	e000      	b.n	800a32e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a32c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a332:	2b00      	cmp	r3, #0
 800a334:	d05b      	beq.n	800a3ee <tcp_receive+0x50a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33a:	4b60      	ldr	r3, [pc, #384]	; (800a4bc <tcp_receive+0x5d8>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	da54      	bge.n	800a3ee <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a344:	4b5e      	ldr	r3, [pc, #376]	; (800a4c0 <tcp_receive+0x5dc>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34e:	b29b      	uxth	r3, r3
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	b29b      	uxth	r3, r3
 800a354:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a358:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a362:	10db      	asrs	r3, r3, #3
 800a364:	b21b      	sxth	r3, r3
 800a366:	b29b      	uxth	r3, r3
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a376:	b29a      	uxth	r2, r3
 800a378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a37c:	4413      	add	r3, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	b21a      	sxth	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a386:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da05      	bge.n	800a39a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a38e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a392:	425b      	negs	r3, r3
 800a394:	b29b      	uxth	r3, r3
 800a396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a39a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3a4:	109b      	asrs	r3, r3, #2
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3be:	4413      	add	r3, r2
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	b21a      	sxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3ce:	10db      	asrs	r3, r3, #3
 800a3d0:	b21b      	sxth	r3, r3
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	b21a      	sxth	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a3ee:	4b35      	ldr	r3, [pc, #212]	; (800a4c4 <tcp_receive+0x5e0>)
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 84e1 	beq.w	800adba <tcp_receive+0xed6>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7d1b      	ldrb	r3, [r3, #20]
 800a3fc:	2b06      	cmp	r3, #6
 800a3fe:	f200 84dc 	bhi.w	800adba <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a406:	4b30      	ldr	r3, [pc, #192]	; (800a4c8 <tcp_receive+0x5e4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f2c0 808e 	blt.w	800a530 <tcp_receive+0x64c>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a418:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <tcp_receive+0x5e0>)
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	4619      	mov	r1, r3
 800a41e:	4b2a      	ldr	r3, [pc, #168]	; (800a4c8 <tcp_receive+0x5e4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	440b      	add	r3, r1
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	3301      	adds	r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f300 8081 	bgt.w	800a530 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a42e:	4b27      	ldr	r3, [pc, #156]	; (800a4cc <tcp_receive+0x5e8>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a438:	4b23      	ldr	r3, [pc, #140]	; (800a4c8 <tcp_receive+0x5e4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a440:	4b22      	ldr	r3, [pc, #136]	; (800a4cc <tcp_receive+0x5e8>)
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <tcp_receive+0x572>
 800a448:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <tcp_receive+0x5ec>)
 800a44a:	f240 5294 	movw	r2, #1428	; 0x594
 800a44e:	4921      	ldr	r1, [pc, #132]	; (800a4d4 <tcp_receive+0x5f0>)
 800a450:	4821      	ldr	r0, [pc, #132]	; (800a4d8 <tcp_receive+0x5f4>)
 800a452:	f005 fe73 	bl	801013c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d906      	bls.n	800a46e <tcp_receive+0x58a>
 800a460:	4b1b      	ldr	r3, [pc, #108]	; (800a4d0 <tcp_receive+0x5ec>)
 800a462:	f240 5295 	movw	r2, #1429	; 0x595
 800a466:	491d      	ldr	r1, [pc, #116]	; (800a4dc <tcp_receive+0x5f8>)
 800a468:	481b      	ldr	r0, [pc, #108]	; (800a4d8 <tcp_receive+0x5f4>)
 800a46a:	f005 fe67 	bl	801013c <iprintf>
      off = (u16_t)off32;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a474:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <tcp_receive+0x5e8>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	891b      	ldrh	r3, [r3, #8]
 800a47a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a47e:	429a      	cmp	r2, r3
 800a480:	d906      	bls.n	800a490 <tcp_receive+0x5ac>
 800a482:	4b13      	ldr	r3, [pc, #76]	; (800a4d0 <tcp_receive+0x5ec>)
 800a484:	f240 5297 	movw	r2, #1431	; 0x597
 800a488:	4915      	ldr	r1, [pc, #84]	; (800a4e0 <tcp_receive+0x5fc>)
 800a48a:	4813      	ldr	r0, [pc, #76]	; (800a4d8 <tcp_receive+0x5f4>)
 800a48c:	f005 fe56 	bl	801013c <iprintf>
      inseg.len -= off;
 800a490:	4b0e      	ldr	r3, [pc, #56]	; (800a4cc <tcp_receive+0x5e8>)
 800a492:	891a      	ldrh	r2, [r3, #8]
 800a494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <tcp_receive+0x5e8>)
 800a49e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <tcp_receive+0x5e8>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	891a      	ldrh	r2, [r3, #8]
 800a4a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a4ae:	e029      	b.n	800a504 <tcp_receive+0x620>
 800a4b0:	08012940 	.word	0x08012940
 800a4b4:	08012948 	.word	0x08012948
 800a4b8:	20000558 	.word	0x20000558
 800a4bc:	20000554 	.word	0x20000554
 800a4c0:	20006cfc 	.word	0x20006cfc
 800a4c4:	2000055a 	.word	0x2000055a
 800a4c8:	20000550 	.word	0x20000550
 800a4cc:	20000530 	.word	0x20000530
 800a4d0:	080125d8 	.word	0x080125d8
 800a4d4:	08012950 	.word	0x08012950
 800a4d8:	08012624 	.word	0x08012624
 800a4dc:	08012960 	.word	0x08012960
 800a4e0:	08012970 	.word	0x08012970
        off -= p->len;
 800a4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e6:	895b      	ldrh	r3, [r3, #10]
 800a4e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a4f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a4f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a506:	895b      	ldrh	r3, [r3, #10]
 800a508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d8e9      	bhi.n	800a4e4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a514:	4619      	mov	r1, r3
 800a516:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a518:	f7fc f8ce 	bl	80066b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	4a91      	ldr	r2, [pc, #580]	; (800a768 <tcp_receive+0x884>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	4b91      	ldr	r3, [pc, #580]	; (800a76c <tcp_receive+0x888>)
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	4a8f      	ldr	r2, [pc, #572]	; (800a768 <tcp_receive+0x884>)
 800a52a:	6812      	ldr	r2, [r2, #0]
 800a52c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a52e:	e00d      	b.n	800a54c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a530:	4b8d      	ldr	r3, [pc, #564]	; (800a768 <tcp_receive+0x884>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da06      	bge.n	800a54c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8b5b      	ldrh	r3, [r3, #26]
 800a542:	f043 0302 	orr.w	r3, r3, #2
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a54c:	4b86      	ldr	r3, [pc, #536]	; (800a768 <tcp_receive+0x884>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	f2c0 842a 	blt.w	800adb0 <tcp_receive+0xecc>
 800a55c:	4b82      	ldr	r3, [pc, #520]	; (800a768 <tcp_receive+0x884>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a568:	440b      	add	r3, r1
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	3301      	adds	r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f300 841e 	bgt.w	800adb0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a578:	4b7b      	ldr	r3, [pc, #492]	; (800a768 <tcp_receive+0x884>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	f040 829a 	bne.w	800aab6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a582:	4b7a      	ldr	r3, [pc, #488]	; (800a76c <tcp_receive+0x888>)
 800a584:	891c      	ldrh	r4, [r3, #8]
 800a586:	4b79      	ldr	r3, [pc, #484]	; (800a76c <tcp_receive+0x888>)
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	899b      	ldrh	r3, [r3, #12]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fa fdfe 	bl	8005190 <lwip_htons>
 800a594:	4603      	mov	r3, r0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <tcp_receive+0x6c0>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e000      	b.n	800a5a6 <tcp_receive+0x6c2>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	4423      	add	r3, r4
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	4b71      	ldr	r3, [pc, #452]	; (800a770 <tcp_receive+0x88c>)
 800a5ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5b2:	4b6f      	ldr	r3, [pc, #444]	; (800a770 <tcp_receive+0x88c>)
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d275      	bcs.n	800a6a6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5ba:	4b6c      	ldr	r3, [pc, #432]	; (800a76c <tcp_receive+0x888>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	899b      	ldrh	r3, [r3, #12]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fa fde4 	bl	8005190 <lwip_htons>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01f      	beq.n	800a614 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a5d4:	4b65      	ldr	r3, [pc, #404]	; (800a76c <tcp_receive+0x888>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	899b      	ldrh	r3, [r3, #12]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	b21b      	sxth	r3, r3
 800a5de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5e2:	b21c      	sxth	r4, r3
 800a5e4:	4b61      	ldr	r3, [pc, #388]	; (800a76c <tcp_receive+0x888>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	899b      	ldrh	r3, [r3, #12]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fa fdcf 	bl	8005190 <lwip_htons>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fa fdc6 	bl	8005190 <lwip_htons>
 800a604:	4603      	mov	r3, r0
 800a606:	b21b      	sxth	r3, r3
 800a608:	4323      	orrs	r3, r4
 800a60a:	b21a      	sxth	r2, r3
 800a60c:	4b57      	ldr	r3, [pc, #348]	; (800a76c <tcp_receive+0x888>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	b292      	uxth	r2, r2
 800a612:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a618:	4b54      	ldr	r3, [pc, #336]	; (800a76c <tcp_receive+0x888>)
 800a61a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a61c:	4b53      	ldr	r3, [pc, #332]	; (800a76c <tcp_receive+0x888>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	899b      	ldrh	r3, [r3, #12]
 800a622:	b29b      	uxth	r3, r3
 800a624:	4618      	mov	r0, r3
 800a626:	f7fa fdb3 	bl	8005190 <lwip_htons>
 800a62a:	4603      	mov	r3, r0
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a636:	4b4d      	ldr	r3, [pc, #308]	; (800a76c <tcp_receive+0x888>)
 800a638:	891b      	ldrh	r3, [r3, #8]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	4b4b      	ldr	r3, [pc, #300]	; (800a76c <tcp_receive+0x888>)
 800a640:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a642:	4b4a      	ldr	r3, [pc, #296]	; (800a76c <tcp_receive+0x888>)
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b49      	ldr	r3, [pc, #292]	; (800a76c <tcp_receive+0x888>)
 800a648:	891b      	ldrh	r3, [r3, #8]
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7fb ff33 	bl	80064b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a652:	4b46      	ldr	r3, [pc, #280]	; (800a76c <tcp_receive+0x888>)
 800a654:	891c      	ldrh	r4, [r3, #8]
 800a656:	4b45      	ldr	r3, [pc, #276]	; (800a76c <tcp_receive+0x888>)
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	899b      	ldrh	r3, [r3, #12]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fa fd96 	bl	8005190 <lwip_htons>
 800a664:	4603      	mov	r3, r0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <tcp_receive+0x790>
 800a670:	2301      	movs	r3, #1
 800a672:	e000      	b.n	800a676 <tcp_receive+0x792>
 800a674:	2300      	movs	r3, #0
 800a676:	4423      	add	r3, r4
 800a678:	b29a      	uxth	r2, r3
 800a67a:	4b3d      	ldr	r3, [pc, #244]	; (800a770 <tcp_receive+0x88c>)
 800a67c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a67e:	4b3c      	ldr	r3, [pc, #240]	; (800a770 <tcp_receive+0x88c>)
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	4b38      	ldr	r3, [pc, #224]	; (800a768 <tcp_receive+0x884>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	441a      	add	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a692:	440b      	add	r3, r1
 800a694:	429a      	cmp	r2, r3
 800a696:	d006      	beq.n	800a6a6 <tcp_receive+0x7c2>
 800a698:	4b36      	ldr	r3, [pc, #216]	; (800a774 <tcp_receive+0x890>)
 800a69a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a69e:	4936      	ldr	r1, [pc, #216]	; (800a778 <tcp_receive+0x894>)
 800a6a0:	4836      	ldr	r0, [pc, #216]	; (800a77c <tcp_receive+0x898>)
 800a6a2:	f005 fd4b 	bl	801013c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80e7 	beq.w	800a87e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6b0:	4b2e      	ldr	r3, [pc, #184]	; (800a76c <tcp_receive+0x888>)
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	899b      	ldrh	r3, [r3, #12]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fa fd69 	bl	8005190 <lwip_htons>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d010      	beq.n	800a6ec <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a6ca:	e00a      	b.n	800a6e2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7fd fca3 	bl	8008028 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f0      	bne.n	800a6cc <tcp_receive+0x7e8>
 800a6ea:	e0c8      	b.n	800a87e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a6f2:	e052      	b.n	800a79a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	899b      	ldrh	r3, [r3, #12]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fa fd47 	bl	8005190 <lwip_htons>
 800a702:	4603      	mov	r3, r0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d03d      	beq.n	800a78a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a70e:	4b17      	ldr	r3, [pc, #92]	; (800a76c <tcp_receive+0x888>)
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	899b      	ldrh	r3, [r3, #12]
 800a714:	b29b      	uxth	r3, r3
 800a716:	4618      	mov	r0, r3
 800a718:	f7fa fd3a 	bl	8005190 <lwip_htons>
 800a71c:	4603      	mov	r3, r0
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a724:	2b00      	cmp	r3, #0
 800a726:	d130      	bne.n	800a78a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a728:	4b10      	ldr	r3, [pc, #64]	; (800a76c <tcp_receive+0x888>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	899b      	ldrh	r3, [r3, #12]
 800a72e:	b29c      	uxth	r4, r3
 800a730:	2001      	movs	r0, #1
 800a732:	f7fa fd2d 	bl	8005190 <lwip_htons>
 800a736:	4603      	mov	r3, r0
 800a738:	461a      	mov	r2, r3
 800a73a:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <tcp_receive+0x888>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	4322      	orrs	r2, r4
 800a740:	b292      	uxth	r2, r2
 800a742:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a744:	4b09      	ldr	r3, [pc, #36]	; (800a76c <tcp_receive+0x888>)
 800a746:	891c      	ldrh	r4, [r3, #8]
 800a748:	4b08      	ldr	r3, [pc, #32]	; (800a76c <tcp_receive+0x888>)
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	899b      	ldrh	r3, [r3, #12]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4618      	mov	r0, r3
 800a752:	f7fa fd1d 	bl	8005190 <lwip_htons>
 800a756:	4603      	mov	r3, r0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00e      	beq.n	800a780 <tcp_receive+0x89c>
 800a762:	2301      	movs	r3, #1
 800a764:	e00d      	b.n	800a782 <tcp_receive+0x89e>
 800a766:	bf00      	nop
 800a768:	20000550 	.word	0x20000550
 800a76c:	20000530 	.word	0x20000530
 800a770:	2000055a 	.word	0x2000055a
 800a774:	080125d8 	.word	0x080125d8
 800a778:	08012980 	.word	0x08012980
 800a77c:	08012624 	.word	0x08012624
 800a780:	2300      	movs	r3, #0
 800a782:	4423      	add	r3, r4
 800a784:	b29a      	uxth	r2, r3
 800a786:	4b98      	ldr	r3, [pc, #608]	; (800a9e8 <tcp_receive+0xb04>)
 800a788:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a794:	6938      	ldr	r0, [r7, #16]
 800a796:	f7fd fc47 	bl	8008028 <tcp_seg_free>
            while (next &&
 800a79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a7a0:	4b91      	ldr	r3, [pc, #580]	; (800a9e8 <tcp_receive+0xb04>)
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b91      	ldr	r3, [pc, #580]	; (800a9ec <tcp_receive+0xb08>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	441a      	add	r2, r3
 800a7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7b4:	8909      	ldrh	r1, [r1, #8]
 800a7b6:	440b      	add	r3, r1
 800a7b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da9a      	bge.n	800a6f4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d059      	beq.n	800a878 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a7c4:	4b88      	ldr	r3, [pc, #544]	; (800a9e8 <tcp_receive+0xb04>)
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4b88      	ldr	r3, [pc, #544]	; (800a9ec <tcp_receive+0xb08>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	441a      	add	r2, r3
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dd4d      	ble.n	800a878 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	4b81      	ldr	r3, [pc, #516]	; (800a9ec <tcp_receive+0xb08>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	4b80      	ldr	r3, [pc, #512]	; (800a9f0 <tcp_receive+0xb0c>)
 800a7f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a7f2:	4b7f      	ldr	r3, [pc, #508]	; (800a9f0 <tcp_receive+0xb0c>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	899b      	ldrh	r3, [r3, #12]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fa fcc8 	bl	8005190 <lwip_htons>
 800a800:	4603      	mov	r3, r0
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <tcp_receive+0x934>
                inseg.len -= 1;
 800a80c:	4b78      	ldr	r3, [pc, #480]	; (800a9f0 <tcp_receive+0xb0c>)
 800a80e:	891b      	ldrh	r3, [r3, #8]
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	4b76      	ldr	r3, [pc, #472]	; (800a9f0 <tcp_receive+0xb0c>)
 800a816:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a818:	4b75      	ldr	r3, [pc, #468]	; (800a9f0 <tcp_receive+0xb0c>)
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b74      	ldr	r3, [pc, #464]	; (800a9f0 <tcp_receive+0xb0c>)
 800a81e:	891b      	ldrh	r3, [r3, #8]
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7fb fe48 	bl	80064b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a828:	4b71      	ldr	r3, [pc, #452]	; (800a9f0 <tcp_receive+0xb0c>)
 800a82a:	891c      	ldrh	r4, [r3, #8]
 800a82c:	4b70      	ldr	r3, [pc, #448]	; (800a9f0 <tcp_receive+0xb0c>)
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	b29b      	uxth	r3, r3
 800a834:	4618      	mov	r0, r3
 800a836:	f7fa fcab 	bl	8005190 <lwip_htons>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <tcp_receive+0x966>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <tcp_receive+0x968>
 800a84a:	2300      	movs	r3, #0
 800a84c:	4423      	add	r3, r4
 800a84e:	b29a      	uxth	r2, r3
 800a850:	4b65      	ldr	r3, [pc, #404]	; (800a9e8 <tcp_receive+0xb04>)
 800a852:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a854:	4b64      	ldr	r3, [pc, #400]	; (800a9e8 <tcp_receive+0xb04>)
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	4b64      	ldr	r3, [pc, #400]	; (800a9ec <tcp_receive+0xb08>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	441a      	add	r2, r3
 800a860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d006      	beq.n	800a878 <tcp_receive+0x994>
 800a86a:	4b62      	ldr	r3, [pc, #392]	; (800a9f4 <tcp_receive+0xb10>)
 800a86c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800a870:	4961      	ldr	r1, [pc, #388]	; (800a9f8 <tcp_receive+0xb14>)
 800a872:	4862      	ldr	r0, [pc, #392]	; (800a9fc <tcp_receive+0xb18>)
 800a874:	f005 fc62 	bl	801013c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a87c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a87e:	4b5a      	ldr	r3, [pc, #360]	; (800a9e8 <tcp_receive+0xb04>)
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <tcp_receive+0xb08>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	441a      	add	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a892:	4b55      	ldr	r3, [pc, #340]	; (800a9e8 <tcp_receive+0xb04>)
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d206      	bcs.n	800a8a8 <tcp_receive+0x9c4>
 800a89a:	4b56      	ldr	r3, [pc, #344]	; (800a9f4 <tcp_receive+0xb10>)
 800a89c:	f240 6207 	movw	r2, #1543	; 0x607
 800a8a0:	4957      	ldr	r1, [pc, #348]	; (800aa00 <tcp_receive+0xb1c>)
 800a8a2:	4856      	ldr	r0, [pc, #344]	; (800a9fc <tcp_receive+0xb18>)
 800a8a4:	f005 fc4a 	bl	801013c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8ac:	4b4e      	ldr	r3, [pc, #312]	; (800a9e8 <tcp_receive+0xb04>)
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7fc fe93 	bl	80075e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a8be:	4b4c      	ldr	r3, [pc, #304]	; (800a9f0 <tcp_receive+0xb0c>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	891b      	ldrh	r3, [r3, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a8c8:	4b49      	ldr	r3, [pc, #292]	; (800a9f0 <tcp_receive+0xb0c>)
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4a4d      	ldr	r2, [pc, #308]	; (800aa04 <tcp_receive+0xb20>)
 800a8ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a8d0:	4b47      	ldr	r3, [pc, #284]	; (800a9f0 <tcp_receive+0xb0c>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8d6:	4b46      	ldr	r3, [pc, #280]	; (800a9f0 <tcp_receive+0xb0c>)
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	899b      	ldrh	r3, [r3, #12]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fa fc56 	bl	8005190 <lwip_htons>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80b8 	beq.w	800aa62 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a8f2:	4b45      	ldr	r3, [pc, #276]	; (800aa08 <tcp_receive+0xb24>)
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	f043 0320 	orr.w	r3, r3, #32
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	4b42      	ldr	r3, [pc, #264]	; (800aa08 <tcp_receive+0xb24>)
 800a8fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a900:	e0af      	b.n	800aa62 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a906:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4a36      	ldr	r2, [pc, #216]	; (800a9ec <tcp_receive+0xb08>)
 800a912:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	891b      	ldrh	r3, [r3, #8]
 800a918:	461c      	mov	r4, r3
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	899b      	ldrh	r3, [r3, #12]
 800a920:	b29b      	uxth	r3, r3
 800a922:	4618      	mov	r0, r3
 800a924:	f7fa fc34 	bl	8005190 <lwip_htons>
 800a928:	4603      	mov	r3, r0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <tcp_receive+0xa54>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <tcp_receive+0xa56>
 800a938:	2300      	movs	r3, #0
 800a93a:	191a      	adds	r2, r3, r4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	441a      	add	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a94a:	461c      	mov	r4, r3
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	891b      	ldrh	r3, [r3, #8]
 800a950:	461d      	mov	r5, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	899b      	ldrh	r3, [r3, #12]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fa fc18 	bl	8005190 <lwip_htons>
 800a960:	4603      	mov	r3, r0
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <tcp_receive+0xa8c>
 800a96c:	2301      	movs	r3, #1
 800a96e:	e000      	b.n	800a972 <tcp_receive+0xa8e>
 800a970:	2300      	movs	r3, #0
 800a972:	442b      	add	r3, r5
 800a974:	429c      	cmp	r4, r3
 800a976:	d206      	bcs.n	800a986 <tcp_receive+0xaa2>
 800a978:	4b1e      	ldr	r3, [pc, #120]	; (800a9f4 <tcp_receive+0xb10>)
 800a97a:	f240 622c 	movw	r2, #1580	; 0x62c
 800a97e:	4923      	ldr	r1, [pc, #140]	; (800aa0c <tcp_receive+0xb28>)
 800a980:	481e      	ldr	r0, [pc, #120]	; (800a9fc <tcp_receive+0xb18>)
 800a982:	f005 fbdb 	bl	801013c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	891b      	ldrh	r3, [r3, #8]
 800a98a:	461c      	mov	r4, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	899b      	ldrh	r3, [r3, #12]
 800a992:	b29b      	uxth	r3, r3
 800a994:	4618      	mov	r0, r3
 800a996:	f7fa fbfb 	bl	8005190 <lwip_htons>
 800a99a:	4603      	mov	r3, r0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0303 	and.w	r3, r3, #3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <tcp_receive+0xac6>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <tcp_receive+0xac8>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	1919      	adds	r1, r3, r4
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9b2:	b28b      	uxth	r3, r1
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7fc fe11 	bl	80075e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	891b      	ldrh	r3, [r3, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d028      	beq.n	800aa1e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <tcp_receive+0xb20>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01d      	beq.n	800aa10 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <tcp_receive+0xb20>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fb ffb2 	bl	8006948 <pbuf_cat>
 800a9e4:	e018      	b.n	800aa18 <tcp_receive+0xb34>
 800a9e6:	bf00      	nop
 800a9e8:	2000055a 	.word	0x2000055a
 800a9ec:	20000550 	.word	0x20000550
 800a9f0:	20000530 	.word	0x20000530
 800a9f4:	080125d8 	.word	0x080125d8
 800a9f8:	080129b8 	.word	0x080129b8
 800a9fc:	08012624 	.word	0x08012624
 800aa00:	080129f4 	.word	0x080129f4
 800aa04:	20000560 	.word	0x20000560
 800aa08:	2000055d 	.word	0x2000055d
 800aa0c:	08012a14 	.word	0x08012a14
            } else {
              recv_data = cseg->p;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4a70      	ldr	r2, [pc, #448]	; (800abd8 <tcp_receive+0xcf4>)
 800aa16:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	899b      	ldrh	r3, [r3, #12]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fa fbb2 	bl	8005190 <lwip_htons>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00d      	beq.n	800aa54 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aa38:	4b68      	ldr	r3, [pc, #416]	; (800abdc <tcp_receive+0xcf8>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f043 0320 	orr.w	r3, r3, #32
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	4b66      	ldr	r3, [pc, #408]	; (800abdc <tcp_receive+0xcf8>)
 800aa44:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7d1b      	ldrb	r3, [r3, #20]
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d102      	bne.n	800aa54 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2207      	movs	r2, #7
 800aa52:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aa5c:	68b8      	ldr	r0, [r7, #8]
 800aa5e:	f7fd fae3 	bl	8008028 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d008      	beq.n	800aa7c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aa76:	429a      	cmp	r2, r3
 800aa78:	f43f af43 	beq.w	800a902 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8b5b      	ldrh	r3, [r3, #26]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00e      	beq.n	800aaa6 <tcp_receive+0xbc2>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	8b5b      	ldrh	r3, [r3, #26]
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	835a      	strh	r2, [r3, #26]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8b5b      	ldrh	r3, [r3, #26]
 800aa9a:	f043 0302 	orr.w	r3, r3, #2
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aaa4:	e188      	b.n	800adb8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8b5b      	ldrh	r3, [r3, #26]
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aab4:	e180      	b.n	800adb8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aabe:	4848      	ldr	r0, [pc, #288]	; (800abe0 <tcp_receive+0xcfc>)
 800aac0:	f7fd fae8 	bl	8008094 <tcp_seg_copy>
 800aac4:	4602      	mov	r2, r0
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	675a      	str	r2, [r3, #116]	; 0x74
 800aaca:	e16d      	b.n	800ada8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aad6:	e157      	b.n	800ad88 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <tcp_receive+0xd00>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d11d      	bne.n	800ab22 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800aae6:	4b3e      	ldr	r3, [pc, #248]	; (800abe0 <tcp_receive+0xcfc>)
 800aae8:	891a      	ldrh	r2, [r3, #8]
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	891b      	ldrh	r3, [r3, #8]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	f240 814f 	bls.w	800ad92 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aaf4:	483a      	ldr	r0, [pc, #232]	; (800abe0 <tcp_receive+0xcfc>)
 800aaf6:	f7fd facd 	bl	8008094 <tcp_seg_copy>
 800aafa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 8149 	beq.w	800ad96 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e002      	b.n	800ab18 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab1a:	6978      	ldr	r0, [r7, #20]
 800ab1c:	f7ff f8de 	bl	8009cdc <tcp_oos_insert_segment>
                }
                break;
 800ab20:	e139      	b.n	800ad96 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ab22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d117      	bne.n	800ab58 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ab28:	4b2e      	ldr	r3, [pc, #184]	; (800abe4 <tcp_receive+0xd00>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da57      	bge.n	800abe8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab38:	4829      	ldr	r0, [pc, #164]	; (800abe0 <tcp_receive+0xcfc>)
 800ab3a:	f7fd faab 	bl	8008094 <tcp_seg_copy>
 800ab3e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 8129 	beq.w	800ad9a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ab4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab50:	69b8      	ldr	r0, [r7, #24]
 800ab52:	f7ff f8c3 	bl	8009cdc <tcp_oos_insert_segment>
                  }
                  break;
 800ab56:	e120      	b.n	800ad9a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ab58:	4b22      	ldr	r3, [pc, #136]	; (800abe4 <tcp_receive+0xd00>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	db3e      	blt.n	800abe8 <tcp_receive+0xd04>
 800ab6a:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <tcp_receive+0xd00>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	3301      	adds	r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dc35      	bgt.n	800abe8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab7c:	4818      	ldr	r0, [pc, #96]	; (800abe0 <tcp_receive+0xcfc>)
 800ab7e:	f7fd fa89 	bl	8008094 <tcp_seg_copy>
 800ab82:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 8109 	beq.w	800ad9e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab94:	8912      	ldrh	r2, [r2, #8]
 800ab96:	441a      	add	r2, r3
 800ab98:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <tcp_receive+0xd00>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd12      	ble.n	800abc8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aba2:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <tcp_receive+0xd00>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbe:	891b      	ldrh	r3, [r3, #8]
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fb fc78 	bl	80064b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800abc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800abce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abd0:	69f8      	ldr	r0, [r7, #28]
 800abd2:	f7ff f883 	bl	8009cdc <tcp_oos_insert_segment>
                  }
                  break;
 800abd6:	e0e2      	b.n	800ad9e <tcp_receive+0xeba>
 800abd8:	20000560 	.word	0x20000560
 800abdc:	2000055d 	.word	0x2000055d
 800abe0:	20000530 	.word	0x20000530
 800abe4:	20000550 	.word	0x20000550
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 80c6 	bne.w	800ad82 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800abf6:	4b80      	ldr	r3, [pc, #512]	; (800adf8 <tcp_receive+0xf14>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f340 80bd 	ble.w	800ad82 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	899b      	ldrh	r3, [r3, #12]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fa fabd 	bl	8005190 <lwip_htons>
 800ac16:	4603      	mov	r3, r0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 80bf 	bne.w	800ada2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ac24:	4875      	ldr	r0, [pc, #468]	; (800adfc <tcp_receive+0xf18>)
 800ac26:	f7fd fa35 	bl	8008094 <tcp_seg_copy>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 80b6 	beq.w	800ada6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac42:	8912      	ldrh	r2, [r2, #8]
 800ac44:	441a      	add	r2, r3
 800ac46:	4b6c      	ldr	r3, [pc, #432]	; (800adf8 <tcp_receive+0xf14>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd12      	ble.n	800ac76 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ac50:	4b69      	ldr	r3, [pc, #420]	; (800adf8 <tcp_receive+0xf14>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	891b      	ldrh	r3, [r3, #8]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fb fc21 	bl	80064b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ac76:	4b62      	ldr	r3, [pc, #392]	; (800ae00 <tcp_receive+0xf1c>)
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4b5e      	ldr	r3, [pc, #376]	; (800adf8 <tcp_receive+0xf14>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac8a:	440b      	add	r3, r1
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f340 8089 	ble.w	800ada6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ac94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	899b      	ldrh	r3, [r3, #12]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fa fa76 	bl	8005190 <lwip_htons>
 800aca4:	4603      	mov	r3, r0
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d022      	beq.n	800acf6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	899b      	ldrh	r3, [r3, #12]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	b21b      	sxth	r3, r3
 800acbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800acc0:	b21c      	sxth	r4, r3
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	899b      	ldrh	r3, [r3, #12]
 800acca:	b29b      	uxth	r3, r3
 800accc:	4618      	mov	r0, r3
 800acce:	f7fa fa5f 	bl	8005190 <lwip_htons>
 800acd2:	4603      	mov	r3, r0
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800acdc:	b29b      	uxth	r3, r3
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fa fa56 	bl	8005190 <lwip_htons>
 800ace4:	4603      	mov	r3, r0
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	4323      	orrs	r3, r4
 800acea:	b21a      	sxth	r2, r3
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	b292      	uxth	r2, r2
 800acf4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad00:	4413      	add	r3, r2
 800ad02:	b299      	uxth	r1, r3
 800ad04:	4b3c      	ldr	r3, [pc, #240]	; (800adf8 <tcp_receive+0xf14>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	1a8a      	subs	r2, r1, r2
 800ad10:	b292      	uxth	r2, r2
 800ad12:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	891b      	ldrh	r3, [r3, #8]
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fb fbc8 	bl	80064b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	891c      	ldrh	r4, [r3, #8]
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	899b      	ldrh	r3, [r3, #12]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fa fa29 	bl	8005190 <lwip_htons>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <tcp_receive+0xe6a>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <tcp_receive+0xe6c>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4423      	add	r3, r4
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	4b2a      	ldr	r3, [pc, #168]	; (800ae00 <tcp_receive+0xf1c>)
 800ad56:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ad58:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <tcp_receive+0xf1c>)
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b26      	ldr	r3, [pc, #152]	; (800adf8 <tcp_receive+0xf14>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	441a      	add	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad6c:	440b      	add	r3, r1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d019      	beq.n	800ada6 <tcp_receive+0xec2>
 800ad72:	4b24      	ldr	r3, [pc, #144]	; (800ae04 <tcp_receive+0xf20>)
 800ad74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ad78:	4923      	ldr	r1, [pc, #140]	; (800ae08 <tcp_receive+0xf24>)
 800ad7a:	4824      	ldr	r0, [pc, #144]	; (800ae0c <tcp_receive+0xf28>)
 800ad7c:	f005 f9de 	bl	801013c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ad80:	e011      	b.n	800ada6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f47f aea4 	bne.w	800aad8 <tcp_receive+0xbf4>
 800ad90:	e00a      	b.n	800ada8 <tcp_receive+0xec4>
                break;
 800ad92:	bf00      	nop
 800ad94:	e008      	b.n	800ada8 <tcp_receive+0xec4>
                break;
 800ad96:	bf00      	nop
 800ad98:	e006      	b.n	800ada8 <tcp_receive+0xec4>
                  break;
 800ad9a:	bf00      	nop
 800ad9c:	e004      	b.n	800ada8 <tcp_receive+0xec4>
                  break;
 800ad9e:	bf00      	nop
 800ada0:	e002      	b.n	800ada8 <tcp_receive+0xec4>
                  break;
 800ada2:	bf00      	nop
 800ada4:	e000      	b.n	800ada8 <tcp_receive+0xec4>
                break;
 800ada6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 fe9b 	bl	800cae4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800adae:	e003      	b.n	800adb8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 fe97 	bl	800cae4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800adb6:	e01a      	b.n	800adee <tcp_receive+0xf0a>
 800adb8:	e019      	b.n	800adee <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800adba:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <tcp_receive+0xf14>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	db0a      	blt.n	800adde <tcp_receive+0xefa>
 800adc8:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <tcp_receive+0xf14>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800add4:	440b      	add	r3, r1
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	3301      	adds	r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	dd07      	ble.n	800adee <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	8b5b      	ldrh	r3, [r3, #26]
 800ade2:	f043 0302 	orr.w	r3, r3, #2
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800adec:	e7ff      	b.n	800adee <tcp_receive+0xf0a>
 800adee:	bf00      	nop
 800adf0:	3750      	adds	r7, #80	; 0x50
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bdb0      	pop	{r4, r5, r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000550 	.word	0x20000550
 800adfc:	20000530 	.word	0x20000530
 800ae00:	2000055a 	.word	0x2000055a
 800ae04:	080125d8 	.word	0x080125d8
 800ae08:	08012980 	.word	0x08012980
 800ae0c:	08012624 	.word	0x08012624

0800ae10 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae16:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <tcp_get_next_optbyte+0x5c>)
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	b291      	uxth	r1, r2
 800ae1e:	4a13      	ldr	r2, [pc, #76]	; (800ae6c <tcp_get_next_optbyte+0x5c>)
 800ae20:	8011      	strh	r1, [r2, #0]
 800ae22:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ae24:	4b12      	ldr	r3, [pc, #72]	; (800ae70 <tcp_get_next_optbyte+0x60>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <tcp_get_next_optbyte+0x26>
 800ae2c:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <tcp_get_next_optbyte+0x64>)
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	88fa      	ldrh	r2, [r7, #6]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d208      	bcs.n	800ae48 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ae36:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <tcp_get_next_optbyte+0x68>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3314      	adds	r3, #20
 800ae3c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	4413      	add	r3, r2
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	e00b      	b.n	800ae60 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <tcp_get_next_optbyte+0x64>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ae56:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <tcp_get_next_optbyte+0x60>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	797b      	ldrb	r3, [r7, #5]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	2000054c 	.word	0x2000054c
 800ae70:	20000548 	.word	0x20000548
 800ae74:	20000546 	.word	0x20000546
 800ae78:	20000540 	.word	0x20000540

0800ae7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <tcp_parseopt+0x1c>
 800ae8a:	4b31      	ldr	r3, [pc, #196]	; (800af50 <tcp_parseopt+0xd4>)
 800ae8c:	f240 727d 	movw	r2, #1917	; 0x77d
 800ae90:	4930      	ldr	r1, [pc, #192]	; (800af54 <tcp_parseopt+0xd8>)
 800ae92:	4831      	ldr	r0, [pc, #196]	; (800af58 <tcp_parseopt+0xdc>)
 800ae94:	f005 f952 	bl	801013c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ae98:	4b30      	ldr	r3, [pc, #192]	; (800af5c <tcp_parseopt+0xe0>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d053      	beq.n	800af48 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aea0:	4b2f      	ldr	r3, [pc, #188]	; (800af60 <tcp_parseopt+0xe4>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	801a      	strh	r2, [r3, #0]
 800aea6:	e043      	b.n	800af30 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800aea8:	f7ff ffb2 	bl	800ae10 <tcp_get_next_optbyte>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d03c      	beq.n	800af30 <tcp_parseopt+0xb4>
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d002      	beq.n	800aec0 <tcp_parseopt+0x44>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d03f      	beq.n	800af3e <tcp_parseopt+0xc2>
 800aebe:	e026      	b.n	800af0e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aec0:	f7ff ffa6 	bl	800ae10 <tcp_get_next_optbyte>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d13b      	bne.n	800af42 <tcp_parseopt+0xc6>
 800aeca:	4b25      	ldr	r3, [pc, #148]	; (800af60 <tcp_parseopt+0xe4>)
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	3302      	adds	r3, #2
 800aed0:	4a22      	ldr	r2, [pc, #136]	; (800af5c <tcp_parseopt+0xe0>)
 800aed2:	8812      	ldrh	r2, [r2, #0]
 800aed4:	4293      	cmp	r3, r2
 800aed6:	dc34      	bgt.n	800af42 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800aed8:	f7ff ff9a 	bl	800ae10 <tcp_get_next_optbyte>
 800aedc:	4603      	mov	r3, r0
 800aede:	b29b      	uxth	r3, r3
 800aee0:	021b      	lsls	r3, r3, #8
 800aee2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800aee4:	f7ff ff94 	bl	800ae10 <tcp_get_next_optbyte>
 800aee8:	4603      	mov	r3, r0
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	89bb      	ldrh	r3, [r7, #12]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aef2:	89bb      	ldrh	r3, [r7, #12]
 800aef4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aef8:	d804      	bhi.n	800af04 <tcp_parseopt+0x88>
 800aefa:	89bb      	ldrh	r3, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <tcp_parseopt+0x88>
 800af00:	89ba      	ldrh	r2, [r7, #12]
 800af02:	e001      	b.n	800af08 <tcp_parseopt+0x8c>
 800af04:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af0c:	e010      	b.n	800af30 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af0e:	f7ff ff7f 	bl	800ae10 <tcp_get_next_optbyte>
 800af12:	4603      	mov	r3, r0
 800af14:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d914      	bls.n	800af46 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	b29a      	uxth	r2, r3
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <tcp_parseopt+0xe4>)
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	4413      	add	r3, r2
 800af26:	b29b      	uxth	r3, r3
 800af28:	3b02      	subs	r3, #2
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <tcp_parseopt+0xe4>)
 800af2e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <tcp_parseopt+0xe4>)
 800af32:	881a      	ldrh	r2, [r3, #0]
 800af34:	4b09      	ldr	r3, [pc, #36]	; (800af5c <tcp_parseopt+0xe0>)
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d3b5      	bcc.n	800aea8 <tcp_parseopt+0x2c>
 800af3c:	e004      	b.n	800af48 <tcp_parseopt+0xcc>
          return;
 800af3e:	bf00      	nop
 800af40:	e002      	b.n	800af48 <tcp_parseopt+0xcc>
            return;
 800af42:	bf00      	nop
 800af44:	e000      	b.n	800af48 <tcp_parseopt+0xcc>
            return;
 800af46:	bf00      	nop
      }
    }
  }
}
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	080125d8 	.word	0x080125d8
 800af54:	08012a3c 	.word	0x08012a3c
 800af58:	08012624 	.word	0x08012624
 800af5c:	20000544 	.word	0x20000544
 800af60:	2000054c 	.word	0x2000054c

0800af64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <tcp_trigger_input_pcb_close+0x1c>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	f043 0310 	orr.w	r3, r3, #16
 800af70:	b2da      	uxtb	r2, r3
 800af72:	4b03      	ldr	r3, [pc, #12]	; (800af80 <tcp_trigger_input_pcb_close+0x1c>)
 800af74:	701a      	strb	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	2000055d 	.word	0x2000055d

0800af84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <tcp_route+0x28>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	7a1b      	ldrb	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	7a1b      	ldrb	r3, [r3, #8]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fb f8b2 	bl	800610c <netif_get_by_index>
 800afa8:	4603      	mov	r3, r0
 800afaa:	e003      	b.n	800afb4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f003 fe9f 	bl	800ecf0 <ip4_route>
 800afb2:	4603      	mov	r3, r0
  }
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <tcp_create_segment+0x22>
 800afd2:	4b44      	ldr	r3, [pc, #272]	; (800b0e4 <tcp_create_segment+0x128>)
 800afd4:	22a3      	movs	r2, #163	; 0xa3
 800afd6:	4944      	ldr	r1, [pc, #272]	; (800b0e8 <tcp_create_segment+0x12c>)
 800afd8:	4844      	ldr	r0, [pc, #272]	; (800b0ec <tcp_create_segment+0x130>)
 800afda:	f005 f8af 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d105      	bne.n	800aff0 <tcp_create_segment+0x34>
 800afe4:	4b3f      	ldr	r3, [pc, #252]	; (800b0e4 <tcp_create_segment+0x128>)
 800afe6:	22a4      	movs	r2, #164	; 0xa4
 800afe8:	4941      	ldr	r1, [pc, #260]	; (800b0f0 <tcp_create_segment+0x134>)
 800afea:	4840      	ldr	r0, [pc, #256]	; (800b0ec <tcp_create_segment+0x130>)
 800afec:	f005 f8a6 	bl	801013c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0304 	and.w	r3, r3, #4
 800affc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800affe:	2003      	movs	r0, #3
 800b000:	f7fa fd86 	bl	8005b10 <memp_malloc>
 800b004:	6138      	str	r0, [r7, #16]
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d104      	bne.n	800b016 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b00c:	68b8      	ldr	r0, [r7, #8]
 800b00e:	f7fb fbd9 	bl	80067c4 <pbuf_free>
    return NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	e061      	b.n	800b0da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b01c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	891a      	ldrh	r2, [r3, #8]
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	b29b      	uxth	r3, r3
 800b032:	429a      	cmp	r2, r3
 800b034:	d205      	bcs.n	800b042 <tcp_create_segment+0x86>
 800b036:	4b2b      	ldr	r3, [pc, #172]	; (800b0e4 <tcp_create_segment+0x128>)
 800b038:	22b0      	movs	r2, #176	; 0xb0
 800b03a:	492e      	ldr	r1, [pc, #184]	; (800b0f4 <tcp_create_segment+0x138>)
 800b03c:	482b      	ldr	r0, [pc, #172]	; (800b0ec <tcp_create_segment+0x130>)
 800b03e:	f005 f87d 	bl	801013c <iprintf>
  seg->len = p->tot_len - optlen;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	891a      	ldrh	r2, [r3, #8]
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b052:	2114      	movs	r1, #20
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f7fb fb1f 	bl	8006698 <pbuf_add_header>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b060:	6938      	ldr	r0, [r7, #16]
 800b062:	f7fc ffe1 	bl	8008028 <tcp_seg_free>
    return NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	e037      	b.n	800b0da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	8ada      	ldrh	r2, [r3, #22]
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	68dc      	ldr	r4, [r3, #12]
 800b07c:	4610      	mov	r0, r2
 800b07e:	f7fa f887 	bl	8005190 <lwip_htons>
 800b082:	4603      	mov	r3, r0
 800b084:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8b1a      	ldrh	r2, [r3, #24]
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	68dc      	ldr	r4, [r3, #12]
 800b08e:	4610      	mov	r0, r2
 800b090:	f7fa f87e 	bl	8005190 <lwip_htons>
 800b094:	4603      	mov	r3, r0
 800b096:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	68dc      	ldr	r4, [r3, #12]
 800b09c:	6838      	ldr	r0, [r7, #0]
 800b09e:	f7fa f88c 	bl	80051ba <lwip_htonl>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	089b      	lsrs	r3, r3, #2
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	3305      	adds	r3, #5
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	031b      	lsls	r3, r3, #12
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	68dc      	ldr	r4, [r3, #12]
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f7fa f864 	bl	8005190 <lwip_htons>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	749a      	strb	r2, [r3, #18]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	74da      	strb	r2, [r3, #19]
  return seg;
 800b0d8:	693b      	ldr	r3, [r7, #16]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd90      	pop	{r4, r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	08012a58 	.word	0x08012a58
 800b0e8:	08012a8c 	.word	0x08012a8c
 800b0ec:	08012aac 	.word	0x08012aac
 800b0f0:	08012ad4 	.word	0x08012ad4
 800b0f4:	08012af8 	.word	0x08012af8

0800b0f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	607b      	str	r3, [r7, #4]
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
 800b104:	460b      	mov	r3, r1
 800b106:	81bb      	strh	r3, [r7, #12]
 800b108:	4613      	mov	r3, r2
 800b10a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b10c:	89bb      	ldrh	r3, [r7, #12]
 800b10e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d105      	bne.n	800b122 <tcp_pbuf_prealloc+0x2a>
 800b116:	4b30      	ldr	r3, [pc, #192]	; (800b1d8 <tcp_pbuf_prealloc+0xe0>)
 800b118:	22e8      	movs	r2, #232	; 0xe8
 800b11a:	4930      	ldr	r1, [pc, #192]	; (800b1dc <tcp_pbuf_prealloc+0xe4>)
 800b11c:	4830      	ldr	r0, [pc, #192]	; (800b1e0 <tcp_pbuf_prealloc+0xe8>)
 800b11e:	f005 f80d 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d105      	bne.n	800b134 <tcp_pbuf_prealloc+0x3c>
 800b128:	4b2b      	ldr	r3, [pc, #172]	; (800b1d8 <tcp_pbuf_prealloc+0xe0>)
 800b12a:	22e9      	movs	r2, #233	; 0xe9
 800b12c:	492d      	ldr	r1, [pc, #180]	; (800b1e4 <tcp_pbuf_prealloc+0xec>)
 800b12e:	482c      	ldr	r0, [pc, #176]	; (800b1e0 <tcp_pbuf_prealloc+0xe8>)
 800b130:	f005 f804 	bl	801013c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b134:	89ba      	ldrh	r2, [r7, #12]
 800b136:	897b      	ldrh	r3, [r7, #10]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d221      	bcs.n	800b180 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b13c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d111      	bne.n	800b16c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	8b5b      	ldrh	r3, [r3, #26]
 800b14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b150:	2b00      	cmp	r3, #0
 800b152:	d115      	bne.n	800b180 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b154:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d007      	beq.n	800b16c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b16c:	89bb      	ldrh	r3, [r7, #12]
 800b16e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b172:	f023 0203 	bic.w	r2, r3, #3
 800b176:	897b      	ldrh	r3, [r7, #10]
 800b178:	4293      	cmp	r3, r2
 800b17a:	bf28      	it	cs
 800b17c:	4613      	movcs	r3, r2
 800b17e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b180:	8af9      	ldrh	r1, [r7, #22]
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fb f83b 	bl	8006204 <pbuf_alloc>
 800b18e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	e019      	b.n	800b1ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <tcp_pbuf_prealloc+0xb8>
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <tcp_pbuf_prealloc+0xe0>)
 800b1a4:	f240 120b 	movw	r2, #267	; 0x10b
 800b1a8:	490f      	ldr	r1, [pc, #60]	; (800b1e8 <tcp_pbuf_prealloc+0xf0>)
 800b1aa:	480d      	ldr	r0, [pc, #52]	; (800b1e0 <tcp_pbuf_prealloc+0xe8>)
 800b1ac:	f004 ffc6 	bl	801013c <iprintf>
  *oversize = p->len - length;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	895a      	ldrh	r2, [r3, #10]
 800b1b4:	89bb      	ldrh	r3, [r7, #12]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	89ba      	ldrh	r2, [r7, #12]
 800b1c2:	811a      	strh	r2, [r3, #8]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	891a      	ldrh	r2, [r3, #8]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	815a      	strh	r2, [r3, #10]
  return p;
 800b1cc:	693b      	ldr	r3, [r7, #16]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3718      	adds	r7, #24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	08012a58 	.word	0x08012a58
 800b1dc:	08012b10 	.word	0x08012b10
 800b1e0:	08012aac 	.word	0x08012aac
 800b1e4:	08012b34 	.word	0x08012b34
 800b1e8:	08012b54 	.word	0x08012b54

0800b1ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d106      	bne.n	800b20c <tcp_write_checks+0x20>
 800b1fe:	4b33      	ldr	r3, [pc, #204]	; (800b2cc <tcp_write_checks+0xe0>)
 800b200:	f240 1233 	movw	r2, #307	; 0x133
 800b204:	4932      	ldr	r1, [pc, #200]	; (800b2d0 <tcp_write_checks+0xe4>)
 800b206:	4833      	ldr	r0, [pc, #204]	; (800b2d4 <tcp_write_checks+0xe8>)
 800b208:	f004 ff98 	bl	801013c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7d1b      	ldrb	r3, [r3, #20]
 800b210:	2b04      	cmp	r3, #4
 800b212:	d00e      	beq.n	800b232 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b218:	2b07      	cmp	r3, #7
 800b21a:	d00a      	beq.n	800b232 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b220:	2b02      	cmp	r3, #2
 800b222:	d006      	beq.n	800b232 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d002      	beq.n	800b232 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b22c:	f06f 030a 	mvn.w	r3, #10
 800b230:	e048      	b.n	800b2c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b232:	887b      	ldrh	r3, [r7, #2]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <tcp_write_checks+0x50>
    return ERR_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	e043      	b.n	800b2c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b242:	887a      	ldrh	r2, [r7, #2]
 800b244:	429a      	cmp	r2, r3
 800b246:	d909      	bls.n	800b25c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8b5b      	ldrh	r3, [r3, #26]
 800b24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b256:	f04f 33ff 	mov.w	r3, #4294967295
 800b25a:	e033      	b.n	800b2c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b262:	2b08      	cmp	r3, #8
 800b264:	d909      	bls.n	800b27a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	8b5b      	ldrh	r3, [r3, #26]
 800b26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b26e:	b29a      	uxth	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b274:	f04f 33ff 	mov.w	r3, #4294967295
 800b278:	e024      	b.n	800b2c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00f      	beq.n	800b2a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d11a      	bne.n	800b2c2 <tcp_write_checks+0xd6>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d116      	bne.n	800b2c2 <tcp_write_checks+0xd6>
 800b294:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <tcp_write_checks+0xe0>)
 800b296:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800b29a:	490f      	ldr	r1, [pc, #60]	; (800b2d8 <tcp_write_checks+0xec>)
 800b29c:	480d      	ldr	r0, [pc, #52]	; (800b2d4 <tcp_write_checks+0xe8>)
 800b29e:	f004 ff4d 	bl	801013c <iprintf>
 800b2a2:	e00e      	b.n	800b2c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <tcp_write_checks+0xc8>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d006      	beq.n	800b2c2 <tcp_write_checks+0xd6>
 800b2b4:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <tcp_write_checks+0xe0>)
 800b2b6:	f240 1259 	movw	r2, #345	; 0x159
 800b2ba:	4908      	ldr	r1, [pc, #32]	; (800b2dc <tcp_write_checks+0xf0>)
 800b2bc:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <tcp_write_checks+0xe8>)
 800b2be:	f004 ff3d 	bl	801013c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	08012a58 	.word	0x08012a58
 800b2d0:	08012b68 	.word	0x08012b68
 800b2d4:	08012aac 	.word	0x08012aac
 800b2d8:	08012b88 	.word	0x08012b88
 800b2dc:	08012bc4 	.word	0x08012bc4

0800b2e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b09b      	sub	sp, #108	; 0x6c
 800b2e4:	af04      	add	r7, sp, #16
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	80fb      	strh	r3, [r7, #6]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	653b      	str	r3, [r7, #80]	; 0x50
 800b2fe:	2300      	movs	r3, #0
 800b300:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b302:	2300      	movs	r3, #0
 800b304:	64bb      	str	r3, [r7, #72]	; 0x48
 800b306:	2300      	movs	r3, #0
 800b308:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b30a:	2300      	movs	r3, #0
 800b30c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d109      	bne.n	800b33c <tcp_write+0x5c>
 800b328:	4ba5      	ldr	r3, [pc, #660]	; (800b5c0 <tcp_write+0x2e0>)
 800b32a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b32e:	49a5      	ldr	r1, [pc, #660]	; (800b5c4 <tcp_write+0x2e4>)
 800b330:	48a5      	ldr	r0, [pc, #660]	; (800b5c8 <tcp_write+0x2e8>)
 800b332:	f004 ff03 	bl	801013c <iprintf>
 800b336:	f06f 030f 	mvn.w	r3, #15
 800b33a:	e32c      	b.n	800b996 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b342:	085b      	lsrs	r3, r3, #1
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b34a:	4293      	cmp	r3, r2
 800b34c:	bf28      	it	cs
 800b34e:	4613      	movcs	r3, r2
 800b350:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <tcp_write+0x7e>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b35c:	e000      	b.n	800b360 <tcp_write+0x80>
 800b35e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b360:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d109      	bne.n	800b37c <tcp_write+0x9c>
 800b368:	4b95      	ldr	r3, [pc, #596]	; (800b5c0 <tcp_write+0x2e0>)
 800b36a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800b36e:	4997      	ldr	r1, [pc, #604]	; (800b5cc <tcp_write+0x2ec>)
 800b370:	4895      	ldr	r0, [pc, #596]	; (800b5c8 <tcp_write+0x2e8>)
 800b372:	f004 fee3 	bl	801013c <iprintf>
 800b376:	f06f 030f 	mvn.w	r3, #15
 800b37a:	e30c      	b.n	800b996 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b37c:	88fb      	ldrh	r3, [r7, #6]
 800b37e:	4619      	mov	r1, r3
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7ff ff33 	bl	800b1ec <tcp_write_checks>
 800b386:	4603      	mov	r3, r0
 800b388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b38c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <tcp_write+0xba>
    return err;
 800b394:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b398:	e2fd      	b.n	800b996 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 80f7 	beq.w	800b5a2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3ba:	e002      	b.n	800b3c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f8      	bne.n	800b3bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3cc:	7a9b      	ldrb	r3, [r3, #10]
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b3d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3dc:	891b      	ldrh	r3, [r3, #8]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	8c3b      	ldrh	r3, [r7, #32]
 800b3e2:	440b      	add	r3, r1
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	da06      	bge.n	800b3f6 <tcp_write+0x116>
 800b3e8:	4b75      	ldr	r3, [pc, #468]	; (800b5c0 <tcp_write+0x2e0>)
 800b3ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b3ee:	4978      	ldr	r1, [pc, #480]	; (800b5d0 <tcp_write+0x2f0>)
 800b3f0:	4875      	ldr	r0, [pc, #468]	; (800b5c8 <tcp_write+0x2e8>)
 800b3f2:	f004 fea3 	bl	801013c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f8:	891a      	ldrh	r2, [r3, #8]
 800b3fa:	8c3b      	ldrh	r3, [r7, #32]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b40c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b40e:	8a7b      	ldrh	r3, [r7, #18]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d027      	beq.n	800b464 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b414:	8a7b      	ldrh	r3, [r7, #18]
 800b416:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b418:	429a      	cmp	r2, r3
 800b41a:	d206      	bcs.n	800b42a <tcp_write+0x14a>
 800b41c:	4b68      	ldr	r3, [pc, #416]	; (800b5c0 <tcp_write+0x2e0>)
 800b41e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b422:	496c      	ldr	r1, [pc, #432]	; (800b5d4 <tcp_write+0x2f4>)
 800b424:	4868      	ldr	r0, [pc, #416]	; (800b5c8 <tcp_write+0x2e8>)
 800b426:	f004 fe89 	bl	801013c <iprintf>
      seg = last_unsent;
 800b42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b42c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b42e:	8a7b      	ldrh	r3, [r7, #18]
 800b430:	88fa      	ldrh	r2, [r7, #6]
 800b432:	429a      	cmp	r2, r3
 800b434:	d901      	bls.n	800b43a <tcp_write+0x15a>
 800b436:	8a7b      	ldrh	r3, [r7, #18]
 800b438:	e000      	b.n	800b43c <tcp_write+0x15c>
 800b43a:	88fb      	ldrh	r3, [r7, #6]
 800b43c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b43e:	4293      	cmp	r3, r2
 800b440:	bfa8      	it	ge
 800b442:	4613      	movge	r3, r2
 800b444:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b446:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b44a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b44c:	4413      	add	r3, r2
 800b44e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b452:	8a7a      	ldrh	r2, [r7, #18]
 800b454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	b29b      	uxth	r3, r3
 800b45a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b45c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b45e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <tcp_write+0x1a2>
 800b46a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b46e:	88fb      	ldrh	r3, [r7, #6]
 800b470:	429a      	cmp	r2, r3
 800b472:	d006      	beq.n	800b482 <tcp_write+0x1a2>
 800b474:	4b52      	ldr	r3, [pc, #328]	; (800b5c0 <tcp_write+0x2e0>)
 800b476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b47a:	4957      	ldr	r1, [pc, #348]	; (800b5d8 <tcp_write+0x2f8>)
 800b47c:	4852      	ldr	r0, [pc, #328]	; (800b5c8 <tcp_write+0x2e8>)
 800b47e:	f004 fe5d 	bl	801013c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b482:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	429a      	cmp	r2, r3
 800b48a:	f080 8168 	bcs.w	800b75e <tcp_write+0x47e>
 800b48e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 8164 	beq.w	800b75e <tcp_write+0x47e>
 800b496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b498:	891b      	ldrh	r3, [r3, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 815f 	beq.w	800b75e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4a0:	88fa      	ldrh	r2, [r7, #6]
 800b4a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4a6:	1ad2      	subs	r2, r2, r3
 800b4a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	bfa8      	it	ge
 800b4ae:	4613      	movge	r3, r2
 800b4b0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4b6:	797b      	ldrb	r3, [r7, #5]
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d027      	beq.n	800b510 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b4c0:	f107 0012 	add.w	r0, r7, #18
 800b4c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4c6:	8bf9      	ldrh	r1, [r7, #30]
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	797b      	ldrb	r3, [r7, #5]
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f7ff fe0e 	bl	800b0f8 <tcp_pbuf_prealloc>
 800b4dc:	6578      	str	r0, [r7, #84]	; 0x54
 800b4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 8226 	beq.w	800b932 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e8:	6858      	ldr	r0, [r3, #4]
 800b4ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	8bfa      	ldrh	r2, [r7, #30]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	f004 fe0e 	bl	8010116 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b4fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b4fc:	f7fb f9ea 	bl	80068d4 <pbuf_clen>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b508:	4413      	add	r3, r2
 800b50a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b50e:	e041      	b.n	800b594 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	637b      	str	r3, [r7, #52]	; 0x34
 800b516:	e002      	b.n	800b51e <tcp_write+0x23e>
 800b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	637b      	str	r3, [r7, #52]	; 0x34
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1f8      	bne.n	800b518 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b528:	7b1b      	ldrb	r3, [r3, #12]
 800b52a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d115      	bne.n	800b55e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b538:	8952      	ldrh	r2, [r2, #10]
 800b53a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d10d      	bne.n	800b55e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b546:	2b00      	cmp	r3, #0
 800b548:	d006      	beq.n	800b558 <tcp_write+0x278>
 800b54a:	4b1d      	ldr	r3, [pc, #116]	; (800b5c0 <tcp_write+0x2e0>)
 800b54c:	f240 2231 	movw	r2, #561	; 0x231
 800b550:	4922      	ldr	r1, [pc, #136]	; (800b5dc <tcp_write+0x2fc>)
 800b552:	481d      	ldr	r0, [pc, #116]	; (800b5c8 <tcp_write+0x2e8>)
 800b554:	f004 fdf2 	bl	801013c <iprintf>
          extendlen = seglen;
 800b558:	8bfb      	ldrh	r3, [r7, #30]
 800b55a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b55c:	e01a      	b.n	800b594 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b55e:	8bfb      	ldrh	r3, [r7, #30]
 800b560:	2201      	movs	r2, #1
 800b562:	4619      	mov	r1, r3
 800b564:	2000      	movs	r0, #0
 800b566:	f7fa fe4d 	bl	8006204 <pbuf_alloc>
 800b56a:	6578      	str	r0, [r7, #84]	; 0x54
 800b56c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 81e1 	beq.w	800b936 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b574:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	441a      	add	r2, r3
 800b57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b580:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b582:	f7fb f9a7 	bl	80068d4 <pbuf_clen>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b58e:	4413      	add	r3, r2
 800b590:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b594:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b598:	8bfb      	ldrh	r3, [r7, #30]
 800b59a:	4413      	add	r3, r2
 800b59c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b5a0:	e0dd      	b.n	800b75e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 80d8 	beq.w	800b75e <tcp_write+0x47e>
 800b5ae:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <tcp_write+0x2e0>)
 800b5b0:	f240 224b 	movw	r2, #587	; 0x24b
 800b5b4:	490a      	ldr	r1, [pc, #40]	; (800b5e0 <tcp_write+0x300>)
 800b5b6:	4804      	ldr	r0, [pc, #16]	; (800b5c8 <tcp_write+0x2e8>)
 800b5b8:	f004 fdc0 	bl	801013c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b5bc:	e0cf      	b.n	800b75e <tcp_write+0x47e>
 800b5be:	bf00      	nop
 800b5c0:	08012a58 	.word	0x08012a58
 800b5c4:	08012bf8 	.word	0x08012bf8
 800b5c8:	08012aac 	.word	0x08012aac
 800b5cc:	08012c10 	.word	0x08012c10
 800b5d0:	08012c44 	.word	0x08012c44
 800b5d4:	08012c5c 	.word	0x08012c5c
 800b5d8:	08012c7c 	.word	0x08012c7c
 800b5dc:	08012c9c 	.word	0x08012c9c
 800b5e0:	08012cc8 	.word	0x08012cc8
    struct pbuf *p;
    u16_t left = len - pos;
 800b5e4:	88fa      	ldrh	r2, [r7, #6]
 800b5e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b5ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b5fa:	8b7a      	ldrh	r2, [r7, #26]
 800b5fc:	8bbb      	ldrh	r3, [r7, #28]
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bf28      	it	cs
 800b602:	4613      	movcs	r3, r2
 800b604:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b606:	797b      	ldrb	r3, [r7, #5]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d036      	beq.n	800b67e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b614:	b29a      	uxth	r2, r3
 800b616:	8b3b      	ldrh	r3, [r7, #24]
 800b618:	4413      	add	r3, r2
 800b61a:	b299      	uxth	r1, r3
 800b61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bf0c      	ite	eq
 800b622:	2301      	moveq	r3, #1
 800b624:	2300      	movne	r3, #0
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f107 0012 	add.w	r0, r7, #18
 800b62c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b62e:	9302      	str	r3, [sp, #8]
 800b630:	797b      	ldrb	r3, [r7, #5]
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4603      	mov	r3, r0
 800b63a:	2036      	movs	r0, #54	; 0x36
 800b63c:	f7ff fd5c 	bl	800b0f8 <tcp_pbuf_prealloc>
 800b640:	6338      	str	r0, [r7, #48]	; 0x30
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 8178 	beq.w	800b93a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	895b      	ldrh	r3, [r3, #10]
 800b64e:	8b3a      	ldrh	r2, [r7, #24]
 800b650:	429a      	cmp	r2, r3
 800b652:	d906      	bls.n	800b662 <tcp_write+0x382>
 800b654:	4b8c      	ldr	r3, [pc, #560]	; (800b888 <tcp_write+0x5a8>)
 800b656:	f240 2267 	movw	r2, #615	; 0x267
 800b65a:	498c      	ldr	r1, [pc, #560]	; (800b88c <tcp_write+0x5ac>)
 800b65c:	488c      	ldr	r0, [pc, #560]	; (800b890 <tcp_write+0x5b0>)
 800b65e:	f004 fd6d 	bl	801013c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b66a:	18d0      	adds	r0, r2, r3
 800b66c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	4413      	add	r3, r2
 800b674:	8b3a      	ldrh	r2, [r7, #24]
 800b676:	4619      	mov	r1, r3
 800b678:	f004 fd4d 	bl	8010116 <memcpy>
 800b67c:	e02f      	b.n	800b6de <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b67e:	8a7b      	ldrh	r3, [r7, #18]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <tcp_write+0x3b2>
 800b684:	4b80      	ldr	r3, [pc, #512]	; (800b888 <tcp_write+0x5a8>)
 800b686:	f240 2271 	movw	r2, #625	; 0x271
 800b68a:	4982      	ldr	r1, [pc, #520]	; (800b894 <tcp_write+0x5b4>)
 800b68c:	4880      	ldr	r0, [pc, #512]	; (800b890 <tcp_write+0x5b0>)
 800b68e:	f004 fd55 	bl	801013c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b692:	8b3b      	ldrh	r3, [r7, #24]
 800b694:	2201      	movs	r2, #1
 800b696:	4619      	mov	r1, r3
 800b698:	2036      	movs	r0, #54	; 0x36
 800b69a:	f7fa fdb3 	bl	8006204 <pbuf_alloc>
 800b69e:	6178      	str	r0, [r7, #20]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 814b 	beq.w	800b93e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	441a      	add	r2, r3
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6be:	4619      	mov	r1, r3
 800b6c0:	2036      	movs	r0, #54	; 0x36
 800b6c2:	f7fa fd9f 	bl	8006204 <pbuf_alloc>
 800b6c6:	6338      	str	r0, [r7, #48]	; 0x30
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b6ce:	6978      	ldr	r0, [r7, #20]
 800b6d0:	f7fb f878 	bl	80067c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b6d4:	e136      	b.n	800b944 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b6d6:	6979      	ldr	r1, [r7, #20]
 800b6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6da:	f7fb f935 	bl	8006948 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b6de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e0:	f7fb f8f8 	bl	80068d4 <pbuf_clen>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b6f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6f6:	2b09      	cmp	r3, #9
 800b6f8:	d903      	bls.n	800b702 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b6fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fc:	f7fb f862 	bl	80067c4 <pbuf_free>
      goto memerr;
 800b700:	e120      	b.n	800b944 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b70a:	441a      	add	r2, r3
 800b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4613      	mov	r3, r2
 800b714:	2200      	movs	r2, #0
 800b716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f7ff fc4f 	bl	800afbc <tcp_create_segment>
 800b71e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b722:	2b00      	cmp	r3, #0
 800b724:	f000 810d 	beq.w	800b942 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <tcp_write+0x454>
      queue = seg;
 800b72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b730:	647b      	str	r3, [r7, #68]	; 0x44
 800b732:	e00c      	b.n	800b74e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <tcp_write+0x468>
 800b73a:	4b53      	ldr	r3, [pc, #332]	; (800b888 <tcp_write+0x5a8>)
 800b73c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b740:	4955      	ldr	r1, [pc, #340]	; (800b898 <tcp_write+0x5b8>)
 800b742:	4853      	ldr	r0, [pc, #332]	; (800b890 <tcp_write+0x5b0>)
 800b744:	f004 fcfa 	bl	801013c <iprintf>
      prev_seg->next = seg;
 800b748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b74c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b750:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b752:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b756:	8b3b      	ldrh	r3, [r7, #24]
 800b758:	4413      	add	r3, r2
 800b75a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b75e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b762:	88fb      	ldrh	r3, [r7, #6]
 800b764:	429a      	cmp	r2, r3
 800b766:	f4ff af3d 	bcc.w	800b5e4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b76a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d02c      	beq.n	800b7ca <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b776:	e01e      	b.n	800b7b6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	891a      	ldrh	r2, [r3, #8]
 800b77c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b77e:	4413      	add	r3, r2
 800b780:	b29a      	uxth	r2, r3
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d110      	bne.n	800b7b0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b794:	8952      	ldrh	r2, [r2, #10]
 800b796:	4413      	add	r3, r2
 800b798:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f004 fcba 	bl	8010116 <memcpy>
        p->len += oversize_used;
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	895a      	ldrh	r2, [r3, #10]
 800b7a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7a8:	4413      	add	r3, r2
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1dd      	bne.n	800b778 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800b7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7be:	891a      	ldrh	r2, [r3, #8]
 800b7c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7c2:	4413      	add	r3, r2
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b7ca:	8a7a      	ldrh	r2, [r7, #18]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d018      	beq.n	800b80a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <tcp_write+0x50c>
 800b7de:	4b2a      	ldr	r3, [pc, #168]	; (800b888 <tcp_write+0x5a8>)
 800b7e0:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b7e4:	492d      	ldr	r1, [pc, #180]	; (800b89c <tcp_write+0x5bc>)
 800b7e6:	482a      	ldr	r0, [pc, #168]	; (800b890 <tcp_write+0x5b0>)
 800b7e8:	f004 fca8 	bl	801013c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fb f8a8 	bl	8006948 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7fa:	891a      	ldrh	r2, [r3, #8]
 800b7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7fe:	891b      	ldrh	r3, [r3, #8]
 800b800:	4413      	add	r3, r2
 800b802:	b29a      	uxth	r2, r3
 800b804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b806:	811a      	strh	r2, [r3, #8]
 800b808:	e037      	b.n	800b87a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800b80a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d034      	beq.n	800b87a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <tcp_write+0x53e>
 800b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <tcp_write+0x54c>
 800b81e:	4b1a      	ldr	r3, [pc, #104]	; (800b888 <tcp_write+0x5a8>)
 800b820:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b824:	491e      	ldr	r1, [pc, #120]	; (800b8a0 <tcp_write+0x5c0>)
 800b826:	481a      	ldr	r0, [pc, #104]	; (800b890 <tcp_write+0x5b0>)
 800b828:	f004 fc88 	bl	801013c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
 800b832:	e009      	b.n	800b848 <tcp_write+0x568>
      p->tot_len += extendlen;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	891a      	ldrh	r2, [r3, #8]
 800b838:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b83a:	4413      	add	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	62bb      	str	r3, [r7, #40]	; 0x28
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1f1      	bne.n	800b834 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	891a      	ldrh	r2, [r3, #8]
 800b854:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b856:	4413      	add	r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	895a      	ldrh	r2, [r3, #10]
 800b862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b864:	4413      	add	r3, r2
 800b866:	b29a      	uxth	r2, r3
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86e:	891a      	ldrh	r2, [r3, #8]
 800b870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b872:	4413      	add	r3, r2
 800b874:	b29a      	uxth	r2, r3
 800b876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b878:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d111      	bne.n	800b8a4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b884:	66da      	str	r2, [r3, #108]	; 0x6c
 800b886:	e010      	b.n	800b8aa <tcp_write+0x5ca>
 800b888:	08012a58 	.word	0x08012a58
 800b88c:	08012cf8 	.word	0x08012cf8
 800b890:	08012aac 	.word	0x08012aac
 800b894:	08012d38 	.word	0x08012d38
 800b898:	08012d48 	.word	0x08012d48
 800b89c:	08012d5c 	.word	0x08012d5c
 800b8a0:	08012d94 	.word	0x08012d94
  } else {
    last_unsent->next = queue;
 800b8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8a8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b8bc:	88fb      	ldrh	r3, [r7, #6]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b8ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00e      	beq.n	800b8fa <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <tcp_write+0x61a>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d106      	bne.n	800b8fa <tcp_write+0x61a>
 800b8ec:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <tcp_write+0x6c0>)
 800b8ee:	f240 3213 	movw	r2, #787	; 0x313
 800b8f2:	492c      	ldr	r1, [pc, #176]	; (800b9a4 <tcp_write+0x6c4>)
 800b8f4:	482c      	ldr	r0, [pc, #176]	; (800b9a8 <tcp_write+0x6c8>)
 800b8f6:	f004 fc21 	bl	801013c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d016      	beq.n	800b92e <tcp_write+0x64e>
 800b900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d012      	beq.n	800b92e <tcp_write+0x64e>
 800b908:	797b      	ldrb	r3, [r7, #5]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10d      	bne.n	800b92e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	899b      	ldrh	r3, [r3, #12]
 800b918:	b29c      	uxth	r4, r3
 800b91a:	2008      	movs	r0, #8
 800b91c:	f7f9 fc38 	bl	8005190 <lwip_htons>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	4322      	orrs	r2, r4
 800b92a:	b292      	uxth	r2, r2
 800b92c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	e031      	b.n	800b996 <tcp_write+0x6b6>
          goto memerr;
 800b932:	bf00      	nop
 800b934:	e006      	b.n	800b944 <tcp_write+0x664>
            goto memerr;
 800b936:	bf00      	nop
 800b938:	e004      	b.n	800b944 <tcp_write+0x664>
        goto memerr;
 800b93a:	bf00      	nop
 800b93c:	e002      	b.n	800b944 <tcp_write+0x664>
        goto memerr;
 800b93e:	bf00      	nop
 800b940:	e000      	b.n	800b944 <tcp_write+0x664>
      goto memerr;
 800b942:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8b5b      	ldrh	r3, [r3, #26]
 800b948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <tcp_write+0x67e>
    pbuf_free(concat_p);
 800b958:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b95a:	f7fa ff33 	bl	80067c4 <pbuf_free>
  }
  if (queue != NULL) {
 800b95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <tcp_write+0x68a>
    tcp_segs_free(queue);
 800b964:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b966:	f7fc fb4b 	bl	8008000 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00e      	beq.n	800b992 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <tcp_write+0x6b2>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <tcp_write+0x6b2>
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <tcp_write+0x6c0>)
 800b986:	f44f 724a 	mov.w	r2, #808	; 0x328
 800b98a:	4906      	ldr	r1, [pc, #24]	; (800b9a4 <tcp_write+0x6c4>)
 800b98c:	4806      	ldr	r0, [pc, #24]	; (800b9a8 <tcp_write+0x6c8>)
 800b98e:	f004 fbd5 	bl	801013c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b996:	4618      	mov	r0, r3
 800b998:	375c      	adds	r7, #92	; 0x5c
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd90      	pop	{r4, r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08012a58 	.word	0x08012a58
 800b9a4:	08012dcc 	.word	0x08012dcc
 800b9a8:	08012aac 	.word	0x08012aac

0800b9ac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b08b      	sub	sp, #44	; 0x2c
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61fb      	str	r3, [r7, #28]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <tcp_split_unsent_seg+0x2c>
 800b9ca:	4b95      	ldr	r3, [pc, #596]	; (800bc20 <tcp_split_unsent_seg+0x274>)
 800b9cc:	f240 324b 	movw	r2, #843	; 0x34b
 800b9d0:	4994      	ldr	r1, [pc, #592]	; (800bc24 <tcp_split_unsent_seg+0x278>)
 800b9d2:	4895      	ldr	r0, [pc, #596]	; (800bc28 <tcp_split_unsent_seg+0x27c>)
 800b9d4:	f004 fbb2 	bl	801013c <iprintf>

  useg = pcb->unsent;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9dc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e8:	e116      	b.n	800bc18 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b9ea:	887b      	ldrh	r3, [r7, #2]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d109      	bne.n	800ba04 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b9f0:	4b8b      	ldr	r3, [pc, #556]	; (800bc20 <tcp_split_unsent_seg+0x274>)
 800b9f2:	f240 3253 	movw	r2, #851	; 0x353
 800b9f6:	498d      	ldr	r1, [pc, #564]	; (800bc2c <tcp_split_unsent_seg+0x280>)
 800b9f8:	488b      	ldr	r0, [pc, #556]	; (800bc28 <tcp_split_unsent_seg+0x27c>)
 800b9fa:	f004 fb9f 	bl	801013c <iprintf>
    return ERR_VAL;
 800b9fe:	f06f 0305 	mvn.w	r3, #5
 800ba02:	e109      	b.n	800bc18 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	891b      	ldrh	r3, [r3, #8]
 800ba08:	887a      	ldrh	r2, [r7, #2]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d301      	bcc.n	800ba12 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e102      	b.n	800bc18 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba16:	887a      	ldrh	r2, [r7, #2]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d906      	bls.n	800ba2a <tcp_split_unsent_seg+0x7e>
 800ba1c:	4b80      	ldr	r3, [pc, #512]	; (800bc20 <tcp_split_unsent_seg+0x274>)
 800ba1e:	f240 325b 	movw	r2, #859	; 0x35b
 800ba22:	4983      	ldr	r1, [pc, #524]	; (800bc30 <tcp_split_unsent_seg+0x284>)
 800ba24:	4880      	ldr	r0, [pc, #512]	; (800bc28 <tcp_split_unsent_seg+0x27c>)
 800ba26:	f004 fb89 	bl	801013c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	891b      	ldrh	r3, [r3, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <tcp_split_unsent_seg+0x94>
 800ba32:	4b7b      	ldr	r3, [pc, #492]	; (800bc20 <tcp_split_unsent_seg+0x274>)
 800ba34:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ba38:	497e      	ldr	r1, [pc, #504]	; (800bc34 <tcp_split_unsent_seg+0x288>)
 800ba3a:	487b      	ldr	r0, [pc, #492]	; (800bc28 <tcp_split_unsent_seg+0x27c>)
 800ba3c:	f004 fb7e 	bl	801013c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	7a9b      	ldrb	r3, [r3, #10]
 800ba44:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	891a      	ldrh	r2, [r3, #8]
 800ba56:	887b      	ldrh	r3, [r7, #2]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	89bb      	ldrh	r3, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	2036      	movs	r0, #54	; 0x36
 800ba6e:	f7fa fbc9 	bl	8006204 <pbuf_alloc>
 800ba72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 80b7 	beq.w	800bbea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	891a      	ldrh	r2, [r3, #8]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	891b      	ldrh	r3, [r3, #8]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	887b      	ldrh	r3, [r7, #2]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	6858      	ldr	r0, [r3, #4]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	18d1      	adds	r1, r2, r3
 800ba9c:	897b      	ldrh	r3, [r7, #10]
 800ba9e:	89ba      	ldrh	r2, [r7, #12]
 800baa0:	f7fb f88a 	bl	8006bb8 <pbuf_copy_partial>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461a      	mov	r2, r3
 800baa8:	89bb      	ldrh	r3, [r7, #12]
 800baaa:	4293      	cmp	r3, r2
 800baac:	f040 809f 	bne.w	800bbee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	899b      	ldrh	r3, [r3, #12]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4618      	mov	r0, r3
 800baba:	f7f9 fb69 	bl	8005190 <lwip_htons>
 800babe:	4603      	mov	r3, r0
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bac6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bac8:	2300      	movs	r3, #0
 800baca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bacc:	7efb      	ldrb	r3, [r7, #27]
 800bace:	f003 0308 	and.w	r3, r3, #8
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d007      	beq.n	800bae6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bad6:	7efb      	ldrb	r3, [r7, #27]
 800bad8:	f023 0308 	bic.w	r3, r3, #8
 800badc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bade:	7ebb      	ldrb	r3, [r7, #26]
 800bae0:	f043 0308 	orr.w	r3, r3, #8
 800bae4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bae6:	7efb      	ldrb	r3, [r7, #27]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800baf0:	7efb      	ldrb	r3, [r7, #27]
 800baf2:	f023 0301 	bic.w	r3, r3, #1
 800baf6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800baf8:	7ebb      	ldrb	r3, [r7, #26]
 800bafa:	f043 0301 	orr.w	r3, r3, #1
 800bafe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f9 fb57 	bl	80051ba <lwip_htonl>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	887b      	ldrh	r3, [r7, #2]
 800bb10:	18d1      	adds	r1, r2, r3
 800bb12:	7eba      	ldrb	r2, [r7, #26]
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	6939      	ldr	r1, [r7, #16]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fa4d 	bl	800afbc <tcp_create_segment>
 800bb22:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d063      	beq.n	800bbf2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fa fed0 	bl	80068d4 <pbuf_clen>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb3e:	1a9b      	subs	r3, r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	6858      	ldr	r0, [r3, #4]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	891a      	ldrh	r2, [r3, #8]
 800bb52:	89bb      	ldrh	r3, [r7, #12]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7fa fcad 	bl	80064b8 <pbuf_realloc>
  useg->len -= remainder;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	891a      	ldrh	r2, [r3, #8]
 800bb62:	89bb      	ldrh	r3, [r7, #12]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	899b      	ldrh	r3, [r3, #12]
 800bb72:	b29c      	uxth	r4, r3
 800bb74:	7efb      	ldrb	r3, [r7, #27]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f9 fb09 	bl	8005190 <lwip_htons>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	4322      	orrs	r2, r4
 800bb88:	b292      	uxth	r2, r2
 800bb8a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fa fe9f 	bl	80068d4 <pbuf_clen>
 800bb96:	4603      	mov	r3, r0
 800bb98:	461a      	mov	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bba0:	4413      	add	r3, r2
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fa fe90 	bl	80068d4 <pbuf_clen>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbbe:	4413      	add	r3, r2
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e016      	b.n	800bc18 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bbea:	bf00      	nop
 800bbec:	e002      	b.n	800bbf4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bbee:	bf00      	nop
 800bbf0:	e000      	b.n	800bbf4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bbf2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d006      	beq.n	800bc08 <tcp_split_unsent_seg+0x25c>
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <tcp_split_unsent_seg+0x274>)
 800bbfc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bc00:	490d      	ldr	r1, [pc, #52]	; (800bc38 <tcp_split_unsent_seg+0x28c>)
 800bc02:	4809      	ldr	r0, [pc, #36]	; (800bc28 <tcp_split_unsent_seg+0x27c>)
 800bc04:	f004 fa9a 	bl	801013c <iprintf>
  if (p != NULL) {
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f7fa fdd8 	bl	80067c4 <pbuf_free>
  }

  return ERR_MEM;
 800bc14:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3724      	adds	r7, #36	; 0x24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd90      	pop	{r4, r7, pc}
 800bc20:	08012a58 	.word	0x08012a58
 800bc24:	08012dec 	.word	0x08012dec
 800bc28:	08012aac 	.word	0x08012aac
 800bc2c:	08012e10 	.word	0x08012e10
 800bc30:	08012e34 	.word	0x08012e34
 800bc34:	08012e44 	.word	0x08012e44
 800bc38:	08012e54 	.word	0x08012e54

0800bc3c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d106      	bne.n	800bc58 <tcp_send_fin+0x1c>
 800bc4a:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <tcp_send_fin+0x94>)
 800bc4c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bc50:	4920      	ldr	r1, [pc, #128]	; (800bcd4 <tcp_send_fin+0x98>)
 800bc52:	4821      	ldr	r0, [pc, #132]	; (800bcd8 <tcp_send_fin+0x9c>)
 800bc54:	f004 fa72 	bl	801013c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d02e      	beq.n	800bcbe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e002      	b.n	800bc6e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1f8      	bne.n	800bc68 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	899b      	ldrh	r3, [r3, #12]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f9 fa86 	bl	8005190 <lwip_htons>
 800bc84:	4603      	mov	r3, r0
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	f003 0307 	and.w	r3, r3, #7
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d116      	bne.n	800bcbe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	899b      	ldrh	r3, [r3, #12]
 800bc96:	b29c      	uxth	r4, r3
 800bc98:	2001      	movs	r0, #1
 800bc9a:	f7f9 fa79 	bl	8005190 <lwip_htons>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	461a      	mov	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	4322      	orrs	r2, r4
 800bca8:	b292      	uxth	r2, r2
 800bcaa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	8b5b      	ldrh	r3, [r3, #26]
 800bcb0:	f043 0320 	orr.w	r3, r3, #32
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e004      	b.n	800bcc8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f80b 	bl	800bcdc <tcp_enqueue_flags>
 800bcc6:	4603      	mov	r3, r0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd90      	pop	{r4, r7, pc}
 800bcd0:	08012a58 	.word	0x08012a58
 800bcd4:	08012e60 	.word	0x08012e60
 800bcd8:	08012aac 	.word	0x08012aac

0800bcdc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	; 0x28
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d106      	bne.n	800bd08 <tcp_enqueue_flags+0x2c>
 800bcfa:	4b67      	ldr	r3, [pc, #412]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800bcfc:	f240 4212 	movw	r2, #1042	; 0x412
 800bd00:	4966      	ldr	r1, [pc, #408]	; (800be9c <tcp_enqueue_flags+0x1c0>)
 800bd02:	4867      	ldr	r0, [pc, #412]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800bd04:	f004 fa1a 	bl	801013c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <tcp_enqueue_flags+0x40>
 800bd0e:	4b62      	ldr	r3, [pc, #392]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800bd10:	f240 4213 	movw	r2, #1043	; 0x413
 800bd14:	4963      	ldr	r1, [pc, #396]	; (800bea4 <tcp_enqueue_flags+0x1c8>)
 800bd16:	4862      	ldr	r0, [pc, #392]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800bd18:	f004 fa10 	bl	801013c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bd26:	2301      	movs	r3, #1
 800bd28:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd2a:	7ffb      	ldrb	r3, [r7, #31]
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f003 0304 	and.w	r3, r3, #4
 800bd34:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd3e:	4619      	mov	r1, r3
 800bd40:	2036      	movs	r0, #54	; 0x36
 800bd42:	f7fa fa5f 	bl	8006204 <pbuf_alloc>
 800bd46:	6138      	str	r0, [r7, #16]
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d109      	bne.n	800bd62 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	8b5b      	ldrh	r3, [r3, #26]
 800bd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd60:	e095      	b.n	800be8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	895a      	ldrh	r2, [r3, #10]
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d206      	bcs.n	800bd7c <tcp_enqueue_flags+0xa0>
 800bd6e:	4b4a      	ldr	r3, [pc, #296]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800bd70:	f240 423a 	movw	r2, #1082	; 0x43a
 800bd74:	494c      	ldr	r1, [pc, #304]	; (800bea8 <tcp_enqueue_flags+0x1cc>)
 800bd76:	484a      	ldr	r0, [pc, #296]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800bd78:	f004 f9e0 	bl	801013c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	7ffb      	ldrb	r3, [r7, #31]
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	460b      	mov	r3, r1
 800bd88:	6939      	ldr	r1, [r7, #16]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff f916 	bl	800afbc <tcp_create_segment>
 800bd90:	60f8      	str	r0, [r7, #12]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	8b5b      	ldrh	r3, [r3, #26]
 800bd9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdaa:	e070      	b.n	800be8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <tcp_enqueue_flags+0xea>
 800bdb8:	4b37      	ldr	r3, [pc, #220]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800bdba:	f240 4242 	movw	r2, #1090	; 0x442
 800bdbe:	493b      	ldr	r1, [pc, #236]	; (800beac <tcp_enqueue_flags+0x1d0>)
 800bdc0:	4837      	ldr	r0, [pc, #220]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800bdc2:	f004 f9bb 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	891b      	ldrh	r3, [r3, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d006      	beq.n	800bddc <tcp_enqueue_flags+0x100>
 800bdce:	4b32      	ldr	r3, [pc, #200]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800bdd0:	f240 4243 	movw	r2, #1091	; 0x443
 800bdd4:	4936      	ldr	r1, [pc, #216]	; (800beb0 <tcp_enqueue_flags+0x1d4>)
 800bdd6:	4832      	ldr	r0, [pc, #200]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800bdd8:	f004 f9b0 	bl	801013c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d103      	bne.n	800bdec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdea:	e00d      	b.n	800be08 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf0:	61bb      	str	r3, [r7, #24]
 800bdf2:	e002      	b.n	800bdfa <tcp_enqueue_flags+0x11e>
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	61bb      	str	r3, [r7, #24]
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1f8      	bne.n	800bdf4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d104      	bne.n	800be24 <tcp_enqueue_flags+0x148>
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d004      	beq.n	800be2e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d006      	beq.n	800be46 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	8b5b      	ldrh	r3, [r3, #26]
 800be3c:	f043 0320 	orr.w	r3, r3, #32
 800be40:	b29a      	uxth	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fa fd42 	bl	80068d4 <pbuf_clen>
 800be50:	4603      	mov	r3, r0
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be5a:	4413      	add	r3, r2
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00e      	beq.n	800be8c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10a      	bne.n	800be8c <tcp_enqueue_flags+0x1b0>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <tcp_enqueue_flags+0x1b0>
 800be7e:	4b06      	ldr	r3, [pc, #24]	; (800be98 <tcp_enqueue_flags+0x1bc>)
 800be80:	f240 4266 	movw	r2, #1126	; 0x466
 800be84:	490b      	ldr	r1, [pc, #44]	; (800beb4 <tcp_enqueue_flags+0x1d8>)
 800be86:	4806      	ldr	r0, [pc, #24]	; (800bea0 <tcp_enqueue_flags+0x1c4>)
 800be88:	f004 f958 	bl	801013c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3720      	adds	r7, #32
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	08012a58 	.word	0x08012a58
 800be9c:	08012e7c 	.word	0x08012e7c
 800bea0:	08012aac 	.word	0x08012aac
 800bea4:	08012ed4 	.word	0x08012ed4
 800bea8:	08012ef4 	.word	0x08012ef4
 800beac:	08012f30 	.word	0x08012f30
 800beb0:	08012f48 	.word	0x08012f48
 800beb4:	08012f74 	.word	0x08012f74

0800beb8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <tcp_output+0x1c>
 800bec6:	4ba0      	ldr	r3, [pc, #640]	; (800c148 <tcp_output+0x290>)
 800bec8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800becc:	499f      	ldr	r1, [pc, #636]	; (800c14c <tcp_output+0x294>)
 800bece:	48a0      	ldr	r0, [pc, #640]	; (800c150 <tcp_output+0x298>)
 800bed0:	f004 f934 	bl	801013c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7d1b      	ldrb	r3, [r3, #20]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d106      	bne.n	800beea <tcp_output+0x32>
 800bedc:	4b9a      	ldr	r3, [pc, #616]	; (800c148 <tcp_output+0x290>)
 800bede:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800bee2:	499c      	ldr	r1, [pc, #624]	; (800c154 <tcp_output+0x29c>)
 800bee4:	489a      	ldr	r0, [pc, #616]	; (800c150 <tcp_output+0x298>)
 800bee6:	f004 f929 	bl	801013c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800beea:	4b9b      	ldr	r3, [pc, #620]	; (800c158 <tcp_output+0x2a0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d101      	bne.n	800bef8 <tcp_output+0x40>
    return ERR_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	e1d2      	b.n	800c29e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d203      	bcs.n	800bf10 <tcp_output+0x58>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf0e:	e002      	b.n	800bf16 <tcp_output+0x5e>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf16:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10b      	bne.n	800bf3c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	8b5b      	ldrh	r3, [r3, #26]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 81a9 	beq.w	800c284 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fdd6 	bl	800cae4 <tcp_send_empty_ack>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	e1b0      	b.n	800c29e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bf3c:	6879      	ldr	r1, [r7, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3304      	adds	r3, #4
 800bf42:	461a      	mov	r2, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff f81d 	bl	800af84 <tcp_route>
 800bf4a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d102      	bne.n	800bf58 <tcp_output+0xa0>
    return ERR_RTE;
 800bf52:	f06f 0303 	mvn.w	r3, #3
 800bf56:	e1a2      	b.n	800c29e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <tcp_output+0xae>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d111      	bne.n	800bf8a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <tcp_output+0xba>
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	e000      	b.n	800bf74 <tcp_output+0xbc>
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <tcp_output+0xca>
      return ERR_RTE;
 800bf7c:	f06f 0303 	mvn.w	r3, #3
 800bf80:	e18d      	b.n	800c29e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f9 f912 	bl	80051ba <lwip_htonl>
 800bf96:	4602      	mov	r2, r0
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa0:	8912      	ldrh	r2, [r2, #8]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d227      	bcs.n	800bffa <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d114      	bne.n	800bfe2 <tcp_output+0x12a>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d110      	bne.n	800bfe2 <tcp_output+0x12a>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10b      	bne.n	800bfe2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	8b5b      	ldrh	r3, [r3, #26]
 800bfe6:	f003 0302 	and.w	r3, r3, #2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 814c 	beq.w	800c288 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fd77 	bl	800cae4 <tcp_send_empty_ack>
 800bff6:	4603      	mov	r3, r0
 800bff8:	e151      	b.n	800c29e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c006:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 811b 	beq.w	800c246 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800c010:	e002      	b.n	800c018 <tcp_output+0x160>
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	623b      	str	r3, [r7, #32]
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1f8      	bne.n	800c012 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c020:	e111      	b.n	800c246 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	899b      	ldrh	r3, [r3, #12]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7f9 f8b0 	bl	8005190 <lwip_htons>
 800c030:	4603      	mov	r3, r0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <tcp_output+0x192>
 800c03c:	4b42      	ldr	r3, [pc, #264]	; (800c148 <tcp_output+0x290>)
 800c03e:	f240 5237 	movw	r2, #1335	; 0x537
 800c042:	4946      	ldr	r1, [pc, #280]	; (800c15c <tcp_output+0x2a4>)
 800c044:	4842      	ldr	r0, [pc, #264]	; (800c150 <tcp_output+0x298>)
 800c046:	f004 f879 	bl	801013c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d01f      	beq.n	800c092 <tcp_output+0x1da>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	8b5b      	ldrh	r3, [r3, #26]
 800c056:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d119      	bne.n	800c092 <tcp_output+0x1da>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00b      	beq.n	800c07e <tcp_output+0x1c6>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d110      	bne.n	800c092 <tcp_output+0x1da>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c074:	891a      	ldrh	r2, [r3, #8]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d209      	bcs.n	800c092 <tcp_output+0x1da>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <tcp_output+0x1da>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c08e:	2b08      	cmp	r3, #8
 800c090:	d901      	bls.n	800c096 <tcp_output+0x1de>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <tcp_output+0x1e0>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d106      	bne.n	800c0aa <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	8b5b      	ldrh	r3, [r3, #26]
 800c0a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80e3 	beq.w	800c270 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7d1b      	ldrb	r3, [r3, #20]
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d00d      	beq.n	800c0ce <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	899b      	ldrh	r3, [r3, #12]
 800c0b8:	b29c      	uxth	r4, r3
 800c0ba:	2010      	movs	r0, #16
 800c0bc:	f7f9 f868 	bl	8005190 <lwip_htons>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	4322      	orrs	r2, r4
 800c0ca:	b292      	uxth	r2, r2
 800c0cc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0d4:	f000 f908 	bl	800c2e8 <tcp_output_segment>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8b5b      	ldrh	r3, [r3, #26]
 800c0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	835a      	strh	r2, [r3, #26]
      return err;
 800c0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f6:	e0d2      	b.n	800c29e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7d1b      	ldrb	r3, [r3, #20]
 800c104:	2b02      	cmp	r3, #2
 800c106:	d006      	beq.n	800c116 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8b5b      	ldrh	r3, [r3, #26]
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f9 f84c 	bl	80051ba <lwip_htonl>
 800c122:	4604      	mov	r4, r0
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	891b      	ldrh	r3, [r3, #8]
 800c128:	461d      	mov	r5, r3
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	899b      	ldrh	r3, [r3, #12]
 800c130:	b29b      	uxth	r3, r3
 800c132:	4618      	mov	r0, r3
 800c134:	f7f9 f82c 	bl	8005190 <lwip_htons>
 800c138:	4603      	mov	r3, r0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00d      	beq.n	800c160 <tcp_output+0x2a8>
 800c144:	2301      	movs	r3, #1
 800c146:	e00c      	b.n	800c162 <tcp_output+0x2aa>
 800c148:	08012a58 	.word	0x08012a58
 800c14c:	08012f9c 	.word	0x08012f9c
 800c150:	08012aac 	.word	0x08012aac
 800c154:	08012fb4 	.word	0x08012fb4
 800c158:	20006d0c 	.word	0x20006d0c
 800c15c:	08012fdc 	.word	0x08012fdc
 800c160:	2300      	movs	r3, #0
 800c162:	442b      	add	r3, r5
 800c164:	4423      	add	r3, r4
 800c166:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	da02      	bge.n	800c17a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	891b      	ldrh	r3, [r3, #8]
 800c17e:	461c      	mov	r4, r3
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	899b      	ldrh	r3, [r3, #12]
 800c186:	b29b      	uxth	r3, r3
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f9 f801 	bl	8005190 <lwip_htons>
 800c18e:	4603      	mov	r3, r0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0303 	and.w	r3, r3, #3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <tcp_output+0x2e6>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <tcp_output+0x2e8>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4423      	add	r3, r4
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d049      	beq.n	800c23a <tcp_output+0x382>
      seg->next = NULL;
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d105      	bne.n	800c1c0 <tcp_output+0x308>
        pcb->unacked = seg;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	623b      	str	r3, [r7, #32]
 800c1be:	e03f      	b.n	800c240 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f8 fff7 	bl	80051ba <lwip_htonl>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f8 fff0 	bl	80051ba <lwip_htonl>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	1ae3      	subs	r3, r4, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	da24      	bge.n	800c22c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3370      	adds	r3, #112	; 0x70
 800c1e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c1e8:	e002      	b.n	800c1f0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d011      	beq.n	800c21c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4618      	mov	r0, r3
 800c202:	f7f8 ffda 	bl	80051ba <lwip_htonl>
 800c206:	4604      	mov	r4, r0
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f8 ffd3 	bl	80051ba <lwip_htonl>
 800c214:	4603      	mov	r3, r0
 800c216:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dbe6      	blt.n	800c1ea <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	e009      	b.n	800c240 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c230:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	623b      	str	r3, [r7, #32]
 800c238:	e002      	b.n	800c240 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c23a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c23c:	f7fb fef4 	bl	8008028 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d012      	beq.n	800c272 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f7f8 ffb1 	bl	80051ba <lwip_htonl>
 800c258:	4602      	mov	r2, r0
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c262:	8912      	ldrh	r2, [r2, #8]
 800c264:	4413      	add	r3, r2
  while (seg != NULL &&
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	f4bf aeda 	bcs.w	800c022 <tcp_output+0x16a>
 800c26e:	e000      	b.n	800c272 <tcp_output+0x3ba>
      break;
 800c270:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d108      	bne.n	800c28c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c282:	e004      	b.n	800c28e <tcp_output+0x3d6>
    goto output_done;
 800c284:	bf00      	nop
 800c286:	e002      	b.n	800c28e <tcp_output+0x3d6>
    goto output_done;
 800c288:	bf00      	nop
 800c28a:	e000      	b.n	800c28e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c28c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	8b5b      	ldrh	r3, [r3, #26]
 800c292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c296:	b29a      	uxth	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3728      	adds	r7, #40	; 0x28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2a6:	bf00      	nop

0800c2a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <tcp_output_segment_busy+0x1c>
 800c2b6:	4b09      	ldr	r3, [pc, #36]	; (800c2dc <tcp_output_segment_busy+0x34>)
 800c2b8:	f240 529a 	movw	r2, #1434	; 0x59a
 800c2bc:	4908      	ldr	r1, [pc, #32]	; (800c2e0 <tcp_output_segment_busy+0x38>)
 800c2be:	4809      	ldr	r0, [pc, #36]	; (800c2e4 <tcp_output_segment_busy+0x3c>)
 800c2c0:	f003 ff3c 	bl	801013c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	7b9b      	ldrb	r3, [r3, #14]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d001      	beq.n	800c2d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	08012a58 	.word	0x08012a58
 800c2e0:	08012ff4 	.word	0x08012ff4
 800c2e4:	08012aac 	.word	0x08012aac

0800c2e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c2e8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ea:	b08c      	sub	sp, #48	; 0x30
 800c2ec:	af04      	add	r7, sp, #16
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <tcp_output_segment+0x20>
 800c2fa:	4b64      	ldr	r3, [pc, #400]	; (800c48c <tcp_output_segment+0x1a4>)
 800c2fc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c300:	4963      	ldr	r1, [pc, #396]	; (800c490 <tcp_output_segment+0x1a8>)
 800c302:	4864      	ldr	r0, [pc, #400]	; (800c494 <tcp_output_segment+0x1ac>)
 800c304:	f003 ff1a 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d106      	bne.n	800c31c <tcp_output_segment+0x34>
 800c30e:	4b5f      	ldr	r3, [pc, #380]	; (800c48c <tcp_output_segment+0x1a4>)
 800c310:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c314:	4960      	ldr	r1, [pc, #384]	; (800c498 <tcp_output_segment+0x1b0>)
 800c316:	485f      	ldr	r0, [pc, #380]	; (800c494 <tcp_output_segment+0x1ac>)
 800c318:	f003 ff10 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <tcp_output_segment+0x48>
 800c322:	4b5a      	ldr	r3, [pc, #360]	; (800c48c <tcp_output_segment+0x1a4>)
 800c324:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c328:	495c      	ldr	r1, [pc, #368]	; (800c49c <tcp_output_segment+0x1b4>)
 800c32a:	485a      	ldr	r0, [pc, #360]	; (800c494 <tcp_output_segment+0x1ac>)
 800c32c:	f003 ff06 	bl	801013c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7ff ffb9 	bl	800c2a8 <tcp_output_segment_busy>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	e0a0      	b.n	800c482 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	68dc      	ldr	r4, [r3, #12]
 800c348:	4610      	mov	r0, r2
 800c34a:	f7f8 ff36 	bl	80051ba <lwip_htonl>
 800c34e:	4603      	mov	r3, r0
 800c350:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68dc      	ldr	r4, [r3, #12]
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7f8 ff18 	bl	8005190 <lwip_htons>
 800c360:	4603      	mov	r3, r0
 800c362:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c36c:	441a      	add	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	3314      	adds	r3, #20
 800c378:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	7a9b      	ldrb	r3, [r3, #10]
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d015      	beq.n	800c3b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	3304      	adds	r3, #4
 800c38a:	461a      	mov	r2, r3
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c392:	f7fc fa33 	bl	80087fc <tcp_eff_send_mss_netif>
 800c396:	4603      	mov	r3, r0
 800c398:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c39a:	8b7b      	ldrh	r3, [r7, #26]
 800c39c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7f8 ff0a 	bl	80051ba <lwip_htonl>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da02      	bge.n	800c3c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10c      	bne.n	800c3e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c3ca:	4b35      	ldr	r3, [pc, #212]	; (800c4a0 <tcp_output_segment+0x1b8>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f8 feee 	bl	80051ba <lwip_htonl>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	8959      	ldrh	r1, [r3, #10]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	8b3a      	ldrh	r2, [r7, #24]
 800c400:	1a8a      	subs	r2, r1, r2
 800c402:	b292      	uxth	r2, r2
 800c404:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	8919      	ldrh	r1, [r3, #8]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	8b3a      	ldrh	r2, [r7, #24]
 800c412:	1a8a      	subs	r2, r1, r2
 800c414:	b292      	uxth	r2, r2
 800c416:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	68d2      	ldr	r2, [r2, #12]
 800c420:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	2200      	movs	r2, #0
 800c428:	741a      	strb	r2, [r3, #16]
 800c42a:	2200      	movs	r2, #0
 800c42c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	f103 0214 	add.w	r2, r3, #20
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	7a9b      	ldrb	r3, [r3, #10]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	4413      	add	r3, r2
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	429a      	cmp	r2, r3
 800c446:	d006      	beq.n	800c456 <tcp_output_segment+0x16e>
 800c448:	4b10      	ldr	r3, [pc, #64]	; (800c48c <tcp_output_segment+0x1a4>)
 800c44a:	f240 621c 	movw	r2, #1564	; 0x61c
 800c44e:	4915      	ldr	r1, [pc, #84]	; (800c4a4 <tcp_output_segment+0x1bc>)
 800c450:	4810      	ldr	r0, [pc, #64]	; (800c494 <tcp_output_segment+0x1ac>)
 800c452:	f003 fe73 	bl	801013c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6858      	ldr	r0, [r3, #4]
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	1d1c      	adds	r4, r3, #4
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	7add      	ldrb	r5, [r3, #11]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	7a9b      	ldrb	r3, [r3, #10]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	9202      	str	r2, [sp, #8]
 800c46c:	2206      	movs	r2, #6
 800c46e:	9201      	str	r2, [sp, #4]
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462b      	mov	r3, r5
 800c474:	4622      	mov	r2, r4
 800c476:	f002 fdf7 	bl	800f068 <ip4_output_if>
 800c47a:	4603      	mov	r3, r0
 800c47c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c47e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3720      	adds	r7, #32
 800c486:	46bd      	mov	sp, r7
 800c488:	bdb0      	pop	{r4, r5, r7, pc}
 800c48a:	bf00      	nop
 800c48c:	08012a58 	.word	0x08012a58
 800c490:	0801301c 	.word	0x0801301c
 800c494:	08012aac 	.word	0x08012aac
 800c498:	0801303c 	.word	0x0801303c
 800c49c:	0801305c 	.word	0x0801305c
 800c4a0:	20006cfc 	.word	0x20006cfc
 800c4a4:	08013080 	.word	0x08013080

0800c4a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c4a8:	b5b0      	push	{r4, r5, r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <tcp_rexmit_rto_prepare+0x1c>
 800c4b6:	4b31      	ldr	r3, [pc, #196]	; (800c57c <tcp_rexmit_rto_prepare+0xd4>)
 800c4b8:	f240 6263 	movw	r2, #1635	; 0x663
 800c4bc:	4930      	ldr	r1, [pc, #192]	; (800c580 <tcp_rexmit_rto_prepare+0xd8>)
 800c4be:	4831      	ldr	r0, [pc, #196]	; (800c584 <tcp_rexmit_rto_prepare+0xdc>)
 800c4c0:	f003 fe3c 	bl	801013c <iprintf>

  if (pcb->unacked == NULL) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c4cc:	f06f 0305 	mvn.w	r3, #5
 800c4d0:	e050      	b.n	800c574 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	e00b      	b.n	800c4f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7ff fee4 	bl	800c2a8 <tcp_output_segment_busy>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c4e6:	f06f 0305 	mvn.w	r3, #5
 800c4ea:	e043      	b.n	800c574 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1ef      	bne.n	800c4da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff fed4 	bl	800c2a8 <tcp_output_segment_busy>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c506:	f06f 0305 	mvn.w	r3, #5
 800c50a:	e033      	b.n	800c574 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	8b5b      	ldrh	r3, [r3, #26]
 800c526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	f7f8 fe3f 	bl	80051ba <lwip_htonl>
 800c53c:	4604      	mov	r4, r0
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	891b      	ldrh	r3, [r3, #8]
 800c542:	461d      	mov	r5, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7f8 fe1f 	bl	8005190 <lwip_htons>
 800c552:	4603      	mov	r3, r0
 800c554:	b2db      	uxtb	r3, r3
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <tcp_rexmit_rto_prepare+0xba>
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <tcp_rexmit_rto_prepare+0xbc>
 800c562:	2300      	movs	r3, #0
 800c564:	442b      	add	r3, r5
 800c566:	18e2      	adds	r2, r4, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bdb0      	pop	{r4, r5, r7, pc}
 800c57c:	08012a58 	.word	0x08012a58
 800c580:	08013094 	.word	0x08013094
 800c584:	08012aac 	.word	0x08012aac

0800c588 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <tcp_rexmit_rto_commit+0x1c>
 800c596:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <tcp_rexmit_rto_commit+0x44>)
 800c598:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c59c:	490c      	ldr	r1, [pc, #48]	; (800c5d0 <tcp_rexmit_rto_commit+0x48>)
 800c59e:	480d      	ldr	r0, [pc, #52]	; (800c5d4 <tcp_rexmit_rto_commit+0x4c>)
 800c5a0:	f003 fdcc 	bl	801013c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5aa:	2bff      	cmp	r3, #255	; 0xff
 800c5ac:	d007      	beq.n	800c5be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff fc7a 	bl	800beb8 <tcp_output>
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	08012a58 	.word	0x08012a58
 800c5d0:	080130b8 	.word	0x080130b8
 800c5d4:	08012aac 	.word	0x08012aac

0800c5d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <tcp_rexmit_rto+0x1c>
 800c5e6:	4b0a      	ldr	r3, [pc, #40]	; (800c610 <tcp_rexmit_rto+0x38>)
 800c5e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c5ec:	4909      	ldr	r1, [pc, #36]	; (800c614 <tcp_rexmit_rto+0x3c>)
 800c5ee:	480a      	ldr	r0, [pc, #40]	; (800c618 <tcp_rexmit_rto+0x40>)
 800c5f0:	f003 fda4 	bl	801013c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ff57 	bl	800c4a8 <tcp_rexmit_rto_prepare>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff ffc1 	bl	800c588 <tcp_rexmit_rto_commit>
  }
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	08012a58 	.word	0x08012a58
 800c614:	080130dc 	.word	0x080130dc
 800c618:	08012aac 	.word	0x08012aac

0800c61c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <tcp_rexmit+0x1c>
 800c62a:	4b2f      	ldr	r3, [pc, #188]	; (800c6e8 <tcp_rexmit+0xcc>)
 800c62c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c630:	492e      	ldr	r1, [pc, #184]	; (800c6ec <tcp_rexmit+0xd0>)
 800c632:	482f      	ldr	r0, [pc, #188]	; (800c6f0 <tcp_rexmit+0xd4>)
 800c634:	f003 fd82 	bl	801013c <iprintf>

  if (pcb->unacked == NULL) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c640:	f06f 0305 	mvn.w	r3, #5
 800c644:	e04c      	b.n	800c6e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c64c:	68b8      	ldr	r0, [r7, #8]
 800c64e:	f7ff fe2b 	bl	800c2a8 <tcp_output_segment_busy>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c658:	f06f 0305 	mvn.w	r3, #5
 800c65c:	e040      	b.n	800c6e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	336c      	adds	r3, #108	; 0x6c
 800c66a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c66c:	e002      	b.n	800c674 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d011      	beq.n	800c6a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	f7f8 fd98 	bl	80051ba <lwip_htonl>
 800c68a:	4604      	mov	r4, r0
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f7f8 fd91 	bl	80051ba <lwip_htonl>
 800c698:	4603      	mov	r3, r0
 800c69a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dbe6      	blt.n	800c66e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6c4:	2bff      	cmp	r3, #255	; 0xff
 800c6c6:	d007      	beq.n	800c6d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd90      	pop	{r4, r7, pc}
 800c6e8:	08012a58 	.word	0x08012a58
 800c6ec:	080130f8 	.word	0x080130f8
 800c6f0:	08012aac 	.word	0x08012aac

0800c6f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <tcp_rexmit_fast+0x1c>
 800c702:	4b2e      	ldr	r3, [pc, #184]	; (800c7bc <tcp_rexmit_fast+0xc8>)
 800c704:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c708:	492d      	ldr	r1, [pc, #180]	; (800c7c0 <tcp_rexmit_fast+0xcc>)
 800c70a:	482e      	ldr	r0, [pc, #184]	; (800c7c4 <tcp_rexmit_fast+0xd0>)
 800c70c:	f003 fd16 	bl	801013c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c714:	2b00      	cmp	r3, #0
 800c716:	d04d      	beq.n	800c7b4 <tcp_rexmit_fast+0xc0>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	8b5b      	ldrh	r3, [r3, #26]
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d147      	bne.n	800c7b4 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ff79 	bl	800c61c <tcp_rexmit>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d141      	bne.n	800c7b4 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d207      	bcs.n	800c750 <tcp_rexmit_fast+0x5c>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	e006      	b.n	800c75e <tcp_rexmit_fast+0x6a>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c756:	0fda      	lsrs	r2, r3, #31
 800c758:	4413      	add	r3, r2
 800c75a:	105b      	asrs	r3, r3, #1
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	429a      	cmp	r2, r3
 800c774:	d206      	bcs.n	800c784 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c78e:	4619      	mov	r1, r3
 800c790:	0049      	lsls	r1, r1, #1
 800c792:	440b      	add	r3, r1
 800c794:	b29b      	uxth	r3, r3
 800c796:	4413      	add	r3, r2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8b5b      	ldrh	r3, [r3, #26]
 800c7a4:	f043 0304 	orr.w	r3, r3, #4
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	08012a58 	.word	0x08012a58
 800c7c0:	08013110 	.word	0x08013110
 800c7c4:	08012aac 	.word	0x08012aac

0800c7c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	607b      	str	r3, [r7, #4]
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	817b      	strh	r3, [r7, #10]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7da:	897a      	ldrh	r2, [r7, #10]
 800c7dc:	893b      	ldrh	r3, [r7, #8]
 800c7de:	4413      	add	r3, r2
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3314      	adds	r3, #20
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	2022      	movs	r0, #34	; 0x22
 800c7ee:	f7f9 fd09 	bl	8006204 <pbuf_alloc>
 800c7f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d04e      	beq.n	800c898 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	895b      	ldrh	r3, [r3, #10]
 800c7fe:	461a      	mov	r2, r3
 800c800:	897b      	ldrh	r3, [r7, #10]
 800c802:	3314      	adds	r3, #20
 800c804:	429a      	cmp	r2, r3
 800c806:	da06      	bge.n	800c816 <tcp_output_alloc_header_common+0x4e>
 800c808:	4b26      	ldr	r3, [pc, #152]	; (800c8a4 <tcp_output_alloc_header_common+0xdc>)
 800c80a:	f240 7224 	movw	r2, #1828	; 0x724
 800c80e:	4926      	ldr	r1, [pc, #152]	; (800c8a8 <tcp_output_alloc_header_common+0xe0>)
 800c810:	4826      	ldr	r0, [pc, #152]	; (800c8ac <tcp_output_alloc_header_common+0xe4>)
 800c812:	f003 fc93 	bl	801013c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c81c:	8c3b      	ldrh	r3, [r7, #32]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f8 fcb6 	bl	8005190 <lwip_htons>
 800c824:	4603      	mov	r3, r0
 800c826:	461a      	mov	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c82e:	4618      	mov	r0, r3
 800c830:	f7f8 fcae 	bl	8005190 <lwip_htons>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7f8 fcb9 	bl	80051ba <lwip_htonl>
 800c848:	4602      	mov	r2, r0
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c84e:	897b      	ldrh	r3, [r7, #10]
 800c850:	089b      	lsrs	r3, r3, #2
 800c852:	b29b      	uxth	r3, r3
 800c854:	3305      	adds	r3, #5
 800c856:	b29b      	uxth	r3, r3
 800c858:	031b      	lsls	r3, r3, #12
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c860:	b29b      	uxth	r3, r3
 800c862:	4313      	orrs	r3, r2
 800c864:	b29b      	uxth	r3, r3
 800c866:	4618      	mov	r0, r3
 800c868:	f7f8 fc92 	bl	8005190 <lwip_htons>
 800c86c:	4603      	mov	r3, r0
 800c86e:	461a      	mov	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c876:	4618      	mov	r0, r3
 800c878:	f7f8 fc8a 	bl	8005190 <lwip_htons>
 800c87c:	4603      	mov	r3, r0
 800c87e:	461a      	mov	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	2200      	movs	r2, #0
 800c888:	741a      	strb	r2, [r3, #16]
 800c88a:	2200      	movs	r2, #0
 800c88c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	2200      	movs	r2, #0
 800c892:	749a      	strb	r2, [r3, #18]
 800c894:	2200      	movs	r2, #0
 800c896:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c898:	697b      	ldr	r3, [r7, #20]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	08012a58 	.word	0x08012a58
 800c8a8:	08013130 	.word	0x08013130
 800c8ac:	08012aac 	.word	0x08012aac

0800c8b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c8b0:	b5b0      	push	{r4, r5, r7, lr}
 800c8b2:	b08a      	sub	sp, #40	; 0x28
 800c8b4:	af04      	add	r7, sp, #16
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	817b      	strh	r3, [r7, #10]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <tcp_output_alloc_header+0x26>
 800c8c8:	4b15      	ldr	r3, [pc, #84]	; (800c920 <tcp_output_alloc_header+0x70>)
 800c8ca:	f240 7242 	movw	r2, #1858	; 0x742
 800c8ce:	4915      	ldr	r1, [pc, #84]	; (800c924 <tcp_output_alloc_header+0x74>)
 800c8d0:	4815      	ldr	r0, [pc, #84]	; (800c928 <tcp_output_alloc_header+0x78>)
 800c8d2:	f003 fc33 	bl	801013c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8adb      	ldrh	r3, [r3, #22]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	8b12      	ldrh	r2, [r2, #24]
 800c8e2:	68f9      	ldr	r1, [r7, #12]
 800c8e4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c8e6:	893d      	ldrh	r5, [r7, #8]
 800c8e8:	897c      	ldrh	r4, [r7, #10]
 800c8ea:	9103      	str	r1, [sp, #12]
 800c8ec:	2110      	movs	r1, #16
 800c8ee:	9102      	str	r1, [sp, #8]
 800c8f0:	9201      	str	r2, [sp, #4]
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	462a      	mov	r2, r5
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f7ff ff65 	bl	800c7c8 <tcp_output_alloc_header_common>
 800c8fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d006      	beq.n	800c914 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c90e:	441a      	add	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c914:	697b      	ldr	r3, [r7, #20]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bdb0      	pop	{r4, r5, r7, pc}
 800c91e:	bf00      	nop
 800c920:	08012a58 	.word	0x08012a58
 800c924:	08013160 	.word	0x08013160
 800c928:	08012aac 	.word	0x08012aac

0800c92c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4611      	mov	r1, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	71fb      	strb	r3, [r7, #7]
 800c93e:	4613      	mov	r3, r2
 800c940:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d106      	bne.n	800c95a <tcp_output_fill_options+0x2e>
 800c94c:	4b13      	ldr	r3, [pc, #76]	; (800c99c <tcp_output_fill_options+0x70>)
 800c94e:	f240 7256 	movw	r2, #1878	; 0x756
 800c952:	4913      	ldr	r1, [pc, #76]	; (800c9a0 <tcp_output_fill_options+0x74>)
 800c954:	4813      	ldr	r0, [pc, #76]	; (800c9a4 <tcp_output_fill_options+0x78>)
 800c956:	f003 fbf1 	bl	801013c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	3314      	adds	r3, #20
 800c964:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	f103 0214 	add.w	r2, r3, #20
 800c96c:	8bfb      	ldrh	r3, [r7, #30]
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4619      	mov	r1, r3
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	f003 0304 	and.w	r3, r3, #4
 800c97a:	440b      	add	r3, r1
 800c97c:	4413      	add	r3, r2
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	429a      	cmp	r2, r3
 800c982:	d006      	beq.n	800c992 <tcp_output_fill_options+0x66>
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <tcp_output_fill_options+0x70>)
 800c986:	f240 7275 	movw	r2, #1909	; 0x775
 800c98a:	4907      	ldr	r1, [pc, #28]	; (800c9a8 <tcp_output_fill_options+0x7c>)
 800c98c:	4805      	ldr	r0, [pc, #20]	; (800c9a4 <tcp_output_fill_options+0x78>)
 800c98e:	f003 fbd5 	bl	801013c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c992:	bf00      	nop
 800c994:	3720      	adds	r7, #32
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	08012a58 	.word	0x08012a58
 800c9a0:	08013188 	.word	0x08013188
 800c9a4:	08012aac 	.word	0x08012aac
 800c9a8:	08013080 	.word	0x08013080

0800c9ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08a      	sub	sp, #40	; 0x28
 800c9b0:	af04      	add	r7, sp, #16
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <tcp_output_control_segment+0x22>
 800c9c0:	4b1c      	ldr	r3, [pc, #112]	; (800ca34 <tcp_output_control_segment+0x88>)
 800c9c2:	f240 7287 	movw	r2, #1927	; 0x787
 800c9c6:	491c      	ldr	r1, [pc, #112]	; (800ca38 <tcp_output_control_segment+0x8c>)
 800c9c8:	481c      	ldr	r0, [pc, #112]	; (800ca3c <tcp_output_control_segment+0x90>)
 800c9ca:	f003 fbb7 	bl	801013c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7fe fad6 	bl	800af84 <tcp_route>
 800c9d8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c9e0:	23fc      	movs	r3, #252	; 0xfc
 800c9e2:	75fb      	strb	r3, [r7, #23]
 800c9e4:	e01c      	b.n	800ca20 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d006      	beq.n	800c9fa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	7adb      	ldrb	r3, [r3, #11]
 800c9f0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	7a9b      	ldrb	r3, [r3, #10]
 800c9f6:	757b      	strb	r3, [r7, #21]
 800c9f8:	e003      	b.n	800ca02 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c9fa:	23ff      	movs	r3, #255	; 0xff
 800c9fc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ca02:	7dba      	ldrb	r2, [r7, #22]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	9302      	str	r3, [sp, #8]
 800ca08:	2306      	movs	r3, #6
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	7d7b      	ldrb	r3, [r7, #21]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	4613      	mov	r3, r2
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	68b8      	ldr	r0, [r7, #8]
 800ca18:	f002 fb26 	bl	800f068 <ip4_output_if>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ca20:	68b8      	ldr	r0, [r7, #8]
 800ca22:	f7f9 fecf 	bl	80067c4 <pbuf_free>
  return err;
 800ca26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08012a58 	.word	0x08012a58
 800ca38:	080131b0 	.word	0x080131b0
 800ca3c:	08012aac 	.word	0x08012aac

0800ca40 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b08b      	sub	sp, #44	; 0x2c
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d106      	bne.n	800ca62 <tcp_rst+0x22>
 800ca54:	4b1f      	ldr	r3, [pc, #124]	; (800cad4 <tcp_rst+0x94>)
 800ca56:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ca5a:	491f      	ldr	r1, [pc, #124]	; (800cad8 <tcp_rst+0x98>)
 800ca5c:	481f      	ldr	r0, [pc, #124]	; (800cadc <tcp_rst+0x9c>)
 800ca5e:	f003 fb6d 	bl	801013c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d106      	bne.n	800ca76 <tcp_rst+0x36>
 800ca68:	4b1a      	ldr	r3, [pc, #104]	; (800cad4 <tcp_rst+0x94>)
 800ca6a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ca6e:	491c      	ldr	r1, [pc, #112]	; (800cae0 <tcp_rst+0xa0>)
 800ca70:	481a      	ldr	r0, [pc, #104]	; (800cadc <tcp_rst+0x9c>)
 800ca72:	f003 fb63 	bl	801013c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ca76:	2300      	movs	r3, #0
 800ca78:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ca7a:	f246 0308 	movw	r3, #24584	; 0x6008
 800ca7e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	b29c      	uxth	r4, r3
 800ca84:	68b8      	ldr	r0, [r7, #8]
 800ca86:	f7f8 fb98 	bl	80051ba <lwip_htonl>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	8abb      	ldrh	r3, [r7, #20]
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	2314      	movs	r3, #20
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4621      	mov	r1, r4
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff fe90 	bl	800c7c8 <tcp_output_alloc_header_common>
 800caa8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00c      	beq.n	800caca <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
 800cab2:	2200      	movs	r2, #0
 800cab4:	6939      	ldr	r1, [r7, #16]
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff ff38 	bl	800c92c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	683a      	ldr	r2, [r7, #0]
 800cac0:	6939      	ldr	r1, [r7, #16]
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff ff72 	bl	800c9ac <tcp_output_control_segment>
 800cac8:	e000      	b.n	800cacc <tcp_rst+0x8c>
    return;
 800caca:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd90      	pop	{r4, r7, pc}
 800cad2:	bf00      	nop
 800cad4:	08012a58 	.word	0x08012a58
 800cad8:	080131dc 	.word	0x080131dc
 800cadc:	08012aac 	.word	0x08012aac
 800cae0:	080131f8 	.word	0x080131f8

0800cae4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <tcp_send_empty_ack+0x24>
 800cafa:	4b28      	ldr	r3, [pc, #160]	; (800cb9c <tcp_send_empty_ack+0xb8>)
 800cafc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cb00:	4927      	ldr	r1, [pc, #156]	; (800cba0 <tcp_send_empty_ack+0xbc>)
 800cb02:	4828      	ldr	r0, [pc, #160]	; (800cba4 <tcp_send_empty_ack+0xc0>)
 800cb04:	f003 fb1a 	bl	801013c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cb14:	7d7b      	ldrb	r3, [r7, #21]
 800cb16:	b29c      	uxth	r4, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7f8 fb4c 	bl	80051ba <lwip_htonl>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2200      	movs	r2, #0
 800cb26:	4621      	mov	r1, r4
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff fec1 	bl	800c8b0 <tcp_output_alloc_header>
 800cb2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d109      	bne.n	800cb4a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8b5b      	ldrh	r3, [r3, #26]
 800cb3a:	f043 0303 	orr.w	r3, r3, #3
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cb44:	f06f 0301 	mvn.w	r3, #1
 800cb48:	e023      	b.n	800cb92 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cb4a:	7dbb      	ldrb	r3, [r7, #22]
 800cb4c:	7dfa      	ldrb	r2, [r7, #23]
 800cb4e:	6939      	ldr	r1, [r7, #16]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff feeb 	bl	800c92c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	6939      	ldr	r1, [r7, #16]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff ff24 	bl	800c9ac <tcp_output_control_segment>
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d007      	beq.n	800cb80 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	8b5b      	ldrh	r3, [r3, #26]
 800cb74:	f043 0303 	orr.w	r3, r3, #3
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	835a      	strh	r2, [r3, #26]
 800cb7e:	e006      	b.n	800cb8e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	8b5b      	ldrh	r3, [r3, #26]
 800cb84:	f023 0303 	bic.w	r3, r3, #3
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	08012a58 	.word	0x08012a58
 800cba0:	08013214 	.word	0x08013214
 800cba4:	08012aac 	.word	0x08012aac

0800cba8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cba8:	b590      	push	{r4, r7, lr}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d106      	bne.n	800cbc8 <tcp_keepalive+0x20>
 800cbba:	4b18      	ldr	r3, [pc, #96]	; (800cc1c <tcp_keepalive+0x74>)
 800cbbc:	f640 0224 	movw	r2, #2084	; 0x824
 800cbc0:	4917      	ldr	r1, [pc, #92]	; (800cc20 <tcp_keepalive+0x78>)
 800cbc2:	4818      	ldr	r0, [pc, #96]	; (800cc24 <tcp_keepalive+0x7c>)
 800cbc4:	f003 faba 	bl	801013c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	b29c      	uxth	r4, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f8 faf1 	bl	80051ba <lwip_htonl>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2200      	movs	r2, #0
 800cbdc:	4621      	mov	r1, r4
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fe66 	bl	800c8b0 <tcp_output_alloc_header>
 800cbe4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cbec:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf0:	e010      	b.n	800cc14 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	6939      	ldr	r1, [r7, #16]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff fe97 	bl	800c92c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3304      	adds	r3, #4
 800cc04:	6939      	ldr	r1, [r7, #16]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff fed0 	bl	800c9ac <tcp_output_control_segment>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	371c      	adds	r7, #28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd90      	pop	{r4, r7, pc}
 800cc1c:	08012a58 	.word	0x08012a58
 800cc20:	08013234 	.word	0x08013234
 800cc24:	08012aac 	.word	0x08012aac

0800cc28 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b08b      	sub	sp, #44	; 0x2c
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc30:	2300      	movs	r3, #0
 800cc32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d106      	bne.n	800cc4a <tcp_zero_window_probe+0x22>
 800cc3c:	4b4c      	ldr	r3, [pc, #304]	; (800cd70 <tcp_zero_window_probe+0x148>)
 800cc3e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cc42:	494c      	ldr	r1, [pc, #304]	; (800cd74 <tcp_zero_window_probe+0x14c>)
 800cc44:	484c      	ldr	r0, [pc, #304]	; (800cd78 <tcp_zero_window_probe+0x150>)
 800cc46:	f003 fa79 	bl	801013c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc4e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	e086      	b.n	800cd68 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc60:	2bff      	cmp	r3, #255	; 0xff
 800cc62:	d007      	beq.n	800cc74 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	899b      	ldrh	r3, [r3, #12]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f8 fa87 	bl	8005190 <lwip_htons>
 800cc82:	4603      	mov	r3, r0
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	f003 0301 	and.w	r3, r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d005      	beq.n	800cc9a <tcp_zero_window_probe+0x72>
 800cc8e:	6a3b      	ldr	r3, [r7, #32]
 800cc90:	891b      	ldrh	r3, [r3, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <tcp_zero_window_probe+0x72>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <tcp_zero_window_probe+0x74>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cc9e:	7ffb      	ldrb	r3, [r7, #31]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bf0c      	ite	eq
 800cca4:	2301      	moveq	r3, #1
 800cca6:	2300      	movne	r3, #0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb0:	b299      	uxth	r1, r3
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	8bba      	ldrh	r2, [r7, #28]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff fdf8 	bl	800c8b0 <tcp_output_alloc_header>
 800ccc0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ccc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cccc:	e04c      	b.n	800cd68 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ccd4:	7ffb      	ldrb	r3, [r7, #31]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d011      	beq.n	800ccfe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	899b      	ldrh	r3, [r3, #12]
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	b21b      	sxth	r3, r3
 800cce2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cce6:	b21c      	sxth	r4, r3
 800cce8:	2011      	movs	r0, #17
 800ccea:	f7f8 fa51 	bl	8005190 <lwip_htons>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	b21b      	sxth	r3, r3
 800ccf2:	4323      	orrs	r3, r4
 800ccf4:	b21b      	sxth	r3, r3
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	819a      	strh	r2, [r3, #12]
 800ccfc:	e010      	b.n	800cd20 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	3314      	adds	r3, #20
 800cd04:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	6858      	ldr	r0, [r3, #4]
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	891a      	ldrh	r2, [r3, #8]
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	891b      	ldrh	r3, [r3, #8]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	2201      	movs	r2, #1
 800cd1a:	6939      	ldr	r1, [r7, #16]
 800cd1c:	f7f9 ff4c 	bl	8006bb8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f8 fa47 	bl	80051ba <lwip_htonl>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	3301      	adds	r3, #1
 800cd30:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da02      	bge.n	800cd44 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd48:	2200      	movs	r2, #0
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff fded 	bl	800c92c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3304      	adds	r3, #4
 800cd58:	69b9      	ldr	r1, [r7, #24]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fe26 	bl	800c9ac <tcp_output_control_segment>
 800cd60:	4603      	mov	r3, r0
 800cd62:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cd64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	372c      	adds	r7, #44	; 0x2c
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd90      	pop	{r4, r7, pc}
 800cd70:	08012a58 	.word	0x08012a58
 800cd74:	08013250 	.word	0x08013250
 800cd78:	08012aac 	.word	0x08012aac

0800cd7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cd84:	f7fa f806 	bl	8006d94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <tcpip_tcp_timer+0x38>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <tcpip_tcp_timer+0x1c>
 800cd90:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <tcpip_tcp_timer+0x3c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d005      	beq.n	800cda4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cd98:	2200      	movs	r2, #0
 800cd9a:	4908      	ldr	r1, [pc, #32]	; (800cdbc <tcpip_tcp_timer+0x40>)
 800cd9c:	20fa      	movs	r0, #250	; 0xfa
 800cd9e:	f000 f8f1 	bl	800cf84 <sys_timeout>
 800cda2:	e002      	b.n	800cdaa <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cda4:	4b06      	ldr	r3, [pc, #24]	; (800cdc0 <tcpip_tcp_timer+0x44>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	601a      	str	r2, [r3, #0]
  }
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20006cf8 	.word	0x20006cf8
 800cdb8:	20006d08 	.word	0x20006d08
 800cdbc:	0800cd7d 	.word	0x0800cd7d
 800cdc0:	2000056c 	.word	0x2000056c

0800cdc4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <tcp_timer_needed+0x30>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10f      	bne.n	800cdf0 <tcp_timer_needed+0x2c>
 800cdd0:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <tcp_timer_needed+0x34>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d103      	bne.n	800cde0 <tcp_timer_needed+0x1c>
 800cdd8:	4b08      	ldr	r3, [pc, #32]	; (800cdfc <tcp_timer_needed+0x38>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d007      	beq.n	800cdf0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cde0:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <tcp_timer_needed+0x30>)
 800cde2:	2201      	movs	r2, #1
 800cde4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cde6:	2200      	movs	r2, #0
 800cde8:	4905      	ldr	r1, [pc, #20]	; (800ce00 <tcp_timer_needed+0x3c>)
 800cdea:	20fa      	movs	r0, #250	; 0xfa
 800cdec:	f000 f8ca 	bl	800cf84 <sys_timeout>
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	2000056c 	.word	0x2000056c
 800cdf8:	20006cf8 	.word	0x20006cf8
 800cdfc:	20006d08 	.word	0x20006d08
 800ce00:	0800cd7d 	.word	0x0800cd7d

0800ce04 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce10:	2006      	movs	r0, #6
 800ce12:	f7f8 fe7d 	bl	8005b10 <memp_malloc>
 800ce16:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d109      	bne.n	800ce32 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d151      	bne.n	800cec8 <sys_timeout_abs+0xc4>
 800ce24:	4b2a      	ldr	r3, [pc, #168]	; (800ced0 <sys_timeout_abs+0xcc>)
 800ce26:	22be      	movs	r2, #190	; 0xbe
 800ce28:	492a      	ldr	r1, [pc, #168]	; (800ced4 <sys_timeout_abs+0xd0>)
 800ce2a:	482b      	ldr	r0, [pc, #172]	; (800ced8 <sys_timeout_abs+0xd4>)
 800ce2c:	f003 f986 	bl	801013c <iprintf>
    return;
 800ce30:	e04a      	b.n	800cec8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2200      	movs	r2, #0
 800ce36:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ce4a:	4b24      	ldr	r3, [pc, #144]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ce52:	4a22      	ldr	r2, [pc, #136]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6013      	str	r3, [r2, #0]
    return;
 800ce58:	e037      	b.n	800ceca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	4b1f      	ldr	r3, [pc, #124]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	0fdb      	lsrs	r3, r3, #31
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d007      	beq.n	800ce82 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ce72:	4b1a      	ldr	r3, [pc, #104]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ce7a:	4a18      	ldr	r2, [pc, #96]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	e023      	b.n	800ceca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ce82:	4b16      	ldr	r3, [pc, #88]	; (800cedc <sys_timeout_abs+0xd8>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e01a      	b.n	800cec0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00b      	beq.n	800ceaa <sys_timeout_abs+0xa6>
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	0fdb      	lsrs	r3, r3, #31
 800cea0:	f003 0301 	and.w	r3, r3, #1
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d007      	beq.n	800ceba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	601a      	str	r2, [r3, #0]
        break;
 800ceb8:	e007      	b.n	800ceca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e1      	bne.n	800ce8a <sys_timeout_abs+0x86>
 800cec6:	e000      	b.n	800ceca <sys_timeout_abs+0xc6>
    return;
 800cec8:	bf00      	nop
      }
    }
  }
}
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	08013274 	.word	0x08013274
 800ced4:	080132a8 	.word	0x080132a8
 800ced8:	080132e8 	.word	0x080132e8
 800cedc:	20000564 	.word	0x20000564

0800cee0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	4798      	blx	r3

  now = sys_now();
 800cef2:	f7f6 fd27 	bl	8003944 <sys_now>
 800cef6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <lwip_cyclic_timer+0x5c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4413      	add	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	0fdb      	lsrs	r3, r3, #31
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d009      	beq.n	800cf2a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	4907      	ldr	r1, [pc, #28]	; (800cf40 <lwip_cyclic_timer+0x60>)
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff ff6e 	bl	800ce04 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cf28:	e004      	b.n	800cf34 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	4904      	ldr	r1, [pc, #16]	; (800cf40 <lwip_cyclic_timer+0x60>)
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7ff ff68 	bl	800ce04 <sys_timeout_abs>
}
 800cf34:	bf00      	nop
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000568 	.word	0x20000568
 800cf40:	0800cee1 	.word	0x0800cee1

0800cf44 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	607b      	str	r3, [r7, #4]
 800cf4e:	e00e      	b.n	800cf6e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cf50:	4a0a      	ldr	r2, [pc, #40]	; (800cf7c <sys_timeouts_init+0x38>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	4a07      	ldr	r2, [pc, #28]	; (800cf7c <sys_timeouts_init+0x38>)
 800cf5e:	4413      	add	r3, r2
 800cf60:	461a      	mov	r2, r3
 800cf62:	4907      	ldr	r1, [pc, #28]	; (800cf80 <sys_timeouts_init+0x3c>)
 800cf64:	f000 f80e 	bl	800cf84 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	607b      	str	r3, [r7, #4]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d9ed      	bls.n	800cf50 <sys_timeouts_init+0xc>
  }
}
 800cf74:	bf00      	nop
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	080142d8 	.word	0x080142d8
 800cf80:	0800cee1 	.word	0x0800cee1

0800cf84 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b086      	sub	sp, #24
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf96:	d306      	bcc.n	800cfa6 <sys_timeout+0x22>
 800cf98:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <sys_timeout+0x40>)
 800cf9a:	f240 1229 	movw	r2, #297	; 0x129
 800cf9e:	490a      	ldr	r1, [pc, #40]	; (800cfc8 <sys_timeout+0x44>)
 800cfa0:	480a      	ldr	r0, [pc, #40]	; (800cfcc <sys_timeout+0x48>)
 800cfa2:	f003 f8cb 	bl	801013c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cfa6:	f7f6 fccd 	bl	8003944 <sys_now>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	68b9      	ldr	r1, [r7, #8]
 800cfb6:	6978      	ldr	r0, [r7, #20]
 800cfb8:	f7ff ff24 	bl	800ce04 <sys_timeout_abs>
#endif
}
 800cfbc:	bf00      	nop
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	08013274 	.word	0x08013274
 800cfc8:	08013310 	.word	0x08013310
 800cfcc:	080132e8 	.word	0x080132e8

0800cfd0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cfd6:	f7f6 fcb5 	bl	8003944 <sys_now>
 800cfda:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cfdc:	4b1a      	ldr	r3, [pc, #104]	; (800d048 <sys_check_timeouts+0x78>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <sys_check_timeouts+0x1a>
 800cfe6:	f7f9 f8b7 	bl	8006158 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cfea:	4b18      	ldr	r3, [pc, #96]	; (800d04c <sys_check_timeouts+0x7c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d022      	beq.n	800d03c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	0fdb      	lsrs	r3, r3, #31
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d11a      	bne.n	800d040 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a0f      	ldr	r2, [pc, #60]	; (800d04c <sys_check_timeouts+0x7c>)
 800d010:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	4a0b      	ldr	r2, [pc, #44]	; (800d050 <sys_check_timeouts+0x80>)
 800d024:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	2006      	movs	r0, #6
 800d02a:	f7f8 fdbd 	bl	8005ba8 <memp_free>
    if (handler != NULL) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d0d3      	beq.n	800cfdc <sys_check_timeouts+0xc>
      handler(arg);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	4798      	blx	r3
  do {
 800d03a:	e7cf      	b.n	800cfdc <sys_check_timeouts+0xc>
      return;
 800d03c:	bf00      	nop
 800d03e:	e000      	b.n	800d042 <sys_check_timeouts+0x72>
      return;
 800d040:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	20006cf0 	.word	0x20006cf0
 800d04c:	20000564 	.word	0x20000564
 800d050:	20000568 	.word	0x20000568

0800d054 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d058:	f003 f888 	bl	801016c <rand>
 800d05c:	4603      	mov	r3, r0
 800d05e:	b29b      	uxth	r3, r3
 800d060:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d064:	b29b      	uxth	r3, r3
 800d066:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	4b01      	ldr	r3, [pc, #4]	; (800d074 <udp_init+0x20>)
 800d06e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d070:	bf00      	nop
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20000018 	.word	0x20000018

0800d078 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d082:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <udp_new_port+0x68>)
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	b291      	uxth	r1, r2
 800d08a:	4a15      	ldr	r2, [pc, #84]	; (800d0e0 <udp_new_port+0x68>)
 800d08c:	8011      	strh	r1, [r2, #0]
 800d08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d092:	4293      	cmp	r3, r2
 800d094:	d103      	bne.n	800d09e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d096:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <udp_new_port+0x68>)
 800d098:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d09c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d09e:	4b11      	ldr	r3, [pc, #68]	; (800d0e4 <udp_new_port+0x6c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	603b      	str	r3, [r7, #0]
 800d0a4:	e011      	b.n	800d0ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	8a5a      	ldrh	r2, [r3, #18]
 800d0aa:	4b0d      	ldr	r3, [pc, #52]	; (800d0e0 <udp_new_port+0x68>)
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d108      	bne.n	800d0c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	80fb      	strh	r3, [r7, #6]
 800d0b8:	88fb      	ldrh	r3, [r7, #6]
 800d0ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0be:	d3e0      	bcc.n	800d082 <udp_new_port+0xa>
        return 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e007      	b.n	800d0d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	603b      	str	r3, [r7, #0]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1ea      	bne.n	800d0a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d0d0:	4b03      	ldr	r3, [pc, #12]	; (800d0e0 <udp_new_port+0x68>)
 800d0d2:	881b      	ldrh	r3, [r3, #0]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20000018 	.word	0x20000018
 800d0e4:	20006d10 	.word	0x20006d10

0800d0e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d105      	bne.n	800d108 <udp_input_local_match+0x20>
 800d0fc:	4b27      	ldr	r3, [pc, #156]	; (800d19c <udp_input_local_match+0xb4>)
 800d0fe:	2287      	movs	r2, #135	; 0x87
 800d100:	4927      	ldr	r1, [pc, #156]	; (800d1a0 <udp_input_local_match+0xb8>)
 800d102:	4828      	ldr	r0, [pc, #160]	; (800d1a4 <udp_input_local_match+0xbc>)
 800d104:	f003 f81a 	bl	801013c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d105      	bne.n	800d11a <udp_input_local_match+0x32>
 800d10e:	4b23      	ldr	r3, [pc, #140]	; (800d19c <udp_input_local_match+0xb4>)
 800d110:	2288      	movs	r2, #136	; 0x88
 800d112:	4925      	ldr	r1, [pc, #148]	; (800d1a8 <udp_input_local_match+0xc0>)
 800d114:	4823      	ldr	r0, [pc, #140]	; (800d1a4 <udp_input_local_match+0xbc>)
 800d116:	f003 f811 	bl	801013c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	7a1b      	ldrb	r3, [r3, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00b      	beq.n	800d13a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	7a1a      	ldrb	r2, [r3, #8]
 800d126:	4b21      	ldr	r3, [pc, #132]	; (800d1ac <udp_input_local_match+0xc4>)
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d12e:	3301      	adds	r3, #1
 800d130:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d132:	429a      	cmp	r2, r3
 800d134:	d001      	beq.n	800d13a <udp_input_local_match+0x52>
    return 0;
 800d136:	2300      	movs	r3, #0
 800d138:	e02b      	b.n	800d192 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d018      	beq.n	800d172 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d013      	beq.n	800d16e <udp_input_local_match+0x86>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00f      	beq.n	800d16e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d14e:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <udp_input_local_match+0xc4>)
 800d150:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d156:	d00a      	beq.n	800d16e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <udp_input_local_match+0xc4>)
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	405a      	eors	r2, r3
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	3308      	adds	r3, #8
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d110      	bne.n	800d190 <udp_input_local_match+0xa8>
          return 1;
 800d16e:	2301      	movs	r3, #1
 800d170:	e00f      	b.n	800d192 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d009      	beq.n	800d18c <udp_input_local_match+0xa4>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d005      	beq.n	800d18c <udp_input_local_match+0xa4>
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	4b09      	ldr	r3, [pc, #36]	; (800d1ac <udp_input_local_match+0xc4>)
 800d186:	695b      	ldr	r3, [r3, #20]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d101      	bne.n	800d190 <udp_input_local_match+0xa8>
        return 1;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e000      	b.n	800d192 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	0801335c 	.word	0x0801335c
 800d1a0:	0801338c 	.word	0x0801338c
 800d1a4:	080133b0 	.word	0x080133b0
 800d1a8:	080133d8 	.word	0x080133d8
 800d1ac:	200037b4 	.word	0x200037b4

0800d1b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b08d      	sub	sp, #52	; 0x34
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d105      	bne.n	800d1d0 <udp_input+0x20>
 800d1c4:	4b7c      	ldr	r3, [pc, #496]	; (800d3b8 <udp_input+0x208>)
 800d1c6:	22cf      	movs	r2, #207	; 0xcf
 800d1c8:	497c      	ldr	r1, [pc, #496]	; (800d3bc <udp_input+0x20c>)
 800d1ca:	487d      	ldr	r0, [pc, #500]	; (800d3c0 <udp_input+0x210>)
 800d1cc:	f002 ffb6 	bl	801013c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d105      	bne.n	800d1e2 <udp_input+0x32>
 800d1d6:	4b78      	ldr	r3, [pc, #480]	; (800d3b8 <udp_input+0x208>)
 800d1d8:	22d0      	movs	r2, #208	; 0xd0
 800d1da:	497a      	ldr	r1, [pc, #488]	; (800d3c4 <udp_input+0x214>)
 800d1dc:	4878      	ldr	r0, [pc, #480]	; (800d3c0 <udp_input+0x210>)
 800d1de:	f002 ffad 	bl	801013c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	895b      	ldrh	r3, [r3, #10]
 800d1e6:	2b07      	cmp	r3, #7
 800d1e8:	d803      	bhi.n	800d1f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f9 faea 	bl	80067c4 <pbuf_free>
    goto end;
 800d1f0:	e0de      	b.n	800d3b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d1f8:	4b73      	ldr	r3, [pc, #460]	; (800d3c8 <udp_input+0x218>)
 800d1fa:	695a      	ldr	r2, [r3, #20]
 800d1fc:	4b72      	ldr	r3, [pc, #456]	; (800d3c8 <udp_input+0x218>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f002 f808 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800d208:	4603      	mov	r3, r0
 800d20a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	b29b      	uxth	r3, r3
 800d212:	4618      	mov	r0, r3
 800d214:	f7f7 ffbc 	bl	8005190 <lwip_htons>
 800d218:	4603      	mov	r3, r0
 800d21a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	885b      	ldrh	r3, [r3, #2]
 800d220:	b29b      	uxth	r3, r3
 800d222:	4618      	mov	r0, r3
 800d224:	f7f7 ffb4 	bl	8005190 <lwip_htons>
 800d228:	4603      	mov	r3, r0
 800d22a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d22c:	2300      	movs	r3, #0
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d230:	2300      	movs	r3, #0
 800d232:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d234:	2300      	movs	r3, #0
 800d236:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d238:	4b64      	ldr	r3, [pc, #400]	; (800d3cc <udp_input+0x21c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	627b      	str	r3, [r7, #36]	; 0x24
 800d23e:	e054      	b.n	800d2ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	8a5b      	ldrh	r3, [r3, #18]
 800d244:	89fa      	ldrh	r2, [r7, #14]
 800d246:	429a      	cmp	r2, r3
 800d248:	d14a      	bne.n	800d2e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d24a:	7cfb      	ldrb	r3, [r7, #19]
 800d24c:	461a      	mov	r2, r3
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d252:	f7ff ff49 	bl	800d0e8 <udp_input_local_match>
 800d256:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d041      	beq.n	800d2e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	7c1b      	ldrb	r3, [r3, #16]
 800d260:	f003 0304 	and.w	r3, r3, #4
 800d264:	2b00      	cmp	r3, #0
 800d266:	d11d      	bne.n	800d2a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	61fb      	str	r3, [r7, #28]
 800d272:	e017      	b.n	800d2a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d274:	7cfb      	ldrb	r3, [r7, #19]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d014      	beq.n	800d2a4 <udp_input+0xf4>
 800d27a:	4b53      	ldr	r3, [pc, #332]	; (800d3c8 <udp_input+0x218>)
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d10f      	bne.n	800d2a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	3304      	adds	r3, #4
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d008      	beq.n	800d2a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	3304      	adds	r3, #4
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d101      	bne.n	800d2a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	8a9b      	ldrh	r3, [r3, #20]
 800d2a8:	8a3a      	ldrh	r2, [r7, #16]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d118      	bne.n	800d2e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d005      	beq.n	800d2c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	685a      	ldr	r2, [r3, #4]
 800d2ba:	4b43      	ldr	r3, [pc, #268]	; (800d3c8 <udp_input+0x218>)
 800d2bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d10e      	bne.n	800d2e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d014      	beq.n	800d2f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d2d0:	4b3e      	ldr	r3, [pc, #248]	; (800d3cc <udp_input+0x21c>)
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d2d8:	4a3c      	ldr	r2, [pc, #240]	; (800d3cc <udp_input+0x21c>)
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d2de:	e008      	b.n	800d2f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1a7      	bne.n	800d240 <udp_input+0x90>
 800d2f0:	e000      	b.n	800d2f4 <udp_input+0x144>
        break;
 800d2f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <udp_input+0x14e>
    pcb = uncon_pcb;
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <udp_input+0x15a>
    for_us = 1;
 800d304:	2301      	movs	r3, #1
 800d306:	76fb      	strb	r3, [r7, #27]
 800d308:	e00a      	b.n	800d320 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	3304      	adds	r3, #4
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	4b2d      	ldr	r3, [pc, #180]	; (800d3c8 <udp_input+0x218>)
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	429a      	cmp	r2, r3
 800d316:	bf0c      	ite	eq
 800d318:	2301      	moveq	r3, #1
 800d31a:	2300      	movne	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d320:	7efb      	ldrb	r3, [r7, #27]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d041      	beq.n	800d3aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d326:	2108      	movs	r1, #8
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7f9 f9c5 	bl	80066b8 <pbuf_remove_header>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00a      	beq.n	800d34a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d334:	4b20      	ldr	r3, [pc, #128]	; (800d3b8 <udp_input+0x208>)
 800d336:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d33a:	4925      	ldr	r1, [pc, #148]	; (800d3d0 <udp_input+0x220>)
 800d33c:	4820      	ldr	r0, [pc, #128]	; (800d3c0 <udp_input+0x210>)
 800d33e:	f002 fefd 	bl	801013c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7f9 fa3e 	bl	80067c4 <pbuf_free>
      goto end;
 800d348:	e032      	b.n	800d3b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d012      	beq.n	800d376 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00a      	beq.n	800d36e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	699c      	ldr	r4, [r3, #24]
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	69d8      	ldr	r0, [r3, #28]
 800d360:	8a3b      	ldrh	r3, [r7, #16]
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	4b1b      	ldr	r3, [pc, #108]	; (800d3d4 <udp_input+0x224>)
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d36a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d36c:	e021      	b.n	800d3b2 <udp_input+0x202>
        pbuf_free(p);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7f9 fa28 	bl	80067c4 <pbuf_free>
        goto end;
 800d374:	e01c      	b.n	800d3b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d376:	7cfb      	ldrb	r3, [r7, #19]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d112      	bne.n	800d3a2 <udp_input+0x1f2>
 800d37c:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <udp_input+0x218>)
 800d37e:	695b      	ldr	r3, [r3, #20]
 800d380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d384:	2be0      	cmp	r3, #224	; 0xe0
 800d386:	d00c      	beq.n	800d3a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d388:	4b0f      	ldr	r3, [pc, #60]	; (800d3c8 <udp_input+0x218>)
 800d38a:	899b      	ldrh	r3, [r3, #12]
 800d38c:	3308      	adds	r3, #8
 800d38e:	b29b      	uxth	r3, r3
 800d390:	b21b      	sxth	r3, r3
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7f9 fa02 	bl	800679e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d39a:	2103      	movs	r1, #3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f001 fc1d 	bl	800ebdc <icmp_dest_unreach>
      pbuf_free(p);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7f9 fa0e 	bl	80067c4 <pbuf_free>
  return;
 800d3a8:	e003      	b.n	800d3b2 <udp_input+0x202>
    pbuf_free(p);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f9 fa0a 	bl	80067c4 <pbuf_free>
  return;
 800d3b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d3b2:	372c      	adds	r7, #44	; 0x2c
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd90      	pop	{r4, r7, pc}
 800d3b8:	0801335c 	.word	0x0801335c
 800d3bc:	08013400 	.word	0x08013400
 800d3c0:	080133b0 	.word	0x080133b0
 800d3c4:	08013418 	.word	0x08013418
 800d3c8:	200037b4 	.word	0x200037b4
 800d3cc:	20006d10 	.word	0x20006d10
 800d3d0:	08013434 	.word	0x08013434
 800d3d4:	200037c4 	.word	0x200037c4

0800d3d8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d109      	bne.n	800d3fc <udp_send+0x24>
 800d3e8:	4b11      	ldr	r3, [pc, #68]	; (800d430 <udp_send+0x58>)
 800d3ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d3ee:	4911      	ldr	r1, [pc, #68]	; (800d434 <udp_send+0x5c>)
 800d3f0:	4811      	ldr	r0, [pc, #68]	; (800d438 <udp_send+0x60>)
 800d3f2:	f002 fea3 	bl	801013c <iprintf>
 800d3f6:	f06f 030f 	mvn.w	r3, #15
 800d3fa:	e015      	b.n	800d428 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <udp_send+0x3e>
 800d402:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <udp_send+0x58>)
 800d404:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d408:	490c      	ldr	r1, [pc, #48]	; (800d43c <udp_send+0x64>)
 800d40a:	480b      	ldr	r0, [pc, #44]	; (800d438 <udp_send+0x60>)
 800d40c:	f002 fe96 	bl	801013c <iprintf>
 800d410:	f06f 030f 	mvn.w	r3, #15
 800d414:	e008      	b.n	800d428 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	1d1a      	adds	r2, r3, #4
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	8a9b      	ldrh	r3, [r3, #20]
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f80d 	bl	800d440 <udp_sendto>
 800d426:	4603      	mov	r3, r0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	0801335c 	.word	0x0801335c
 800d434:	08013450 	.word	0x08013450
 800d438:	080133b0 	.word	0x080133b0
 800d43c:	08013468 	.word	0x08013468

0800d440 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af02      	add	r7, sp, #8
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d109      	bne.n	800d468 <udp_sendto+0x28>
 800d454:	4b23      	ldr	r3, [pc, #140]	; (800d4e4 <udp_sendto+0xa4>)
 800d456:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d45a:	4923      	ldr	r1, [pc, #140]	; (800d4e8 <udp_sendto+0xa8>)
 800d45c:	4823      	ldr	r0, [pc, #140]	; (800d4ec <udp_sendto+0xac>)
 800d45e:	f002 fe6d 	bl	801013c <iprintf>
 800d462:	f06f 030f 	mvn.w	r3, #15
 800d466:	e038      	b.n	800d4da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d109      	bne.n	800d482 <udp_sendto+0x42>
 800d46e:	4b1d      	ldr	r3, [pc, #116]	; (800d4e4 <udp_sendto+0xa4>)
 800d470:	f240 2219 	movw	r2, #537	; 0x219
 800d474:	491e      	ldr	r1, [pc, #120]	; (800d4f0 <udp_sendto+0xb0>)
 800d476:	481d      	ldr	r0, [pc, #116]	; (800d4ec <udp_sendto+0xac>)
 800d478:	f002 fe60 	bl	801013c <iprintf>
 800d47c:	f06f 030f 	mvn.w	r3, #15
 800d480:	e02b      	b.n	800d4da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <udp_sendto+0x5c>
 800d488:	4b16      	ldr	r3, [pc, #88]	; (800d4e4 <udp_sendto+0xa4>)
 800d48a:	f240 221a 	movw	r2, #538	; 0x21a
 800d48e:	4919      	ldr	r1, [pc, #100]	; (800d4f4 <udp_sendto+0xb4>)
 800d490:	4816      	ldr	r0, [pc, #88]	; (800d4ec <udp_sendto+0xac>)
 800d492:	f002 fe53 	bl	801013c <iprintf>
 800d496:	f06f 030f 	mvn.w	r3, #15
 800d49a:	e01e      	b.n	800d4da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	7a1b      	ldrb	r3, [r3, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d006      	beq.n	800d4b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	7a1b      	ldrb	r3, [r3, #8]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f8 fe2f 	bl	800610c <netif_get_by_index>
 800d4ae:	6178      	str	r0, [r7, #20]
 800d4b0:	e003      	b.n	800d4ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f001 fc1c 	bl	800ecf0 <ip4_route>
 800d4b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d4c0:	f06f 0303 	mvn.w	r3, #3
 800d4c4:	e009      	b.n	800d4da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d4c6:	887a      	ldrh	r2, [r7, #2]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	68b9      	ldr	r1, [r7, #8]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f000 f810 	bl	800d4f8 <udp_sendto_if>
 800d4d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0801335c 	.word	0x0801335c
 800d4e8:	08013480 	.word	0x08013480
 800d4ec:	080133b0 	.word	0x080133b0
 800d4f0:	08013498 	.word	0x08013498
 800d4f4:	080134b4 	.word	0x080134b4

0800d4f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d109      	bne.n	800d520 <udp_sendto_if+0x28>
 800d50c:	4b2e      	ldr	r3, [pc, #184]	; (800d5c8 <udp_sendto_if+0xd0>)
 800d50e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d512:	492e      	ldr	r1, [pc, #184]	; (800d5cc <udp_sendto_if+0xd4>)
 800d514:	482e      	ldr	r0, [pc, #184]	; (800d5d0 <udp_sendto_if+0xd8>)
 800d516:	f002 fe11 	bl	801013c <iprintf>
 800d51a:	f06f 030f 	mvn.w	r3, #15
 800d51e:	e04f      	b.n	800d5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d109      	bne.n	800d53a <udp_sendto_if+0x42>
 800d526:	4b28      	ldr	r3, [pc, #160]	; (800d5c8 <udp_sendto_if+0xd0>)
 800d528:	f240 2281 	movw	r2, #641	; 0x281
 800d52c:	4929      	ldr	r1, [pc, #164]	; (800d5d4 <udp_sendto_if+0xdc>)
 800d52e:	4828      	ldr	r0, [pc, #160]	; (800d5d0 <udp_sendto_if+0xd8>)
 800d530:	f002 fe04 	bl	801013c <iprintf>
 800d534:	f06f 030f 	mvn.w	r3, #15
 800d538:	e042      	b.n	800d5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d109      	bne.n	800d554 <udp_sendto_if+0x5c>
 800d540:	4b21      	ldr	r3, [pc, #132]	; (800d5c8 <udp_sendto_if+0xd0>)
 800d542:	f240 2282 	movw	r2, #642	; 0x282
 800d546:	4924      	ldr	r1, [pc, #144]	; (800d5d8 <udp_sendto_if+0xe0>)
 800d548:	4821      	ldr	r0, [pc, #132]	; (800d5d0 <udp_sendto_if+0xd8>)
 800d54a:	f002 fdf7 	bl	801013c <iprintf>
 800d54e:	f06f 030f 	mvn.w	r3, #15
 800d552:	e035      	b.n	800d5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d109      	bne.n	800d56e <udp_sendto_if+0x76>
 800d55a:	4b1b      	ldr	r3, [pc, #108]	; (800d5c8 <udp_sendto_if+0xd0>)
 800d55c:	f240 2283 	movw	r2, #643	; 0x283
 800d560:	491e      	ldr	r1, [pc, #120]	; (800d5dc <udp_sendto_if+0xe4>)
 800d562:	481b      	ldr	r0, [pc, #108]	; (800d5d0 <udp_sendto_if+0xd8>)
 800d564:	f002 fdea 	bl	801013c <iprintf>
 800d568:	f06f 030f 	mvn.w	r3, #15
 800d56c:	e028      	b.n	800d5c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d009      	beq.n	800d588 <udp_sendto_if+0x90>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d584:	2be0      	cmp	r3, #224	; 0xe0
 800d586:	d103      	bne.n	800d590 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	3304      	adds	r3, #4
 800d58c:	617b      	str	r3, [r7, #20]
 800d58e:	e00b      	b.n	800d5a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	3304      	adds	r3, #4
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d002      	beq.n	800d5a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d59e:	f06f 0303 	mvn.w	r3, #3
 800d5a2:	e00d      	b.n	800d5c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d5a8:	887a      	ldrh	r2, [r7, #2]
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	68b9      	ldr	r1, [r7, #8]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 f811 	bl	800d5e0 <udp_sendto_if_src>
 800d5be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	0801335c 	.word	0x0801335c
 800d5cc:	080134d0 	.word	0x080134d0
 800d5d0:	080133b0 	.word	0x080133b0
 800d5d4:	080134ec 	.word	0x080134ec
 800d5d8:	08013508 	.word	0x08013508
 800d5dc:	08013528 	.word	0x08013528

0800d5e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08c      	sub	sp, #48	; 0x30
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d109      	bne.n	800d608 <udp_sendto_if_src+0x28>
 800d5f4:	4b65      	ldr	r3, [pc, #404]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d5f6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5fa:	4965      	ldr	r1, [pc, #404]	; (800d790 <udp_sendto_if_src+0x1b0>)
 800d5fc:	4865      	ldr	r0, [pc, #404]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d5fe:	f002 fd9d 	bl	801013c <iprintf>
 800d602:	f06f 030f 	mvn.w	r3, #15
 800d606:	e0bc      	b.n	800d782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <udp_sendto_if_src+0x42>
 800d60e:	4b5f      	ldr	r3, [pc, #380]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d610:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d614:	4960      	ldr	r1, [pc, #384]	; (800d798 <udp_sendto_if_src+0x1b8>)
 800d616:	485f      	ldr	r0, [pc, #380]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d618:	f002 fd90 	bl	801013c <iprintf>
 800d61c:	f06f 030f 	mvn.w	r3, #15
 800d620:	e0af      	b.n	800d782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d109      	bne.n	800d63c <udp_sendto_if_src+0x5c>
 800d628:	4b58      	ldr	r3, [pc, #352]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d62a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d62e:	495b      	ldr	r1, [pc, #364]	; (800d79c <udp_sendto_if_src+0x1bc>)
 800d630:	4858      	ldr	r0, [pc, #352]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d632:	f002 fd83 	bl	801013c <iprintf>
 800d636:	f06f 030f 	mvn.w	r3, #15
 800d63a:	e0a2      	b.n	800d782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <udp_sendto_if_src+0x76>
 800d642:	4b52      	ldr	r3, [pc, #328]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d644:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d648:	4955      	ldr	r1, [pc, #340]	; (800d7a0 <udp_sendto_if_src+0x1c0>)
 800d64a:	4852      	ldr	r0, [pc, #328]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d64c:	f002 fd76 	bl	801013c <iprintf>
 800d650:	f06f 030f 	mvn.w	r3, #15
 800d654:	e095      	b.n	800d782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d109      	bne.n	800d670 <udp_sendto_if_src+0x90>
 800d65c:	4b4b      	ldr	r3, [pc, #300]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d65e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d662:	4950      	ldr	r1, [pc, #320]	; (800d7a4 <udp_sendto_if_src+0x1c4>)
 800d664:	484b      	ldr	r0, [pc, #300]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d666:	f002 fd69 	bl	801013c <iprintf>
 800d66a:	f06f 030f 	mvn.w	r3, #15
 800d66e:	e088      	b.n	800d782 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	8a5b      	ldrh	r3, [r3, #18]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10f      	bne.n	800d698 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d678:	68f9      	ldr	r1, [r7, #12]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8a5b      	ldrh	r3, [r3, #18]
 800d67e:	461a      	mov	r2, r3
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 f893 	bl	800d7ac <udp_bind>
 800d686:	4603      	mov	r3, r0
 800d688:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d68a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d692:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d696:	e074      	b.n	800d782 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	891b      	ldrh	r3, [r3, #8]
 800d69c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d902      	bls.n	800d6aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	e06b      	b.n	800d782 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d6aa:	2108      	movs	r1, #8
 800d6ac:	68b8      	ldr	r0, [r7, #8]
 800d6ae:	f7f8 fff3 	bl	8006698 <pbuf_add_header>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d015      	beq.n	800d6e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d6b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6bc:	2108      	movs	r1, #8
 800d6be:	2022      	movs	r0, #34	; 0x22
 800d6c0:	f7f8 fda0 	bl	8006204 <pbuf_alloc>
 800d6c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d0:	e057      	b.n	800d782 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	891b      	ldrh	r3, [r3, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d006      	beq.n	800d6e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	69f8      	ldr	r0, [r7, #28]
 800d6de:	f7f9 f989 	bl	80069f4 <pbuf_chain>
 800d6e2:	e001      	b.n	800d6e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	895b      	ldrh	r3, [r3, #10]
 800d6ec:	2b07      	cmp	r3, #7
 800d6ee:	d806      	bhi.n	800d6fe <udp_sendto_if_src+0x11e>
 800d6f0:	4b26      	ldr	r3, [pc, #152]	; (800d78c <udp_sendto_if_src+0x1ac>)
 800d6f2:	f240 320e 	movw	r2, #782	; 0x30e
 800d6f6:	492c      	ldr	r1, [pc, #176]	; (800d7a8 <udp_sendto_if_src+0x1c8>)
 800d6f8:	4826      	ldr	r0, [pc, #152]	; (800d794 <udp_sendto_if_src+0x1b4>)
 800d6fa:	f002 fd1f 	bl	801013c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8a5b      	ldrh	r3, [r3, #18]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f7 fd41 	bl	8005190 <lwip_htons>
 800d70e:	4603      	mov	r3, r0
 800d710:	461a      	mov	r2, r3
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d716:	887b      	ldrh	r3, [r7, #2]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f7 fd39 	bl	8005190 <lwip_htons>
 800d71e:	4603      	mov	r3, r0
 800d720:	461a      	mov	r2, r3
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2200      	movs	r2, #0
 800d72a:	719a      	strb	r2, [r3, #6]
 800d72c:	2200      	movs	r2, #0
 800d72e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	891b      	ldrh	r3, [r3, #8]
 800d734:	4618      	mov	r0, r3
 800d736:	f7f7 fd2b 	bl	8005190 <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	461a      	mov	r2, r3
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d742:	2311      	movs	r3, #17
 800d744:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	7adb      	ldrb	r3, [r3, #11]
 800d74a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	7a9b      	ldrb	r3, [r3, #10]
 800d750:	7cb9      	ldrb	r1, [r7, #18]
 800d752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d754:	9202      	str	r2, [sp, #8]
 800d756:	7cfa      	ldrb	r2, [r7, #19]
 800d758:	9201      	str	r2, [sp, #4]
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	460b      	mov	r3, r1
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d762:	69f8      	ldr	r0, [r7, #28]
 800d764:	f001 fcaa 	bl	800f0bc <ip4_output_if_src>
 800d768:	4603      	mov	r3, r0
 800d76a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d76c:	69fa      	ldr	r2, [r7, #28]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	429a      	cmp	r2, r3
 800d772:	d004      	beq.n	800d77e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d774:	69f8      	ldr	r0, [r7, #28]
 800d776:	f7f9 f825 	bl	80067c4 <pbuf_free>
    q = NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d77e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3720      	adds	r7, #32
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	0801335c 	.word	0x0801335c
 800d790:	08013548 	.word	0x08013548
 800d794:	080133b0 	.word	0x080133b0
 800d798:	08013568 	.word	0x08013568
 800d79c:	08013588 	.word	0x08013588
 800d7a0:	080135ac 	.word	0x080135ac
 800d7a4:	080135d0 	.word	0x080135d0
 800d7a8:	080135f4 	.word	0x080135f4

0800d7ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d7c0:	4b39      	ldr	r3, [pc, #228]	; (800d8a8 <udp_bind+0xfc>)
 800d7c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <udp_bind+0x32>
 800d7ca:	4b38      	ldr	r3, [pc, #224]	; (800d8ac <udp_bind+0x100>)
 800d7cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d7d0:	4937      	ldr	r1, [pc, #220]	; (800d8b0 <udp_bind+0x104>)
 800d7d2:	4838      	ldr	r0, [pc, #224]	; (800d8b4 <udp_bind+0x108>)
 800d7d4:	f002 fcb2 	bl	801013c <iprintf>
 800d7d8:	f06f 030f 	mvn.w	r3, #15
 800d7dc:	e060      	b.n	800d8a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d7e2:	4b35      	ldr	r3, [pc, #212]	; (800d8b8 <udp_bind+0x10c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	e009      	b.n	800d7fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d102      	bne.n	800d7f8 <udp_bind+0x4c>
      rebind = 1;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	74fb      	strb	r3, [r7, #19]
      break;
 800d7f6:	e005      	b.n	800d804 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1f2      	bne.n	800d7ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d804:	88fb      	ldrh	r3, [r7, #6]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d109      	bne.n	800d81e <udp_bind+0x72>
    port = udp_new_port();
 800d80a:	f7ff fc35 	bl	800d078 <udp_new_port>
 800d80e:	4603      	mov	r3, r0
 800d810:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d812:	88fb      	ldrh	r3, [r7, #6]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d12c      	bne.n	800d872 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d818:	f06f 0307 	mvn.w	r3, #7
 800d81c:	e040      	b.n	800d8a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d81e:	4b26      	ldr	r3, [pc, #152]	; (800d8b8 <udp_bind+0x10c>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	e022      	b.n	800d86c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d01b      	beq.n	800d866 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	8a5b      	ldrh	r3, [r3, #18]
 800d832:	88fa      	ldrh	r2, [r7, #6]
 800d834:	429a      	cmp	r2, r3
 800d836:	d116      	bne.n	800d866 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d840:	429a      	cmp	r2, r3
 800d842:	d00d      	beq.n	800d860 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <udp_bind+0xb4>
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d006      	beq.n	800d860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d852:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d102      	bne.n	800d866 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d860:	f06f 0307 	mvn.w	r3, #7
 800d864:	e01c      	b.n	800d8a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	617b      	str	r3, [r7, #20]
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d9      	bne.n	800d826 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <udp_bind+0xd2>
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	e000      	b.n	800d880 <udp_bind+0xd4>
 800d87e:	2300      	movs	r3, #0
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	88fa      	ldrh	r2, [r7, #6]
 800d888:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d88a:	7cfb      	ldrb	r3, [r7, #19]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d106      	bne.n	800d89e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d890:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <udp_bind+0x10c>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d898:	4a07      	ldr	r2, [pc, #28]	; (800d8b8 <udp_bind+0x10c>)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	080142f0 	.word	0x080142f0
 800d8ac:	0801335c 	.word	0x0801335c
 800d8b0:	08013624 	.word	0x08013624
 800d8b4:	080133b0 	.word	0x080133b0
 800d8b8:	20006d10 	.word	0x20006d10

0800d8bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d109      	bne.n	800d8e4 <udp_connect+0x28>
 800d8d0:	4b2c      	ldr	r3, [pc, #176]	; (800d984 <udp_connect+0xc8>)
 800d8d2:	f240 4235 	movw	r2, #1077	; 0x435
 800d8d6:	492c      	ldr	r1, [pc, #176]	; (800d988 <udp_connect+0xcc>)
 800d8d8:	482c      	ldr	r0, [pc, #176]	; (800d98c <udp_connect+0xd0>)
 800d8da:	f002 fc2f 	bl	801013c <iprintf>
 800d8de:	f06f 030f 	mvn.w	r3, #15
 800d8e2:	e04b      	b.n	800d97c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d109      	bne.n	800d8fe <udp_connect+0x42>
 800d8ea:	4b26      	ldr	r3, [pc, #152]	; (800d984 <udp_connect+0xc8>)
 800d8ec:	f240 4236 	movw	r2, #1078	; 0x436
 800d8f0:	4927      	ldr	r1, [pc, #156]	; (800d990 <udp_connect+0xd4>)
 800d8f2:	4826      	ldr	r0, [pc, #152]	; (800d98c <udp_connect+0xd0>)
 800d8f4:	f002 fc22 	bl	801013c <iprintf>
 800d8f8:	f06f 030f 	mvn.w	r3, #15
 800d8fc:	e03e      	b.n	800d97c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8a5b      	ldrh	r3, [r3, #18]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10f      	bne.n	800d926 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d906:	68f9      	ldr	r1, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	8a5b      	ldrh	r3, [r3, #18]
 800d90c:	461a      	mov	r2, r3
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7ff ff4c 	bl	800d7ac <udp_bind>
 800d914:	4603      	mov	r3, r0
 800d916:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d918:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <udp_connect+0x6a>
      return err;
 800d920:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d924:	e02a      	b.n	800d97c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <udp_connect+0x76>
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	e000      	b.n	800d934 <udp_connect+0x78>
 800d932:	2300      	movs	r3, #0
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	88fa      	ldrh	r2, [r7, #6]
 800d93c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	7c1b      	ldrb	r3, [r3, #16]
 800d942:	f043 0304 	orr.w	r3, r3, #4
 800d946:	b2da      	uxtb	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d94c:	4b11      	ldr	r3, [pc, #68]	; (800d994 <udp_connect+0xd8>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	e008      	b.n	800d966 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d101      	bne.n	800d960 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e00d      	b.n	800d97c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	617b      	str	r3, [r7, #20]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f3      	bne.n	800d954 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d96c:	4b09      	ldr	r3, [pc, #36]	; (800d994 <udp_connect+0xd8>)
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d974:	4a07      	ldr	r2, [pc, #28]	; (800d994 <udp_connect+0xd8>)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0801335c 	.word	0x0801335c
 800d988:	0801363c 	.word	0x0801363c
 800d98c:	080133b0 	.word	0x080133b0
 800d990:	08013658 	.word	0x08013658
 800d994:	20006d10 	.word	0x20006d10

0800d998 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d107      	bne.n	800d9b6 <udp_disconnect+0x1e>
 800d9a6:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <udp_disconnect+0x44>)
 800d9a8:	f240 426a 	movw	r2, #1130	; 0x46a
 800d9ac:	490c      	ldr	r1, [pc, #48]	; (800d9e0 <udp_disconnect+0x48>)
 800d9ae:	480d      	ldr	r0, [pc, #52]	; (800d9e4 <udp_disconnect+0x4c>)
 800d9b0:	f002 fbc4 	bl	801013c <iprintf>
 800d9b4:	e00f      	b.n	800d9d6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7c1b      	ldrb	r3, [r3, #16]
 800d9cc:	f023 0304 	bic.w	r3, r3, #4
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	741a      	strb	r2, [r3, #16]
}
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	0801335c 	.word	0x0801335c
 800d9e0:	08013674 	.word	0x08013674
 800d9e4:	080133b0 	.word	0x080133b0

0800d9e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d107      	bne.n	800da0a <udp_recv+0x22>
 800d9fa:	4b08      	ldr	r3, [pc, #32]	; (800da1c <udp_recv+0x34>)
 800d9fc:	f240 428a 	movw	r2, #1162	; 0x48a
 800da00:	4907      	ldr	r1, [pc, #28]	; (800da20 <udp_recv+0x38>)
 800da02:	4808      	ldr	r0, [pc, #32]	; (800da24 <udp_recv+0x3c>)
 800da04:	f002 fb9a 	bl	801013c <iprintf>
 800da08:	e005      	b.n	800da16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	61da      	str	r2, [r3, #28]
}
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	0801335c 	.word	0x0801335c
 800da20:	08013690 	.word	0x08013690
 800da24:	080133b0 	.word	0x080133b0

0800da28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d107      	bne.n	800da46 <udp_remove+0x1e>
 800da36:	4b19      	ldr	r3, [pc, #100]	; (800da9c <udp_remove+0x74>)
 800da38:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800da3c:	4918      	ldr	r1, [pc, #96]	; (800daa0 <udp_remove+0x78>)
 800da3e:	4819      	ldr	r0, [pc, #100]	; (800daa4 <udp_remove+0x7c>)
 800da40:	f002 fb7c 	bl	801013c <iprintf>
 800da44:	e026      	b.n	800da94 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da46:	4b18      	ldr	r3, [pc, #96]	; (800daa8 <udp_remove+0x80>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d105      	bne.n	800da5c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da50:	4b15      	ldr	r3, [pc, #84]	; (800daa8 <udp_remove+0x80>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	4a14      	ldr	r2, [pc, #80]	; (800daa8 <udp_remove+0x80>)
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	e017      	b.n	800da8c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da5c:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <udp_remove+0x80>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
 800da62:	e010      	b.n	800da86 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d009      	beq.n	800da80 <udp_remove+0x58>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d104      	bne.n	800da80 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	60da      	str	r2, [r3, #12]
        break;
 800da7e:	e005      	b.n	800da8c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1eb      	bne.n	800da64 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	2000      	movs	r0, #0
 800da90:	f7f8 f88a 	bl	8005ba8 <memp_free>
}
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	0801335c 	.word	0x0801335c
 800daa0:	080136a8 	.word	0x080136a8
 800daa4:	080133b0 	.word	0x080133b0
 800daa8:	20006d10 	.word	0x20006d10

0800daac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dab2:	2000      	movs	r0, #0
 800dab4:	f7f8 f82c 	bl	8005b10 <memp_malloc>
 800dab8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d007      	beq.n	800dad0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800dac0:	2220      	movs	r2, #32
 800dac2:	2100      	movs	r1, #0
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f002 fb31 	bl	801012c <memset>
    pcb->ttl = UDP_TTL;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	22ff      	movs	r2, #255	; 0xff
 800dace:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800dad0:	687b      	ldr	r3, [r7, #4]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
	...

0800dadc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d01e      	beq.n	800db2a <udp_netif_ip_addr_changed+0x4e>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01a      	beq.n	800db2a <udp_netif_ip_addr_changed+0x4e>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d017      	beq.n	800db2a <udp_netif_ip_addr_changed+0x4e>
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d013      	beq.n	800db2a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db02:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <udp_netif_ip_addr_changed+0x5c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e00c      	b.n	800db24 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d103      	bne.n	800db1e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	60fb      	str	r3, [r7, #12]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1ef      	bne.n	800db0a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800db2a:	bf00      	nop
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	20006d10 	.word	0x20006d10

0800db3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800db44:	4915      	ldr	r1, [pc, #84]	; (800db9c <etharp_free_entry+0x60>)
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	4613      	mov	r3, r2
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	4413      	add	r3, r2
 800db4e:	00db      	lsls	r3, r3, #3
 800db50:	440b      	add	r3, r1
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d013      	beq.n	800db80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800db58:	4910      	ldr	r1, [pc, #64]	; (800db9c <etharp_free_entry+0x60>)
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	4613      	mov	r3, r2
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	4413      	add	r3, r2
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	440b      	add	r3, r1
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f8 fe2b 	bl	80067c4 <pbuf_free>
    arp_table[i].q = NULL;
 800db6e:	490b      	ldr	r1, [pc, #44]	; (800db9c <etharp_free_entry+0x60>)
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	4613      	mov	r3, r2
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	4413      	add	r3, r2
 800db78:	00db      	lsls	r3, r3, #3
 800db7a:	440b      	add	r3, r1
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800db80:	4906      	ldr	r1, [pc, #24]	; (800db9c <etharp_free_entry+0x60>)
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	4613      	mov	r3, r2
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	4413      	add	r3, r2
 800db8a:	00db      	lsls	r3, r3, #3
 800db8c:	440b      	add	r3, r1
 800db8e:	3314      	adds	r3, #20
 800db90:	2200      	movs	r2, #0
 800db92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	20000570 	.word	0x20000570

0800dba0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dba6:	2300      	movs	r3, #0
 800dba8:	607b      	str	r3, [r7, #4]
 800dbaa:	e096      	b.n	800dcda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dbac:	494f      	ldr	r1, [pc, #316]	; (800dcec <etharp_tmr+0x14c>)
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	4413      	add	r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	440b      	add	r3, r1
 800dbba:	3314      	adds	r3, #20
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dbc0:	78fb      	ldrb	r3, [r7, #3]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 8086 	beq.w	800dcd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dbc8:	4948      	ldr	r1, [pc, #288]	; (800dcec <etharp_tmr+0x14c>)
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	4413      	add	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	440b      	add	r3, r1
 800dbd6:	3312      	adds	r3, #18
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	b298      	uxth	r0, r3
 800dbde:	4943      	ldr	r1, [pc, #268]	; (800dcec <etharp_tmr+0x14c>)
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	4413      	add	r3, r2
 800dbe8:	00db      	lsls	r3, r3, #3
 800dbea:	440b      	add	r3, r1
 800dbec:	3312      	adds	r3, #18
 800dbee:	4602      	mov	r2, r0
 800dbf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbf2:	493e      	ldr	r1, [pc, #248]	; (800dcec <etharp_tmr+0x14c>)
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3312      	adds	r3, #18
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dc08:	d215      	bcs.n	800dc36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc0a:	4938      	ldr	r1, [pc, #224]	; (800dcec <etharp_tmr+0x14c>)
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	4413      	add	r3, r2
 800dc14:	00db      	lsls	r3, r3, #3
 800dc16:	440b      	add	r3, r1
 800dc18:	3314      	adds	r3, #20
 800dc1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d10e      	bne.n	800dc3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dc20:	4932      	ldr	r1, [pc, #200]	; (800dcec <etharp_tmr+0x14c>)
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	4613      	mov	r3, r2
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	4413      	add	r3, r2
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3312      	adds	r3, #18
 800dc30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d903      	bls.n	800dc3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ff80 	bl	800db3c <etharp_free_entry>
 800dc3c:	e04a      	b.n	800dcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dc3e:	492b      	ldr	r1, [pc, #172]	; (800dcec <etharp_tmr+0x14c>)
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	4613      	mov	r3, r2
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4413      	add	r3, r2
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	440b      	add	r3, r1
 800dc4c:	3314      	adds	r3, #20
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d10a      	bne.n	800dc6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dc54:	4925      	ldr	r1, [pc, #148]	; (800dcec <etharp_tmr+0x14c>)
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	4413      	add	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	440b      	add	r3, r1
 800dc62:	3314      	adds	r3, #20
 800dc64:	2204      	movs	r2, #4
 800dc66:	701a      	strb	r2, [r3, #0]
 800dc68:	e034      	b.n	800dcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dc6a:	4920      	ldr	r1, [pc, #128]	; (800dcec <etharp_tmr+0x14c>)
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	4413      	add	r3, r2
 800dc74:	00db      	lsls	r3, r3, #3
 800dc76:	440b      	add	r3, r1
 800dc78:	3314      	adds	r3, #20
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d10a      	bne.n	800dc96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dc80:	491a      	ldr	r1, [pc, #104]	; (800dcec <etharp_tmr+0x14c>)
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	4613      	mov	r3, r2
 800dc86:	005b      	lsls	r3, r3, #1
 800dc88:	4413      	add	r3, r2
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	440b      	add	r3, r1
 800dc8e:	3314      	adds	r3, #20
 800dc90:	2202      	movs	r2, #2
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	e01e      	b.n	800dcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dc96:	4915      	ldr	r1, [pc, #84]	; (800dcec <etharp_tmr+0x14c>)
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4413      	add	r3, r2
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	440b      	add	r3, r1
 800dca4:	3314      	adds	r3, #20
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d113      	bne.n	800dcd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dcac:	490f      	ldr	r1, [pc, #60]	; (800dcec <etharp_tmr+0x14c>)
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	4413      	add	r3, r2
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	440b      	add	r3, r1
 800dcba:	3308      	adds	r3, #8
 800dcbc:	6818      	ldr	r0, [r3, #0]
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	4413      	add	r3, r2
 800dcc6:	00db      	lsls	r3, r3, #3
 800dcc8:	4a08      	ldr	r2, [pc, #32]	; (800dcec <etharp_tmr+0x14c>)
 800dcca:	4413      	add	r3, r2
 800dccc:	3304      	adds	r3, #4
 800dcce:	4619      	mov	r1, r3
 800dcd0:	f000 fe6e 	bl	800e9b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	607b      	str	r3, [r7, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b09      	cmp	r3, #9
 800dcde:	f77f af65 	ble.w	800dbac <etharp_tmr+0xc>
      }
    }
  }
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20000570 	.word	0x20000570

0800dcf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dcfe:	230a      	movs	r3, #10
 800dd00:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd02:	230a      	movs	r3, #10
 800dd04:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dd06:	230a      	movs	r3, #10
 800dd08:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dd0e:	230a      	movs	r3, #10
 800dd10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	83bb      	strh	r3, [r7, #28]
 800dd16:	2300      	movs	r3, #0
 800dd18:	837b      	strh	r3, [r7, #26]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd1e:	2300      	movs	r3, #0
 800dd20:	843b      	strh	r3, [r7, #32]
 800dd22:	e0ae      	b.n	800de82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dd24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd28:	49a6      	ldr	r1, [pc, #664]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	4413      	add	r3, r2
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	440b      	add	r3, r1
 800dd34:	3314      	adds	r3, #20
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dd3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd3e:	2b0a      	cmp	r3, #10
 800dd40:	d105      	bne.n	800dd4e <etharp_find_entry+0x5e>
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dd48:	8c3b      	ldrh	r3, [r7, #32]
 800dd4a:	847b      	strh	r3, [r7, #34]	; 0x22
 800dd4c:	e095      	b.n	800de7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 8092 	beq.w	800de7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d009      	beq.n	800dd70 <etharp_find_entry+0x80>
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d806      	bhi.n	800dd70 <etharp_find_entry+0x80>
 800dd62:	4b99      	ldr	r3, [pc, #612]	; (800dfc8 <etharp_find_entry+0x2d8>)
 800dd64:	f44f 7292 	mov.w	r2, #292	; 0x124
 800dd68:	4998      	ldr	r1, [pc, #608]	; (800dfcc <etharp_find_entry+0x2dc>)
 800dd6a:	4899      	ldr	r0, [pc, #612]	; (800dfd0 <etharp_find_entry+0x2e0>)
 800dd6c:	f002 f9e6 	bl	801013c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d020      	beq.n	800ddb8 <etharp_find_entry+0xc8>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6819      	ldr	r1, [r3, #0]
 800dd7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd7e:	4891      	ldr	r0, [pc, #580]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800dd80:	4613      	mov	r3, r2
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	4413      	add	r3, r2
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	4403      	add	r3, r0
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	d112      	bne.n	800ddb8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00c      	beq.n	800ddb2 <etharp_find_entry+0xc2>
 800dd98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd9c:	4989      	ldr	r1, [pc, #548]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800dd9e:	4613      	mov	r3, r2
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	440b      	add	r3, r1
 800dda8:	3308      	adds	r3, #8
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d102      	bne.n	800ddb8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ddb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ddb6:	e100      	b.n	800dfba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ddb8:	7dfb      	ldrb	r3, [r7, #23]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d140      	bne.n	800de40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ddbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddc2:	4980      	ldr	r1, [pc, #512]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	4413      	add	r3, r2
 800ddca:	00db      	lsls	r3, r3, #3
 800ddcc:	440b      	add	r3, r1
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d01a      	beq.n	800de0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ddd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddd8:	497a      	ldr	r1, [pc, #488]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800ddda:	4613      	mov	r3, r2
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	4413      	add	r3, r2
 800dde0:	00db      	lsls	r3, r3, #3
 800dde2:	440b      	add	r3, r1
 800dde4:	3312      	adds	r3, #18
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	8bba      	ldrh	r2, [r7, #28]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d845      	bhi.n	800de7a <etharp_find_entry+0x18a>
            old_queue = i;
 800ddee:	8c3b      	ldrh	r3, [r7, #32]
 800ddf0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ddf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddf6:	4973      	ldr	r1, [pc, #460]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	005b      	lsls	r3, r3, #1
 800ddfc:	4413      	add	r3, r2
 800ddfe:	00db      	lsls	r3, r3, #3
 800de00:	440b      	add	r3, r1
 800de02:	3312      	adds	r3, #18
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	83bb      	strh	r3, [r7, #28]
 800de08:	e037      	b.n	800de7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800de0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de0e:	496d      	ldr	r1, [pc, #436]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800de10:	4613      	mov	r3, r2
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	4413      	add	r3, r2
 800de16:	00db      	lsls	r3, r3, #3
 800de18:	440b      	add	r3, r1
 800de1a:	3312      	adds	r3, #18
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	8b7a      	ldrh	r2, [r7, #26]
 800de20:	429a      	cmp	r2, r3
 800de22:	d82a      	bhi.n	800de7a <etharp_find_entry+0x18a>
            old_pending = i;
 800de24:	8c3b      	ldrh	r3, [r7, #32]
 800de26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800de28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de2c:	4965      	ldr	r1, [pc, #404]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800de2e:	4613      	mov	r3, r2
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	4413      	add	r3, r2
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	440b      	add	r3, r1
 800de38:	3312      	adds	r3, #18
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	837b      	strh	r3, [r7, #26]
 800de3e:	e01c      	b.n	800de7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800de40:	7dfb      	ldrb	r3, [r7, #23]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d919      	bls.n	800de7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800de46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de4a:	495e      	ldr	r1, [pc, #376]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800de4c:	4613      	mov	r3, r2
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	4413      	add	r3, r2
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	440b      	add	r3, r1
 800de56:	3312      	adds	r3, #18
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	8b3a      	ldrh	r2, [r7, #24]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d80c      	bhi.n	800de7a <etharp_find_entry+0x18a>
            old_stable = i;
 800de60:	8c3b      	ldrh	r3, [r7, #32]
 800de62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800de64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de68:	4956      	ldr	r1, [pc, #344]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800de6a:	4613      	mov	r3, r2
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	440b      	add	r3, r1
 800de74:	3312      	adds	r3, #18
 800de76:	881b      	ldrh	r3, [r3, #0]
 800de78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de7a:	8c3b      	ldrh	r3, [r7, #32]
 800de7c:	3301      	adds	r3, #1
 800de7e:	b29b      	uxth	r3, r3
 800de80:	843b      	strh	r3, [r7, #32]
 800de82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de86:	2b09      	cmp	r3, #9
 800de88:	f77f af4c 	ble.w	800dd24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800de8c:	7afb      	ldrb	r3, [r7, #11]
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d108      	bne.n	800dea8 <etharp_find_entry+0x1b8>
 800de96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800de9a:	2b0a      	cmp	r3, #10
 800de9c:	d107      	bne.n	800deae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800de9e:	7afb      	ldrb	r3, [r7, #11]
 800dea0:	f003 0301 	and.w	r3, r3, #1
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dea8:	f04f 33ff 	mov.w	r3, #4294967295
 800deac:	e085      	b.n	800dfba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800deae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	dc02      	bgt.n	800debc <etharp_find_entry+0x1cc>
    i = empty;
 800deb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800deb8:	843b      	strh	r3, [r7, #32]
 800deba:	e039      	b.n	800df30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800debc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dec0:	2b09      	cmp	r3, #9
 800dec2:	dc14      	bgt.n	800deee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800dec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800decc:	493d      	ldr	r1, [pc, #244]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d018      	beq.n	800df10 <etharp_find_entry+0x220>
 800dede:	4b3a      	ldr	r3, [pc, #232]	; (800dfc8 <etharp_find_entry+0x2d8>)
 800dee0:	f240 126d 	movw	r2, #365	; 0x16d
 800dee4:	493b      	ldr	r1, [pc, #236]	; (800dfd4 <etharp_find_entry+0x2e4>)
 800dee6:	483a      	ldr	r0, [pc, #232]	; (800dfd0 <etharp_find_entry+0x2e0>)
 800dee8:	f002 f928 	bl	801013c <iprintf>
 800deec:	e010      	b.n	800df10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800deee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800def2:	2b09      	cmp	r3, #9
 800def4:	dc02      	bgt.n	800defc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800def6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800def8:	843b      	strh	r3, [r7, #32]
 800defa:	e009      	b.n	800df10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800defc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df00:	2b09      	cmp	r3, #9
 800df02:	dc02      	bgt.n	800df0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800df04:	8bfb      	ldrh	r3, [r7, #30]
 800df06:	843b      	strh	r3, [r7, #32]
 800df08:	e002      	b.n	800df10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800df0a:	f04f 33ff 	mov.w	r3, #4294967295
 800df0e:	e054      	b.n	800dfba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df14:	2b09      	cmp	r3, #9
 800df16:	dd06      	ble.n	800df26 <etharp_find_entry+0x236>
 800df18:	4b2b      	ldr	r3, [pc, #172]	; (800dfc8 <etharp_find_entry+0x2d8>)
 800df1a:	f240 127f 	movw	r2, #383	; 0x17f
 800df1e:	492e      	ldr	r1, [pc, #184]	; (800dfd8 <etharp_find_entry+0x2e8>)
 800df20:	482b      	ldr	r0, [pc, #172]	; (800dfd0 <etharp_find_entry+0x2e0>)
 800df22:	f002 f90b 	bl	801013c <iprintf>
    etharp_free_entry(i);
 800df26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff fe06 	bl	800db3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df34:	2b09      	cmp	r3, #9
 800df36:	dd06      	ble.n	800df46 <etharp_find_entry+0x256>
 800df38:	4b23      	ldr	r3, [pc, #140]	; (800dfc8 <etharp_find_entry+0x2d8>)
 800df3a:	f240 1283 	movw	r2, #387	; 0x183
 800df3e:	4926      	ldr	r1, [pc, #152]	; (800dfd8 <etharp_find_entry+0x2e8>)
 800df40:	4823      	ldr	r0, [pc, #140]	; (800dfd0 <etharp_find_entry+0x2e0>)
 800df42:	f002 f8fb 	bl	801013c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800df46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df4a:	491e      	ldr	r1, [pc, #120]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800df4c:	4613      	mov	r3, r2
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	4413      	add	r3, r2
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	440b      	add	r3, r1
 800df56:	3314      	adds	r3, #20
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d006      	beq.n	800df6c <etharp_find_entry+0x27c>
 800df5e:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <etharp_find_entry+0x2d8>)
 800df60:	f240 1285 	movw	r2, #389	; 0x185
 800df64:	491d      	ldr	r1, [pc, #116]	; (800dfdc <etharp_find_entry+0x2ec>)
 800df66:	481a      	ldr	r0, [pc, #104]	; (800dfd0 <etharp_find_entry+0x2e0>)
 800df68:	f002 f8e8 	bl	801013c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00b      	beq.n	800df8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800df72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6819      	ldr	r1, [r3, #0]
 800df7a:	4812      	ldr	r0, [pc, #72]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	4403      	add	r3, r0
 800df86:	3304      	adds	r3, #4
 800df88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800df8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df8e:	490d      	ldr	r1, [pc, #52]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800df90:	4613      	mov	r3, r2
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	4413      	add	r3, r2
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	440b      	add	r3, r1
 800df9a:	3312      	adds	r3, #18
 800df9c:	2200      	movs	r2, #0
 800df9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dfa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfa4:	4907      	ldr	r1, [pc, #28]	; (800dfc4 <etharp_find_entry+0x2d4>)
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	4413      	add	r3, r2
 800dfac:	00db      	lsls	r3, r3, #3
 800dfae:	440b      	add	r3, r1
 800dfb0:	3308      	adds	r3, #8
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dfb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3728      	adds	r7, #40	; 0x28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000570 	.word	0x20000570
 800dfc8:	080136c0 	.word	0x080136c0
 800dfcc:	080136f8 	.word	0x080136f8
 800dfd0:	08013738 	.word	0x08013738
 800dfd4:	08013760 	.word	0x08013760
 800dfd8:	08013778 	.word	0x08013778
 800dfdc:	0801378c 	.word	0x0801378c

0800dfe0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af02      	add	r7, sp, #8
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dff4:	2b06      	cmp	r3, #6
 800dff6:	d006      	beq.n	800e006 <etharp_update_arp_entry+0x26>
 800dff8:	4b48      	ldr	r3, [pc, #288]	; (800e11c <etharp_update_arp_entry+0x13c>)
 800dffa:	f240 12a9 	movw	r2, #425	; 0x1a9
 800dffe:	4948      	ldr	r1, [pc, #288]	; (800e120 <etharp_update_arp_entry+0x140>)
 800e000:	4848      	ldr	r0, [pc, #288]	; (800e124 <etharp_update_arp_entry+0x144>)
 800e002:	f002 f89b 	bl	801013c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d012      	beq.n	800e032 <etharp_update_arp_entry+0x52>
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00e      	beq.n	800e032 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	68f9      	ldr	r1, [r7, #12]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f001 f8fc 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800e020:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e022:	2b00      	cmp	r3, #0
 800e024:	d105      	bne.n	800e032 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e02e:	2be0      	cmp	r3, #224	; 0xe0
 800e030:	d102      	bne.n	800e038 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e032:	f06f 030f 	mvn.w	r3, #15
 800e036:	e06c      	b.n	800e112 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e038:	78fb      	ldrb	r3, [r7, #3]
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	4619      	mov	r1, r3
 800e03e:	68b8      	ldr	r0, [r7, #8]
 800e040:	f7ff fe56 	bl	800dcf0 <etharp_find_entry>
 800e044:	4603      	mov	r3, r0
 800e046:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	da02      	bge.n	800e056 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e050:	8afb      	ldrh	r3, [r7, #22]
 800e052:	b25b      	sxtb	r3, r3
 800e054:	e05d      	b.n	800e112 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e05a:	4933      	ldr	r1, [pc, #204]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e05c:	4613      	mov	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	4413      	add	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	440b      	add	r3, r1
 800e066:	3314      	adds	r3, #20
 800e068:	2202      	movs	r2, #2
 800e06a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e06c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e070:	492d      	ldr	r1, [pc, #180]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e072:	4613      	mov	r3, r2
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	4413      	add	r3, r2
 800e078:	00db      	lsls	r3, r3, #3
 800e07a:	440b      	add	r3, r1
 800e07c:	3308      	adds	r3, #8
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e082:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e086:	4613      	mov	r3, r2
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	4413      	add	r3, r2
 800e08c:	00db      	lsls	r3, r3, #3
 800e08e:	3308      	adds	r3, #8
 800e090:	4a25      	ldr	r2, [pc, #148]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e092:	4413      	add	r3, r2
 800e094:	3304      	adds	r3, #4
 800e096:	2206      	movs	r2, #6
 800e098:	6879      	ldr	r1, [r7, #4]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f002 f83b 	bl	8010116 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e0a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0a4:	4920      	ldr	r1, [pc, #128]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4413      	add	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3312      	adds	r3, #18
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e0b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0ba:	491b      	ldr	r1, [pc, #108]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	440b      	add	r3, r1
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d021      	beq.n	800e110 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e0cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0d0:	4915      	ldr	r1, [pc, #84]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	4413      	add	r3, r2
 800e0d8:	00db      	lsls	r3, r3, #3
 800e0da:	440b      	add	r3, r1
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e0e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0e4:	4910      	ldr	r1, [pc, #64]	; (800e128 <etharp_update_arp_entry+0x148>)
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	4413      	add	r3, r2
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	440b      	add	r3, r1
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e0fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6939      	ldr	r1, [r7, #16]
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f001 ff8b 	bl	8010020 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e10a:	6938      	ldr	r0, [r7, #16]
 800e10c:	f7f8 fb5a 	bl	80067c4 <pbuf_free>
  }
  return ERR_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	080136c0 	.word	0x080136c0
 800e120:	080137b8 	.word	0x080137b8
 800e124:	08013738 	.word	0x08013738
 800e128:	20000570 	.word	0x20000570

0800e12c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	e01e      	b.n	800e178 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e13a:	4913      	ldr	r1, [pc, #76]	; (800e188 <etharp_cleanup_netif+0x5c>)
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	4613      	mov	r3, r2
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	4413      	add	r3, r2
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	440b      	add	r3, r1
 800e148:	3314      	adds	r3, #20
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e14e:	7afb      	ldrb	r3, [r7, #11]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00e      	beq.n	800e172 <etharp_cleanup_netif+0x46>
 800e154:	490c      	ldr	r1, [pc, #48]	; (800e188 <etharp_cleanup_netif+0x5c>)
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	4613      	mov	r3, r2
 800e15a:	005b      	lsls	r3, r3, #1
 800e15c:	4413      	add	r3, r2
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	440b      	add	r3, r1
 800e162:	3308      	adds	r3, #8
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d102      	bne.n	800e172 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7ff fce5 	bl	800db3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b09      	cmp	r3, #9
 800e17c:	dddd      	ble.n	800e13a <etharp_cleanup_netif+0xe>
    }
  }
}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20000570 	.word	0x20000570

0800e18c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e18c:	b5b0      	push	{r4, r5, r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af04      	add	r7, sp, #16
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d107      	bne.n	800e1ac <etharp_input+0x20>
 800e19c:	4b3d      	ldr	r3, [pc, #244]	; (800e294 <etharp_input+0x108>)
 800e19e:	f240 228a 	movw	r2, #650	; 0x28a
 800e1a2:	493d      	ldr	r1, [pc, #244]	; (800e298 <etharp_input+0x10c>)
 800e1a4:	483d      	ldr	r0, [pc, #244]	; (800e29c <etharp_input+0x110>)
 800e1a6:	f001 ffc9 	bl	801013c <iprintf>
 800e1aa:	e06f      	b.n	800e28c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1bc:	d10c      	bne.n	800e1d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e1c2:	2b06      	cmp	r3, #6
 800e1c4:	d108      	bne.n	800e1d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e1ca:	2b04      	cmp	r3, #4
 800e1cc:	d104      	bne.n	800e1d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	885b      	ldrh	r3, [r3, #2]
 800e1d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e1d4:	2b08      	cmp	r3, #8
 800e1d6:	d003      	beq.n	800e1e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7f8 faf3 	bl	80067c4 <pbuf_free>
    return;
 800e1de:	e055      	b.n	800e28c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	330e      	adds	r3, #14
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	3318      	adds	r3, #24
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	3304      	adds	r3, #4
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d102      	bne.n	800e200 <etharp_input+0x74>
    for_us = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]
 800e1fe:	e009      	b.n	800e214 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	3304      	adds	r3, #4
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	429a      	cmp	r2, r3
 800e20a:	bf0c      	ite	eq
 800e20c:	2301      	moveq	r3, #1
 800e20e:	2300      	movne	r3, #0
 800e210:	b2db      	uxtb	r3, r3
 800e212:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f103 0208 	add.w	r2, r3, #8
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <etharp_input+0x98>
 800e220:	2301      	movs	r3, #1
 800e222:	e000      	b.n	800e226 <etharp_input+0x9a>
 800e224:	2302      	movs	r3, #2
 800e226:	f107 010c 	add.w	r1, r7, #12
 800e22a:	6838      	ldr	r0, [r7, #0]
 800e22c:	f7ff fed8 	bl	800dfe0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	88db      	ldrh	r3, [r3, #6]
 800e234:	b29b      	uxth	r3, r3
 800e236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e23a:	d003      	beq.n	800e244 <etharp_input+0xb8>
 800e23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e240:	d01e      	beq.n	800e280 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e242:	e020      	b.n	800e286 <etharp_input+0xfa>
      if (for_us) {
 800e244:	7dfb      	ldrb	r3, [r7, #23]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d01c      	beq.n	800e284 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e260:	693a      	ldr	r2, [r7, #16]
 800e262:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e264:	2102      	movs	r1, #2
 800e266:	9103      	str	r1, [sp, #12]
 800e268:	f107 010c 	add.w	r1, r7, #12
 800e26c:	9102      	str	r1, [sp, #8]
 800e26e:	9201      	str	r2, [sp, #4]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	462b      	mov	r3, r5
 800e274:	4622      	mov	r2, r4
 800e276:	4601      	mov	r1, r0
 800e278:	6838      	ldr	r0, [r7, #0]
 800e27a:	f000 faeb 	bl	800e854 <etharp_raw>
      break;
 800e27e:	e001      	b.n	800e284 <etharp_input+0xf8>
      break;
 800e280:	bf00      	nop
 800e282:	e000      	b.n	800e286 <etharp_input+0xfa>
      break;
 800e284:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7f8 fa9c 	bl	80067c4 <pbuf_free>
}
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bdb0      	pop	{r4, r5, r7, pc}
 800e292:	bf00      	nop
 800e294:	080136c0 	.word	0x080136c0
 800e298:	08013810 	.word	0x08013810
 800e29c:	08013738 	.word	0x08013738

0800e2a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af02      	add	r7, sp, #8
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e2ae:	79fa      	ldrb	r2, [r7, #7]
 800e2b0:	4944      	ldr	r1, [pc, #272]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	005b      	lsls	r3, r3, #1
 800e2b6:	4413      	add	r3, r2
 800e2b8:	00db      	lsls	r3, r3, #3
 800e2ba:	440b      	add	r3, r1
 800e2bc:	3314      	adds	r3, #20
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d806      	bhi.n	800e2d2 <etharp_output_to_arp_index+0x32>
 800e2c4:	4b40      	ldr	r3, [pc, #256]	; (800e3c8 <etharp_output_to_arp_index+0x128>)
 800e2c6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e2ca:	4940      	ldr	r1, [pc, #256]	; (800e3cc <etharp_output_to_arp_index+0x12c>)
 800e2cc:	4840      	ldr	r0, [pc, #256]	; (800e3d0 <etharp_output_to_arp_index+0x130>)
 800e2ce:	f001 ff35 	bl	801013c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e2d2:	79fa      	ldrb	r2, [r7, #7]
 800e2d4:	493b      	ldr	r1, [pc, #236]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	4413      	add	r3, r2
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	440b      	add	r3, r1
 800e2e0:	3314      	adds	r3, #20
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d153      	bne.n	800e390 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e2e8:	79fa      	ldrb	r2, [r7, #7]
 800e2ea:	4936      	ldr	r1, [pc, #216]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	4413      	add	r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	440b      	add	r3, r1
 800e2f6:	3312      	adds	r3, #18
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e2fe:	d919      	bls.n	800e334 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e300:	79fa      	ldrb	r2, [r7, #7]
 800e302:	4613      	mov	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	4a2e      	ldr	r2, [pc, #184]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e30c:	4413      	add	r3, r2
 800e30e:	3304      	adds	r3, #4
 800e310:	4619      	mov	r1, r3
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 fb4c 	bl	800e9b0 <etharp_request>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d138      	bne.n	800e390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e31e:	79fa      	ldrb	r2, [r7, #7]
 800e320:	4928      	ldr	r1, [pc, #160]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e322:	4613      	mov	r3, r2
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	4413      	add	r3, r2
 800e328:	00db      	lsls	r3, r3, #3
 800e32a:	440b      	add	r3, r1
 800e32c:	3314      	adds	r3, #20
 800e32e:	2203      	movs	r2, #3
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	e02d      	b.n	800e390 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e334:	79fa      	ldrb	r2, [r7, #7]
 800e336:	4923      	ldr	r1, [pc, #140]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e338:	4613      	mov	r3, r2
 800e33a:	005b      	lsls	r3, r3, #1
 800e33c:	4413      	add	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	440b      	add	r3, r1
 800e342:	3312      	adds	r3, #18
 800e344:	881b      	ldrh	r3, [r3, #0]
 800e346:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e34a:	d321      	bcc.n	800e390 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e34c:	79fa      	ldrb	r2, [r7, #7]
 800e34e:	4613      	mov	r3, r2
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4413      	add	r3, r2
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	4a1b      	ldr	r2, [pc, #108]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e358:	4413      	add	r3, r2
 800e35a:	1d19      	adds	r1, r3, #4
 800e35c:	79fa      	ldrb	r2, [r7, #7]
 800e35e:	4613      	mov	r3, r2
 800e360:	005b      	lsls	r3, r3, #1
 800e362:	4413      	add	r3, r2
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	3308      	adds	r3, #8
 800e368:	4a16      	ldr	r2, [pc, #88]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e36a:	4413      	add	r3, r2
 800e36c:	3304      	adds	r3, #4
 800e36e:	461a      	mov	r2, r3
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fafb 	bl	800e96c <etharp_request_dst>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d109      	bne.n	800e390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e37c:	79fa      	ldrb	r2, [r7, #7]
 800e37e:	4911      	ldr	r1, [pc, #68]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e380:	4613      	mov	r3, r2
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	440b      	add	r3, r1
 800e38a:	3314      	adds	r3, #20
 800e38c:	2203      	movs	r2, #3
 800e38e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e396:	79fa      	ldrb	r2, [r7, #7]
 800e398:	4613      	mov	r3, r2
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	4413      	add	r3, r2
 800e39e:	00db      	lsls	r3, r3, #3
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <etharp_output_to_arp_index+0x124>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	1d1a      	adds	r2, r3, #4
 800e3a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	460a      	mov	r2, r1
 800e3b2:	68b9      	ldr	r1, [r7, #8]
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f001 fe33 	bl	8010020 <ethernet_output>
 800e3ba:	4603      	mov	r3, r0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	20000570 	.word	0x20000570
 800e3c8:	080136c0 	.word	0x080136c0
 800e3cc:	08013830 	.word	0x08013830
 800e3d0:	08013738 	.word	0x08013738

0800e3d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	; 0x28
 800e3d8:	af02      	add	r7, sp, #8
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <etharp_output+0x24>
 800e3ea:	4b73      	ldr	r3, [pc, #460]	; (800e5b8 <etharp_output+0x1e4>)
 800e3ec:	f240 321e 	movw	r2, #798	; 0x31e
 800e3f0:	4972      	ldr	r1, [pc, #456]	; (800e5bc <etharp_output+0x1e8>)
 800e3f2:	4873      	ldr	r0, [pc, #460]	; (800e5c0 <etharp_output+0x1ec>)
 800e3f4:	f001 fea2 	bl	801013c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <etharp_output+0x38>
 800e3fe:	4b6e      	ldr	r3, [pc, #440]	; (800e5b8 <etharp_output+0x1e4>)
 800e400:	f240 321f 	movw	r2, #799	; 0x31f
 800e404:	496f      	ldr	r1, [pc, #444]	; (800e5c4 <etharp_output+0x1f0>)
 800e406:	486e      	ldr	r0, [pc, #440]	; (800e5c0 <etharp_output+0x1ec>)
 800e408:	f001 fe98 	bl	801013c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <etharp_output+0x4c>
 800e412:	4b69      	ldr	r3, [pc, #420]	; (800e5b8 <etharp_output+0x1e4>)
 800e414:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e418:	496b      	ldr	r1, [pc, #428]	; (800e5c8 <etharp_output+0x1f4>)
 800e41a:	4869      	ldr	r0, [pc, #420]	; (800e5c0 <etharp_output+0x1ec>)
 800e41c:	f001 fe8e 	bl	801013c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	4618      	mov	r0, r3
 800e428:	f000 fef6 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e432:	4b66      	ldr	r3, [pc, #408]	; (800e5cc <etharp_output+0x1f8>)
 800e434:	61fb      	str	r3, [r7, #28]
 800e436:	e0af      	b.n	800e598 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e440:	2be0      	cmp	r3, #224	; 0xe0
 800e442:	d118      	bne.n	800e476 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e444:	2301      	movs	r3, #1
 800e446:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e448:	2300      	movs	r3, #0
 800e44a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e44c:	235e      	movs	r3, #94	; 0x5e
 800e44e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	3301      	adds	r3, #1
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3302      	adds	r3, #2
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3303      	adds	r3, #3
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e46e:	f107 0310 	add.w	r3, r7, #16
 800e472:	61fb      	str	r3, [r7, #28]
 800e474:	e090      	b.n	800e598 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3304      	adds	r3, #4
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	405a      	eors	r2, r3
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3308      	adds	r3, #8
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4013      	ands	r3, r2
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d012      	beq.n	800e4b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e494:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e498:	4293      	cmp	r3, r2
 800e49a:	d00b      	beq.n	800e4b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	330c      	adds	r3, #12
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	61bb      	str	r3, [r7, #24]
 800e4ac:	e002      	b.n	800e4b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e4ae:	f06f 0303 	mvn.w	r3, #3
 800e4b2:	e07d      	b.n	800e5b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e4b4:	4b46      	ldr	r3, [pc, #280]	; (800e5d0 <etharp_output+0x1fc>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4a46      	ldr	r2, [pc, #280]	; (800e5d4 <etharp_output+0x200>)
 800e4bc:	460b      	mov	r3, r1
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	440b      	add	r3, r1
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	4413      	add	r3, r2
 800e4c6:	3314      	adds	r3, #20
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d925      	bls.n	800e51a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e4ce:	4b40      	ldr	r3, [pc, #256]	; (800e5d0 <etharp_output+0x1fc>)
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4a3f      	ldr	r2, [pc, #252]	; (800e5d4 <etharp_output+0x200>)
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	440b      	add	r3, r1
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	4413      	add	r3, r2
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d117      	bne.n	800e51a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	4b38      	ldr	r3, [pc, #224]	; (800e5d0 <etharp_output+0x1fc>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	4937      	ldr	r1, [pc, #220]	; (800e5d4 <etharp_output+0x200>)
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4403      	add	r3, r0
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	440b      	add	r3, r1
 800e500:	3304      	adds	r3, #4
 800e502:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e504:	429a      	cmp	r2, r3
 800e506:	d108      	bne.n	800e51a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e508:	4b31      	ldr	r3, [pc, #196]	; (800e5d0 <etharp_output+0x1fc>)
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	461a      	mov	r2, r3
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f7ff fec5 	bl	800e2a0 <etharp_output_to_arp_index>
 800e516:	4603      	mov	r3, r0
 800e518:	e04a      	b.n	800e5b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e51a:	2300      	movs	r3, #0
 800e51c:	75fb      	strb	r3, [r7, #23]
 800e51e:	e031      	b.n	800e584 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e520:	7dfa      	ldrb	r2, [r7, #23]
 800e522:	492c      	ldr	r1, [pc, #176]	; (800e5d4 <etharp_output+0x200>)
 800e524:	4613      	mov	r3, r2
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	4413      	add	r3, r2
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	440b      	add	r3, r1
 800e52e:	3314      	adds	r3, #20
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d923      	bls.n	800e57e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e536:	7dfa      	ldrb	r2, [r7, #23]
 800e538:	4926      	ldr	r1, [pc, #152]	; (800e5d4 <etharp_output+0x200>)
 800e53a:	4613      	mov	r3, r2
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	4413      	add	r3, r2
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	440b      	add	r3, r1
 800e544:	3308      	adds	r3, #8
 800e546:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d117      	bne.n	800e57e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	6819      	ldr	r1, [r3, #0]
 800e552:	7dfa      	ldrb	r2, [r7, #23]
 800e554:	481f      	ldr	r0, [pc, #124]	; (800e5d4 <etharp_output+0x200>)
 800e556:	4613      	mov	r3, r2
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	4413      	add	r3, r2
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	4403      	add	r3, r0
 800e560:	3304      	adds	r3, #4
 800e562:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e564:	4299      	cmp	r1, r3
 800e566:	d10a      	bne.n	800e57e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e568:	4a19      	ldr	r2, [pc, #100]	; (800e5d0 <etharp_output+0x1fc>)
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e56e:	7dfb      	ldrb	r3, [r7, #23]
 800e570:	461a      	mov	r2, r3
 800e572:	68b9      	ldr	r1, [r7, #8]
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f7ff fe93 	bl	800e2a0 <etharp_output_to_arp_index>
 800e57a:	4603      	mov	r3, r0
 800e57c:	e018      	b.n	800e5b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	3301      	adds	r3, #1
 800e582:	75fb      	strb	r3, [r7, #23]
 800e584:	7dfb      	ldrb	r3, [r7, #23]
 800e586:	2b09      	cmp	r3, #9
 800e588:	d9ca      	bls.n	800e520 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	69b9      	ldr	r1, [r7, #24]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f000 f822 	bl	800e5d8 <etharp_query>
 800e594:	4603      	mov	r3, r0
 800e596:	e00b      	b.n	800e5b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e59e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	68b9      	ldr	r1, [r7, #8]
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f001 fd39 	bl	8010020 <ethernet_output>
 800e5ae:	4603      	mov	r3, r0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	080136c0 	.word	0x080136c0
 800e5bc:	08013810 	.word	0x08013810
 800e5c0:	08013738 	.word	0x08013738
 800e5c4:	08013860 	.word	0x08013860
 800e5c8:	08013800 	.word	0x08013800
 800e5cc:	080142f4 	.word	0x080142f4
 800e5d0:	20000660 	.word	0x20000660
 800e5d4:	20000570 	.word	0x20000570

0800e5d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08c      	sub	sp, #48	; 0x30
 800e5dc:	af02      	add	r7, sp, #8
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3326      	adds	r3, #38	; 0x26
 800e5e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e5ea:	23ff      	movs	r3, #255	; 0xff
 800e5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 fe0c 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10c      	bne.n	800e620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e60e:	2be0      	cmp	r3, #224	; 0xe0
 800e610:	d006      	beq.n	800e620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d102      	bne.n	800e626 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e620:	f06f 030f 	mvn.w	r3, #15
 800e624:	e102      	b.n	800e82c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	2101      	movs	r1, #1
 800e62a:	68b8      	ldr	r0, [r7, #8]
 800e62c:	f7ff fb60 	bl	800dcf0 <etharp_find_entry>
 800e630:	4603      	mov	r3, r0
 800e632:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	da02      	bge.n	800e642 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e63c:	8a7b      	ldrh	r3, [r7, #18]
 800e63e:	b25b      	sxtb	r3, r3
 800e640:	e0f4      	b.n	800e82c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e642:	8a7b      	ldrh	r3, [r7, #18]
 800e644:	2b7e      	cmp	r3, #126	; 0x7e
 800e646:	d906      	bls.n	800e656 <etharp_query+0x7e>
 800e648:	4b7a      	ldr	r3, [pc, #488]	; (800e834 <etharp_query+0x25c>)
 800e64a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e64e:	497a      	ldr	r1, [pc, #488]	; (800e838 <etharp_query+0x260>)
 800e650:	487a      	ldr	r0, [pc, #488]	; (800e83c <etharp_query+0x264>)
 800e652:	f001 fd73 	bl	801013c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e656:	8a7b      	ldrh	r3, [r7, #18]
 800e658:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e65a:	7c7a      	ldrb	r2, [r7, #17]
 800e65c:	4978      	ldr	r1, [pc, #480]	; (800e840 <etharp_query+0x268>)
 800e65e:	4613      	mov	r3, r2
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	4413      	add	r3, r2
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	440b      	add	r3, r1
 800e668:	3314      	adds	r3, #20
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d115      	bne.n	800e69c <etharp_query+0xc4>
    is_new_entry = 1;
 800e670:	2301      	movs	r3, #1
 800e672:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e674:	7c7a      	ldrb	r2, [r7, #17]
 800e676:	4972      	ldr	r1, [pc, #456]	; (800e840 <etharp_query+0x268>)
 800e678:	4613      	mov	r3, r2
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	4413      	add	r3, r2
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	440b      	add	r3, r1
 800e682:	3314      	adds	r3, #20
 800e684:	2201      	movs	r2, #1
 800e686:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e688:	7c7a      	ldrb	r2, [r7, #17]
 800e68a:	496d      	ldr	r1, [pc, #436]	; (800e840 <etharp_query+0x268>)
 800e68c:	4613      	mov	r3, r2
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	4413      	add	r3, r2
 800e692:	00db      	lsls	r3, r3, #3
 800e694:	440b      	add	r3, r1
 800e696:	3308      	adds	r3, #8
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e69c:	7c7a      	ldrb	r2, [r7, #17]
 800e69e:	4968      	ldr	r1, [pc, #416]	; (800e840 <etharp_query+0x268>)
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	440b      	add	r3, r1
 800e6aa:	3314      	adds	r3, #20
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d011      	beq.n	800e6d6 <etharp_query+0xfe>
 800e6b2:	7c7a      	ldrb	r2, [r7, #17]
 800e6b4:	4962      	ldr	r1, [pc, #392]	; (800e840 <etharp_query+0x268>)
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	4413      	add	r3, r2
 800e6bc:	00db      	lsls	r3, r3, #3
 800e6be:	440b      	add	r3, r1
 800e6c0:	3314      	adds	r3, #20
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d806      	bhi.n	800e6d6 <etharp_query+0xfe>
 800e6c8:	4b5a      	ldr	r3, [pc, #360]	; (800e834 <etharp_query+0x25c>)
 800e6ca:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e6ce:	495d      	ldr	r1, [pc, #372]	; (800e844 <etharp_query+0x26c>)
 800e6d0:	485a      	ldr	r0, [pc, #360]	; (800e83c <etharp_query+0x264>)
 800e6d2:	f001 fd33 	bl	801013c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d102      	bne.n	800e6e2 <etharp_query+0x10a>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10c      	bne.n	800e6fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f000 f963 	bl	800e9b0 <etharp_request>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <etharp_query+0x124>
      return result;
 800e6f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6fa:	e097      	b.n	800e82c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <etharp_query+0x138>
 800e702:	4b4c      	ldr	r3, [pc, #304]	; (800e834 <etharp_query+0x25c>)
 800e704:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e708:	494f      	ldr	r1, [pc, #316]	; (800e848 <etharp_query+0x270>)
 800e70a:	484c      	ldr	r0, [pc, #304]	; (800e83c <etharp_query+0x264>)
 800e70c:	f001 fd16 	bl	801013c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e710:	7c7a      	ldrb	r2, [r7, #17]
 800e712:	494b      	ldr	r1, [pc, #300]	; (800e840 <etharp_query+0x268>)
 800e714:	4613      	mov	r3, r2
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	4413      	add	r3, r2
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	440b      	add	r3, r1
 800e71e:	3314      	adds	r3, #20
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b01      	cmp	r3, #1
 800e724:	d918      	bls.n	800e758 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e726:	4a49      	ldr	r2, [pc, #292]	; (800e84c <etharp_query+0x274>)
 800e728:	7c7b      	ldrb	r3, [r7, #17]
 800e72a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e72c:	7c7a      	ldrb	r2, [r7, #17]
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	3308      	adds	r3, #8
 800e738:	4a41      	ldr	r2, [pc, #260]	; (800e840 <etharp_query+0x268>)
 800e73a:	4413      	add	r3, r2
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	4613      	mov	r3, r2
 800e746:	697a      	ldr	r2, [r7, #20]
 800e748:	6879      	ldr	r1, [r7, #4]
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f001 fc68 	bl	8010020 <ethernet_output>
 800e750:	4603      	mov	r3, r0
 800e752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e756:	e067      	b.n	800e828 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e758:	7c7a      	ldrb	r2, [r7, #17]
 800e75a:	4939      	ldr	r1, [pc, #228]	; (800e840 <etharp_query+0x268>)
 800e75c:	4613      	mov	r3, r2
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	4413      	add	r3, r2
 800e762:	00db      	lsls	r3, r3, #3
 800e764:	440b      	add	r3, r1
 800e766:	3314      	adds	r3, #20
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d15c      	bne.n	800e828 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e776:	e01c      	b.n	800e7b2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	895a      	ldrh	r2, [r3, #10]
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	891b      	ldrh	r3, [r3, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d10a      	bne.n	800e79a <etharp_query+0x1c2>
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d006      	beq.n	800e79a <etharp_query+0x1c2>
 800e78c:	4b29      	ldr	r3, [pc, #164]	; (800e834 <etharp_query+0x25c>)
 800e78e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e792:	492f      	ldr	r1, [pc, #188]	; (800e850 <etharp_query+0x278>)
 800e794:	4829      	ldr	r0, [pc, #164]	; (800e83c <etharp_query+0x264>)
 800e796:	f001 fcd1 	bl	801013c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	7b1b      	ldrb	r3, [r3, #12]
 800e79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <etharp_query+0x1d4>
        copy_needed = 1;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	61bb      	str	r3, [r7, #24]
        break;
 800e7aa:	e005      	b.n	800e7b8 <etharp_query+0x1e0>
      }
      p = p->next;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1df      	bne.n	800e778 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d007      	beq.n	800e7ce <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e7c4:	200e      	movs	r0, #14
 800e7c6:	f7f8 fa69 	bl	8006c9c <pbuf_clone>
 800e7ca:	61f8      	str	r0, [r7, #28]
 800e7cc:	e004      	b.n	800e7d8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e7d2:	69f8      	ldr	r0, [r7, #28]
 800e7d4:	f7f8 f896 	bl	8006904 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d021      	beq.n	800e822 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e7de:	7c7a      	ldrb	r2, [r7, #17]
 800e7e0:	4917      	ldr	r1, [pc, #92]	; (800e840 <etharp_query+0x268>)
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	4413      	add	r3, r2
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	440b      	add	r3, r1
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00a      	beq.n	800e808 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e7f2:	7c7a      	ldrb	r2, [r7, #17]
 800e7f4:	4912      	ldr	r1, [pc, #72]	; (800e840 <etharp_query+0x268>)
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	440b      	add	r3, r1
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f7f7 ffde 	bl	80067c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800e808:	7c7a      	ldrb	r2, [r7, #17]
 800e80a:	490d      	ldr	r1, [pc, #52]	; (800e840 <etharp_query+0x268>)
 800e80c:	4613      	mov	r3, r2
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	4413      	add	r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	440b      	add	r3, r1
 800e816:	69fa      	ldr	r2, [r7, #28]
 800e818:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e820:	e002      	b.n	800e828 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e822:	23ff      	movs	r3, #255	; 0xff
 800e824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3728      	adds	r7, #40	; 0x28
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	080136c0 	.word	0x080136c0
 800e838:	0801386c 	.word	0x0801386c
 800e83c:	08013738 	.word	0x08013738
 800e840:	20000570 	.word	0x20000570
 800e844:	0801387c 	.word	0x0801387c
 800e848:	08013860 	.word	0x08013860
 800e84c:	20000660 	.word	0x20000660
 800e850:	080138a4 	.word	0x080138a4

0800e854 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08a      	sub	sp, #40	; 0x28
 800e858:	af02      	add	r7, sp, #8
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d106      	bne.n	800e87a <etharp_raw+0x26>
 800e86c:	4b3a      	ldr	r3, [pc, #232]	; (800e958 <etharp_raw+0x104>)
 800e86e:	f240 4257 	movw	r2, #1111	; 0x457
 800e872:	493a      	ldr	r1, [pc, #232]	; (800e95c <etharp_raw+0x108>)
 800e874:	483a      	ldr	r0, [pc, #232]	; (800e960 <etharp_raw+0x10c>)
 800e876:	f001 fc61 	bl	801013c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e87a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e87e:	211c      	movs	r1, #28
 800e880:	200e      	movs	r0, #14
 800e882:	f7f7 fcbf 	bl	8006204 <pbuf_alloc>
 800e886:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d102      	bne.n	800e894 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e88e:	f04f 33ff 	mov.w	r3, #4294967295
 800e892:	e05d      	b.n	800e950 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	895b      	ldrh	r3, [r3, #10]
 800e898:	2b1b      	cmp	r3, #27
 800e89a:	d806      	bhi.n	800e8aa <etharp_raw+0x56>
 800e89c:	4b2e      	ldr	r3, [pc, #184]	; (800e958 <etharp_raw+0x104>)
 800e89e:	f240 4263 	movw	r2, #1123	; 0x463
 800e8a2:	4930      	ldr	r1, [pc, #192]	; (800e964 <etharp_raw+0x110>)
 800e8a4:	482e      	ldr	r0, [pc, #184]	; (800e960 <etharp_raw+0x10c>)
 800e8a6:	f001 fc49 	bl	801013c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e8b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7f6 fc6c 	bl	8005190 <lwip_htons>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8c6:	2b06      	cmp	r3, #6
 800e8c8:	d006      	beq.n	800e8d8 <etharp_raw+0x84>
 800e8ca:	4b23      	ldr	r3, [pc, #140]	; (800e958 <etharp_raw+0x104>)
 800e8cc:	f240 426a 	movw	r2, #1130	; 0x46a
 800e8d0:	4925      	ldr	r1, [pc, #148]	; (800e968 <etharp_raw+0x114>)
 800e8d2:	4823      	ldr	r0, [pc, #140]	; (800e960 <etharp_raw+0x10c>)
 800e8d4:	f001 fc32 	bl	801013c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	3308      	adds	r3, #8
 800e8dc:	2206      	movs	r2, #6
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f001 fc18 	bl	8010116 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	3312      	adds	r3, #18
 800e8ea:	2206      	movs	r2, #6
 800e8ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f001 fc11 	bl	8010116 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	330e      	adds	r3, #14
 800e8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8fa:	6812      	ldr	r2, [r2, #0]
 800e8fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	3318      	adds	r3, #24
 800e902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e904:	6812      	ldr	r2, [r2, #0]
 800e906:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	2200      	movs	r2, #0
 800e90c:	701a      	strb	r2, [r3, #0]
 800e90e:	2200      	movs	r2, #0
 800e910:	f042 0201 	orr.w	r2, r2, #1
 800e914:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2200      	movs	r2, #0
 800e91a:	f042 0208 	orr.w	r2, r2, #8
 800e91e:	709a      	strb	r2, [r3, #2]
 800e920:	2200      	movs	r2, #0
 800e922:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2206      	movs	r2, #6
 800e928:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2204      	movs	r2, #4
 800e92e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e930:	f640 0306 	movw	r3, #2054	; 0x806
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	69b9      	ldr	r1, [r7, #24]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f001 fb6f 	bl	8010020 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e942:	69b8      	ldr	r0, [r7, #24]
 800e944:	f7f7 ff3e 	bl	80067c4 <pbuf_free>
  p = NULL;
 800e948:	2300      	movs	r3, #0
 800e94a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e94c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3720      	adds	r7, #32
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	080136c0 	.word	0x080136c0
 800e95c:	08013810 	.word	0x08013810
 800e960:	08013738 	.word	0x08013738
 800e964:	080138c0 	.word	0x080138c0
 800e968:	080138f4 	.word	0x080138f4

0800e96c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af04      	add	r7, sp, #16
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e988:	2201      	movs	r2, #1
 800e98a:	9203      	str	r2, [sp, #12]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	9202      	str	r2, [sp, #8]
 800e990:	4a06      	ldr	r2, [pc, #24]	; (800e9ac <etharp_request_dst+0x40>)
 800e992:	9201      	str	r2, [sp, #4]
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	4603      	mov	r3, r0
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7ff ff5a 	bl	800e854 <etharp_raw>
 800e9a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	080142fc 	.word	0x080142fc

0800e9b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e9ba:	4a05      	ldr	r2, [pc, #20]	; (800e9d0 <etharp_request+0x20>)
 800e9bc:	6839      	ldr	r1, [r7, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff ffd4 	bl	800e96c <etharp_request_dst>
 800e9c4:	4603      	mov	r3, r0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	080142f4 	.word	0x080142f4

0800e9d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08e      	sub	sp, #56	; 0x38
 800e9d8:	af04      	add	r7, sp, #16
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e9de:	4b79      	ldr	r3, [pc, #484]	; (800ebc4 <icmp_input+0x1f0>)
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	f003 030f 	and.w	r3, r3, #15
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e9f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9f6:	2b13      	cmp	r3, #19
 800e9f8:	f240 80cd 	bls.w	800eb96 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	895b      	ldrh	r3, [r3, #10]
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	f240 80ca 	bls.w	800eb9a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ea10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f000 80b7 	beq.w	800eb88 <icmp_input+0x1b4>
 800ea1a:	2b08      	cmp	r3, #8
 800ea1c:	f040 80b7 	bne.w	800eb8e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ea20:	4b69      	ldr	r3, [pc, #420]	; (800ebc8 <icmp_input+0x1f4>)
 800ea22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea24:	4b67      	ldr	r3, [pc, #412]	; (800ebc4 <icmp_input+0x1f0>)
 800ea26:	695b      	ldr	r3, [r3, #20]
 800ea28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea2c:	2be0      	cmp	r3, #224	; 0xe0
 800ea2e:	f000 80bb 	beq.w	800eba8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ea32:	4b64      	ldr	r3, [pc, #400]	; (800ebc4 <icmp_input+0x1f0>)
 800ea34:	695a      	ldr	r2, [r3, #20]
 800ea36:	4b63      	ldr	r3, [pc, #396]	; (800ebc4 <icmp_input+0x1f0>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f000 fbeb 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f040 80b1 	bne.w	800ebac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	891b      	ldrh	r3, [r3, #8]
 800ea4e:	2b07      	cmp	r3, #7
 800ea50:	f240 80a5 	bls.w	800eb9e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ea54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea56:	330e      	adds	r3, #14
 800ea58:	4619      	mov	r1, r3
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7f7 fe1c 	bl	8006698 <pbuf_add_header>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d04b      	beq.n	800eafe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	891a      	ldrh	r2, [r3, #8]
 800ea6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea6c:	4413      	add	r3, r2
 800ea6e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	891b      	ldrh	r3, [r3, #8]
 800ea74:	8b7a      	ldrh	r2, [r7, #26]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	f0c0 809a 	bcc.w	800ebb0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ea7c:	8b7b      	ldrh	r3, [r7, #26]
 800ea7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea82:	4619      	mov	r1, r3
 800ea84:	200e      	movs	r0, #14
 800ea86:	f7f7 fbbd 	bl	8006204 <pbuf_alloc>
 800ea8a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 8090 	beq.w	800ebb4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	895b      	ldrh	r3, [r3, #10]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea9c:	3308      	adds	r3, #8
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d203      	bcs.n	800eaaa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800eaa2:	6978      	ldr	r0, [r7, #20]
 800eaa4:	f7f7 fe8e 	bl	80067c4 <pbuf_free>
          goto icmperr;
 800eaa8:	e085      	b.n	800ebb6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eab2:	4618      	mov	r0, r3
 800eab4:	f001 fb2f 	bl	8010116 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaba:	4619      	mov	r1, r3
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f7f7 fdfb 	bl	80066b8 <pbuf_remove_header>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d009      	beq.n	800eadc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eac8:	4b40      	ldr	r3, [pc, #256]	; (800ebcc <icmp_input+0x1f8>)
 800eaca:	22b6      	movs	r2, #182	; 0xb6
 800eacc:	4940      	ldr	r1, [pc, #256]	; (800ebd0 <icmp_input+0x1fc>)
 800eace:	4841      	ldr	r0, [pc, #260]	; (800ebd4 <icmp_input+0x200>)
 800ead0:	f001 fb34 	bl	801013c <iprintf>
          pbuf_free(r);
 800ead4:	6978      	ldr	r0, [r7, #20]
 800ead6:	f7f7 fe75 	bl	80067c4 <pbuf_free>
          goto icmperr;
 800eada:	e06c      	b.n	800ebb6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	6978      	ldr	r0, [r7, #20]
 800eae0:	f7f7 ff98 	bl	8006a14 <pbuf_copy>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eaea:	6978      	ldr	r0, [r7, #20]
 800eaec:	f7f7 fe6a 	bl	80067c4 <pbuf_free>
          goto icmperr;
 800eaf0:	e061      	b.n	800ebb6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7f7 fe66 	bl	80067c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	607b      	str	r3, [r7, #4]
 800eafc:	e00f      	b.n	800eb1e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb00:	330e      	adds	r3, #14
 800eb02:	4619      	mov	r1, r3
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7f7 fdd7 	bl	80066b8 <pbuf_remove_header>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d006      	beq.n	800eb1e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800eb10:	4b2e      	ldr	r3, [pc, #184]	; (800ebcc <icmp_input+0x1f8>)
 800eb12:	22c7      	movs	r2, #199	; 0xc7
 800eb14:	4930      	ldr	r1, [pc, #192]	; (800ebd8 <icmp_input+0x204>)
 800eb16:	482f      	ldr	r0, [pc, #188]	; (800ebd4 <icmp_input+0x200>)
 800eb18:	f001 fb10 	bl	801013c <iprintf>
          goto icmperr;
 800eb1c:	e04b      	b.n	800ebb6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800eb24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7f7 fdb5 	bl	8006698 <pbuf_add_header>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d12b      	bne.n	800eb8c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800eb42:	4b20      	ldr	r3, [pc, #128]	; (800ebc4 <icmp_input+0x1f0>)
 800eb44:	691a      	ldr	r2, [r3, #16]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2200      	movs	r2, #0
 800eb54:	709a      	strb	r2, [r3, #2]
 800eb56:	2200      	movs	r2, #0
 800eb58:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	22ff      	movs	r2, #255	; 0xff
 800eb5e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	729a      	strb	r2, [r3, #10]
 800eb66:	2200      	movs	r2, #0
 800eb68:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	9302      	str	r3, [sp, #8]
 800eb6e:	2301      	movs	r3, #1
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	2300      	movs	r3, #0
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	23ff      	movs	r3, #255	; 0xff
 800eb78:	2200      	movs	r2, #0
 800eb7a:	69f9      	ldr	r1, [r7, #28]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fa73 	bl	800f068 <ip4_output_if>
 800eb82:	4603      	mov	r3, r0
 800eb84:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800eb86:	e001      	b.n	800eb8c <icmp_input+0x1b8>
      break;
 800eb88:	bf00      	nop
 800eb8a:	e000      	b.n	800eb8e <icmp_input+0x1ba>
      break;
 800eb8c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f7 fe18 	bl	80067c4 <pbuf_free>
  return;
 800eb94:	e013      	b.n	800ebbe <icmp_input+0x1ea>
    goto lenerr;
 800eb96:	bf00      	nop
 800eb98:	e002      	b.n	800eba0 <icmp_input+0x1cc>
    goto lenerr;
 800eb9a:	bf00      	nop
 800eb9c:	e000      	b.n	800eba0 <icmp_input+0x1cc>
        goto lenerr;
 800eb9e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7f7 fe0f 	bl	80067c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eba6:	e00a      	b.n	800ebbe <icmp_input+0x1ea>
        goto icmperr;
 800eba8:	bf00      	nop
 800ebaa:	e004      	b.n	800ebb6 <icmp_input+0x1e2>
        goto icmperr;
 800ebac:	bf00      	nop
 800ebae:	e002      	b.n	800ebb6 <icmp_input+0x1e2>
          goto icmperr;
 800ebb0:	bf00      	nop
 800ebb2:	e000      	b.n	800ebb6 <icmp_input+0x1e2>
          goto icmperr;
 800ebb4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7f7 fe04 	bl	80067c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ebbc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ebbe:	3728      	adds	r7, #40	; 0x28
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	200037b4 	.word	0x200037b4
 800ebc8:	200037c8 	.word	0x200037c8
 800ebcc:	08013938 	.word	0x08013938
 800ebd0:	08013970 	.word	0x08013970
 800ebd4:	080139a8 	.word	0x080139a8
 800ebd8:	080139d0 	.word	0x080139d0

0800ebdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ebe8:	78fb      	ldrb	r3, [r7, #3]
 800ebea:	461a      	mov	r2, r3
 800ebec:	2103      	movs	r1, #3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f814 	bl	800ec1c <icmp_send_response>
}
 800ebf4:	bf00      	nop
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	460b      	mov	r3, r1
 800ec06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ec08:	78fb      	ldrb	r3, [r7, #3]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	210b      	movs	r1, #11
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 f804 	bl	800ec1c <icmp_send_response>
}
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08c      	sub	sp, #48	; 0x30
 800ec20:	af04      	add	r7, sp, #16
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ec2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec30:	2124      	movs	r1, #36	; 0x24
 800ec32:	2022      	movs	r0, #34	; 0x22
 800ec34:	f7f7 fae6 	bl	8006204 <pbuf_alloc>
 800ec38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d04c      	beq.n	800ecda <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	895b      	ldrh	r3, [r3, #10]
 800ec44:	2b23      	cmp	r3, #35	; 0x23
 800ec46:	d806      	bhi.n	800ec56 <icmp_send_response+0x3a>
 800ec48:	4b26      	ldr	r3, [pc, #152]	; (800ece4 <icmp_send_response+0xc8>)
 800ec4a:	f240 1269 	movw	r2, #361	; 0x169
 800ec4e:	4926      	ldr	r1, [pc, #152]	; (800ece8 <icmp_send_response+0xcc>)
 800ec50:	4826      	ldr	r0, [pc, #152]	; (800ecec <icmp_send_response+0xd0>)
 800ec52:	f001 fa73 	bl	801013c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	78fa      	ldrb	r2, [r7, #3]
 800ec66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	78ba      	ldrb	r2, [r7, #2]
 800ec6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2200      	movs	r2, #0
 800ec72:	711a      	strb	r2, [r3, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	719a      	strb	r2, [r3, #6]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	f103 0008 	add.w	r0, r3, #8
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	221c      	movs	r2, #28
 800ec90:	4619      	mov	r1, r3
 800ec92:	f001 fa40 	bl	8010116 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ec9c:	f107 030c 	add.w	r3, r7, #12
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 f825 	bl	800ecf0 <ip4_route>
 800eca6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d011      	beq.n	800ecd2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	709a      	strb	r2, [r3, #2]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ecb8:	f107 020c 	add.w	r2, r7, #12
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	9302      	str	r3, [sp, #8]
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	9301      	str	r3, [sp, #4]
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	23ff      	movs	r3, #255	; 0xff
 800ecca:	2100      	movs	r1, #0
 800eccc:	69f8      	ldr	r0, [r7, #28]
 800ecce:	f000 f9cb 	bl	800f068 <ip4_output_if>
  }
  pbuf_free(q);
 800ecd2:	69f8      	ldr	r0, [r7, #28]
 800ecd4:	f7f7 fd76 	bl	80067c4 <pbuf_free>
 800ecd8:	e000      	b.n	800ecdc <icmp_send_response+0xc0>
    return;
 800ecda:	bf00      	nop
}
 800ecdc:	3720      	adds	r7, #32
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	08013938 	.word	0x08013938
 800ece8:	08013a04 	.word	0x08013a04
 800ecec:	080139a8 	.word	0x080139a8

0800ecf0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ecf8:	4b33      	ldr	r3, [pc, #204]	; (800edc8 <ip4_route+0xd8>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	e036      	b.n	800ed6e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed06:	f003 0301 	and.w	r3, r3, #1
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d02b      	beq.n	800ed68 <ip4_route+0x78>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed16:	089b      	lsrs	r3, r3, #2
 800ed18:	f003 0301 	and.w	r3, r3, #1
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d022      	beq.n	800ed68 <ip4_route+0x78>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3304      	adds	r3, #4
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d01d      	beq.n	800ed68 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	3304      	adds	r3, #4
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	405a      	eors	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	3308      	adds	r3, #8
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4013      	ands	r3, r2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	e038      	b.n	800edba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed4e:	f003 0302 	and.w	r3, r3, #2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d108      	bne.n	800ed68 <ip4_route+0x78>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	330c      	adds	r3, #12
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d101      	bne.n	800ed68 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	e028      	b.n	800edba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60fb      	str	r3, [r7, #12]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1c5      	bne.n	800ed00 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ed74:	4b15      	ldr	r3, [pc, #84]	; (800edcc <ip4_route+0xdc>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d01a      	beq.n	800edb2 <ip4_route+0xc2>
 800ed7c:	4b13      	ldr	r3, [pc, #76]	; (800edcc <ip4_route+0xdc>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d012      	beq.n	800edb2 <ip4_route+0xc2>
 800ed8c:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <ip4_route+0xdc>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed94:	f003 0304 	and.w	r3, r3, #4
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00a      	beq.n	800edb2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ed9c:	4b0b      	ldr	r3, [pc, #44]	; (800edcc <ip4_route+0xdc>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3304      	adds	r3, #4
 800eda2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	2b7f      	cmp	r3, #127	; 0x7f
 800edb0:	d101      	bne.n	800edb6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800edb2:	2300      	movs	r3, #0
 800edb4:	e001      	b.n	800edba <ip4_route+0xca>
  }

  return netif_default;
 800edb6:	4b05      	ldr	r3, [pc, #20]	; (800edcc <ip4_route+0xdc>)
 800edb8:	681b      	ldr	r3, [r3, #0]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	20006ce8 	.word	0x20006ce8
 800edcc:	20006cec 	.word	0x20006cec

0800edd0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d016      	beq.n	800ee16 <ip4_input_accept+0x46>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3304      	adds	r3, #4
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d011      	beq.n	800ee16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800edf2:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <ip4_input_accept+0x50>)
 800edf4:	695a      	ldr	r2, [r3, #20]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	3304      	adds	r3, #4
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d008      	beq.n	800ee12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ee00:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <ip4_input_accept+0x50>)
 800ee02:	695b      	ldr	r3, [r3, #20]
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fa06 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800ee0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d001      	beq.n	800ee16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e000      	b.n	800ee18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	200037b4 	.word	0x200037b4

0800ee24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	091b      	lsrs	r3, r3, #4
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b04      	cmp	r3, #4
 800ee3e:	d004      	beq.n	800ee4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7f7 fcbf 	bl	80067c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e105      	b.n	800f056 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	f003 030f 	and.w	r3, r3, #15
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	885b      	ldrh	r3, [r3, #2]
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7f6 f995 	bl	8005190 <lwip_htons>
 800ee66:	4603      	mov	r3, r0
 800ee68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	891b      	ldrh	r3, [r3, #8]
 800ee6e:	89ba      	ldrh	r2, [r7, #12]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d204      	bcs.n	800ee7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ee74:	89bb      	ldrh	r3, [r7, #12]
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7f7 fb1d 	bl	80064b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	895b      	ldrh	r3, [r3, #10]
 800ee82:	89fa      	ldrh	r2, [r7, #14]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d807      	bhi.n	800ee98 <ip4_input+0x74>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	891b      	ldrh	r3, [r3, #8]
 800ee8c:	89ba      	ldrh	r2, [r7, #12]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d802      	bhi.n	800ee98 <ip4_input+0x74>
 800ee92:	89fb      	ldrh	r3, [r7, #14]
 800ee94:	2b13      	cmp	r3, #19
 800ee96:	d804      	bhi.n	800eea2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7f7 fc93 	bl	80067c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e0d9      	b.n	800f056 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	4a6e      	ldr	r2, [pc, #440]	; (800f060 <ip4_input+0x23c>)
 800eea8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	4a6c      	ldr	r2, [pc, #432]	; (800f060 <ip4_input+0x23c>)
 800eeb0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eeb2:	4b6b      	ldr	r3, [pc, #428]	; (800f060 <ip4_input+0x23c>)
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eeba:	2be0      	cmp	r3, #224	; 0xe0
 800eebc:	d112      	bne.n	800eee4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eec4:	f003 0301 	and.w	r3, r3, #1
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d007      	beq.n	800eede <ip4_input+0xba>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	3304      	adds	r3, #4
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <ip4_input+0xba>
      netif = inp;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	613b      	str	r3, [r7, #16]
 800eedc:	e02a      	b.n	800ef34 <ip4_input+0x110>
    } else {
      netif = NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	613b      	str	r3, [r7, #16]
 800eee2:	e027      	b.n	800ef34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800eee4:	6838      	ldr	r0, [r7, #0]
 800eee6:	f7ff ff73 	bl	800edd0 <ip4_input_accept>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d002      	beq.n	800eef6 <ip4_input+0xd2>
      netif = inp;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	e01e      	b.n	800ef34 <ip4_input+0x110>
    } else {
      netif = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eefa:	4b59      	ldr	r3, [pc, #356]	; (800f060 <ip4_input+0x23c>)
 800eefc:	695b      	ldr	r3, [r3, #20]
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b7f      	cmp	r3, #127	; 0x7f
 800ef02:	d017      	beq.n	800ef34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ef04:	4b57      	ldr	r3, [pc, #348]	; (800f064 <ip4_input+0x240>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	613b      	str	r3, [r7, #16]
 800ef0a:	e00e      	b.n	800ef2a <ip4_input+0x106>
          if (netif == inp) {
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d006      	beq.n	800ef22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ef14:	6938      	ldr	r0, [r7, #16]
 800ef16:	f7ff ff5b 	bl	800edd0 <ip4_input_accept>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d108      	bne.n	800ef32 <ip4_input+0x10e>
 800ef20:	e000      	b.n	800ef24 <ip4_input+0x100>
            continue;
 800ef22:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	613b      	str	r3, [r7, #16]
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1ed      	bne.n	800ef0c <ip4_input+0xe8>
 800ef30:	e000      	b.n	800ef34 <ip4_input+0x110>
            break;
 800ef32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef34:	4b4a      	ldr	r3, [pc, #296]	; (800f060 <ip4_input+0x23c>)
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f96c 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ef46:	4b46      	ldr	r3, [pc, #280]	; (800f060 <ip4_input+0x23c>)
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef4e:	2be0      	cmp	r3, #224	; 0xe0
 800ef50:	d104      	bne.n	800ef5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7f7 fc36 	bl	80067c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e07c      	b.n	800f056 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d104      	bne.n	800ef6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7f7 fc2e 	bl	80067c4 <pbuf_free>
    return ERR_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	e074      	b.n	800f056 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	88db      	ldrh	r3, [r3, #6]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	461a      	mov	r2, r3
 800ef74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ef78:	4013      	ands	r3, r2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00b      	beq.n	800ef96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fc90 	bl	800f8a4 <ip4_reass>
 800ef84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d101      	bne.n	800ef90 <ip4_input+0x16c>
      return ERR_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	e062      	b.n	800f056 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ef96:	4a32      	ldr	r2, [pc, #200]	; (800f060 <ip4_input+0x23c>)
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ef9c:	4a30      	ldr	r2, [pc, #192]	; (800f060 <ip4_input+0x23c>)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800efa2:	4a2f      	ldr	r2, [pc, #188]	; (800f060 <ip4_input+0x23c>)
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 030f 	and.w	r3, r3, #15
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	4b29      	ldr	r3, [pc, #164]	; (800f060 <ip4_input+0x23c>)
 800efba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	4619      	mov	r1, r3
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7f7 fb79 	bl	80066b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	7a5b      	ldrb	r3, [r3, #9]
 800efca:	2b06      	cmp	r3, #6
 800efcc:	d009      	beq.n	800efe2 <ip4_input+0x1be>
 800efce:	2b11      	cmp	r3, #17
 800efd0:	d002      	beq.n	800efd8 <ip4_input+0x1b4>
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d00a      	beq.n	800efec <ip4_input+0x1c8>
 800efd6:	e00e      	b.n	800eff6 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7fe f8e8 	bl	800d1b0 <udp_input>
        break;
 800efe0:	e026      	b.n	800f030 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800efe2:	6839      	ldr	r1, [r7, #0]
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7f9 fcc7 	bl	8008978 <tcp_input>
        break;
 800efea:	e021      	b.n	800f030 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fcf0 	bl	800e9d4 <icmp_input>
        break;
 800eff4:	e01c      	b.n	800f030 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eff6:	4b1a      	ldr	r3, [pc, #104]	; (800f060 <ip4_input+0x23c>)
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	6939      	ldr	r1, [r7, #16]
 800effc:	4618      	mov	r0, r3
 800effe:	f000 f90b 	bl	800f218 <ip4_addr_isbroadcast_u32>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10f      	bne.n	800f028 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <ip4_input+0x23c>)
 800f00a:	695b      	ldr	r3, [r3, #20]
 800f00c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f010:	2be0      	cmp	r3, #224	; 0xe0
 800f012:	d009      	beq.n	800f028 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7f7 fbbf 	bl	800679e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f020:	2102      	movs	r1, #2
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7ff fdda 	bl	800ebdc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7f7 fbcb 	bl	80067c4 <pbuf_free>
        break;
 800f02e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f030:	4b0b      	ldr	r3, [pc, #44]	; (800f060 <ip4_input+0x23c>)
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f036:	4b0a      	ldr	r3, [pc, #40]	; (800f060 <ip4_input+0x23c>)
 800f038:	2200      	movs	r2, #0
 800f03a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f03c:	4b08      	ldr	r3, [pc, #32]	; (800f060 <ip4_input+0x23c>)
 800f03e:	2200      	movs	r2, #0
 800f040:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f042:	4b07      	ldr	r3, [pc, #28]	; (800f060 <ip4_input+0x23c>)
 800f044:	2200      	movs	r2, #0
 800f046:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f048:	4b05      	ldr	r3, [pc, #20]	; (800f060 <ip4_input+0x23c>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f04e:	4b04      	ldr	r3, [pc, #16]	; (800f060 <ip4_input+0x23c>)
 800f050:	2200      	movs	r2, #0
 800f052:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	200037b4 	.word	0x200037b4
 800f064:	20006ce8 	.word	0x20006ce8

0800f068 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b08a      	sub	sp, #40	; 0x28
 800f06c:	af04      	add	r7, sp, #16
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d009      	beq.n	800f094 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <ip4_output_if+0x26>
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d102      	bne.n	800f094 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	3304      	adds	r3, #4
 800f092:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f094:	78fa      	ldrb	r2, [r7, #3]
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	9302      	str	r3, [sp, #8]
 800f09a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f09e:	9301      	str	r3, [sp, #4]
 800f0a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	6979      	ldr	r1, [r7, #20]
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 f805 	bl	800f0bc <ip4_output_if_src>
 800f0b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b088      	sub	sp, #32
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	7b9b      	ldrb	r3, [r3, #14]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d006      	beq.n	800f0e0 <ip4_output_if_src+0x24>
 800f0d2:	4b4b      	ldr	r3, [pc, #300]	; (800f200 <ip4_output_if_src+0x144>)
 800f0d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f0d8:	494a      	ldr	r1, [pc, #296]	; (800f204 <ip4_output_if_src+0x148>)
 800f0da:	484b      	ldr	r0, [pc, #300]	; (800f208 <ip4_output_if_src+0x14c>)
 800f0dc:	f001 f82e 	bl	801013c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d060      	beq.n	800f1a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f0e6:	2314      	movs	r3, #20
 800f0e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f0ea:	2114      	movs	r1, #20
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f7f7 fad3 	bl	8006698 <pbuf_add_header>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f0f8:	f06f 0301 	mvn.w	r3, #1
 800f0fc:	e07c      	b.n	800f1f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	895b      	ldrh	r3, [r3, #10]
 800f108:	2b13      	cmp	r3, #19
 800f10a:	d806      	bhi.n	800f11a <ip4_output_if_src+0x5e>
 800f10c:	4b3c      	ldr	r3, [pc, #240]	; (800f200 <ip4_output_if_src+0x144>)
 800f10e:	f240 3289 	movw	r2, #905	; 0x389
 800f112:	493e      	ldr	r1, [pc, #248]	; (800f20c <ip4_output_if_src+0x150>)
 800f114:	483c      	ldr	r0, [pc, #240]	; (800f208 <ip4_output_if_src+0x14c>)
 800f116:	f001 f811 	bl	801013c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	78fa      	ldrb	r2, [r7, #3]
 800f11e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f126:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f130:	8b7b      	ldrh	r3, [r7, #26]
 800f132:	089b      	lsrs	r3, r3, #2
 800f134:	b29b      	uxth	r3, r3
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f148:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	891b      	ldrh	r3, [r3, #8]
 800f14e:	4618      	mov	r0, r3
 800f150:	f7f6 f81e 	bl	8005190 <lwip_htons>
 800f154:	4603      	mov	r3, r0
 800f156:	461a      	mov	r2, r3
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2200      	movs	r2, #0
 800f160:	719a      	strb	r2, [r3, #6]
 800f162:	2200      	movs	r2, #0
 800f164:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f166:	4b2a      	ldr	r3, [pc, #168]	; (800f210 <ip4_output_if_src+0x154>)
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f6 f810 	bl	8005190 <lwip_htons>
 800f170:	4603      	mov	r3, r0
 800f172:	461a      	mov	r2, r3
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f178:	4b25      	ldr	r3, [pc, #148]	; (800f210 <ip4_output_if_src+0x154>)
 800f17a:	881b      	ldrh	r3, [r3, #0]
 800f17c:	3301      	adds	r3, #1
 800f17e:	b29a      	uxth	r2, r3
 800f180:	4b23      	ldr	r3, [pc, #140]	; (800f210 <ip4_output_if_src+0x154>)
 800f182:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d104      	bne.n	800f194 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f18a:	4b22      	ldr	r3, [pc, #136]	; (800f214 <ip4_output_if_src+0x158>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	60da      	str	r2, [r3, #12]
 800f192:	e003      	b.n	800f19c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	729a      	strb	r2, [r3, #10]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	72da      	strb	r2, [r3, #11]
 800f1a6:	e00f      	b.n	800f1c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	895b      	ldrh	r3, [r3, #10]
 800f1ac:	2b13      	cmp	r3, #19
 800f1ae:	d802      	bhi.n	800f1b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f1b0:	f06f 0301 	mvn.w	r3, #1
 800f1b4:	e020      	b.n	800f1f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f1c2:	f107 0314 	add.w	r3, r7, #20
 800f1c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00c      	beq.n	800f1ea <ip4_output_if_src+0x12e>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	891a      	ldrh	r2, [r3, #8]
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d906      	bls.n	800f1ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f000 fd4b 	bl	800fc7c <ip4_frag>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	e006      	b.n	800f1f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	695b      	ldr	r3, [r3, #20]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	68f9      	ldr	r1, [r7, #12]
 800f1f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1f4:	4798      	blx	r3
 800f1f6:	4603      	mov	r3, r0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3720      	adds	r7, #32
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	08013a30 	.word	0x08013a30
 800f204:	08013a64 	.word	0x08013a64
 800f208:	08013a70 	.word	0x08013a70
 800f20c:	08013a98 	.word	0x08013a98
 800f210:	20000662 	.word	0x20000662
 800f214:	080142f0 	.word	0x080142f0

0800f218 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f22c:	d002      	beq.n	800f234 <ip4_addr_isbroadcast_u32+0x1c>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f234:	2301      	movs	r3, #1
 800f236:	e02a      	b.n	800f28e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f23e:	f003 0302 	and.w	r3, r3, #2
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f246:	2300      	movs	r3, #0
 800f248:	e021      	b.n	800f28e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	3304      	adds	r3, #4
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	429a      	cmp	r2, r3
 800f254:	d101      	bne.n	800f25a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f256:	2300      	movs	r3, #0
 800f258:	e019      	b.n	800f28e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	3304      	adds	r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	405a      	eors	r2, r3
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	3308      	adds	r3, #8
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4013      	ands	r3, r2
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10d      	bne.n	800f28c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	43da      	mvns	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	3308      	adds	r3, #8
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f284:	429a      	cmp	r2, r3
 800f286:	d101      	bne.n	800f28c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f288:	2301      	movs	r3, #1
 800f28a:	e000      	b.n	800f28e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f28c:	2300      	movs	r3, #0
  }
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
	...

0800f29c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f2a6:	4b12      	ldr	r3, [pc, #72]	; (800f2f0 <ip_reass_tmr+0x54>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f2ac:	e018      	b.n	800f2e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	7fdb      	ldrb	r3, [r3, #31]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d00b      	beq.n	800f2ce <ip_reass_tmr+0x32>
      r->timer--;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	7fdb      	ldrb	r3, [r3, #31]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	e008      	b.n	800f2e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f2d8:	68b9      	ldr	r1, [r7, #8]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f80a 	bl	800f2f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1e3      	bne.n	800f2ae <ip_reass_tmr+0x12>
    }
  }
}
 800f2e6:	bf00      	nop
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	20000664 	.word	0x20000664

0800f2f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b088      	sub	sp, #32
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	429a      	cmp	r2, r3
 800f308:	d105      	bne.n	800f316 <ip_reass_free_complete_datagram+0x22>
 800f30a:	4b45      	ldr	r3, [pc, #276]	; (800f420 <ip_reass_free_complete_datagram+0x12c>)
 800f30c:	22ab      	movs	r2, #171	; 0xab
 800f30e:	4945      	ldr	r1, [pc, #276]	; (800f424 <ip_reass_free_complete_datagram+0x130>)
 800f310:	4845      	ldr	r0, [pc, #276]	; (800f428 <ip_reass_free_complete_datagram+0x134>)
 800f312:	f000 ff13 	bl	801013c <iprintf>
  if (prev != NULL) {
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00a      	beq.n	800f332 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	429a      	cmp	r2, r3
 800f324:	d005      	beq.n	800f332 <ip_reass_free_complete_datagram+0x3e>
 800f326:	4b3e      	ldr	r3, [pc, #248]	; (800f420 <ip_reass_free_complete_datagram+0x12c>)
 800f328:	22ad      	movs	r2, #173	; 0xad
 800f32a:	4940      	ldr	r1, [pc, #256]	; (800f42c <ip_reass_free_complete_datagram+0x138>)
 800f32c:	483e      	ldr	r0, [pc, #248]	; (800f428 <ip_reass_free_complete_datagram+0x134>)
 800f32e:	f000 ff05 	bl	801013c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	889b      	ldrh	r3, [r3, #4]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	2b00      	cmp	r3, #0
 800f342:	d12a      	bne.n	800f39a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	6858      	ldr	r0, [r3, #4]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	3308      	adds	r3, #8
 800f35a:	2214      	movs	r2, #20
 800f35c:	4619      	mov	r1, r3
 800f35e:	f000 feda 	bl	8010116 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f362:	2101      	movs	r1, #1
 800f364:	69b8      	ldr	r0, [r7, #24]
 800f366:	f7ff fc49 	bl	800ebfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f7f7 fab2 	bl	80068d4 <pbuf_clen>
 800f370:	4603      	mov	r3, r0
 800f372:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f374:	8bfa      	ldrh	r2, [r7, #30]
 800f376:	8a7b      	ldrh	r3, [r7, #18]
 800f378:	4413      	add	r3, r2
 800f37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f37e:	db05      	blt.n	800f38c <ip_reass_free_complete_datagram+0x98>
 800f380:	4b27      	ldr	r3, [pc, #156]	; (800f420 <ip_reass_free_complete_datagram+0x12c>)
 800f382:	22bc      	movs	r2, #188	; 0xbc
 800f384:	492a      	ldr	r1, [pc, #168]	; (800f430 <ip_reass_free_complete_datagram+0x13c>)
 800f386:	4828      	ldr	r0, [pc, #160]	; (800f428 <ip_reass_free_complete_datagram+0x134>)
 800f388:	f000 fed8 	bl	801013c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f38c:	8bfa      	ldrh	r2, [r7, #30]
 800f38e:	8a7b      	ldrh	r3, [r7, #18]
 800f390:	4413      	add	r3, r2
 800f392:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f394:	69b8      	ldr	r0, [r7, #24]
 800f396:	f7f7 fa15 	bl	80067c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f3a0:	e01f      	b.n	800f3e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7f7 fa8e 	bl	80068d4 <pbuf_clen>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f3bc:	8bfa      	ldrh	r2, [r7, #30]
 800f3be:	8a7b      	ldrh	r3, [r7, #18]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3c6:	db05      	blt.n	800f3d4 <ip_reass_free_complete_datagram+0xe0>
 800f3c8:	4b15      	ldr	r3, [pc, #84]	; (800f420 <ip_reass_free_complete_datagram+0x12c>)
 800f3ca:	22cc      	movs	r2, #204	; 0xcc
 800f3cc:	4918      	ldr	r1, [pc, #96]	; (800f430 <ip_reass_free_complete_datagram+0x13c>)
 800f3ce:	4816      	ldr	r0, [pc, #88]	; (800f428 <ip_reass_free_complete_datagram+0x134>)
 800f3d0:	f000 feb4 	bl	801013c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f3d4:	8bfa      	ldrh	r2, [r7, #30]
 800f3d6:	8a7b      	ldrh	r3, [r7, #18]
 800f3d8:	4413      	add	r3, r2
 800f3da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7f7 f9f1 	bl	80067c4 <pbuf_free>
  while (p != NULL) {
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1dc      	bne.n	800f3a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f8c2 	bl	800f574 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f3f0:	4b10      	ldr	r3, [pc, #64]	; (800f434 <ip_reass_free_complete_datagram+0x140>)
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	8bfa      	ldrh	r2, [r7, #30]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d905      	bls.n	800f406 <ip_reass_free_complete_datagram+0x112>
 800f3fa:	4b09      	ldr	r3, [pc, #36]	; (800f420 <ip_reass_free_complete_datagram+0x12c>)
 800f3fc:	22d2      	movs	r2, #210	; 0xd2
 800f3fe:	490e      	ldr	r1, [pc, #56]	; (800f438 <ip_reass_free_complete_datagram+0x144>)
 800f400:	4809      	ldr	r0, [pc, #36]	; (800f428 <ip_reass_free_complete_datagram+0x134>)
 800f402:	f000 fe9b 	bl	801013c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f406:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <ip_reass_free_complete_datagram+0x140>)
 800f408:	881a      	ldrh	r2, [r3, #0]
 800f40a:	8bfb      	ldrh	r3, [r7, #30]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	b29a      	uxth	r2, r3
 800f410:	4b08      	ldr	r3, [pc, #32]	; (800f434 <ip_reass_free_complete_datagram+0x140>)
 800f412:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f414:	8bfb      	ldrh	r3, [r7, #30]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3720      	adds	r7, #32
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	08013ac8 	.word	0x08013ac8
 800f424:	08013b04 	.word	0x08013b04
 800f428:	08013b10 	.word	0x08013b10
 800f42c:	08013b38 	.word	0x08013b38
 800f430:	08013b4c 	.word	0x08013b4c
 800f434:	20000668 	.word	0x20000668
 800f438:	08013b6c 	.word	0x08013b6c

0800f43c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f44a:	2300      	movs	r3, #0
 800f44c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f44e:	2300      	movs	r3, #0
 800f450:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f452:	2300      	movs	r3, #0
 800f454:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f456:	2300      	movs	r3, #0
 800f458:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f45a:	4b28      	ldr	r3, [pc, #160]	; (800f4fc <ip_reass_remove_oldest_datagram+0xc0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f460:	e030      	b.n	800f4c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	695a      	ldr	r2, [r3, #20]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d10c      	bne.n	800f488 <ip_reass_remove_oldest_datagram+0x4c>
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	699a      	ldr	r2, [r3, #24]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	429a      	cmp	r2, r3
 800f478:	d106      	bne.n	800f488 <ip_reass_remove_oldest_datagram+0x4c>
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	899a      	ldrh	r2, [r3, #12]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	889b      	ldrh	r3, [r3, #4]
 800f482:	b29b      	uxth	r3, r3
 800f484:	429a      	cmp	r2, r3
 800f486:	d014      	beq.n	800f4b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	3301      	adds	r3, #1
 800f48c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d104      	bne.n	800f49e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f496:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	61bb      	str	r3, [r7, #24]
 800f49c:	e009      	b.n	800f4b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a0:	7fda      	ldrb	r2, [r3, #31]
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	7fdb      	ldrb	r3, [r3, #31]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d803      	bhi.n	800f4b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1cb      	bne.n	800f462 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d008      	beq.n	800f4e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f4d0:	69b9      	ldr	r1, [r7, #24]
 800f4d2:	6a38      	ldr	r0, [r7, #32]
 800f4d4:	f7ff ff0e 	bl	800f2f4 <ip_reass_free_complete_datagram>
 800f4d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4413      	add	r3, r2
 800f4e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	da02      	bge.n	800f4f0 <ip_reass_remove_oldest_datagram+0xb4>
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	dcac      	bgt.n	800f44a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f4f0:	697b      	ldr	r3, [r7, #20]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3728      	adds	r7, #40	; 0x28
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	20000664 	.word	0x20000664

0800f500 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f50a:	2004      	movs	r0, #4
 800f50c:	f7f6 fb00 	bl	8005b10 <memp_malloc>
 800f510:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d110      	bne.n	800f53a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff ff8e 	bl	800f43c <ip_reass_remove_oldest_datagram>
 800f520:	4602      	mov	r2, r0
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	4293      	cmp	r3, r2
 800f526:	dc03      	bgt.n	800f530 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f528:	2004      	movs	r0, #4
 800f52a:	f7f6 faf1 	bl	8005b10 <memp_malloc>
 800f52e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d101      	bne.n	800f53a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	e016      	b.n	800f568 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f53a:	2220      	movs	r2, #32
 800f53c:	2100      	movs	r1, #0
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f000 fdf4 	bl	801012c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	220f      	movs	r2, #15
 800f548:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f54a:	4b09      	ldr	r3, [pc, #36]	; (800f570 <ip_reass_enqueue_new_datagram+0x70>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f552:	4a07      	ldr	r2, [pc, #28]	; (800f570 <ip_reass_enqueue_new_datagram+0x70>)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3308      	adds	r3, #8
 800f55c:	2214      	movs	r2, #20
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	f000 fdd8 	bl	8010116 <memcpy>
  return ipr;
 800f566:	68fb      	ldr	r3, [r7, #12]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20000664 	.word	0x20000664

0800f574 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f57e:	4b10      	ldr	r3, [pc, #64]	; (800f5c0 <ip_reass_dequeue_datagram+0x4c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	429a      	cmp	r2, r3
 800f586:	d104      	bne.n	800f592 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a0c      	ldr	r2, [pc, #48]	; (800f5c0 <ip_reass_dequeue_datagram+0x4c>)
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	e00d      	b.n	800f5ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d106      	bne.n	800f5a6 <ip_reass_dequeue_datagram+0x32>
 800f598:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <ip_reass_dequeue_datagram+0x50>)
 800f59a:	f240 1245 	movw	r2, #325	; 0x145
 800f59e:	490a      	ldr	r1, [pc, #40]	; (800f5c8 <ip_reass_dequeue_datagram+0x54>)
 800f5a0:	480a      	ldr	r0, [pc, #40]	; (800f5cc <ip_reass_dequeue_datagram+0x58>)
 800f5a2:	f000 fdcb 	bl	801013c <iprintf>
    prev->next = ipr->next;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	2004      	movs	r0, #4
 800f5b2:	f7f6 faf9 	bl	8005ba8 <memp_free>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	20000664 	.word	0x20000664
 800f5c4:	08013ac8 	.word	0x08013ac8
 800f5c8:	08013b90 	.word	0x08013b90
 800f5cc:	08013b10 	.word	0x08013b10

0800f5d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08c      	sub	sp, #48	; 0x30
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	885b      	ldrh	r3, [r3, #2]
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7f5 fdcd 	bl	8005190 <lwip_htons>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 030f 	and.w	r3, r3, #15
 800f602:	b2db      	uxtb	r3, r3
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f608:	7e7b      	ldrb	r3, [r7, #25]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	8b7a      	ldrh	r2, [r7, #26]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d202      	bcs.n	800f618 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f612:	f04f 33ff 	mov.w	r3, #4294967295
 800f616:	e135      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f618:	7e7b      	ldrb	r3, [r7, #25]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	8b7a      	ldrh	r2, [r7, #26]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	88db      	ldrh	r3, [r3, #6]
 800f626:	b29b      	uxth	r3, r3
 800f628:	4618      	mov	r0, r3
 800f62a:	f7f5 fdb1 	bl	8005190 <lwip_htons>
 800f62e:	4603      	mov	r3, r0
 800f630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f634:	b29b      	uxth	r3, r3
 800f636:	00db      	lsls	r3, r3, #3
 800f638:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	2200      	movs	r2, #0
 800f644:	701a      	strb	r2, [r3, #0]
 800f646:	2200      	movs	r2, #0
 800f648:	705a      	strb	r2, [r3, #1]
 800f64a:	2200      	movs	r2, #0
 800f64c:	709a      	strb	r2, [r3, #2]
 800f64e:	2200      	movs	r2, #0
 800f650:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	8afa      	ldrh	r2, [r7, #22]
 800f656:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f658:	8afa      	ldrh	r2, [r7, #22]
 800f65a:	8b7b      	ldrh	r3, [r7, #26]
 800f65c:	4413      	add	r3, r2
 800f65e:	b29a      	uxth	r2, r3
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	88db      	ldrh	r3, [r3, #6]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	8afa      	ldrh	r2, [r7, #22]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d902      	bls.n	800f676 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f670:	f04f 33ff 	mov.w	r3, #4294967295
 800f674:	e106      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	627b      	str	r3, [r7, #36]	; 0x24
 800f67c:	e068      	b.n	800f750 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	889b      	ldrh	r3, [r3, #4]
 800f688:	b29a      	uxth	r2, r3
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	889b      	ldrh	r3, [r3, #4]
 800f68e:	b29b      	uxth	r3, r3
 800f690:	429a      	cmp	r2, r3
 800f692:	d235      	bcs.n	800f700 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f698:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d020      	beq.n	800f6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a2:	889b      	ldrh	r3, [r3, #4]
 800f6a4:	b29a      	uxth	r2, r3
 800f6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a8:	88db      	ldrh	r3, [r3, #6]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d307      	bcc.n	800f6c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b2:	88db      	ldrh	r3, [r3, #6]
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	889b      	ldrh	r3, [r3, #4]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d902      	bls.n	800f6c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	e0de      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	88db      	ldrh	r3, [r3, #6]
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d4:	889b      	ldrh	r3, [r3, #4]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d03d      	beq.n	800f758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f6e0:	e03a      	b.n	800f758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e4:	88db      	ldrh	r3, [r3, #6]
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	889b      	ldrh	r3, [r3, #4]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d902      	bls.n	800f6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f6:	e0c5      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	605a      	str	r2, [r3, #4]
      break;
 800f6fe:	e02b      	b.n	800f758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f702:	889b      	ldrh	r3, [r3, #4]
 800f704:	b29a      	uxth	r2, r3
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	889b      	ldrh	r3, [r3, #4]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d102      	bne.n	800f716 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f710:	f04f 33ff 	mov.w	r3, #4294967295
 800f714:	e0b6      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f718:	889b      	ldrh	r3, [r3, #4]
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	88db      	ldrh	r3, [r3, #6]
 800f720:	b29b      	uxth	r3, r3
 800f722:	429a      	cmp	r2, r3
 800f724:	d202      	bcs.n	800f72c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f726:	f04f 33ff 	mov.w	r3, #4294967295
 800f72a:	e0ab      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d009      	beq.n	800f746 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f734:	88db      	ldrh	r3, [r3, #6]
 800f736:	b29a      	uxth	r2, r3
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	889b      	ldrh	r3, [r3, #4]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	429a      	cmp	r2, r3
 800f740:	d001      	beq.n	800f746 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	2b00      	cmp	r3, #0
 800f754:	d193      	bne.n	800f67e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f756:	e000      	b.n	800f75a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f758:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d12d      	bne.n	800f7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	2b00      	cmp	r3, #0
 800f764:	d01c      	beq.n	800f7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f768:	88db      	ldrh	r3, [r3, #6]
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	889b      	ldrh	r3, [r3, #4]
 800f770:	b29b      	uxth	r3, r3
 800f772:	429a      	cmp	r2, r3
 800f774:	d906      	bls.n	800f784 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f776:	4b45      	ldr	r3, [pc, #276]	; (800f88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f778:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f77c:	4944      	ldr	r1, [pc, #272]	; (800f890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f77e:	4845      	ldr	r0, [pc, #276]	; (800f894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f780:	f000 fcdc 	bl	801013c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78c:	88db      	ldrh	r3, [r3, #6]
 800f78e:	b29a      	uxth	r2, r3
 800f790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f792:	889b      	ldrh	r3, [r3, #4]
 800f794:	b29b      	uxth	r3, r3
 800f796:	429a      	cmp	r2, r3
 800f798:	d010      	beq.n	800f7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	623b      	str	r3, [r7, #32]
 800f79e:	e00d      	b.n	800f7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d006      	beq.n	800f7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f7a8:	4b38      	ldr	r3, [pc, #224]	; (800f88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7aa:	f240 12bf 	movw	r2, #447	; 0x1bf
 800f7ae:	493a      	ldr	r1, [pc, #232]	; (800f898 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f7b0:	4838      	ldr	r0, [pc, #224]	; (800f894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7b2:	f000 fcc3 	bl	801013c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	68ba      	ldr	r2, [r7, #8]
 800f7ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d105      	bne.n	800f7ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	7f9b      	ldrb	r3, [r3, #30]
 800f7c6:	f003 0301 	and.w	r3, r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d059      	beq.n	800f882 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d04f      	beq.n	800f874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d006      	beq.n	800f7ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	889b      	ldrh	r3, [r3, #4]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d002      	beq.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	623b      	str	r3, [r7, #32]
 800f7ee:	e041      	b.n	800f874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f7fa:	e012      	b.n	800f822 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	88db      	ldrh	r3, [r3, #6]
 800f806:	b29a      	uxth	r2, r3
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	889b      	ldrh	r3, [r3, #4]
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	429a      	cmp	r2, r3
 800f810:	d002      	beq.n	800f818 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	623b      	str	r3, [r7, #32]
            break;
 800f816:	e007      	b.n	800f828 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f824:	2b00      	cmp	r3, #0
 800f826:	d1e9      	bne.n	800f7fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f828:	6a3b      	ldr	r3, [r7, #32]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d022      	beq.n	800f874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d106      	bne.n	800f844 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f836:	4b15      	ldr	r3, [pc, #84]	; (800f88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f838:	f240 12df 	movw	r2, #479	; 0x1df
 800f83c:	4917      	ldr	r1, [pc, #92]	; (800f89c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f83e:	4815      	ldr	r0, [pc, #84]	; (800f894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f840:	f000 fc7c 	bl	801013c <iprintf>
          LWIP_ASSERT("sanity check",
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d106      	bne.n	800f85e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f850:	4b0e      	ldr	r3, [pc, #56]	; (800f88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f852:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f856:	4911      	ldr	r1, [pc, #68]	; (800f89c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f858:	480e      	ldr	r0, [pc, #56]	; (800f894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f85a:	f000 fc6f 	bl	801013c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d006      	beq.n	800f874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f868:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f86c:	490c      	ldr	r1, [pc, #48]	; (800f8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f86e:	4809      	ldr	r0, [pc, #36]	; (800f894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f870:	f000 fc64 	bl	801013c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	bf14      	ite	ne
 800f87a:	2301      	movne	r3, #1
 800f87c:	2300      	moveq	r3, #0
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	e000      	b.n	800f884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3730      	adds	r7, #48	; 0x30
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	08013ac8 	.word	0x08013ac8
 800f890:	08013bac 	.word	0x08013bac
 800f894:	08013b10 	.word	0x08013b10
 800f898:	08013bcc 	.word	0x08013bcc
 800f89c:	08013c04 	.word	0x08013c04
 800f8a0:	08013c14 	.word	0x08013c14

0800f8a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b08e      	sub	sp, #56	; 0x38
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 030f 	and.w	r3, r3, #15
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b14      	cmp	r3, #20
 800f8c2:	f040 8167 	bne.w	800fb94 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	88db      	ldrh	r3, [r3, #6]
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7f5 fc5f 	bl	8005190 <lwip_htons>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e0:	885b      	ldrh	r3, [r3, #2]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f5 fc53 	bl	8005190 <lwip_htons>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 030f 	and.w	r3, r3, #15
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f8fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f902:	b29b      	uxth	r3, r3
 800f904:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f906:	429a      	cmp	r2, r3
 800f908:	f0c0 8146 	bcc.w	800fb98 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f910:	b29b      	uxth	r3, r3
 800f912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7f6 ffdb 	bl	80068d4 <pbuf_clen>
 800f91e:	4603      	mov	r3, r0
 800f920:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f922:	4ba3      	ldr	r3, [pc, #652]	; (800fbb0 <ip4_reass+0x30c>)
 800f924:	881b      	ldrh	r3, [r3, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	8c3b      	ldrh	r3, [r7, #32]
 800f92a:	4413      	add	r3, r2
 800f92c:	2b0a      	cmp	r3, #10
 800f92e:	dd10      	ble.n	800f952 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f930:	8c3b      	ldrh	r3, [r7, #32]
 800f932:	4619      	mov	r1, r3
 800f934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f936:	f7ff fd81 	bl	800f43c <ip_reass_remove_oldest_datagram>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 812d 	beq.w	800fb9c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f942:	4b9b      	ldr	r3, [pc, #620]	; (800fbb0 <ip4_reass+0x30c>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	461a      	mov	r2, r3
 800f948:	8c3b      	ldrh	r3, [r7, #32]
 800f94a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f94c:	2b0a      	cmp	r3, #10
 800f94e:	f300 8125 	bgt.w	800fb9c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f952:	4b98      	ldr	r3, [pc, #608]	; (800fbb4 <ip4_reass+0x310>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	633b      	str	r3, [r7, #48]	; 0x30
 800f958:	e015      	b.n	800f986 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	695a      	ldr	r2, [r3, #20]
 800f95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	429a      	cmp	r2, r3
 800f964:	d10c      	bne.n	800f980 <ip4_reass+0xdc>
 800f966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f968:	699a      	ldr	r2, [r3, #24]
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	691b      	ldr	r3, [r3, #16]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d106      	bne.n	800f980 <ip4_reass+0xdc>
 800f972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f974:	899a      	ldrh	r2, [r3, #12]
 800f976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f978:	889b      	ldrh	r3, [r3, #4]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d006      	beq.n	800f98e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	633b      	str	r3, [r7, #48]	; 0x30
 800f986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1e6      	bne.n	800f95a <ip4_reass+0xb6>
 800f98c:	e000      	b.n	800f990 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f98e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	2b00      	cmp	r3, #0
 800f994:	d109      	bne.n	800f9aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f996:	8c3b      	ldrh	r3, [r7, #32]
 800f998:	4619      	mov	r1, r3
 800f99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99c:	f7ff fdb0 	bl	800f500 <ip_reass_enqueue_new_datagram>
 800f9a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d11c      	bne.n	800f9e2 <ip4_reass+0x13e>
      goto nullreturn;
 800f9a8:	e0f9      	b.n	800fb9e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	88db      	ldrh	r3, [r3, #6]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f5 fbed 	bl	8005190 <lwip_htons>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d110      	bne.n	800f9e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	89db      	ldrh	r3, [r3, #14]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7f5 fbe3 	bl	8005190 <lwip_htons>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d006      	beq.n	800f9e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d6:	3308      	adds	r3, #8
 800f9d8:	2214      	movs	r2, #20
 800f9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f000 fb9a 	bl	8010116 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e4:	88db      	ldrh	r3, [r3, #6]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	f003 0320 	and.w	r3, r3, #32
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	bf0c      	ite	eq
 800f9f0:	2301      	moveq	r3, #1
 800f9f2:	2300      	movne	r3, #0
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00e      	beq.n	800fa1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa02:	4413      	add	r3, r2
 800fa04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fa06:	8b7a      	ldrh	r2, [r7, #26]
 800fa08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f0c0 80a0 	bcc.w	800fb50 <ip4_reass+0x2ac>
 800fa10:	8b7b      	ldrh	r3, [r7, #26]
 800fa12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fa16:	4293      	cmp	r3, r2
 800fa18:	f200 809a 	bhi.w	800fb50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fa1c:	69fa      	ldr	r2, [r7, #28]
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa22:	f7ff fdd5 	bl	800f5d0 <ip_reass_chain_frag_into_datagram_and_validate>
 800fa26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2e:	f000 8091 	beq.w	800fb54 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fa32:	4b5f      	ldr	r3, [pc, #380]	; (800fbb0 <ip4_reass+0x30c>)
 800fa34:	881a      	ldrh	r2, [r3, #0]
 800fa36:	8c3b      	ldrh	r3, [r7, #32]
 800fa38:	4413      	add	r3, r2
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	4b5c      	ldr	r3, [pc, #368]	; (800fbb0 <ip4_reass+0x30c>)
 800fa3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d00d      	beq.n	800fa62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fa46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa4a:	4413      	add	r3, r2
 800fa4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	8a7a      	ldrh	r2, [r7, #18]
 800fa52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	7f9b      	ldrb	r3, [r3, #30]
 800fa58:	f043 0301 	orr.w	r3, r3, #1
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d171      	bne.n	800fb4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6a:	8b9b      	ldrh	r3, [r3, #28]
 800fa6c:	3314      	adds	r3, #20
 800fa6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	3308      	adds	r3, #8
 800fa86:	2214      	movs	r2, #20
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa8c:	f000 fb43 	bl	8010116 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fa90:	8a3b      	ldrh	r3, [r7, #16]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f5 fb7c 	bl	8005190 <lwip_htons>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	2200      	movs	r2, #0
 800faa4:	719a      	strb	r2, [r3, #6]
 800faa6:	2200      	movs	r2, #0
 800faa8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	2200      	movs	r2, #0
 800faae:	729a      	strb	r2, [r3, #10]
 800fab0:	2200      	movs	r2, #0
 800fab2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800faba:	e00d      	b.n	800fad8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fac2:	2114      	movs	r1, #20
 800fac4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fac6:	f7f6 fdf7 	bl	80066b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800faca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7f6 ff3b 	bl	8006948 <pbuf_cat>
      r = iprh->next_pbuf;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1ee      	bne.n	800fabc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fade:	4b35      	ldr	r3, [pc, #212]	; (800fbb4 <ip4_reass+0x310>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d102      	bne.n	800faee <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fae8:	2300      	movs	r3, #0
 800faea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faec:	e010      	b.n	800fb10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800faee:	4b31      	ldr	r3, [pc, #196]	; (800fbb4 <ip4_reass+0x310>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faf4:	e007      	b.n	800fb06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d006      	beq.n	800fb0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1f4      	bne.n	800faf6 <ip4_reass+0x252>
 800fb0c:	e000      	b.n	800fb10 <ip4_reass+0x26c>
          break;
 800fb0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fb10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb14:	f7ff fd2e 	bl	800f574 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7f6 fedb 	bl	80068d4 <pbuf_clen>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fb22:	4b23      	ldr	r3, [pc, #140]	; (800fbb0 <ip4_reass+0x30c>)
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	8c3a      	ldrh	r2, [r7, #32]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d906      	bls.n	800fb3a <ip4_reass+0x296>
 800fb2c:	4b22      	ldr	r3, [pc, #136]	; (800fbb8 <ip4_reass+0x314>)
 800fb2e:	f240 229b 	movw	r2, #667	; 0x29b
 800fb32:	4922      	ldr	r1, [pc, #136]	; (800fbbc <ip4_reass+0x318>)
 800fb34:	4822      	ldr	r0, [pc, #136]	; (800fbc0 <ip4_reass+0x31c>)
 800fb36:	f000 fb01 	bl	801013c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fb3a:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <ip4_reass+0x30c>)
 800fb3c:	881a      	ldrh	r2, [r3, #0]
 800fb3e:	8c3b      	ldrh	r3, [r7, #32]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	4b1a      	ldr	r3, [pc, #104]	; (800fbb0 <ip4_reass+0x30c>)
 800fb46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	e02c      	b.n	800fba6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	e02a      	b.n	800fba6 <ip4_reass+0x302>

nullreturn_ipr:
 800fb50:	bf00      	nop
 800fb52:	e000      	b.n	800fb56 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fb54:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <ip4_reass+0x2c6>
 800fb5c:	4b16      	ldr	r3, [pc, #88]	; (800fbb8 <ip4_reass+0x314>)
 800fb5e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fb62:	4918      	ldr	r1, [pc, #96]	; (800fbc4 <ip4_reass+0x320>)
 800fb64:	4816      	ldr	r0, [pc, #88]	; (800fbc0 <ip4_reass+0x31c>)
 800fb66:	f000 fae9 	bl	801013c <iprintf>
  if (ipr->p == NULL) {
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d114      	bne.n	800fb9c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fb72:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <ip4_reass+0x310>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d006      	beq.n	800fb8a <ip4_reass+0x2e6>
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <ip4_reass+0x314>)
 800fb7e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fb82:	4911      	ldr	r1, [pc, #68]	; (800fbc8 <ip4_reass+0x324>)
 800fb84:	480e      	ldr	r0, [pc, #56]	; (800fbc0 <ip4_reass+0x31c>)
 800fb86:	f000 fad9 	bl	801013c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb8e:	f7ff fcf1 	bl	800f574 <ip_reass_dequeue_datagram>
 800fb92:	e004      	b.n	800fb9e <ip4_reass+0x2fa>
    goto nullreturn;
 800fb94:	bf00      	nop
 800fb96:	e002      	b.n	800fb9e <ip4_reass+0x2fa>
    goto nullreturn;
 800fb98:	bf00      	nop
 800fb9a:	e000      	b.n	800fb9e <ip4_reass+0x2fa>
  }

nullreturn:
 800fb9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7f6 fe10 	bl	80067c4 <pbuf_free>
  return NULL;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3738      	adds	r7, #56	; 0x38
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000668 	.word	0x20000668
 800fbb4:	20000664 	.word	0x20000664
 800fbb8:	08013ac8 	.word	0x08013ac8
 800fbbc:	08013c38 	.word	0x08013c38
 800fbc0:	08013b10 	.word	0x08013b10
 800fbc4:	08013c54 	.word	0x08013c54
 800fbc8:	08013c60 	.word	0x08013c60

0800fbcc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fbd0:	2005      	movs	r0, #5
 800fbd2:	f7f5 ff9d 	bl	8005b10 <memp_malloc>
 800fbd6:	4603      	mov	r3, r0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d106      	bne.n	800fbf8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fbea:	4b07      	ldr	r3, [pc, #28]	; (800fc08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fbec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fbf0:	4906      	ldr	r1, [pc, #24]	; (800fc0c <ip_frag_free_pbuf_custom_ref+0x30>)
 800fbf2:	4807      	ldr	r0, [pc, #28]	; (800fc10 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fbf4:	f000 faa2 	bl	801013c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	2005      	movs	r0, #5
 800fbfc:	f7f5 ffd4 	bl	8005ba8 <memp_free>
}
 800fc00:	bf00      	nop
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	08013ac8 	.word	0x08013ac8
 800fc0c:	08013c80 	.word	0x08013c80
 800fc10:	08013b10 	.word	0x08013b10

0800fc14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <ipfrag_free_pbuf_custom+0x20>
 800fc26:	4b11      	ldr	r3, [pc, #68]	; (800fc6c <ipfrag_free_pbuf_custom+0x58>)
 800fc28:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fc2c:	4910      	ldr	r1, [pc, #64]	; (800fc70 <ipfrag_free_pbuf_custom+0x5c>)
 800fc2e:	4811      	ldr	r0, [pc, #68]	; (800fc74 <ipfrag_free_pbuf_custom+0x60>)
 800fc30:	f000 fa84 	bl	801013c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d006      	beq.n	800fc4a <ipfrag_free_pbuf_custom+0x36>
 800fc3c:	4b0b      	ldr	r3, [pc, #44]	; (800fc6c <ipfrag_free_pbuf_custom+0x58>)
 800fc3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fc42:	490d      	ldr	r1, [pc, #52]	; (800fc78 <ipfrag_free_pbuf_custom+0x64>)
 800fc44:	480b      	ldr	r0, [pc, #44]	; (800fc74 <ipfrag_free_pbuf_custom+0x60>)
 800fc46:	f000 fa79 	bl	801013c <iprintf>
  if (pcr->original != NULL) {
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	695b      	ldr	r3, [r3, #20]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f6 fdb4 	bl	80067c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff ffbd 	bl	800fbdc <ip_frag_free_pbuf_custom_ref>
}
 800fc62:	bf00      	nop
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	08013ac8 	.word	0x08013ac8
 800fc70:	08013c8c 	.word	0x08013c8c
 800fc74:	08013b10 	.word	0x08013b10
 800fc78:	08013c98 	.word	0x08013c98

0800fc7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b094      	sub	sp, #80	; 0x50
 800fc80:	af02      	add	r7, sp, #8
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc92:	3b14      	subs	r3, #20
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	da00      	bge.n	800fc9a <ip4_frag+0x1e>
 800fc98:	3307      	adds	r3, #7
 800fc9a:	10db      	asrs	r3, r3, #3
 800fc9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fc9e:	2314      	movs	r3, #20
 800fca0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 030f 	and.w	r3, r3, #15
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	2b14      	cmp	r3, #20
 800fcbc:	d002      	beq.n	800fcc4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fcbe:	f06f 0305 	mvn.w	r3, #5
 800fcc2:	e10f      	b.n	800fee4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	895b      	ldrh	r3, [r3, #10]
 800fcc8:	2b13      	cmp	r3, #19
 800fcca:	d809      	bhi.n	800fce0 <ip4_frag+0x64>
 800fccc:	4b87      	ldr	r3, [pc, #540]	; (800feec <ip4_frag+0x270>)
 800fcce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fcd2:	4987      	ldr	r1, [pc, #540]	; (800fef0 <ip4_frag+0x274>)
 800fcd4:	4887      	ldr	r0, [pc, #540]	; (800fef4 <ip4_frag+0x278>)
 800fcd6:	f000 fa31 	bl	801013c <iprintf>
 800fcda:	f06f 0305 	mvn.w	r3, #5
 800fcde:	e101      	b.n	800fee4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce2:	88db      	ldrh	r3, [r3, #6]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7f5 fa52 	bl	8005190 <lwip_htons>
 800fcec:	4603      	mov	r3, r0
 800fcee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fcf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fcfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	3b14      	subs	r3, #20
 800fd08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fd0c:	e0e0      	b.n	800fed0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fd0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd10:	00db      	lsls	r3, r3, #3
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	bf28      	it	cs
 800fd1c:	4613      	movcs	r3, r2
 800fd1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fd20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd24:	2114      	movs	r1, #20
 800fd26:	200e      	movs	r0, #14
 800fd28:	f7f6 fa6c 	bl	8006204 <pbuf_alloc>
 800fd2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 80d4 	beq.w	800fede <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	895b      	ldrh	r3, [r3, #10]
 800fd3a:	2b13      	cmp	r3, #19
 800fd3c:	d806      	bhi.n	800fd4c <ip4_frag+0xd0>
 800fd3e:	4b6b      	ldr	r3, [pc, #428]	; (800feec <ip4_frag+0x270>)
 800fd40:	f240 3225 	movw	r2, #805	; 0x325
 800fd44:	496c      	ldr	r1, [pc, #432]	; (800fef8 <ip4_frag+0x27c>)
 800fd46:	486b      	ldr	r0, [pc, #428]	; (800fef4 <ip4_frag+0x278>)
 800fd48:	f000 f9f8 	bl	801013c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	2214      	movs	r2, #20
 800fd52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd54:	4618      	mov	r0, r3
 800fd56:	f000 f9de 	bl	8010116 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fd60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fd66:	e064      	b.n	800fe32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	895a      	ldrh	r2, [r3, #10]
 800fd6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	895b      	ldrh	r3, [r3, #10]
 800fd76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d906      	bls.n	800fd8a <ip4_frag+0x10e>
 800fd7c:	4b5b      	ldr	r3, [pc, #364]	; (800feec <ip4_frag+0x270>)
 800fd7e:	f240 322d 	movw	r2, #813	; 0x32d
 800fd82:	495e      	ldr	r1, [pc, #376]	; (800fefc <ip4_frag+0x280>)
 800fd84:	485b      	ldr	r0, [pc, #364]	; (800fef4 <ip4_frag+0x278>)
 800fd86:	f000 f9d9 	bl	801013c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fd8a:	8bfa      	ldrh	r2, [r7, #30]
 800fd8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd90:	4293      	cmp	r3, r2
 800fd92:	bf28      	it	cs
 800fd94:	4613      	movcs	r3, r2
 800fd96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fd9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d105      	bne.n	800fdae <ip4_frag+0x132>
        poff = 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	60fb      	str	r3, [r7, #12]
        continue;
 800fdac:	e041      	b.n	800fe32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fdae:	f7ff ff0d 	bl	800fbcc <ip_frag_alloc_pbuf_custom_ref>
 800fdb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d103      	bne.n	800fdc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fdba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdbc:	f7f6 fd02 	bl	80067c4 <pbuf_free>
        goto memerr;
 800fdc0:	e08e      	b.n	800fee0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fdc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fdc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fdca:	4413      	add	r3, r2
 800fdcc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fdd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fdd4:	9201      	str	r2, [sp, #4]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2241      	movs	r2, #65	; 0x41
 800fddc:	2000      	movs	r0, #0
 800fdde:	f7f6 fb37 	bl	8006450 <pbuf_alloced_custom>
 800fde2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d106      	bne.n	800fdf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fdea:	69b8      	ldr	r0, [r7, #24]
 800fdec:	f7ff fef6 	bl	800fbdc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fdf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdf2:	f7f6 fce7 	bl	80067c4 <pbuf_free>
        goto memerr;
 800fdf6:	e073      	b.n	800fee0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f7f6 fd83 	bl	8006904 <pbuf_ref>
      pcr->original = p;
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	4a3e      	ldr	r2, [pc, #248]	; (800ff00 <ip4_frag+0x284>)
 800fe08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fe0a:	6979      	ldr	r1, [r7, #20]
 800fe0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe0e:	f7f6 fd9b 	bl	8006948 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fe12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fe16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fe20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d004      	beq.n	800fe32 <ip4_frag+0x1b6>
        poff = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fe32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d196      	bne.n	800fd68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fe3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fe3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe40:	4413      	add	r3, r2
 800fe42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fe44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe4c:	3b14      	subs	r3, #20
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	bfd4      	ite	le
 800fe52:	2301      	movle	r3, #1
 800fe54:	2300      	movgt	r3, #0
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fe5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe62:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <ip4_frag+0x1f4>
 800fe6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d003      	beq.n	800fe78 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fe70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe76:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fe78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7f5 f988 	bl	8005190 <lwip_htons>
 800fe80:	4603      	mov	r3, r0
 800fe82:	461a      	mov	r2, r3
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fe88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe8a:	3314      	adds	r3, #20
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f5 f97e 	bl	8005190 <lwip_htons>
 800fe94:	4603      	mov	r3, r0
 800fe96:	461a      	mov	r2, r3
 800fe98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fe9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9e:	2200      	movs	r2, #0
 800fea0:	729a      	strb	r2, [r3, #10]
 800fea2:	2200      	movs	r2, #0
 800fea4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	695b      	ldr	r3, [r3, #20]
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feae:	68b8      	ldr	r0, [r7, #8]
 800feb0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800feb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800feb4:	f7f6 fc86 	bl	80067c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800feb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800febc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fec4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800feca:	4413      	add	r3, r2
 800fecc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f47f af1a 	bne.w	800fd0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	e002      	b.n	800fee4 <ip4_frag+0x268>
      goto memerr;
 800fede:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3748      	adds	r7, #72	; 0x48
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	08013ac8 	.word	0x08013ac8
 800fef0:	08013ca4 	.word	0x08013ca4
 800fef4:	08013b10 	.word	0x08013b10
 800fef8:	08013cc0 	.word	0x08013cc0
 800fefc:	08013ce0 	.word	0x08013ce0
 800ff00:	0800fc15 	.word	0x0800fc15

0800ff04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ff0e:	230e      	movs	r3, #14
 800ff10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	895b      	ldrh	r3, [r3, #10]
 800ff16:	2b0e      	cmp	r3, #14
 800ff18:	d96e      	bls.n	800fff8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7bdb      	ldrb	r3, [r3, #15]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d106      	bne.n	800ff30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff28:	3301      	adds	r3, #1
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	7b1a      	ldrb	r2, [r3, #12]
 800ff3a:	7b5b      	ldrb	r3, [r3, #13]
 800ff3c:	021b      	lsls	r3, r3, #8
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	f003 0301 	and.w	r3, r3, #1
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d023      	beq.n	800ff96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d10f      	bne.n	800ff76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	785b      	ldrb	r3, [r3, #1]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d11b      	bne.n	800ff96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff62:	2b5e      	cmp	r3, #94	; 0x5e
 800ff64:	d117      	bne.n	800ff96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	7b5b      	ldrb	r3, [r3, #13]
 800ff6a:	f043 0310 	orr.w	r3, r3, #16
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	735a      	strb	r2, [r3, #13]
 800ff74:	e00f      	b.n	800ff96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	2206      	movs	r2, #6
 800ff7a:	4928      	ldr	r1, [pc, #160]	; (801001c <ethernet_input+0x118>)
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f000 f8bb 	bl	80100f8 <memcmp>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d106      	bne.n	800ff96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7b5b      	ldrb	r3, [r3, #13]
 800ff8c:	f043 0308 	orr.w	r3, r3, #8
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ff96:	89fb      	ldrh	r3, [r7, #14]
 800ff98:	2b08      	cmp	r3, #8
 800ff9a:	d003      	beq.n	800ffa4 <ethernet_input+0xa0>
 800ff9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ffa0:	d014      	beq.n	800ffcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ffa2:	e032      	b.n	801000a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffaa:	f003 0308 	and.w	r3, r3, #8
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d024      	beq.n	800fffc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffb2:	8afb      	ldrh	r3, [r7, #22]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7f6 fb7e 	bl	80066b8 <pbuf_remove_header>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d11e      	bne.n	8010000 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7fe ff2d 	bl	800ee24 <ip4_input>
      break;
 800ffca:	e013      	b.n	800fff4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffd2:	f003 0308 	and.w	r3, r3, #8
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d014      	beq.n	8010004 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffda:	8afb      	ldrh	r3, [r7, #22]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7f6 fb6a 	bl	80066b8 <pbuf_remove_header>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d10e      	bne.n	8010008 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7fe f8cd 	bl	800e18c <etharp_input>
      break;
 800fff2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fff4:	2300      	movs	r3, #0
 800fff6:	e00c      	b.n	8010012 <ethernet_input+0x10e>
    goto free_and_return;
 800fff8:	bf00      	nop
 800fffa:	e006      	b.n	801000a <ethernet_input+0x106>
        goto free_and_return;
 800fffc:	bf00      	nop
 800fffe:	e004      	b.n	801000a <ethernet_input+0x106>
        goto free_and_return;
 8010000:	bf00      	nop
 8010002:	e002      	b.n	801000a <ethernet_input+0x106>
        goto free_and_return;
 8010004:	bf00      	nop
 8010006:	e000      	b.n	801000a <ethernet_input+0x106>
        goto free_and_return;
 8010008:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7f6 fbda 	bl	80067c4 <pbuf_free>
  return ERR_OK;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3718      	adds	r7, #24
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	080142f4 	.word	0x080142f4

08010020 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801002e:	8c3b      	ldrh	r3, [r7, #32]
 8010030:	4618      	mov	r0, r3
 8010032:	f7f5 f8ad 	bl	8005190 <lwip_htons>
 8010036:	4603      	mov	r3, r0
 8010038:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801003a:	210e      	movs	r1, #14
 801003c:	68b8      	ldr	r0, [r7, #8]
 801003e:	f7f6 fb2b 	bl	8006698 <pbuf_add_header>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d125      	bne.n	8010094 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	8afa      	ldrh	r2, [r7, #22]
 8010052:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	2206      	movs	r2, #6
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	4618      	mov	r0, r3
 801005c:	f000 f85b 	bl	8010116 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	3306      	adds	r3, #6
 8010064:	2206      	movs	r2, #6
 8010066:	6879      	ldr	r1, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f854 	bl	8010116 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010074:	2b06      	cmp	r3, #6
 8010076:	d006      	beq.n	8010086 <ethernet_output+0x66>
 8010078:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <ethernet_output+0x84>)
 801007a:	f240 1233 	movw	r2, #307	; 0x133
 801007e:	490a      	ldr	r1, [pc, #40]	; (80100a8 <ethernet_output+0x88>)
 8010080:	480a      	ldr	r0, [pc, #40]	; (80100ac <ethernet_output+0x8c>)
 8010082:	f000 f85b 	bl	801013c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	699b      	ldr	r3, [r3, #24]
 801008a:	68b9      	ldr	r1, [r7, #8]
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	4798      	blx	r3
 8010090:	4603      	mov	r3, r0
 8010092:	e002      	b.n	801009a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010094:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010096:	f06f 0301 	mvn.w	r3, #1
}
 801009a:	4618      	mov	r0, r3
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	08013cf0 	.word	0x08013cf0
 80100a8:	08013d28 	.word	0x08013d28
 80100ac:	08013d5c 	.word	0x08013d5c

080100b0 <__libc_init_array>:
 80100b0:	b570      	push	{r4, r5, r6, lr}
 80100b2:	4e0d      	ldr	r6, [pc, #52]	; (80100e8 <__libc_init_array+0x38>)
 80100b4:	4c0d      	ldr	r4, [pc, #52]	; (80100ec <__libc_init_array+0x3c>)
 80100b6:	1ba4      	subs	r4, r4, r6
 80100b8:	10a4      	asrs	r4, r4, #2
 80100ba:	2500      	movs	r5, #0
 80100bc:	42a5      	cmp	r5, r4
 80100be:	d109      	bne.n	80100d4 <__libc_init_array+0x24>
 80100c0:	4e0b      	ldr	r6, [pc, #44]	; (80100f0 <__libc_init_array+0x40>)
 80100c2:	4c0c      	ldr	r4, [pc, #48]	; (80100f4 <__libc_init_array+0x44>)
 80100c4:	f000 ff7a 	bl	8010fbc <_init>
 80100c8:	1ba4      	subs	r4, r4, r6
 80100ca:	10a4      	asrs	r4, r4, #2
 80100cc:	2500      	movs	r5, #0
 80100ce:	42a5      	cmp	r5, r4
 80100d0:	d105      	bne.n	80100de <__libc_init_array+0x2e>
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
 80100d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80100d8:	4798      	blx	r3
 80100da:	3501      	adds	r5, #1
 80100dc:	e7ee      	b.n	80100bc <__libc_init_array+0xc>
 80100de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80100e2:	4798      	blx	r3
 80100e4:	3501      	adds	r5, #1
 80100e6:	e7f2      	b.n	80100ce <__libc_init_array+0x1e>
 80100e8:	080143a4 	.word	0x080143a4
 80100ec:	080143a4 	.word	0x080143a4
 80100f0:	080143a4 	.word	0x080143a4
 80100f4:	080143a8 	.word	0x080143a8

080100f8 <memcmp>:
 80100f8:	b530      	push	{r4, r5, lr}
 80100fa:	2400      	movs	r4, #0
 80100fc:	42a2      	cmp	r2, r4
 80100fe:	d101      	bne.n	8010104 <memcmp+0xc>
 8010100:	2000      	movs	r0, #0
 8010102:	e007      	b.n	8010114 <memcmp+0x1c>
 8010104:	5d03      	ldrb	r3, [r0, r4]
 8010106:	3401      	adds	r4, #1
 8010108:	190d      	adds	r5, r1, r4
 801010a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801010e:	42ab      	cmp	r3, r5
 8010110:	d0f4      	beq.n	80100fc <memcmp+0x4>
 8010112:	1b58      	subs	r0, r3, r5
 8010114:	bd30      	pop	{r4, r5, pc}

08010116 <memcpy>:
 8010116:	b510      	push	{r4, lr}
 8010118:	1e43      	subs	r3, r0, #1
 801011a:	440a      	add	r2, r1
 801011c:	4291      	cmp	r1, r2
 801011e:	d100      	bne.n	8010122 <memcpy+0xc>
 8010120:	bd10      	pop	{r4, pc}
 8010122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801012a:	e7f7      	b.n	801011c <memcpy+0x6>

0801012c <memset>:
 801012c:	4402      	add	r2, r0
 801012e:	4603      	mov	r3, r0
 8010130:	4293      	cmp	r3, r2
 8010132:	d100      	bne.n	8010136 <memset+0xa>
 8010134:	4770      	bx	lr
 8010136:	f803 1b01 	strb.w	r1, [r3], #1
 801013a:	e7f9      	b.n	8010130 <memset+0x4>

0801013c <iprintf>:
 801013c:	b40f      	push	{r0, r1, r2, r3}
 801013e:	4b0a      	ldr	r3, [pc, #40]	; (8010168 <iprintf+0x2c>)
 8010140:	b513      	push	{r0, r1, r4, lr}
 8010142:	681c      	ldr	r4, [r3, #0]
 8010144:	b124      	cbz	r4, 8010150 <iprintf+0x14>
 8010146:	69a3      	ldr	r3, [r4, #24]
 8010148:	b913      	cbnz	r3, 8010150 <iprintf+0x14>
 801014a:	4620      	mov	r0, r4
 801014c:	f000 f8a2 	bl	8010294 <__sinit>
 8010150:	ab05      	add	r3, sp, #20
 8010152:	9a04      	ldr	r2, [sp, #16]
 8010154:	68a1      	ldr	r1, [r4, #8]
 8010156:	9301      	str	r3, [sp, #4]
 8010158:	4620      	mov	r0, r4
 801015a:	f000 f9ff 	bl	801055c <_vfiprintf_r>
 801015e:	b002      	add	sp, #8
 8010160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010164:	b004      	add	sp, #16
 8010166:	4770      	bx	lr
 8010168:	2000001c 	.word	0x2000001c

0801016c <rand>:
 801016c:	b538      	push	{r3, r4, r5, lr}
 801016e:	4b13      	ldr	r3, [pc, #76]	; (80101bc <rand+0x50>)
 8010170:	681c      	ldr	r4, [r3, #0]
 8010172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010174:	b97b      	cbnz	r3, 8010196 <rand+0x2a>
 8010176:	2018      	movs	r0, #24
 8010178:	f000 f916 	bl	80103a8 <malloc>
 801017c:	4a10      	ldr	r2, [pc, #64]	; (80101c0 <rand+0x54>)
 801017e:	4b11      	ldr	r3, [pc, #68]	; (80101c4 <rand+0x58>)
 8010180:	63a0      	str	r0, [r4, #56]	; 0x38
 8010182:	e9c0 2300 	strd	r2, r3, [r0]
 8010186:	4b10      	ldr	r3, [pc, #64]	; (80101c8 <rand+0x5c>)
 8010188:	6083      	str	r3, [r0, #8]
 801018a:	230b      	movs	r3, #11
 801018c:	8183      	strh	r3, [r0, #12]
 801018e:	2201      	movs	r2, #1
 8010190:	2300      	movs	r3, #0
 8010192:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010198:	480c      	ldr	r0, [pc, #48]	; (80101cc <rand+0x60>)
 801019a:	690a      	ldr	r2, [r1, #16]
 801019c:	694b      	ldr	r3, [r1, #20]
 801019e:	4c0c      	ldr	r4, [pc, #48]	; (80101d0 <rand+0x64>)
 80101a0:	4350      	muls	r0, r2
 80101a2:	fb04 0003 	mla	r0, r4, r3, r0
 80101a6:	fba2 2304 	umull	r2, r3, r2, r4
 80101aa:	4403      	add	r3, r0
 80101ac:	1c54      	adds	r4, r2, #1
 80101ae:	f143 0500 	adc.w	r5, r3, #0
 80101b2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80101b6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80101ba:	bd38      	pop	{r3, r4, r5, pc}
 80101bc:	2000001c 	.word	0x2000001c
 80101c0:	abcd330e 	.word	0xabcd330e
 80101c4:	e66d1234 	.word	0xe66d1234
 80101c8:	0005deec 	.word	0x0005deec
 80101cc:	5851f42d 	.word	0x5851f42d
 80101d0:	4c957f2d 	.word	0x4c957f2d

080101d4 <strchr>:
 80101d4:	b2c9      	uxtb	r1, r1
 80101d6:	4603      	mov	r3, r0
 80101d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101dc:	b11a      	cbz	r2, 80101e6 <strchr+0x12>
 80101de:	428a      	cmp	r2, r1
 80101e0:	d1f9      	bne.n	80101d6 <strchr+0x2>
 80101e2:	4618      	mov	r0, r3
 80101e4:	4770      	bx	lr
 80101e6:	2900      	cmp	r1, #0
 80101e8:	bf18      	it	ne
 80101ea:	2300      	movne	r3, #0
 80101ec:	e7f9      	b.n	80101e2 <strchr+0xe>

080101ee <strncmp>:
 80101ee:	b510      	push	{r4, lr}
 80101f0:	b16a      	cbz	r2, 801020e <strncmp+0x20>
 80101f2:	3901      	subs	r1, #1
 80101f4:	1884      	adds	r4, r0, r2
 80101f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80101fe:	4293      	cmp	r3, r2
 8010200:	d103      	bne.n	801020a <strncmp+0x1c>
 8010202:	42a0      	cmp	r0, r4
 8010204:	d001      	beq.n	801020a <strncmp+0x1c>
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1f5      	bne.n	80101f6 <strncmp+0x8>
 801020a:	1a98      	subs	r0, r3, r2
 801020c:	bd10      	pop	{r4, pc}
 801020e:	4610      	mov	r0, r2
 8010210:	e7fc      	b.n	801020c <strncmp+0x1e>
	...

08010214 <std>:
 8010214:	2300      	movs	r3, #0
 8010216:	b510      	push	{r4, lr}
 8010218:	4604      	mov	r4, r0
 801021a:	e9c0 3300 	strd	r3, r3, [r0]
 801021e:	6083      	str	r3, [r0, #8]
 8010220:	8181      	strh	r1, [r0, #12]
 8010222:	6643      	str	r3, [r0, #100]	; 0x64
 8010224:	81c2      	strh	r2, [r0, #14]
 8010226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801022a:	6183      	str	r3, [r0, #24]
 801022c:	4619      	mov	r1, r3
 801022e:	2208      	movs	r2, #8
 8010230:	305c      	adds	r0, #92	; 0x5c
 8010232:	f7ff ff7b 	bl	801012c <memset>
 8010236:	4b05      	ldr	r3, [pc, #20]	; (801024c <std+0x38>)
 8010238:	6263      	str	r3, [r4, #36]	; 0x24
 801023a:	4b05      	ldr	r3, [pc, #20]	; (8010250 <std+0x3c>)
 801023c:	62a3      	str	r3, [r4, #40]	; 0x28
 801023e:	4b05      	ldr	r3, [pc, #20]	; (8010254 <std+0x40>)
 8010240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010242:	4b05      	ldr	r3, [pc, #20]	; (8010258 <std+0x44>)
 8010244:	6224      	str	r4, [r4, #32]
 8010246:	6323      	str	r3, [r4, #48]	; 0x30
 8010248:	bd10      	pop	{r4, pc}
 801024a:	bf00      	nop
 801024c:	08010ab9 	.word	0x08010ab9
 8010250:	08010adb 	.word	0x08010adb
 8010254:	08010b13 	.word	0x08010b13
 8010258:	08010b37 	.word	0x08010b37

0801025c <_cleanup_r>:
 801025c:	4901      	ldr	r1, [pc, #4]	; (8010264 <_cleanup_r+0x8>)
 801025e:	f000 b885 	b.w	801036c <_fwalk_reent>
 8010262:	bf00      	nop
 8010264:	08010e11 	.word	0x08010e11

08010268 <__sfmoreglue>:
 8010268:	b570      	push	{r4, r5, r6, lr}
 801026a:	1e4a      	subs	r2, r1, #1
 801026c:	2568      	movs	r5, #104	; 0x68
 801026e:	4355      	muls	r5, r2
 8010270:	460e      	mov	r6, r1
 8010272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010276:	f000 f8ed 	bl	8010454 <_malloc_r>
 801027a:	4604      	mov	r4, r0
 801027c:	b140      	cbz	r0, 8010290 <__sfmoreglue+0x28>
 801027e:	2100      	movs	r1, #0
 8010280:	e9c0 1600 	strd	r1, r6, [r0]
 8010284:	300c      	adds	r0, #12
 8010286:	60a0      	str	r0, [r4, #8]
 8010288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801028c:	f7ff ff4e 	bl	801012c <memset>
 8010290:	4620      	mov	r0, r4
 8010292:	bd70      	pop	{r4, r5, r6, pc}

08010294 <__sinit>:
 8010294:	6983      	ldr	r3, [r0, #24]
 8010296:	b510      	push	{r4, lr}
 8010298:	4604      	mov	r4, r0
 801029a:	bb33      	cbnz	r3, 80102ea <__sinit+0x56>
 801029c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80102a0:	6503      	str	r3, [r0, #80]	; 0x50
 80102a2:	4b12      	ldr	r3, [pc, #72]	; (80102ec <__sinit+0x58>)
 80102a4:	4a12      	ldr	r2, [pc, #72]	; (80102f0 <__sinit+0x5c>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6282      	str	r2, [r0, #40]	; 0x28
 80102aa:	4298      	cmp	r0, r3
 80102ac:	bf04      	itt	eq
 80102ae:	2301      	moveq	r3, #1
 80102b0:	6183      	streq	r3, [r0, #24]
 80102b2:	f000 f81f 	bl	80102f4 <__sfp>
 80102b6:	6060      	str	r0, [r4, #4]
 80102b8:	4620      	mov	r0, r4
 80102ba:	f000 f81b 	bl	80102f4 <__sfp>
 80102be:	60a0      	str	r0, [r4, #8]
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 f817 	bl	80102f4 <__sfp>
 80102c6:	2200      	movs	r2, #0
 80102c8:	60e0      	str	r0, [r4, #12]
 80102ca:	2104      	movs	r1, #4
 80102cc:	6860      	ldr	r0, [r4, #4]
 80102ce:	f7ff ffa1 	bl	8010214 <std>
 80102d2:	2201      	movs	r2, #1
 80102d4:	2109      	movs	r1, #9
 80102d6:	68a0      	ldr	r0, [r4, #8]
 80102d8:	f7ff ff9c 	bl	8010214 <std>
 80102dc:	2202      	movs	r2, #2
 80102de:	2112      	movs	r1, #18
 80102e0:	68e0      	ldr	r0, [r4, #12]
 80102e2:	f7ff ff97 	bl	8010214 <std>
 80102e6:	2301      	movs	r3, #1
 80102e8:	61a3      	str	r3, [r4, #24]
 80102ea:	bd10      	pop	{r4, pc}
 80102ec:	08014304 	.word	0x08014304
 80102f0:	0801025d 	.word	0x0801025d

080102f4 <__sfp>:
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	4b1b      	ldr	r3, [pc, #108]	; (8010364 <__sfp+0x70>)
 80102f8:	681e      	ldr	r6, [r3, #0]
 80102fa:	69b3      	ldr	r3, [r6, #24]
 80102fc:	4607      	mov	r7, r0
 80102fe:	b913      	cbnz	r3, 8010306 <__sfp+0x12>
 8010300:	4630      	mov	r0, r6
 8010302:	f7ff ffc7 	bl	8010294 <__sinit>
 8010306:	3648      	adds	r6, #72	; 0x48
 8010308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801030c:	3b01      	subs	r3, #1
 801030e:	d503      	bpl.n	8010318 <__sfp+0x24>
 8010310:	6833      	ldr	r3, [r6, #0]
 8010312:	b133      	cbz	r3, 8010322 <__sfp+0x2e>
 8010314:	6836      	ldr	r6, [r6, #0]
 8010316:	e7f7      	b.n	8010308 <__sfp+0x14>
 8010318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801031c:	b16d      	cbz	r5, 801033a <__sfp+0x46>
 801031e:	3468      	adds	r4, #104	; 0x68
 8010320:	e7f4      	b.n	801030c <__sfp+0x18>
 8010322:	2104      	movs	r1, #4
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff ff9f 	bl	8010268 <__sfmoreglue>
 801032a:	6030      	str	r0, [r6, #0]
 801032c:	2800      	cmp	r0, #0
 801032e:	d1f1      	bne.n	8010314 <__sfp+0x20>
 8010330:	230c      	movs	r3, #12
 8010332:	603b      	str	r3, [r7, #0]
 8010334:	4604      	mov	r4, r0
 8010336:	4620      	mov	r0, r4
 8010338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033a:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <__sfp+0x74>)
 801033c:	6665      	str	r5, [r4, #100]	; 0x64
 801033e:	e9c4 5500 	strd	r5, r5, [r4]
 8010342:	60a5      	str	r5, [r4, #8]
 8010344:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010348:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801034c:	2208      	movs	r2, #8
 801034e:	4629      	mov	r1, r5
 8010350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010354:	f7ff feea 	bl	801012c <memset>
 8010358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801035c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010360:	e7e9      	b.n	8010336 <__sfp+0x42>
 8010362:	bf00      	nop
 8010364:	08014304 	.word	0x08014304
 8010368:	ffff0001 	.word	0xffff0001

0801036c <_fwalk_reent>:
 801036c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010370:	4680      	mov	r8, r0
 8010372:	4689      	mov	r9, r1
 8010374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010378:	2600      	movs	r6, #0
 801037a:	b914      	cbnz	r4, 8010382 <_fwalk_reent+0x16>
 801037c:	4630      	mov	r0, r6
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010386:	3f01      	subs	r7, #1
 8010388:	d501      	bpl.n	801038e <_fwalk_reent+0x22>
 801038a:	6824      	ldr	r4, [r4, #0]
 801038c:	e7f5      	b.n	801037a <_fwalk_reent+0xe>
 801038e:	89ab      	ldrh	r3, [r5, #12]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d907      	bls.n	80103a4 <_fwalk_reent+0x38>
 8010394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010398:	3301      	adds	r3, #1
 801039a:	d003      	beq.n	80103a4 <_fwalk_reent+0x38>
 801039c:	4629      	mov	r1, r5
 801039e:	4640      	mov	r0, r8
 80103a0:	47c8      	blx	r9
 80103a2:	4306      	orrs	r6, r0
 80103a4:	3568      	adds	r5, #104	; 0x68
 80103a6:	e7ee      	b.n	8010386 <_fwalk_reent+0x1a>

080103a8 <malloc>:
 80103a8:	4b02      	ldr	r3, [pc, #8]	; (80103b4 <malloc+0xc>)
 80103aa:	4601      	mov	r1, r0
 80103ac:	6818      	ldr	r0, [r3, #0]
 80103ae:	f000 b851 	b.w	8010454 <_malloc_r>
 80103b2:	bf00      	nop
 80103b4:	2000001c 	.word	0x2000001c

080103b8 <_free_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4605      	mov	r5, r0
 80103bc:	2900      	cmp	r1, #0
 80103be:	d045      	beq.n	801044c <_free_r+0x94>
 80103c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c4:	1f0c      	subs	r4, r1, #4
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	bfb8      	it	lt
 80103ca:	18e4      	addlt	r4, r4, r3
 80103cc:	f000 fdc0 	bl	8010f50 <__malloc_lock>
 80103d0:	4a1f      	ldr	r2, [pc, #124]	; (8010450 <_free_r+0x98>)
 80103d2:	6813      	ldr	r3, [r2, #0]
 80103d4:	4610      	mov	r0, r2
 80103d6:	b933      	cbnz	r3, 80103e6 <_free_r+0x2e>
 80103d8:	6063      	str	r3, [r4, #4]
 80103da:	6014      	str	r4, [r2, #0]
 80103dc:	4628      	mov	r0, r5
 80103de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103e2:	f000 bdb6 	b.w	8010f52 <__malloc_unlock>
 80103e6:	42a3      	cmp	r3, r4
 80103e8:	d90c      	bls.n	8010404 <_free_r+0x4c>
 80103ea:	6821      	ldr	r1, [r4, #0]
 80103ec:	1862      	adds	r2, r4, r1
 80103ee:	4293      	cmp	r3, r2
 80103f0:	bf04      	itt	eq
 80103f2:	681a      	ldreq	r2, [r3, #0]
 80103f4:	685b      	ldreq	r3, [r3, #4]
 80103f6:	6063      	str	r3, [r4, #4]
 80103f8:	bf04      	itt	eq
 80103fa:	1852      	addeq	r2, r2, r1
 80103fc:	6022      	streq	r2, [r4, #0]
 80103fe:	6004      	str	r4, [r0, #0]
 8010400:	e7ec      	b.n	80103dc <_free_r+0x24>
 8010402:	4613      	mov	r3, r2
 8010404:	685a      	ldr	r2, [r3, #4]
 8010406:	b10a      	cbz	r2, 801040c <_free_r+0x54>
 8010408:	42a2      	cmp	r2, r4
 801040a:	d9fa      	bls.n	8010402 <_free_r+0x4a>
 801040c:	6819      	ldr	r1, [r3, #0]
 801040e:	1858      	adds	r0, r3, r1
 8010410:	42a0      	cmp	r0, r4
 8010412:	d10b      	bne.n	801042c <_free_r+0x74>
 8010414:	6820      	ldr	r0, [r4, #0]
 8010416:	4401      	add	r1, r0
 8010418:	1858      	adds	r0, r3, r1
 801041a:	4282      	cmp	r2, r0
 801041c:	6019      	str	r1, [r3, #0]
 801041e:	d1dd      	bne.n	80103dc <_free_r+0x24>
 8010420:	6810      	ldr	r0, [r2, #0]
 8010422:	6852      	ldr	r2, [r2, #4]
 8010424:	605a      	str	r2, [r3, #4]
 8010426:	4401      	add	r1, r0
 8010428:	6019      	str	r1, [r3, #0]
 801042a:	e7d7      	b.n	80103dc <_free_r+0x24>
 801042c:	d902      	bls.n	8010434 <_free_r+0x7c>
 801042e:	230c      	movs	r3, #12
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	e7d3      	b.n	80103dc <_free_r+0x24>
 8010434:	6820      	ldr	r0, [r4, #0]
 8010436:	1821      	adds	r1, r4, r0
 8010438:	428a      	cmp	r2, r1
 801043a:	bf04      	itt	eq
 801043c:	6811      	ldreq	r1, [r2, #0]
 801043e:	6852      	ldreq	r2, [r2, #4]
 8010440:	6062      	str	r2, [r4, #4]
 8010442:	bf04      	itt	eq
 8010444:	1809      	addeq	r1, r1, r0
 8010446:	6021      	streq	r1, [r4, #0]
 8010448:	605c      	str	r4, [r3, #4]
 801044a:	e7c7      	b.n	80103dc <_free_r+0x24>
 801044c:	bd38      	pop	{r3, r4, r5, pc}
 801044e:	bf00      	nop
 8010450:	2000066c 	.word	0x2000066c

08010454 <_malloc_r>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	1ccd      	adds	r5, r1, #3
 8010458:	f025 0503 	bic.w	r5, r5, #3
 801045c:	3508      	adds	r5, #8
 801045e:	2d0c      	cmp	r5, #12
 8010460:	bf38      	it	cc
 8010462:	250c      	movcc	r5, #12
 8010464:	2d00      	cmp	r5, #0
 8010466:	4606      	mov	r6, r0
 8010468:	db01      	blt.n	801046e <_malloc_r+0x1a>
 801046a:	42a9      	cmp	r1, r5
 801046c:	d903      	bls.n	8010476 <_malloc_r+0x22>
 801046e:	230c      	movs	r3, #12
 8010470:	6033      	str	r3, [r6, #0]
 8010472:	2000      	movs	r0, #0
 8010474:	bd70      	pop	{r4, r5, r6, pc}
 8010476:	f000 fd6b 	bl	8010f50 <__malloc_lock>
 801047a:	4a21      	ldr	r2, [pc, #132]	; (8010500 <_malloc_r+0xac>)
 801047c:	6814      	ldr	r4, [r2, #0]
 801047e:	4621      	mov	r1, r4
 8010480:	b991      	cbnz	r1, 80104a8 <_malloc_r+0x54>
 8010482:	4c20      	ldr	r4, [pc, #128]	; (8010504 <_malloc_r+0xb0>)
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	b91b      	cbnz	r3, 8010490 <_malloc_r+0x3c>
 8010488:	4630      	mov	r0, r6
 801048a:	f000 fb05 	bl	8010a98 <_sbrk_r>
 801048e:	6020      	str	r0, [r4, #0]
 8010490:	4629      	mov	r1, r5
 8010492:	4630      	mov	r0, r6
 8010494:	f000 fb00 	bl	8010a98 <_sbrk_r>
 8010498:	1c43      	adds	r3, r0, #1
 801049a:	d124      	bne.n	80104e6 <_malloc_r+0x92>
 801049c:	230c      	movs	r3, #12
 801049e:	6033      	str	r3, [r6, #0]
 80104a0:	4630      	mov	r0, r6
 80104a2:	f000 fd56 	bl	8010f52 <__malloc_unlock>
 80104a6:	e7e4      	b.n	8010472 <_malloc_r+0x1e>
 80104a8:	680b      	ldr	r3, [r1, #0]
 80104aa:	1b5b      	subs	r3, r3, r5
 80104ac:	d418      	bmi.n	80104e0 <_malloc_r+0x8c>
 80104ae:	2b0b      	cmp	r3, #11
 80104b0:	d90f      	bls.n	80104d2 <_malloc_r+0x7e>
 80104b2:	600b      	str	r3, [r1, #0]
 80104b4:	50cd      	str	r5, [r1, r3]
 80104b6:	18cc      	adds	r4, r1, r3
 80104b8:	4630      	mov	r0, r6
 80104ba:	f000 fd4a 	bl	8010f52 <__malloc_unlock>
 80104be:	f104 000b 	add.w	r0, r4, #11
 80104c2:	1d23      	adds	r3, r4, #4
 80104c4:	f020 0007 	bic.w	r0, r0, #7
 80104c8:	1ac3      	subs	r3, r0, r3
 80104ca:	d0d3      	beq.n	8010474 <_malloc_r+0x20>
 80104cc:	425a      	negs	r2, r3
 80104ce:	50e2      	str	r2, [r4, r3]
 80104d0:	e7d0      	b.n	8010474 <_malloc_r+0x20>
 80104d2:	428c      	cmp	r4, r1
 80104d4:	684b      	ldr	r3, [r1, #4]
 80104d6:	bf16      	itet	ne
 80104d8:	6063      	strne	r3, [r4, #4]
 80104da:	6013      	streq	r3, [r2, #0]
 80104dc:	460c      	movne	r4, r1
 80104de:	e7eb      	b.n	80104b8 <_malloc_r+0x64>
 80104e0:	460c      	mov	r4, r1
 80104e2:	6849      	ldr	r1, [r1, #4]
 80104e4:	e7cc      	b.n	8010480 <_malloc_r+0x2c>
 80104e6:	1cc4      	adds	r4, r0, #3
 80104e8:	f024 0403 	bic.w	r4, r4, #3
 80104ec:	42a0      	cmp	r0, r4
 80104ee:	d005      	beq.n	80104fc <_malloc_r+0xa8>
 80104f0:	1a21      	subs	r1, r4, r0
 80104f2:	4630      	mov	r0, r6
 80104f4:	f000 fad0 	bl	8010a98 <_sbrk_r>
 80104f8:	3001      	adds	r0, #1
 80104fa:	d0cf      	beq.n	801049c <_malloc_r+0x48>
 80104fc:	6025      	str	r5, [r4, #0]
 80104fe:	e7db      	b.n	80104b8 <_malloc_r+0x64>
 8010500:	2000066c 	.word	0x2000066c
 8010504:	20000670 	.word	0x20000670

08010508 <__sfputc_r>:
 8010508:	6893      	ldr	r3, [r2, #8]
 801050a:	3b01      	subs	r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	b410      	push	{r4}
 8010510:	6093      	str	r3, [r2, #8]
 8010512:	da08      	bge.n	8010526 <__sfputc_r+0x1e>
 8010514:	6994      	ldr	r4, [r2, #24]
 8010516:	42a3      	cmp	r3, r4
 8010518:	db01      	blt.n	801051e <__sfputc_r+0x16>
 801051a:	290a      	cmp	r1, #10
 801051c:	d103      	bne.n	8010526 <__sfputc_r+0x1e>
 801051e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010522:	f000 bb0d 	b.w	8010b40 <__swbuf_r>
 8010526:	6813      	ldr	r3, [r2, #0]
 8010528:	1c58      	adds	r0, r3, #1
 801052a:	6010      	str	r0, [r2, #0]
 801052c:	7019      	strb	r1, [r3, #0]
 801052e:	4608      	mov	r0, r1
 8010530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010534:	4770      	bx	lr

08010536 <__sfputs_r>:
 8010536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010538:	4606      	mov	r6, r0
 801053a:	460f      	mov	r7, r1
 801053c:	4614      	mov	r4, r2
 801053e:	18d5      	adds	r5, r2, r3
 8010540:	42ac      	cmp	r4, r5
 8010542:	d101      	bne.n	8010548 <__sfputs_r+0x12>
 8010544:	2000      	movs	r0, #0
 8010546:	e007      	b.n	8010558 <__sfputs_r+0x22>
 8010548:	463a      	mov	r2, r7
 801054a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801054e:	4630      	mov	r0, r6
 8010550:	f7ff ffda 	bl	8010508 <__sfputc_r>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d1f3      	bne.n	8010540 <__sfputs_r+0xa>
 8010558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801055c <_vfiprintf_r>:
 801055c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010560:	460c      	mov	r4, r1
 8010562:	b09d      	sub	sp, #116	; 0x74
 8010564:	4617      	mov	r7, r2
 8010566:	461d      	mov	r5, r3
 8010568:	4606      	mov	r6, r0
 801056a:	b118      	cbz	r0, 8010574 <_vfiprintf_r+0x18>
 801056c:	6983      	ldr	r3, [r0, #24]
 801056e:	b90b      	cbnz	r3, 8010574 <_vfiprintf_r+0x18>
 8010570:	f7ff fe90 	bl	8010294 <__sinit>
 8010574:	4b7c      	ldr	r3, [pc, #496]	; (8010768 <_vfiprintf_r+0x20c>)
 8010576:	429c      	cmp	r4, r3
 8010578:	d158      	bne.n	801062c <_vfiprintf_r+0xd0>
 801057a:	6874      	ldr	r4, [r6, #4]
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	0718      	lsls	r0, r3, #28
 8010580:	d55e      	bpl.n	8010640 <_vfiprintf_r+0xe4>
 8010582:	6923      	ldr	r3, [r4, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d05b      	beq.n	8010640 <_vfiprintf_r+0xe4>
 8010588:	2300      	movs	r3, #0
 801058a:	9309      	str	r3, [sp, #36]	; 0x24
 801058c:	2320      	movs	r3, #32
 801058e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010592:	2330      	movs	r3, #48	; 0x30
 8010594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010598:	9503      	str	r5, [sp, #12]
 801059a:	f04f 0b01 	mov.w	fp, #1
 801059e:	46b8      	mov	r8, r7
 80105a0:	4645      	mov	r5, r8
 80105a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80105a6:	b10b      	cbz	r3, 80105ac <_vfiprintf_r+0x50>
 80105a8:	2b25      	cmp	r3, #37	; 0x25
 80105aa:	d154      	bne.n	8010656 <_vfiprintf_r+0xfa>
 80105ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80105b0:	d00b      	beq.n	80105ca <_vfiprintf_r+0x6e>
 80105b2:	4653      	mov	r3, sl
 80105b4:	463a      	mov	r2, r7
 80105b6:	4621      	mov	r1, r4
 80105b8:	4630      	mov	r0, r6
 80105ba:	f7ff ffbc 	bl	8010536 <__sfputs_r>
 80105be:	3001      	adds	r0, #1
 80105c0:	f000 80c2 	beq.w	8010748 <_vfiprintf_r+0x1ec>
 80105c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c6:	4453      	add	r3, sl
 80105c8:	9309      	str	r3, [sp, #36]	; 0x24
 80105ca:	f898 3000 	ldrb.w	r3, [r8]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 80ba 	beq.w	8010748 <_vfiprintf_r+0x1ec>
 80105d4:	2300      	movs	r3, #0
 80105d6:	f04f 32ff 	mov.w	r2, #4294967295
 80105da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	9307      	str	r3, [sp, #28]
 80105e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105e6:	931a      	str	r3, [sp, #104]	; 0x68
 80105e8:	46a8      	mov	r8, r5
 80105ea:	2205      	movs	r2, #5
 80105ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80105f0:	485e      	ldr	r0, [pc, #376]	; (801076c <_vfiprintf_r+0x210>)
 80105f2:	f7ef fe05 	bl	8000200 <memchr>
 80105f6:	9b04      	ldr	r3, [sp, #16]
 80105f8:	bb78      	cbnz	r0, 801065a <_vfiprintf_r+0xfe>
 80105fa:	06d9      	lsls	r1, r3, #27
 80105fc:	bf44      	itt	mi
 80105fe:	2220      	movmi	r2, #32
 8010600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010604:	071a      	lsls	r2, r3, #28
 8010606:	bf44      	itt	mi
 8010608:	222b      	movmi	r2, #43	; 0x2b
 801060a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801060e:	782a      	ldrb	r2, [r5, #0]
 8010610:	2a2a      	cmp	r2, #42	; 0x2a
 8010612:	d02a      	beq.n	801066a <_vfiprintf_r+0x10e>
 8010614:	9a07      	ldr	r2, [sp, #28]
 8010616:	46a8      	mov	r8, r5
 8010618:	2000      	movs	r0, #0
 801061a:	250a      	movs	r5, #10
 801061c:	4641      	mov	r1, r8
 801061e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010622:	3b30      	subs	r3, #48	; 0x30
 8010624:	2b09      	cmp	r3, #9
 8010626:	d969      	bls.n	80106fc <_vfiprintf_r+0x1a0>
 8010628:	b360      	cbz	r0, 8010684 <_vfiprintf_r+0x128>
 801062a:	e024      	b.n	8010676 <_vfiprintf_r+0x11a>
 801062c:	4b50      	ldr	r3, [pc, #320]	; (8010770 <_vfiprintf_r+0x214>)
 801062e:	429c      	cmp	r4, r3
 8010630:	d101      	bne.n	8010636 <_vfiprintf_r+0xda>
 8010632:	68b4      	ldr	r4, [r6, #8]
 8010634:	e7a2      	b.n	801057c <_vfiprintf_r+0x20>
 8010636:	4b4f      	ldr	r3, [pc, #316]	; (8010774 <_vfiprintf_r+0x218>)
 8010638:	429c      	cmp	r4, r3
 801063a:	bf08      	it	eq
 801063c:	68f4      	ldreq	r4, [r6, #12]
 801063e:	e79d      	b.n	801057c <_vfiprintf_r+0x20>
 8010640:	4621      	mov	r1, r4
 8010642:	4630      	mov	r0, r6
 8010644:	f000 fae0 	bl	8010c08 <__swsetup_r>
 8010648:	2800      	cmp	r0, #0
 801064a:	d09d      	beq.n	8010588 <_vfiprintf_r+0x2c>
 801064c:	f04f 30ff 	mov.w	r0, #4294967295
 8010650:	b01d      	add	sp, #116	; 0x74
 8010652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010656:	46a8      	mov	r8, r5
 8010658:	e7a2      	b.n	80105a0 <_vfiprintf_r+0x44>
 801065a:	4a44      	ldr	r2, [pc, #272]	; (801076c <_vfiprintf_r+0x210>)
 801065c:	1a80      	subs	r0, r0, r2
 801065e:	fa0b f000 	lsl.w	r0, fp, r0
 8010662:	4318      	orrs	r0, r3
 8010664:	9004      	str	r0, [sp, #16]
 8010666:	4645      	mov	r5, r8
 8010668:	e7be      	b.n	80105e8 <_vfiprintf_r+0x8c>
 801066a:	9a03      	ldr	r2, [sp, #12]
 801066c:	1d11      	adds	r1, r2, #4
 801066e:	6812      	ldr	r2, [r2, #0]
 8010670:	9103      	str	r1, [sp, #12]
 8010672:	2a00      	cmp	r2, #0
 8010674:	db01      	blt.n	801067a <_vfiprintf_r+0x11e>
 8010676:	9207      	str	r2, [sp, #28]
 8010678:	e004      	b.n	8010684 <_vfiprintf_r+0x128>
 801067a:	4252      	negs	r2, r2
 801067c:	f043 0302 	orr.w	r3, r3, #2
 8010680:	9207      	str	r2, [sp, #28]
 8010682:	9304      	str	r3, [sp, #16]
 8010684:	f898 3000 	ldrb.w	r3, [r8]
 8010688:	2b2e      	cmp	r3, #46	; 0x2e
 801068a:	d10e      	bne.n	80106aa <_vfiprintf_r+0x14e>
 801068c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010690:	2b2a      	cmp	r3, #42	; 0x2a
 8010692:	d138      	bne.n	8010706 <_vfiprintf_r+0x1aa>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	1d1a      	adds	r2, r3, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	9203      	str	r2, [sp, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	bfb8      	it	lt
 80106a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80106a4:	f108 0802 	add.w	r8, r8, #2
 80106a8:	9305      	str	r3, [sp, #20]
 80106aa:	4d33      	ldr	r5, [pc, #204]	; (8010778 <_vfiprintf_r+0x21c>)
 80106ac:	f898 1000 	ldrb.w	r1, [r8]
 80106b0:	2203      	movs	r2, #3
 80106b2:	4628      	mov	r0, r5
 80106b4:	f7ef fda4 	bl	8000200 <memchr>
 80106b8:	b140      	cbz	r0, 80106cc <_vfiprintf_r+0x170>
 80106ba:	2340      	movs	r3, #64	; 0x40
 80106bc:	1b40      	subs	r0, r0, r5
 80106be:	fa03 f000 	lsl.w	r0, r3, r0
 80106c2:	9b04      	ldr	r3, [sp, #16]
 80106c4:	4303      	orrs	r3, r0
 80106c6:	f108 0801 	add.w	r8, r8, #1
 80106ca:	9304      	str	r3, [sp, #16]
 80106cc:	f898 1000 	ldrb.w	r1, [r8]
 80106d0:	482a      	ldr	r0, [pc, #168]	; (801077c <_vfiprintf_r+0x220>)
 80106d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106d6:	2206      	movs	r2, #6
 80106d8:	f108 0701 	add.w	r7, r8, #1
 80106dc:	f7ef fd90 	bl	8000200 <memchr>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d037      	beq.n	8010754 <_vfiprintf_r+0x1f8>
 80106e4:	4b26      	ldr	r3, [pc, #152]	; (8010780 <_vfiprintf_r+0x224>)
 80106e6:	bb1b      	cbnz	r3, 8010730 <_vfiprintf_r+0x1d4>
 80106e8:	9b03      	ldr	r3, [sp, #12]
 80106ea:	3307      	adds	r3, #7
 80106ec:	f023 0307 	bic.w	r3, r3, #7
 80106f0:	3308      	adds	r3, #8
 80106f2:	9303      	str	r3, [sp, #12]
 80106f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f6:	444b      	add	r3, r9
 80106f8:	9309      	str	r3, [sp, #36]	; 0x24
 80106fa:	e750      	b.n	801059e <_vfiprintf_r+0x42>
 80106fc:	fb05 3202 	mla	r2, r5, r2, r3
 8010700:	2001      	movs	r0, #1
 8010702:	4688      	mov	r8, r1
 8010704:	e78a      	b.n	801061c <_vfiprintf_r+0xc0>
 8010706:	2300      	movs	r3, #0
 8010708:	f108 0801 	add.w	r8, r8, #1
 801070c:	9305      	str	r3, [sp, #20]
 801070e:	4619      	mov	r1, r3
 8010710:	250a      	movs	r5, #10
 8010712:	4640      	mov	r0, r8
 8010714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010718:	3a30      	subs	r2, #48	; 0x30
 801071a:	2a09      	cmp	r2, #9
 801071c:	d903      	bls.n	8010726 <_vfiprintf_r+0x1ca>
 801071e:	2b00      	cmp	r3, #0
 8010720:	d0c3      	beq.n	80106aa <_vfiprintf_r+0x14e>
 8010722:	9105      	str	r1, [sp, #20]
 8010724:	e7c1      	b.n	80106aa <_vfiprintf_r+0x14e>
 8010726:	fb05 2101 	mla	r1, r5, r1, r2
 801072a:	2301      	movs	r3, #1
 801072c:	4680      	mov	r8, r0
 801072e:	e7f0      	b.n	8010712 <_vfiprintf_r+0x1b6>
 8010730:	ab03      	add	r3, sp, #12
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	4622      	mov	r2, r4
 8010736:	4b13      	ldr	r3, [pc, #76]	; (8010784 <_vfiprintf_r+0x228>)
 8010738:	a904      	add	r1, sp, #16
 801073a:	4630      	mov	r0, r6
 801073c:	f3af 8000 	nop.w
 8010740:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010744:	4681      	mov	r9, r0
 8010746:	d1d5      	bne.n	80106f4 <_vfiprintf_r+0x198>
 8010748:	89a3      	ldrh	r3, [r4, #12]
 801074a:	065b      	lsls	r3, r3, #25
 801074c:	f53f af7e 	bmi.w	801064c <_vfiprintf_r+0xf0>
 8010750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010752:	e77d      	b.n	8010650 <_vfiprintf_r+0xf4>
 8010754:	ab03      	add	r3, sp, #12
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	4622      	mov	r2, r4
 801075a:	4b0a      	ldr	r3, [pc, #40]	; (8010784 <_vfiprintf_r+0x228>)
 801075c:	a904      	add	r1, sp, #16
 801075e:	4630      	mov	r0, r6
 8010760:	f000 f888 	bl	8010874 <_printf_i>
 8010764:	e7ec      	b.n	8010740 <_vfiprintf_r+0x1e4>
 8010766:	bf00      	nop
 8010768:	08014328 	.word	0x08014328
 801076c:	08014368 	.word	0x08014368
 8010770:	08014348 	.word	0x08014348
 8010774:	08014308 	.word	0x08014308
 8010778:	0801436e 	.word	0x0801436e
 801077c:	08014372 	.word	0x08014372
 8010780:	00000000 	.word	0x00000000
 8010784:	08010537 	.word	0x08010537

08010788 <_printf_common>:
 8010788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801078c:	4691      	mov	r9, r2
 801078e:	461f      	mov	r7, r3
 8010790:	688a      	ldr	r2, [r1, #8]
 8010792:	690b      	ldr	r3, [r1, #16]
 8010794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010798:	4293      	cmp	r3, r2
 801079a:	bfb8      	it	lt
 801079c:	4613      	movlt	r3, r2
 801079e:	f8c9 3000 	str.w	r3, [r9]
 80107a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107a6:	4606      	mov	r6, r0
 80107a8:	460c      	mov	r4, r1
 80107aa:	b112      	cbz	r2, 80107b2 <_printf_common+0x2a>
 80107ac:	3301      	adds	r3, #1
 80107ae:	f8c9 3000 	str.w	r3, [r9]
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	0699      	lsls	r1, r3, #26
 80107b6:	bf42      	ittt	mi
 80107b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80107bc:	3302      	addmi	r3, #2
 80107be:	f8c9 3000 	strmi.w	r3, [r9]
 80107c2:	6825      	ldr	r5, [r4, #0]
 80107c4:	f015 0506 	ands.w	r5, r5, #6
 80107c8:	d107      	bne.n	80107da <_printf_common+0x52>
 80107ca:	f104 0a19 	add.w	sl, r4, #25
 80107ce:	68e3      	ldr	r3, [r4, #12]
 80107d0:	f8d9 2000 	ldr.w	r2, [r9]
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	42ab      	cmp	r3, r5
 80107d8:	dc28      	bgt.n	801082c <_printf_common+0xa4>
 80107da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80107de:	6822      	ldr	r2, [r4, #0]
 80107e0:	3300      	adds	r3, #0
 80107e2:	bf18      	it	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	0692      	lsls	r2, r2, #26
 80107e8:	d42d      	bmi.n	8010846 <_printf_common+0xbe>
 80107ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107ee:	4639      	mov	r1, r7
 80107f0:	4630      	mov	r0, r6
 80107f2:	47c0      	blx	r8
 80107f4:	3001      	adds	r0, #1
 80107f6:	d020      	beq.n	801083a <_printf_common+0xb2>
 80107f8:	6823      	ldr	r3, [r4, #0]
 80107fa:	68e5      	ldr	r5, [r4, #12]
 80107fc:	f8d9 2000 	ldr.w	r2, [r9]
 8010800:	f003 0306 	and.w	r3, r3, #6
 8010804:	2b04      	cmp	r3, #4
 8010806:	bf08      	it	eq
 8010808:	1aad      	subeq	r5, r5, r2
 801080a:	68a3      	ldr	r3, [r4, #8]
 801080c:	6922      	ldr	r2, [r4, #16]
 801080e:	bf0c      	ite	eq
 8010810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010814:	2500      	movne	r5, #0
 8010816:	4293      	cmp	r3, r2
 8010818:	bfc4      	itt	gt
 801081a:	1a9b      	subgt	r3, r3, r2
 801081c:	18ed      	addgt	r5, r5, r3
 801081e:	f04f 0900 	mov.w	r9, #0
 8010822:	341a      	adds	r4, #26
 8010824:	454d      	cmp	r5, r9
 8010826:	d11a      	bne.n	801085e <_printf_common+0xd6>
 8010828:	2000      	movs	r0, #0
 801082a:	e008      	b.n	801083e <_printf_common+0xb6>
 801082c:	2301      	movs	r3, #1
 801082e:	4652      	mov	r2, sl
 8010830:	4639      	mov	r1, r7
 8010832:	4630      	mov	r0, r6
 8010834:	47c0      	blx	r8
 8010836:	3001      	adds	r0, #1
 8010838:	d103      	bne.n	8010842 <_printf_common+0xba>
 801083a:	f04f 30ff 	mov.w	r0, #4294967295
 801083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010842:	3501      	adds	r5, #1
 8010844:	e7c3      	b.n	80107ce <_printf_common+0x46>
 8010846:	18e1      	adds	r1, r4, r3
 8010848:	1c5a      	adds	r2, r3, #1
 801084a:	2030      	movs	r0, #48	; 0x30
 801084c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010850:	4422      	add	r2, r4
 8010852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010856:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801085a:	3302      	adds	r3, #2
 801085c:	e7c5      	b.n	80107ea <_printf_common+0x62>
 801085e:	2301      	movs	r3, #1
 8010860:	4622      	mov	r2, r4
 8010862:	4639      	mov	r1, r7
 8010864:	4630      	mov	r0, r6
 8010866:	47c0      	blx	r8
 8010868:	3001      	adds	r0, #1
 801086a:	d0e6      	beq.n	801083a <_printf_common+0xb2>
 801086c:	f109 0901 	add.w	r9, r9, #1
 8010870:	e7d8      	b.n	8010824 <_printf_common+0x9c>
	...

08010874 <_printf_i>:
 8010874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010878:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801087c:	460c      	mov	r4, r1
 801087e:	7e09      	ldrb	r1, [r1, #24]
 8010880:	b085      	sub	sp, #20
 8010882:	296e      	cmp	r1, #110	; 0x6e
 8010884:	4617      	mov	r7, r2
 8010886:	4606      	mov	r6, r0
 8010888:	4698      	mov	r8, r3
 801088a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801088c:	f000 80b3 	beq.w	80109f6 <_printf_i+0x182>
 8010890:	d822      	bhi.n	80108d8 <_printf_i+0x64>
 8010892:	2963      	cmp	r1, #99	; 0x63
 8010894:	d036      	beq.n	8010904 <_printf_i+0x90>
 8010896:	d80a      	bhi.n	80108ae <_printf_i+0x3a>
 8010898:	2900      	cmp	r1, #0
 801089a:	f000 80b9 	beq.w	8010a10 <_printf_i+0x19c>
 801089e:	2958      	cmp	r1, #88	; 0x58
 80108a0:	f000 8083 	beq.w	80109aa <_printf_i+0x136>
 80108a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80108ac:	e032      	b.n	8010914 <_printf_i+0xa0>
 80108ae:	2964      	cmp	r1, #100	; 0x64
 80108b0:	d001      	beq.n	80108b6 <_printf_i+0x42>
 80108b2:	2969      	cmp	r1, #105	; 0x69
 80108b4:	d1f6      	bne.n	80108a4 <_printf_i+0x30>
 80108b6:	6820      	ldr	r0, [r4, #0]
 80108b8:	6813      	ldr	r3, [r2, #0]
 80108ba:	0605      	lsls	r5, r0, #24
 80108bc:	f103 0104 	add.w	r1, r3, #4
 80108c0:	d52a      	bpl.n	8010918 <_printf_i+0xa4>
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	6011      	str	r1, [r2, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	da03      	bge.n	80108d2 <_printf_i+0x5e>
 80108ca:	222d      	movs	r2, #45	; 0x2d
 80108cc:	425b      	negs	r3, r3
 80108ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80108d2:	486f      	ldr	r0, [pc, #444]	; (8010a90 <_printf_i+0x21c>)
 80108d4:	220a      	movs	r2, #10
 80108d6:	e039      	b.n	801094c <_printf_i+0xd8>
 80108d8:	2973      	cmp	r1, #115	; 0x73
 80108da:	f000 809d 	beq.w	8010a18 <_printf_i+0x1a4>
 80108de:	d808      	bhi.n	80108f2 <_printf_i+0x7e>
 80108e0:	296f      	cmp	r1, #111	; 0x6f
 80108e2:	d020      	beq.n	8010926 <_printf_i+0xb2>
 80108e4:	2970      	cmp	r1, #112	; 0x70
 80108e6:	d1dd      	bne.n	80108a4 <_printf_i+0x30>
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	f043 0320 	orr.w	r3, r3, #32
 80108ee:	6023      	str	r3, [r4, #0]
 80108f0:	e003      	b.n	80108fa <_printf_i+0x86>
 80108f2:	2975      	cmp	r1, #117	; 0x75
 80108f4:	d017      	beq.n	8010926 <_printf_i+0xb2>
 80108f6:	2978      	cmp	r1, #120	; 0x78
 80108f8:	d1d4      	bne.n	80108a4 <_printf_i+0x30>
 80108fa:	2378      	movs	r3, #120	; 0x78
 80108fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010900:	4864      	ldr	r0, [pc, #400]	; (8010a94 <_printf_i+0x220>)
 8010902:	e055      	b.n	80109b0 <_printf_i+0x13c>
 8010904:	6813      	ldr	r3, [r2, #0]
 8010906:	1d19      	adds	r1, r3, #4
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6011      	str	r1, [r2, #0]
 801090c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010914:	2301      	movs	r3, #1
 8010916:	e08c      	b.n	8010a32 <_printf_i+0x1be>
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	6011      	str	r1, [r2, #0]
 801091c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010920:	bf18      	it	ne
 8010922:	b21b      	sxthne	r3, r3
 8010924:	e7cf      	b.n	80108c6 <_printf_i+0x52>
 8010926:	6813      	ldr	r3, [r2, #0]
 8010928:	6825      	ldr	r5, [r4, #0]
 801092a:	1d18      	adds	r0, r3, #4
 801092c:	6010      	str	r0, [r2, #0]
 801092e:	0628      	lsls	r0, r5, #24
 8010930:	d501      	bpl.n	8010936 <_printf_i+0xc2>
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	e002      	b.n	801093c <_printf_i+0xc8>
 8010936:	0668      	lsls	r0, r5, #25
 8010938:	d5fb      	bpl.n	8010932 <_printf_i+0xbe>
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	4854      	ldr	r0, [pc, #336]	; (8010a90 <_printf_i+0x21c>)
 801093e:	296f      	cmp	r1, #111	; 0x6f
 8010940:	bf14      	ite	ne
 8010942:	220a      	movne	r2, #10
 8010944:	2208      	moveq	r2, #8
 8010946:	2100      	movs	r1, #0
 8010948:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801094c:	6865      	ldr	r5, [r4, #4]
 801094e:	60a5      	str	r5, [r4, #8]
 8010950:	2d00      	cmp	r5, #0
 8010952:	f2c0 8095 	blt.w	8010a80 <_printf_i+0x20c>
 8010956:	6821      	ldr	r1, [r4, #0]
 8010958:	f021 0104 	bic.w	r1, r1, #4
 801095c:	6021      	str	r1, [r4, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d13d      	bne.n	80109de <_printf_i+0x16a>
 8010962:	2d00      	cmp	r5, #0
 8010964:	f040 808e 	bne.w	8010a84 <_printf_i+0x210>
 8010968:	4665      	mov	r5, ip
 801096a:	2a08      	cmp	r2, #8
 801096c:	d10b      	bne.n	8010986 <_printf_i+0x112>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	07db      	lsls	r3, r3, #31
 8010972:	d508      	bpl.n	8010986 <_printf_i+0x112>
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	6862      	ldr	r2, [r4, #4]
 8010978:	429a      	cmp	r2, r3
 801097a:	bfde      	ittt	le
 801097c:	2330      	movle	r3, #48	; 0x30
 801097e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010986:	ebac 0305 	sub.w	r3, ip, r5
 801098a:	6123      	str	r3, [r4, #16]
 801098c:	f8cd 8000 	str.w	r8, [sp]
 8010990:	463b      	mov	r3, r7
 8010992:	aa03      	add	r2, sp, #12
 8010994:	4621      	mov	r1, r4
 8010996:	4630      	mov	r0, r6
 8010998:	f7ff fef6 	bl	8010788 <_printf_common>
 801099c:	3001      	adds	r0, #1
 801099e:	d14d      	bne.n	8010a3c <_printf_i+0x1c8>
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295
 80109a4:	b005      	add	sp, #20
 80109a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109aa:	4839      	ldr	r0, [pc, #228]	; (8010a90 <_printf_i+0x21c>)
 80109ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80109b0:	6813      	ldr	r3, [r2, #0]
 80109b2:	6821      	ldr	r1, [r4, #0]
 80109b4:	1d1d      	adds	r5, r3, #4
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	6015      	str	r5, [r2, #0]
 80109ba:	060a      	lsls	r2, r1, #24
 80109bc:	d50b      	bpl.n	80109d6 <_printf_i+0x162>
 80109be:	07ca      	lsls	r2, r1, #31
 80109c0:	bf44      	itt	mi
 80109c2:	f041 0120 	orrmi.w	r1, r1, #32
 80109c6:	6021      	strmi	r1, [r4, #0]
 80109c8:	b91b      	cbnz	r3, 80109d2 <_printf_i+0x15e>
 80109ca:	6822      	ldr	r2, [r4, #0]
 80109cc:	f022 0220 	bic.w	r2, r2, #32
 80109d0:	6022      	str	r2, [r4, #0]
 80109d2:	2210      	movs	r2, #16
 80109d4:	e7b7      	b.n	8010946 <_printf_i+0xd2>
 80109d6:	064d      	lsls	r5, r1, #25
 80109d8:	bf48      	it	mi
 80109da:	b29b      	uxthmi	r3, r3
 80109dc:	e7ef      	b.n	80109be <_printf_i+0x14a>
 80109de:	4665      	mov	r5, ip
 80109e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80109e4:	fb02 3311 	mls	r3, r2, r1, r3
 80109e8:	5cc3      	ldrb	r3, [r0, r3]
 80109ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80109ee:	460b      	mov	r3, r1
 80109f0:	2900      	cmp	r1, #0
 80109f2:	d1f5      	bne.n	80109e0 <_printf_i+0x16c>
 80109f4:	e7b9      	b.n	801096a <_printf_i+0xf6>
 80109f6:	6813      	ldr	r3, [r2, #0]
 80109f8:	6825      	ldr	r5, [r4, #0]
 80109fa:	6961      	ldr	r1, [r4, #20]
 80109fc:	1d18      	adds	r0, r3, #4
 80109fe:	6010      	str	r0, [r2, #0]
 8010a00:	0628      	lsls	r0, r5, #24
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	d501      	bpl.n	8010a0a <_printf_i+0x196>
 8010a06:	6019      	str	r1, [r3, #0]
 8010a08:	e002      	b.n	8010a10 <_printf_i+0x19c>
 8010a0a:	066a      	lsls	r2, r5, #25
 8010a0c:	d5fb      	bpl.n	8010a06 <_printf_i+0x192>
 8010a0e:	8019      	strh	r1, [r3, #0]
 8010a10:	2300      	movs	r3, #0
 8010a12:	6123      	str	r3, [r4, #16]
 8010a14:	4665      	mov	r5, ip
 8010a16:	e7b9      	b.n	801098c <_printf_i+0x118>
 8010a18:	6813      	ldr	r3, [r2, #0]
 8010a1a:	1d19      	adds	r1, r3, #4
 8010a1c:	6011      	str	r1, [r2, #0]
 8010a1e:	681d      	ldr	r5, [r3, #0]
 8010a20:	6862      	ldr	r2, [r4, #4]
 8010a22:	2100      	movs	r1, #0
 8010a24:	4628      	mov	r0, r5
 8010a26:	f7ef fbeb 	bl	8000200 <memchr>
 8010a2a:	b108      	cbz	r0, 8010a30 <_printf_i+0x1bc>
 8010a2c:	1b40      	subs	r0, r0, r5
 8010a2e:	6060      	str	r0, [r4, #4]
 8010a30:	6863      	ldr	r3, [r4, #4]
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	2300      	movs	r3, #0
 8010a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a3a:	e7a7      	b.n	801098c <_printf_i+0x118>
 8010a3c:	6923      	ldr	r3, [r4, #16]
 8010a3e:	462a      	mov	r2, r5
 8010a40:	4639      	mov	r1, r7
 8010a42:	4630      	mov	r0, r6
 8010a44:	47c0      	blx	r8
 8010a46:	3001      	adds	r0, #1
 8010a48:	d0aa      	beq.n	80109a0 <_printf_i+0x12c>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	079b      	lsls	r3, r3, #30
 8010a4e:	d413      	bmi.n	8010a78 <_printf_i+0x204>
 8010a50:	68e0      	ldr	r0, [r4, #12]
 8010a52:	9b03      	ldr	r3, [sp, #12]
 8010a54:	4298      	cmp	r0, r3
 8010a56:	bfb8      	it	lt
 8010a58:	4618      	movlt	r0, r3
 8010a5a:	e7a3      	b.n	80109a4 <_printf_i+0x130>
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	464a      	mov	r2, r9
 8010a60:	4639      	mov	r1, r7
 8010a62:	4630      	mov	r0, r6
 8010a64:	47c0      	blx	r8
 8010a66:	3001      	adds	r0, #1
 8010a68:	d09a      	beq.n	80109a0 <_printf_i+0x12c>
 8010a6a:	3501      	adds	r5, #1
 8010a6c:	68e3      	ldr	r3, [r4, #12]
 8010a6e:	9a03      	ldr	r2, [sp, #12]
 8010a70:	1a9b      	subs	r3, r3, r2
 8010a72:	42ab      	cmp	r3, r5
 8010a74:	dcf2      	bgt.n	8010a5c <_printf_i+0x1e8>
 8010a76:	e7eb      	b.n	8010a50 <_printf_i+0x1dc>
 8010a78:	2500      	movs	r5, #0
 8010a7a:	f104 0919 	add.w	r9, r4, #25
 8010a7e:	e7f5      	b.n	8010a6c <_printf_i+0x1f8>
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d1ac      	bne.n	80109de <_printf_i+0x16a>
 8010a84:	7803      	ldrb	r3, [r0, #0]
 8010a86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a8e:	e76c      	b.n	801096a <_printf_i+0xf6>
 8010a90:	08014379 	.word	0x08014379
 8010a94:	0801438a 	.word	0x0801438a

08010a98 <_sbrk_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4c06      	ldr	r4, [pc, #24]	; (8010ab4 <_sbrk_r+0x1c>)
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	4608      	mov	r0, r1
 8010aa2:	6023      	str	r3, [r4, #0]
 8010aa4:	f7ef ffda 	bl	8000a5c <_sbrk>
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	d102      	bne.n	8010ab2 <_sbrk_r+0x1a>
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	b103      	cbz	r3, 8010ab2 <_sbrk_r+0x1a>
 8010ab0:	602b      	str	r3, [r5, #0]
 8010ab2:	bd38      	pop	{r3, r4, r5, pc}
 8010ab4:	20006d14 	.word	0x20006d14

08010ab8 <__sread>:
 8010ab8:	b510      	push	{r4, lr}
 8010aba:	460c      	mov	r4, r1
 8010abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac0:	f000 fa48 	bl	8010f54 <_read_r>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	bfab      	itete	ge
 8010ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010aca:	89a3      	ldrhlt	r3, [r4, #12]
 8010acc:	181b      	addge	r3, r3, r0
 8010ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ad2:	bfac      	ite	ge
 8010ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ad6:	81a3      	strhlt	r3, [r4, #12]
 8010ad8:	bd10      	pop	{r4, pc}

08010ada <__swrite>:
 8010ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ade:	461f      	mov	r7, r3
 8010ae0:	898b      	ldrh	r3, [r1, #12]
 8010ae2:	05db      	lsls	r3, r3, #23
 8010ae4:	4605      	mov	r5, r0
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	4616      	mov	r6, r2
 8010aea:	d505      	bpl.n	8010af8 <__swrite+0x1e>
 8010aec:	2302      	movs	r3, #2
 8010aee:	2200      	movs	r2, #0
 8010af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010af4:	f000 f9b6 	bl	8010e64 <_lseek_r>
 8010af8:	89a3      	ldrh	r3, [r4, #12]
 8010afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b02:	81a3      	strh	r3, [r4, #12]
 8010b04:	4632      	mov	r2, r6
 8010b06:	463b      	mov	r3, r7
 8010b08:	4628      	mov	r0, r5
 8010b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0e:	f000 b869 	b.w	8010be4 <_write_r>

08010b12 <__sseek>:
 8010b12:	b510      	push	{r4, lr}
 8010b14:	460c      	mov	r4, r1
 8010b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b1a:	f000 f9a3 	bl	8010e64 <_lseek_r>
 8010b1e:	1c43      	adds	r3, r0, #1
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	bf15      	itete	ne
 8010b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b2e:	81a3      	strheq	r3, [r4, #12]
 8010b30:	bf18      	it	ne
 8010b32:	81a3      	strhne	r3, [r4, #12]
 8010b34:	bd10      	pop	{r4, pc}

08010b36 <__sclose>:
 8010b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b3a:	f000 b8d3 	b.w	8010ce4 <_close_r>
	...

08010b40 <__swbuf_r>:
 8010b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b42:	460e      	mov	r6, r1
 8010b44:	4614      	mov	r4, r2
 8010b46:	4605      	mov	r5, r0
 8010b48:	b118      	cbz	r0, 8010b52 <__swbuf_r+0x12>
 8010b4a:	6983      	ldr	r3, [r0, #24]
 8010b4c:	b90b      	cbnz	r3, 8010b52 <__swbuf_r+0x12>
 8010b4e:	f7ff fba1 	bl	8010294 <__sinit>
 8010b52:	4b21      	ldr	r3, [pc, #132]	; (8010bd8 <__swbuf_r+0x98>)
 8010b54:	429c      	cmp	r4, r3
 8010b56:	d12a      	bne.n	8010bae <__swbuf_r+0x6e>
 8010b58:	686c      	ldr	r4, [r5, #4]
 8010b5a:	69a3      	ldr	r3, [r4, #24]
 8010b5c:	60a3      	str	r3, [r4, #8]
 8010b5e:	89a3      	ldrh	r3, [r4, #12]
 8010b60:	071a      	lsls	r2, r3, #28
 8010b62:	d52e      	bpl.n	8010bc2 <__swbuf_r+0x82>
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	b363      	cbz	r3, 8010bc2 <__swbuf_r+0x82>
 8010b68:	6923      	ldr	r3, [r4, #16]
 8010b6a:	6820      	ldr	r0, [r4, #0]
 8010b6c:	1ac0      	subs	r0, r0, r3
 8010b6e:	6963      	ldr	r3, [r4, #20]
 8010b70:	b2f6      	uxtb	r6, r6
 8010b72:	4283      	cmp	r3, r0
 8010b74:	4637      	mov	r7, r6
 8010b76:	dc04      	bgt.n	8010b82 <__swbuf_r+0x42>
 8010b78:	4621      	mov	r1, r4
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f000 f948 	bl	8010e10 <_fflush_r>
 8010b80:	bb28      	cbnz	r0, 8010bce <__swbuf_r+0x8e>
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	60a3      	str	r3, [r4, #8]
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	6022      	str	r2, [r4, #0]
 8010b8e:	701e      	strb	r6, [r3, #0]
 8010b90:	6963      	ldr	r3, [r4, #20]
 8010b92:	3001      	adds	r0, #1
 8010b94:	4283      	cmp	r3, r0
 8010b96:	d004      	beq.n	8010ba2 <__swbuf_r+0x62>
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	07db      	lsls	r3, r3, #31
 8010b9c:	d519      	bpl.n	8010bd2 <__swbuf_r+0x92>
 8010b9e:	2e0a      	cmp	r6, #10
 8010ba0:	d117      	bne.n	8010bd2 <__swbuf_r+0x92>
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f000 f933 	bl	8010e10 <_fflush_r>
 8010baa:	b190      	cbz	r0, 8010bd2 <__swbuf_r+0x92>
 8010bac:	e00f      	b.n	8010bce <__swbuf_r+0x8e>
 8010bae:	4b0b      	ldr	r3, [pc, #44]	; (8010bdc <__swbuf_r+0x9c>)
 8010bb0:	429c      	cmp	r4, r3
 8010bb2:	d101      	bne.n	8010bb8 <__swbuf_r+0x78>
 8010bb4:	68ac      	ldr	r4, [r5, #8]
 8010bb6:	e7d0      	b.n	8010b5a <__swbuf_r+0x1a>
 8010bb8:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <__swbuf_r+0xa0>)
 8010bba:	429c      	cmp	r4, r3
 8010bbc:	bf08      	it	eq
 8010bbe:	68ec      	ldreq	r4, [r5, #12]
 8010bc0:	e7cb      	b.n	8010b5a <__swbuf_r+0x1a>
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	f000 f81f 	bl	8010c08 <__swsetup_r>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d0cc      	beq.n	8010b68 <__swbuf_r+0x28>
 8010bce:	f04f 37ff 	mov.w	r7, #4294967295
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	08014328 	.word	0x08014328
 8010bdc:	08014348 	.word	0x08014348
 8010be0:	08014308 	.word	0x08014308

08010be4 <_write_r>:
 8010be4:	b538      	push	{r3, r4, r5, lr}
 8010be6:	4c07      	ldr	r4, [pc, #28]	; (8010c04 <_write_r+0x20>)
 8010be8:	4605      	mov	r5, r0
 8010bea:	4608      	mov	r0, r1
 8010bec:	4611      	mov	r1, r2
 8010bee:	2200      	movs	r2, #0
 8010bf0:	6022      	str	r2, [r4, #0]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f7ef fee1 	bl	80009ba <_write>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d102      	bne.n	8010c02 <_write_r+0x1e>
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	b103      	cbz	r3, 8010c02 <_write_r+0x1e>
 8010c00:	602b      	str	r3, [r5, #0]
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
 8010c04:	20006d14 	.word	0x20006d14

08010c08 <__swsetup_r>:
 8010c08:	4b32      	ldr	r3, [pc, #200]	; (8010cd4 <__swsetup_r+0xcc>)
 8010c0a:	b570      	push	{r4, r5, r6, lr}
 8010c0c:	681d      	ldr	r5, [r3, #0]
 8010c0e:	4606      	mov	r6, r0
 8010c10:	460c      	mov	r4, r1
 8010c12:	b125      	cbz	r5, 8010c1e <__swsetup_r+0x16>
 8010c14:	69ab      	ldr	r3, [r5, #24]
 8010c16:	b913      	cbnz	r3, 8010c1e <__swsetup_r+0x16>
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f7ff fb3b 	bl	8010294 <__sinit>
 8010c1e:	4b2e      	ldr	r3, [pc, #184]	; (8010cd8 <__swsetup_r+0xd0>)
 8010c20:	429c      	cmp	r4, r3
 8010c22:	d10f      	bne.n	8010c44 <__swsetup_r+0x3c>
 8010c24:	686c      	ldr	r4, [r5, #4]
 8010c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	0715      	lsls	r5, r2, #28
 8010c2e:	d42c      	bmi.n	8010c8a <__swsetup_r+0x82>
 8010c30:	06d0      	lsls	r0, r2, #27
 8010c32:	d411      	bmi.n	8010c58 <__swsetup_r+0x50>
 8010c34:	2209      	movs	r2, #9
 8010c36:	6032      	str	r2, [r6, #0]
 8010c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c3c:	81a3      	strh	r3, [r4, #12]
 8010c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c42:	e03e      	b.n	8010cc2 <__swsetup_r+0xba>
 8010c44:	4b25      	ldr	r3, [pc, #148]	; (8010cdc <__swsetup_r+0xd4>)
 8010c46:	429c      	cmp	r4, r3
 8010c48:	d101      	bne.n	8010c4e <__swsetup_r+0x46>
 8010c4a:	68ac      	ldr	r4, [r5, #8]
 8010c4c:	e7eb      	b.n	8010c26 <__swsetup_r+0x1e>
 8010c4e:	4b24      	ldr	r3, [pc, #144]	; (8010ce0 <__swsetup_r+0xd8>)
 8010c50:	429c      	cmp	r4, r3
 8010c52:	bf08      	it	eq
 8010c54:	68ec      	ldreq	r4, [r5, #12]
 8010c56:	e7e6      	b.n	8010c26 <__swsetup_r+0x1e>
 8010c58:	0751      	lsls	r1, r2, #29
 8010c5a:	d512      	bpl.n	8010c82 <__swsetup_r+0x7a>
 8010c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c5e:	b141      	cbz	r1, 8010c72 <__swsetup_r+0x6a>
 8010c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c64:	4299      	cmp	r1, r3
 8010c66:	d002      	beq.n	8010c6e <__swsetup_r+0x66>
 8010c68:	4630      	mov	r0, r6
 8010c6a:	f7ff fba5 	bl	80103b8 <_free_r>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6363      	str	r3, [r4, #52]	; 0x34
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c78:	81a3      	strh	r3, [r4, #12]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	6063      	str	r3, [r4, #4]
 8010c7e:	6923      	ldr	r3, [r4, #16]
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	f043 0308 	orr.w	r3, r3, #8
 8010c88:	81a3      	strh	r3, [r4, #12]
 8010c8a:	6923      	ldr	r3, [r4, #16]
 8010c8c:	b94b      	cbnz	r3, 8010ca2 <__swsetup_r+0x9a>
 8010c8e:	89a3      	ldrh	r3, [r4, #12]
 8010c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c98:	d003      	beq.n	8010ca2 <__swsetup_r+0x9a>
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f000 f917 	bl	8010ed0 <__smakebuf_r>
 8010ca2:	89a2      	ldrh	r2, [r4, #12]
 8010ca4:	f012 0301 	ands.w	r3, r2, #1
 8010ca8:	d00c      	beq.n	8010cc4 <__swsetup_r+0xbc>
 8010caa:	2300      	movs	r3, #0
 8010cac:	60a3      	str	r3, [r4, #8]
 8010cae:	6963      	ldr	r3, [r4, #20]
 8010cb0:	425b      	negs	r3, r3
 8010cb2:	61a3      	str	r3, [r4, #24]
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	b953      	cbnz	r3, 8010cce <__swsetup_r+0xc6>
 8010cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010cc0:	d1ba      	bne.n	8010c38 <__swsetup_r+0x30>
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	0792      	lsls	r2, r2, #30
 8010cc6:	bf58      	it	pl
 8010cc8:	6963      	ldrpl	r3, [r4, #20]
 8010cca:	60a3      	str	r3, [r4, #8]
 8010ccc:	e7f2      	b.n	8010cb4 <__swsetup_r+0xac>
 8010cce:	2000      	movs	r0, #0
 8010cd0:	e7f7      	b.n	8010cc2 <__swsetup_r+0xba>
 8010cd2:	bf00      	nop
 8010cd4:	2000001c 	.word	0x2000001c
 8010cd8:	08014328 	.word	0x08014328
 8010cdc:	08014348 	.word	0x08014348
 8010ce0:	08014308 	.word	0x08014308

08010ce4 <_close_r>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	4c06      	ldr	r4, [pc, #24]	; (8010d00 <_close_r+0x1c>)
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4605      	mov	r5, r0
 8010cec:	4608      	mov	r0, r1
 8010cee:	6023      	str	r3, [r4, #0]
 8010cf0:	f7ef fe7f 	bl	80009f2 <_close>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	d102      	bne.n	8010cfe <_close_r+0x1a>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	b103      	cbz	r3, 8010cfe <_close_r+0x1a>
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	bd38      	pop	{r3, r4, r5, pc}
 8010d00:	20006d14 	.word	0x20006d14

08010d04 <__sflush_r>:
 8010d04:	898a      	ldrh	r2, [r1, #12]
 8010d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	0710      	lsls	r0, r2, #28
 8010d0e:	460c      	mov	r4, r1
 8010d10:	d458      	bmi.n	8010dc4 <__sflush_r+0xc0>
 8010d12:	684b      	ldr	r3, [r1, #4]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dc05      	bgt.n	8010d24 <__sflush_r+0x20>
 8010d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	dc02      	bgt.n	8010d24 <__sflush_r+0x20>
 8010d1e:	2000      	movs	r0, #0
 8010d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d26:	2e00      	cmp	r6, #0
 8010d28:	d0f9      	beq.n	8010d1e <__sflush_r+0x1a>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d30:	682f      	ldr	r7, [r5, #0]
 8010d32:	6a21      	ldr	r1, [r4, #32]
 8010d34:	602b      	str	r3, [r5, #0]
 8010d36:	d032      	beq.n	8010d9e <__sflush_r+0x9a>
 8010d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	075a      	lsls	r2, r3, #29
 8010d3e:	d505      	bpl.n	8010d4c <__sflush_r+0x48>
 8010d40:	6863      	ldr	r3, [r4, #4]
 8010d42:	1ac0      	subs	r0, r0, r3
 8010d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d46:	b10b      	cbz	r3, 8010d4c <__sflush_r+0x48>
 8010d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d4a:	1ac0      	subs	r0, r0, r3
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	4602      	mov	r2, r0
 8010d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d52:	6a21      	ldr	r1, [r4, #32]
 8010d54:	4628      	mov	r0, r5
 8010d56:	47b0      	blx	r6
 8010d58:	1c43      	adds	r3, r0, #1
 8010d5a:	89a3      	ldrh	r3, [r4, #12]
 8010d5c:	d106      	bne.n	8010d6c <__sflush_r+0x68>
 8010d5e:	6829      	ldr	r1, [r5, #0]
 8010d60:	291d      	cmp	r1, #29
 8010d62:	d848      	bhi.n	8010df6 <__sflush_r+0xf2>
 8010d64:	4a29      	ldr	r2, [pc, #164]	; (8010e0c <__sflush_r+0x108>)
 8010d66:	40ca      	lsrs	r2, r1
 8010d68:	07d6      	lsls	r6, r2, #31
 8010d6a:	d544      	bpl.n	8010df6 <__sflush_r+0xf2>
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	6062      	str	r2, [r4, #4]
 8010d70:	04d9      	lsls	r1, r3, #19
 8010d72:	6922      	ldr	r2, [r4, #16]
 8010d74:	6022      	str	r2, [r4, #0]
 8010d76:	d504      	bpl.n	8010d82 <__sflush_r+0x7e>
 8010d78:	1c42      	adds	r2, r0, #1
 8010d7a:	d101      	bne.n	8010d80 <__sflush_r+0x7c>
 8010d7c:	682b      	ldr	r3, [r5, #0]
 8010d7e:	b903      	cbnz	r3, 8010d82 <__sflush_r+0x7e>
 8010d80:	6560      	str	r0, [r4, #84]	; 0x54
 8010d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d84:	602f      	str	r7, [r5, #0]
 8010d86:	2900      	cmp	r1, #0
 8010d88:	d0c9      	beq.n	8010d1e <__sflush_r+0x1a>
 8010d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	d002      	beq.n	8010d98 <__sflush_r+0x94>
 8010d92:	4628      	mov	r0, r5
 8010d94:	f7ff fb10 	bl	80103b8 <_free_r>
 8010d98:	2000      	movs	r0, #0
 8010d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8010d9c:	e7c0      	b.n	8010d20 <__sflush_r+0x1c>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b0      	blx	r6
 8010da4:	1c41      	adds	r1, r0, #1
 8010da6:	d1c8      	bne.n	8010d3a <__sflush_r+0x36>
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d0c5      	beq.n	8010d3a <__sflush_r+0x36>
 8010dae:	2b1d      	cmp	r3, #29
 8010db0:	d001      	beq.n	8010db6 <__sflush_r+0xb2>
 8010db2:	2b16      	cmp	r3, #22
 8010db4:	d101      	bne.n	8010dba <__sflush_r+0xb6>
 8010db6:	602f      	str	r7, [r5, #0]
 8010db8:	e7b1      	b.n	8010d1e <__sflush_r+0x1a>
 8010dba:	89a3      	ldrh	r3, [r4, #12]
 8010dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc0:	81a3      	strh	r3, [r4, #12]
 8010dc2:	e7ad      	b.n	8010d20 <__sflush_r+0x1c>
 8010dc4:	690f      	ldr	r7, [r1, #16]
 8010dc6:	2f00      	cmp	r7, #0
 8010dc8:	d0a9      	beq.n	8010d1e <__sflush_r+0x1a>
 8010dca:	0793      	lsls	r3, r2, #30
 8010dcc:	680e      	ldr	r6, [r1, #0]
 8010dce:	bf08      	it	eq
 8010dd0:	694b      	ldreq	r3, [r1, #20]
 8010dd2:	600f      	str	r7, [r1, #0]
 8010dd4:	bf18      	it	ne
 8010dd6:	2300      	movne	r3, #0
 8010dd8:	eba6 0807 	sub.w	r8, r6, r7
 8010ddc:	608b      	str	r3, [r1, #8]
 8010dde:	f1b8 0f00 	cmp.w	r8, #0
 8010de2:	dd9c      	ble.n	8010d1e <__sflush_r+0x1a>
 8010de4:	4643      	mov	r3, r8
 8010de6:	463a      	mov	r2, r7
 8010de8:	6a21      	ldr	r1, [r4, #32]
 8010dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dec:	4628      	mov	r0, r5
 8010dee:	47b0      	blx	r6
 8010df0:	2800      	cmp	r0, #0
 8010df2:	dc06      	bgt.n	8010e02 <__sflush_r+0xfe>
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dfa:	81a3      	strh	r3, [r4, #12]
 8010dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010e00:	e78e      	b.n	8010d20 <__sflush_r+0x1c>
 8010e02:	4407      	add	r7, r0
 8010e04:	eba8 0800 	sub.w	r8, r8, r0
 8010e08:	e7e9      	b.n	8010dde <__sflush_r+0xda>
 8010e0a:	bf00      	nop
 8010e0c:	20400001 	.word	0x20400001

08010e10 <_fflush_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	690b      	ldr	r3, [r1, #16]
 8010e14:	4605      	mov	r5, r0
 8010e16:	460c      	mov	r4, r1
 8010e18:	b1db      	cbz	r3, 8010e52 <_fflush_r+0x42>
 8010e1a:	b118      	cbz	r0, 8010e24 <_fflush_r+0x14>
 8010e1c:	6983      	ldr	r3, [r0, #24]
 8010e1e:	b90b      	cbnz	r3, 8010e24 <_fflush_r+0x14>
 8010e20:	f7ff fa38 	bl	8010294 <__sinit>
 8010e24:	4b0c      	ldr	r3, [pc, #48]	; (8010e58 <_fflush_r+0x48>)
 8010e26:	429c      	cmp	r4, r3
 8010e28:	d109      	bne.n	8010e3e <_fflush_r+0x2e>
 8010e2a:	686c      	ldr	r4, [r5, #4]
 8010e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e30:	b17b      	cbz	r3, 8010e52 <_fflush_r+0x42>
 8010e32:	4621      	mov	r1, r4
 8010e34:	4628      	mov	r0, r5
 8010e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e3a:	f7ff bf63 	b.w	8010d04 <__sflush_r>
 8010e3e:	4b07      	ldr	r3, [pc, #28]	; (8010e5c <_fflush_r+0x4c>)
 8010e40:	429c      	cmp	r4, r3
 8010e42:	d101      	bne.n	8010e48 <_fflush_r+0x38>
 8010e44:	68ac      	ldr	r4, [r5, #8]
 8010e46:	e7f1      	b.n	8010e2c <_fflush_r+0x1c>
 8010e48:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <_fflush_r+0x50>)
 8010e4a:	429c      	cmp	r4, r3
 8010e4c:	bf08      	it	eq
 8010e4e:	68ec      	ldreq	r4, [r5, #12]
 8010e50:	e7ec      	b.n	8010e2c <_fflush_r+0x1c>
 8010e52:	2000      	movs	r0, #0
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	bf00      	nop
 8010e58:	08014328 	.word	0x08014328
 8010e5c:	08014348 	.word	0x08014348
 8010e60:	08014308 	.word	0x08014308

08010e64 <_lseek_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4c07      	ldr	r4, [pc, #28]	; (8010e84 <_lseek_r+0x20>)
 8010e68:	4605      	mov	r5, r0
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	6022      	str	r2, [r4, #0]
 8010e72:	461a      	mov	r2, r3
 8010e74:	f7ef fde4 	bl	8000a40 <_lseek>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_lseek_r+0x1e>
 8010e7c:	6823      	ldr	r3, [r4, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_lseek_r+0x1e>
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20006d14 	.word	0x20006d14

08010e88 <__swhatbuf_r>:
 8010e88:	b570      	push	{r4, r5, r6, lr}
 8010e8a:	460e      	mov	r6, r1
 8010e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e90:	2900      	cmp	r1, #0
 8010e92:	b096      	sub	sp, #88	; 0x58
 8010e94:	4614      	mov	r4, r2
 8010e96:	461d      	mov	r5, r3
 8010e98:	da07      	bge.n	8010eaa <__swhatbuf_r+0x22>
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	602b      	str	r3, [r5, #0]
 8010e9e:	89b3      	ldrh	r3, [r6, #12]
 8010ea0:	061a      	lsls	r2, r3, #24
 8010ea2:	d410      	bmi.n	8010ec6 <__swhatbuf_r+0x3e>
 8010ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ea8:	e00e      	b.n	8010ec8 <__swhatbuf_r+0x40>
 8010eaa:	466a      	mov	r2, sp
 8010eac:	f000 f864 	bl	8010f78 <_fstat_r>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	dbf2      	blt.n	8010e9a <__swhatbuf_r+0x12>
 8010eb4:	9a01      	ldr	r2, [sp, #4]
 8010eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010eba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ebe:	425a      	negs	r2, r3
 8010ec0:	415a      	adcs	r2, r3
 8010ec2:	602a      	str	r2, [r5, #0]
 8010ec4:	e7ee      	b.n	8010ea4 <__swhatbuf_r+0x1c>
 8010ec6:	2340      	movs	r3, #64	; 0x40
 8010ec8:	2000      	movs	r0, #0
 8010eca:	6023      	str	r3, [r4, #0]
 8010ecc:	b016      	add	sp, #88	; 0x58
 8010ece:	bd70      	pop	{r4, r5, r6, pc}

08010ed0 <__smakebuf_r>:
 8010ed0:	898b      	ldrh	r3, [r1, #12]
 8010ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ed4:	079d      	lsls	r5, r3, #30
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	460c      	mov	r4, r1
 8010eda:	d507      	bpl.n	8010eec <__smakebuf_r+0x1c>
 8010edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	6163      	str	r3, [r4, #20]
 8010ee8:	b002      	add	sp, #8
 8010eea:	bd70      	pop	{r4, r5, r6, pc}
 8010eec:	ab01      	add	r3, sp, #4
 8010eee:	466a      	mov	r2, sp
 8010ef0:	f7ff ffca 	bl	8010e88 <__swhatbuf_r>
 8010ef4:	9900      	ldr	r1, [sp, #0]
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f7ff faab 	bl	8010454 <_malloc_r>
 8010efe:	b948      	cbnz	r0, 8010f14 <__smakebuf_r+0x44>
 8010f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f04:	059a      	lsls	r2, r3, #22
 8010f06:	d4ef      	bmi.n	8010ee8 <__smakebuf_r+0x18>
 8010f08:	f023 0303 	bic.w	r3, r3, #3
 8010f0c:	f043 0302 	orr.w	r3, r3, #2
 8010f10:	81a3      	strh	r3, [r4, #12]
 8010f12:	e7e3      	b.n	8010edc <__smakebuf_r+0xc>
 8010f14:	4b0d      	ldr	r3, [pc, #52]	; (8010f4c <__smakebuf_r+0x7c>)
 8010f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f18:	89a3      	ldrh	r3, [r4, #12]
 8010f1a:	6020      	str	r0, [r4, #0]
 8010f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f20:	81a3      	strh	r3, [r4, #12]
 8010f22:	9b00      	ldr	r3, [sp, #0]
 8010f24:	6163      	str	r3, [r4, #20]
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	6120      	str	r0, [r4, #16]
 8010f2a:	b15b      	cbz	r3, 8010f44 <__smakebuf_r+0x74>
 8010f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f30:	4630      	mov	r0, r6
 8010f32:	f000 f833 	bl	8010f9c <_isatty_r>
 8010f36:	b128      	cbz	r0, 8010f44 <__smakebuf_r+0x74>
 8010f38:	89a3      	ldrh	r3, [r4, #12]
 8010f3a:	f023 0303 	bic.w	r3, r3, #3
 8010f3e:	f043 0301 	orr.w	r3, r3, #1
 8010f42:	81a3      	strh	r3, [r4, #12]
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	431d      	orrs	r5, r3
 8010f48:	81a5      	strh	r5, [r4, #12]
 8010f4a:	e7cd      	b.n	8010ee8 <__smakebuf_r+0x18>
 8010f4c:	0801025d 	.word	0x0801025d

08010f50 <__malloc_lock>:
 8010f50:	4770      	bx	lr

08010f52 <__malloc_unlock>:
 8010f52:	4770      	bx	lr

08010f54 <_read_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4c07      	ldr	r4, [pc, #28]	; (8010f74 <_read_r+0x20>)
 8010f58:	4605      	mov	r5, r0
 8010f5a:	4608      	mov	r0, r1
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	2200      	movs	r2, #0
 8010f60:	6022      	str	r2, [r4, #0]
 8010f62:	461a      	mov	r2, r3
 8010f64:	f7ef fd0c 	bl	8000980 <_read>
 8010f68:	1c43      	adds	r3, r0, #1
 8010f6a:	d102      	bne.n	8010f72 <_read_r+0x1e>
 8010f6c:	6823      	ldr	r3, [r4, #0]
 8010f6e:	b103      	cbz	r3, 8010f72 <_read_r+0x1e>
 8010f70:	602b      	str	r3, [r5, #0]
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	20006d14 	.word	0x20006d14

08010f78 <_fstat_r>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	4c07      	ldr	r4, [pc, #28]	; (8010f98 <_fstat_r+0x20>)
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4605      	mov	r5, r0
 8010f80:	4608      	mov	r0, r1
 8010f82:	4611      	mov	r1, r2
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	f7ef fd40 	bl	8000a0a <_fstat>
 8010f8a:	1c43      	adds	r3, r0, #1
 8010f8c:	d102      	bne.n	8010f94 <_fstat_r+0x1c>
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	b103      	cbz	r3, 8010f94 <_fstat_r+0x1c>
 8010f92:	602b      	str	r3, [r5, #0]
 8010f94:	bd38      	pop	{r3, r4, r5, pc}
 8010f96:	bf00      	nop
 8010f98:	20006d14 	.word	0x20006d14

08010f9c <_isatty_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4c06      	ldr	r4, [pc, #24]	; (8010fb8 <_isatty_r+0x1c>)
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	6023      	str	r3, [r4, #0]
 8010fa8:	f7ef fd3f 	bl	8000a2a <_isatty>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_isatty_r+0x1a>
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_isatty_r+0x1a>
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	20006d14 	.word	0x20006d14

08010fbc <_init>:
 8010fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fbe:	bf00      	nop
 8010fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fc2:	bc08      	pop	{r3}
 8010fc4:	469e      	mov	lr, r3
 8010fc6:	4770      	bx	lr

08010fc8 <_fini>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	bf00      	nop
 8010fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fce:	bc08      	pop	{r3}
 8010fd0:	469e      	mov	lr, r3
 8010fd2:	4770      	bx	lr
