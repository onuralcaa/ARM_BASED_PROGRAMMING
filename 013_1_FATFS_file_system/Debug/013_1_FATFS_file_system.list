
013_1_FATFS_file_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba4  08002ba4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bac  08002bac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000094  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007574  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001892  00000000  00000000  000275c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00028e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209d8  00000000  00000000  00029bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090b3  00000000  00000000  0004a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c174b  00000000  00000000  00053663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114dae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b04  00000000  00000000  00114e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b7c 	.word	0x08002b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002b7c 	.word	0x08002b7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <SELECT+0x1c>)
 80004d8:	f001 f9ac 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ff03 	bl	80012e8 <HAL_Delay>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020400 	.word	0x40020400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <DESELECT+0x1c>)
 80004f8:	f001 f99c 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fef3 	bl	80012e8 <HAL_Delay>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000516:	bf00      	nop
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SPI_TxByte+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d1f8      	bne.n	8000518 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_TxByte+0x30>)
 800052e:	f001 fe88 	bl	8002242 <HAL_SPI_Transmit>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000048 	.word	0x20000048

08000540 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxBuffer+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	d1f8      	bne.n	800054e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxBuffer+0x30>)
 8000564:	f001 fe6d 	bl	8002242 <HAL_SPI_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000048 	.word	0x20000048

08000574 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800057a:	23ff      	movs	r3, #255	; 0xff
 800057c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057e:	bf00      	nop
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SPI_RxByte+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1f8      	bne.n	8000580 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058e:	1dba      	adds	r2, r7, #6
 8000590:	1df9      	adds	r1, r7, #7
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x34>)
 800059a:	f001 ff8e 	bl	80024ba <HAL_SPI_TransmitReceive>

	return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000048 	.word	0x20000048

080005ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b4:	f7ff ffde 	bl	8000574 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SD_ReadyWait+0x30>)
 80005d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d6:	f7ff ffcd 	bl	8000574 <SPI_RxByte>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d003      	beq.n	80005ec <SD_ReadyWait+0x24>
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SD_ReadyWait+0x30>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f4      	bne.n	80005d6 <SD_ReadyWait+0xe>

	return res;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000042 	.word	0x20000042

080005fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000602:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000606:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000608:	f7ff ff70 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e005      	b.n	800061e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000612:	20ff      	movs	r0, #255	; 0xff
 8000614:	f7ff ff7a 	bl	800050c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	ddf6      	ble.n	8000612 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000624:	f7ff ff52 	bl	80004cc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800063c:	2395      	movs	r3, #149	; 0x95
 800063e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000640:	463b      	mov	r3, r7
 8000642:	2106      	movs	r1, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7b 	bl	8000540 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	e002      	b.n	8000652 <SD_PowerOn+0x56>
	{
		cnt--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	f7ff ff8f 	bl	8000574 <SPI_RxByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <SD_PowerOn+0x66>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f4      	bne.n	800064c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000662:	f7ff ff43 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff50 	bl	800050c <SPI_TxByte>

	PowerFlag = 1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SD_PowerOn+0x80>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000045 	.word	0x20000045

08000680 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOff+0x14>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000045 	.word	0x20000045

08000698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_CheckPower+0x14>)
 800069e:	781b      	ldrb	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000045 	.word	0x20000045

080006b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SD_RxDataBlock+0x58>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c0:	f7ff ff58 	bl	8000574 <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d103      	bne.n	80006d6 <SD_RxDataBlock+0x26>
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SD_RxDataBlock+0x58>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bfe      	cmp	r3, #254	; 0xfe
 80006da:	d001      	beq.n	80006e0 <SD_RxDataBlock+0x30>
 80006dc:	2300      	movs	r3, #0
 80006de:	e00f      	b.n	8000700 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff60 	bl	80005ac <SPI_RxBytePtr>
	} while(len--);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006f6:	f7ff ff3d 	bl	8000574 <SPI_RxByte>
	SPI_RxByte();
 80006fa:	f7ff ff3b 	bl	8000574 <SPI_RxByte>

	return TRUE;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000040 	.word	0x20000040

0800070c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800071c:	f7ff ff54 	bl	80005c8 <SD_ReadyWait>
 8000720:	4603      	mov	r3, r0
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d001      	beq.n	800072a <SD_TxDataBlock+0x1e>
 8000726:	2300      	movs	r3, #0
 8000728:	e02f      	b.n	800078a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feed 	bl	800050c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2bfd      	cmp	r3, #253	; 0xfd
 8000736:	d020      	beq.n	800077a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff feff 	bl	8000540 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000742:	f7ff ff17 	bl	8000574 <SPI_RxByte>
		SPI_RxByte();
 8000746:	f7ff ff15 	bl	8000574 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074a:	e00b      	b.n	8000764 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800074c:	f7ff ff12 	bl	8000574 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b05      	cmp	r3, #5
 800075c:	d006      	beq.n	800076c <SD_TxDataBlock+0x60>
			i++;
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b40      	cmp	r3, #64	; 0x40
 8000768:	d9f0      	bls.n	800074c <SD_TxDataBlock+0x40>
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800076c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076e:	bf00      	nop
 8000770:	f7ff ff00 	bl	8000574 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d101      	bne.n	8000788 <SD_TxDataBlock+0x7c>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	6039      	str	r1, [r7, #0]
 800079c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079e:	f7ff ff13 	bl	80005c8 <SD_ReadyWait>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2bff      	cmp	r3, #255	; 0xff
 80007a6:	d001      	beq.n	80007ac <SD_SendCmd+0x1a>
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	e042      	b.n	8000832 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feac 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea6 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea0 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9a 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe95 	bl	800050c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x5c>
 80007e8:	2395      	movs	r3, #149	; 0x95
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e007      	b.n	80007fe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b48      	cmp	r3, #72	; 0x48
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x68>
 80007f4:	2387      	movs	r3, #135	; 0x87
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <SD_SendCmd+0x6c>
	else crc = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe83 	bl	800050c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b4c      	cmp	r3, #76	; 0x4c
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x7e>
 800080c:	f7ff feb2 	bl	8000574 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000814:	f7ff feae 	bl	8000574 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800081c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da05      	bge.n	8000830 <SD_SendCmd+0x9e>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	3b01      	subs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <SD_SendCmd+0x82>

	return res;
 8000830:	7b7b      	ldrb	r3, [r7, #13]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SD_disk_initialize+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e0d1      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000850:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <SD_disk_initialize+0x2a>
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0c6      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000866:	f7ff fec9 	bl	80005fc <SD_PowerOn>

	/* slave select */
	SELECT();
 800086a:	f7ff fe2f 	bl	80004cc <SELECT>

	/* check disk type */
	type = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8c 	bl	8000792 <SD_SendCmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a1 	bne.w	80009c4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <SD_disk_initialize+0x1c4>)
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088e:	2048      	movs	r0, #72	; 0x48
 8000890:	f7ff ff7f 	bl	8000792 <SD_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d155      	bne.n	8000946 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e00c      	b.n	80008ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	f7ff fe67 	bl	8000574 <SPI_RxByte>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f104 0310 	add.w	r3, r4, #16
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9ef      	bls.n	80008a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d17e      	bne.n	80009c4 <SD_disk_initialize+0x188>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17b      	bne.n	80009c4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff5f 	bl	8000792 <SD_SendCmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <SD_disk_initialize+0xae>
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff57 	bl	8000792 <SD_SendCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <SD_disk_initialize+0x90>
 80008f2:	e000      	b.n	80008f6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d062      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80008fe:	2100      	movs	r1, #0
 8000900:	207a      	movs	r0, #122	; 0x7a
 8000902:	f7ff ff46 	bl	8000792 <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d15b      	bne.n	80009c4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00c      	b.n	800092c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000912:	7bfc      	ldrb	r4, [r7, #15]
 8000914:	f7ff fe2e 	bl	8000574 <SPI_RxByte>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	f104 0310 	add.w	r3, r4, #16
 8000920:	443b      	add	r3, r7
 8000922:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	3301      	adds	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d9ef      	bls.n	8000912 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SD_disk_initialize+0x104>
 800093c:	230c      	movs	r3, #12
 800093e:	e000      	b.n	8000942 <SD_disk_initialize+0x106>
 8000940:	2304      	movs	r3, #4
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	e03e      	b.n	80009c4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000946:	2100      	movs	r1, #0
 8000948:	2077      	movs	r0, #119	; 0x77
 800094a:	f7ff ff22 	bl	8000792 <SD_SendCmd>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d808      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000954:	2100      	movs	r1, #0
 8000956:	2069      	movs	r0, #105	; 0x69
 8000958:	f7ff ff1b 	bl	8000792 <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d801      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000962:	2302      	movs	r3, #2
 8000964:	e000      	b.n	8000968 <SD_disk_initialize+0x12c>
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d10e      	bne.n	800098e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff0d 	bl	8000792 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d80e      	bhi.n	800099c <SD_disk_initialize+0x160>
 800097e:	2100      	movs	r1, #0
 8000980:	2069      	movs	r0, #105	; 0x69
 8000982:	f7ff ff06 	bl	8000792 <SD_SendCmd>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <SD_disk_initialize+0x160>
 800098c:	e00c      	b.n	80009a8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098e:	2100      	movs	r1, #0
 8000990:	2041      	movs	r0, #65	; 0x41
 8000992:	f7ff fefe 	bl	8000792 <SD_SendCmd>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SD_disk_initialize+0x1c4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e2      	bne.n	800096a <SD_disk_initialize+0x12e>
 80009a4:	e000      	b.n	80009a8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <SD_disk_initialize+0x184>
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	2050      	movs	r0, #80	; 0x50
 80009b6:	f7ff feec 	bl	8000792 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80009c0:	2300      	movs	r3, #0
 80009c2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <SD_disk_initialize+0x1c8>)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ca:	f7ff fd8f 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80009ce:	f7ff fdd1 	bl	8000574 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e001      	b.n	80009ee <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009ea:	f7ff fe49 	bl	8000680 <SD_PowerOff>
	}

	return Stat;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000040 	.word	0x20000040
 8000a04:	20000044 	.word	0x20000044

08000a08 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_status+0x14>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e002      	b.n	8000a22 <SD_disk_status+0x1a>
	return Stat;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SD_disk_status+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <SD_disk_read+0x1c>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SD_disk_read+0x20>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e051      	b.n	8000af8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SD_disk_read+0xcc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SD_disk_read+0x32>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e048      	b.n	8000af8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SD_disk_read+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x44>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a78:	f7ff fd28 	bl	80004cc <SELECT>

	if (count == 1)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2051      	movs	r0, #81	; 0x51
 8000a86:	f7ff fe84 	bl	8000792 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d129      	bne.n	8000ae4 <SD_disk_read+0xb0>
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fe0b 	bl	80006b0 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <SD_disk_read+0xb0>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	e01e      	b.n	8000ae4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2052      	movs	r0, #82	; 0x52
 8000aaa:	f7ff fe72 	bl	8000792 <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d117      	bne.n	8000ae4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fdf9 	bl	80006b0 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <SD_disk_read+0xa6>
				buff += 512;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <SD_disk_read+0x80>
 8000ad8:	e000      	b.n	8000adc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ada:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	204c      	movs	r0, #76	; 0x4c
 8000ae0:	f7ff fe57 	bl	8000792 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae4:	f7ff fd02 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000ae8:	f7ff fd44 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000044 	.word	0x20000044

08000b08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_write+0x1c>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <SD_disk_write+0x20>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e06b      	b.n	8000c00 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <SD_disk_write+0x100>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SD_disk_write+0x32>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e062      	b.n	8000c00 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <SD_disk_write+0x100>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_write+0x44>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e059      	b.n	8000c00 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SD_disk_write+0x104>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <SD_disk_write+0x56>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	025b      	lsls	r3, r3, #9
 8000b5c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5e:	f7ff fcb5 	bl	80004cc <SELECT>

	if (count == 1)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2058      	movs	r0, #88	; 0x58
 8000b6c:	f7ff fe11 	bl	8000792 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13a      	bne.n	8000bec <SD_disk_write+0xe4>
 8000b76:	21fe      	movs	r1, #254	; 0xfe
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdc7 	bl	800070c <SD_TxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d033      	beq.n	8000bec <SD_disk_write+0xe4>
			count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e030      	b.n	8000bec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SD_disk_write+0x104>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2077      	movs	r0, #119	; 0x77
 8000b9a:	f7ff fdfa 	bl	8000792 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	2057      	movs	r0, #87	; 0x57
 8000ba2:	f7ff fdf6 	bl	8000792 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2059      	movs	r0, #89	; 0x59
 8000baa:	f7ff fdf2 	bl	8000792 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb4:	21fc      	movs	r1, #252	; 0xfc
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f7ff fda8 	bl	800070c <SD_TxDataBlock>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <SD_disk_write+0xd0>
				buff += 512;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ee      	bne.n	8000bb4 <SD_disk_write+0xac>
 8000bd6:	e000      	b.n	8000bda <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bda:	21fd      	movs	r1, #253	; 0xfd
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd95 	bl	800070c <SD_TxDataBlock>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SD_disk_write+0xe4>
			{
				count = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bec:	f7ff fc7e 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000bf0:	f7ff fcc0 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000044 	.word	0x20000044

08000c10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	603a      	str	r2, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x1e>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e115      	b.n	8000e5a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d124      	bne.n	8000c84 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d012      	beq.n	8000c68 <SD_disk_ioctl+0x58>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	dc1a      	bgt.n	8000c7c <SD_disk_ioctl+0x6c>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <SD_disk_ioctl+0x40>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <SD_disk_ioctl+0x4c>
 8000c4e:	e015      	b.n	8000c7c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c50:	f7ff fd16 	bl	8000680 <SD_PowerOff>
			res = RES_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c5a:	e0fc      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c5c:	f7ff fcce 	bl	80005fc <SD_PowerOn>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e0f6      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	1c5c      	adds	r4, r3, #1
 8000c6c:	f7ff fd14 	bl	8000698 <SD_CheckPower>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c7a:	e0ec      	b.n	8000e56 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c82:	e0e8      	b.n	8000e56 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <SD_disk_ioctl+0x254>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SD_disk_ioctl+0x86>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e0e1      	b.n	8000e5a <SD_disk_ioctl+0x24a>

		SELECT();
 8000c96:	f7ff fc19 	bl	80004cc <SELECT>

		switch (ctrl)
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 80cb 	bhi.w	8000e38 <SD_disk_ioctl+0x228>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SD_disk_ioctl+0x98>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000da3 	.word	0x08000da3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d93 	.word	0x08000d93
 8000cb4:	08000e39 	.word	0x08000e39
 8000cb8:	08000e39 	.word	0x08000e39
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e39 	.word	0x08000e39
 8000cc4:	08000e39 	.word	0x08000e39
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e39 	.word	0x08000e39
 8000cd0:	08000e39 	.word	0x08000e39
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dfd 	.word	0x08000dfd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	; 0x49
 8000ce4:	f7ff fd55 	bl	8000792 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a8 	bne.w	8000e40 <SD_disk_ioctl+0x230>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcda 	bl	80006b0 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809e 	beq.w	8000e40 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10e      	bne.n	8000d2c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d22:	8bfb      	ldrh	r3, [r7, #30]
 8000d24:	029a      	lsls	r2, r3, #10
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02e      	b.n	8000d8a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0306 	and.w	r3, r3, #6
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d82:	3b09      	subs	r3, #9
 8000d84:	409a      	lsls	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d90:	e056      	b.n	8000e40 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000da0:	e055      	b.n	8000e4e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000da2:	f7ff fc11 	bl	80005c8 <SD_ReadyWait>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d14b      	bne.n	8000e44 <SD_disk_ioctl+0x234>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db2:	e047      	b.n	8000e44 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fceb 	bl	8000792 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d142      	bne.n	8000e48 <SD_disk_ioctl+0x238>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f7ff fc73 	bl	80006b0 <SD_RxDataBlock>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03b      	beq.n	8000e48 <SD_disk_ioctl+0x238>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd6:	e037      	b.n	8000e48 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204a      	movs	r0, #74	; 0x4a
 8000ddc:	f7ff fcd9 	bl	8000792 <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <SD_disk_ioctl+0x23c>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc61 	bl	80006b0 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <SD_disk_ioctl+0x23c>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dfa:	e027      	b.n	8000e4c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	207a      	movs	r0, #122	; 0x7a
 8000e00:	f7ff fcc7 	bl	8000792 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e10:	e00b      	b.n	8000e2a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e12:	6a3c      	ldr	r4, [r7, #32]
 8000e14:	1c63      	adds	r3, r4, #1
 8000e16:	623b      	str	r3, [r7, #32]
 8000e18:	f7ff fbac 	bl	8000574 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e006      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e4c:	bf00      	nop
		}

		DESELECT();
 8000e4e:	f7ff fb4d 	bl	80004ec <DESELECT>
		SPI_RxByte();
 8000e52:	f7ff fb8f 	bl	8000574 <SPI_RxByte>
	}

	return res;
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 f9ca 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f808 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f8a6 	bl	8000fc4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e78:	f000 f86e 	bl	8000f58 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000e7c:	f001 fd8a 	bl	8002994 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <main+0x18>
	...

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fe6a 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <SystemClock_Config+0xd0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <SystemClock_Config+0xd0>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <SystemClock_Config+0xd0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef8:	23a8      	movs	r3, #168	; 0xa8
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0320 	add.w	r3, r7, #32
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fcad 	bl	8001868 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f14:	f000 f89a 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2105      	movs	r1, #5
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 ff0e 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f42:	f000 f883 	bl	800104c <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	; 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40007000 	.word	0x40007000

08000f58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f5e:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <MX_SPI2_Init+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_SPI2_Init+0x64>)
 8000faa:	f001 f8c1 	bl	8002130 <HAL_SPI_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fb4:	f000 f84a 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000048 	.word	0x20000048
 8000fc0:	40003800 	.word	0x40003800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_GPIO_Init+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <MX_GPIO_Init+0x80>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_GPIO_Init+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_GPIO_Init+0x80>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <MX_GPIO_Init+0x80>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_GPIO_Init+0x80>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <MX_GPIO_Init+0x84>)
 800101a:	f000 fc0b 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_GPIO_Init+0x84>)
 8001038:	f000 fa60 	bl	80014fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_SPI_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12c      	bne.n	8001124 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001102:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001114:	2305      	movs	r3, #5
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0x8c>)
 8001120:	f000 f9ec 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40003800 	.word	0x40003800
 8001130:	40023800 	.word	0x40023800
 8001134:	40020400 	.word	0x40020400

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f890 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011da:	f7ff ffd7 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f001 fca1 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fe41 	bl	8000e68 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011f4:	08002bb4 	.word	0x08002bb4
  ldr r2, =_sbss
 80011f8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80011fc:	200000b8 	.word	0x200000b8

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f931 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff ff0e 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f93b 	bl	80014e2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f911 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	200000a0 	.word	0x200000a0

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200000a0 	.word	0x200000a0

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff47 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5c 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb0 	bl	8001450 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e16b      	b.n	80017f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 815a 	bne.w	80017ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b4 	beq.w	80017ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_GPIO_Init+0x30c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_GPIO_Init+0x310>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x324>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x328>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x330>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20a>
 8001702:	2307      	movs	r3, #7
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001706:	2308      	movs	r3, #8
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x310>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_GPIO_Init+0x334>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae90 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e267      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e242      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x74>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fcd6 	bl	80012d0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fcd2 	bl	80012d0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e207      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xc0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fcc2 	bl	80012d0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fcbe 	bl	80012d0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1f3      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c7      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fc77 	bl	80012d0 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc73 	bl	80012d0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1a8      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc56 	bl	80012d0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc52 	bl	80012d0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e187      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc36 	bl	80012d0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc32 	bl	80012d0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e167      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x200>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fc1f 	bl	80012d0 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fc1b 	bl	80012d0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e150      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbdb 	bl	80012d0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbd7 	bl	80012d0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e10c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ea>
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x30c>
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fb9c 	bl	80012d0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fb98 	bl	80012d0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0cb      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb86 	bl	80012d0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb82 	bl	80012d0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b5      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d05c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d141      	bne.n	8001c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb56 	bl	80012d0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb52 	bl	80012d0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb2b 	bl	80012d0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb27 	bl	80012d0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e05c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x416>
 8001c9c:	e054      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb14 	bl	80012d0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fb10 	bl	80012d0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e045      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e038      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4ec>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fa42 	bl	80012d0 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fa3e 	bl	80012d0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f9a2 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08002b94 	.word	0x08002b94
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b094      	sub	sp, #80	; 0x50
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d00d      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	f200 80e1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f56:	e0db      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f5c:	e0db      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f62:	e0d8      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
 8001f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f96:	4622      	mov	r2, r4
 8001f98:	462b      	mov	r3, r5
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4621      	mov	r1, r4
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	6139      	str	r1, [r7, #16]
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc8:	4659      	mov	r1, fp
 8001fca:	018b      	lsls	r3, r1, #6
 8001fcc:	4651      	mov	r1, sl
 8001fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	018a      	lsls	r2, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fdc:	4659      	mov	r1, fp
 8001fde:	eb63 0901 	sbc.w	r9, r3, r1
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	eb18 0303 	adds.w	r3, r8, r3
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	462b      	mov	r3, r5
 8002004:	eb49 0303 	adc.w	r3, r9, r3
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002016:	4629      	mov	r1, r5
 8002018:	024b      	lsls	r3, r1, #9
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002020:	4621      	mov	r1, r4
 8002022:	024a      	lsls	r2, r1, #9
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	2200      	movs	r2, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
 800202e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002034:	f7fe f8c8 	bl	80001c8 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002040:	e058      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	2200      	movs	r2, #0
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	0159      	lsls	r1, r3, #5
 800206a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206e:	0150      	lsls	r0, r2, #5
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4641      	mov	r1, r8
 8002076:	ebb2 0a01 	subs.w	sl, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800208c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002094:	ebb2 040a 	subs.w	r4, r2, sl
 8002098:	eb63 050b 	sbc.w	r5, r3, fp
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	61fa      	str	r2, [r7, #28]
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	f7fe f86e 	bl	80001c8 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002118:	4618      	mov	r0, r3
 800211a:	3750      	adds	r7, #80	; 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07b      	b.n	800223a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002152:	d009      	beq.n	8002168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
 800215a:	e005      	b.n	8002168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe ff90 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f003 0104 	and.w	r1, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f003 0210 	and.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b088      	sub	sp, #32
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_SPI_Transmit+0x22>
 8002260:	2302      	movs	r3, #2
 8002262:	e126      	b.n	80024b2 <HAL_SPI_Transmit+0x270>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800226c:	f7ff f830 	bl	80012d0 <HAL_GetTick>
 8002270:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002286:	e10b      	b.n	80024a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_Transmit+0x52>
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002298:	e102      	b.n	80024a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e0:	d10f      	bne.n	8002302 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002300:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d007      	beq.n	8002320 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002328:	d14b      	bne.n	80023c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0xf6>
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d13e      	bne.n	80023b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	1c9a      	adds	r2, r3, #2
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800235c:	e02b      	b.n	80023b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d112      	bne.n	8002392 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c9a      	adds	r2, r3, #2
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002390:	e011      	b.n	80023b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002392:	f7fe ff9d 	bl	80012d0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d803      	bhi.n	80023aa <HAL_SPI_Transmit+0x168>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d102      	bne.n	80023b0 <HAL_SPI_Transmit+0x16e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023b4:	e074      	b.n	80024a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ce      	bne.n	800235e <HAL_SPI_Transmit+0x11c>
 80023c0:	e04c      	b.n	800245c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_SPI_Transmit+0x18e>
 80023ca:	8afb      	ldrh	r3, [r7, #22]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d140      	bne.n	8002452 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023f6:	e02c      	b.n	8002452 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d113      	bne.n	800242e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	86da      	strh	r2, [r3, #54]	; 0x36
 800242c:	e011      	b.n	8002452 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe ff4f 	bl	80012d0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d803      	bhi.n	8002446 <HAL_SPI_Transmit+0x204>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d102      	bne.n	800244c <HAL_SPI_Transmit+0x20a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002450:	e026      	b.n	80024a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1cd      	bne.n	80023f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fa55 	bl	8002910 <SPI_EndRxTxTransaction>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	77fb      	strb	r3, [r7, #31]
 800249c:	e000      	b.n	80024a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800249e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08c      	sub	sp, #48	; 0x30
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x26>
 80024dc:	2302      	movs	r3, #2
 80024de:	e18a      	b.n	80027f6 <HAL_SPI_TransmitReceive+0x33c>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e8:	f7fe fef2 	bl	80012d0 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00f      	beq.n	800252a <HAL_SPI_TransmitReceive+0x70>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002510:	d107      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x68>
 800251a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800251e:	2b04      	cmp	r3, #4
 8002520:	d003      	beq.n	800252a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002528:	e15b      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_SPI_TransmitReceive+0x82>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_TransmitReceive+0x82>
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002542:	e14e      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b04      	cmp	r3, #4
 800254e:	d003      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	887a      	ldrh	r2, [r7, #2]
 800256e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d007      	beq.n	80025ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b4:	d178      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x10a>
 80025be:	8b7b      	ldrh	r3, [r7, #26]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d166      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	881a      	ldrh	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	1c9a      	adds	r2, r3, #2
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e8:	e053      	b.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d11b      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x176>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x176>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d113      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d119      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1b8>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d014      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	b292      	uxth	r2, r2
 8002654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	1c9a      	adds	r2, r3, #2
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800266e:	2301      	movs	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002672:	f7fe fe2d 	bl	80012d0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267e:	429a      	cmp	r2, r3
 8002680:	d807      	bhi.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d003      	beq.n	8002692 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002690:	e0a7      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1a6      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x130>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1a1      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x130>
 80026a6:	e07c      	b.n	80027a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x1fc>
 80026b0:	8b7b      	ldrh	r3, [r7, #26]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d16b      	bne.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026dc:	e057      	b.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11c      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d017      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d114      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d119      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x2ae>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002768:	f7fe fdb2 	bl	80012d0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002774:	429a      	cmp	r2, r3
 8002776:	d803      	bhi.n	8002780 <HAL_SPI_TransmitReceive+0x2c6>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d102      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2cc>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800278c:	e029      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1a2      	bne.n	80026de <HAL_SPI_TransmitReceive+0x224>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d19d      	bne.n	80026de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8b2 	bl	8002910 <SPI_EndRxTxTransaction>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027be:	e010      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	e000      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002810:	f7fe fd5e 	bl	80012d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002820:	f7fe fd56 	bl	80012d0 <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	015b      	lsls	r3, r3, #5
 800282c:	0d1b      	lsrs	r3, r3, #20
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	e054      	b.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d050      	beq.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002840:	f7fe fd46 	bl	80012d0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d902      	bls.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d13d      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d111      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002878:	d004      	beq.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d107      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d10f      	bne.n	80028be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e017      	b.n	8002902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3b01      	subs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d19b      	bne.n	8002838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000004 	.word	0x20000004

08002910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <SPI_EndRxTxTransaction+0x7c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <SPI_EndRxTxTransaction+0x80>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0d5b      	lsrs	r3, r3, #21
 8002928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d112      	bne.n	8002962 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff5a 	bl	8002800 <SPI_WaitFlagStateUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e00f      	b.n	8002982 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d0f2      	beq.n	8002962 <SPI_EndRxTxTransaction+0x52>
 800297c:	e000      	b.n	8002980 <SPI_EndRxTxTransaction+0x70>
        break;
 800297e:	bf00      	nop
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000004 	.word	0x20000004
 8002990:	165e9f81 	.word	0x165e9f81

08002994 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&SD_Driver, USERPath);
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <MX_FATFS_Init+0x18>)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_FATFS_Init+0x1c>)
 800299c:	f000 f8b2 	bl	8002b04 <FATFS_LinkDriver>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <MX_FATFS_Init+0x20>)
 80029a6:	701a      	strb	r2, [r3, #0]
  //Farklı depolama birimlerinden okuma yapılmak istendiğinde burada tanımlama yapılır.

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200000a8 	.word	0x200000a8
 80029b0:	20000010 	.word	0x20000010
 80029b4:	200000a4 	.word	0x200000a4

080029b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd ff39 	bl	800083c <SD_disk_initialize>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe f810 	bl	8000a08 <SD_disk_status>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002a04:	7bf8      	ldrb	r0, [r7, #15]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	f7fe f812 	bl	8000a34 <SD_disk_read>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002a2c:	7bf8      	ldrb	r0, [r7, #15]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	f7fe f868 	bl	8000b08 <SD_disk_write>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	603a      	str	r2, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	460b      	mov	r3, r1
 8002a52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	79b9      	ldrb	r1, [r7, #6]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f8d8 	bl	8000c10 <SD_disk_ioctl>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002a84:	7a5b      	ldrb	r3, [r3, #9]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d131      	bne.n	8002af0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002a8e:	7a5b      	ldrb	r3, [r3, #9]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002a9c:	7a5b      	ldrb	r3, [r3, #9]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002aac:	7a5b      	ldrb	r3, [r3, #9]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002abc:	7a5b      	ldrb	r3, [r3, #9]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	b2d1      	uxtb	r1, r2
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <FATFS_LinkDriverEx+0x94>)
 8002ac6:	7251      	strb	r1, [r2, #9]
 8002ac8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002aca:	7dbb      	ldrb	r3, [r7, #22]
 8002acc:	3330      	adds	r3, #48	; 0x30
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	223a      	movs	r2, #58	; 0x3a
 8002ada:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3302      	adds	r3, #2
 8002ae0:	222f      	movs	r2, #47	; 0x2f
 8002ae2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	200000ac 	.word	0x200000ac

08002b04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffaa 	bl	8002a6c <FATFS_LinkDriverEx>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	; (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	; (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 f820 	bl	8002b7c <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002bac 	.word	0x08002bac
 8002b60:	08002bac 	.word	0x08002bac
 8002b64:	08002bac 	.word	0x08002bac
 8002b68:	08002bb0 	.word	0x08002bb0

08002b6c <memset>:
 8002b6c:	4402      	add	r2, r0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <_init>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	bf00      	nop
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr

08002b88 <_fini>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr
