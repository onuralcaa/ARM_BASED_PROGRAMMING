
013_1_FATFS_file_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000000d0  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9db  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f66  00000000  00000000  0002aa93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000928  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224c0  00000000  00000000  0002dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da6f  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4f0b  00000000  00000000  0005dc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122ba2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d9c  00000000  00000000  00122bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053f8 	.word	0x080053f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080053f8 	.word	0x080053f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <SELECT+0x1c>)
 80004d8:	f001 fa6e 	bl	80019b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ffc5 	bl	800146c <HAL_Delay>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020400 	.word	0x40020400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <DESELECT+0x1c>)
 80004f8:	f001 fa5e 	bl	80019b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 ffb5 	bl	800146c <HAL_Delay>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000516:	bf00      	nop
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SPI_TxByte+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d1f8      	bne.n	8000518 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_TxByte+0x30>)
 800052e:	f001 ff4a 	bl	80023c6 <HAL_SPI_Transmit>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000ac 	.word	0x200000ac

08000540 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxBuffer+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	d1f8      	bne.n	800054e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxBuffer+0x30>)
 8000564:	f001 ff2f 	bl	80023c6 <HAL_SPI_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000ac 	.word	0x200000ac

08000574 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800057a:	23ff      	movs	r3, #255	; 0xff
 800057c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057e:	bf00      	nop
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SPI_RxByte+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1f8      	bne.n	8000580 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058e:	1dba      	adds	r2, r7, #6
 8000590:	1df9      	adds	r1, r7, #7
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x34>)
 800059a:	f002 f850 	bl	800263e <HAL_SPI_TransmitReceive>

	return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000ac 	.word	0x200000ac

080005ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b4:	f7ff ffde 	bl	8000574 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SD_ReadyWait+0x30>)
 80005d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d6:	f7ff ffcd 	bl	8000574 <SPI_RxByte>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d003      	beq.n	80005ec <SD_ReadyWait+0x24>
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SD_ReadyWait+0x30>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f4      	bne.n	80005d6 <SD_ReadyWait+0xe>

	return res;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000a6 	.word	0x200000a6

080005fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000602:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000606:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000608:	f7ff ff70 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e005      	b.n	800061e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000612:	20ff      	movs	r0, #255	; 0xff
 8000614:	f7ff ff7a 	bl	800050c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	ddf6      	ble.n	8000612 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000624:	f7ff ff52 	bl	80004cc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800063c:	2395      	movs	r3, #149	; 0x95
 800063e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000640:	463b      	mov	r3, r7
 8000642:	2106      	movs	r1, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7b 	bl	8000540 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	e002      	b.n	8000652 <SD_PowerOn+0x56>
	{
		cnt--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	f7ff ff8f 	bl	8000574 <SPI_RxByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <SD_PowerOn+0x66>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f4      	bne.n	800064c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000662:	f7ff ff43 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff50 	bl	800050c <SPI_TxByte>

	PowerFlag = 1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SD_PowerOn+0x80>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000a9 	.word	0x200000a9

08000680 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOff+0x14>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	200000a9 	.word	0x200000a9

08000698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_CheckPower+0x14>)
 800069e:	781b      	ldrb	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	200000a9 	.word	0x200000a9

080006b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SD_RxDataBlock+0x58>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c0:	f7ff ff58 	bl	8000574 <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d103      	bne.n	80006d6 <SD_RxDataBlock+0x26>
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SD_RxDataBlock+0x58>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bfe      	cmp	r3, #254	; 0xfe
 80006da:	d001      	beq.n	80006e0 <SD_RxDataBlock+0x30>
 80006dc:	2300      	movs	r3, #0
 80006de:	e00f      	b.n	8000700 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff60 	bl	80005ac <SPI_RxBytePtr>
	} while(len--);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006f6:	f7ff ff3d 	bl	8000574 <SPI_RxByte>
	SPI_RxByte();
 80006fa:	f7ff ff3b 	bl	8000574 <SPI_RxByte>

	return TRUE;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000a4 	.word	0x200000a4

0800070c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800071c:	f7ff ff54 	bl	80005c8 <SD_ReadyWait>
 8000720:	4603      	mov	r3, r0
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d001      	beq.n	800072a <SD_TxDataBlock+0x1e>
 8000726:	2300      	movs	r3, #0
 8000728:	e02f      	b.n	800078a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feed 	bl	800050c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2bfd      	cmp	r3, #253	; 0xfd
 8000736:	d020      	beq.n	800077a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff feff 	bl	8000540 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000742:	f7ff ff17 	bl	8000574 <SPI_RxByte>
		SPI_RxByte();
 8000746:	f7ff ff15 	bl	8000574 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074a:	e00b      	b.n	8000764 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800074c:	f7ff ff12 	bl	8000574 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b05      	cmp	r3, #5
 800075c:	d006      	beq.n	800076c <SD_TxDataBlock+0x60>
			i++;
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b40      	cmp	r3, #64	; 0x40
 8000768:	d9f0      	bls.n	800074c <SD_TxDataBlock+0x40>
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800076c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076e:	bf00      	nop
 8000770:	f7ff ff00 	bl	8000574 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d101      	bne.n	8000788 <SD_TxDataBlock+0x7c>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	6039      	str	r1, [r7, #0]
 800079c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079e:	f7ff ff13 	bl	80005c8 <SD_ReadyWait>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2bff      	cmp	r3, #255	; 0xff
 80007a6:	d001      	beq.n	80007ac <SD_SendCmd+0x1a>
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	e042      	b.n	8000832 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feac 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea6 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea0 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9a 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe95 	bl	800050c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x5c>
 80007e8:	2395      	movs	r3, #149	; 0x95
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e007      	b.n	80007fe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b48      	cmp	r3, #72	; 0x48
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x68>
 80007f4:	2387      	movs	r3, #135	; 0x87
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <SD_SendCmd+0x6c>
	else crc = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe83 	bl	800050c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b4c      	cmp	r3, #76	; 0x4c
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x7e>
 800080c:	f7ff feb2 	bl	8000574 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000814:	f7ff feae 	bl	8000574 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800081c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da05      	bge.n	8000830 <SD_SendCmd+0x9e>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	3b01      	subs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <SD_SendCmd+0x82>

	return res;
 8000830:	7b7b      	ldrb	r3, [r7, #13]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SD_disk_initialize+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e0d1      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000850:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <SD_disk_initialize+0x2a>
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0c6      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000866:	f7ff fec9 	bl	80005fc <SD_PowerOn>

	/* slave select */
	SELECT();
 800086a:	f7ff fe2f 	bl	80004cc <SELECT>

	/* check disk type */
	type = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8c 	bl	8000792 <SD_SendCmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a1 	bne.w	80009c4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <SD_disk_initialize+0x1c4>)
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088e:	2048      	movs	r0, #72	; 0x48
 8000890:	f7ff ff7f 	bl	8000792 <SD_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d155      	bne.n	8000946 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e00c      	b.n	80008ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	f7ff fe67 	bl	8000574 <SPI_RxByte>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f104 0310 	add.w	r3, r4, #16
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9ef      	bls.n	80008a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d17e      	bne.n	80009c4 <SD_disk_initialize+0x188>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17b      	bne.n	80009c4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff5f 	bl	8000792 <SD_SendCmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <SD_disk_initialize+0xae>
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff57 	bl	8000792 <SD_SendCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <SD_disk_initialize+0x90>
 80008f2:	e000      	b.n	80008f6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d062      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80008fe:	2100      	movs	r1, #0
 8000900:	207a      	movs	r0, #122	; 0x7a
 8000902:	f7ff ff46 	bl	8000792 <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d15b      	bne.n	80009c4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00c      	b.n	800092c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000912:	7bfc      	ldrb	r4, [r7, #15]
 8000914:	f7ff fe2e 	bl	8000574 <SPI_RxByte>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	f104 0310 	add.w	r3, r4, #16
 8000920:	443b      	add	r3, r7
 8000922:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	3301      	adds	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d9ef      	bls.n	8000912 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SD_disk_initialize+0x104>
 800093c:	230c      	movs	r3, #12
 800093e:	e000      	b.n	8000942 <SD_disk_initialize+0x106>
 8000940:	2304      	movs	r3, #4
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	e03e      	b.n	80009c4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000946:	2100      	movs	r1, #0
 8000948:	2077      	movs	r0, #119	; 0x77
 800094a:	f7ff ff22 	bl	8000792 <SD_SendCmd>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d808      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000954:	2100      	movs	r1, #0
 8000956:	2069      	movs	r0, #105	; 0x69
 8000958:	f7ff ff1b 	bl	8000792 <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d801      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000962:	2302      	movs	r3, #2
 8000964:	e000      	b.n	8000968 <SD_disk_initialize+0x12c>
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d10e      	bne.n	800098e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff0d 	bl	8000792 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d80e      	bhi.n	800099c <SD_disk_initialize+0x160>
 800097e:	2100      	movs	r1, #0
 8000980:	2069      	movs	r0, #105	; 0x69
 8000982:	f7ff ff06 	bl	8000792 <SD_SendCmd>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <SD_disk_initialize+0x160>
 800098c:	e00c      	b.n	80009a8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098e:	2100      	movs	r1, #0
 8000990:	2041      	movs	r0, #65	; 0x41
 8000992:	f7ff fefe 	bl	8000792 <SD_SendCmd>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SD_disk_initialize+0x1c4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e2      	bne.n	800096a <SD_disk_initialize+0x12e>
 80009a4:	e000      	b.n	80009a8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <SD_disk_initialize+0x184>
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	2050      	movs	r0, #80	; 0x50
 80009b6:	f7ff feec 	bl	8000792 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80009c0:	2300      	movs	r3, #0
 80009c2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <SD_disk_initialize+0x1c8>)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ca:	f7ff fd8f 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80009ce:	f7ff fdd1 	bl	8000574 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e001      	b.n	80009ee <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009ea:	f7ff fe49 	bl	8000680 <SD_PowerOff>
	}

	return Stat;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	200000a8 	.word	0x200000a8

08000a08 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_status+0x14>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e002      	b.n	8000a22 <SD_disk_status+0x1a>
	return Stat;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SD_disk_status+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <SD_disk_read+0x1c>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SD_disk_read+0x20>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e051      	b.n	8000af8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SD_disk_read+0xcc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SD_disk_read+0x32>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e048      	b.n	8000af8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SD_disk_read+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x44>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a78:	f7ff fd28 	bl	80004cc <SELECT>

	if (count == 1)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2051      	movs	r0, #81	; 0x51
 8000a86:	f7ff fe84 	bl	8000792 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d129      	bne.n	8000ae4 <SD_disk_read+0xb0>
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fe0b 	bl	80006b0 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <SD_disk_read+0xb0>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	e01e      	b.n	8000ae4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2052      	movs	r0, #82	; 0x52
 8000aaa:	f7ff fe72 	bl	8000792 <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d117      	bne.n	8000ae4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fdf9 	bl	80006b0 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <SD_disk_read+0xa6>
				buff += 512;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <SD_disk_read+0x80>
 8000ad8:	e000      	b.n	8000adc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ada:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	204c      	movs	r0, #76	; 0x4c
 8000ae0:	f7ff fe57 	bl	8000792 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae4:	f7ff fd02 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000ae8:	f7ff fd44 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	200000a8 	.word	0x200000a8

08000b08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_write+0x1c>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <SD_disk_write+0x20>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e06b      	b.n	8000c00 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <SD_disk_write+0x100>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SD_disk_write+0x32>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e062      	b.n	8000c00 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <SD_disk_write+0x100>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_write+0x44>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e059      	b.n	8000c00 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SD_disk_write+0x104>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <SD_disk_write+0x56>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	025b      	lsls	r3, r3, #9
 8000b5c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5e:	f7ff fcb5 	bl	80004cc <SELECT>

	if (count == 1)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2058      	movs	r0, #88	; 0x58
 8000b6c:	f7ff fe11 	bl	8000792 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13a      	bne.n	8000bec <SD_disk_write+0xe4>
 8000b76:	21fe      	movs	r1, #254	; 0xfe
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdc7 	bl	800070c <SD_TxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d033      	beq.n	8000bec <SD_disk_write+0xe4>
			count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e030      	b.n	8000bec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SD_disk_write+0x104>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2077      	movs	r0, #119	; 0x77
 8000b9a:	f7ff fdfa 	bl	8000792 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	2057      	movs	r0, #87	; 0x57
 8000ba2:	f7ff fdf6 	bl	8000792 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2059      	movs	r0, #89	; 0x59
 8000baa:	f7ff fdf2 	bl	8000792 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb4:	21fc      	movs	r1, #252	; 0xfc
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f7ff fda8 	bl	800070c <SD_TxDataBlock>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <SD_disk_write+0xd0>
				buff += 512;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ee      	bne.n	8000bb4 <SD_disk_write+0xac>
 8000bd6:	e000      	b.n	8000bda <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bda:	21fd      	movs	r1, #253	; 0xfd
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd95 	bl	800070c <SD_TxDataBlock>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SD_disk_write+0xe4>
			{
				count = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bec:	f7ff fc7e 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000bf0:	f7ff fcc0 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	200000a8 	.word	0x200000a8

08000c10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	603a      	str	r2, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x1e>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e115      	b.n	8000e5a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d124      	bne.n	8000c84 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d012      	beq.n	8000c68 <SD_disk_ioctl+0x58>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	dc1a      	bgt.n	8000c7c <SD_disk_ioctl+0x6c>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <SD_disk_ioctl+0x40>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <SD_disk_ioctl+0x4c>
 8000c4e:	e015      	b.n	8000c7c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c50:	f7ff fd16 	bl	8000680 <SD_PowerOff>
			res = RES_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c5a:	e0fc      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c5c:	f7ff fcce 	bl	80005fc <SD_PowerOn>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e0f6      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	1c5c      	adds	r4, r3, #1
 8000c6c:	f7ff fd14 	bl	8000698 <SD_CheckPower>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c7a:	e0ec      	b.n	8000e56 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c82:	e0e8      	b.n	8000e56 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <SD_disk_ioctl+0x254>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SD_disk_ioctl+0x86>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e0e1      	b.n	8000e5a <SD_disk_ioctl+0x24a>

		SELECT();
 8000c96:	f7ff fc19 	bl	80004cc <SELECT>

		switch (ctrl)
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 80cb 	bhi.w	8000e38 <SD_disk_ioctl+0x228>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SD_disk_ioctl+0x98>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000da3 	.word	0x08000da3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d93 	.word	0x08000d93
 8000cb4:	08000e39 	.word	0x08000e39
 8000cb8:	08000e39 	.word	0x08000e39
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e39 	.word	0x08000e39
 8000cc4:	08000e39 	.word	0x08000e39
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e39 	.word	0x08000e39
 8000cd0:	08000e39 	.word	0x08000e39
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dfd 	.word	0x08000dfd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	; 0x49
 8000ce4:	f7ff fd55 	bl	8000792 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a8 	bne.w	8000e40 <SD_disk_ioctl+0x230>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcda 	bl	80006b0 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809e 	beq.w	8000e40 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10e      	bne.n	8000d2c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d22:	8bfb      	ldrh	r3, [r7, #30]
 8000d24:	029a      	lsls	r2, r3, #10
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02e      	b.n	8000d8a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0306 	and.w	r3, r3, #6
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d82:	3b09      	subs	r3, #9
 8000d84:	409a      	lsls	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d90:	e056      	b.n	8000e40 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000da0:	e055      	b.n	8000e4e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000da2:	f7ff fc11 	bl	80005c8 <SD_ReadyWait>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d14b      	bne.n	8000e44 <SD_disk_ioctl+0x234>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db2:	e047      	b.n	8000e44 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fceb 	bl	8000792 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d142      	bne.n	8000e48 <SD_disk_ioctl+0x238>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f7ff fc73 	bl	80006b0 <SD_RxDataBlock>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03b      	beq.n	8000e48 <SD_disk_ioctl+0x238>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd6:	e037      	b.n	8000e48 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204a      	movs	r0, #74	; 0x4a
 8000ddc:	f7ff fcd9 	bl	8000792 <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <SD_disk_ioctl+0x23c>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc61 	bl	80006b0 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <SD_disk_ioctl+0x23c>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dfa:	e027      	b.n	8000e4c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	207a      	movs	r0, #122	; 0x7a
 8000e00:	f7ff fcc7 	bl	8000792 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e10:	e00b      	b.n	8000e2a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e12:	6a3c      	ldr	r4, [r7, #32]
 8000e14:	1c63      	adds	r3, r4, #1
 8000e16:	623b      	str	r3, [r7, #32]
 8000e18:	f7ff fbac 	bl	8000574 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e006      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e4c:	bf00      	nop
		}

		DESELECT();
 8000e4e:	f7ff fb4d 	bl	80004ec <DESELECT>
		SPI_RxByte();
 8000e52:	f7ff fb8f 	bl	8000574 <SPI_RxByte>
	}

	return res;
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	f5ad 6d99 	sub.w	sp, sp, #1224	; 0x4c8
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fa8a 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f840 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 f8de 	bl	8001038 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e7c:	f000 f8a6 	bl	8000fcc <MX_SPI2_Init>
  MX_FATFS_Init();
 8000e80:	f001 fe4a 	bl	8002b18 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  res = f_mount(&fs, "", 0); //sd kartın mount(aktif) edilmesini sağlar.
 8000e84:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4919      	ldr	r1, [pc, #100]	; (8000ef0 <main+0x88>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fb2b 	bl	80044e8 <f_mount>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
  if(res != FR_OK)
 8000e98:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d000      	beq.n	8000ea2 <main+0x3a>
  {
	 while(1); //mount edilmezse kilitle.
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x38>
  }

  res = f_open(&file, "test.txt", FA_READ);
 8000ea2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4912      	ldr	r1, [pc, #72]	; (8000ef4 <main+0x8c>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fb62 	bl	8004574 <f_open>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
  if(res == FR_OK) //Dosya içeriğinin okunması.
 8000eb6:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d111      	bne.n	8000ee2 <main+0x7a>
  {
	  res = f_read(&file, buffer, sizeof(buffer), byteread); //br değeriyle okunan karakter sayısı geri döndürülür.
 8000ebe:	f897 34c6 	ldrb.w	r3, [r7, #1222]	; 0x4c6
 8000ec2:	4639      	mov	r1, r7
 8000ec4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000ec8:	2264      	movs	r2, #100	; 0x64
 8000eca:	f003 fd11 	bl	80048f0 <f_read>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7


	  if(res == FR_OK) __NOP(); //birşey yapma.
 8000ed4:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <main+0x78>
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <main+0x7a>
	  else __NOP();
 8000ee0:	bf00      	nop

  else
  {

  }
  fclose(&file);
 8000ee2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 ff10 	bl	8004d0c <fclose>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <main+0x84>
 8000eee:	bf00      	nop
 8000ef0:	08005410 	.word	0x08005410
 8000ef4:	08005414 	.word	0x08005414

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2230      	movs	r2, #48	; 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 f8e8 	bl	80050dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a27      	ldr	r2, [pc, #156]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <SystemClock_Config+0xcc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <SystemClock_Config+0xd0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f6c:	23a8      	movs	r3, #168	; 0xa8
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fd35 	bl	80019ec <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f88:	f000 f89a 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2302      	movs	r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2105      	movs	r1, #5
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 ff96 	bl	8001edc <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fb6:	f000 f883 	bl	80010c0 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3750      	adds	r7, #80	; 0x50
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_SPI2_Init+0x64>)
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <MX_SPI2_Init+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_SPI2_Init+0x64>)
 8000fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_SPI2_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_SPI2_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_SPI2_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_SPI2_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_SPI2_Init+0x64>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_SPI2_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_SPI2_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_SPI2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_SPI2_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_SPI2_Init+0x64>)
 8001018:	220a      	movs	r2, #10
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_SPI2_Init+0x64>)
 800101e:	f001 f949 	bl	80022b4 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001028:	f000 f84a 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000ac 	.word	0x200000ac
 8001034:	40003800 	.word	0x40003800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_GPIO_Init+0x80>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_GPIO_Init+0x80>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_GPIO_Init+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_GPIO_Init+0x80>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <MX_GPIO_Init+0x80>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0x80>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0x84>)
 800108e:	f000 fc93 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_GPIO_Init+0x84>)
 80010ac:	f000 fae8 	bl	8001680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001176:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001194:	f000 fa74 	bl	8001680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40003800 	.word	0x40003800
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f918 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
  }

  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e009      	b.n	8001260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf1      	blt.n	800124c <_write+0x12>
  }
  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f003 fca8 	bl	8004c28 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000104 	.word	0x20000104
 800130c:	20000158 	.word	0x20000158

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800136c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800133a:	490e      	ldr	r1, [pc, #56]	; (8001374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001350:	4c0b      	ldr	r4, [pc, #44]	; (8001380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135e:	f7ff ffd7 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001362:	f003 fe93 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff fd7f 	bl	8000e68 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800136c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001378:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 800137c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001380:	20000158 	.word	0x20000158

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_Init+0x40>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_Init+0x40>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x40>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f931 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fe86 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f93b 	bl	8001666 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f911 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c
 8001450:	20000108 	.word	0x20000108

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000108 	.word	0x20000108

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000000c 	.word	0x2000000c

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff47 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff5c 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffb0 	bl	80015d4 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e16b      	b.n	8001974 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 815a 	bne.w	800196e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d005      	beq.n	80016d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d130      	bne.n	8001734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b03      	cmp	r3, #3
 800173e:	d017      	beq.n	8001770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80b4 	beq.w	800196e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <HAL_GPIO_Init+0x30c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a5f      	ldr	r2, [pc, #380]	; (800198c <HAL_GPIO_Init+0x30c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HAL_GPIO_Init+0x30c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <HAL_GPIO_Init+0x310>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_GPIO_Init+0x314>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d02b      	beq.n	80018a6 <HAL_GPIO_Init+0x226>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a51      	ldr	r2, [pc, #324]	; (8001998 <HAL_GPIO_Init+0x318>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d025      	beq.n	80018a2 <HAL_GPIO_Init+0x222>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a50      	ldr	r2, [pc, #320]	; (800199c <HAL_GPIO_Init+0x31c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01f      	beq.n	800189e <HAL_GPIO_Init+0x21e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4f      	ldr	r2, [pc, #316]	; (80019a0 <HAL_GPIO_Init+0x320>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x21a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <HAL_GPIO_Init+0x324>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x216>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4d      	ldr	r2, [pc, #308]	; (80019a8 <HAL_GPIO_Init+0x328>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x212>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4c      	ldr	r2, [pc, #304]	; (80019ac <HAL_GPIO_Init+0x32c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x20e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4b      	ldr	r2, [pc, #300]	; (80019b0 <HAL_GPIO_Init+0x330>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x20a>
 8001886:	2307      	movs	r3, #7
 8001888:	e00e      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 800188a:	2308      	movs	r3, #8
 800188c:	e00c      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 800188e:	2306      	movs	r3, #6
 8001890:	e00a      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 8001892:	2305      	movs	r3, #5
 8001894:	e008      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 8001896:	2304      	movs	r3, #4
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 800189a:	2303      	movs	r3, #3
 800189c:	e004      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x228>
 80018a6:	2300      	movs	r3, #0
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f002 0203 	and.w	r2, r2, #3
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b8:	4935      	ldr	r1, [pc, #212]	; (8001990 <HAL_GPIO_Init+0x310>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c6:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_GPIO_Init+0x334>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <HAL_GPIO_Init+0x334>)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_GPIO_Init+0x334>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <HAL_GPIO_Init+0x334>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_GPIO_Init+0x334>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_GPIO_Init+0x334>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_GPIO_Init+0x334>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_GPIO_Init+0x334>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b0f      	cmp	r3, #15
 8001978:	f67f ae90 	bls.w	800169c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	40013c00 	.word	0x40013c00

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d4:	e003      	b.n	80019de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e267      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d075      	beq.n	8001af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d00c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a16:	4b85      	ldr	r3, [pc, #532]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d112      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a22:	4b82      	ldr	r3, [pc, #520]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2e:	d10b      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	4b7e      	ldr	r3, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x108>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d157      	bne.n	8001af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e242      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x74>
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b70      	ldr	r3, [pc, #448]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6f      	ldr	r2, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a84:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a68      	ldr	r2, [pc, #416]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b66      	ldr	r3, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fcd6 	bl	8001454 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fcd2 	bl	8001454 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e207      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xc0>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fcc2 	bl	8001454 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fcbe 	bl	8001454 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1f3      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1c7      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x244>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fc77 	bl	8001454 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fc73 	bl	8001454 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1a8      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x244>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc56 	bl	8001454 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc52 	bl	8001454 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e187      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d036      	beq.n	8001c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_RCC_OscConfig+0x248>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fc36 	bl	8001454 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fc32 	bl	8001454 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e167      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x200>
 8001c0a:	e01b      	b.n	8001c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_OscConfig+0x248>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fc1f 	bl	8001454 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00e      	b.n	8001c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fc1b 	bl	8001454 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d907      	bls.n	8001c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e150      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	42470000 	.word	0x42470000
 8001c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ea      	bne.n	8001c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8097 	beq.w	8001d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a7c      	ldr	r2, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a73      	ldr	r2, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fbdb 	bl	8001454 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff fbd7 	bl	8001454 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e10c      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2ea>
 8001cc8:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x324>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x30c>
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x324>
 8001cf8:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f023 0304 	bic.w	r3, r3, #4
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fb9c 	bl	8001454 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fb98 	bl	8001454 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0cb      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCC_OscConfig+0x334>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fb86 	bl	8001454 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fb82 	bl	8001454 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0b5      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ee      	bne.n	8001d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80a1 	beq.w	8001ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d05c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d141      	bne.n	8001e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fb56 	bl	8001454 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fb52 	bl	8001454 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e087      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	491b      	ldr	r1, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb2b 	bl	8001454 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fb27 	bl	8001454 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e05c      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x416>
 8001e20:	e054      	b.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb14 	bl	8001454 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fb10 	bl	8001454 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e045      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x444>
 8001e4e:	e03d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e038      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
 8001e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x4ec>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d028      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0cc      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d90c      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d044      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d119      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e067      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4934      	ldr	r1, [pc, #208]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff fa42 	bl	8001454 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff fa3e 	bl	8001454 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20c      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f9a2 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00
 8002098:	40023800 	.word	0x40023800
 800209c:	08005464 	.word	0x08005464
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b094      	sub	sp, #80	; 0x50
 80020ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	647b      	str	r3, [r7, #68]	; 0x44
 80020b4:	2300      	movs	r3, #0
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b8:	2300      	movs	r3, #0
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c0:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x40>
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	f200 80e1 	bhi.w	8002294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x34>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020da:	e0db      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_RCC_GetSysClockFreq+0x204>)
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020e0:	e0db      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e6:	e0d8      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fe:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	2200      	movs	r2, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
 8002108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
 8002116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800211a:	4622      	mov	r2, r4
 800211c:	462b      	mov	r3, r5
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	0159      	lsls	r1, r3, #5
 8002128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212c:	0150      	lsls	r0, r2, #5
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4621      	mov	r1, r4
 8002134:	1a51      	subs	r1, r2, r1
 8002136:	6139      	str	r1, [r7, #16]
 8002138:	4629      	mov	r1, r5
 800213a:	eb63 0301 	sbc.w	r3, r3, r1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800214c:	4659      	mov	r1, fp
 800214e:	018b      	lsls	r3, r1, #6
 8002150:	4651      	mov	r1, sl
 8002152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002156:	4651      	mov	r1, sl
 8002158:	018a      	lsls	r2, r1, #6
 800215a:	4651      	mov	r1, sl
 800215c:	ebb2 0801 	subs.w	r8, r2, r1
 8002160:	4659      	mov	r1, fp
 8002162:	eb63 0901 	sbc.w	r9, r3, r1
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800217a:	4690      	mov	r8, r2
 800217c:	4699      	mov	r9, r3
 800217e:	4623      	mov	r3, r4
 8002180:	eb18 0303 	adds.w	r3, r8, r3
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	462b      	mov	r3, r5
 8002188:	eb49 0303 	adc.w	r3, r9, r3
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800219a:	4629      	mov	r1, r5
 800219c:	024b      	lsls	r3, r1, #9
 800219e:	4621      	mov	r1, r4
 80021a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021a4:	4621      	mov	r1, r4
 80021a6:	024a      	lsls	r2, r1, #9
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ae:	2200      	movs	r2, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021b8:	f7fe f806 	bl	80001c8 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4613      	mov	r3, r2
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c4:	e058      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	2200      	movs	r2, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	4611      	mov	r1, r2
 80021d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	0159      	lsls	r1, r3, #5
 80021ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021f2:	0150      	lsls	r0, r2, #5
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4641      	mov	r1, r8
 80021fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80021fe:	4649      	mov	r1, r9
 8002200:	eb63 0b01 	sbc.w	fp, r3, r1
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002218:	ebb2 040a 	subs.w	r4, r2, sl
 800221c:	eb63 050b 	sbc.w	r5, r3, fp
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	00eb      	lsls	r3, r5, #3
 800222a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800222e:	00e2      	lsls	r2, r4, #3
 8002230:	4614      	mov	r4, r2
 8002232:	461d      	mov	r5, r3
 8002234:	4643      	mov	r3, r8
 8002236:	18e3      	adds	r3, r4, r3
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	464b      	mov	r3, r9
 800223c:	eb45 0303 	adc.w	r3, r5, r3
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800224e:	4629      	mov	r1, r5
 8002250:	028b      	lsls	r3, r1, #10
 8002252:	4621      	mov	r1, r4
 8002254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002258:	4621      	mov	r1, r4
 800225a:	028a      	lsls	r2, r1, #10
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002262:	2200      	movs	r2, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	61fa      	str	r2, [r7, #28]
 8002268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800226c:	f7fd ffac 	bl	80001c8 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800229c:	4618      	mov	r0, r3
 800229e:	3750      	adds	r7, #80	; 0x50
 80022a0:	46bd      	mov	sp, r7
 80022a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	007a1200 	.word	0x007a1200

080022b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07b      	b.n	80023be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d6:	d009      	beq.n	80022ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
 80022de:	e005      	b.n	80022ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe ff08 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002322:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0104 	and.w	r1, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f003 0210 	and.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b088      	sub	sp, #32
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_SPI_Transmit+0x22>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e126      	b.n	8002636 <HAL_SPI_Transmit+0x270>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f0:	f7ff f830 	bl	8001454 <HAL_GetTick>
 80023f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800240a:	e10b      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Transmit+0x52>
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800241c:	e102      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d10f      	bne.n	8002486 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d007      	beq.n	80024a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ac:	d14b      	bne.n	8002546 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_Transmit+0xf6>
 80024b6:	8afb      	ldrh	r3, [r7, #22]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d13e      	bne.n	800253a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024e0:	e02b      	b.n	800253a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d112      	bne.n	8002516 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	86da      	strh	r2, [r3, #54]	; 0x36
 8002514:	e011      	b.n	800253a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002516:	f7fe ff9d 	bl	8001454 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d803      	bhi.n	800252e <HAL_SPI_Transmit+0x168>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d102      	bne.n	8002534 <HAL_SPI_Transmit+0x16e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002538:	e074      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ce      	bne.n	80024e2 <HAL_SPI_Transmit+0x11c>
 8002544:	e04c      	b.n	80025e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_Transmit+0x18e>
 800254e:	8afb      	ldrh	r3, [r7, #22]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d140      	bne.n	80025d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800257a:	e02c      	b.n	80025d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d113      	bne.n	80025b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80025b0:	e011      	b.n	80025d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b2:	f7fe ff4f 	bl	8001454 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d803      	bhi.n	80025ca <HAL_SPI_Transmit+0x204>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d102      	bne.n	80025d0 <HAL_SPI_Transmit+0x20a>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025d4:	e026      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1cd      	bne.n	800257c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fa55 	bl	8002a94 <SPI_EndRxTxTransaction>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	e000      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002622:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002634:	7ffb      	ldrb	r3, [r7, #31]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b08c      	sub	sp, #48	; 0x30
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x26>
 8002660:	2302      	movs	r3, #2
 8002662:	e18a      	b.n	800297a <HAL_SPI_TransmitReceive+0x33c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266c:	f7fe fef2 	bl	8001454 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800268a:	2b01      	cmp	r3, #1
 800268c:	d00f      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x70>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002694:	d107      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x68>
 800269e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d003      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026ac:	e15b      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x82>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x82>
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026c6:	e14e      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d003      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2205      	movs	r2, #5
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d007      	beq.n	8002730 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	d178      	bne.n	800282c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x10a>
 8002742:	8b7b      	ldrh	r3, [r7, #26]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d166      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800276c:	e053      	b.n	8002816 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x176>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x176>
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d113      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d119      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x1b8>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d014      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	b292      	uxth	r2, r2
 80027d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	1c9a      	adds	r2, r3, #2
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027f6:	f7fe fe2d 	bl	8001454 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002802:	429a      	cmp	r2, r3
 8002804:	d807      	bhi.n	8002816 <HAL_SPI_TransmitReceive+0x1d8>
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d003      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002814:	e0a7      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1a6      	bne.n	800276e <HAL_SPI_TransmitReceive+0x130>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1a1      	bne.n	800276e <HAL_SPI_TransmitReceive+0x130>
 800282a:	e07c      	b.n	8002926 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_SPI_TransmitReceive+0x1fc>
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d16b      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002860:	e057      	b.n	8002912 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	d11c      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x26c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d017      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x26c>
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d114      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d119      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x2ae>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d014      	beq.n	80028ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028ec:	f7fe fdb2 	bl	8001454 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d803      	bhi.n	8002904 <HAL_SPI_TransmitReceive+0x2c6>
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d102      	bne.n	800290a <HAL_SPI_TransmitReceive+0x2cc>
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002910:	e029      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1a2      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x224>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d19d      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f8b2 	bl	8002a94 <SPI_EndRxTxTransaction>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002942:	e010      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	e000      	b.n	8002966 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002964:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800297a:	4618      	mov	r0, r3
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002994:	f7fe fd5e 	bl	8001454 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029a4:	f7fe fd56 	bl	8001454 <HAL_GetTick>
 80029a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	015b      	lsls	r3, r3, #5
 80029b0:	0d1b      	lsrs	r3, r3, #20
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ba:	e054      	b.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d050      	beq.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c4:	f7fe fd46 	bl	8001454 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d902      	bls.n	80029da <SPI_WaitFlagStateUntilTimeout+0x56>
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d13d      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f2:	d111      	bne.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fc:	d004      	beq.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d107      	bne.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a20:	d10f      	bne.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e017      	b.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d19b      	bne.n	80029bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000004 	.word	0x20000004

08002a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <SPI_EndRxTxTransaction+0x7c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <SPI_EndRxTxTransaction+0x80>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0d5b      	lsrs	r3, r3, #21
 8002aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab0:	fb02 f303 	mul.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002abe:	d112      	bne.n	8002ae6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff ff5a 	bl	8002984 <SPI_WaitFlagStateUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e00f      	b.n	8002b06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d0f2      	beq.n	8002ae6 <SPI_EndRxTxTransaction+0x52>
 8002b00:	e000      	b.n	8002b04 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b02:	bf00      	nop
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000004 	.word	0x20000004
 8002b14:	165e9f81 	.word	0x165e9f81

08002b18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&SD_Driver, USERPath);
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <MX_FATFS_Init+0x18>)
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <MX_FATFS_Init+0x1c>)
 8002b20:	f002 f872 	bl	8004c08 <FATFS_LinkDriver>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <MX_FATFS_Init+0x20>)
 8002b2a:	701a      	strb	r2, [r3, #0]
  //Farklı depolama birimlerinden okuma yapılmak istendiğinde burada tanımlama yapılır.

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000110 	.word	0x20000110
 8002b34:	20000010 	.word	0x20000010
 8002b38:	2000010c 	.word	0x2000010c

08002b3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002b40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fe6f 	bl	800083c <SD_disk_initialize>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd ff46 	bl	8000a08 <SD_disk_status>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002b98:	7bf8      	ldrb	r0, [r7, #15]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	f7fd ff48 	bl	8000a34 <SD_disk_read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002bc0:	7bf8      	ldrb	r0, [r7, #15]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	f7fd ff9e 	bl	8000b08 <SD_disk_write>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	603a      	str	r2, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
 8002be4:	460b      	mov	r3, r1
 8002be6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	79b9      	ldrb	r1, [r7, #6]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f80e 	bl	8000c10 <SD_disk_ioctl>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <disk_status+0x30>)
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	79fa      	ldrb	r2, [r7, #7]
 8002c18:	4905      	ldr	r1, [pc, #20]	; (8002c30 <disk_status+0x30>)
 8002c1a:	440a      	add	r2, r1
 8002c1c:	7a12      	ldrb	r2, [r2, #8]
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4798      	blx	r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	2000013c 	.word	0x2000013c

08002c34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <disk_initialize+0x48>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d111      	bne.n	8002c70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <disk_initialize+0x48>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <disk_initialize+0x48>)
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	79fa      	ldrb	r2, [r7, #7]
 8002c62:	4906      	ldr	r1, [pc, #24]	; (8002c7c <disk_initialize+0x48>)
 8002c64:	440a      	add	r2, r1
 8002c66:	7a12      	ldrb	r2, [r2, #8]
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000013c 	.word	0x2000013c

08002c80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <disk_read+0x3c>)
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	689c      	ldr	r4, [r3, #8]
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <disk_read+0x3c>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	7a18      	ldrb	r0, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	47a0      	blx	r4
 8002cac:	4603      	mov	r3, r0
 8002cae:	75fb      	strb	r3, [r7, #23]
  return res;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000013c 	.word	0x2000013c

08002cc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <disk_write+0x3c>)
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	68dc      	ldr	r4, [r3, #12]
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <disk_write+0x3c>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	7a18      	ldrb	r0, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	47a0      	blx	r4
 8002cec:	4603      	mov	r3, r0
 8002cee:	75fb      	strb	r3, [r7, #23]
  return res;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000013c 	.word	0x2000013c

08002d00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002d22:	89fb      	ldrh	r3, [r7, #14]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	3202      	adds	r2, #2
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	3201      	adds	r2, #1
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
	return rv;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	1c53      	adds	r3, r2, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	6179      	str	r1, [r7, #20]
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f1      	bne.n	8002e1e <mem_cpy+0x1a>
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002e46:	b480      	push	{r7}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	617a      	str	r2, [r7, #20]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f3      	bne.n	8002e56 <mem_set+0x10>
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	61fa      	str	r2, [r7, #28]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	61ba      	str	r2, [r7, #24]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	1acb      	subs	r3, r1, r3
 8002ea8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <mem_cmp+0x40>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0eb      	beq.n	8002e94 <mem_cmp+0x18>

	return r;
 8002ebc:	697b      	ldr	r3, [r7, #20]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002ed4:	e002      	b.n	8002edc <chk_chr+0x12>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <chk_chr+0x26>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d1f2      	bne.n	8002ed6 <chk_chr+0xc>
	return *str;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e029      	b.n	8002f68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <chk_lock+0xb4>)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01d      	beq.n	8002f5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <chk_lock+0xb4>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	4413      	add	r3, r2
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d116      	bne.n	8002f62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002f34:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <chk_lock+0xb4>)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10c      	bne.n	8002f62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <chk_lock+0xb4>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	3308      	adds	r3, #8
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d102      	bne.n	8002f62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002f5c:	e007      	b.n	8002f6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3301      	adds	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d9d2      	bls.n	8002f14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d109      	bne.n	8002f88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <chk_lock+0x80>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d101      	bne.n	8002f84 <chk_lock+0x84>
 8002f80:	2300      	movs	r3, #0
 8002f82:	e010      	b.n	8002fa6 <chk_lock+0xa6>
 8002f84:	2312      	movs	r3, #18
 8002f86:	e00e      	b.n	8002fa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <chk_lock+0xa0>
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <chk_lock+0xb4>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	330c      	adds	r3, #12
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9e:	d101      	bne.n	8002fa4 <chk_lock+0xa4>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	e000      	b.n	8002fa6 <chk_lock+0xa6>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000011c 	.word	0x2000011c

08002fb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	e002      	b.n	8002fca <enq_lock+0x12>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d806      	bhi.n	8002fde <enq_lock+0x26>
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <enq_lock+0x40>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f2      	bne.n	8002fc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000011c 	.word	0x2000011c

08002ffc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e01f      	b.n	800304c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800300c:	4a41      	ldr	r2, [pc, #260]	; (8003114 <inc_lock+0x118>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	4413      	add	r3, r2
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d113      	bne.n	8003046 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <inc_lock+0x118>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800302e:	429a      	cmp	r2, r3
 8003030:	d109      	bne.n	8003046 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003032:	4a38      	ldr	r2, [pc, #224]	; (8003114 <inc_lock+0x118>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4413      	add	r3, r2
 800303a:	3308      	adds	r3, #8
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003042:	429a      	cmp	r2, r3
 8003044:	d006      	beq.n	8003054 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d9dc      	bls.n	800300c <inc_lock+0x10>
 8003052:	e000      	b.n	8003056 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003054:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d132      	bne.n	80030c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e002      	b.n	8003068 <inc_lock+0x6c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3301      	adds	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d806      	bhi.n	800307c <inc_lock+0x80>
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <inc_lock+0x118>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	4413      	add	r3, r2
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f2      	bne.n	8003062 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d101      	bne.n	8003086 <inc_lock+0x8a>
 8003082:	2300      	movs	r3, #0
 8003084:	e040      	b.n	8003108 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4922      	ldr	r1, [pc, #136]	; (8003114 <inc_lock+0x118>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	440b      	add	r3, r1
 8003092:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	491e      	ldr	r1, [pc, #120]	; (8003114 <inc_lock+0x118>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	440b      	add	r3, r1
 80030a0:	3304      	adds	r3, #4
 80030a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	491a      	ldr	r1, [pc, #104]	; (8003114 <inc_lock+0x118>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	440b      	add	r3, r1
 80030b0:	3308      	adds	r3, #8
 80030b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80030b4:	4a17      	ldr	r2, [pc, #92]	; (8003114 <inc_lock+0x118>)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	330c      	adds	r3, #12
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <inc_lock+0xe0>
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <inc_lock+0x118>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	330c      	adds	r3, #12
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <inc_lock+0xe0>
 80030d8:	2300      	movs	r3, #0
 80030da:	e015      	b.n	8003108 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <inc_lock+0xf8>
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <inc_lock+0x118>)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	330c      	adds	r3, #12
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	e001      	b.n	80030f8 <inc_lock+0xfc>
 80030f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <inc_lock+0x118>)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	440b      	add	r3, r1
 8003100:	330c      	adds	r3, #12
 8003102:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	2000011c 	.word	0x2000011c

08003118 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e010      	b.n	8003148 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003126:	4a0d      	ldr	r2, [pc, #52]	; (800315c <clear_lock+0x44>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	d105      	bne.n	8003142 <clear_lock+0x2a>
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <clear_lock+0x44>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	4413      	add	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d9eb      	bls.n	8003126 <clear_lock+0xe>
	}
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	2000011c 	.word	0x2000011c

08003160 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	78db      	ldrb	r3, [r3, #3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d034      	beq.n	80031de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7858      	ldrb	r0, [r3, #1]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003184:	2301      	movs	r3, #1
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	f7ff fd9a 	bl	8002cc0 <disk_write>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e022      	b.n	80031de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	1ad2      	subs	r2, r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d217      	bcs.n	80031de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	789b      	ldrb	r3, [r3, #2]
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e010      	b.n	80031d8 <sync_window+0x78>
					wsect += fs->fsize;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7858      	ldrb	r0, [r3, #1]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031ca:	2301      	movs	r3, #1
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	f7ff fd77 	bl	8002cc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d8eb      	bhi.n	80031b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d01b      	beq.n	8003238 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ffad 	bl	8003160 <sync_window>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7858      	ldrb	r0, [r3, #1]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800321a:	2301      	movs	r3, #1
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	f7ff fd2f 	bl	8002c80 <disk_read>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	3b02      	subs	r3, #2
 8003250:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	3b02      	subs	r3, #2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d301      	bcc.n	8003262 <clust2sect+0x20>
 800325e:	2300      	movs	r3, #0
 8003260:	e008      	b.n	8003274 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	895b      	ldrh	r3, [r3, #10]
 8003266:	461a      	mov	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	fb03 f202 	mul.w	r2, r3, r2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	4413      	add	r3, r2
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d904      	bls.n	80032a0 <get_fat+0x20>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80032a0:	2301      	movs	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e08f      	b.n	80033c6 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d062      	beq.n	800337a <get_fat+0xfa>
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	dc7c      	bgt.n	80033b2 <get_fat+0x132>
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d002      	beq.n	80032c2 <get_fat+0x42>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d042      	beq.n	8003346 <get_fat+0xc6>
 80032c0:	e077      	b.n	80033b2 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	0a5b      	lsrs	r3, r3, #9
 80032d8:	4413      	add	r3, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	6938      	ldr	r0, [r7, #16]
 80032de:	f7ff ff83 	bl	80031e8 <move_window>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d167      	bne.n	80033b8 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	60fa      	str	r2, [r7, #12]
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	4413      	add	r3, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6938      	ldr	r0, [r7, #16]
 800330a:	f7ff ff6d 	bl	80031e8 <move_window>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d153      	bne.n	80033bc <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4313      	orrs	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <get_fat+0xbc>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	e002      	b.n	8003342 <get_fat+0xc2>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	617b      	str	r3, [r7, #20]
			break;
 8003344:	e03f      	b.n	80033c6 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	4413      	add	r3, r2
 8003350:	4619      	mov	r1, r3
 8003352:	6938      	ldr	r0, [r7, #16]
 8003354:	f7ff ff48 	bl	80031e8 <move_window>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d130      	bne.n	80033c0 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800336c:	4413      	add	r3, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fcc6 	bl	8002d00 <ld_word>
 8003374:	4603      	mov	r3, r0
 8003376:	617b      	str	r3, [r7, #20]
			break;
 8003378:	e025      	b.n	80033c6 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6a1a      	ldr	r2, [r3, #32]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	09db      	lsrs	r3, r3, #7
 8003382:	4413      	add	r3, r2
 8003384:	4619      	mov	r1, r3
 8003386:	6938      	ldr	r0, [r7, #16]
 8003388:	f7ff ff2e 	bl	80031e8 <move_window>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80033a0:	4413      	add	r3, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fcc4 	bl	8002d30 <ld_dword>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033ae:	617b      	str	r3, [r7, #20]
			break;
 80033b0:	e009      	b.n	80033c6 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e006      	b.n	80033c6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80033c4:	bf00      	nop
		}
	}

	return val;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80033dc:	2302      	movs	r3, #2
 80033de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	f240 80d2 	bls.w	800358c <put_fat+0x1bc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	f080 80cc 	bcs.w	800358c <put_fat+0x1bc>
		switch (fs->fs_type) {
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	f000 8096 	beq.w	800352a <put_fat+0x15a>
 80033fe:	2b03      	cmp	r3, #3
 8003400:	f300 80cd 	bgt.w	800359e <put_fat+0x1ce>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <put_fat+0x3e>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d06e      	beq.n	80034ea <put_fat+0x11a>
 800340c:	e0c7      	b.n	800359e <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4413      	add	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	4413      	add	r3, r2
 8003426:	4619      	mov	r1, r3
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fedd 	bl	80031e8 <move_window>
 800342e:	4603      	mov	r3, r0
 8003430:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 80ab 	bne.w	8003590 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	61b9      	str	r1, [r7, #24]
 8003446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344a:	4413      	add	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <put_fat+0xa4>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	b25a      	sxtb	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b25b      	sxtb	r3, r3
 800346c:	4313      	orrs	r3, r2
 800346e:	b25b      	sxtb	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e001      	b.n	8003478 <put_fat+0xa8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	0a5b      	lsrs	r3, r3, #9
 800348a:	4413      	add	r3, r2
 800348c:	4619      	mov	r1, r3
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff feaa 	bl	80031e8 <move_window>
 8003494:	4603      	mov	r3, r0
 8003496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d17a      	bne.n	8003594 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034aa:	4413      	add	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <put_fat+0xf0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e00e      	b.n	80034de <put_fat+0x10e>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	4313      	orrs	r3, r2
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	70da      	strb	r2, [r3, #3]
			break;
 80034e8:	e059      	b.n	800359e <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1a      	ldr	r2, [r3, #32]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	4413      	add	r3, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fe76 	bl	80031e8 <move_window>
 80034fc:	4603      	mov	r3, r0
 80034fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003500:	7ffb      	ldrb	r3, [r7, #31]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d148      	bne.n	8003598 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003514:	4413      	add	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	b292      	uxth	r2, r2
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fc2a 	bl	8002d76 <st_word>
			fs->wflag = 1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	70da      	strb	r2, [r3, #3]
			break;
 8003528:	e039      	b.n	800359e <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	09db      	lsrs	r3, r3, #7
 8003532:	4413      	add	r3, r2
 8003534:	4619      	mov	r1, r3
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fe56 	bl	80031e8 <move_window>
 800353c:	4603      	mov	r3, r0
 800353e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003540:	7ffb      	ldrb	r3, [r7, #31]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12a      	bne.n	800359c <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800355a:	4413      	add	r3, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fbe7 	bl	8002d30 <ld_dword>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003568:	4323      	orrs	r3, r4
 800356a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800357a:	4413      	add	r3, r2
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fc14 	bl	8002dac <st_dword>
			fs->wflag = 1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	70da      	strb	r2, [r3, #3]
			break;
 800358a:	e008      	b.n	800359e <put_fat+0x1ce>
		}
	}
 800358c:	bf00      	nop
 800358e:	e006      	b.n	800359e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003590:	bf00      	nop
 8003592:	e004      	b.n	800359e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003594:	bf00      	nop
 8003596:	e002      	b.n	800359e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003598:	bf00      	nop
 800359a:	e000      	b.n	800359e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800359c:	bf00      	nop
	return res;
 800359e:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3724      	adds	r7, #36	; 0x24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}

080035a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d904      	bls.n	80035ce <remove_chain+0x26>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d301      	bcc.n	80035d2 <remove_chain+0x2a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e04b      	b.n	800366a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	69b8      	ldr	r0, [r7, #24]
 80035e0:	f7ff fef6 	bl	80033d0 <put_fat>
 80035e4:	4603      	mov	r3, r0
 80035e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <remove_chain+0x4a>
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	e03b      	b.n	800366a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff fe43 	bl	8003280 <get_fat>
 80035fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d031      	beq.n	8003666 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <remove_chain+0x64>
 8003608:	2302      	movs	r3, #2
 800360a:	e02e      	b.n	800366a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d101      	bne.n	8003618 <remove_chain+0x70>
 8003614:	2301      	movs	r3, #1
 8003616:	e028      	b.n	800366a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003618:	2200      	movs	r2, #0
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	69b8      	ldr	r0, [r7, #24]
 800361e:	f7ff fed7 	bl	80033d0 <put_fat>
 8003622:	4603      	mov	r3, r0
 8003624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <remove_chain+0x88>
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	e01c      	b.n	800366a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	3b02      	subs	r3, #2
 800363a:	429a      	cmp	r2, r3
 800363c:	d20b      	bcs.n	8003656 <remove_chain+0xae>
			fs->free_clst++;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	791b      	ldrb	r3, [r3, #4]
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d3c6      	bcc.n	80035f2 <remove_chain+0x4a>
 8003664:	e000      	b.n	8003668 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003666:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <create_chain+0x2c>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	429a      	cmp	r2, r3
 800369c:	d31b      	bcc.n	80036d6 <create_chain+0x64>
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e018      	b.n	80036d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fdea 	bl	8003280 <get_fat>
 80036ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d801      	bhi.n	80036b8 <create_chain+0x46>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e070      	b.n	800379a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d101      	bne.n	80036c4 <create_chain+0x52>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	e06a      	b.n	800379a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d201      	bcs.n	80036d2 <create_chain+0x60>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	e063      	b.n	800379a <create_chain+0x128>
		scl = clst;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d307      	bcc.n	80036fa <create_chain+0x88>
				ncl = 2;
 80036ea:	2302      	movs	r3, #2
 80036ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d901      	bls.n	80036fa <create_chain+0x88>
 80036f6:	2300      	movs	r3, #0
 80036f8:	e04f      	b.n	800379a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80036fa:	69f9      	ldr	r1, [r7, #28]
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fdbf 	bl	8003280 <get_fat>
 8003702:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d003      	beq.n	8003718 <create_chain+0xa6>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d101      	bne.n	800371c <create_chain+0xaa>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	e03e      	b.n	800379a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d1da      	bne.n	80036da <create_chain+0x68>
 8003724:	2300      	movs	r3, #0
 8003726:	e038      	b.n	800379a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003728:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	69f9      	ldr	r1, [r7, #28]
 8003730:	6938      	ldr	r0, [r7, #16]
 8003732:	f7ff fe4d 	bl	80033d0 <put_fat>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <create_chain+0xe2>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	6839      	ldr	r1, [r7, #0]
 800374a:	6938      	ldr	r0, [r7, #16]
 800374c:	f7ff fe40 	bl	80033d0 <put_fat>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <create_chain+0x116>
		fs->last_clst = ncl;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	3b02      	subs	r3, #2
 800376a:	429a      	cmp	r2, r3
 800376c:	d804      	bhi.n	8003778 <create_chain+0x106>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	1e5a      	subs	r2, r3, #1
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	791b      	ldrb	r3, [r3, #4]
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	711a      	strb	r2, [r3, #4]
 8003786:	e007      	b.n	8003798 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <create_chain+0x122>
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e000      	b.n	8003796 <create_chain+0x124>
 8003794:	2301      	movs	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003798:	69fb      	ldr	r3, [r7, #28]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b087      	sub	sp, #28
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	3304      	adds	r3, #4
 80037b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	0a5b      	lsrs	r3, r3, #9
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	8952      	ldrh	r2, [r2, #10]
 80037c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	613a      	str	r2, [r7, #16]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <clmt_clust+0x3a>
 80037d8:	2300      	movs	r3, #0
 80037da:	e010      	b.n	80037fe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d307      	bcc.n	80037f4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	3304      	adds	r3, #4
 80037f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80037f2:	e7e9      	b.n	80037c8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80037f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4413      	add	r3, r2
}
 80037fe:	4618      	mov	r0, r3
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003820:	d204      	bcs.n	800382c <dir_sdi+0x22>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <dir_sdi+0x26>
		return FR_INT_ERR;
 800382c:	2302      	movs	r3, #2
 800382e:	e063      	b.n	80038f8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <dir_sdi+0x46>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d902      	bls.n	8003850 <dir_sdi+0x46>
		clst = fs->dirbase;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	8912      	ldrh	r2, [r2, #8]
 800385e:	4293      	cmp	r3, r2
 8003860:	d301      	bcc.n	8003866 <dir_sdi+0x5c>
 8003862:	2302      	movs	r3, #2
 8003864:	e048      	b.n	80038f8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	61da      	str	r2, [r3, #28]
 800386e:	e029      	b.n	80038c4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	895b      	ldrh	r3, [r3, #10]
 8003874:	025b      	lsls	r3, r3, #9
 8003876:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003878:	e019      	b.n	80038ae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fcfe 	bl	8003280 <get_fat>
 8003884:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d101      	bne.n	8003892 <dir_sdi+0x88>
 800388e:	2301      	movs	r3, #1
 8003890:	e032      	b.n	80038f8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d904      	bls.n	80038a2 <dir_sdi+0x98>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d301      	bcc.n	80038a6 <dir_sdi+0x9c>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e028      	b.n	80038f8 <dir_sdi+0xee>
			ofs -= csz;
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d2e1      	bcs.n	800387a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	6938      	ldr	r0, [r7, #16]
 80038ba:	f7ff fcc2 	bl	8003242 <clust2sect>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <dir_sdi+0xcc>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e010      	b.n	80038f8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	441a      	add	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	3320      	adds	r3, #32
 8003916:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <dir_next+0x28>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003926:	d301      	bcc.n	800392c <dir_next+0x2c>
 8003928:	2304      	movs	r3, #4
 800392a:	e0aa      	b.n	8003a82 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8098 	bne.w	8003a68 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	8912      	ldrh	r2, [r2, #8]
 8003952:	4293      	cmp	r3, r2
 8003954:	f0c0 8088 	bcc.w	8003a68 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	2304      	movs	r3, #4
 8003960:	e08f      	b.n	8003a82 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0a5b      	lsrs	r3, r3, #9
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	8952      	ldrh	r2, [r2, #10]
 800396a:	3a01      	subs	r2, #1
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d17a      	bne.n	8003a68 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7ff fc80 	bl	8003280 <get_fat>
 8003980:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d801      	bhi.n	800398c <dir_next+0x8c>
 8003988:	2302      	movs	r3, #2
 800398a:	e07a      	b.n	8003a82 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d101      	bne.n	8003998 <dir_next+0x98>
 8003994:	2301      	movs	r3, #1
 8003996:	e074      	b.n	8003a82 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d358      	bcc.n	8003a54 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
 80039ae:	2304      	movs	r3, #4
 80039b0:	e067      	b.n	8003a82 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7ff fe59 	bl	8003672 <create_chain>
 80039c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <dir_next+0xcc>
 80039c8:	2307      	movs	r3, #7
 80039ca:	e05a      	b.n	8003a82 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <dir_next+0xd6>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e055      	b.n	8003a82 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d101      	bne.n	80039e2 <dir_next+0xe2>
 80039de:	2301      	movs	r3, #1
 80039e0:	e04f      	b.n	8003a82 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff fbbc 	bl	8003160 <sync_window>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <dir_next+0xf2>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e047      	b.n	8003a82 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3330      	adds	r3, #48	; 0x30
 80039f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fa22 	bl	8002e46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fc1a 	bl	8003242 <clust2sect>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a14:	e012      	b.n	8003a3c <dir_next+0x13c>
						fs->wflag = 1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff fb9f 	bl	8003160 <sync_window>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <dir_next+0x12c>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e02a      	b.n	8003a82 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	461a      	mov	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d3e6      	bcc.n	8003a16 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff fbf0 	bl	8003242 <clust2sect>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff feb4 	bl	800380a <dir_sdi>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d12b      	bne.n	8003b04 <dir_alloc+0x7a>
		n = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fb96 	bl	80031e8 <move_window>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11d      	bne.n	8003b02 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2be5      	cmp	r3, #229	; 0xe5
 8003ace:	d004      	beq.n	8003ada <dir_alloc+0x50>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d102      	bne.n	8003aee <dir_alloc+0x64>
 8003ae8:	e00c      	b.n	8003b04 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003aee:	2101      	movs	r1, #1
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff05 	bl	8003900 <dir_next>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0d7      	beq.n	8003ab0 <dir_alloc+0x26>
 8003b00:	e000      	b.n	8003b04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003b02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d101      	bne.n	8003b0e <dir_alloc+0x84>
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	75fb      	strb	r3, [r7, #23]
	return res;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	331a      	adds	r3, #26
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f8ea 	bl	8002d00 <ld_word>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d109      	bne.n	8003b4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f8df 	bl	8002d00 <ld_word>
 8003b42:	4603      	mov	r3, r0
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	331a      	adds	r3, #26
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f902 	bl	8002d76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d109      	bne.n	8003b8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f103 0214 	add.w	r2, r3, #20
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7ff f8f4 	bl	8002d76 <st_word>
	}
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fe2f 	bl	800380a <dir_sdi>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <dir_find+0x24>
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	e03e      	b.n	8003c38 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6938      	ldr	r0, [r7, #16]
 8003bc2:	f7ff fb11 	bl	80031e8 <move_window>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12f      	bne.n	8003c30 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <dir_find+0x4e>
 8003bde:	2304      	movs	r3, #4
 8003be0:	75fb      	strb	r3, [r7, #23]
 8003be2:	e028      	b.n	8003c36 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	330b      	adds	r3, #11
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	330b      	adds	r3, #11
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <dir_find+0x86>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a18      	ldr	r0, [r3, #32]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3324      	adds	r3, #36	; 0x24
 8003c0e:	220b      	movs	r2, #11
 8003c10:	4619      	mov	r1, r3
 8003c12:	f7ff f933 	bl	8002e7c <mem_cmp>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe6e 	bl	8003900 <dir_next>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0c5      	beq.n	8003bba <dir_find+0x24>
 8003c2e:	e002      	b.n	8003c36 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003c34:	bf00      	nop

	return res;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003c4e:	2101      	movs	r1, #1
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff1a 	bl	8003a8a <dir_alloc>
 8003c56:	4603      	mov	r3, r0
 8003c58:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11c      	bne.n	8003c9a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4619      	mov	r1, r3
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f7ff fabe 	bl	80031e8 <move_window>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d111      	bne.n	8003c9a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff f8e1 	bl	8002e46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a18      	ldr	r0, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	220b      	movs	r2, #11
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f7ff f8b8 	bl	8002e04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2201      	movs	r2, #1
 8003c98:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003cba:	220b      	movs	r2, #11
 8003cbc:	2120      	movs	r1, #32
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f7ff f8c1 	bl	8002e46 <mem_set>
	si = i = 0; ni = 8;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	2308      	movs	r3, #8
 8003cce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	61fa      	str	r2, [r7, #28]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003cde:	7efb      	ldrb	r3, [r7, #27]
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d94e      	bls.n	8003d82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003ce4:	7efb      	ldrb	r3, [r7, #27]
 8003ce6:	2b2f      	cmp	r3, #47	; 0x2f
 8003ce8:	d006      	beq.n	8003cf8 <create_name+0x54>
 8003cea:	7efb      	ldrb	r3, [r7, #27]
 8003cec:	2b5c      	cmp	r3, #92	; 0x5c
 8003cee:	d110      	bne.n	8003d12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003cf0:	e002      	b.n	8003cf8 <create_name+0x54>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b2f      	cmp	r3, #47	; 0x2f
 8003d02:	d0f6      	beq.n	8003cf2 <create_name+0x4e>
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b5c      	cmp	r3, #92	; 0x5c
 8003d0e:	d0f0      	beq.n	8003cf2 <create_name+0x4e>
			break;
 8003d10:	e038      	b.n	8003d84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003d12:	7efb      	ldrb	r3, [r7, #27]
 8003d14:	2b2e      	cmp	r3, #46	; 0x2e
 8003d16:	d003      	beq.n	8003d20 <create_name+0x7c>
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d30c      	bcc.n	8003d3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b0b      	cmp	r3, #11
 8003d24:	d002      	beq.n	8003d2c <create_name+0x88>
 8003d26:	7efb      	ldrb	r3, [r7, #27]
 8003d28:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2a:	d001      	beq.n	8003d30 <create_name+0x8c>
 8003d2c:	2306      	movs	r3, #6
 8003d2e:	e044      	b.n	8003dba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003d30:	2308      	movs	r3, #8
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	230b      	movs	r3, #11
 8003d36:	617b      	str	r3, [r7, #20]
			continue;
 8003d38:	e022      	b.n	8003d80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003d3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da04      	bge.n	8003d4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003d42:	7efb      	ldrb	r3, [r7, #27]
 8003d44:	3b80      	subs	r3, #128	; 0x80
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <create_name+0x120>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003d4c:	7efb      	ldrb	r3, [r7, #27]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	481d      	ldr	r0, [pc, #116]	; (8003dc8 <create_name+0x124>)
 8003d52:	f7ff f8ba 	bl	8002eca <chk_chr>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <create_name+0xbc>
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	e02c      	b.n	8003dba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003d60:	7efb      	ldrb	r3, [r7, #27]
 8003d62:	2b60      	cmp	r3, #96	; 0x60
 8003d64:	d905      	bls.n	8003d72 <create_name+0xce>
 8003d66:	7efb      	ldrb	r3, [r7, #27]
 8003d68:	2b7a      	cmp	r3, #122	; 0x7a
 8003d6a:	d802      	bhi.n	8003d72 <create_name+0xce>
 8003d6c:	7efb      	ldrb	r3, [r7, #27]
 8003d6e:	3b20      	subs	r3, #32
 8003d70:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	613a      	str	r2, [r7, #16]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	7efa      	ldrb	r2, [r7, #27]
 8003d7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003d80:	e7a6      	b.n	8003cd0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003d82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	441a      	add	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <create_name+0xf4>
 8003d94:	2306      	movs	r3, #6
 8003d96:	e010      	b.n	8003dba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2be5      	cmp	r3, #229	; 0xe5
 8003d9e:	d102      	bne.n	8003da6 <create_name+0x102>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2205      	movs	r2, #5
 8003da4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003da6:	7efb      	ldrb	r3, [r7, #27]
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d801      	bhi.n	8003db0 <create_name+0x10c>
 8003dac:	2204      	movs	r2, #4
 8003dae:	e000      	b.n	8003db2 <create_name+0x10e>
 8003db0:	2200      	movs	r2, #0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	330b      	adds	r3, #11
 8003db6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003db8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	08005474 	.word	0x08005474
 8003dc8:	08005420 	.word	0x08005420

08003dcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003de0:	e002      	b.n	8003de8 <follow_path+0x1c>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b2f      	cmp	r3, #47	; 0x2f
 8003dee:	d0f8      	beq.n	8003de2 <follow_path+0x16>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b5c      	cmp	r3, #92	; 0x5c
 8003df6:	d0f4      	beq.n	8003de2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b1f      	cmp	r3, #31
 8003e04:	d80a      	bhi.n	8003e1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fcfa 	bl	800380a <dir_sdi>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
 8003e1a:	e043      	b.n	8003ea4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff3f 	bl	8003ca4 <create_name>
 8003e26:	4603      	mov	r3, r0
 8003e28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d134      	bne.n	8003e9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff feb0 	bl	8003b96 <dir_find>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d127      	bne.n	8003e9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003e4e:	7afb      	ldrb	r3, [r7, #11]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d122      	bne.n	8003e9e <follow_path+0xd2>
 8003e58:	2305      	movs	r3, #5
 8003e5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003e5c:	e01f      	b.n	8003e9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11c      	bne.n	8003ea2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	799b      	ldrb	r3, [r3, #6]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003e74:	2305      	movs	r3, #5
 8003e76:	75fb      	strb	r3, [r7, #23]
 8003e78:	e014      	b.n	8003ea4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e88:	4413      	add	r3, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fe43 	bl	8003b18 <ld_clust>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003e98:	e7c0      	b.n	8003e1c <follow_path+0x50>
			if (res != FR_OK) break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <follow_path+0xd8>
				break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ea2:	bf00      	nop
			}
		}
	}

	return res;
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d031      	beq.n	8003f28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e002      	b.n	8003ed2 <get_ldnumber+0x24>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d903      	bls.n	8003ee2 <get_ldnumber+0x34>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b3a      	cmp	r3, #58	; 0x3a
 8003ee0:	d1f4      	bne.n	8003ecc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b3a      	cmp	r3, #58	; 0x3a
 8003ee8:	d11c      	bne.n	8003f24 <get_ldnumber+0x76>
			tp = *path;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	60fa      	str	r2, [r7, #12]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	3b30      	subs	r3, #48	; 0x30
 8003efa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b09      	cmp	r3, #9
 8003f00:	d80e      	bhi.n	8003f20 <get_ldnumber+0x72>
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d10a      	bne.n	8003f20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <get_ldnumber+0x72>
					vol = (int)i;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	e002      	b.n	8003f2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003f28:	693b      	ldr	r3, [r7, #16]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	70da      	strb	r2, [r3, #3]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff f948 	bl	80031e8 <move_window>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <check_fs+0x2a>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	e038      	b.n	8003fd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3330      	adds	r3, #48	; 0x30
 8003f66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fec8 	bl	8002d00 <ld_word>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <check_fs+0x48>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e029      	b.n	8003fd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f86:	2be9      	cmp	r3, #233	; 0xe9
 8003f88:	d009      	beq.n	8003f9e <check_fs+0x66>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f90:	2beb      	cmp	r3, #235	; 0xeb
 8003f92:	d11e      	bne.n	8003fd2 <check_fs+0x9a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f9a:	2b90      	cmp	r3, #144	; 0x90
 8003f9c:	d119      	bne.n	8003fd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3330      	adds	r3, #48	; 0x30
 8003fa2:	3336      	adds	r3, #54	; 0x36
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fec3 	bl	8002d30 <ld_dword>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <check_fs+0xa4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <check_fs+0x82>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e00c      	b.n	8003fd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	3352      	adds	r3, #82	; 0x52
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe feb5 	bl	8002d30 <ld_dword>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <check_fs+0xa8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <check_fs+0x9a>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003fd2:	2302      	movs	r3, #2
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00544146 	.word	0x00544146
 8003fe0:	33544146 	.word	0x33544146

08003fe4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b096      	sub	sp, #88	; 0x58
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff58 	bl	8003eae <get_ldnumber>
 8003ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	da01      	bge.n	800400a <find_volume+0x26>
 8004006:	230b      	movs	r3, #11
 8004008:	e22d      	b.n	8004466 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800400a:	4aa1      	ldr	r2, [pc, #644]	; (8004290 <find_volume+0x2ac>)
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <find_volume+0x3a>
 800401a:	230c      	movs	r3, #12
 800401c:	e223      	b.n	8004466 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004022:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01a      	beq.n	800406a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fde1 	bl	8002c00 <disk_status>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10c      	bne.n	800406a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <find_volume+0x82>
 8004056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004062:	230a      	movs	r3, #10
 8004064:	e1ff      	b.n	8004466 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004066:	2300      	movs	r3, #0
 8004068:	e1fd      	b.n	8004466 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fdd9 	bl	8002c34 <disk_initialize>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004094:	2303      	movs	r3, #3
 8004096:	e1e6      	b.n	8004466 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <find_volume+0xca>
 800409e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80040aa:	230a      	movs	r3, #10
 80040ac:	e1db      	b.n	8004466 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80040b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040b6:	f7ff ff3f 	bl	8003f38 <check_fs>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80040c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d149      	bne.n	800415c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80040c8:	2300      	movs	r3, #0
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
 80040cc:	e01e      	b.n	800410c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80040dc:	4413      	add	r3, r2
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3304      	adds	r3, #4
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <find_volume+0x114>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3308      	adds	r3, #8
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fe1e 	bl	8002d30 <ld_dword>
 80040f4:	4602      	mov	r2, r0
 80040f6:	e000      	b.n	80040fa <find_volume+0x116>
 80040f8:	2200      	movs	r2, #0
 80040fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3358      	adds	r3, #88	; 0x58
 8004100:	443b      	add	r3, r7
 8004102:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	3301      	adds	r3, #1
 800410a:	643b      	str	r3, [r7, #64]	; 0x40
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	2b03      	cmp	r3, #3
 8004110:	d9dd      	bls.n	80040ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004112:	2300      	movs	r3, #0
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <find_volume+0x13e>
 800411c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411e:	3b01      	subs	r3, #1
 8004120:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3358      	adds	r3, #88	; 0x58
 8004128:	443b      	add	r3, r7
 800412a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800412e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <find_volume+0x15e>
 8004136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800413a:	f7ff fefd 	bl	8003f38 <check_fs>
 800413e:	4603      	mov	r3, r0
 8004140:	e000      	b.n	8004144 <find_volume+0x160>
 8004142:	2303      	movs	r3, #3
 8004144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800414c:	2b01      	cmp	r3, #1
 800414e:	d905      	bls.n	800415c <find_volume+0x178>
 8004150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004152:	3301      	adds	r3, #1
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
 8004156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004158:	2b03      	cmp	r3, #3
 800415a:	d9e2      	bls.n	8004122 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800415c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004160:	2b04      	cmp	r3, #4
 8004162:	d101      	bne.n	8004168 <find_volume+0x184>
 8004164:	2301      	movs	r3, #1
 8004166:	e17e      	b.n	8004466 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800416c:	2b01      	cmp	r3, #1
 800416e:	d901      	bls.n	8004174 <find_volume+0x190>
 8004170:	230d      	movs	r3, #13
 8004172:	e178      	b.n	8004466 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	3330      	adds	r3, #48	; 0x30
 8004178:	330b      	adds	r3, #11
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fdc0 	bl	8002d00 <ld_word>
 8004180:	4603      	mov	r3, r0
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d001      	beq.n	800418c <find_volume+0x1a8>
 8004188:	230d      	movs	r3, #13
 800418a:	e16c      	b.n	8004466 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	3330      	adds	r3, #48	; 0x30
 8004190:	3316      	adds	r3, #22
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fdb4 	bl	8002d00 <ld_word>
 8004198:	4603      	mov	r3, r0
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <find_volume+0x1cc>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	3330      	adds	r3, #48	; 0x30
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fdc1 	bl	8002d30 <ld_dword>
 80041ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	789b      	ldrb	r3, [r3, #2]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <find_volume+0x1f0>
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d001      	beq.n	80041d4 <find_volume+0x1f0>
 80041d0:	230d      	movs	r3, #13
 80041d2:	e148      	b.n	8004466 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	789b      	ldrb	r3, [r3, #2]
 80041d8:	461a      	mov	r2, r3
 80041da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	895b      	ldrh	r3, [r3, #10]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <find_volume+0x224>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	895b      	ldrh	r3, [r3, #10]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	895b      	ldrh	r3, [r3, #10]
 8004200:	3b01      	subs	r3, #1
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <find_volume+0x228>
 8004208:	230d      	movs	r3, #13
 800420a:	e12c      	b.n	8004466 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	3330      	adds	r3, #48	; 0x30
 8004210:	3311      	adds	r3, #17
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd74 	bl	8002d00 <ld_word>
 8004218:	4603      	mov	r3, r0
 800421a:	461a      	mov	r2, r3
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	891b      	ldrh	r3, [r3, #8]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <find_volume+0x24e>
 800422e:	230d      	movs	r3, #13
 8004230:	e119      	b.n	8004466 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	3330      	adds	r3, #48	; 0x30
 8004236:	3313      	adds	r3, #19
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fd61 	bl	8002d00 <ld_word>
 800423e:	4603      	mov	r3, r0
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <find_volume+0x272>
 8004248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424a:	3330      	adds	r3, #48	; 0x30
 800424c:	3320      	adds	r3, #32
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fd6e 	bl	8002d30 <ld_dword>
 8004254:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	3330      	adds	r3, #48	; 0x30
 800425a:	330e      	adds	r3, #14
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fd4f 	bl	8002d00 <ld_word>
 8004262:	4603      	mov	r3, r0
 8004264:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <find_volume+0x28c>
 800426c:	230d      	movs	r3, #13
 800426e:	e0fa      	b.n	8004466 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	4413      	add	r3, r2
 8004276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004278:	8912      	ldrh	r2, [r2, #8]
 800427a:	0912      	lsrs	r2, r2, #4
 800427c:	b292      	uxth	r2, r2
 800427e:	4413      	add	r3, r2
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	429a      	cmp	r2, r3
 8004288:	d204      	bcs.n	8004294 <find_volume+0x2b0>
 800428a:	230d      	movs	r3, #13
 800428c:	e0eb      	b.n	8004466 <find_volume+0x482>
 800428e:	bf00      	nop
 8004290:	20000114 	.word	0x20000114
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429c:	8952      	ldrh	r2, [r2, #10]
 800429e:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <find_volume+0x2ca>
 80042aa:	230d      	movs	r3, #13
 80042ac:	e0db      	b.n	8004466 <find_volume+0x482>
		fmt = FS_FAT32;
 80042ae:	2303      	movs	r3, #3
 80042b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <find_volume+0x2e0>
 80042be:	2302      	movs	r3, #2
 80042c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <find_volume+0x2f0>
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80042e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80042e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e6:	441a      	add	r2, r3
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80042ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	441a      	add	r2, r3
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80042f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d11e      	bne.n	800433c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	3330      	adds	r3, #48	; 0x30
 8004302:	332a      	adds	r3, #42	; 0x2a
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fcfb 	bl	8002d00 <ld_word>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <find_volume+0x330>
 8004310:	230d      	movs	r3, #13
 8004312:	e0a8      	b.n	8004466 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	891b      	ldrh	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <find_volume+0x33c>
 800431c:	230d      	movs	r3, #13
 800431e:	e0a2      	b.n	8004466 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	3330      	adds	r3, #48	; 0x30
 8004324:	332c      	adds	r3, #44	; 0x2c
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fd02 	bl	8002d30 <ld_dword>
 800432c:	4602      	mov	r2, r0
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	e01f      	b.n	800437c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	891b      	ldrh	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <find_volume+0x364>
 8004344:	230d      	movs	r3, #13
 8004346:	e08e      	b.n	8004466 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434e:	441a      	add	r2, r3
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004358:	2b02      	cmp	r3, #2
 800435a:	d103      	bne.n	8004364 <find_volume+0x380>
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	e00a      	b.n	800437a <find_volume+0x396>
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	085a      	lsrs	r2, r3, #1
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004382:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004386:	0a5b      	lsrs	r3, r3, #9
 8004388:	429a      	cmp	r2, r3
 800438a:	d201      	bcs.n	8004390 <find_volume+0x3ac>
 800438c:	230d      	movs	r3, #13
 800438e:	e06a      	b.n	8004466 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	611a      	str	r2, [r3, #16]
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	2280      	movs	r2, #128	; 0x80
 80043a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80043a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d149      	bne.n	8004442 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	3330      	adds	r3, #48	; 0x30
 80043b2:	3330      	adds	r3, #48	; 0x30
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fca3 	bl	8002d00 <ld_word>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d140      	bne.n	8004442 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80043c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c2:	3301      	adds	r3, #1
 80043c4:	4619      	mov	r1, r3
 80043c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043c8:	f7fe ff0e 	bl	80031e8 <move_window>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d137      	bne.n	8004442 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	2200      	movs	r2, #0
 80043d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	3330      	adds	r3, #48	; 0x30
 80043dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe fc8d 	bl	8002d00 <ld_word>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d127      	bne.n	8004442 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	3330      	adds	r3, #48	; 0x30
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fc9a 	bl	8002d30 <ld_dword>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <find_volume+0x48c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d11e      	bne.n	8004442 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	3330      	adds	r3, #48	; 0x30
 8004408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fc8f 	bl	8002d30 <ld_dword>
 8004412:	4603      	mov	r3, r0
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <find_volume+0x490>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d113      	bne.n	8004442 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	3330      	adds	r3, #48	; 0x30
 800441e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fc84 	bl	8002d30 <ld_dword>
 8004428:	4602      	mov	r2, r0
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	3330      	adds	r3, #48	; 0x30
 8004432:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fc7a 	bl	8002d30 <ld_dword>
 800443c:	4602      	mov	r2, r0
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004448:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <find_volume+0x494>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <find_volume+0x494>)
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <find_volume+0x494>)
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800445e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004460:	f7fe fe5a 	bl	8003118 <clear_lock>
#endif
	return FR_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3758      	adds	r7, #88	; 0x58
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	41615252 	.word	0x41615252
 8004474:	61417272 	.word	0x61417272
 8004478:	20000118 	.word	0x20000118

0800447c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004486:	2309      	movs	r3, #9
 8004488:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <validate+0x4e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d018      	beq.n	80044ca <validate+0x4e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d013      	beq.n	80044ca <validate+0x4e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	889a      	ldrh	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	88db      	ldrh	r3, [r3, #6]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10c      	bne.n	80044ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fba2 	bl	8002c00 <disk_status>
 80044bc:	4603      	mov	r3, r0
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <validate+0x4e>
			res = FR_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <validate+0x5a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e000      	b.n	80044d8 <validate+0x5c>
 80044d6:	2300      	movs	r3, #0
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	6013      	str	r3, [r2, #0]
	return res;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fcd5 	bl	8003eae <get_ldnumber>
 8004504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da01      	bge.n	8004510 <f_mount+0x28>
 800450c:	230b      	movs	r3, #11
 800450e:	e02b      	b.n	8004568 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <f_mount+0x88>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004520:	69b8      	ldr	r0, [r7, #24]
 8004522:	f7fe fdf9 	bl	8003118 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	490d      	ldr	r1, [pc, #52]	; (8004570 <f_mount+0x88>)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <f_mount+0x66>
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <f_mount+0x6a>
 800454e:	2300      	movs	r3, #0
 8004550:	e00a      	b.n	8004568 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004552:	f107 010c 	add.w	r1, r7, #12
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	2200      	movs	r2, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fd41 	bl	8003fe4 <find_volume>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000114 	.word	0x20000114

08004574 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b098      	sub	sp, #96	; 0x60
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <f_open+0x18>
 8004588:	2309      	movs	r3, #9
 800458a:	e1ad      	b.n	80048e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004592:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004594:	79fa      	ldrb	r2, [r7, #7]
 8004596:	f107 0110 	add.w	r1, r7, #16
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fd20 	bl	8003fe4 <find_volume>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80045aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8191 	bne.w	80048d6 <f_open+0x362>
		dj.obj.fs = fs;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fc03 	bl	8003dcc <follow_path>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80045cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11a      	bne.n	800460a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80045d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da03      	bge.n	80045e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80045de:	2306      	movs	r3, #6
 80045e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80045e4:	e011      	b.n	800460a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fc7e 	bl	8002f00 <chk_lock>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	f003 031c 	and.w	r3, r3, #28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d07f      	beq.n	8004714 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800461c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004620:	2b04      	cmp	r3, #4
 8004622:	d10e      	bne.n	8004642 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004624:	f7fe fcc8 	bl	8002fb8 <enq_lock>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <f_open+0xc8>
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fb04 	bl	8003c40 <dir_register>
 8004638:	4603      	mov	r3, r0
 800463a:	e000      	b.n	800463e <f_open+0xca>
 800463c:	2312      	movs	r3, #18
 800463e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f043 0308 	orr.w	r3, r3, #8
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	e010      	b.n	800466e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800464c:	7ebb      	ldrb	r3, [r7, #26]
 800464e:	f003 0311 	and.w	r3, r3, #17
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <f_open+0xea>
					res = FR_DENIED;
 8004656:	2307      	movs	r3, #7
 8004658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800465c:	e007      	b.n	800466e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <f_open+0xfa>
 8004668:	2308      	movs	r3, #8
 800466a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800466e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004672:	2b00      	cmp	r3, #0
 8004674:	d168      	bne.n	8004748 <f_open+0x1d4>
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d063      	beq.n	8004748 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004680:	f7fe fa5c 	bl	8002b3c <get_fattime>
 8004684:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	330e      	adds	r3, #14
 800468a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fb8d 	bl	8002dac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	3316      	adds	r3, #22
 8004696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe fb87 	bl	8002dac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	330b      	adds	r3, #11
 80046a2:	2220      	movs	r2, #32
 80046a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fa33 	bl	8003b18 <ld_clust>
 80046b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046b8:	2200      	movs	r2, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fa4b 	bl	8003b56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	331c      	adds	r3, #28
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fb70 	bl	8002dac <st_dword>
					fs->wflag = 1;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2201      	movs	r2, #1
 80046d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d037      	beq.n	8004748 <f_open+0x1d4>
						dw = fs->winsect;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	2200      	movs	r2, #0
 80046e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe ff5e 	bl	80035a8 <remove_chain>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80046f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d126      	bne.n	8004748 <f_open+0x1d4>
							res = move_window(fs, dw);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fd72 	bl	80031e8 <move_window>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470e:	3a01      	subs	r2, #1
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e019      	b.n	8004748 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004718:	2b00      	cmp	r3, #0
 800471a:	d115      	bne.n	8004748 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800471c:	7ebb      	ldrb	r3, [r7, #26]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <f_open+0x1ba>
					res = FR_NO_FILE;
 8004726:	2304      	movs	r3, #4
 8004728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800472c:	e00c      	b.n	8004748 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <f_open+0x1d4>
 8004738:	7ebb      	ldrb	r3, [r7, #26]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <f_open+0x1d4>
						res = FR_DENIED;
 8004742:	2307      	movs	r3, #7
 8004744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474c:	2b00      	cmp	r3, #0
 800474e:	d128      	bne.n	80047a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800476a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fc37 	bl	8002ffc <inc_lock>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <f_open+0x22e>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80047a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 8095 	bne.w	80048d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f9b0 	bl	8003b18 <ld_clust>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	331c      	adds	r3, #28
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fab4 	bl	8002d30 <ld_dword>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	88da      	ldrh	r2, [r3, #6]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	79fa      	ldrb	r2, [r7, #7]
 80047e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3330      	adds	r3, #48	; 0x30
 80047fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fb1e 	bl	8002e46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d060      	beq.n	80048d6 <f_open+0x362>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d05c      	beq.n	80048d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	895b      	ldrh	r3, [r3, #10]
 8004828:	025b      	lsls	r3, r3, #9
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	657b      	str	r3, [r7, #84]	; 0x54
 8004838:	e016      	b.n	8004868 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fd1e 	bl	8003280 <get_fat>
 8004844:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004848:	2b01      	cmp	r3, #1
 800484a:	d802      	bhi.n	8004852 <f_open+0x2de>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d102      	bne.n	8004860 <f_open+0x2ec>
 800485a:	2301      	movs	r3, #1
 800485c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
 8004868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <f_open+0x304>
 8004870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	429a      	cmp	r2, r3
 8004876:	d8e0      	bhi.n	800483a <f_open+0x2c6>
				}
				fp->clust = clst;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800487c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800487e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004882:	2b00      	cmp	r3, #0
 8004884:	d127      	bne.n	80048d6 <f_open+0x362>
 8004886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	2b00      	cmp	r3, #0
 800488e:	d022      	beq.n	80048d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fcd4 	bl	8003242 <clust2sect>
 800489a:	6478      	str	r0, [r7, #68]	; 0x44
 800489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <f_open+0x336>
						res = FR_INT_ERR;
 80048a2:	2302      	movs	r3, #2
 80048a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80048a8:	e015      	b.n	80048d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	0a5a      	lsrs	r2, r3, #9
 80048ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	7858      	ldrb	r0, [r3, #1]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	2301      	movs	r3, #1
 80048c6:	f7fe f9db 	bl	8002c80 <disk_read>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <f_open+0x362>
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80048d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <f_open+0x370>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80048e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3760      	adds	r7, #96	; 0x60
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08e      	sub	sp, #56	; 0x38
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f107 0214 	add.w	r2, r7, #20
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fdb3 	bl	800447c <validate>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800491c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <f_read+0x44>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	7d5b      	ldrb	r3, [r3, #21]
 8004928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800492c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <f_read+0x4a>
 8004934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004938:	e115      	b.n	8004b66 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	7d1b      	ldrb	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <f_read+0x5a>
 8004946:	2307      	movs	r3, #7
 8004948:	e10d      	b.n	8004b66 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	429a      	cmp	r2, r3
 800495c:	f240 80fe 	bls.w	8004b5c <f_read+0x26c>
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004964:	e0fa      	b.n	8004b5c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 80c6 	bne.w	8004b00 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0a5b      	lsrs	r3, r3, #9
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	8952      	ldrh	r2, [r2, #10]
 800497e:	3a01      	subs	r2, #1
 8004980:	4013      	ands	r3, r2
 8004982:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d12f      	bne.n	80049ea <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
 8004998:	e013      	b.n	80049c2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	4619      	mov	r1, r3
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7fe fefa 	bl	80037a2 <clmt_clust>
 80049ae:	6338      	str	r0, [r7, #48]	; 0x30
 80049b0:	e007      	b.n	80049c2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f7fe fc60 	bl	8003280 <get_fat>
 80049c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d804      	bhi.n	80049d2 <f_read+0xe2>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2202      	movs	r2, #2
 80049cc:	755a      	strb	r2, [r3, #21]
 80049ce:	2302      	movs	r3, #2
 80049d0:	e0c9      	b.n	8004b66 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d104      	bne.n	80049e4 <f_read+0xf4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	755a      	strb	r2, [r3, #21]
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0c0      	b.n	8004b66 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fe fc25 	bl	8003242 <clust2sect>
 80049f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <f_read+0x11a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2202      	movs	r2, #2
 8004a04:	755a      	strb	r2, [r3, #21]
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0ad      	b.n	8004b66 <f_read+0x276>
			sect += csect;
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0a5b      	lsrs	r3, r3, #9
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d039      	beq.n	8004a92 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	4413      	add	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	8952      	ldrh	r2, [r2, #10]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d905      	bls.n	8004a38 <f_read+0x148>
					cc = fs->csize - csect;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	895b      	ldrh	r3, [r3, #10]
 8004a30:	461a      	mov	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	7858      	ldrb	r0, [r3, #1]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a42:	f7fe f91d 	bl	8002c80 <disk_read>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <f_read+0x166>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	755a      	strb	r2, [r3, #21]
 8004a52:	2301      	movs	r3, #1
 8004a54:	e087      	b.n	8004b66 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	7d1b      	ldrb	r3, [r3, #20]
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da14      	bge.n	8004a8a <f_read+0x19a>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d90d      	bls.n	8004a8a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	025b      	lsls	r3, r3, #9
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	18d0      	adds	r0, r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3330      	adds	r3, #48	; 0x30
 8004a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a84:	4619      	mov	r1, r3
 8004a86:	f7fe f9bd 	bl	8002e04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	025b      	lsls	r3, r3, #9
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004a90:	e050      	b.n	8004b34 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d02e      	beq.n	8004afa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	7d1b      	ldrb	r3, [r3, #20]
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da18      	bge.n	8004ad8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	7858      	ldrb	r0, [r3, #1]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f7fe f903 	bl	8002cc0 <disk_write>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <f_read+0x1da>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	755a      	strb	r2, [r3, #21]
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e04d      	b.n	8004b66 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	7d1b      	ldrb	r3, [r3, #20]
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	7858      	ldrb	r0, [r3, #1]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	f7fe f8cb 	bl	8002c80 <disk_read>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <f_read+0x20a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	755a      	strb	r2, [r3, #21]
 8004af6:	2301      	movs	r3, #1
 8004af8:	e035      	b.n	8004b66 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d901      	bls.n	8004b1a <f_read+0x22a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b28:	4413      	add	r3, r2
 8004b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b30:	f7fe f968 	bl	8002e04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	4413      	add	r3, r2
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	619a      	str	r2, [r3, #24]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	441a      	add	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f47f af01 	bne.w	8004966 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3738      	adds	r7, #56	; 0x38
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004b86:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004b88:	7a5b      	ldrb	r3, [r3, #9]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d131      	bne.n	8004bf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004b90:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004b92:	7a5b      	ldrb	r3, [r3, #9]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004b9e:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004ba0:	7a5b      	ldrb	r3, [r3, #9]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004bb0:	7a5b      	ldrb	r3, [r3, #9]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	79fa      	ldrb	r2, [r7, #7]
 8004bbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004bc0:	7a5b      	ldrb	r3, [r3, #9]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	b2d1      	uxtb	r1, r2
 8004bc8:	4a0e      	ldr	r2, [pc, #56]	; (8004c04 <FATFS_LinkDriverEx+0x94>)
 8004bca:	7251      	strb	r1, [r2, #9]
 8004bcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004bce:	7dbb      	ldrb	r3, [r7, #22]
 8004bd0:	3330      	adds	r3, #48	; 0x30
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	223a      	movs	r2, #58	; 0x3a
 8004bde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3302      	adds	r3, #2
 8004be4:	222f      	movs	r2, #47	; 0x2f
 8004be6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	3303      	adds	r3, #3
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000013c 	.word	0x2000013c

08004c08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004c12:	2200      	movs	r2, #0
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffaa 	bl	8004b70 <FATFS_LinkDriverEx>
 8004c1c:	4603      	mov	r3, r0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <__errno>:
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <__errno+0x8>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000024 	.word	0x20000024

08004c34 <_fclose_r>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4605      	mov	r5, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	b911      	cbnz	r1, 8004c42 <_fclose_r+0xe>
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	b118      	cbz	r0, 8004c4c <_fclose_r+0x18>
 8004c44:	6983      	ldr	r3, [r0, #24]
 8004c46:	b90b      	cbnz	r3, 8004c4c <_fclose_r+0x18>
 8004c48:	f000 f982 	bl	8004f50 <__sinit>
 8004c4c:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <_fclose_r+0xcc>)
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	d114      	bne.n	8004c7c <_fclose_r+0x48>
 8004c52:	686c      	ldr	r4, [r5, #4]
 8004c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c56:	07d8      	lsls	r0, r3, #31
 8004c58:	d405      	bmi.n	8004c66 <_fclose_r+0x32>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	0599      	lsls	r1, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_fclose_r+0x32>
 8004c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c62:	f000 fa39 	bl	80050d8 <__retarget_lock_acquire_recursive>
 8004c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6a:	b98b      	cbnz	r3, 8004c90 <_fclose_r+0x5c>
 8004c6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004c6e:	f016 0601 	ands.w	r6, r6, #1
 8004c72:	d1e3      	bne.n	8004c3c <_fclose_r+0x8>
 8004c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c76:	f000 fa30 	bl	80050da <__retarget_lock_release_recursive>
 8004c7a:	e7e0      	b.n	8004c3e <_fclose_r+0xa>
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <_fclose_r+0xd0>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d101      	bne.n	8004c86 <_fclose_r+0x52>
 8004c82:	68ac      	ldr	r4, [r5, #8]
 8004c84:	e7e6      	b.n	8004c54 <_fclose_r+0x20>
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <_fclose_r+0xd4>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	bf08      	it	eq
 8004c8c:	68ec      	ldreq	r4, [r5, #12]
 8004c8e:	e7e1      	b.n	8004c54 <_fclose_r+0x20>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f842 	bl	8004d1c <__sflush_r>
 8004c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	b133      	cbz	r3, 8004cac <_fclose_r+0x78>
 8004c9e:	6a21      	ldr	r1, [r4, #32]
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	4798      	blx	r3
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	bfb8      	it	lt
 8004ca8:	f04f 36ff 	movlt.w	r6, #4294967295
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	061a      	lsls	r2, r3, #24
 8004cb0:	d503      	bpl.n	8004cba <_fclose_r+0x86>
 8004cb2:	6921      	ldr	r1, [r4, #16]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 fa19 	bl	80050ec <_free_r>
 8004cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cbc:	b141      	cbz	r1, 8004cd0 <_fclose_r+0x9c>
 8004cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d002      	beq.n	8004ccc <_fclose_r+0x98>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fa10 	bl	80050ec <_free_r>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6363      	str	r3, [r4, #52]	; 0x34
 8004cd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004cd2:	b121      	cbz	r1, 8004cde <_fclose_r+0xaa>
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fa09 	bl	80050ec <_free_r>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	64a3      	str	r3, [r4, #72]	; 0x48
 8004cde:	f000 f91f 	bl	8004f20 <__sfp_lock_acquire>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce8:	07db      	lsls	r3, r3, #31
 8004cea:	d402      	bmi.n	8004cf2 <_fclose_r+0xbe>
 8004cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cee:	f000 f9f4 	bl	80050da <__retarget_lock_release_recursive>
 8004cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf4:	f000 f9ef 	bl	80050d6 <__retarget_lock_close_recursive>
 8004cf8:	f000 f918 	bl	8004f2c <__sfp_lock_release>
 8004cfc:	e79f      	b.n	8004c3e <_fclose_r+0xa>
 8004cfe:	bf00      	nop
 8004d00:	08005514 	.word	0x08005514
 8004d04:	08005534 	.word	0x08005534
 8004d08:	080054f4 	.word	0x080054f4

08004d0c <fclose>:
 8004d0c:	4b02      	ldr	r3, [pc, #8]	; (8004d18 <fclose+0xc>)
 8004d0e:	4601      	mov	r1, r0
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	f7ff bf8f 	b.w	8004c34 <_fclose_r>
 8004d16:	bf00      	nop
 8004d18:	20000024 	.word	0x20000024

08004d1c <__sflush_r>:
 8004d1c:	898a      	ldrh	r2, [r1, #12]
 8004d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	0710      	lsls	r0, r2, #28
 8004d26:	460c      	mov	r4, r1
 8004d28:	d458      	bmi.n	8004ddc <__sflush_r+0xc0>
 8004d2a:	684b      	ldr	r3, [r1, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dc05      	bgt.n	8004d3c <__sflush_r+0x20>
 8004d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dc02      	bgt.n	8004d3c <__sflush_r+0x20>
 8004d36:	2000      	movs	r0, #0
 8004d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d0f9      	beq.n	8004d36 <__sflush_r+0x1a>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d48:	682f      	ldr	r7, [r5, #0]
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	d032      	beq.n	8004db4 <__sflush_r+0x98>
 8004d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	075a      	lsls	r2, r3, #29
 8004d54:	d505      	bpl.n	8004d62 <__sflush_r+0x46>
 8004d56:	6863      	ldr	r3, [r4, #4]
 8004d58:	1ac0      	subs	r0, r0, r3
 8004d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d5c:	b10b      	cbz	r3, 8004d62 <__sflush_r+0x46>
 8004d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d60:	1ac0      	subs	r0, r0, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	4602      	mov	r2, r0
 8004d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d68:	6a21      	ldr	r1, [r4, #32]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b0      	blx	r6
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	d106      	bne.n	8004d82 <__sflush_r+0x66>
 8004d74:	6829      	ldr	r1, [r5, #0]
 8004d76:	291d      	cmp	r1, #29
 8004d78:	d82c      	bhi.n	8004dd4 <__sflush_r+0xb8>
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <__sflush_r+0x108>)
 8004d7c:	40ca      	lsrs	r2, r1
 8004d7e:	07d6      	lsls	r6, r2, #31
 8004d80:	d528      	bpl.n	8004dd4 <__sflush_r+0xb8>
 8004d82:	2200      	movs	r2, #0
 8004d84:	6062      	str	r2, [r4, #4]
 8004d86:	04d9      	lsls	r1, r3, #19
 8004d88:	6922      	ldr	r2, [r4, #16]
 8004d8a:	6022      	str	r2, [r4, #0]
 8004d8c:	d504      	bpl.n	8004d98 <__sflush_r+0x7c>
 8004d8e:	1c42      	adds	r2, r0, #1
 8004d90:	d101      	bne.n	8004d96 <__sflush_r+0x7a>
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	b903      	cbnz	r3, 8004d98 <__sflush_r+0x7c>
 8004d96:	6560      	str	r0, [r4, #84]	; 0x54
 8004d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9a:	602f      	str	r7, [r5, #0]
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d0ca      	beq.n	8004d36 <__sflush_r+0x1a>
 8004da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004da4:	4299      	cmp	r1, r3
 8004da6:	d002      	beq.n	8004dae <__sflush_r+0x92>
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f99f 	bl	80050ec <_free_r>
 8004dae:	2000      	movs	r0, #0
 8004db0:	6360      	str	r0, [r4, #52]	; 0x34
 8004db2:	e7c1      	b.n	8004d38 <__sflush_r+0x1c>
 8004db4:	6a21      	ldr	r1, [r4, #32]
 8004db6:	2301      	movs	r3, #1
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b0      	blx	r6
 8004dbc:	1c41      	adds	r1, r0, #1
 8004dbe:	d1c7      	bne.n	8004d50 <__sflush_r+0x34>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c4      	beq.n	8004d50 <__sflush_r+0x34>
 8004dc6:	2b1d      	cmp	r3, #29
 8004dc8:	d001      	beq.n	8004dce <__sflush_r+0xb2>
 8004dca:	2b16      	cmp	r3, #22
 8004dcc:	d101      	bne.n	8004dd2 <__sflush_r+0xb6>
 8004dce:	602f      	str	r7, [r5, #0]
 8004dd0:	e7b1      	b.n	8004d36 <__sflush_r+0x1a>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd8:	81a3      	strh	r3, [r4, #12]
 8004dda:	e7ad      	b.n	8004d38 <__sflush_r+0x1c>
 8004ddc:	690f      	ldr	r7, [r1, #16]
 8004dde:	2f00      	cmp	r7, #0
 8004de0:	d0a9      	beq.n	8004d36 <__sflush_r+0x1a>
 8004de2:	0793      	lsls	r3, r2, #30
 8004de4:	680e      	ldr	r6, [r1, #0]
 8004de6:	bf08      	it	eq
 8004de8:	694b      	ldreq	r3, [r1, #20]
 8004dea:	600f      	str	r7, [r1, #0]
 8004dec:	bf18      	it	ne
 8004dee:	2300      	movne	r3, #0
 8004df0:	eba6 0807 	sub.w	r8, r6, r7
 8004df4:	608b      	str	r3, [r1, #8]
 8004df6:	f1b8 0f00 	cmp.w	r8, #0
 8004dfa:	dd9c      	ble.n	8004d36 <__sflush_r+0x1a>
 8004dfc:	6a21      	ldr	r1, [r4, #32]
 8004dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e00:	4643      	mov	r3, r8
 8004e02:	463a      	mov	r2, r7
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b0      	blx	r6
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	dc06      	bgt.n	8004e1a <__sflush_r+0xfe>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	e78e      	b.n	8004d38 <__sflush_r+0x1c>
 8004e1a:	4407      	add	r7, r0
 8004e1c:	eba8 0800 	sub.w	r8, r8, r0
 8004e20:	e7e9      	b.n	8004df6 <__sflush_r+0xda>
 8004e22:	bf00      	nop
 8004e24:	20400001 	.word	0x20400001

08004e28 <_fflush_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	b913      	cbnz	r3, 8004e38 <_fflush_r+0x10>
 8004e32:	2500      	movs	r5, #0
 8004e34:	4628      	mov	r0, r5
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	b118      	cbz	r0, 8004e42 <_fflush_r+0x1a>
 8004e3a:	6983      	ldr	r3, [r0, #24]
 8004e3c:	b90b      	cbnz	r3, 8004e42 <_fflush_r+0x1a>
 8004e3e:	f000 f887 	bl	8004f50 <__sinit>
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <_fflush_r+0x6c>)
 8004e44:	429c      	cmp	r4, r3
 8004e46:	d11b      	bne.n	8004e80 <_fflush_r+0x58>
 8004e48:	686c      	ldr	r4, [r5, #4]
 8004e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ef      	beq.n	8004e32 <_fflush_r+0xa>
 8004e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e54:	07d0      	lsls	r0, r2, #31
 8004e56:	d404      	bmi.n	8004e62 <_fflush_r+0x3a>
 8004e58:	0599      	lsls	r1, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_fflush_r+0x3a>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5e:	f000 f93b 	bl	80050d8 <__retarget_lock_acquire_recursive>
 8004e62:	4628      	mov	r0, r5
 8004e64:	4621      	mov	r1, r4
 8004e66:	f7ff ff59 	bl	8004d1c <__sflush_r>
 8004e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e6c:	07da      	lsls	r2, r3, #31
 8004e6e:	4605      	mov	r5, r0
 8004e70:	d4e0      	bmi.n	8004e34 <_fflush_r+0xc>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	059b      	lsls	r3, r3, #22
 8004e76:	d4dd      	bmi.n	8004e34 <_fflush_r+0xc>
 8004e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7a:	f000 f92e 	bl	80050da <__retarget_lock_release_recursive>
 8004e7e:	e7d9      	b.n	8004e34 <_fflush_r+0xc>
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <_fflush_r+0x70>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d101      	bne.n	8004e8a <_fflush_r+0x62>
 8004e86:	68ac      	ldr	r4, [r5, #8]
 8004e88:	e7df      	b.n	8004e4a <_fflush_r+0x22>
 8004e8a:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <_fflush_r+0x74>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	bf08      	it	eq
 8004e90:	68ec      	ldreq	r4, [r5, #12]
 8004e92:	e7da      	b.n	8004e4a <_fflush_r+0x22>
 8004e94:	08005514 	.word	0x08005514
 8004e98:	08005534 	.word	0x08005534
 8004e9c:	080054f4 	.word	0x080054f4

08004ea0 <std>:
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eae:	6083      	str	r3, [r0, #8]
 8004eb0:	8181      	strh	r1, [r0, #12]
 8004eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004eb4:	81c2      	strh	r2, [r0, #14]
 8004eb6:	6183      	str	r3, [r0, #24]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	2208      	movs	r2, #8
 8004ebc:	305c      	adds	r0, #92	; 0x5c
 8004ebe:	f000 f90d 	bl	80050dc <memset>
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <std+0x38>)
 8004ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <std+0x3c>)
 8004ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <std+0x40>)
 8004ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <std+0x44>)
 8004ed0:	6224      	str	r4, [r4, #32]
 8004ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	080052cd 	.word	0x080052cd
 8004edc:	080052ef 	.word	0x080052ef
 8004ee0:	08005327 	.word	0x08005327
 8004ee4:	0800534b 	.word	0x0800534b

08004ee8 <_cleanup_r>:
 8004ee8:	4901      	ldr	r1, [pc, #4]	; (8004ef0 <_cleanup_r+0x8>)
 8004eea:	f000 b8af 	b.w	800504c <_fwalk_reent>
 8004eee:	bf00      	nop
 8004ef0:	08004e29 	.word	0x08004e29

08004ef4 <__sfmoreglue>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	2268      	movs	r2, #104	; 0x68
 8004ef8:	1e4d      	subs	r5, r1, #1
 8004efa:	4355      	muls	r5, r2
 8004efc:	460e      	mov	r6, r1
 8004efe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f02:	f000 f95f 	bl	80051c4 <_malloc_r>
 8004f06:	4604      	mov	r4, r0
 8004f08:	b140      	cbz	r0, 8004f1c <__sfmoreglue+0x28>
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f10:	300c      	adds	r0, #12
 8004f12:	60a0      	str	r0, [r4, #8]
 8004f14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f18:	f000 f8e0 	bl	80050dc <memset>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}

08004f20 <__sfp_lock_acquire>:
 8004f20:	4801      	ldr	r0, [pc, #4]	; (8004f28 <__sfp_lock_acquire+0x8>)
 8004f22:	f000 b8d9 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 8004f26:	bf00      	nop
 8004f28:	20000149 	.word	0x20000149

08004f2c <__sfp_lock_release>:
 8004f2c:	4801      	ldr	r0, [pc, #4]	; (8004f34 <__sfp_lock_release+0x8>)
 8004f2e:	f000 b8d4 	b.w	80050da <__retarget_lock_release_recursive>
 8004f32:	bf00      	nop
 8004f34:	20000149 	.word	0x20000149

08004f38 <__sinit_lock_acquire>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__sinit_lock_acquire+0x8>)
 8004f3a:	f000 b8cd 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	2000014a 	.word	0x2000014a

08004f44 <__sinit_lock_release>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__sinit_lock_release+0x8>)
 8004f46:	f000 b8c8 	b.w	80050da <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	2000014a 	.word	0x2000014a

08004f50 <__sinit>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4604      	mov	r4, r0
 8004f54:	f7ff fff0 	bl	8004f38 <__sinit_lock_acquire>
 8004f58:	69a3      	ldr	r3, [r4, #24]
 8004f5a:	b11b      	cbz	r3, 8004f64 <__sinit+0x14>
 8004f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f60:	f7ff bff0 	b.w	8004f44 <__sinit_lock_release>
 8004f64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f68:	6523      	str	r3, [r4, #80]	; 0x50
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <__sinit+0x68>)
 8004f6c:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <__sinit+0x6c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	bf04      	itt	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	61a3      	streq	r3, [r4, #24]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 f820 	bl	8004fc0 <__sfp>
 8004f80:	6060      	str	r0, [r4, #4]
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 f81c 	bl	8004fc0 <__sfp>
 8004f88:	60a0      	str	r0, [r4, #8]
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f000 f818 	bl	8004fc0 <__sfp>
 8004f90:	2200      	movs	r2, #0
 8004f92:	60e0      	str	r0, [r4, #12]
 8004f94:	2104      	movs	r1, #4
 8004f96:	6860      	ldr	r0, [r4, #4]
 8004f98:	f7ff ff82 	bl	8004ea0 <std>
 8004f9c:	68a0      	ldr	r0, [r4, #8]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2109      	movs	r1, #9
 8004fa2:	f7ff ff7d 	bl	8004ea0 <std>
 8004fa6:	68e0      	ldr	r0, [r4, #12]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	2112      	movs	r1, #18
 8004fac:	f7ff ff78 	bl	8004ea0 <std>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61a3      	str	r3, [r4, #24]
 8004fb4:	e7d2      	b.n	8004f5c <__sinit+0xc>
 8004fb6:	bf00      	nop
 8004fb8:	08005554 	.word	0x08005554
 8004fbc:	08004ee9 	.word	0x08004ee9

08004fc0 <__sfp>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	4607      	mov	r7, r0
 8004fc4:	f7ff ffac 	bl	8004f20 <__sfp_lock_acquire>
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <__sfp+0x84>)
 8004fca:	681e      	ldr	r6, [r3, #0]
 8004fcc:	69b3      	ldr	r3, [r6, #24]
 8004fce:	b913      	cbnz	r3, 8004fd6 <__sfp+0x16>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7ff ffbd 	bl	8004f50 <__sinit>
 8004fd6:	3648      	adds	r6, #72	; 0x48
 8004fd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	d503      	bpl.n	8004fe8 <__sfp+0x28>
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	b30b      	cbz	r3, 8005028 <__sfp+0x68>
 8004fe4:	6836      	ldr	r6, [r6, #0]
 8004fe6:	e7f7      	b.n	8004fd8 <__sfp+0x18>
 8004fe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fec:	b9d5      	cbnz	r5, 8005024 <__sfp+0x64>
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <__sfp+0x88>)
 8004ff0:	60e3      	str	r3, [r4, #12]
 8004ff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ff6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ff8:	f000 f86c 	bl	80050d4 <__retarget_lock_init_recursive>
 8004ffc:	f7ff ff96 	bl	8004f2c <__sfp_lock_release>
 8005000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005008:	6025      	str	r5, [r4, #0]
 800500a:	61a5      	str	r5, [r4, #24]
 800500c:	2208      	movs	r2, #8
 800500e:	4629      	mov	r1, r5
 8005010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005014:	f000 f862 	bl	80050dc <memset>
 8005018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800501c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005020:	4620      	mov	r0, r4
 8005022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005024:	3468      	adds	r4, #104	; 0x68
 8005026:	e7d9      	b.n	8004fdc <__sfp+0x1c>
 8005028:	2104      	movs	r1, #4
 800502a:	4638      	mov	r0, r7
 800502c:	f7ff ff62 	bl	8004ef4 <__sfmoreglue>
 8005030:	4604      	mov	r4, r0
 8005032:	6030      	str	r0, [r6, #0]
 8005034:	2800      	cmp	r0, #0
 8005036:	d1d5      	bne.n	8004fe4 <__sfp+0x24>
 8005038:	f7ff ff78 	bl	8004f2c <__sfp_lock_release>
 800503c:	230c      	movs	r3, #12
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	e7ee      	b.n	8005020 <__sfp+0x60>
 8005042:	bf00      	nop
 8005044:	08005554 	.word	0x08005554
 8005048:	ffff0001 	.word	0xffff0001

0800504c <_fwalk_reent>:
 800504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005050:	4606      	mov	r6, r0
 8005052:	4688      	mov	r8, r1
 8005054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005058:	2700      	movs	r7, #0
 800505a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800505e:	f1b9 0901 	subs.w	r9, r9, #1
 8005062:	d505      	bpl.n	8005070 <_fwalk_reent+0x24>
 8005064:	6824      	ldr	r4, [r4, #0]
 8005066:	2c00      	cmp	r4, #0
 8005068:	d1f7      	bne.n	800505a <_fwalk_reent+0xe>
 800506a:	4638      	mov	r0, r7
 800506c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005070:	89ab      	ldrh	r3, [r5, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d907      	bls.n	8005086 <_fwalk_reent+0x3a>
 8005076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800507a:	3301      	adds	r3, #1
 800507c:	d003      	beq.n	8005086 <_fwalk_reent+0x3a>
 800507e:	4629      	mov	r1, r5
 8005080:	4630      	mov	r0, r6
 8005082:	47c0      	blx	r8
 8005084:	4307      	orrs	r7, r0
 8005086:	3568      	adds	r5, #104	; 0x68
 8005088:	e7e9      	b.n	800505e <_fwalk_reent+0x12>
	...

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4d0d      	ldr	r5, [pc, #52]	; (80050c4 <__libc_init_array+0x38>)
 8005090:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005092:	1b64      	subs	r4, r4, r5
 8005094:	10a4      	asrs	r4, r4, #2
 8005096:	2600      	movs	r6, #0
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	4d0b      	ldr	r5, [pc, #44]	; (80050cc <__libc_init_array+0x40>)
 800509e:	4c0c      	ldr	r4, [pc, #48]	; (80050d0 <__libc_init_array+0x44>)
 80050a0:	f000 f9aa 	bl	80053f8 <_init>
 80050a4:	1b64      	subs	r4, r4, r5
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	2600      	movs	r6, #0
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08005560 	.word	0x08005560
 80050c8:	08005560 	.word	0x08005560
 80050cc:	08005560 	.word	0x08005560
 80050d0:	08005564 	.word	0x08005564

080050d4 <__retarget_lock_init_recursive>:
 80050d4:	4770      	bx	lr

080050d6 <__retarget_lock_close_recursive>:
 80050d6:	4770      	bx	lr

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr

080050dc <memset>:
 80050dc:	4402      	add	r2, r0
 80050de:	4603      	mov	r3, r0
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d100      	bne.n	80050e6 <memset+0xa>
 80050e4:	4770      	bx	lr
 80050e6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ea:	e7f9      	b.n	80050e0 <memset+0x4>

080050ec <_free_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <_free_r+0x90>
 80050f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f6:	9001      	str	r0, [sp, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f1a1 0404 	sub.w	r4, r1, #4
 80050fe:	bfb8      	it	lt
 8005100:	18e4      	addlt	r4, r4, r3
 8005102:	f000 f95b 	bl	80053bc <__malloc_lock>
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <_free_r+0x94>)
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b933      	cbnz	r3, 800511c <_free_r+0x30>
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	b003      	add	sp, #12
 8005114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005118:	f000 b956 	b.w	80053c8 <__malloc_unlock>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d908      	bls.n	8005132 <_free_r+0x46>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf01      	itttt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	1949      	addeq	r1, r1, r5
 800512e:	6021      	streq	r1, [r4, #0]
 8005130:	e7ed      	b.n	800510e <_free_r+0x22>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x50>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x46>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x70>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1e0      	bne.n	8005112 <_free_r+0x26>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7da      	b.n	8005112 <_free_r+0x26>
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d6      	b.n	8005112 <_free_r+0x26>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7ca      	b.n	8005112 <_free_r+0x26>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	2000014c 	.word	0x2000014c

08005184 <sbrk_aligned>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4e0e      	ldr	r6, [pc, #56]	; (80051c0 <sbrk_aligned+0x3c>)
 8005188:	460c      	mov	r4, r1
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	4605      	mov	r5, r0
 800518e:	b911      	cbnz	r1, 8005196 <sbrk_aligned+0x12>
 8005190:	f000 f88c 	bl	80052ac <_sbrk_r>
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f887 	bl	80052ac <_sbrk_r>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d00a      	beq.n	80051b8 <sbrk_aligned+0x34>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d007      	beq.n	80051bc <sbrk_aligned+0x38>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f87c 	bl	80052ac <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d101      	bne.n	80051bc <sbrk_aligned+0x38>
 80051b8:	f04f 34ff 	mov.w	r4, #4294967295
 80051bc:	4620      	mov	r0, r4
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	20000150 	.word	0x20000150

080051c4 <_malloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d905      	bls.n	80051ec <_malloc_r+0x28>
 80051e0:	230c      	movs	r3, #12
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	2600      	movs	r6, #0
 80051e6:	4630      	mov	r0, r6
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	4e2e      	ldr	r6, [pc, #184]	; (80052a8 <_malloc_r+0xe4>)
 80051ee:	f000 f8e5 	bl	80053bc <__malloc_lock>
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	461c      	mov	r4, r3
 80051f6:	bb34      	cbnz	r4, 8005246 <_malloc_r+0x82>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ffc2 	bl	8005184 <sbrk_aligned>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	4604      	mov	r4, r0
 8005204:	d14d      	bne.n	80052a2 <_malloc_r+0xde>
 8005206:	6834      	ldr	r4, [r6, #0]
 8005208:	4626      	mov	r6, r4
 800520a:	2e00      	cmp	r6, #0
 800520c:	d140      	bne.n	8005290 <_malloc_r+0xcc>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4631      	mov	r1, r6
 8005212:	4638      	mov	r0, r7
 8005214:	eb04 0803 	add.w	r8, r4, r3
 8005218:	f000 f848 	bl	80052ac <_sbrk_r>
 800521c:	4580      	cmp	r8, r0
 800521e:	d13a      	bne.n	8005296 <_malloc_r+0xd2>
 8005220:	6821      	ldr	r1, [r4, #0]
 8005222:	3503      	adds	r5, #3
 8005224:	1a6d      	subs	r5, r5, r1
 8005226:	f025 0503 	bic.w	r5, r5, #3
 800522a:	3508      	adds	r5, #8
 800522c:	2d0c      	cmp	r5, #12
 800522e:	bf38      	it	cc
 8005230:	250c      	movcc	r5, #12
 8005232:	4629      	mov	r1, r5
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff ffa5 	bl	8005184 <sbrk_aligned>
 800523a:	3001      	adds	r0, #1
 800523c:	d02b      	beq.n	8005296 <_malloc_r+0xd2>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	442b      	add	r3, r5
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	e00e      	b.n	8005264 <_malloc_r+0xa0>
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	1b52      	subs	r2, r2, r5
 800524a:	d41e      	bmi.n	800528a <_malloc_r+0xc6>
 800524c:	2a0b      	cmp	r2, #11
 800524e:	d916      	bls.n	800527e <_malloc_r+0xba>
 8005250:	1961      	adds	r1, r4, r5
 8005252:	42a3      	cmp	r3, r4
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	bf18      	it	ne
 8005258:	6059      	strne	r1, [r3, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	bf08      	it	eq
 800525e:	6031      	streq	r1, [r6, #0]
 8005260:	5162      	str	r2, [r4, r5]
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	4638      	mov	r0, r7
 8005266:	f104 060b 	add.w	r6, r4, #11
 800526a:	f000 f8ad 	bl	80053c8 <__malloc_unlock>
 800526e:	f026 0607 	bic.w	r6, r6, #7
 8005272:	1d23      	adds	r3, r4, #4
 8005274:	1af2      	subs	r2, r6, r3
 8005276:	d0b6      	beq.n	80051e6 <_malloc_r+0x22>
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	50a3      	str	r3, [r4, r2]
 800527c:	e7b3      	b.n	80051e6 <_malloc_r+0x22>
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	bf0c      	ite	eq
 8005284:	6032      	streq	r2, [r6, #0]
 8005286:	605a      	strne	r2, [r3, #4]
 8005288:	e7ec      	b.n	8005264 <_malloc_r+0xa0>
 800528a:	4623      	mov	r3, r4
 800528c:	6864      	ldr	r4, [r4, #4]
 800528e:	e7b2      	b.n	80051f6 <_malloc_r+0x32>
 8005290:	4634      	mov	r4, r6
 8005292:	6876      	ldr	r6, [r6, #4]
 8005294:	e7b9      	b.n	800520a <_malloc_r+0x46>
 8005296:	230c      	movs	r3, #12
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4638      	mov	r0, r7
 800529c:	f000 f894 	bl	80053c8 <__malloc_unlock>
 80052a0:	e7a1      	b.n	80051e6 <_malloc_r+0x22>
 80052a2:	6025      	str	r5, [r4, #0]
 80052a4:	e7de      	b.n	8005264 <_malloc_r+0xa0>
 80052a6:	bf00      	nop
 80052a8:	2000014c 	.word	0x2000014c

080052ac <_sbrk_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d06      	ldr	r5, [pc, #24]	; (80052c8 <_sbrk_r+0x1c>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fb fff4 	bl	80012a4 <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_sbrk_r+0x1a>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_sbrk_r+0x1a>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000154 	.word	0x20000154

080052cc <__sread>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	460c      	mov	r4, r1
 80052d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d4:	f000 f87e 	bl	80053d4 <_read_r>
 80052d8:	2800      	cmp	r0, #0
 80052da:	bfab      	itete	ge
 80052dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052de:	89a3      	ldrhlt	r3, [r4, #12]
 80052e0:	181b      	addge	r3, r3, r0
 80052e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e6:	bfac      	ite	ge
 80052e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ea:	81a3      	strhlt	r3, [r4, #12]
 80052ec:	bd10      	pop	{r4, pc}

080052ee <__swrite>:
 80052ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f2:	461f      	mov	r7, r3
 80052f4:	898b      	ldrh	r3, [r1, #12]
 80052f6:	05db      	lsls	r3, r3, #23
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	4616      	mov	r6, r2
 80052fe:	d505      	bpl.n	800530c <__swrite+0x1e>
 8005300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005304:	2302      	movs	r3, #2
 8005306:	2200      	movs	r2, #0
 8005308:	f000 f846 	bl	8005398 <_lseek_r>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	4632      	mov	r2, r6
 800531a:	463b      	mov	r3, r7
 800531c:	4628      	mov	r0, r5
 800531e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	f000 b817 	b.w	8005354 <_write_r>

08005326 <__sseek>:
 8005326:	b510      	push	{r4, lr}
 8005328:	460c      	mov	r4, r1
 800532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532e:	f000 f833 	bl	8005398 <_lseek_r>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	bf15      	itete	ne
 8005338:	6560      	strne	r0, [r4, #84]	; 0x54
 800533a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005342:	81a3      	strheq	r3, [r4, #12]
 8005344:	bf18      	it	ne
 8005346:	81a3      	strhne	r3, [r4, #12]
 8005348:	bd10      	pop	{r4, pc}

0800534a <__sclose>:
 800534a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534e:	f000 b813 	b.w	8005378 <_close_r>
	...

08005354 <_write_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d07      	ldr	r5, [pc, #28]	; (8005374 <_write_r+0x20>)
 8005358:	4604      	mov	r4, r0
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	2200      	movs	r2, #0
 8005360:	602a      	str	r2, [r5, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	f7fb ff69 	bl	800123a <_write>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_write_r+0x1e>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_write_r+0x1e>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20000154 	.word	0x20000154

08005378 <_close_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d06      	ldr	r5, [pc, #24]	; (8005394 <_close_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fb ff75 	bl	8001272 <_close>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_close_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_close_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	20000154 	.word	0x20000154

08005398 <_lseek_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d07      	ldr	r5, [pc, #28]	; (80053b8 <_lseek_r+0x20>)
 800539c:	4604      	mov	r4, r0
 800539e:	4608      	mov	r0, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fb ff6f 	bl	800128a <_lseek>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_lseek_r+0x1e>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_lseek_r+0x1e>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20000154 	.word	0x20000154

080053bc <__malloc_lock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	; (80053c4 <__malloc_lock+0x8>)
 80053be:	f7ff be8b 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000148 	.word	0x20000148

080053c8 <__malloc_unlock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_unlock+0x8>)
 80053ca:	f7ff be86 	b.w	80050da <__retarget_lock_release_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000148 	.word	0x20000148

080053d4 <_read_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	; (80053f4 <_read_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb ff0c 	bl	8001200 <_read>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_read_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_read_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20000154 	.word	0x20000154

080053f8 <_init>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

08005404 <_fini>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr
