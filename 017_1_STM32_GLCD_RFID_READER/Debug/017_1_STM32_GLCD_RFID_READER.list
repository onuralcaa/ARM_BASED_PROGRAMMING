
017_1_STM32_GLCD_RFID_READER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  08013888  08013888  00023888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cc8  08015cc8  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08015cc8  08015cc8  00025cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cd0  08015cd0  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cd0  08015cd0  00025cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cd4  08015cd4  00025cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08015cd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000564c  2000018c  08015e64  0003018c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200057d8  08015e64  000357d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a6e  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031aa  00000000  00000000  00042c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00045dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00046f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a2  00000000  00000000  00047ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154d1  00000000  00000000  0006e382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d774a  00000000  00000000  00083853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0015af9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  0015b070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00160398  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00160464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013870 	.word	0x08013870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08013870 	.word	0x08013870

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000588:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <GUI_X_Config+0x18>)
 800058e:	f00e fd4b 	bl	800f028 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <GUI_X_Config+0x1c>)
 8000594:	f00d f8fa 	bl	800d78c <GUI_SetDefaultFont>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001a8 	.word	0x200001a8
 80005a0:	08013f60 	.word	0x08013f60

080005a4 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LcdWriteReg+0x3c>)
 80005c4:	f002 f9f2 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <LcdWriteReg+0x3c>)
 80005ce:	f002 f9ed 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2301      	movs	r3, #1
 80005d6:	2201      	movs	r2, #1
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <LcdWriteReg+0x40>)
 80005da:	f002 ff11 	bl	8003400 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <LcdWriteReg+0x3c>)
 80005e4:	f002 f9e2 	bl	80029ac <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020800 	.word	0x40020800
 80005f4:	200052ac 	.word	0x200052ac

080005f8 <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <LcdWriteData+0x3c>)
 8000618:	f002 f9c8 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <LcdWriteData+0x3c>)
 8000622:	f002 f9c3 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2301      	movs	r3, #1
 800062a:	2201      	movs	r2, #1
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LcdWriteData+0x40>)
 800062e:	f002 fee7 	bl	8003400 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2102      	movs	r1, #2
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <LcdWriteData+0x3c>)
 8000638:	f002 f9b8 	bl	80029ac <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020800 	.word	0x40020800
 8000648:	200052ac 	.word	0x200052ac

0800064c <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 8000656:	e011      	b.n	800067c <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LcdWriteDataMultiple+0x44>)
 800065e:	f002 f9a5 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <LcdWriteDataMultiple+0x44>)
 8000668:	f002 f9a0 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	1c4b      	adds	r3, r1, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	2301      	movs	r3, #1
 8000674:	2201      	movs	r2, #1
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <LcdWriteDataMultiple+0x48>)
 8000678:	f002 fec2 	bl	8003400 <HAL_SPI_Transmit>
	while (NumItems--)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	603a      	str	r2, [r7, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e8      	bne.n	8000658 <LcdWriteDataMultiple+0xc>
  }
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020800 	.word	0x40020800
 8000694:	200052ac 	.word	0x200052ac

08000698 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 80006a2:	bf00      	nop
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	603a      	str	r2, [r7, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1fa      	bne.n	80006a4 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LcdInit>:

void LcdInit(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	489a      	ldr	r0, [pc, #616]	; (8000930 <LcdInit+0x274>)
 80006c8:	f002 f970 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	4897      	ldr	r0, [pc, #604]	; (8000930 <LcdInit+0x274>)
 80006d2:	f002 f96b 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	4895      	ldr	r0, [pc, #596]	; (8000930 <LcdInit+0x274>)
 80006dc:	f002 f966 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 80006e0:	2002      	movs	r0, #2
 80006e2:	f001 fea5 	bl	8002430 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	4891      	ldr	r0, [pc, #580]	; (8000930 <LcdInit+0x274>)
 80006ec:	f002 f95e 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	488e      	ldr	r0, [pc, #568]	; (8000930 <LcdInit+0x274>)
 80006f6:	f002 f959 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	488c      	ldr	r0, [pc, #560]	; (8000930 <LcdInit+0x274>)
 8000700:	f002 f954 	bl	80029ac <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	e005      	b.n	8000716 <LcdInit+0x5a>
		LcdWriteReg(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ff52 	bl	80005b4 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d9f6      	bls.n	800070a <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4883      	ldr	r0, [pc, #524]	; (8000930 <LcdInit+0x274>)
 8000722:	f002 f943 	bl	80029ac <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff44 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f001 fe7e 	bl	8002430 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000734:	20cb      	movs	r0, #203	; 0xcb
 8000736:	f7ff ff3d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x39);
 800073a:	2039      	movs	r0, #57	; 0x39
 800073c:	f7ff ff64 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2C);
 8000740:	202c      	movs	r0, #44	; 0x2c
 8000742:	f7ff ff61 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ff5e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x34);
 800074c:	2034      	movs	r0, #52	; 0x34
 800074e:	f7ff ff5b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x02);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff58 	bl	8000608 <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 8000758:	20cf      	movs	r0, #207	; 0xcf
 800075a:	f7ff ff2b 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff52 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 8000764:	20c1      	movs	r0, #193	; 0xc1
 8000766:	f7ff ff4f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x30);
 800076a:	2030      	movs	r0, #48	; 0x30
 800076c:	f7ff ff4c 	bl	8000608 <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 8000770:	20e8      	movs	r0, #232	; 0xe8
 8000772:	f7ff ff1f 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x85);
 8000776:	2085      	movs	r0, #133	; 0x85
 8000778:	f7ff ff46 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff43 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x78);
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f7ff ff40 	bl	8000608 <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 8000788:	20ea      	movs	r0, #234	; 0xea
 800078a:	f7ff ff13 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff3a 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff37 	bl	8000608 <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff0a 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x64);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f7ff ff31 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff ff2e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x12);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f7ff ff2b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x81);
 80007b2:	2081      	movs	r0, #129	; 0x81
 80007b4:	f7ff ff28 	bl	8000608 <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80007b8:	20f7      	movs	r0, #247	; 0xf7
 80007ba:	f7ff fefb 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x20);
 80007be:	2020      	movs	r0, #32
 80007c0:	f7ff ff22 	bl	8000608 <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80007c4:	20c0      	movs	r0, #192	; 0xc0
 80007c6:	f7ff fef5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x23);
 80007ca:	2023      	movs	r0, #35	; 0x23
 80007cc:	f7ff ff1c 	bl	8000608 <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80007d0:	20c1      	movs	r0, #193	; 0xc1
 80007d2:	f7ff feef 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x10);
 80007d6:	2010      	movs	r0, #16
 80007d8:	f7ff ff16 	bl	8000608 <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80007dc:	20c5      	movs	r0, #197	; 0xc5
 80007de:	f7ff fee9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x3E);
 80007e2:	203e      	movs	r0, #62	; 0x3e
 80007e4:	f7ff ff10 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x28);
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f7ff ff0d 	bl	8000608 <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80007ee:	20c7      	movs	r0, #199	; 0xc7
 80007f0:	f7ff fee0 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x86);
 80007f4:	2086      	movs	r0, #134	; 0x86
 80007f6:	f7ff ff07 	bl	8000608 <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 80007fa:	2036      	movs	r0, #54	; 0x36
 80007fc:	f7ff feda 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x48);
 8000800:	2048      	movs	r0, #72	; 0x48
 8000802:	f7ff ff01 	bl	8000608 <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 8000806:	203a      	movs	r0, #58	; 0x3a
 8000808:	f7ff fed4 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x55);
 800080c:	2055      	movs	r0, #85	; 0x55
 800080e:	f7ff fefb 	bl	8000608 <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 8000812:	20b1      	movs	r0, #177	; 0xb1
 8000814:	f7ff fece 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fef5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x18);
 800081e:	2018      	movs	r0, #24
 8000820:	f7ff fef2 	bl	8000608 <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000824:	20b6      	movs	r0, #182	; 0xb6
 8000826:	f7ff fec5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x08);
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff feec 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x82);
 8000830:	2082      	movs	r0, #130	; 0x82
 8000832:	f7ff fee9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x27);
 8000836:	2027      	movs	r0, #39	; 0x27
 8000838:	f7ff fee6 	bl	8000608 <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 800083c:	20f2      	movs	r0, #242	; 0xf2
 800083e:	f7ff feb9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fee0 	bl	8000608 <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f7ff feb3 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x01);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff feda 	bl	8000608 <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000854:	20e0      	movs	r0, #224	; 0xe0
 8000856:	f7ff fead 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x0F);
 800085a:	200f      	movs	r0, #15
 800085c:	f7ff fed4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000860:	2031      	movs	r0, #49	; 0x31
 8000862:	f7ff fed1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2B);
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f7ff fece 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 800086c:	200c      	movs	r0, #12
 800086e:	f7ff fecb 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 8000872:	200e      	movs	r0, #14
 8000874:	f7ff fec8 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 8000878:	2008      	movs	r0, #8
 800087a:	f7ff fec5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x4E);
 800087e:	204e      	movs	r0, #78	; 0x4e
 8000880:	f7ff fec2 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xF1);
 8000884:	20f1      	movs	r0, #241	; 0xf1
 8000886:	f7ff febf 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x37);
 800088a:	2037      	movs	r0, #55	; 0x37
 800088c:	f7ff febc 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 8000890:	2007      	movs	r0, #7
 8000892:	f7ff feb9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x10);
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff feb6 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff feb3 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008a2:	200e      	movs	r0, #14
 80008a4:	f7ff feb0 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x09);
 80008a8:	2009      	movs	r0, #9
 80008aa:	f7ff fead 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff feaa 	bl	8000608 <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80008b4:	20e1      	movs	r0, #225	; 0xe1
 80008b6:	f7ff fe7d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fea4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008c0:	200e      	movs	r0, #14
 80008c2:	f7ff fea1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x14);
 80008c6:	2014      	movs	r0, #20
 80008c8:	f7ff fe9e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff fe9b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x11);
 80008d2:	2011      	movs	r0, #17
 80008d4:	f7ff fe98 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe95 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 80008de:	2031      	movs	r0, #49	; 0x31
 80008e0:	f7ff fe92 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 80008e4:	20c1      	movs	r0, #193	; 0xc1
 80008e6:	f7ff fe8f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x48);
 80008ea:	2048      	movs	r0, #72	; 0x48
 80008ec:	f7ff fe8c 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f7ff fe89 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fe86 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 80008fc:	200c      	movs	r0, #12
 80008fe:	f7ff fe83 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000902:	2031      	movs	r0, #49	; 0x31
 8000904:	f7ff fe80 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x36);
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f7ff fe7d 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 800090e:	200f      	movs	r0, #15
 8000910:	f7ff fe7a 	bl	8000608 <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000914:	2011      	movs	r0, #17
 8000916:	f7ff fe4d 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(120);
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f001 fd88 	bl	8002430 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8000920:	2029      	movs	r0, #41	; 0x29
 8000922:	f7ff fe47 	bl	80005b4 <LcdWriteReg>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020800 	.word	0x40020800

08000934 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a0      	sub	sp, #128	; 0x80
 8000938:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800093a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2268      	movs	r2, #104	; 0x68
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f011 fcff 	bl	8012354 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	4916      	ldr	r1, [pc, #88]	; (80009b4 <LCD_X_Config+0x80>)
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <LCD_X_Config+0x84>)
 800095e:	f00c fe97 	bl	800d690 <GUI_DEVICE_CreateAndLink>
 8000962:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8000964:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	2000      	movs	r0, #0
 800096c:	f00b fb64 	bl	800c038 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8000970:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000974:	21f0      	movs	r1, #240	; 0xf0
 8000976:	2000      	movs	r0, #0
 8000978:	f00b fb46 	bl	800c008 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_ROTATION_180;
 800097c:	2307      	movs	r3, #7
 800097e:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8000980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000984:	4619      	mov	r1, r3
 8000986:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000988:	f00b fadd 	bl	800bf46 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_X_Config+0x88>)
 800098e:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LCD_X_Config+0x8c>)
 8000992:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_X_Config+0x90>)
 8000996:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LCD_X_Config+0x94>)
 800099a:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_X_Config+0x98>)
 800099e:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 80009a0:	4639      	mov	r1, r7
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LCD_X_Config+0x9c>)
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LCD_X_Config+0xa0>)
 80009a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80009a8:	f00b faeb 	bl	800bf82 <GUIDRV_FlexColor_SetFunc>
}
 80009ac:	bf00      	nop
 80009ae:	3780      	adds	r7, #128	; 0x80
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08015034 	.word	0x08015034
 80009b8:	08014ed4 	.word	0x08014ed4
 80009bc:	080005b5 	.word	0x080005b5
 80009c0:	08000609 	.word	0x08000609
 80009c4:	0800064d 	.word	0x0800064d
 80009c8:	080005f9 	.word	0x080005f9
 80009cc:	08000699 	.word	0x08000699
 80009d0:	0800b909 	.word	0x0800b909
 80009d4:	0800b205 	.word	0x0800b205

080009d8 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d103      	bne.n	80009f2 <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80009ea:	f7ff fe67 	bl	80006bc <LcdInit>
    return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e003      	b.n	80009fa <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80009f8:	697b      	ldr	r3, [r7, #20]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]

  switch (pMsg->MsgId) {
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f009 f92e 	bl	8009c6c <WM_DefaultProc>
    break;
 8000a10:	bf00      	nop
  }
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <CreatePersonelGecis>:
/*********************************************************************
*
*       CreatePersonelGecis
*/
WM_HWIN CreatePersonelGecis(void);
WM_HWIN CreatePersonelGecis(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8000a22:	f007 fd27 	bl	8008474 <WM_GetDesktopWindow>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2200      	movs	r2, #0
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	9200      	str	r2, [sp, #0]
 8000a30:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <CreatePersonelGecis+0x2c>)
 8000a32:	2109      	movs	r1, #9
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <CreatePersonelGecis+0x30>)
 8000a36:	f007 f9bd 	bl	8007db4 <GUI_CreateDialogBox>
 8000a3a:	6078      	str	r0, [r7, #4]
  return hWin;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08000a03 	.word	0x08000a03
 8000a4c:	08013984 	.word	0x08013984

08000a50 <RFID_Card_Check_ID>:

// USER START (Optionally insert additional public code)
char RFID_Card_Check_ID(char *CardID)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(MFRC522_Check(CardID) == MI_OK)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f001 f8af 	bl	8001bbc <MFRC522_Check>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <RFID_Card_Check_ID+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <RFID_Card_Check_ID+0x3c>)
 8000a6c:	f001 ff9e 	bl	80029ac <HAL_GPIO_WritePin>
		return MI_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e006      	b.n	8000a82 <RFID_Card_Check_ID+0x32>
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <RFID_Card_Check_ID+0x3c>)
 8000a7c:	f001 ff96 	bl	80029ac <HAL_GPIO_WritePin>

	return MI_NOK;
 8000a80:	2303      	movs	r3, #3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020c00 	.word	0x40020c00

08000a90 <CheckDataBase>:


char CheckDataBase(char *CardID)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	6078      	str	r0, [r7, #4]
	sprintf(strCardID, "%03d%03d%03d%03d%03d",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461c      	mov	r4, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	9101      	str	r1, [sp, #4]
 8000ac0:	9200      	str	r2, [sp, #0]
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	493f      	ldr	r1, [pc, #252]	; (8000bc4 <CheckDataBase+0x134>)
 8000ac8:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <CheckDataBase+0x138>)
 8000aca:	f011 fc4b 	bl	8012364 <siprintf>

	res = f_open(&file, "liste.txt", FA_READ);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	493e      	ldr	r1, [pc, #248]	; (8000bcc <CheckDataBase+0x13c>)
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <CheckDataBase+0x140>)
 8000ad4:	f005 fcde 	bl	8006494 <f_open>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <CheckDataBase+0x144>)
 8000ade:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <CheckDataBase+0x144>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d160      	bne.n	8000baa <CheckDataBase+0x11a>
	{
		res = f_read(&file, buffer, sizeof(buffer), &br);
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <CheckDataBase+0x148>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aee:	493b      	ldr	r1, [pc, #236]	; (8000bdc <CheckDataBase+0x14c>)
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <CheckDataBase+0x140>)
 8000af2:	f005 ff97 	bl	8006a24 <f_read>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <CheckDataBase+0x144>)
 8000afc:	701a      	strb	r2, [r3, #0]
		if(res == FR_OK)
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <CheckDataBase+0x144>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d14c      	bne.n	8000ba0 <CheckDataBase+0x110>
		{
			ptr = strstr(buffer, strCardID);
 8000b06:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <CheckDataBase+0x138>)
 8000b08:	4834      	ldr	r0, [pc, #208]	; (8000bdc <CheckDataBase+0x14c>)
 8000b0a:	f011 fc60 	bl	80123ce <strstr>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <CheckDataBase+0x150>)
 8000b12:	6013      	str	r3, [r2, #0]
			if(ptr)
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <CheckDataBase+0x150>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d04b      	beq.n	8000bb4 <CheckDataBase+0x124>
			{
				token = strtok(ptr, "\t");
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <CheckDataBase+0x150>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4930      	ldr	r1, [pc, #192]	; (8000be4 <CheckDataBase+0x154>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 fc6a 	bl	80123fc <strtok>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <CheckDataBase+0x158>)
 8000b2e:	601a      	str	r2, [r3, #0]
				i=0;
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <CheckDataBase+0x15c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	801a      	strh	r2, [r3, #0]
				while(token != NULL)
 8000b36:	e021      	b.n	8000b7c <CheckDataBase+0xec>
				{
					sprintf(&PersonelInfo[i++][0], token);
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <CheckDataBase+0x15c>)
 8000b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b3e:	b293      	uxth	r3, r2
 8000b40:	3301      	adds	r3, #1
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b219      	sxth	r1, r3
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <CheckDataBase+0x15c>)
 8000b48:	8019      	strh	r1, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <CheckDataBase+0x160>)
 8000b54:	4413      	add	r3, r2
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <CheckDataBase+0x158>)
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f011 fc01 	bl	8012364 <siprintf>
					if(i==5) break;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <CheckDataBase+0x15c>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	d00c      	beq.n	8000b86 <CheckDataBase+0xf6>
					token = strtok(NULL, "\t");
 8000b6c:	491d      	ldr	r1, [pc, #116]	; (8000be4 <CheckDataBase+0x154>)
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f011 fc44 	bl	80123fc <strtok>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <CheckDataBase+0x158>)
 8000b7a:	601a      	str	r2, [r3, #0]
				while(token != NULL)
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <CheckDataBase+0x158>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1d9      	bne.n	8000b38 <CheckDataBase+0xa8>
 8000b84:	e000      	b.n	8000b88 <CheckDataBase+0xf8>
					if(i==5) break;
 8000b86:	bf00      	nop
				}
				ptr = strchr(&PersonelInfo[4][0], '\r');
 8000b88:	210d      	movs	r1, #13
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <CheckDataBase+0x164>)
 8000b8c:	f011 fc0a 	bl	80123a4 <strchr>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <CheckDataBase+0x150>)
 8000b94:	6013      	str	r3, [r2, #0]
				*ptr = 0;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <CheckDataBase+0x150>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e009      	b.n	8000bb4 <CheckDataBase+0x124>
			}
		}
		else
		{
			f_close(&file);
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <CheckDataBase+0x140>)
 8000ba2:	f006 f91c 	bl	8006dde <f_close>
			return 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e008      	b.n	8000bbc <CheckDataBase+0x12c>
		}
	}
	else
	{
		f_close(&file);
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <CheckDataBase+0x140>)
 8000bac:	f006 f917 	bl	8006dde <f_close>
		return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e003      	b.n	8000bbc <CheckDataBase+0x12c>
	}
	f_close(&file);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <CheckDataBase+0x140>)
 8000bb6:	f006 f912 	bl	8006dde <f_close>

	return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	080138c8 	.word	0x080138c8
 8000bc8:	20004e24 	.word	0x20004e24
 8000bcc:	080138e0 	.word	0x080138e0
 8000bd0:	200039ec 	.word	0x200039ec
 8000bd4:	200039e8 	.word	0x200039e8
 8000bd8:	20004a1c 	.word	0x20004a1c
 8000bdc:	20004a20 	.word	0x20004a20
 8000be0:	20004e20 	.word	0x20004e20
 8000be4:	080138ec 	.word	0x080138ec
 8000be8:	20004e34 	.word	0x20004e34
 8000bec:	20004a1e 	.word	0x20004a1e
 8000bf0:	20004e38 	.word	0x20004e38
 8000bf4:	20004e88 	.word	0x20004e88

08000bf8 <_GetData>:

char _acBuffer[1024];
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 8000c06:	6839      	ldr	r1, [r7, #0]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f006 f912 	bl	8006e32 <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4905      	ldr	r1, [pc, #20]	; (8000c2c <_GetData+0x34>)
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f005 ff04 	bl	8006a24 <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <_GetData+0x34>)
 8000c20:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8000c22:	697b      	ldr	r3, [r7, #20]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20004e9c 	.word	0x20004e9c

08000c30 <RFID_Reader>:


void RFID_Reader()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
	WM_HWIN hWin;
	TEXT_Handle		hText4,hText5,hText6,hText7;

	ret = f_mount(&fs, "", 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	4932      	ldr	r1, [pc, #200]	; (8000d04 <RFID_Reader+0xd4>)
 8000c3a:	4833      	ldr	r0, [pc, #204]	; (8000d08 <RFID_Reader+0xd8>)
 8000c3c:	f005 fbe4 	bl	8006408 <f_mount>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <RFID_Reader+0xdc>)
 8000c46:	701a      	strb	r2, [r3, #0]
	if(ret != FR_OK)
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <RFID_Reader+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d000      	beq.n	8000c52 <RFID_Reader+0x22>
	{
		while(1);
 8000c50:	e7fe      	b.n	8000c50 <RFID_Reader+0x20>
	}

	hWin = CreatePersonelGecis();
 8000c52:	f7ff fee3 	bl	8000a1c <CreatePersonelGecis>
 8000c56:	6178      	str	r0, [r7, #20]

	hText4 = WM_GetDialogItem(hWin, ID_TEXT_4);
 8000c58:	f640 0106 	movw	r1, #2054	; 0x806
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f007 fc59 	bl	8008514 <WM_GetDialogItem>
 8000c62:	6138      	str	r0, [r7, #16]
	hText5 = WM_GetDialogItem(hWin, ID_TEXT_5);
 8000c64:	f640 0107 	movw	r1, #2055	; 0x807
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f007 fc53 	bl	8008514 <WM_GetDialogItem>
 8000c6e:	60f8      	str	r0, [r7, #12]
	hText6 = WM_GetDialogItem(hWin, ID_TEXT_6);
 8000c70:	f640 0108 	movw	r1, #2056	; 0x808
 8000c74:	6978      	ldr	r0, [r7, #20]
 8000c76:	f007 fc4d 	bl	8008514 <WM_GetDialogItem>
 8000c7a:	60b8      	str	r0, [r7, #8]
	hText7 = WM_GetDialogItem(hWin, ID_TEXT_7);
 8000c7c:	f640 0109 	movw	r1, #2057	; 0x809
 8000c80:	6978      	ldr	r0, [r7, #20]
 8000c82:	f007 fc47 	bl	8008514 <WM_GetDialogItem>
 8000c86:	6078      	str	r0, [r7, #4]

	while(1)
	{

		ret = RFID_Card_Check_ID(CardID);
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <RFID_Reader+0xe0>)
 8000c8a:	f7ff fee1 	bl	8000a50 <RFID_Card_Check_ID>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <RFID_Reader+0xdc>)
 8000c94:	701a      	strb	r2, [r3, #0]
		if(ret == MI_OK)
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <RFID_Reader+0xdc>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d12b      	bne.n	8000cf6 <RFID_Reader+0xc6>
		{
			if(CheckDataBase(CardID))
 8000c9e:	481c      	ldr	r0, [pc, #112]	; (8000d10 <RFID_Reader+0xe0>)
 8000ca0:	f7ff fef6 	bl	8000a90 <CheckDataBase>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d025      	beq.n	8000cf6 <RFID_Reader+0xc6>
			{
				TEXT_SetText(hText4, &PersonelInfo[1][0]);
 8000caa:	491a      	ldr	r1, [pc, #104]	; (8000d14 <RFID_Reader+0xe4>)
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f006 fccc 	bl	800764a <TEXT_SetText>
				TEXT_SetText(hText5, &PersonelInfo[2][0]);
 8000cb2:	4919      	ldr	r1, [pc, #100]	; (8000d18 <RFID_Reader+0xe8>)
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f006 fcc8 	bl	800764a <TEXT_SetText>
				TEXT_SetText(hText6, &PersonelInfo[3][0]);
 8000cba:	4918      	ldr	r1, [pc, #96]	; (8000d1c <RFID_Reader+0xec>)
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f006 fcc4 	bl	800764a <TEXT_SetText>
				TEXT_SetText(hText7, &PersonelInfo[0][0]);
 8000cc2:	4917      	ldr	r1, [pc, #92]	; (8000d20 <RFID_Reader+0xf0>)
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f006 fcc0 	bl	800764a <TEXT_SetText>

				res = f_open(&file, &PersonelInfo[4][0], FA_OPEN_EXISTING | FA_READ);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4915      	ldr	r1, [pc, #84]	; (8000d24 <RFID_Reader+0xf4>)
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <RFID_Reader+0xf8>)
 8000cd0:	f005 fbe0 	bl	8006494 <f_open>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <RFID_Reader+0xfc>)
 8000cda:	701a      	strb	r2, [r3, #0]
				if (res == FR_OK)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <RFID_Reader+0xfc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <RFID_Reader+0xc0>
					GUI_BMP_DrawEx(_GetData, &file, 14, 30);
 8000ce4:	231e      	movs	r3, #30
 8000ce6:	220e      	movs	r2, #14
 8000ce8:	490f      	ldr	r1, [pc, #60]	; (8000d28 <RFID_Reader+0xf8>)
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <RFID_Reader+0x100>)
 8000cec:	f00d fe42 	bl	800e974 <GUI_BMP_DrawEx>
				f_close(&file);
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <RFID_Reader+0xf8>)
 8000cf2:	f006 f874 	bl	8006dde <f_close>
			}
		}

		HAL_Delay(500);
 8000cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfa:	f001 fb99 	bl	8002430 <HAL_Delay>
		GUI_Exec();
 8000cfe:	f00c fec1 	bl	800da84 <GUI_Exec>
		ret = RFID_Card_Check_ID(CardID);
 8000d02:	e7c1      	b.n	8000c88 <RFID_Reader+0x58>
 8000d04:	080138f0 	.word	0x080138f0
 8000d08:	200029b0 	.word	0x200029b0
 8000d0c:	200029ad 	.word	0x200029ad
 8000d10:	200029a8 	.word	0x200029a8
 8000d14:	20004e4c 	.word	0x20004e4c
 8000d18:	20004e60 	.word	0x20004e60
 8000d1c:	20004e74 	.word	0x20004e74
 8000d20:	20004e38 	.word	0x20004e38
 8000d24:	20004e88 	.word	0x20004e88
 8000d28:	200039ec 	.word	0x200039ec
 8000d2c:	200039e8 	.word	0x200039e8
 8000d30:	08000bf9 	.word	0x08000bf9

08000d34 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <SELECT+0x1c>)
 8000d40:	f001 fe34 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f001 fb73 	bl	8002430 <HAL_Delay>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40020400 	.word	0x40020400

08000d54 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <DESELECT+0x1c>)
 8000d60:	f001 fe24 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 fb63 	bl	8002430 <HAL_Delay>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020400 	.word	0x40020400

08000d74 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d7e:	bf00      	nop
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <SPI_TxByte+0x30>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d1f8      	bne.n	8000d80 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d8e:	1df9      	adds	r1, r7, #7
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <SPI_TxByte+0x30>)
 8000d96:	f002 fb33 	bl	8003400 <HAL_SPI_Transmit>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20005304 	.word	0x20005304

08000da8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000db4:	bf00      	nop
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SPI_TxBuffer+0x30>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d1f8      	bne.n	8000db6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <SPI_TxBuffer+0x30>)
 8000dcc:	f002 fb18 	bl	8003400 <HAL_SPI_Transmit>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20005304 	.word	0x20005304

08000ddc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000de2:	23ff      	movs	r3, #255	; 0xff
 8000de4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000de6:	bf00      	nop
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <SPI_RxByte+0x34>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d1f8      	bne.n	8000de8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000df6:	1dba      	adds	r2, r7, #6
 8000df8:	1df9      	adds	r1, r7, #7
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <SPI_RxByte+0x34>)
 8000e02:	f002 fc31 	bl	8003668 <HAL_SPI_TransmitReceive>

	return data;
 8000e06:	79bb      	ldrb	r3, [r7, #6]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20005304 	.word	0x20005304

08000e14 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e1c:	f7ff ffde 	bl	8000ddc <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <SD_ReadyWait+0x30>)
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e3e:	f7ff ffcd 	bl	8000ddc <SPI_RxByte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <SD_ReadyWait+0x24>
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SD_ReadyWait+0x30>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f4      	bne.n	8000e3e <SD_ReadyWait+0xe>

	return res;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000529e 	.word	0x2000529e

08000e64 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e6a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e6e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e70:	f7ff ff70 	bl	8000d54 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	e005      	b.n	8000e86 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e7a:	20ff      	movs	r0, #255	; 0xff
 8000e7c:	f7ff ff7a 	bl	8000d74 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	ddf6      	ble.n	8000e7a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e8c:	f7ff ff52 	bl	8000d34 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ea4:	2395      	movs	r3, #149	; 0x95
 8000ea6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2106      	movs	r1, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff7b 	bl	8000da8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eb2:	e002      	b.n	8000eba <SD_PowerOn+0x56>
	{
		cnt--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eba:	f7ff ff8f 	bl	8000ddc <SPI_RxByte>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <SD_PowerOn+0x66>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f4      	bne.n	8000eb4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000eca:	f7ff ff43 	bl	8000d54 <DESELECT>
	SPI_TxByte(0XFF);
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	f7ff ff50 	bl	8000d74 <SPI_TxByte>

	PowerFlag = 1;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <SD_PowerOn+0x80>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200052a1 	.word	0x200052a1

08000ee8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SD_PowerOff+0x14>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	200052a1 	.word	0x200052a1

08000f00 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SD_CheckPower+0x14>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200052a1 	.word	0x200052a1

08000f18 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <SD_RxDataBlock+0x58>)
 8000f24:	22c8      	movs	r2, #200	; 0xc8
 8000f26:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f28:	f7ff ff58 	bl	8000ddc <SPI_RxByte>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d103      	bne.n	8000f3e <SD_RxDataBlock+0x26>
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <SD_RxDataBlock+0x58>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f4      	bne.n	8000f28 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2bfe      	cmp	r3, #254	; 0xfe
 8000f42:	d001      	beq.n	8000f48 <SD_RxDataBlock+0x30>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e00f      	b.n	8000f68 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff60 	bl	8000e14 <SPI_RxBytePtr>
	} while(len--);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	603a      	str	r2, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f4      	bne.n	8000f48 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f5e:	f7ff ff3d 	bl	8000ddc <SPI_RxByte>
	SPI_RxByte();
 8000f62:	f7ff ff3b 	bl	8000ddc <SPI_RxByte>

	return TRUE;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000529c 	.word	0x2000529c

08000f74 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f84:	f7ff ff54 	bl	8000e30 <SD_ReadyWait>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bff      	cmp	r3, #255	; 0xff
 8000f8c:	d001      	beq.n	8000f92 <SD_TxDataBlock+0x1e>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e02f      	b.n	8000ff2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff feed 	bl	8000d74 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	2bfd      	cmp	r3, #253	; 0xfd
 8000f9e:	d020      	beq.n	8000fe2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff feff 	bl	8000da8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000faa:	f7ff ff17 	bl	8000ddc <SPI_RxByte>
		SPI_RxByte();
 8000fae:	f7ff ff15 	bl	8000ddc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fb2:	e00b      	b.n	8000fcc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fb4:	f7ff ff12 	bl	8000ddc <SPI_RxByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d006      	beq.n	8000fd4 <SD_TxDataBlock+0x60>
			i++;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	2b40      	cmp	r3, #64	; 0x40
 8000fd0:	d9f0      	bls.n	8000fb4 <SD_TxDataBlock+0x40>
 8000fd2:	e000      	b.n	8000fd6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000fd4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ff00 	bl	8000ddc <SPI_RxByte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0fa      	beq.n	8000fd8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d101      	bne.n	8000ff0 <SD_TxDataBlock+0x7c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	6039      	str	r1, [r7, #0]
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001006:	f7ff ff13 	bl	8000e30 <SD_ReadyWait>
 800100a:	4603      	mov	r3, r0
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	d001      	beq.n	8001014 <SD_SendCmd+0x1a>
 8001010:	23ff      	movs	r3, #255	; 0xff
 8001012:	e042      	b.n	800109a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feac 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	0e1b      	lsrs	r3, r3, #24
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fea6 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fea0 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe9a 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe95 	bl	8000d74 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b40      	cmp	r3, #64	; 0x40
 800104e:	d102      	bne.n	8001056 <SD_SendCmd+0x5c>
 8001050:	2395      	movs	r3, #149	; 0x95
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e007      	b.n	8001066 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b48      	cmp	r3, #72	; 0x48
 800105a:	d102      	bne.n	8001062 <SD_SendCmd+0x68>
 800105c:	2387      	movs	r3, #135	; 0x87
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <SD_SendCmd+0x6c>
	else crc = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe83 	bl	8000d74 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b4c      	cmp	r3, #76	; 0x4c
 8001072:	d101      	bne.n	8001078 <SD_SendCmd+0x7e>
 8001074:	f7ff feb2 	bl	8000ddc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001078:	230a      	movs	r3, #10
 800107a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800107c:	f7ff feae 	bl	8000ddc <SPI_RxByte>
 8001080:	4603      	mov	r3, r0
 8001082:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001084:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001088:	2b00      	cmp	r3, #0
 800108a:	da05      	bge.n	8001098 <SD_SendCmd+0x9e>
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	3b01      	subs	r3, #1
 8001090:	73bb      	strb	r3, [r7, #14]
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f1      	bne.n	800107c <SD_SendCmd+0x82>

	return res;
 8001098:	7b7b      	ldrb	r3, [r7, #13]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SD_disk_initialize+0x14>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0d1      	b.n	800125c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <SD_disk_initialize+0x1c0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <SD_disk_initialize+0x2a>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <SD_disk_initialize+0x1c0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	e0c6      	b.n	800125c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010ce:	f7ff fec9 	bl	8000e64 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010d2:	f7ff fe2f 	bl	8000d34 <SELECT>

	/* check disk type */
	type = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010da:	2100      	movs	r1, #0
 80010dc:	2040      	movs	r0, #64	; 0x40
 80010de:	f7ff ff8c 	bl	8000ffa <SD_SendCmd>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 80a1 	bne.w	800122c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80010ea:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <SD_disk_initialize+0x1c4>)
 80010ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f6:	2048      	movs	r0, #72	; 0x48
 80010f8:	f7ff ff7f 	bl	8000ffa <SD_SendCmd>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d155      	bne.n	80011ae <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e00c      	b.n	8001122 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001108:	7bfc      	ldrb	r4, [r7, #15]
 800110a:	f7ff fe67 	bl	8000ddc <SPI_RxByte>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f104 0310 	add.w	r3, r4, #16
 8001116:	443b      	add	r3, r7
 8001118:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d9ef      	bls.n	8001108 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d17e      	bne.n	800122c <SD_disk_initialize+0x188>
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	2baa      	cmp	r3, #170	; 0xaa
 8001132:	d17b      	bne.n	800122c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001134:	2100      	movs	r1, #0
 8001136:	2077      	movs	r0, #119	; 0x77
 8001138:	f7ff ff5f 	bl	8000ffa <SD_SendCmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d807      	bhi.n	8001152 <SD_disk_initialize+0xae>
 8001142:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001146:	2069      	movs	r0, #105	; 0x69
 8001148:	f7ff ff57 	bl	8000ffa <SD_SendCmd>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1ec      	bne.n	8001134 <SD_disk_initialize+0x90>
 800115a:	e000      	b.n	800115e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800115c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d062      	beq.n	800122c <SD_disk_initialize+0x188>
 8001166:	2100      	movs	r1, #0
 8001168:	207a      	movs	r0, #122	; 0x7a
 800116a:	f7ff ff46 	bl	8000ffa <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d15b      	bne.n	800122c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e00c      	b.n	8001194 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800117a:	7bfc      	ldrb	r4, [r7, #15]
 800117c:	f7ff fe2e 	bl	8000ddc <SPI_RxByte>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	f104 0310 	add.w	r3, r4, #16
 8001188:	443b      	add	r3, r7
 800118a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d9ef      	bls.n	800117a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SD_disk_initialize+0x104>
 80011a4:	230c      	movs	r3, #12
 80011a6:	e000      	b.n	80011aa <SD_disk_initialize+0x106>
 80011a8:	2304      	movs	r3, #4
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	e03e      	b.n	800122c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011ae:	2100      	movs	r1, #0
 80011b0:	2077      	movs	r0, #119	; 0x77
 80011b2:	f7ff ff22 	bl	8000ffa <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d808      	bhi.n	80011ce <SD_disk_initialize+0x12a>
 80011bc:	2100      	movs	r1, #0
 80011be:	2069      	movs	r0, #105	; 0x69
 80011c0:	f7ff ff1b 	bl	8000ffa <SD_SendCmd>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d801      	bhi.n	80011ce <SD_disk_initialize+0x12a>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e000      	b.n	80011d0 <SD_disk_initialize+0x12c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d10e      	bne.n	80011f6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011d8:	2100      	movs	r1, #0
 80011da:	2077      	movs	r0, #119	; 0x77
 80011dc:	f7ff ff0d 	bl	8000ffa <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d80e      	bhi.n	8001204 <SD_disk_initialize+0x160>
 80011e6:	2100      	movs	r1, #0
 80011e8:	2069      	movs	r0, #105	; 0x69
 80011ea:	f7ff ff06 	bl	8000ffa <SD_SendCmd>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <SD_disk_initialize+0x160>
 80011f4:	e00c      	b.n	8001210 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011f6:	2100      	movs	r1, #0
 80011f8:	2041      	movs	r0, #65	; 0x41
 80011fa:	f7ff fefe 	bl	8000ffa <SD_SendCmd>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e2      	bne.n	80011d2 <SD_disk_initialize+0x12e>
 800120c:	e000      	b.n	8001210 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800120e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <SD_disk_initialize+0x184>
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	2050      	movs	r0, #80	; 0x50
 800121e:	f7ff feec 	bl	8000ffa <SD_SendCmd>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_initialize+0x188>
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <SD_disk_initialize+0x1c8>)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001232:	f7ff fd8f 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001236:	f7ff fdd1 	bl	8000ddc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <SD_disk_initialize+0x1c0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SD_disk_initialize+0x1c0>)
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e001      	b.n	8001256 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001252:	f7ff fe49 	bl	8000ee8 <SD_PowerOff>
	}

	return Stat;
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SD_disk_initialize+0x1c0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	2000529c 	.word	0x2000529c
 800126c:	200052a0 	.word	0x200052a0

08001270 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SD_disk_status+0x14>
 8001280:	2301      	movs	r3, #1
 8001282:	e002      	b.n	800128a <SD_disk_status+0x1a>
	return Stat;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SD_disk_status+0x28>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000

0800129c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <SD_disk_read+0x1c>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <SD_disk_read+0x20>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e051      	b.n	8001360 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <SD_disk_read+0xcc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SD_disk_read+0x32>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e048      	b.n	8001360 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <SD_disk_read+0xd0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <SD_disk_read+0x44>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	607b      	str	r3, [r7, #4]

	SELECT();
 80012e0:	f7ff fd28 	bl	8000d34 <SELECT>

	if (count == 1)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d111      	bne.n	800130e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2051      	movs	r0, #81	; 0x51
 80012ee:	f7ff fe84 	bl	8000ffa <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d129      	bne.n	800134c <SD_disk_read+0xb0>
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff fe0b 	bl	8000f18 <SD_RxDataBlock>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <SD_disk_read+0xb0>
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	e01e      	b.n	800134c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2052      	movs	r0, #82	; 0x52
 8001312:	f7ff fe72 	bl	8000ffa <SD_SendCmd>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d117      	bne.n	800134c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800131c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f7ff fdf9 	bl	8000f18 <SD_RxDataBlock>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <SD_disk_read+0xa6>
				buff += 512;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001332:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ed      	bne.n	800131c <SD_disk_read+0x80>
 8001340:	e000      	b.n	8001344 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001342:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	204c      	movs	r0, #76	; 0x4c
 8001348:	f7ff fe57 	bl	8000ffa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800134c:	f7ff fd02 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001350:	f7ff fd44 	bl	8000ddc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	200052a0 	.word	0x200052a0

08001370 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <SD_disk_write+0x1c>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <SD_disk_write+0x20>
 800138c:	2304      	movs	r3, #4
 800138e:	e06b      	b.n	8001468 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <SD_disk_write+0x100>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SD_disk_write+0x32>
 800139e:	2303      	movs	r3, #3
 80013a0:	e062      	b.n	8001468 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <SD_disk_write+0x100>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SD_disk_write+0x44>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e059      	b.n	8001468 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <SD_disk_write+0x104>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <SD_disk_write+0x56>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80013c6:	f7ff fcb5 	bl	8000d34 <SELECT>

	if (count == 1)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d110      	bne.n	80013f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	2058      	movs	r0, #88	; 0x58
 80013d4:	f7ff fe11 	bl	8000ffa <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d13a      	bne.n	8001454 <SD_disk_write+0xe4>
 80013de:	21fe      	movs	r1, #254	; 0xfe
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f7ff fdc7 	bl	8000f74 <SD_TxDataBlock>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d033      	beq.n	8001454 <SD_disk_write+0xe4>
			count = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	e030      	b.n	8001454 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <SD_disk_write+0x104>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2077      	movs	r0, #119	; 0x77
 8001402:	f7ff fdfa 	bl	8000ffa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	2057      	movs	r0, #87	; 0x57
 800140a:	f7ff fdf6 	bl	8000ffa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2059      	movs	r0, #89	; 0x59
 8001412:	f7ff fdf2 	bl	8000ffa <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800141c:	21fc      	movs	r1, #252	; 0xfc
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fda8 	bl	8000f74 <SD_TxDataBlock>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <SD_disk_write+0xd0>
				buff += 512;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001430:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ee      	bne.n	800141c <SD_disk_write+0xac>
 800143e:	e000      	b.n	8001442 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001440:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001442:	21fd      	movs	r1, #253	; 0xfd
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fd95 	bl	8000f74 <SD_TxDataBlock>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <SD_disk_write+0xe4>
			{
				count = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001454:	f7ff fc7e 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001458:	f7ff fcc0 	bl	8000ddc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	200052a0 	.word	0x200052a0

08001478 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	603a      	str	r2, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	460b      	mov	r3, r1
 8001486:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SD_disk_ioctl+0x1e>
 8001492:	2304      	movs	r3, #4
 8001494:	e115      	b.n	80016c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d124      	bne.n	80014ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d012      	beq.n	80014d0 <SD_disk_ioctl+0x58>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	dc1a      	bgt.n	80014e4 <SD_disk_ioctl+0x6c>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <SD_disk_ioctl+0x40>
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d006      	beq.n	80014c4 <SD_disk_ioctl+0x4c>
 80014b6:	e015      	b.n	80014e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014b8:	f7ff fd16 	bl	8000ee8 <SD_PowerOff>
			res = RES_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c2:	e0fc      	b.n	80016be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80014c4:	f7ff fcce 	bl	8000e64 <SD_PowerOn>
			res = RES_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ce:	e0f6      	b.n	80016be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	1c5c      	adds	r4, r3, #1
 80014d4:	f7ff fd14 	bl	8000f00 <SD_CheckPower>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014e2:	e0ec      	b.n	80016be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ea:	e0e8      	b.n	80016be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <SD_disk_ioctl+0x254>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SD_disk_ioctl+0x86>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0e1      	b.n	80016c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80014fe:	f7ff fc19 	bl	8000d34 <SELECT>

		switch (ctrl)
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b0d      	cmp	r3, #13
 8001506:	f200 80cb 	bhi.w	80016a0 <SD_disk_ioctl+0x228>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <SD_disk_ioctl+0x98>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800160b 	.word	0x0800160b
 8001514:	08001549 	.word	0x08001549
 8001518:	080015fb 	.word	0x080015fb
 800151c:	080016a1 	.word	0x080016a1
 8001520:	080016a1 	.word	0x080016a1
 8001524:	080016a1 	.word	0x080016a1
 8001528:	080016a1 	.word	0x080016a1
 800152c:	080016a1 	.word	0x080016a1
 8001530:	080016a1 	.word	0x080016a1
 8001534:	080016a1 	.word	0x080016a1
 8001538:	080016a1 	.word	0x080016a1
 800153c:	0800161d 	.word	0x0800161d
 8001540:	08001641 	.word	0x08001641
 8001544:	08001665 	.word	0x08001665
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001548:	2100      	movs	r1, #0
 800154a:	2049      	movs	r0, #73	; 0x49
 800154c:	f7ff fd55 	bl	8000ffa <SD_SendCmd>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80a8 	bne.w	80016a8 <SD_disk_ioctl+0x230>
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2110      	movs	r1, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fcda 	bl	8000f18 <SD_RxDataBlock>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 809e 	beq.w	80016a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10e      	bne.n	8001594 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001576:	7d7b      	ldrb	r3, [r7, #21]
 8001578:	b29a      	uxth	r2, r3
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	b29b      	uxth	r3, r3
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b29b      	uxth	r3, r3
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800158a:	8bfb      	ldrh	r3, [r7, #30]
 800158c:	029a      	lsls	r2, r3, #10
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e02e      	b.n	80015f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001594:	7c7b      	ldrb	r3, [r7, #17]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b2da      	uxtb	r2, r3
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	09db      	lsrs	r3, r3, #7
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	7d7b      	ldrb	r3, [r7, #21]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0306 	and.w	r3, r3, #6
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3302      	adds	r3, #2
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015bc:	7d3b      	ldrb	r3, [r7, #20]
 80015be:	099b      	lsrs	r3, r3, #6
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	7cfb      	ldrb	r3, [r7, #19]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	7cbb      	ldrb	r3, [r7, #18]
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015e4:	8bfa      	ldrh	r2, [r7, #30]
 80015e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ea:	3b09      	subs	r3, #9
 80015ec:	409a      	lsls	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015f8:	e056      	b.n	80016a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001608:	e055      	b.n	80016b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800160a:	f7ff fc11 	bl	8000e30 <SD_ReadyWait>
 800160e:	4603      	mov	r3, r0
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d14b      	bne.n	80016ac <SD_disk_ioctl+0x234>
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161a:	e047      	b.n	80016ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800161c:	2100      	movs	r1, #0
 800161e:	2049      	movs	r0, #73	; 0x49
 8001620:	f7ff fceb 	bl	8000ffa <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d142      	bne.n	80016b0 <SD_disk_ioctl+0x238>
 800162a:	2110      	movs	r1, #16
 800162c:	6a38      	ldr	r0, [r7, #32]
 800162e:	f7ff fc73 	bl	8000f18 <SD_RxDataBlock>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d03b      	beq.n	80016b0 <SD_disk_ioctl+0x238>
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163e:	e037      	b.n	80016b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001640:	2100      	movs	r1, #0
 8001642:	204a      	movs	r0, #74	; 0x4a
 8001644:	f7ff fcd9 	bl	8000ffa <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d132      	bne.n	80016b4 <SD_disk_ioctl+0x23c>
 800164e:	2110      	movs	r1, #16
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f7ff fc61 	bl	8000f18 <SD_RxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02b      	beq.n	80016b4 <SD_disk_ioctl+0x23c>
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e027      	b.n	80016b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001664:	2100      	movs	r1, #0
 8001666:	207a      	movs	r0, #122	; 0x7a
 8001668:	f7ff fcc7 	bl	8000ffa <SD_SendCmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001678:	e00b      	b.n	8001692 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800167a:	6a3c      	ldr	r4, [r7, #32]
 800167c:	1c63      	adds	r3, r4, #1
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	f7ff fbac 	bl	8000ddc <SPI_RxByte>
 8001684:	4603      	mov	r3, r0
 8001686:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800168c:	3301      	adds	r3, #1
 800168e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001696:	2b03      	cmp	r3, #3
 8001698:	d9ef      	bls.n	800167a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80016a0:	2304      	movs	r3, #4
 80016a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a6:	e006      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016a8:	bf00      	nop
 80016aa:	e004      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016ac:	bf00      	nop
 80016ae:	e002      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016b4:	bf00      	nop
		}

		DESELECT();
 80016b6:	f7ff fb4d 	bl	8000d54 <DESELECT>
		SPI_RxByte();
 80016ba:	f7ff fb8f 	bl	8000ddc <SPI_RxByte>
	}

	return res;
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	372c      	adds	r7, #44	; 0x2c
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fe6a 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f814 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f000 f932 	bl	8001944 <MX_GPIO_Init>
  MX_CRC_Init();
 80016e0:	f000 f87a 	bl	80017d8 <MX_CRC_Init>
  MX_SPI1_Init();
 80016e4:	f000 f88c 	bl	8001800 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016e8:	f000 f8c0 	bl	800186c <MX_SPI2_Init>
  MX_SPI3_Init();
 80016ec:	f000 f8f4 	bl	80018d8 <MX_SPI3_Init>
  MX_FATFS_Init();
 80016f0:	f002 fc46 	bl	8003f80 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80016f4:	f000 fc2d 	bl	8001f52 <MFRC522_Init>
  GUI_Init();
 80016f8:	f00c f8ba 	bl	800d870 <GUI_Init>
  RFID_Reader();
 80016fc:	f7ff fa98 	bl	8000c30 <RFID_Reader>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x30>
	...

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2230      	movs	r2, #48	; 0x30
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f010 fe1e 	bl	8012354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <SystemClock_Config+0xcc>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <SystemClock_Config+0xcc>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <SystemClock_Config+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <SystemClock_Config+0xd0>)
 800174e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001778:	23a8      	movs	r3, #168	; 0xa8
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001780:	2304      	movs	r3, #4
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	4618      	mov	r0, r3
 800178a:	f001 f929 	bl	80029e0 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001794:	f000 f982 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2105      	movs	r1, #5
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fb80 	bl	8002ebc <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017c2:	f000 f96b 	bl	8001a9c <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	; 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_CRC_Init+0x20>)
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <MX_CRC_Init+0x24>)
 80017e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_CRC_Init+0x20>)
 80017e4:	f000 ff2a 	bl	800263c <HAL_CRC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ee:	f000 f955 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200052a4 	.word	0x200052a4
 80017fc:	40023000 	.word	0x40023000

08001800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_SPI1_Init+0x64>)
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <MX_SPI1_Init+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SPI1_Init+0x64>)
 800180c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_SPI1_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_SPI1_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_SPI1_Init+0x64>)
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_SPI1_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_SPI1_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_SPI1_Init+0x64>)
 800184c:	220a      	movs	r2, #10
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_SPI1_Init+0x64>)
 8001852:	f001 fd71 	bl	8003338 <HAL_SPI_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800185c:	f000 f91e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200052ac 	.word	0x200052ac
 8001868:	40013000 	.word	0x40013000

0800186c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <MX_SPI2_Init+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800187c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_SPI2_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018a0:	2210      	movs	r2, #16
 80018a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018b8:	220a      	movs	r2, #10
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018be:	f001 fd3b 	bl	8003338 <HAL_SPI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018c8:	f000 f8e8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20005304 	.word	0x20005304
 80018d4:	40003800 	.word	0x40003800

080018d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI3_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <MX_SPI3_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SPI3_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SPI3_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SPI3_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI3_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SPI3_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI3_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI3_Init+0x64>)
 800190c:	2210      	movs	r2, #16
 800190e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SPI3_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI3_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SPI3_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI3_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SPI3_Init+0x64>)
 800192a:	f001 fd05 	bl	8003338 <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 f8b2 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000535c 	.word	0x2000535c
 8001940:	40003c00 	.word	0x40003c00

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <MX_GPIO_Init+0x124>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <MX_GPIO_Init+0x124>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <MX_GPIO_Init+0x124>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210e      	movs	r1, #14
 80019ea:	4820      	ldr	r0, [pc, #128]	; (8001a6c <MX_GPIO_Init+0x128>)
 80019ec:	f000 ffde 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	481e      	ldr	r0, [pc, #120]	; (8001a70 <MX_GPIO_Init+0x12c>)
 80019f8:	f000 ffd8 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f24c 0101 	movw	r1, #49153	; 0xc001
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <MX_GPIO_Init+0x130>)
 8001a04:	f000 ffd2 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001a08:	230e      	movs	r3, #14
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_GPIO_Init+0x128>)
 8001a20:	f000 fe28 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_GPIO_Init+0x12c>)
 8001a3e:	f000 fe19 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001a42:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_GPIO_Init+0x130>)
 8001a5c:	f000 fe0a 	bl	8002674 <HAL_GPIO_Init>

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020c00 	.word	0x40020c00

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8a:	f000 fcb1 	bl	80023f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi3;


uint8_t SPI1SendByte(uint8_t data) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001ab6:	f107 0208 	add.w	r2, r7, #8
 8001aba:	f107 010c 	add.w	r1, r7, #12
 8001abe:	230a      	movs	r3, #10
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <SPI1SendByte+0x2c>)
 8001ac6:	f001 fdcf 	bl	8003668 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001aca:	7a3b      	ldrb	r3, [r7, #8]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000535c 	.word	0x2000535c

08001ad8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2101      	movs	r1, #1
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <SPI1_WriteReg+0x3c>)
 8001aee:	f000 ff5d 	bl	80029ac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffd7 	bl	8001aa8 <SPI1SendByte>
	SPI1SendByte(value);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ffd3 	bl	8001aa8 <SPI1SendByte>
	cs_set();
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <SPI1_WriteReg+0x3c>)
 8001b08:	f000 ff50 	bl	80029ac <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <SPI1_ReadReg+0x3c>)
 8001b28:	f000 ff40 	bl	80029ac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffba 	bl	8001aa8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff ffb7 	bl	8001aa8 <SPI1SendByte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <SPI1_ReadReg+0x3c>)
 8001b44:	f000 ff32 	bl	80029ac <HAL_GPIO_WritePin>
	return val;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b72:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001b74:	79ba      	ldrb	r2, [r7, #6]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffac 	bl	8001ad8 <SPI1_WriteReg>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ffb5 	bl	8001b18 <SPI1_ReadReg>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]
	return val;	
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	2026      	movs	r0, #38	; 0x26
 8001bc8:	f000 f849 	bl	8001c5e <MFRC522_Request>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <MFRC522_Check+0x24>
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f935 	bl	8001e46 <MFRC522_Anticoll>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8001be0:	f000 f9f8 	bl	8001fd4 <MFRC522_Halt>
	return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460a      	mov	r2, r1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffc1 	bl	8001b88 <MFRC522_ReadRegister>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff9f 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ffa7 	bl	8001b88 <MFRC522_ReadRegister>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4013      	ands	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff81 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	4603      	mov	r3, r0
 8001c66:	6039      	str	r1, [r7, #0]
 8001c68:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	200d      	movs	r0, #13
 8001c6e:	f7ff ff73 	bl	8001b58 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	79fa      	ldrb	r2, [r7, #7]
 8001c76:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	200c      	movs	r0, #12
 8001c86:	f000 f80f 	bl	8001ca8 <MFRC522_ToCard>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <MFRC522_Request+0x3c>
 8001c94:	89bb      	ldrh	r3, [r7, #12]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d001      	beq.n	8001c9e <MFRC522_Request+0x40>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d006      	beq.n	8001cda <MFRC522_ToCard+0x32>
 8001ccc:	2b0e      	cmp	r3, #14
 8001cce:	d109      	bne.n	8001ce4 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	757b      	strb	r3, [r7, #21]
			break;
 8001cd8:	e005      	b.n	8001ce6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001cda:	2377      	movs	r3, #119	; 0x77
 8001cdc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001cde:	2330      	movs	r3, #48	; 0x30
 8001ce0:	757b      	strb	r3, [r7, #21]
			break;
 8001ce2:	e000      	b.n	8001ce6 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001ce4:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff ff31 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f7ff ff92 	bl	8001c22 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	200a      	movs	r0, #10
 8001d02:	f7ff ff74 	bl	8001bee <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001d06:	2100      	movs	r1, #0
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff ff25 	bl	8001b58 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	827b      	strh	r3, [r7, #18]
 8001d12:	e00a      	b.n	8001d2a <MFRC522_ToCard+0x82>
 8001d14:	8a7b      	ldrh	r3, [r7, #18]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2009      	movs	r0, #9
 8001d20:	f7ff ff1a 	bl	8001b58 <MFRC522_WriteRegister>
 8001d24:	8a7b      	ldrh	r3, [r7, #18]
 8001d26:	3301      	adds	r3, #1
 8001d28:	827b      	strh	r3, [r7, #18]
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8a7a      	ldrh	r2, [r7, #18]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3ef      	bcc.n	8001d14 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	4619      	mov	r1, r3
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff ff0d 	bl	8001b58 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d103      	bne.n	8001d4c <MFRC522_ToCard+0xa4>
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	200d      	movs	r0, #13
 8001d48:	f7ff ff51 	bl	8001bee <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001d4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d50:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001d52:	2004      	movs	r0, #4
 8001d54:	f7ff ff18 	bl	8001b88 <MFRC522_ReadRegister>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	753b      	strb	r3, [r7, #20]
		i--;
 8001d5c:	8a7b      	ldrh	r3, [r7, #18]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <MFRC522_ToCard+0xd6>
 8001d68:	7d3b      	ldrb	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <MFRC522_ToCard+0xd6>
 8001d72:	7d3a      	ldrb	r2, [r7, #20]
 8001d74:	7d7b      	ldrb	r3, [r7, #21]
 8001d76:	4013      	ands	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0e9      	beq.n	8001d52 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	200d      	movs	r0, #13
 8001d82:	f7ff ff4e 	bl	8001c22 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001d86:	8a7b      	ldrh	r3, [r7, #18]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d057      	beq.n	8001e3c <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001d8c:	2006      	movs	r0, #6
 8001d8e:	f7ff fefb 	bl	8001b88 <MFRC522_ReadRegister>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f003 031b 	and.w	r3, r3, #27
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d14d      	bne.n	8001e38 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001da0:	7d3a      	ldrb	r2, [r7, #20]
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	4013      	ands	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MFRC522_ToCard+0x10c>
 8001db0:	2301      	movs	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d140      	bne.n	8001e3c <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001dba:	200a      	movs	r0, #10
 8001dbc:	f7ff fee4 	bl	8001b88 <MFRC522_ReadRegister>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f7ff fedf 	bl	8001b88 <MFRC522_ReadRegister>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001dd2:	7c7b      	ldrb	r3, [r7, #17]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <MFRC522_ToCard+0x148>
 8001dd8:	7d3b      	ldrb	r3, [r7, #20]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	7c7b      	ldrb	r3, [r7, #17]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	e005      	b.n	8001dfc <MFRC522_ToCard+0x154>
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001dfc:	7d3b      	ldrb	r3, [r7, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <MFRC522_ToCard+0x15e>
 8001e02:	2301      	movs	r3, #1
 8001e04:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001e06:	7d3b      	ldrb	r3, [r7, #20]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d901      	bls.n	8001e10 <MFRC522_ToCard+0x168>
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001e10:	2300      	movs	r3, #0
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	e00a      	b.n	8001e2c <MFRC522_ToCard+0x184>
 8001e16:	8a7b      	ldrh	r3, [r7, #18]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	18d4      	adds	r4, r2, r3
 8001e1c:	2009      	movs	r0, #9
 8001e1e:	f7ff feb3 	bl	8001b88 <MFRC522_ReadRegister>
 8001e22:	4603      	mov	r3, r0
 8001e24:	7023      	strb	r3, [r4, #0]
 8001e26:	8a7b      	ldrh	r3, [r7, #18]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	827b      	strh	r3, [r7, #18]
 8001e2c:	7d3b      	ldrb	r3, [r7, #20]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	8a7a      	ldrh	r2, [r7, #18]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3ef      	bcc.n	8001e16 <MFRC522_ToCard+0x16e>
 8001e36:	e001      	b.n	8001e3c <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af02      	add	r7, sp, #8
 8001e4c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	200d      	movs	r0, #13
 8001e56:	f7ff fe7f 	bl	8001b58 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2293      	movs	r2, #147	; 0x93
 8001e5e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	2220      	movs	r2, #32
 8001e66:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e68:	f107 030a 	add.w	r3, r7, #10
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	200c      	movs	r0, #12
 8001e76:	f7ff ff17 	bl	8001ca8 <MFRC522_ToCard>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d118      	bne.n	8001eb6 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001e84:	2300      	movs	r3, #0
 8001e86:	73bb      	strb	r3, [r7, #14]
 8001e88:	e009      	b.n	8001e9e <MFRC522_Anticoll+0x58>
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	7b7b      	ldrb	r3, [r7, #13]
 8001e94:	4053      	eors	r3, r2
 8001e96:	737b      	strb	r3, [r7, #13]
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	73bb      	strb	r3, [r7, #14]
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d9f2      	bls.n	8001e8a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	7b7a      	ldrb	r2, [r7, #13]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <MFRC522_Anticoll+0x70>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001ece:	2104      	movs	r1, #4
 8001ed0:	2005      	movs	r0, #5
 8001ed2:	f7ff fea6 	bl	8001c22 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f7ff fe88 	bl	8001bee <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
 8001ee2:	e00a      	b.n	8001efa <MFRC522_CalculateCRC+0x3a>
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	2009      	movs	r0, #9
 8001ef0:	f7ff fe32 	bl	8001b58 <MFRC522_WriteRegister>
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
 8001efa:	7dfa      	ldrb	r2, [r7, #23]
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3f0      	bcc.n	8001ee4 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001f02:	2103      	movs	r1, #3
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fe27 	bl	8001b58 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f7ff fe3a 	bl	8001b88 <MFRC522_ReadRegister>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75bb      	strb	r3, [r7, #22]
		i--;
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <MFRC522_CalculateCRC+0x6e>
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001f2e:	2022      	movs	r0, #34	; 0x22
 8001f30:	f7ff fe2a 	bl	8001b88 <MFRC522_ReadRegister>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1c5c      	adds	r4, r3, #1
 8001f40:	2021      	movs	r0, #33	; 0x21
 8001f42:	f7ff fe21 	bl	8001b88 <MFRC522_ReadRegister>
 8001f46:	4603      	mov	r3, r0
 8001f48:	7023      	strb	r3, [r4, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}

08001f52 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001f56:	f000 f820 	bl	8001f9a <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001f5a:	218d      	movs	r1, #141	; 0x8d
 8001f5c:	202a      	movs	r0, #42	; 0x2a
 8001f5e:	f7ff fdfb 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001f62:	213e      	movs	r1, #62	; 0x3e
 8001f64:	202b      	movs	r0, #43	; 0x2b
 8001f66:	f7ff fdf7 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001f6a:	211e      	movs	r1, #30
 8001f6c:	202d      	movs	r0, #45	; 0x2d
 8001f6e:	f7ff fdf3 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001f72:	2100      	movs	r1, #0
 8001f74:	202c      	movs	r0, #44	; 0x2c
 8001f76:	f7ff fdef 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001f7a:	2170      	movs	r1, #112	; 0x70
 8001f7c:	2026      	movs	r0, #38	; 0x26
 8001f7e:	f7ff fdeb 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	2015      	movs	r0, #21
 8001f86:	f7ff fde7 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001f8a:	213d      	movs	r1, #61	; 0x3d
 8001f8c:	2011      	movs	r0, #17
 8001f8e:	f7ff fde3 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8001f92:	f000 f80a 	bl	8001faa <MFRC522_AntennaOn>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fdd9 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001fb0:	2014      	movs	r0, #20
 8001fb2:	f7ff fde9 	bl	8001b88 <MFRC522_ReadRegister>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <MFRC522_AntennaOn+0x22>
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	2014      	movs	r0, #20
 8001fc8:	f7ff fe11 	bl	8001bee <MFRC522_SetBitMask>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001fda:	2350      	movs	r3, #80	; 0x50
 8001fdc:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff68 	bl	8001ec0 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	4639      	mov	r1, r7
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	200c      	movs	r0, #12
 8001ffe:	f7ff fe53 	bl	8001ca8 <MFRC522_ToCard>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_CRC_MspInit+0x3c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10d      	bne.n	800208a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023000 	.word	0x40023000
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_SPI_MspInit+0x150>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12c      	bne.n	800211c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23e0      	movs	r3, #224	; 0xe0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210a:	2305      	movs	r3, #5
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	4838      	ldr	r0, [pc, #224]	; (80021f8 <HAL_SPI_MspInit+0x158>)
 8002116:	f000 faad 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800211a:	e064      	b.n	80021e6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_SPI_MspInit+0x15c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12d      	bne.n	8002182 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800215e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002170:	2305      	movs	r3, #5
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	4821      	ldr	r0, [pc, #132]	; (8002200 <HAL_SPI_MspInit+0x160>)
 800217c:	f000 fa7a 	bl	8002674 <HAL_GPIO_Init>
}
 8002180:	e031      	b.n	80021e6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_SPI_MspInit+0x164>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d12c      	bne.n	80021e6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d6:	2306      	movs	r3, #6
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_SPI_MspInit+0x168>)
 80021e2:	f000 fa47 	bl	8002674 <HAL_GPIO_Init>
}
 80021e6:	bf00      	nop
 80021e8:	3738      	adds	r7, #56	; 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40013000 	.word	0x40013000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40003800 	.word	0x40003800
 8002200:	40020400 	.word	0x40020400
 8002204:	40003c00 	.word	0x40003c00
 8002208:	40020800 	.word	0x40020800

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	2019      	movs	r0, #25
 8002222:	f000 f9e1 	bl	80025e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002226:	2019      	movs	r0, #25
 8002228:	f000 f9fa 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_InitTick+0xa4>)
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_InitTick+0xa4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6453      	str	r3, [r2, #68]	; 0x44
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_InitTick+0xa4>)
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002248:	f107 0210 	add.w	r2, r7, #16
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f83e 	bl	80032d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002258:	f001 f828 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 800225c:	4603      	mov	r3, r0
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_InitTick+0xa8>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	3b01      	subs	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_InitTick+0xac>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_InitTick+0xb0>)
 8002274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_InitTick+0xac>)
 8002278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800227c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_InitTick+0xac>)
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_InitTick+0xac>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_InitTick+0xac>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002290:	4809      	ldr	r0, [pc, #36]	; (80022b8 <HAL_InitTick+0xac>)
 8002292:	f001 fc37 	bl	8003b04 <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <HAL_InitTick+0xac>)
 800229e:	f001 fc66 	bl	8003b6e <HAL_TIM_Base_Start_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	200053b4 	.word	0x200053b4
 80022bc:	40010000 	.word	0x40010000

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800231e:	f001 fc4a 	bl	8003bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200053b4 	.word	0x200053b4

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <SystemInit+0x28>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <SystemInit+0x28>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SystemInit+0x28>)
 8002342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002346:	609a      	str	r2, [r3, #8]
#endif
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002390 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800235c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800235e:	e003      	b.n	8002368 <LoopCopyDataInit>

08002360 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002362:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002364:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002366:	3104      	adds	r1, #4

08002368 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800236c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800236e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002370:	d3f6      	bcc.n	8002360 <CopyDataInit>
  ldr  r2, =_sbss
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002374:	e002      	b.n	800237c <LoopFillZerobss>

08002376 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002376:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002378:	f842 3b04 	str.w	r3, [r2], #4

0800237c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800237e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002380:	d3f9      	bcc.n	8002376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002382:	f7ff ffd3 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002386:	f00f ff99 	bl	80122bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238a:	f7ff f9a1 	bl	80016d0 <main>
  bx  lr    
 800238e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002390:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002394:	08015cd8 	.word	0x08015cd8
  ldr  r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800239c:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 80023a0:	2000018c 	.word	0x2000018c
  ldr  r3, = _ebss
 80023a4:	200057d8 	.word	0x200057d8

080023a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f8fc 	bl	80025d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7ff ff16 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff fe14 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2000000c 	.word	0x2000000c
 8002414:	200053f4 	.word	0x200053f4

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200053f4 	.word	0x200053f4

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000000c 	.word	0x2000000c

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff4c 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fa:	f7ff ff61 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 80025fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f7ff ffb1 	bl	800256c <NVIC_EncodePriority>
 800260a:	4602      	mov	r2, r0
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff80 	bl	8002518 <__NVIC_SetPriority>
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff54 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00e      	b.n	800266c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	795b      	ldrb	r3, [r3, #5]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fcfc 	bl	800205c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e16b      	b.n	8002968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 815a 	bne.w	8002962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00b      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d130      	bne.n	8002730 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0xfc>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b12      	cmp	r3, #18
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b4 	beq.w	8002962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b60      	ldr	r3, [pc, #384]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_GPIO_Init+0x30c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_GPIO_Init+0x310>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_GPIO_Init+0x314>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_GPIO_Init+0x318>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_GPIO_Init+0x31c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4f      	ldr	r2, [pc, #316]	; (8002994 <HAL_GPIO_Init+0x320>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4e      	ldr	r2, [pc, #312]	; (8002998 <HAL_GPIO_Init+0x324>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x216>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4d      	ldr	r2, [pc, #308]	; (800299c <HAL_GPIO_Init+0x328>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4c      	ldr	r2, [pc, #304]	; (80029a0 <HAL_GPIO_Init+0x32c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4b      	ldr	r2, [pc, #300]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x20a>
 800287a:	2307      	movs	r3, #7
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x228>
 800287e:	2308      	movs	r3, #8
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x228>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	; (8002984 <HAL_GPIO_Init+0x310>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_GPIO_Init+0x334>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_GPIO_Init+0x334>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae90 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e25e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d075      	beq.n	8002aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fe:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b85      	ldr	r3, [pc, #532]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4b82      	ldr	r3, [pc, #520]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4b7e      	ldr	r3, [pc, #504]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d05b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x108>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d157      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e239      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x74>
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e01d      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x98>
 8002a5e:	4b70      	ldr	r3, [pc, #448]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6f      	ldr	r2, [pc, #444]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0xb0>
 8002a78:	4b69      	ldr	r3, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fcbe 	bl	8002418 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff fcba 	bl	8002418 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1fe      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xc0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fcaa 	bl	8002418 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7ff fca6 	bl	8002418 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1ea      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xe8>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e1be      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4937      	ldr	r1, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e03a      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x244>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7ff fc5f 	bl	8002418 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7ff fc5b 	bl	8002418 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e19f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4925      	ldr	r1, [pc, #148]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x244>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff fc3e 	bl	8002418 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7ff fc3a 	bl	8002418 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e17e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d036      	beq.n	8002c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x248>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7ff fc1e 	bl	8002418 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7ff fc1a 	bl	8002418 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e15e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x200>
 8002bfe:	e01b      	b.n	8002c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x248>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff fc07 	bl	8002418 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	e00e      	b.n	8002c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fc03 	bl	8002418 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d907      	bls.n	8002c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e147      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ea      	bne.n	8002c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8097 	beq.w	8002d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	4b7d      	ldr	r3, [pc, #500]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b7a      	ldr	r3, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b74      	ldr	r3, [pc, #464]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a73      	ldr	r2, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7ff fbc3 	bl	8002418 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7ff fbbf 	bl	8002418 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e103      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x474>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x2ea>
 8002cbc:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x324>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x30c>
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x324>
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7ff fb84 	bl	8002418 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7ff fb80 	bl	8002418 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0c2      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ee      	beq.n	8002d14 <HAL_RCC_OscConfig+0x334>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7ff fb6e 	bl	8002418 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7ff fb6a 	bl	8002418 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0ac      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ee      	bne.n	8002d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8098 	beq.w	8002eae <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d05c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d141      	bne.n	8002e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fb3e 	bl	8002418 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7ff fb3a 	bl	8002418 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e07e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7ff fb13 	bl	8002418 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df6:	f7ff fb0f 	bl	8002418 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e053      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x416>
 8002e14:	e04b      	b.n	8002eae <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_OscConfig+0x478>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff fafc 	bl	8002418 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7ff faf8 	bl	8002418 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e03c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_OscConfig+0x470>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x444>
 8002e42:	e034      	b.n	8002eae <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e02f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d11c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d115      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0cc      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d90c      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d044      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d119      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e067      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4934      	ldr	r1, [pc, #208]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7ff fa34 	bl	8002418 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7ff fa30 	bl	8002418 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d20c      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f8d2 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00
 8003078:	40023800 	.word	0x40023800
 800307c:	08013a80 	.word	0x08013a80
 8003080:	20000004 	.word	0x20000004
 8003084:	20000008 	.word	0x20000008

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b094      	sub	sp, #80	; 0x50
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x40>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	f200 80e1 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ba:	e0db      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030c0:	e0db      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c6:	e0d8      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	2200      	movs	r2, #0
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	6139      	str	r1, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4651      	mov	r1, sl
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	4651      	mov	r1, sl
 800313c:	ebb2 0801 	subs.w	r8, r2, r1
 8003140:	4659      	mov	r1, fp
 8003142:	eb63 0901 	sbc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	462b      	mov	r3, r5
 8003168:	eb49 0303 	adc.w	r3, r9, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317a:	4629      	mov	r1, r5
 800317c:	024b      	lsls	r3, r1, #9
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003184:	4621      	mov	r1, r4
 8003186:	024a      	lsls	r2, r1, #9
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318e:	2200      	movs	r2, #0
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
 8003192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003198:	f7fd f872 	bl	8000280 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	e058      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	4611      	mov	r1, r2
 80031b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d2:	0150      	lsls	r0, r2, #5
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4641      	mov	r1, r8
 80031da:	ebb2 0a01 	subs.w	sl, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f8:	ebb2 040a 	subs.w	r4, r2, sl
 80031fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	464b      	mov	r3, r9
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	f7fd f818 	bl	8000280 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800327c:	4618      	mov	r0, r3
 800327e:	3750      	adds	r7, #80	; 0x50
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08013a90 	.word	0x08013a90

080032d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	220f      	movs	r2, #15
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0203 	and.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetClockConfig+0x60>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e056      	b.n	80033f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fe fe9b 	bl	80020a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	ea42 0103 	orr.w	r1, r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	f003 0104 	and.w	r1, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Transmit+0x22>
 800341e:	2302      	movs	r3, #2
 8003420:	e11e      	b.n	8003660 <HAL_SPI_Transmit+0x260>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800342a:	f7fe fff5 	bl	8002418 <HAL_GetTick>
 800342e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d002      	beq.n	8003446 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003440:	2302      	movs	r3, #2
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e103      	b.n	800364e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x52>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003456:	e0fa      	b.n	800364e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d107      	bne.n	80034b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d007      	beq.n	80034ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d6:	d14b      	bne.n	8003570 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0xe6>
 80034e0:	8afb      	ldrh	r3, [r7, #22]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d13e      	bne.n	8003564 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800350a:	e02b      	b.n	8003564 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d112      	bne.n	8003540 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	1c9a      	adds	r2, r3, #2
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	86da      	strh	r2, [r3, #54]	; 0x36
 800353e:	e011      	b.n	8003564 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003540:	f7fe ff6a 	bl	8002418 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d803      	bhi.n	8003558 <HAL_SPI_Transmit+0x158>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d102      	bne.n	800355e <HAL_SPI_Transmit+0x15e>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003562:	e074      	b.n	800364e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ce      	bne.n	800350c <HAL_SPI_Transmit+0x10c>
 800356e:	e04c      	b.n	800360a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_Transmit+0x17e>
 8003578:	8afb      	ldrh	r3, [r7, #22]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d140      	bne.n	8003600 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035a4:	e02c      	b.n	8003600 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d113      	bne.n	80035dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	7812      	ldrb	r2, [r2, #0]
 80035c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80035da:	e011      	b.n	8003600 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035dc:	f7fe ff1c 	bl	8002418 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d803      	bhi.n	80035f4 <HAL_SPI_Transmit+0x1f4>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d102      	bne.n	80035fa <HAL_SPI_Transmit+0x1fa>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035fe:	e026      	b.n	800364e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1cd      	bne.n	80035a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa36 	bl	8003a80 <SPI_EndRxTxTransaction>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e000      	b.n	800364e <HAL_SPI_Transmit+0x24e>
  }

error:
 800364c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800365e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_SPI_TransmitReceive+0x26>
 800368a:	2302      	movs	r3, #2
 800368c:	e18a      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x33c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003696:	f7fe febf 	bl	8002418 <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d00f      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d107      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x68>
 80036c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036d6:	e15b      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x82>
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036f0:	e14e      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2205      	movs	r2, #5
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d007      	beq.n	800375a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d178      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x10a>
 800376c:	8b7b      	ldrh	r3, [r7, #26]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d166      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003796:	e053      	b.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d11b      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_SPI_TransmitReceive+0x176>
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d113      	bne.n	80037de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d119      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d014      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	b292      	uxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003820:	f7fe fdfa 	bl	8002418 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382c:	429a      	cmp	r2, r3
 800382e:	d807      	bhi.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800383e:	e0a7      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1a6      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1a1      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x130>
 8003854:	e07c      	b.n	8003950 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1fc>
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16b      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388a:	e057      	b.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11c      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d114      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d119      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d014      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003912:	2301      	movs	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003916:	f7fe fd7f 	bl	8002418 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_TransmitReceive+0x2c6>
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x2cc>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800393a:	e029      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1a2      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d19d      	bne.n	800388c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f893 	bl	8003a80 <SPI_EndRxTxTransaction>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800396c:	e010      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e000      	b.n	8003990 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800398e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039bc:	e04c      	b.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d048      	beq.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80039c6:	f7fe fd27 	bl	8002418 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d902      	bls.n	80039dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d13d      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f4:	d111      	bne.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fe:	d004      	beq.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d107      	bne.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	d10f      	bne.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e00f      	b.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4013      	ands	r3, r2
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d1a3      	bne.n	80039be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <SPI_EndRxTxTransaction+0x7c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <SPI_EndRxTxTransaction+0x80>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0d5b      	lsrs	r3, r3, #21
 8003a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d112      	bne.n	8003ad2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ff78 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e00f      	b.n	8003af2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d0f2      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x52>
 8003aec:	e000      	b.n	8003af0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003aee:	bf00      	nop
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000004 	.word	0x20000004
 8003b00:	165e9f81 	.word	0x165e9f81

08003b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e01d      	b.n	8003b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f815 	bl	8003b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 f968 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d007      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d122      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d11b      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0202 	mvn.w	r2, #2
 8003be2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8ee 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003bfe:	e005      	b.n	8003c0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8e0 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8f1 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d122      	bne.n	8003c66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d11b      	bne.n	8003c66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f06f 0204 	mvn.w	r2, #4
 8003c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8c4 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003c52:	e005      	b.n	8003c60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8b6 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8c7 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d122      	bne.n	8003cba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11b      	bne.n	8003cba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0208 	mvn.w	r2, #8
 8003c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f89a 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003ca6:	e005      	b.n	8003cb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f88c 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f89d 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d122      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d11b      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0210 	mvn.w	r2, #16
 8003cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f870 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003cfa:	e005      	b.n	8003d08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f862 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f873 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d10e      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0201 	mvn.w	r2, #1
 8003d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd fe9f 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f903 	bl	8003f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f838 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0220 	mvn.w	r2, #32
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8cd 	bl	8003f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <MX_FATFS_Init+0x18>)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_FATFS_Init+0x1c>)
 8003f88:	f003 f9c4 	bl	8007314 <FATFS_LinkDriver>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <MX_FATFS_Init+0x20>)
 8003f92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200053fc 	.word	0x200053fc
 8003f9c:	20000010 	.word	0x20000010
 8003fa0:	200053f8 	.word	0x200053f8

08003fa4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003fa8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f86f 	bl	80010a4 <SD_disk_initialize>
 8003fc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd f947 	bl	8001270 <SD_disk_status>
 8003fe2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003ffc:	7bf8      	ldrb	r0, [r7, #15]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	f7fd f94a 	bl	800129c <SD_disk_read>
 8004008:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004022:	7bf8      	ldrb	r0, [r7, #15]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	f7fd f9a1 	bl	8001370 <SD_disk_write>
 800402e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	603a      	str	r2, [r7, #0]
 8004042:	71fb      	strb	r3, [r7, #7]
 8004044:	460b      	mov	r3, r1
 8004046:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004048:	79b9      	ldrb	r1, [r7, #6]
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fa12 	bl	8001478 <SD_disk_ioctl>
 8004054:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <disk_status+0x30>)
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	79fa      	ldrb	r2, [r7, #7]
 8004078:	4905      	ldr	r1, [pc, #20]	; (8004090 <disk_status+0x30>)
 800407a:	440a      	add	r2, r1
 800407c:	7a12      	ldrb	r2, [r2, #8]
 800407e:	4610      	mov	r0, r2
 8004080:	4798      	blx	r3
 8004082:	4603      	mov	r3, r0
 8004084:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20005428 	.word	0x20005428

08004094 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <disk_initialize+0x48>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d111      	bne.n	80040d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <disk_initialize+0x48>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <disk_initialize+0x48>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	79fa      	ldrb	r2, [r7, #7]
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <disk_initialize+0x48>)
 80040c4:	440a      	add	r2, r1
 80040c6:	7a12      	ldrb	r2, [r2, #8]
 80040c8:	4610      	mov	r0, r2
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20005428 	.word	0x20005428

080040e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <disk_read+0x3c>)
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	689c      	ldr	r4, [r3, #8]
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <disk_read+0x3c>)
 8004100:	4413      	add	r3, r2
 8004102:	7a18      	ldrb	r0, [r3, #8]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	47a0      	blx	r4
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}
 800411a:	bf00      	nop
 800411c:	20005428 	.word	0x20005428

08004120 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <disk_write+0x3c>)
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68dc      	ldr	r4, [r3, #12]
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <disk_write+0x3c>)
 8004140:	4413      	add	r3, r2
 8004142:	7a18      	ldrb	r0, [r3, #8]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	47a0      	blx	r4
 800414c:	4603      	mov	r3, r0
 800414e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	20005428 	.word	0x20005428

08004160 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	603a      	str	r2, [r7, #0]
 800416a:	71fb      	strb	r3, [r7, #7]
 800416c:	460b      	mov	r3, r1
 800416e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <disk_ioctl+0x38>)
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	79fa      	ldrb	r2, [r7, #7]
 800417e:	4906      	ldr	r1, [pc, #24]	; (8004198 <disk_ioctl+0x38>)
 8004180:	440a      	add	r2, r1
 8004182:	7a10      	ldrb	r0, [r2, #8]
 8004184:	79b9      	ldrb	r1, [r7, #6]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4798      	blx	r3
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
  return res;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20005428 	.word	0x20005428

0800419c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3301      	adds	r3, #1
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80041be:	89fb      	ldrh	r3, [r7, #14]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3303      	adds	r3, #3
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	3202      	adds	r2, #2
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	3201      	adds	r2, #1
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
	return rv;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	1c53      	adds	r3, r2, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1c59      	adds	r1, r3, #1
 80042c4:	6179      	str	r1, [r7, #20]
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f1      	bne.n	80042ba <mem_cpy+0x1a>
	}
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	617a      	str	r2, [r7, #20]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3b01      	subs	r3, #1
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f3      	bne.n	80042f2 <mem_set+0x10>
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	61fa      	str	r2, [r7, #28]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	4619      	mov	r1, r3
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	61ba      	str	r2, [r7, #24]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	1acb      	subs	r3, r1, r3
 8004344:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3b01      	subs	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <mem_cmp+0x40>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0eb      	beq.n	8004330 <mem_cmp+0x18>

	return r;
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004370:	e002      	b.n	8004378 <chk_chr+0x12>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3301      	adds	r3, #1
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <chk_chr+0x26>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4293      	cmp	r3, r2
 800438a:	d1f2      	bne.n	8004372 <chk_chr+0xc>
	return *str;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	781b      	ldrb	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e029      	b.n	8004404 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80043b0:	4a27      	ldr	r2, [pc, #156]	; (8004450 <chk_lock+0xb4>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01d      	beq.n	80043fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043be:	4a24      	ldr	r2, [pc, #144]	; (8004450 <chk_lock+0xb4>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d116      	bne.n	80043fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80043d0:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <chk_lock+0xb4>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d10c      	bne.n	80043fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <chk_lock+0xb4>)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4413      	add	r3, r2
 80043ec:	3308      	adds	r3, #8
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d102      	bne.n	80043fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043f8:	e007      	b.n	800440a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d9d2      	bls.n	80043b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d109      	bne.n	8004424 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <chk_lock+0x80>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d101      	bne.n	8004420 <chk_lock+0x84>
 800441c:	2300      	movs	r3, #0
 800441e:	e010      	b.n	8004442 <chk_lock+0xa6>
 8004420:	2312      	movs	r3, #18
 8004422:	e00e      	b.n	8004442 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <chk_lock+0xa0>
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <chk_lock+0xb4>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4413      	add	r3, r2
 8004432:	330c      	adds	r3, #12
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d101      	bne.n	8004440 <chk_lock+0xa4>
 800443c:	2310      	movs	r3, #16
 800443e:	e000      	b.n	8004442 <chk_lock+0xa6>
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20005408 	.word	0x20005408

08004454 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e002      	b.n	8004466 <enq_lock+0x12>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d806      	bhi.n	800447a <enq_lock+0x26>
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <enq_lock+0x40>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4413      	add	r3, r2
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f2      	bne.n	8004460 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20005408 	.word	0x20005408

08004498 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e01f      	b.n	80044e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80044a8:	4a41      	ldr	r2, [pc, #260]	; (80045b0 <inc_lock+0x118>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	4413      	add	r3, r2
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d113      	bne.n	80044e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80044ba:	4a3d      	ldr	r2, [pc, #244]	; (80045b0 <inc_lock+0x118>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	4413      	add	r3, r2
 80044c2:	3304      	adds	r3, #4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d109      	bne.n	80044e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80044ce:	4a38      	ldr	r2, [pc, #224]	; (80045b0 <inc_lock+0x118>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4413      	add	r3, r2
 80044d6:	3308      	adds	r3, #8
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044de:	429a      	cmp	r2, r3
 80044e0:	d006      	beq.n	80044f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d9dc      	bls.n	80044a8 <inc_lock+0x10>
 80044ee:	e000      	b.n	80044f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80044f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d132      	bne.n	800455e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e002      	b.n	8004504 <inc_lock+0x6c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d806      	bhi.n	8004518 <inc_lock+0x80>
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <inc_lock+0x118>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f2      	bne.n	80044fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d101      	bne.n	8004522 <inc_lock+0x8a>
 800451e:	2300      	movs	r3, #0
 8004520:	e040      	b.n	80045a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4922      	ldr	r1, [pc, #136]	; (80045b0 <inc_lock+0x118>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	440b      	add	r3, r1
 800452e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	491e      	ldr	r1, [pc, #120]	; (80045b0 <inc_lock+0x118>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	440b      	add	r3, r1
 800453c:	3304      	adds	r3, #4
 800453e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	491a      	ldr	r1, [pc, #104]	; (80045b0 <inc_lock+0x118>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	440b      	add	r3, r1
 800454c:	3308      	adds	r3, #8
 800454e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <inc_lock+0x118>)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	330c      	adds	r3, #12
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <inc_lock+0xe0>
 8004564:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <inc_lock+0x118>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	4413      	add	r3, r2
 800456c:	330c      	adds	r3, #12
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <inc_lock+0xe0>
 8004574:	2300      	movs	r3, #0
 8004576:	e015      	b.n	80045a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <inc_lock+0xf8>
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <inc_lock+0x118>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	4413      	add	r3, r2
 8004586:	330c      	adds	r3, #12
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	e001      	b.n	8004594 <inc_lock+0xfc>
 8004590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004594:	4906      	ldr	r1, [pc, #24]	; (80045b0 <inc_lock+0x118>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	440b      	add	r3, r1
 800459c:	330c      	adds	r3, #12
 800459e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3301      	adds	r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20005408 	.word	0x20005408

080045b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d825      	bhi.n	8004614 <dec_lock+0x60>
		n = Files[i].ctr;
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <dec_lock+0x74>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4413      	add	r3, r2
 80045d0:	330c      	adds	r3, #12
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d101      	bne.n	80045e2 <dec_lock+0x2e>
 80045de:	2300      	movs	r3, #0
 80045e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <dec_lock+0x3a>
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045ee:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <dec_lock+0x74>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	4413      	add	r3, r2
 80045f6:	330c      	adds	r3, #12
 80045f8:	89fa      	ldrh	r2, [r7, #14]
 80045fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <dec_lock+0x5a>
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <dec_lock+0x74>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4413      	add	r3, r2
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	737b      	strb	r3, [r7, #13]
 8004612:	e001      	b.n	8004618 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004614:	2302      	movs	r3, #2
 8004616:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004618:	7b7b      	ldrb	r3, [r7, #13]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20005408 	.word	0x20005408

0800462c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e010      	b.n	800465c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800463a:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <clear_lock+0x44>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	4413      	add	r3, r2
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d105      	bne.n	8004656 <clear_lock+0x2a>
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <clear_lock+0x44>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	4413      	add	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d9eb      	bls.n	800463a <clear_lock+0xe>
	}
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20005408 	.word	0x20005408

08004674 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d034      	beq.n	80046f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	7858      	ldrb	r0, [r3, #1]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004698:	2301      	movs	r3, #1
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	f7ff fd40 	bl	8004120 <disk_write>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e022      	b.n	80046f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d217      	bcs.n	80046f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	789b      	ldrb	r3, [r3, #2]
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e010      	b.n	80046ec <sync_window+0x78>
					wsect += fs->fsize;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7858      	ldrb	r0, [r3, #1]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046de:	2301      	movs	r3, #1
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	f7ff fd1d 	bl	8004120 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d8eb      	bhi.n	80046ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d01b      	beq.n	800474c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ffad 	bl	8004674 <sync_window>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d113      	bne.n	800474c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7858      	ldrb	r0, [r3, #1]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800472e:	2301      	movs	r3, #1
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	f7ff fcd5 	bl	80040e0 <disk_read>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff87 	bl	8004674 <sync_window>
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d159      	bne.n	8004824 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d149      	bne.n	800480c <sync_fs+0xb4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d145      	bne.n	800480c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	899b      	ldrh	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	2100      	movs	r1, #0
 800478e:	f7ff fda8 	bl	80042e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3338      	adds	r3, #56	; 0x38
 8004796:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800479a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd37 	bl	8004212 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3338      	adds	r3, #56	; 0x38
 80047a8:	4921      	ldr	r1, [pc, #132]	; (8004830 <sync_fs+0xd8>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fd4c 	bl	8004248 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3338      	adds	r3, #56	; 0x38
 80047b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80047b8:	491e      	ldr	r1, [pc, #120]	; (8004834 <sync_fs+0xdc>)
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fd44 	bl	8004248 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3338      	adds	r3, #56	; 0x38
 80047c4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7ff fd3a 	bl	8004248 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3338      	adds	r3, #56	; 0x38
 80047d8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7ff fd30 	bl	8004248 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7858      	ldrb	r0, [r3, #1]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004800:	2301      	movs	r3, #1
 8004802:	f7ff fc8d 	bl	8004120 <disk_write>
			fs->fsi_flag = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2200      	movs	r2, #0
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fca3 	bl	8004160 <disk_ioctl>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <sync_fs+0xcc>
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	41615252 	.word	0x41615252
 8004834:	61417272 	.word	0x61417272

08004838 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	3b02      	subs	r3, #2
 8004846:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	3b02      	subs	r3, #2
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d301      	bcc.n	8004858 <clust2sect+0x20>
 8004854:	2300      	movs	r3, #0
 8004856:	e008      	b.n	800486a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	895b      	ldrh	r3, [r3, #10]
 800485c:	461a      	mov	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	fb03 f202 	mul.w	r2, r3, r2
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4413      	add	r3, r2
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d904      	bls.n	8004896 <get_fat+0x20>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004896:	2301      	movs	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e0bb      	b.n	8004a14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	f000 8083 	beq.w	80049b2 <get_fat+0x13c>
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	f300 80a7 	bgt.w	8004a00 <get_fat+0x18a>
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d002      	beq.n	80048bc <get_fat+0x46>
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d056      	beq.n	8004968 <get_fat+0xf2>
 80048ba:	e0a1      	b.n	8004a00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	899b      	ldrh	r3, [r3, #12]
 80048d2:	4619      	mov	r1, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048da:	4413      	add	r3, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	6938      	ldr	r0, [r7, #16]
 80048e0:	f7ff ff0c 	bl	80046fc <move_window>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 808d 	bne.w	8004a06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	60fa      	str	r2, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	8992      	ldrh	r2, [r2, #12]
 80048f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048fa:	fb01 f202 	mul.w	r2, r1, r2
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004908:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	899b      	ldrh	r3, [r3, #12]
 8004912:	4619      	mov	r1, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	fbb3 f3f1 	udiv	r3, r3, r1
 800491a:	4413      	add	r3, r2
 800491c:	4619      	mov	r1, r3
 800491e:	6938      	ldr	r0, [r7, #16]
 8004920:	f7ff feec 	bl	80046fc <move_window>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d16f      	bne.n	8004a0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	899b      	ldrh	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	fbb3 f1f2 	udiv	r1, r3, r2
 8004936:	fb01 f202 	mul.w	r2, r1, r2
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <get_fat+0xe8>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	e002      	b.n	8004964 <get_fat+0xee>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004964:	617b      	str	r3, [r7, #20]
			break;
 8004966:	e055      	b.n	8004a14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	899b      	ldrh	r3, [r3, #12]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	fbb3 f3f1 	udiv	r3, r3, r1
 800497c:	4413      	add	r3, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6938      	ldr	r0, [r7, #16]
 8004982:	f7ff febb 	bl	80046fc <move_window>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d140      	bne.n	8004a0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	8992      	ldrh	r2, [r2, #12]
 800499a:	fbb3 f0f2 	udiv	r0, r3, r2
 800499e:	fb00 f202 	mul.w	r2, r0, r2
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fbf8 	bl	800419c <ld_word>
 80049ac:	4603      	mov	r3, r0
 80049ae:	617b      	str	r3, [r7, #20]
			break;
 80049b0:	e030      	b.n	8004a14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	899b      	ldrh	r3, [r3, #12]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4619      	mov	r1, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c6:	4413      	add	r3, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f7ff fe96 	bl	80046fc <move_window>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11d      	bne.n	8004a12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	8992      	ldrh	r2, [r2, #12]
 80049e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049e8:	fb00 f202 	mul.w	r2, r0, r2
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fbeb 	bl	80041cc <ld_dword>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049fc:	617b      	str	r3, [r7, #20]
			break;
 80049fe:	e009      	b.n	8004a14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e006      	b.n	8004a14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a06:	bf00      	nop
 8004a08:	e004      	b.n	8004a14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a12:	bf00      	nop
		}
	}

	return val;
 8004a14:	697b      	ldr	r3, [r7, #20]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a1e:	b590      	push	{r4, r7, lr}
 8004a20:	b089      	sub	sp, #36	; 0x24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f240 8102 	bls.w	8004c3a <put_fat+0x21c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	f080 80fc 	bcs.w	8004c3a <put_fat+0x21c>
		switch (fs->fs_type) {
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	f000 80b6 	beq.w	8004bb8 <put_fat+0x19a>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	f300 80fd 	bgt.w	8004c4c <put_fat+0x22e>
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <put_fat+0x40>
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	f000 8083 	beq.w	8004b62 <put_fat+0x144>
 8004a5c:	e0f6      	b.n	8004c4c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	899b      	ldrh	r3, [r3, #12]
 8004a74:	4619      	mov	r1, r3
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff fe3b 	bl	80046fc <move_window>
 8004a86:	4603      	mov	r3, r0
 8004a88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 80d6 	bne.w	8004c3e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	61ba      	str	r2, [r7, #24]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	8992      	ldrh	r2, [r2, #12]
 8004aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aa6:	fb00 f202 	mul.w	r2, r0, r2
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	440b      	add	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <put_fat+0xb8>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	b25a      	sxtb	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e001      	b.n	8004ada <put_fat+0xbc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	899b      	ldrh	r3, [r3, #12]
 8004aec:	4619      	mov	r1, r3
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004af4:	4413      	add	r3, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fdff 	bl	80046fc <move_window>
 8004afe:	4603      	mov	r3, r0
 8004b00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 809c 	bne.w	8004c42 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	899b      	ldrh	r3, [r3, #12]
 8004b14:	461a      	mov	r2, r3
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b1c:	fb00 f202 	mul.w	r2, r0, r2
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	440b      	add	r3, r1
 8004b24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <put_fat+0x11a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00e      	b.n	8004b56 <put_fat+0x138>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	f023 030f 	bic.w	r3, r3, #15
 8004b42:	b25a      	sxtb	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	4313      	orrs	r3, r2
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	70da      	strb	r2, [r3, #3]
			break;
 8004b60:	e074      	b.n	8004c4c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	899b      	ldrh	r3, [r3, #12]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b76:	4413      	add	r3, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fdbe 	bl	80046fc <move_window>
 8004b80:	4603      	mov	r3, r0
 8004b82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b84:	7ffb      	ldrb	r3, [r7, #31]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d15d      	bne.n	8004c46 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	8992      	ldrh	r2, [r2, #12]
 8004b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b9c:	fb00 f202 	mul.w	r2, r0, r2
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fb31 	bl	8004212 <st_word>
			fs->wflag = 1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	70da      	strb	r2, [r3, #3]
			break;
 8004bb6:	e049      	b.n	8004c4c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	899b      	ldrh	r3, [r3, #12]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bcc:	4413      	add	r3, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fd93 	bl	80046fc <move_window>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bda:	7ffb      	ldrb	r3, [r7, #31]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d134      	bne.n	8004c4a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	8992      	ldrh	r2, [r2, #12]
 8004bf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bf8:	fb00 f202 	mul.w	r2, r0, r2
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fae3 	bl	80041cc <ld_dword>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c0c:	4323      	orrs	r3, r4
 8004c0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	8992      	ldrh	r2, [r2, #12]
 8004c1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c22:	fb00 f202 	mul.w	r2, r0, r2
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fb0b 	bl	8004248 <st_dword>
			fs->wflag = 1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	70da      	strb	r2, [r3, #3]
			break;
 8004c38:	e008      	b.n	8004c4c <put_fat+0x22e>
		}
	}
 8004c3a:	bf00      	nop
 8004c3c:	e006      	b.n	8004c4c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c3e:	bf00      	nop
 8004c40:	e004      	b.n	8004c4c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c42:	bf00      	nop
 8004c44:	e002      	b.n	8004c4c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c4a:	bf00      	nop
	return res;
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3724      	adds	r7, #36	; 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}

08004c56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d904      	bls.n	8004c7c <remove_chain+0x26>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d301      	bcc.n	8004c80 <remove_chain+0x2a>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e04b      	b.n	8004d18 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c86:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	69b8      	ldr	r0, [r7, #24]
 8004c8e:	f7ff fec6 	bl	8004a1e <put_fat>
 8004c92:	4603      	mov	r3, r0
 8004c94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c96:	7ffb      	ldrb	r3, [r7, #31]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <remove_chain+0x4a>
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	e03b      	b.n	8004d18 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fde7 	bl	8004876 <get_fat>
 8004ca8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d031      	beq.n	8004d14 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <remove_chain+0x64>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e02e      	b.n	8004d18 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d101      	bne.n	8004cc6 <remove_chain+0x70>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e028      	b.n	8004d18 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	69b8      	ldr	r0, [r7, #24]
 8004ccc:	f7ff fea7 	bl	8004a1e <put_fat>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004cd4:	7ffb      	ldrb	r3, [r7, #31]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <remove_chain+0x88>
 8004cda:	7ffb      	ldrb	r3, [r7, #31]
 8004cdc:	e01c      	b.n	8004d18 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	3b02      	subs	r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d20b      	bcs.n	8004d04 <remove_chain+0xae>
			fs->free_clst++;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	791b      	ldrb	r3, [r3, #4]
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3c6      	bcc.n	8004ca0 <remove_chain+0x4a>
 8004d12:	e000      	b.n	8004d16 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d14:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <create_chain+0x2c>
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d31b      	bcc.n	8004d84 <create_chain+0x64>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e018      	b.n	8004d84 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fd8e 	bl	8004876 <get_fat>
 8004d5a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d801      	bhi.n	8004d66 <create_chain+0x46>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e070      	b.n	8004e48 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d101      	bne.n	8004d72 <create_chain+0x52>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e06a      	b.n	8004e48 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d201      	bcs.n	8004d80 <create_chain+0x60>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	e063      	b.n	8004e48 <create_chain+0x128>
		scl = clst;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d307      	bcc.n	8004da8 <create_chain+0x88>
				ncl = 2;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d901      	bls.n	8004da8 <create_chain+0x88>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e04f      	b.n	8004e48 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fd63 	bl	8004876 <get_fat>
 8004db0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d003      	beq.n	8004dc6 <create_chain+0xa6>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d101      	bne.n	8004dca <create_chain+0xaa>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	e03e      	b.n	8004e48 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d1da      	bne.n	8004d88 <create_chain+0x68>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e038      	b.n	8004e48 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004dd6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	69f9      	ldr	r1, [r7, #28]
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f7ff fe1d 	bl	8004a1e <put_fat>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <create_chain+0xe2>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d006      	beq.n	8004e02 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6938      	ldr	r0, [r7, #16]
 8004dfa:	f7ff fe10 	bl	8004a1e <put_fat>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d116      	bne.n	8004e36 <create_chain+0x116>
		fs->last_clst = ncl;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	3b02      	subs	r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d804      	bhi.n	8004e26 <create_chain+0x106>
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	1e5a      	subs	r2, r3, #1
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	711a      	strb	r2, [r3, #4]
 8004e34:	e007      	b.n	8004e46 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d102      	bne.n	8004e42 <create_chain+0x122>
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	e000      	b.n	8004e44 <create_chain+0x124>
 8004e42:	2301      	movs	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004e46:	69fb      	ldr	r3, [r7, #28]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	3304      	adds	r3, #4
 8004e66:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	899b      	ldrh	r3, [r3, #12]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	8952      	ldrh	r2, [r2, #10]
 8004e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	613a      	str	r2, [r7, #16]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <clmt_clust+0x42>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e010      	b.n	8004eb4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d307      	bcc.n	8004eaa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ea8:	e7e9      	b.n	8004e7e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004eaa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed6:	d204      	bcs.n	8004ee2 <dir_sdi+0x22>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e071      	b.n	8004fca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <dir_sdi+0x46>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d902      	bls.n	8004f06 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10c      	bne.n	8004f26 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	8912      	ldrh	r2, [r2, #8]
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d301      	bcc.n	8004f1c <dir_sdi+0x5c>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e056      	b.n	8004fca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	61da      	str	r2, [r3, #28]
 8004f24:	e02d      	b.n	8004f82 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	895b      	ldrh	r3, [r3, #10]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	899b      	ldrh	r3, [r3, #12]
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f36:	e019      	b.n	8004f6c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fc9a 	bl	8004876 <get_fat>
 8004f42:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d101      	bne.n	8004f50 <dir_sdi+0x90>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e03c      	b.n	8004fca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d904      	bls.n	8004f60 <dir_sdi+0xa0>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d301      	bcc.n	8004f64 <dir_sdi+0xa4>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e032      	b.n	8004fca <dir_sdi+0x10a>
			ofs -= csz;
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d2e1      	bcs.n	8004f38 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	6938      	ldr	r0, [r7, #16]
 8004f78:	f7ff fc5e 	bl	8004838 <clust2sect>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <dir_sdi+0xd4>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e01a      	b.n	8004fca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	899b      	ldrh	r3, [r3, #12]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	899b      	ldrh	r3, [r3, #12]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fbc:	fb00 f202 	mul.w	r2, r0, r2
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	18ca      	adds	r2, r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	3320      	adds	r3, #32
 8004fe8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <dir_next+0x28>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff8:	d301      	bcc.n	8004ffe <dir_next+0x2c>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e0bb      	b.n	8005176 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	899b      	ldrh	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	fbb3 f1f2 	udiv	r1, r3, r2
 800500a:	fb01 f202 	mul.w	r2, r1, r2
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 809d 	bne.w	8005150 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	8912      	ldrh	r2, [r2, #8]
 8005030:	4293      	cmp	r3, r2
 8005032:	f0c0 808d 	bcc.w	8005150 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	61da      	str	r2, [r3, #28]
 800503c:	2304      	movs	r3, #4
 800503e:	e09a      	b.n	8005176 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	899b      	ldrh	r3, [r3, #12]
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	fbb3 f3f2 	udiv	r3, r3, r2
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	8952      	ldrh	r2, [r2, #10]
 8005050:	3a01      	subs	r2, #1
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d17b      	bne.n	8005150 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7ff fc08 	bl	8004876 <get_fat>
 8005066:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d801      	bhi.n	8005072 <dir_next+0xa0>
 800506e:	2302      	movs	r3, #2
 8005070:	e081      	b.n	8005176 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d101      	bne.n	800507e <dir_next+0xac>
 800507a:	2301      	movs	r3, #1
 800507c:	e07b      	b.n	8005176 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d359      	bcc.n	800513c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	61da      	str	r2, [r3, #28]
 8005094:	2304      	movs	r3, #4
 8005096:	e06e      	b.n	8005176 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7ff fe3d 	bl	8004d20 <create_chain>
 80050a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <dir_next+0xe0>
 80050ae:	2307      	movs	r3, #7
 80050b0:	e061      	b.n	8005176 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <dir_next+0xea>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e05c      	b.n	8005176 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d101      	bne.n	80050c8 <dir_next+0xf6>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e056      	b.n	8005176 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fad3 	bl	8004674 <sync_window>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <dir_next+0x106>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e04e      	b.n	8005176 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	899b      	ldrh	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	2100      	movs	r1, #0
 80050e6:	f7ff f8fc 	bl	80042e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	6979      	ldr	r1, [r7, #20]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff fba1 	bl	8004838 <clust2sect>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34
 80050fc:	e012      	b.n	8005124 <dir_next+0x152>
						fs->wflag = 1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fab5 	bl	8004674 <sync_window>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <dir_next+0x142>
 8005110:	2301      	movs	r3, #1
 8005112:	e030      	b.n	8005176 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3301      	adds	r3, #1
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	635a      	str	r2, [r3, #52]	; 0x34
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	895b      	ldrh	r3, [r3, #10]
 8005128:	461a      	mov	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4293      	cmp	r3, r2
 800512e:	d3e6      	bcc.n	80050fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fb77 	bl	8004838 <clust2sect>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	899b      	ldrh	r3, [r3, #12]
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	fbb3 f0f2 	udiv	r0, r3, r2
 8005168:	fb00 f202 	mul.w	r2, r0, r2
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	18ca      	adds	r2, r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b086      	sub	sp, #24
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe95 	bl	8004ec0 <dir_sdi>
 8005196:	4603      	mov	r3, r0
 8005198:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d12b      	bne.n	80051f8 <dir_alloc+0x7a>
		n = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4619      	mov	r1, r3
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff faa6 	bl	80046fc <move_window>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11d      	bne.n	80051f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2be5      	cmp	r3, #229	; 0xe5
 80051c2:	d004      	beq.n	80051ce <dir_alloc+0x50>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3301      	adds	r3, #1
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d102      	bne.n	80051e2 <dir_alloc+0x64>
 80051dc:	e00c      	b.n	80051f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80051e2:	2101      	movs	r1, #1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fef4 	bl	8004fd2 <dir_next>
 80051ea:	4603      	mov	r3, r0
 80051ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0d7      	beq.n	80051a4 <dir_alloc+0x26>
 80051f4:	e000      	b.n	80051f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80051f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d101      	bne.n	8005202 <dir_alloc+0x84>
 80051fe:	2307      	movs	r3, #7
 8005200:	75fb      	strb	r3, [r7, #23]
	return res;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	331a      	adds	r3, #26
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe ffbe 	bl	800419c <ld_word>
 8005220:	4603      	mov	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d109      	bne.n	8005240 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	3314      	adds	r3, #20
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe ffb3 	bl	800419c <ld_word>
 8005236:	4603      	mov	r3, r0
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	331a      	adds	r3, #26
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	b292      	uxth	r2, r2
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe ffd6 	bl	8004212 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d109      	bne.n	8005282 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f103 0214 	add.w	r2, r3, #20
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b29b      	uxth	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7fe ffc8 	bl	8004212 <st_word>
	}
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	331a      	adds	r3, #26
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe ff7e 	bl	800419c <ld_word>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <cmp_lfn+0x1e>
 80052a6:	2300      	movs	r3, #0
 80052a8:	e059      	b.n	800535e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052c0:	2301      	movs	r3, #1
 80052c2:	81fb      	strh	r3, [r7, #14]
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e033      	b.n	8005332 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80052ca:	4a27      	ldr	r2, [pc, #156]	; (8005368 <cmp_lfn+0xdc>)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4413      	add	r3, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe ff5f 	bl	800419c <ld_word>
 80052de:	4603      	mov	r3, r0
 80052e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01a      	beq.n	800531e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2bfe      	cmp	r3, #254	; 0xfe
 80052ec:	d812      	bhi.n	8005314 <cmp_lfn+0x88>
 80052ee:	89bb      	ldrh	r3, [r7, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 f85b 	bl	80073ac <ff_wtoupper>
 80052f6:	4603      	mov	r3, r0
 80052f8:	461c      	mov	r4, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	617a      	str	r2, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f002 f84f 	bl	80073ac <ff_wtoupper>
 800530e:	4603      	mov	r3, r0
 8005310:	429c      	cmp	r4, r3
 8005312:	d001      	beq.n	8005318 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005314:	2300      	movs	r3, #0
 8005316:	e022      	b.n	800535e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005318:	89bb      	ldrh	r3, [r7, #12]
 800531a:	81fb      	strh	r3, [r7, #14]
 800531c:	e006      	b.n	800532c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005324:	4293      	cmp	r3, r2
 8005326:	d001      	beq.n	800532c <cmp_lfn+0xa0>
 8005328:	2300      	movs	r3, #0
 800532a:	e018      	b.n	800535e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3301      	adds	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d9c8      	bls.n	80052ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <cmp_lfn+0xd0>
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <cmp_lfn+0xd0>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <cmp_lfn+0xd0>
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800535c:	2301      	movs	r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}
 8005366:	bf00      	nop
 8005368:	08013b18 	.word	0x08013b18

0800536c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	460b      	mov	r3, r1
 800537c:	71fb      	strb	r3, [r7, #7]
 800537e:	4613      	mov	r3, r2
 8005380:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	330d      	adds	r3, #13
 8005386:	79ba      	ldrb	r2, [r7, #6]
 8005388:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	330b      	adds	r3, #11
 800538e:	220f      	movs	r2, #15
 8005390:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	330c      	adds	r3, #12
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	331a      	adds	r3, #26
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe ff36 	bl	8004212 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	1e5a      	subs	r2, r3, #1
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	82fb      	strh	r3, [r7, #22]
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80053be:	8afb      	ldrh	r3, [r7, #22]
 80053c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <put_lfn+0x6c>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80053d8:	4a17      	ldr	r2, [pc, #92]	; (8005438 <put_lfn+0xcc>)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	4413      	add	r3, r2
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4413      	add	r3, r2
 80053e6:	8afa      	ldrh	r2, [r7, #22]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe ff11 	bl	8004212 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80053f0:	8afb      	ldrh	r3, [r7, #22]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <put_lfn+0x90>
 80053f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	3301      	adds	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	d9da      	bls.n	80053be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800540e:	4293      	cmp	r3, r2
 8005410:	d006      	beq.n	8005420 <put_lfn+0xb4>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <put_lfn+0xbc>
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005426:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	79fa      	ldrb	r2, [r7, #7]
 800542c:	701a      	strb	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	08013b18 	.word	0x08013b18

0800543c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800544a:	220b      	movs	r2, #11
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7fe ff26 	bl	80042a0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d92b      	bls.n	80054b2 <gen_numname+0x76>
		sr = seq;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800545e:	e022      	b.n	80054a6 <gen_numname+0x6a>
			wc = *lfn++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800546a:	2300      	movs	r3, #0
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
 800546e:	e017      	b.n	80054a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005a      	lsls	r2, r3, #1
 8005474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800547e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <gen_numname+0x5e>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005494:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005498:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	3301      	adds	r3, #1
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d9e4      	bls.n	8005470 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1d8      	bne.n	8005460 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80054b2:	2307      	movs	r3, #7
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3330      	adds	r3, #48	; 0x30
 80054c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80054c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054ca:	2b39      	cmp	r3, #57	; 0x39
 80054cc:	d904      	bls.n	80054d8 <gen_numname+0x9c>
 80054ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d2:	3307      	adds	r3, #7
 80054d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80054de:	3330      	adds	r3, #48	; 0x30
 80054e0:	443b      	add	r3, r7
 80054e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80054e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1df      	bne.n	80054b6 <gen_numname+0x7a>
	ns[i] = '~';
 80054f6:	f107 0214 	add.w	r2, r7, #20
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	4413      	add	r3, r2
 80054fe:	227e      	movs	r2, #126	; 0x7e
 8005500:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005502:	2300      	movs	r3, #0
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
 8005506:	e002      	b.n	800550e <gen_numname+0xd2>
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	3301      	adds	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	429a      	cmp	r2, r3
 8005514:	d205      	bcs.n	8005522 <gen_numname+0xe6>
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	4413      	add	r3, r2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b20      	cmp	r3, #32
 8005520:	d1f2      	bne.n	8005508 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b07      	cmp	r3, #7
 8005526:	d807      	bhi.n	8005538 <gen_numname+0xfc>
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	62ba      	str	r2, [r7, #40]	; 0x28
 800552e:	3330      	adds	r3, #48	; 0x30
 8005530:	443b      	add	r3, r7
 8005532:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005536:	e000      	b.n	800553a <gen_numname+0xfe>
 8005538:	2120      	movs	r1, #32
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	627a      	str	r2, [r7, #36]	; 0x24
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	460a      	mov	r2, r1
 8005546:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2b07      	cmp	r3, #7
 800554c:	d9e9      	bls.n	8005522 <gen_numname+0xe6>
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	3730      	adds	r7, #48	; 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005564:	230b      	movs	r3, #11
 8005566:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	01db      	lsls	r3, r3, #7
 8005570:	4313      	orrs	r3, r2
 8005572:	b2da      	uxtb	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	1c59      	adds	r1, r3, #1
 8005578:	6079      	str	r1, [r7, #4]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4413      	add	r3, r2
 800557e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	3b01      	subs	r3, #1
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ed      	bne.n	8005568 <sum_sfn+0x10>
	return sum;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055a8:	2100      	movs	r1, #0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fc88 	bl	8004ec0 <dir_sdi>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <dir_find+0x24>
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	e0a9      	b.n	8005712 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055be:	23ff      	movs	r3, #255	; 0xff
 80055c0:	753b      	strb	r3, [r7, #20]
 80055c2:	7d3b      	ldrb	r3, [r7, #20]
 80055c4:	757b      	strb	r3, [r7, #21]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6938      	ldr	r0, [r7, #16]
 80055d6:	f7ff f891 	bl	80046fc <move_window>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f040 8090 	bne.w	8005706 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055ee:	7dbb      	ldrb	r3, [r7, #22]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <dir_find+0x60>
 80055f4:	2304      	movs	r3, #4
 80055f6:	75fb      	strb	r3, [r7, #23]
 80055f8:	e08a      	b.n	8005710 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	330b      	adds	r3, #11
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005606:	73fb      	strb	r3, [r7, #15]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800560e:	7dbb      	ldrb	r3, [r7, #22]
 8005610:	2be5      	cmp	r3, #229	; 0xe5
 8005612:	d007      	beq.n	8005624 <dir_find+0x8a>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <dir_find+0x98>
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b0f      	cmp	r3, #15
 8005622:	d006      	beq.n	8005632 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005624:	23ff      	movs	r3, #255	; 0xff
 8005626:	757b      	strb	r3, [r7, #21]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f04f 32ff 	mov.w	r2, #4294967295
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
 8005630:	e05e      	b.n	80056f0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d136      	bne.n	80056a6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d154      	bne.n	80056f0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005646:	7dbb      	ldrb	r3, [r7, #22]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	7b5b      	ldrb	r3, [r3, #13]
 8005656:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005658:	7dbb      	ldrb	r3, [r7, #22]
 800565a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565e:	75bb      	strb	r3, [r7, #22]
 8005660:	7dbb      	ldrb	r3, [r7, #22]
 8005662:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800566c:	7dba      	ldrb	r2, [r7, #22]
 800566e:	7d7b      	ldrb	r3, [r7, #21]
 8005670:	429a      	cmp	r2, r3
 8005672:	d115      	bne.n	80056a0 <dir_find+0x106>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	330d      	adds	r3, #13
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	7d3a      	ldrb	r2, [r7, #20]
 800567e:	429a      	cmp	r2, r3
 8005680:	d10e      	bne.n	80056a0 <dir_find+0x106>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7ff fdfd 	bl	800528c <cmp_lfn>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <dir_find+0x106>
 8005698:	7d7b      	ldrb	r3, [r7, #21]
 800569a:	3b01      	subs	r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e000      	b.n	80056a2 <dir_find+0x108>
 80056a0:	23ff      	movs	r3, #255	; 0xff
 80056a2:	757b      	strb	r3, [r7, #21]
 80056a4:	e024      	b.n	80056f0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056a6:	7d7b      	ldrb	r3, [r7, #21]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <dir_find+0x126>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff51 	bl	8005558 <sum_sfn>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	7d3b      	ldrb	r3, [r7, #20]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d024      	beq.n	800570a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <dir_find+0x14a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a18      	ldr	r0, [r3, #32]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3324      	adds	r3, #36	; 0x24
 80056d6:	220b      	movs	r2, #11
 80056d8:	4619      	mov	r1, r3
 80056da:	f7fe fe1d 	bl	8004318 <mem_cmp>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d014      	beq.n	800570e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056e4:	23ff      	movs	r3, #255	; 0xff
 80056e6:	757b      	strb	r3, [r7, #21]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056f0:	2100      	movs	r1, #0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fc6d 	bl	8004fd2 <dir_next>
 80056f8:	4603      	mov	r3, r0
 80056fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f43f af65 	beq.w	80055ce <dir_find+0x34>
 8005704:	e004      	b.n	8005710 <dir_find+0x176>
		if (res != FR_OK) break;
 8005706:	bf00      	nop
 8005708:	e002      	b.n	8005710 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800570e:	bf00      	nop

	return res;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	; 0x30
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005730:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <dir_register+0x20>
 8005738:	2306      	movs	r3, #6
 800573a:	e0e0      	b.n	80058fe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	e002      	b.n	8005748 <dir_register+0x2c>
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	3301      	adds	r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f4      	bne.n	8005742 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800575e:	f107 030c 	add.w	r3, r7, #12
 8005762:	220c      	movs	r2, #12
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe fd9b 	bl	80042a0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d032      	beq.n	80057da <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2240      	movs	r2, #64	; 0x40
 8005778:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800577c:	2301      	movs	r3, #1
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005780:	e016      	b.n	80057b0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	f107 010c 	add.w	r1, r7, #12
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	f7ff fe53 	bl	800543c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff feff 	bl	800559a <dir_find>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80057a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	3301      	adds	r3, #1
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b63      	cmp	r3, #99	; 0x63
 80057b4:	d9e5      	bls.n	8005782 <dir_register+0x66>
 80057b6:	e000      	b.n	80057ba <dir_register+0x9e>
			if (res != FR_OK) break;
 80057b8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d101      	bne.n	80057c4 <dir_register+0xa8>
 80057c0:	2307      	movs	r3, #7
 80057c2:	e09c      	b.n	80058fe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80057c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d002      	beq.n	80057d2 <dir_register+0xb6>
 80057cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057d0:	e095      	b.n	80058fe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80057d2:	7dfa      	ldrb	r2, [r7, #23]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <dir_register+0xd8>
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	330c      	adds	r3, #12
 80057e8:	4a47      	ldr	r2, [pc, #284]	; (8005908 <dir_register+0x1ec>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3301      	adds	r3, #1
 80057f2:	e000      	b.n	80057f6 <dir_register+0xda>
 80057f4:	2301      	movs	r3, #1
 80057f6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057f8:	6a39      	ldr	r1, [r7, #32]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fcbf 	bl	800517e <dir_alloc>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800580a:	2b00      	cmp	r3, #0
 800580c:	d148      	bne.n	80058a0 <dir_register+0x184>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	3b01      	subs	r3, #1
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d042      	beq.n	80058a0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	015b      	lsls	r3, r3, #5
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fb4a 	bl	8004ec0 <dir_sdi>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005836:	2b00      	cmp	r3, #0
 8005838:	d132      	bne.n	80058a0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fe8a 	bl	8005558 <sum_sfn>
 8005844:	4603      	mov	r3, r0
 8005846:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4619      	mov	r1, r3
 800584e:	69f8      	ldr	r0, [r7, #28]
 8005850:	f7fe ff54 	bl	80046fc <move_window>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800585a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11d      	bne.n	800589e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	6918      	ldr	r0, [r3, #16]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a19      	ldr	r1, [r3, #32]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	7efb      	ldrb	r3, [r7, #27]
 8005870:	f7ff fd7c 	bl	800536c <put_lfn>
				fs->wflag = 1;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2201      	movs	r2, #1
 8005878:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800587a:	2100      	movs	r1, #0
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fba8 	bl	8004fd2 <dir_next>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <dir_register+0x184>
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	3b01      	subs	r3, #1
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1d5      	bne.n	8005848 <dir_register+0x12c>
 800589c:	e000      	b.n	80058a0 <dir_register+0x184>
				if (res != FR_OK) break;
 800589e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80058a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d128      	bne.n	80058fa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	4619      	mov	r1, r3
 80058ae:	69f8      	ldr	r0, [r7, #28]
 80058b0:	f7fe ff24 	bl	80046fc <move_window>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80058ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11b      	bne.n	80058fa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	2220      	movs	r2, #32
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fd09 	bl	80042e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a18      	ldr	r0, [r3, #32]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	220b      	movs	r2, #11
 80058da:	4619      	mov	r1, r3
 80058dc:	f7fe fce0 	bl	80042a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	330c      	adds	r3, #12
 80058ec:	f002 0218 	and.w	r2, r2, #24
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2201      	movs	r2, #1
 80058f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3730      	adds	r7, #48	; 0x30
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	4ec4ec4f 	.word	0x4ec4ec4f

0800590c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	; 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	61ba      	str	r2, [r7, #24]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	2b1f      	cmp	r3, #31
 800593e:	d940      	bls.n	80059c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005942:	2b2f      	cmp	r3, #47	; 0x2f
 8005944:	d006      	beq.n	8005954 <create_name+0x48>
 8005946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005948:	2b5c      	cmp	r3, #92	; 0x5c
 800594a:	d110      	bne.n	800596e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800594c:	e002      	b.n	8005954 <create_name+0x48>
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	3301      	adds	r3, #1
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b2f      	cmp	r3, #47	; 0x2f
 800595e:	d0f6      	beq.n	800594e <create_name+0x42>
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4413      	add	r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b5c      	cmp	r3, #92	; 0x5c
 800596a:	d0f0      	beq.n	800594e <create_name+0x42>
			break;
 800596c:	e02a      	b.n	80059c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2bfe      	cmp	r3, #254	; 0xfe
 8005972:	d901      	bls.n	8005978 <create_name+0x6c>
 8005974:	2306      	movs	r3, #6
 8005976:	e17d      	b.n	8005c74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800597a:	b2db      	uxtb	r3, r3
 800597c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800597e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005980:	2101      	movs	r1, #1
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fcd6 	bl	8007334 <ff_convert>
 8005988:	4603      	mov	r3, r0
 800598a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800598c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <create_name+0x8a>
 8005992:	2306      	movs	r3, #6
 8005994:	e16e      	b.n	8005c74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005998:	2b7f      	cmp	r3, #127	; 0x7f
 800599a:	d809      	bhi.n	80059b0 <create_name+0xa4>
 800599c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599e:	4619      	mov	r1, r3
 80059a0:	488d      	ldr	r0, [pc, #564]	; (8005bd8 <create_name+0x2cc>)
 80059a2:	f7fe fce0 	bl	8004366 <chk_chr>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <create_name+0xa4>
 80059ac:	2306      	movs	r3, #6
 80059ae:	e161      	b.n	8005c74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	617a      	str	r2, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80059c0:	e7b4      	b.n	800592c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80059c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	441a      	add	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80059ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d0:	2b1f      	cmp	r3, #31
 80059d2:	d801      	bhi.n	80059d8 <create_name+0xcc>
 80059d4:	2304      	movs	r3, #4
 80059d6:	e000      	b.n	80059da <create_name+0xce>
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059de:	e011      	b.n	8005a04 <create_name+0xf8>
		w = lfn[di - 1];
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059e6:	3b01      	subs	r3, #1
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80059f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d002      	beq.n	80059fe <create_name+0xf2>
 80059f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059fa:	2b2e      	cmp	r3, #46	; 0x2e
 80059fc:	d106      	bne.n	8005a0c <create_name+0x100>
		di--;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ea      	bne.n	80059e0 <create_name+0xd4>
 8005a0a:	e000      	b.n	8005a0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005a0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <create_name+0x118>
 8005a20:	2306      	movs	r3, #6
 8005a22:	e127      	b.n	8005c74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	220b      	movs	r2, #11
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fc58 	bl	80042e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e002      	b.n	8005a3e <create_name+0x132>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d0f5      	beq.n	8005a38 <create_name+0x12c>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	2b2e      	cmp	r3, #46	; 0x2e
 8005a58:	d0ee      	beq.n	8005a38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <create_name+0x168>
 8005a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a64:	f043 0303 	orr.w	r3, r3, #3
 8005a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005a6c:	e002      	b.n	8005a74 <create_name+0x168>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <create_name+0x182>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a80:	3b01      	subs	r3, #1
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a8c:	d1ef      	bne.n	8005a6e <create_name+0x162>

	i = b = 0; ni = 8;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a94:	2300      	movs	r3, #0
 8005a96:	623b      	str	r3, [r7, #32]
 8005a98:	2308      	movs	r3, #8
 8005a9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	61ba      	str	r2, [r7, #24]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8090 	beq.w	8005bd4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d006      	beq.n	8005ac8 <create_name+0x1bc>
 8005aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005abc:	2b2e      	cmp	r3, #46	; 0x2e
 8005abe:	d10a      	bne.n	8005ad6 <create_name+0x1ca>
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d006      	beq.n	8005ad6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005acc:	f043 0303 	orr.w	r3, r3, #3
 8005ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ad4:	e07d      	b.n	8005bd2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d203      	bcs.n	8005ae6 <create_name+0x1da>
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d123      	bne.n	8005b2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b0b      	cmp	r3, #11
 8005aea:	d106      	bne.n	8005afa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af0:	f043 0303 	orr.w	r3, r3, #3
 8005af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005af8:	e075      	b.n	8005be6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d005      	beq.n	8005b0e <create_name+0x202>
 8005b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b06:	f043 0303 	orr.w	r3, r3, #3
 8005b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d866      	bhi.n	8005be4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	230b      	movs	r3, #11
 8005b20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b2c:	e051      	b.n	8005bd2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d914      	bls.n	8005b5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fbfb 	bl	8007334 <ff_convert>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <create_name+0x246>
 8005b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b4a:	3b80      	subs	r3, #128	; 0x80
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <create_name+0x2d0>)
 8005b4e:	5cd3      	ldrb	r3, [r2, r3]
 8005b50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <create_name+0x268>
 8005b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b66:	4619      	mov	r1, r3
 8005b68:	481d      	ldr	r0, [pc, #116]	; (8005be0 <create_name+0x2d4>)
 8005b6a:	f7fe fbfc 	bl	8004366 <chk_chr>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005b74:	235f      	movs	r3, #95	; 0x5f
 8005b76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b7c:	f043 0303 	orr.w	r3, r3, #3
 8005b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b84:	e01b      	b.n	8005bbe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d909      	bls.n	8005ba0 <create_name+0x294>
 8005b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b8e:	2b5a      	cmp	r3, #90	; 0x5a
 8005b90:	d806      	bhi.n	8005ba0 <create_name+0x294>
					b |= 2;
 8005b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b96:	f043 0302 	orr.w	r3, r3, #2
 8005b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b9e:	e00e      	b.n	8005bbe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba2:	2b60      	cmp	r3, #96	; 0x60
 8005ba4:	d90b      	bls.n	8005bbe <create_name+0x2b2>
 8005ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba8:	2b7a      	cmp	r3, #122	; 0x7a
 8005baa:	d808      	bhi.n	8005bbe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bba:	3b20      	subs	r3, #32
 8005bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	623a      	str	r2, [r7, #32]
 8005bc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bc6:	b2d1      	uxtb	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	460a      	mov	r2, r1
 8005bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005bd2:	e763      	b.n	8005a9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005bd4:	bf00      	nop
 8005bd6:	e006      	b.n	8005be6 <create_name+0x2da>
 8005bd8:	080138f4 	.word	0x080138f4
 8005bdc:	08013a98 	.word	0x08013a98
 8005be0:	08013900 	.word	0x08013900
			if (si > di) break;			/* No extension */
 8005be4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bec:	2be5      	cmp	r3, #229	; 0xe5
 8005bee:	d103      	bne.n	8005bf8 <create_name+0x2ec>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2205      	movs	r2, #5
 8005bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d104      	bne.n	8005c08 <create_name+0x2fc>
 8005bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d005      	beq.n	8005c20 <create_name+0x314>
 8005c14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d105      	bne.n	8005c2c <create_name+0x320>
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d117      	bne.n	8005c68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d105      	bne.n	8005c50 <create_name+0x344>
 8005c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c48:	f043 0310 	orr.w	r3, r3, #16
 8005c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d105      	bne.n	8005c68 <create_name+0x35c>
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c60:	f043 0308 	orr.w	r3, r3, #8
 8005c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005c72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3728      	adds	r7, #40	; 0x28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c90:	e002      	b.n	8005c98 <follow_path+0x1c>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c9e:	d0f8      	beq.n	8005c92 <follow_path+0x16>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ca6:	d0f4      	beq.n	8005c92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b1f      	cmp	r3, #31
 8005cb4:	d80a      	bhi.n	8005ccc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff f8fd 	bl	8004ec0 <dir_sdi>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]
 8005cca:	e048      	b.n	8005d5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ccc:	463b      	mov	r3, r7
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fe1b 	bl	800590c <create_name>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d139      	bne.n	8005d54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fc5a 	bl	800559a <dir_find>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005cf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d12c      	bne.n	8005d58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d127      	bne.n	8005d58 <follow_path+0xdc>
 8005d08:	2305      	movs	r3, #5
 8005d0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d0c:	e024      	b.n	8005d58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d121      	bne.n	8005d5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	799b      	ldrb	r3, [r3, #6]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d24:	2305      	movs	r3, #5
 8005d26:	75fb      	strb	r3, [r7, #23]
 8005d28:	e019      	b.n	8005d5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	8992      	ldrh	r2, [r2, #12]
 8005d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d3c:	fb00 f202 	mul.w	r2, r0, r2
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	440b      	add	r3, r1
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fa60 	bl	800520c <ld_clust>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d52:	e7bb      	b.n	8005ccc <follow_path+0x50>
			if (res != FR_OK) break;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <follow_path+0xe2>
				break;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d5c:	bf00      	nop
			}
		}
	}

	return res;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d031      	beq.n	8005de2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e002      	b.n	8005d8c <get_ldnumber+0x24>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b1f      	cmp	r3, #31
 8005d92:	d903      	bls.n	8005d9c <get_ldnumber+0x34>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b3a      	cmp	r3, #58	; 0x3a
 8005d9a:	d1f4      	bne.n	8005d86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b3a      	cmp	r3, #58	; 0x3a
 8005da2:	d11c      	bne.n	8005dde <get_ldnumber+0x76>
			tp = *path;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	60fa      	str	r2, [r7, #12]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	3b30      	subs	r3, #48	; 0x30
 8005db4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b09      	cmp	r3, #9
 8005dba:	d80e      	bhi.n	8005dda <get_ldnumber+0x72>
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d10a      	bne.n	8005dda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d107      	bne.n	8005dda <get_ldnumber+0x72>
					vol = (int)i;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	e002      	b.n	8005de4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005de2:	693b      	ldr	r3, [r7, #16]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	70da      	strb	r2, [r3, #3]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fe fc76 	bl	80046fc <move_window>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <check_fs+0x2a>
 8005e16:	2304      	movs	r3, #4
 8005e18:	e038      	b.n	8005e8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3338      	adds	r3, #56	; 0x38
 8005e1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe f9ba 	bl	800419c <ld_word>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <check_fs+0x48>
 8005e34:	2303      	movs	r3, #3
 8005e36:	e029      	b.n	8005e8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e3e:	2be9      	cmp	r3, #233	; 0xe9
 8005e40:	d009      	beq.n	8005e56 <check_fs+0x66>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e48:	2beb      	cmp	r3, #235	; 0xeb
 8005e4a:	d11e      	bne.n	8005e8a <check_fs+0x9a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e52:	2b90      	cmp	r3, #144	; 0x90
 8005e54:	d119      	bne.n	8005e8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3338      	adds	r3, #56	; 0x38
 8005e5a:	3336      	adds	r3, #54	; 0x36
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe f9b5 	bl	80041cc <ld_dword>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e68:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <check_fs+0xa4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <check_fs+0x82>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e00c      	b.n	8005e8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3338      	adds	r3, #56	; 0x38
 8005e76:	3352      	adds	r3, #82	; 0x52
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe f9a7 	bl	80041cc <ld_dword>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <check_fs+0xa8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <check_fs+0x9a>
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e8a:	2302      	movs	r3, #2
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	00544146 	.word	0x00544146
 8005e98:	33544146 	.word	0x33544146

08005e9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b096      	sub	sp, #88	; 0x58
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ff59 	bl	8005d68 <get_ldnumber>
 8005eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da01      	bge.n	8005ec2 <find_volume+0x26>
 8005ebe:	230b      	movs	r3, #11
 8005ec0:	e262      	b.n	8006388 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ec2:	4a9f      	ldr	r2, [pc, #636]	; (8006140 <find_volume+0x2a4>)
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <find_volume+0x3a>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	e258      	b.n	8006388 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01a      	beq.n	8005f22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f8b5 	bl	8004060 <disk_status>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10c      	bne.n	8005f22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <find_volume+0x82>
 8005f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	e234      	b.n	8006388 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e232      	b.n	8006388 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe f8ad 	bl	8004094 <disk_initialize>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e21b      	b.n	8006388 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <find_volume+0xca>
 8005f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005f62:	230a      	movs	r3, #10
 8005f64:	e210      	b.n	8006388 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	7858      	ldrb	r0, [r3, #1]
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2102      	movs	r1, #2
 8005f72:	f7fe f8f5 	bl	8004160 <disk_ioctl>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <find_volume+0xe4>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e203      	b.n	8006388 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	899b      	ldrh	r3, [r3, #12]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d80d      	bhi.n	8005fa6 <find_volume+0x10a>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	899b      	ldrh	r3, [r3, #12]
 8005f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f92:	d308      	bcc.n	8005fa6 <find_volume+0x10a>
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	899b      	ldrh	r3, [r3, #12]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	899b      	ldrh	r3, [r3, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <find_volume+0x10e>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e1ee      	b.n	8006388 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005fae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fb2:	f7ff ff1d 	bl	8005df0 <check_fs>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d149      	bne.n	8006058 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	e01e      	b.n	8006008 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005fd8:	4413      	add	r3, r2
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	3304      	adds	r3, #4
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <find_volume+0x158>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	3308      	adds	r3, #8
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe f8ee 	bl	80041cc <ld_dword>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	e000      	b.n	8005ff6 <find_volume+0x15a>
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3358      	adds	r3, #88	; 0x58
 8005ffc:	443b      	add	r3, r7
 8005ffe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006004:	3301      	adds	r3, #1
 8006006:	643b      	str	r3, [r7, #64]	; 0x40
 8006008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600a:	2b03      	cmp	r3, #3
 800600c:	d9dd      	bls.n	8005fca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800600e:	2300      	movs	r3, #0
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <find_volume+0x182>
 8006018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601a:	3b01      	subs	r3, #1
 800601c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800601e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	3358      	adds	r3, #88	; 0x58
 8006024:	443b      	add	r3, r7
 8006026:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <find_volume+0x1a2>
 8006032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006036:	f7ff fedb 	bl	8005df0 <check_fs>
 800603a:	4603      	mov	r3, r0
 800603c:	e000      	b.n	8006040 <find_volume+0x1a4>
 800603e:	2303      	movs	r3, #3
 8006040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006048:	2b01      	cmp	r3, #1
 800604a:	d905      	bls.n	8006058 <find_volume+0x1bc>
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	3301      	adds	r3, #1
 8006050:	643b      	str	r3, [r7, #64]	; 0x40
 8006052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006054:	2b03      	cmp	r3, #3
 8006056:	d9e2      	bls.n	800601e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605c:	2b04      	cmp	r3, #4
 800605e:	d101      	bne.n	8006064 <find_volume+0x1c8>
 8006060:	2301      	movs	r3, #1
 8006062:	e191      	b.n	8006388 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006068:	2b01      	cmp	r3, #1
 800606a:	d901      	bls.n	8006070 <find_volume+0x1d4>
 800606c:	230d      	movs	r3, #13
 800606e:	e18b      	b.n	8006388 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	3338      	adds	r3, #56	; 0x38
 8006074:	330b      	adds	r3, #11
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe f890 	bl	800419c <ld_word>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	899b      	ldrh	r3, [r3, #12]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <find_volume+0x1f0>
 8006088:	230d      	movs	r3, #13
 800608a:	e17d      	b.n	8006388 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	3338      	adds	r3, #56	; 0x38
 8006090:	3316      	adds	r3, #22
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe f882 	bl	800419c <ld_word>
 8006098:	4603      	mov	r3, r0
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800609c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <find_volume+0x214>
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	3338      	adds	r3, #56	; 0x38
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe f88f 	bl	80041cc <ld_dword>
 80060ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d005      	beq.n	80060d4 <find_volume+0x238>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d001      	beq.n	80060d4 <find_volume+0x238>
 80060d0:	230d      	movs	r3, #13
 80060d2:	e159      	b.n	8006388 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	789b      	ldrb	r3, [r3, #2]
 80060d8:	461a      	mov	r2, r3
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	fb02 f303 	mul.w	r3, r2, r3
 80060e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	895b      	ldrh	r3, [r3, #10]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <find_volume+0x26c>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	3b01      	subs	r3, #1
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <find_volume+0x270>
 8006108:	230d      	movs	r3, #13
 800610a:	e13d      	b.n	8006388 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	3338      	adds	r3, #56	; 0x38
 8006110:	3311      	adds	r3, #17
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe f842 	bl	800419c <ld_word>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	891b      	ldrh	r3, [r3, #8]
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	8992      	ldrh	r2, [r2, #12]
 8006128:	0952      	lsrs	r2, r2, #5
 800612a:	b292      	uxth	r2, r2
 800612c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006130:	fb01 f202 	mul.w	r2, r1, r2
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <find_volume+0x2a8>
 800613c:	230d      	movs	r3, #13
 800613e:	e123      	b.n	8006388 <find_volume+0x4ec>
 8006140:	20005400 	.word	0x20005400

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	3338      	adds	r3, #56	; 0x38
 8006148:	3313      	adds	r3, #19
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe f826 	bl	800419c <ld_word>
 8006150:	4603      	mov	r3, r0
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <find_volume+0x2cc>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	3338      	adds	r3, #56	; 0x38
 800615e:	3320      	adds	r3, #32
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe f833 	bl	80041cc <ld_dword>
 8006166:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	3338      	adds	r3, #56	; 0x38
 800616c:	330e      	adds	r3, #14
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe f814 	bl	800419c <ld_word>
 8006174:	4603      	mov	r3, r0
 8006176:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006178:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <find_volume+0x2e6>
 800617e:	230d      	movs	r3, #13
 8006180:	e102      	b.n	8006388 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006182:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006186:	4413      	add	r3, r2
 8006188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618a:	8911      	ldrh	r1, [r2, #8]
 800618c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618e:	8992      	ldrh	r2, [r2, #12]
 8006190:	0952      	lsrs	r2, r2, #5
 8006192:	b292      	uxth	r2, r2
 8006194:	fbb1 f2f2 	udiv	r2, r1, r2
 8006198:	b292      	uxth	r2, r2
 800619a:	4413      	add	r3, r2
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800619e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d201      	bcs.n	80061aa <find_volume+0x30e>
 80061a6:	230d      	movs	r3, #13
 80061a8:	e0ee      	b.n	8006388 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b2:	8952      	ldrh	r2, [r2, #10]
 80061b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <find_volume+0x328>
 80061c0:	230d      	movs	r3, #13
 80061c2:	e0e1      	b.n	8006388 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80061c4:	2303      	movs	r3, #3
 80061c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d802      	bhi.n	80061da <find_volume+0x33e>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d802      	bhi.n	80061ea <find_volume+0x34e>
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80061f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fc:	441a      	add	r2, r3
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006202:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	441a      	add	r2, r3
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800620c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006210:	2b03      	cmp	r3, #3
 8006212:	d11e      	bne.n	8006252 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	3338      	adds	r3, #56	; 0x38
 8006218:	332a      	adds	r3, #42	; 0x2a
 800621a:	4618      	mov	r0, r3
 800621c:	f7fd ffbe 	bl	800419c <ld_word>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <find_volume+0x38e>
 8006226:	230d      	movs	r3, #13
 8006228:	e0ae      	b.n	8006388 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	891b      	ldrh	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <find_volume+0x39a>
 8006232:	230d      	movs	r3, #13
 8006234:	e0a8      	b.n	8006388 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	3338      	adds	r3, #56	; 0x38
 800623a:	332c      	adds	r3, #44	; 0x2c
 800623c:	4618      	mov	r0, r3
 800623e:	f7fd ffc5 	bl	80041cc <ld_dword>
 8006242:	4602      	mov	r2, r0
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	e01f      	b.n	8006292 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	891b      	ldrh	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <find_volume+0x3c2>
 800625a:	230d      	movs	r3, #13
 800625c:	e094      	b.n	8006388 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	441a      	add	r2, r3
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800626a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800626e:	2b02      	cmp	r3, #2
 8006270:	d103      	bne.n	800627a <find_volume+0x3de>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	e00a      	b.n	8006290 <find_volume+0x3f4>
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	4613      	mov	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4413      	add	r3, r2
 8006284:	085a      	lsrs	r2, r3, #1
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	899b      	ldrh	r3, [r3, #12]
 800629a:	4619      	mov	r1, r3
 800629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629e:	440b      	add	r3, r1
 80062a0:	3b01      	subs	r3, #1
 80062a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062a4:	8989      	ldrh	r1, [r1, #12]
 80062a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d201      	bcs.n	80062b2 <find_volume+0x416>
 80062ae:	230d      	movs	r3, #13
 80062b0:	e06a      	b.n	8006388 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	619a      	str	r2, [r3, #24]
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	2280      	movs	r2, #128	; 0x80
 80062c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80062c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d149      	bne.n	8006364 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	3338      	adds	r3, #56	; 0x38
 80062d4:	3330      	adds	r3, #48	; 0x30
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd ff60 	bl	800419c <ld_word>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d140      	bne.n	8006364 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	3301      	adds	r3, #1
 80062e6:	4619      	mov	r1, r3
 80062e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062ea:	f7fe fa07 	bl	80046fc <move_window>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d137      	bne.n	8006364 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	2200      	movs	r2, #0
 80062f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	3338      	adds	r3, #56	; 0x38
 80062fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd ff4a 	bl	800419c <ld_word>
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006310:	429a      	cmp	r2, r3
 8006312:	d127      	bne.n	8006364 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	3338      	adds	r3, #56	; 0x38
 8006318:	4618      	mov	r0, r3
 800631a:	f7fd ff57 	bl	80041cc <ld_dword>
 800631e:	4603      	mov	r3, r0
 8006320:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <find_volume+0x4f4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d11e      	bne.n	8006364 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	3338      	adds	r3, #56	; 0x38
 800632a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd ff4c 	bl	80041cc <ld_dword>
 8006334:	4603      	mov	r3, r0
 8006336:	4a17      	ldr	r2, [pc, #92]	; (8006394 <find_volume+0x4f8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d113      	bne.n	8006364 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	3338      	adds	r3, #56	; 0x38
 8006340:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd ff41 	bl	80041cc <ld_dword>
 800634a:	4602      	mov	r2, r0
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	3338      	adds	r3, #56	; 0x38
 8006354:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006358:	4618      	mov	r0, r3
 800635a:	f7fd ff37 	bl	80041cc <ld_dword>
 800635e:	4602      	mov	r2, r0
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800636a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <find_volume+0x4fc>)
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <find_volume+0x4fc>)
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <find_volume+0x4fc>)
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006382:	f7fe f953 	bl	800462c <clear_lock>
#endif
	return FR_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3758      	adds	r7, #88	; 0x58
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	41615252 	.word	0x41615252
 8006394:	61417272 	.word	0x61417272
 8006398:	20005404 	.word	0x20005404

0800639c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80063a6:	2309      	movs	r3, #9
 80063a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01c      	beq.n	80063ea <validate+0x4e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d018      	beq.n	80063ea <validate+0x4e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <validate+0x4e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	889a      	ldrh	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	88db      	ldrh	r3, [r3, #6]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d10c      	bne.n	80063ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fd fe42 	bl	8004060 <disk_status>
 80063dc:	4603      	mov	r3, r0
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <validate+0x4e>
			res = FR_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <validate+0x5a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	e000      	b.n	80063f8 <validate+0x5c>
 80063f6:	2300      	movs	r3, #0
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	6013      	str	r3, [r2, #0]
	return res;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800641a:	f107 0310 	add.w	r3, r7, #16
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fca2 	bl	8005d68 <get_ldnumber>
 8006424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da01      	bge.n	8006430 <f_mount+0x28>
 800642c:	230b      	movs	r3, #11
 800642e:	e02b      	b.n	8006488 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006430:	4a17      	ldr	r2, [pc, #92]	; (8006490 <f_mount+0x88>)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006440:	69b8      	ldr	r0, [r7, #24]
 8006442:	f7fe f8f3 	bl	800462c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	490d      	ldr	r1, [pc, #52]	; (8006490 <f_mount+0x88>)
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <f_mount+0x66>
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d001      	beq.n	8006472 <f_mount+0x6a>
 800646e:	2300      	movs	r3, #0
 8006470:	e00a      	b.n	8006488 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006472:	f107 010c 	add.w	r1, r7, #12
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	2200      	movs	r2, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fd0d 	bl	8005e9c <find_volume>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20005400 	.word	0x20005400

08006494 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800649a:	af00      	add	r7, sp, #0
 800649c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80064a4:	6018      	str	r0, [r3, #0]
 80064a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064aa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064b4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80064b8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80064ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <f_open+0x38>
 80064c8:	2309      	movs	r3, #9
 80064ca:	e2a6      	b.n	8006a1a <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80064cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064d0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80064d4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80064d8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80064e2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80064e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064e8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fcd0 	bl	8005e9c <find_volume>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8006502:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 827a 	bne.w	8006a00 <f_open+0x56c>
		dj.obj.fs = fs;
 800650c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006510:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8006514:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006518:	f107 0214 	add.w	r2, r7, #20
 800651c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800651e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006522:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fba4 	bl	8005c7c <follow_path>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800653a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11e      	bne.n	8006580 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006542:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8006546:	b25b      	sxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	da03      	bge.n	8006554 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800654c:	2306      	movs	r3, #6
 800654e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006552:	e015      	b.n	8006580 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006554:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006558:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd ff11 	bl	800439c <chk_lock>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006580:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006584:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 031c 	and.w	r3, r3, #28
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a7 	beq.w	80066e2 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8006594:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01f      	beq.n	80065dc <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800659c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d10e      	bne.n	80065c2 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80065a4:	f7fd ff56 	bl	8004454 <enq_lock>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d006      	beq.n	80065bc <f_open+0x128>
 80065ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff f8b2 	bl	800571c <dir_register>
 80065b8:	4603      	mov	r3, r0
 80065ba:	e000      	b.n	80065be <f_open+0x12a>
 80065bc:	2312      	movs	r3, #18
 80065be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80065c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80065c6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80065ca:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80065ce:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	f042 0208 	orr.w	r2, r2, #8
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e015      	b.n	8006608 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80065dc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80065e0:	f003 0311 	and.w	r3, r3, #17
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <f_open+0x15c>
					res = FR_DENIED;
 80065e8:	2307      	movs	r3, #7
 80065ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80065ee:	e00b      	b.n	8006608 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80065f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80065f4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <f_open+0x174>
 8006602:	2308      	movs	r3, #8
 8006604:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006608:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 8088 	bne.w	8006722 <f_open+0x28e>
 8006612:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006616:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d07e      	beq.n	8006722 <f_open+0x28e>
				dw = GET_FATTIME();
 8006624:	f7fd fcbe 	bl	8003fa4 <get_fattime>
 8006628:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800662c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006630:	330e      	adds	r3, #14
 8006632:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006636:	4618      	mov	r0, r3
 8006638:	f7fd fe06 	bl	8004248 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800663c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006640:	3316      	adds	r3, #22
 8006642:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006646:	4618      	mov	r0, r3
 8006648:	f7fd fdfe 	bl	8004248 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800664c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006650:	330b      	adds	r3, #11
 8006652:	2220      	movs	r2, #32
 8006654:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006656:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800665a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fdd3 	bl	800520c <ld_clust>
 8006666:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800666a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800666e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006672:	2200      	movs	r2, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fde8 	bl	800524a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800667a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800667e:	331c      	adds	r3, #28
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fde0 	bl	8004248 <st_dword>
					fs->wflag = 1;
 8006688:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800668c:	2201      	movs	r2, #1
 800668e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006690:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8006694:	2b00      	cmp	r3, #0
 8006696:	d044      	beq.n	8006722 <f_open+0x28e>
						dw = fs->winsect;
 8006698:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80066a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fad2 	bl	8004c56 <remove_chain>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80066b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d130      	bne.n	8006722 <f_open+0x28e>
							res = move_window(fs, dw);
 80066c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066c4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe f817 	bl	80046fc <move_window>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80066d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066d8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80066dc:	3a01      	subs	r2, #1
 80066de:	615a      	str	r2, [r3, #20]
 80066e0:	e01f      	b.n	8006722 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80066e2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11b      	bne.n	8006722 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80066ea:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <f_open+0x26a>
					res = FR_NO_FILE;
 80066f6:	2304      	movs	r3, #4
 80066f8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80066fc:	e011      	b.n	8006722 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80066fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006702:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <f_open+0x28e>
 8006710:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <f_open+0x28e>
						res = FR_DENIED;
 800671c:	2307      	movs	r3, #7
 800671e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8006722:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006726:	2b00      	cmp	r3, #0
 8006728:	d14a      	bne.n	80067c0 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800672a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800672e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800673c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006740:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006744:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006748:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006752:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006754:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800675e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006766:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800676a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800676e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006776:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800677a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd fe7e 	bl	8004498 <inc_lock>
 800679c:	4602      	mov	r2, r0
 800679e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <f_open+0x32c>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80067c0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 811b 	bne.w	8006a00 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80067ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80067ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fd19 	bl	800520c <ld_clust>
 80067da:	4602      	mov	r2, r0
 80067dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80067e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80067ec:	331c      	adds	r3, #28
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd fcec 	bl	80041cc <ld_dword>
 80067f4:	4602      	mov	r2, r0
 80067f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006802:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006806:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2200      	movs	r2, #0
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006810:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006814:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006818:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006820:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006824:	88da      	ldrh	r2, [r3, #6]
 8006826:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800682a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006832:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006836:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006840:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006848:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800684c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006856:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800685a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006864:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006868:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006872:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006876:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3330      	adds	r3, #48	; 0x30
 800687e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f7fd fd2c 	bl	80042e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800688a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800688e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80b1 	beq.w	8006a00 <f_open+0x56c>
 800689e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80a8 	beq.w	8006a00 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80068b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80068c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80068cc:	895b      	ldrh	r3, [r3, #10]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80068d4:	899b      	ldrh	r3, [r3, #12]
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80068de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80068ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80068fe:	e021      	b.n	8006944 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8006900:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006904:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800690e:	4618      	mov	r0, r3
 8006910:	f7fd ffb1 	bl	8004876 <get_fat>
 8006914:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8006918:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800691c:	2b01      	cmp	r3, #1
 800691e:	d802      	bhi.n	8006926 <f_open+0x492>
 8006920:	2302      	movs	r3, #2
 8006922:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006926:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d102      	bne.n	8006936 <f_open+0x4a2>
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006936:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800693a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006944:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <f_open+0x4c4>
 800694c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006950:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006954:	429a      	cmp	r2, r3
 8006956:	d8d3      	bhi.n	8006900 <f_open+0x46c>
				}
				fp->clust = clst;
 8006958:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800695c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8006966:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006968:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800696c:	2b00      	cmp	r3, #0
 800696e:	d147      	bne.n	8006a00 <f_open+0x56c>
 8006970:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006974:	899b      	ldrh	r3, [r3, #12]
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800697c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006980:	fb01 f202 	mul.w	r2, r1, r2
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d03a      	beq.n	8006a00 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800698a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800698e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd ff50 	bl	8004838 <clust2sect>
 8006998:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800699c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <f_open+0x518>
						res = FR_INT_ERR;
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80069aa:	e029      	b.n	8006a00 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80069ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069b0:	899b      	ldrh	r3, [r3, #12]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80069b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80069bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80069c0:	441a      	add	r2, r3
 80069c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80069ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069d2:	7858      	ldrb	r0, [r3, #1]
 80069d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	2301      	movs	r3, #1
 80069f0:	f7fd fb76 	bl	80040e0 <disk_read>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <f_open+0x56c>
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a00:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <f_open+0x582>
 8006a08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006a16:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f107 0214 	add.w	r2, r7, #20
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fca9 	bl	800639c <validate>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d107      	bne.n	8006a68 <f_read+0x44>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	7d5b      	ldrb	r3, [r3, #21]
 8006a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <f_read+0x4a>
 8006a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a6c:	e135      	b.n	8006cda <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	7d1b      	ldrb	r3, [r3, #20]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <f_read+0x5a>
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	e12d      	b.n	8006cda <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f240 811e 	bls.w	8006cd0 <f_read+0x2ac>
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006a98:	e11a      	b.n	8006cd0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	8992      	ldrh	r2, [r2, #12]
 8006aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa6:	fb01 f202 	mul.w	r2, r1, r2
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 80d5 	bne.w	8006c5c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	8992      	ldrh	r2, [r2, #12]
 8006aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	8952      	ldrh	r2, [r2, #10]
 8006ac2:	3a01      	subs	r2, #1
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d12f      	bne.n	8006b2e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
 8006adc:	e013      	b.n	8006b06 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4619      	mov	r1, r3
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7fe f9af 	bl	8004e50 <clmt_clust>
 8006af2:	6338      	str	r0, [r7, #48]	; 0x30
 8006af4:	e007      	b.n	8006b06 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fd feb9 	bl	8004876 <get_fat>
 8006b04:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d804      	bhi.n	8006b16 <f_read+0xf2>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	755a      	strb	r2, [r3, #21]
 8006b12:	2302      	movs	r3, #2
 8006b14:	e0e1      	b.n	8006cda <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d104      	bne.n	8006b28 <f_read+0x104>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	755a      	strb	r2, [r3, #21]
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0d8      	b.n	8006cda <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7fd fe7e 	bl	8004838 <clust2sect>
 8006b3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <f_read+0x12a>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2202      	movs	r2, #2
 8006b48:	755a      	strb	r2, [r3, #21]
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e0c5      	b.n	8006cda <f_read+0x2b6>
			sect += csect;
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	899b      	ldrh	r3, [r3, #12]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d041      	beq.n	8006bee <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	4413      	add	r3, r2
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	8952      	ldrh	r2, [r2, #10]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d905      	bls.n	8006b84 <f_read+0x160>
					cc = fs->csize - csect;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	895b      	ldrh	r3, [r3, #10]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	7858      	ldrb	r0, [r3, #1]
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b8e:	f7fd faa7 	bl	80040e0 <disk_read>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <f_read+0x17e>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	755a      	strb	r2, [r3, #21]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e09b      	b.n	8006cda <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	7d1b      	ldrb	r3, [r3, #20]
 8006ba6:	b25b      	sxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da18      	bge.n	8006bde <f_read+0x1ba>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d911      	bls.n	8006bde <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1a      	ldr	r2, [r3, #32]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	8992      	ldrh	r2, [r2, #12]
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	18d0      	adds	r0, r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	899b      	ldrh	r3, [r3, #12]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f7fd fb61 	bl	80042a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	899b      	ldrh	r3, [r3, #12]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006bec:	e05c      	b.n	8006ca8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d02e      	beq.n	8006c56 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	7d1b      	ldrb	r3, [r3, #20]
 8006bfc:	b25b      	sxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da18      	bge.n	8006c34 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	7858      	ldrb	r0, [r3, #1]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	2301      	movs	r3, #1
 8006c12:	f7fd fa85 	bl	8004120 <disk_write>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <f_read+0x202>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	755a      	strb	r2, [r3, #21]
 8006c22:	2301      	movs	r3, #1
 8006c24:	e059      	b.n	8006cda <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	7d1b      	ldrb	r3, [r3, #20]
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	7858      	ldrb	r0, [r3, #1]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c3e:	2301      	movs	r3, #1
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	f7fd fa4d 	bl	80040e0 <disk_read>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <f_read+0x232>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	755a      	strb	r2, [r3, #21]
 8006c52:	2301      	movs	r3, #1
 8006c54:	e041      	b.n	8006cda <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	899b      	ldrh	r3, [r3, #12]
 8006c60:	4618      	mov	r0, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	8992      	ldrh	r2, [r2, #12]
 8006c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c6e:	fb01 f202 	mul.w	r2, r1, r2
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	1ac3      	subs	r3, r0, r3
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d901      	bls.n	8006c84 <f_read+0x260>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	8992      	ldrh	r2, [r2, #12]
 8006c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c96:	fb00 f202 	mul.w	r2, r0, r2
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ca4:	f7fd fafc 	bl	80042a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	4413      	add	r3, r2
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	441a      	add	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	619a      	str	r2, [r3, #24]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	441a      	add	r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f47f aee1 	bne.w	8006a9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3738      	adds	r7, #56	; 0x38
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f107 0208 	add.w	r2, r7, #8
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fb52 	bl	800639c <validate>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d168      	bne.n	8006dd4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7d1b      	ldrb	r3, [r3, #20]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d062      	beq.n	8006dd4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da15      	bge.n	8006d44 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7858      	ldrb	r0, [r3, #1]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	2301      	movs	r3, #1
 8006d28:	f7fd f9fa 	bl	8004120 <disk_write>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <f_sync+0x54>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e04f      	b.n	8006dd6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7d1b      	ldrb	r3, [r3, #20]
 8006d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d44:	f7fd f92e 	bl	8003fa4 <get_fattime>
 8006d48:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fd fcd2 	bl	80046fc <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d138      	bne.n	8006dd4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	330b      	adds	r3, #11
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	330b      	adds	r3, #11
 8006d72:	f042 0220 	orr.w	r2, r2, #32
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	f7fe fa60 	bl	800524a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f103 021c 	add.w	r2, r3, #28
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7fd fa56 	bl	8004248 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3316      	adds	r3, #22
 8006da0:	6939      	ldr	r1, [r7, #16]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fd fa50 	bl	8004248 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3312      	adds	r3, #18
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fd fa2f 	bl	8004212 <st_word>
					fs->wflag = 1;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2201      	movs	r2, #1
 8006db8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd fccb 	bl	8004758 <sync_fs>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7d1b      	ldrb	r3, [r3, #20]
 8006dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff ff7b 	bl	8006ce2 <f_sync>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d118      	bne.n	8006e28 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff facc 	bl	800639c <validate>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10c      	bne.n	8006e28 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd fbce 	bl	80045b4 <dec_lock>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b090      	sub	sp, #64	; 0x40
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f107 0208 	add.w	r2, r7, #8
 8006e42:	4611      	mov	r1, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff faa9 	bl	800639c <validate>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006e50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <f_lseek+0x2e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7d5b      	ldrb	r3, [r3, #21]
 8006e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006e60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <f_lseek+0x3c>
 8006e68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e6c:	e201      	b.n	8007272 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80d9 	beq.w	800702a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d15a      	bne.n	8006f36 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	2302      	movs	r3, #2
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d03a      	beq.n	8006f16 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	3302      	adds	r3, #2
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fd fcda 	bl	8004876 <get_fat>
 8006ec2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d804      	bhi.n	8006ed4 <f_lseek+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	755a      	strb	r2, [r3, #21]
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e1ce      	b.n	8007272 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d104      	bne.n	8006ee6 <f_lseek+0xb4>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	755a      	strb	r2, [r3, #21]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e1c5      	b.n	8007272 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d0de      	beq.n	8006eae <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d809      	bhi.n	8006f0c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	627a      	str	r2, [r7, #36]	; 0x24
 8006efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1d1a      	adds	r2, r3, #4
 8006f06:	627a      	str	r2, [r7, #36]	; 0x24
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d3c4      	bcc.n	8006ea0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d803      	bhi.n	8006f2e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e19f      	b.n	800726e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006f2e:	2311      	movs	r3, #17
 8006f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006f34:	e19b      	b.n	800726e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d902      	bls.n	8006f46 <f_lseek+0x114>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 818d 	beq.w	800726e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fd ff78 	bl	8004e50 <clmt_clust>
 8006f60:	4602      	mov	r2, r0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fd fc62 	bl	8004838 <clust2sect>
 8006f74:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <f_lseek+0x154>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	755a      	strb	r2, [r3, #21]
 8006f82:	2302      	movs	r3, #2
 8006f84:	e175      	b.n	8007272 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	8992      	ldrh	r2, [r2, #12]
 8006f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	8952      	ldrh	r2, [r2, #10]
 8006f96:	3a01      	subs	r2, #1
 8006f98:	4013      	ands	r3, r2
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	8992      	ldrh	r2, [r2, #12]
 8006fa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fac:	fb01 f202 	mul.w	r2, r1, r2
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 815b 	beq.w	800726e <f_lseek+0x43c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	f000 8155 	beq.w	800726e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7d1b      	ldrb	r3, [r3, #20]
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da18      	bge.n	8007000 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	7858      	ldrb	r0, [r3, #1]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f7fd f89f 	bl	8004120 <disk_write>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <f_lseek+0x1c0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	755a      	strb	r2, [r3, #21]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e13f      	b.n	8007272 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7d1b      	ldrb	r3, [r3, #20]
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	7858      	ldrb	r0, [r3, #1]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800700a:	2301      	movs	r3, #1
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	f7fd f867 	bl	80040e0 <disk_read>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <f_lseek+0x1f0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	755a      	strb	r2, [r3, #21]
 800701e:	2301      	movs	r3, #1
 8007020:	e127      	b.n	8007272 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	621a      	str	r2, [r3, #32]
 8007028:	e121      	b.n	800726e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d908      	bls.n	8007046 <f_lseek+0x214>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7d1b      	ldrb	r3, [r3, #20]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007054:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80b5 	beq.w	80071c8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	895b      	ldrh	r3, [r3, #10]
 8007062:	461a      	mov	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	899b      	ldrh	r3, [r3, #12]
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01b      	beq.n	80070ac <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1e5a      	subs	r2, r3, #1
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	fbb2 f2f3 	udiv	r2, r2, r3
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	1e59      	subs	r1, r3, #1
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007088:	429a      	cmp	r2, r3
 800708a:	d30f      	bcc.n	80070ac <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	425b      	negs	r3, r3
 8007094:	401a      	ands	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070aa:	e022      	b.n	80070f2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d119      	bne.n	80070ec <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fd fe2f 	bl	8004d20 <create_chain>
 80070c2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d104      	bne.n	80070d4 <f_lseek+0x2a2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	755a      	strb	r2, [r3, #21]
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0ce      	b.n	8007272 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d104      	bne.n	80070e6 <f_lseek+0x2b4>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	755a      	strb	r2, [r3, #21]
 80070e2:	2301      	movs	r3, #1
 80070e4:	e0c5      	b.n	8007272 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070f0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d067      	beq.n	80071c8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80070f8:	e03a      	b.n	8007170 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd fdfe 	bl	8004d20 <create_chain>
 8007124:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <f_lseek+0x30c>
							ofs = 0; break;
 800712c:	2300      	movs	r3, #0
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e022      	b.n	8007178 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007136:	4618      	mov	r0, r3
 8007138:	f7fd fb9d 	bl	8004876 <get_fat>
 800713c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d104      	bne.n	8007150 <f_lseek+0x31e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	755a      	strb	r2, [r3, #21]
 800714c:	2301      	movs	r3, #1
 800714e:	e090      	b.n	8007272 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b01      	cmp	r3, #1
 8007154:	d904      	bls.n	8007160 <f_lseek+0x32e>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715c:	429a      	cmp	r2, r3
 800715e:	d304      	bcc.n	800716a <f_lseek+0x338>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	755a      	strb	r2, [r3, #21]
 8007166:	2302      	movs	r3, #2
 8007168:	e083      	b.n	8007272 <f_lseek+0x440>
					fp->clust = clst;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	429a      	cmp	r2, r3
 8007176:	d8c0      	bhi.n	80070fa <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	441a      	add	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	899b      	ldrh	r3, [r3, #12]
 8007188:	461a      	mov	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007190:	fb01 f202 	mul.w	r2, r1, r2
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fd fb4a 	bl	8004838 <clust2sect>
 80071a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <f_lseek+0x384>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	755a      	strb	r2, [r3, #21]
 80071b2:	2302      	movs	r3, #2
 80071b4:	e05d      	b.n	8007272 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	899b      	ldrh	r3, [r3, #12]
 80071ba:	461a      	mov	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c4:	4413      	add	r3, r2
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d90a      	bls.n	80071ea <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7d1b      	ldrb	r3, [r3, #20]
 80071e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	8992      	ldrh	r2, [r2, #12]
 80071f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80071f6:	fb01 f202 	mul.w	r2, r1, r2
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d036      	beq.n	800726e <f_lseek+0x43c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007206:	429a      	cmp	r2, r3
 8007208:	d031      	beq.n	800726e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7d1b      	ldrb	r3, [r3, #20]
 800720e:	b25b      	sxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	da18      	bge.n	8007246 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	7858      	ldrb	r0, [r3, #1]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	2301      	movs	r3, #1
 8007224:	f7fc ff7c 	bl	8004120 <disk_write>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <f_lseek+0x406>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	755a      	strb	r2, [r3, #21]
 8007234:	2301      	movs	r3, #1
 8007236:	e01c      	b.n	8007272 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7d1b      	ldrb	r3, [r3, #20]
 800723c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	7858      	ldrb	r0, [r3, #1]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007250:	2301      	movs	r3, #1
 8007252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007254:	f7fc ff44 	bl	80040e0 <disk_read>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <f_lseek+0x436>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	755a      	strb	r2, [r3, #21]
 8007264:	2301      	movs	r3, #1
 8007266:	e004      	b.n	8007272 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800726e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007272:	4618      	mov	r0, r3
 8007274:	3740      	adds	r7, #64	; 0x40
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007292:	4b1f      	ldr	r3, [pc, #124]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 8007294:	7a5b      	ldrb	r3, [r3, #9]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d131      	bne.n	8007300 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800729c:	4b1c      	ldr	r3, [pc, #112]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 800729e:	7a5b      	ldrb	r3, [r3, #9]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072a6:	2100      	movs	r1, #0
 80072a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80072aa:	4b19      	ldr	r3, [pc, #100]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072ac:	7a5b      	ldrb	r3, [r3, #9]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4a17      	ldr	r2, [pc, #92]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072ba:	4b15      	ldr	r3, [pc, #84]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072bc:	7a5b      	ldrb	r3, [r3, #9]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b13      	ldr	r3, [pc, #76]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072c4:	4413      	add	r3, r2
 80072c6:	79fa      	ldrb	r2, [r7, #7]
 80072c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072ca:	4b11      	ldr	r3, [pc, #68]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072cc:	7a5b      	ldrb	r3, [r3, #9]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	b2d1      	uxtb	r1, r2
 80072d4:	4a0e      	ldr	r2, [pc, #56]	; (8007310 <FATFS_LinkDriverEx+0x94>)
 80072d6:	7251      	strb	r1, [r2, #9]
 80072d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072da:	7dbb      	ldrb	r3, [r7, #22]
 80072dc:	3330      	adds	r3, #48	; 0x30
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3301      	adds	r3, #1
 80072e8:	223a      	movs	r2, #58	; 0x3a
 80072ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3302      	adds	r3, #2
 80072f0:	222f      	movs	r2, #47	; 0x2f
 80072f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3303      	adds	r3, #3
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
}
 8007302:	4618      	mov	r0, r3
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20005428 	.word	0x20005428

08007314 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800731e:	2200      	movs	r2, #0
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ffaa 	bl	800727c <FATFS_LinkDriverEx>
 8007328:	4603      	mov	r3, r0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	6039      	str	r1, [r7, #0]
 800733e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	2b7f      	cmp	r3, #127	; 0x7f
 8007344:	d802      	bhi.n	800734c <ff_convert+0x18>
		c = chr;
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	81fb      	strh	r3, [r7, #14]
 800734a:	e025      	b.n	8007398 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2bff      	cmp	r3, #255	; 0xff
 8007356:	d805      	bhi.n	8007364 <ff_convert+0x30>
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	3b80      	subs	r3, #128	; 0x80
 800735c:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <ff_convert+0x74>)
 800735e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007362:	e000      	b.n	8007366 <ff_convert+0x32>
 8007364:	2300      	movs	r3, #0
 8007366:	81fb      	strh	r3, [r7, #14]
 8007368:	e016      	b.n	8007398 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800736a:	2300      	movs	r3, #0
 800736c:	81fb      	strh	r3, [r7, #14]
 800736e:	e009      	b.n	8007384 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007370:	89fb      	ldrh	r3, [r7, #14]
 8007372:	4a0d      	ldr	r2, [pc, #52]	; (80073a8 <ff_convert+0x74>)
 8007374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	429a      	cmp	r2, r3
 800737c:	d006      	beq.n	800738c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	3301      	adds	r3, #1
 8007382:	81fb      	strh	r3, [r7, #14]
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	2b7f      	cmp	r3, #127	; 0x7f
 8007388:	d9f2      	bls.n	8007370 <ff_convert+0x3c>
 800738a:	e000      	b.n	800738e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800738c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800738e:	89fb      	ldrh	r3, [r7, #14]
 8007390:	3380      	adds	r3, #128	; 0x80
 8007392:	b29b      	uxth	r3, r3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007398:	89fb      	ldrh	r3, [r7, #14]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	08013b28 	.word	0x08013b28

080073ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073bc:	d201      	bcs.n	80073c2 <ff_wtoupper+0x16>
 80073be:	4b3e      	ldr	r3, [pc, #248]	; (80074b8 <ff_wtoupper+0x10c>)
 80073c0:	e000      	b.n	80073c4 <ff_wtoupper+0x18>
 80073c2:	4b3e      	ldr	r3, [pc, #248]	; (80074bc <ff_wtoupper+0x110>)
 80073c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	617a      	str	r2, [r7, #20]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80073d0:	8a7b      	ldrh	r3, [r7, #18]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d068      	beq.n	80074a8 <ff_wtoupper+0xfc>
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	8a7b      	ldrh	r3, [r7, #18]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d364      	bcc.n	80074a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1c9a      	adds	r2, r3, #2
 80073e2:	617a      	str	r2, [r7, #20]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	823b      	strh	r3, [r7, #16]
 80073e8:	8a3b      	ldrh	r3, [r7, #16]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	81fb      	strh	r3, [r7, #14]
 80073ee:	8a3b      	ldrh	r3, [r7, #16]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	8a79      	ldrh	r1, [r7, #18]
 80073f8:	8a3b      	ldrh	r3, [r7, #16]
 80073fa:	440b      	add	r3, r1
 80073fc:	429a      	cmp	r2, r3
 80073fe:	da49      	bge.n	8007494 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007400:	89fb      	ldrh	r3, [r7, #14]
 8007402:	2b08      	cmp	r3, #8
 8007404:	d84f      	bhi.n	80074a6 <ff_wtoupper+0xfa>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <ff_wtoupper+0x60>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007431 	.word	0x08007431
 8007410:	08007443 	.word	0x08007443
 8007414:	08007459 	.word	0x08007459
 8007418:	08007461 	.word	0x08007461
 800741c:	08007469 	.word	0x08007469
 8007420:	08007471 	.word	0x08007471
 8007424:	08007479 	.word	0x08007479
 8007428:	08007481 	.word	0x08007481
 800742c:	08007489 	.word	0x08007489
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007430:	88fa      	ldrh	r2, [r7, #6]
 8007432:	8a7b      	ldrh	r3, [r7, #18]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	80fb      	strh	r3, [r7, #6]
 8007440:	e027      	b.n	8007492 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	8a7b      	ldrh	r3, [r7, #18]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	80fb      	strh	r3, [r7, #6]
 8007456:	e01c      	b.n	8007492 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	3b10      	subs	r3, #16
 800745c:	80fb      	strh	r3, [r7, #6]
 800745e:	e018      	b.n	8007492 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	3b20      	subs	r3, #32
 8007464:	80fb      	strh	r3, [r7, #6]
 8007466:	e014      	b.n	8007492 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	3b30      	subs	r3, #48	; 0x30
 800746c:	80fb      	strh	r3, [r7, #6]
 800746e:	e010      	b.n	8007492 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	3b1a      	subs	r3, #26
 8007474:	80fb      	strh	r3, [r7, #6]
 8007476:	e00c      	b.n	8007492 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	3308      	adds	r3, #8
 800747c:	80fb      	strh	r3, [r7, #6]
 800747e:	e008      	b.n	8007492 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	3b50      	subs	r3, #80	; 0x50
 8007484:	80fb      	strh	r3, [r7, #6]
 8007486:	e004      	b.n	8007492 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800748e:	80fb      	strh	r3, [r7, #6]
 8007490:	bf00      	nop
			}
			break;
 8007492:	e008      	b.n	80074a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d195      	bne.n	80073c6 <ff_wtoupper+0x1a>
 800749a:	8a3b      	ldrh	r3, [r7, #16]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80074a4:	e78f      	b.n	80073c6 <ff_wtoupper+0x1a>
			break;
 80074a6:	bf00      	nop
	}

	return chr;
 80074a8:	88fb      	ldrh	r3, [r7, #6]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	08013c28 	.word	0x08013c28
 80074bc:	08013e1c 	.word	0x08013e1c

080074c0 <TEXT_Callback>:
 80074c0:	b530      	push	{r4, r5, lr}
 80074c2:	6845      	ldr	r5, [r0, #4]
 80074c4:	4604      	mov	r4, r0
 80074c6:	b085      	sub	sp, #20
 80074c8:	4628      	mov	r0, r5
 80074ca:	4621      	mov	r1, r4
 80074cc:	f008 f848 	bl	800f560 <WIDGET_HandleActive>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d056      	beq.n	8007582 <TEXT_Callback+0xc2>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d01e      	beq.n	8007518 <TEXT_Callback+0x58>
 80074da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80074de:	d00e      	beq.n	80074fe <TEXT_Callback+0x3e>
 80074e0:	2b0b      	cmp	r3, #11
 80074e2:	d14b      	bne.n	800757c <TEXT_Callback+0xbc>
 80074e4:	4628      	mov	r0, r5
 80074e6:	f007 fd79 	bl	800efdc <GUI_ALLOC_LockH>
 80074ea:	ad04      	add	r5, sp, #16
 80074ec:	f845 0d08 	str.w	r0, [r5, #-8]!
 80074f0:	3044      	adds	r0, #68	; 0x44
 80074f2:	f007 ff43 	bl	800f37c <GUI_ALLOC_FreePtr>
 80074f6:	4628      	mov	r0, r5
 80074f8:	f007 fd7e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80074fc:	e03e      	b.n	800757c <TEXT_Callback+0xbc>
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	b12b      	cbz	r3, 800750e <TEXT_Callback+0x4e>
 8007502:	7a1b      	ldrb	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	bf0c      	ite	eq
 8007508:	2102      	moveq	r1, #2
 800750a:	2101      	movne	r1, #1
 800750c:	e000      	b.n	8007510 <TEXT_Callback+0x50>
 800750e:	2103      	movs	r1, #3
 8007510:	4628      	mov	r0, r5
 8007512:	f001 f964 	bl	80087de <WM_NotifyParent>
 8007516:	e031      	b.n	800757c <TEXT_Callback+0xbc>
 8007518:	4628      	mov	r0, r5
 800751a:	f007 fd5f 	bl	800efdc <GUI_ALLOC_LockH>
 800751e:	9000      	str	r0, [sp, #0]
 8007520:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007522:	f005 fa1d 	bl	800c960 <LCD_SetColor>
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800752a:	f006 fb07 	bl	800db3c <GUI_SetFont>
 800752e:	4628      	mov	r0, r5
 8007530:	f000 fdf2 	bl	8008118 <WM_GetHasTrans>
 8007534:	b928      	cbnz	r0, 8007542 <TEXT_Callback+0x82>
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800753a:	f005 fa09 	bl	800c950 <LCD_SetBkColor>
 800753e:	f006 f95d 	bl	800d7fc <GUI_Clear>
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	b1ab      	cbz	r3, 8007574 <TEXT_Callback+0xb4>
 8007548:	2002      	movs	r0, #2
 800754a:	f006 fb2d 	bl	800dba8 <GUI_SetTextMode>
 800754e:	a802      	add	r0, sp, #8
 8007550:	f000 ff74 	bl	800843c <WM_GetClientRect>
 8007554:	9b00      	ldr	r3, [sp, #0]
 8007556:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007558:	f007 fd40 	bl	800efdc <GUI_ALLOC_LockH>
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	9001      	str	r0, [sp, #4]
 8007560:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8007564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007568:	a902      	add	r1, sp, #8
 800756a:	f005 ff5e 	bl	800d42a <GUI_DispStringInRectWrap>
 800756e:	a801      	add	r0, sp, #4
 8007570:	f007 fd42 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007574:	4668      	mov	r0, sp
 8007576:	f007 fd3f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800757a:	e002      	b.n	8007582 <TEXT_Callback+0xc2>
 800757c:	4620      	mov	r0, r4
 800757e:	f002 fb75 	bl	8009c6c <WM_DefaultProc>
 8007582:	b005      	add	sp, #20
 8007584:	bd30      	pop	{r4, r5, pc}
	...

08007588 <TEXT_CreateUser>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800758e:	9500      	str	r5, [sp, #0]
 8007590:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007592:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007594:	f045 0501 	orr.w	r5, r5, #1
 8007598:	9501      	str	r5, [sp, #4]
 800759a:	4d1a      	ldr	r5, [pc, #104]	; (8007604 <TEXT_CreateUser+0x7c>)
 800759c:	9502      	str	r5, [sp, #8]
 800759e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075a0:	3520      	adds	r5, #32
 80075a2:	9503      	str	r5, [sp, #12]
 80075a4:	f001 ff70 	bl	8009488 <WM_CreateWindowAsChild>
 80075a8:	4605      	mov	r5, r0
 80075aa:	b340      	cbz	r0, 80075fe <TEXT_CreateUser+0x76>
 80075ac:	b18c      	cbz	r4, 80075d2 <TEXT_CreateUser+0x4a>
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7f8 fe0e 	bl	80001d0 <strlen>
 80075b4:	3001      	adds	r0, #1
 80075b6:	f007 fee9 	bl	800f38c <GUI_ALLOC_AllocZero>
 80075ba:	4606      	mov	r6, r0
 80075bc:	b150      	cbz	r0, 80075d4 <TEXT_CreateUser+0x4c>
 80075be:	f007 fd0d 	bl	800efdc <GUI_ALLOC_LockH>
 80075c2:	4621      	mov	r1, r4
 80075c4:	9005      	str	r0, [sp, #20]
 80075c6:	f00a fefa 	bl	80123be <strcpy>
 80075ca:	a805      	add	r0, sp, #20
 80075cc:	f007 fd14 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80075d0:	e000      	b.n	80075d4 <TEXT_CreateUser+0x4c>
 80075d2:	4626      	mov	r6, r4
 80075d4:	4628      	mov	r0, r5
 80075d6:	f007 fd01 	bl	800efdc <GUI_ALLOC_LockH>
 80075da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075dc:	9005      	str	r0, [sp, #20]
 80075de:	2200      	movs	r2, #0
 80075e0:	f007 ff8e 	bl	800f500 <WIDGET__Init>
 80075e4:	9c05      	ldr	r4, [sp, #20]
 80075e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <TEXT_CreateUser+0x80>)
 80075ee:	6466      	str	r6, [r4, #68]	; 0x44
 80075f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075f2:	3434      	adds	r4, #52	; 0x34
 80075f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075f8:	a805      	add	r0, sp, #20
 80075fa:	f007 fcfd 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80075fe:	4628      	mov	r0, r5
 8007600:	b006      	add	sp, #24
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	080074c1 	.word	0x080074c1
 8007608:	20000024 	.word	0x20000024

0800760c <TEXT_CreateIndirect>:
 800760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760e:	b087      	sub	sp, #28
 8007610:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007614:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8007618:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800761c:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007620:	9100      	str	r1, [sp, #0]
 8007622:	2102      	movs	r1, #2
 8007624:	9101      	str	r1, [sp, #4]
 8007626:	8a41      	ldrh	r1, [r0, #18]
 8007628:	9102      	str	r1, [sp, #8]
 800762a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800762e:	9103      	str	r1, [sp, #12]
 8007630:	6844      	ldr	r4, [r0, #4]
 8007632:	9404      	str	r4, [sp, #16]
 8007634:	6984      	ldr	r4, [r0, #24]
 8007636:	9405      	str	r4, [sp, #20]
 8007638:	eb0e 0002 	add.w	r0, lr, r2
 800763c:	18f9      	adds	r1, r7, r3
 800763e:	4632      	mov	r2, r6
 8007640:	462b      	mov	r3, r5
 8007642:	f7ff ffa1 	bl	8007588 <TEXT_CreateUser>
 8007646:	b007      	add	sp, #28
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800764a <TEXT_SetText>:
 800764a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800764c:	460c      	mov	r4, r1
 800764e:	4605      	mov	r5, r0
 8007650:	b300      	cbz	r0, 8007694 <TEXT_SetText+0x4a>
 8007652:	f007 fcc3 	bl	800efdc <GUI_ALLOC_LockH>
 8007656:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007658:	9000      	str	r0, [sp, #0]
 800765a:	4668      	mov	r0, sp
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	f007 fccb 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007662:	4621      	mov	r1, r4
 8007664:	a801      	add	r0, sp, #4
 8007666:	f005 fa81 	bl	800cb6c <GUI__SetText>
 800766a:	f1d0 0401 	rsbs	r4, r0, #1
 800766e:	bf38      	it	cc
 8007670:	2400      	movcc	r4, #0
 8007672:	b984      	cbnz	r4, 8007696 <TEXT_SetText+0x4c>
 8007674:	4628      	mov	r0, r5
 8007676:	f007 fcb1 	bl	800efdc <GUI_ALLOC_LockH>
 800767a:	9a01      	ldr	r2, [sp, #4]
 800767c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800767e:	9000      	str	r0, [sp, #0]
 8007680:	4291      	cmp	r1, r2
 8007682:	bf18      	it	ne
 8007684:	6442      	strne	r2, [r0, #68]	; 0x44
 8007686:	4668      	mov	r0, sp
 8007688:	f007 fcb6 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800768c:	4628      	mov	r0, r5
 800768e:	f001 fecd 	bl	800942c <WM_InvalidateWindow>
 8007692:	e000      	b.n	8007696 <TEXT_SetText+0x4c>
 8007694:	2401      	movs	r4, #1
 8007696:	4620      	mov	r0, r4
 8007698:	b003      	add	sp, #12
 800769a:	bd30      	pop	{r4, r5, pc}

0800769c <FRAMEWIN__GetBorderSize>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	4605      	mov	r5, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	f007 fc9a 	bl	800efdc <GUI_ALLOC_LockH>
 80076a8:	ab0a      	add	r3, sp, #40	; 0x28
 80076aa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80076ac:	f843 0d28 	str.w	r0, [r3, #-40]!
 80076b0:	4668      	mov	r0, sp
 80076b2:	6896      	ldr	r6, [r2, #8]
 80076b4:	f007 fca0 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80076b8:	9501      	str	r5, [sp, #4]
 80076ba:	2c03      	cmp	r4, #3
 80076bc:	d80b      	bhi.n	80076d6 <FRAMEWIN__GetBorderSize+0x3a>
 80076be:	e8df f004 	tbb	[pc, r4]
 80076c2:	0402      	.short	0x0402
 80076c4:	0806      	.short	0x0806
 80076c6:	2318      	movs	r3, #24
 80076c8:	e004      	b.n	80076d4 <FRAMEWIN__GetBorderSize+0x38>
 80076ca:	2316      	movs	r3, #22
 80076cc:	e002      	b.n	80076d4 <FRAMEWIN__GetBorderSize+0x38>
 80076ce:	2315      	movs	r3, #21
 80076d0:	e000      	b.n	80076d4 <FRAMEWIN__GetBorderSize+0x38>
 80076d2:	2317      	movs	r3, #23
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	6873      	ldr	r3, [r6, #4]
 80076d8:	a801      	add	r0, sp, #4
 80076da:	4798      	blx	r3
 80076dc:	b00a      	add	sp, #40	; 0x28
 80076de:	bd70      	pop	{r4, r5, r6, pc}

080076e0 <_SetActive>:
 80076e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e2:	4604      	mov	r4, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	f007 fc79 	bl	800efdc <GUI_ALLOC_LockH>
 80076ea:	9001      	str	r0, [sp, #4]
 80076ec:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80076f0:	b125      	cbz	r5, 80076fc <_SetActive+0x1c>
 80076f2:	0711      	lsls	r1, r2, #28
 80076f4:	d40b      	bmi.n	800770e <_SetActive+0x2e>
 80076f6:	f042 0208 	orr.w	r2, r2, #8
 80076fa:	e003      	b.n	8007704 <_SetActive+0x24>
 80076fc:	0713      	lsls	r3, r2, #28
 80076fe:	d506      	bpl.n	800770e <_SetActive+0x2e>
 8007700:	f022 0208 	bic.w	r2, r2, #8
 8007704:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fe8f 	bl	800942c <WM_InvalidateWindow>
 800770e:	a801      	add	r0, sp, #4
 8007710:	f007 fc72 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007714:	b003      	add	sp, #12
 8007716:	bd30      	pop	{r4, r5, pc}

08007718 <FRAMEWIN__cbClient>:
 8007718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800771c:	6845      	ldr	r5, [r0, #4]
 800771e:	b087      	sub	sp, #28
 8007720:	4604      	mov	r4, r0
 8007722:	4628      	mov	r0, r5
 8007724:	f000 ff27 	bl	8008576 <WM_GetParent>
 8007728:	4681      	mov	r9, r0
 800772a:	f007 fc57 	bl	800efdc <GUI_ALLOC_LockH>
 800772e:	4603      	mov	r3, r0
 8007730:	a806      	add	r0, sp, #24
 8007732:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8007734:	f840 3d14 	str.w	r3, [r0, #-20]!
 8007738:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800773a:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 800773e:	f007 fc5b 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	2b17      	cmp	r3, #23
 8007746:	d053      	beq.n	80077f0 <FRAMEWIN__cbClient+0xd8>
 8007748:	dc09      	bgt.n	800775e <FRAMEWIN__cbClient+0x46>
 800774a:	2b0f      	cmp	r3, #15
 800774c:	d014      	beq.n	8007778 <FRAMEWIN__cbClient+0x60>
 800774e:	dc02      	bgt.n	8007756 <FRAMEWIN__cbClient+0x3e>
 8007750:	2b0e      	cmp	r3, #14
 8007752:	d034      	beq.n	80077be <FRAMEWIN__cbClient+0xa6>
 8007754:	e046      	b.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 8007756:	3b14      	subs	r3, #20
 8007758:	2b01      	cmp	r3, #1
 800775a:	d949      	bls.n	80077f0 <FRAMEWIN__cbClient+0xd8>
 800775c:	e042      	b.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 800775e:	2b1f      	cmp	r3, #31
 8007760:	d028      	beq.n	80077b4 <FRAMEWIN__cbClient+0x9c>
 8007762:	dc02      	bgt.n	800776a <FRAMEWIN__cbClient+0x52>
 8007764:	2b1e      	cmp	r3, #30
 8007766:	d01a      	beq.n	800779e <FRAMEWIN__cbClient+0x86>
 8007768:	e03c      	b.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 800776a:	2b22      	cmp	r3, #34	; 0x22
 800776c:	d038      	beq.n	80077e0 <FRAMEWIN__cbClient+0xc8>
 800776e:	2b31      	cmp	r3, #49	; 0x31
 8007770:	d138      	bne.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 8007772:	2300      	movs	r3, #0
 8007774:	60e3      	str	r3, [r4, #12]
 8007776:	e03e      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 8007778:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800777c:	429e      	cmp	r6, r3
 800777e:	d004      	beq.n	800778a <FRAMEWIN__cbClient+0x72>
 8007780:	4630      	mov	r0, r6
 8007782:	f005 f8e5 	bl	800c950 <LCD_SetBkColor>
 8007786:	f006 f839 	bl	800d7fc <GUI_Clear>
 800778a:	2f00      	cmp	r7, #0
 800778c:	d033      	beq.n	80077f6 <FRAMEWIN__cbClient+0xde>
 800778e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007792:	ae02      	add	r6, sp, #8
 8007794:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007798:	9503      	str	r5, [sp, #12]
 800779a:	4630      	mov	r0, r6
 800779c:	e026      	b.n	80077ec <FRAMEWIN__cbClient+0xd4>
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	b34b      	cbz	r3, 80077f6 <FRAMEWIN__cbClient+0xde>
 80077a2:	f1b8 0f00 	cmp.w	r8, #0
 80077a6:	d017      	beq.n	80077d8 <FRAMEWIN__cbClient+0xc0>
 80077a8:	45a8      	cmp	r8, r5
 80077aa:	d015      	beq.n	80077d8 <FRAMEWIN__cbClient+0xc0>
 80077ac:	4640      	mov	r0, r8
 80077ae:	f001 f821 	bl	80087f4 <WM_SetFocus>
 80077b2:	e020      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077b4:	4648      	mov	r0, r9
 80077b6:	4621      	mov	r1, r4
 80077b8:	f007 fed2 	bl	800f560 <WIDGET_HandleActive>
 80077bc:	e01b      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	dd0e      	ble.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d005      	beq.n	80077d8 <FRAMEWIN__cbClient+0xc0>
 80077cc:	2b0a      	cmp	r3, #10
 80077ce:	d109      	bne.n	80077e4 <FRAMEWIN__cbClient+0xcc>
 80077d0:	4628      	mov	r0, r5
 80077d2:	f000 fcb9 	bl	8008148 <WM_SetFocusOnPrevChild>
 80077d6:	e00e      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fce5 	bl	80081a8 <WM_SetFocusOnNextChild>
 80077de:	e00a      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077e0:	60e6      	str	r6, [r4, #12]
 80077e2:	e008      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077e4:	b127      	cbz	r7, 80077f0 <FRAMEWIN__cbClient+0xd8>
 80077e6:	f8c4 9004 	str.w	r9, [r4, #4]
 80077ea:	4620      	mov	r0, r4
 80077ec:	47b8      	blx	r7
 80077ee:	e002      	b.n	80077f6 <FRAMEWIN__cbClient+0xde>
 80077f0:	4620      	mov	r0, r4
 80077f2:	f002 fa3b 	bl	8009c6c <WM_DefaultProc>
 80077f6:	b007      	add	sp, #28
 80077f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080077fc <FRAMEWIN__CalcTitleHeight>:
 80077fc:	b508      	push	{r3, lr}
 80077fe:	4603      	mov	r3, r0
 8007800:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8007802:	f000 0020 	and.w	r0, r0, #32
 8007806:	b280      	uxth	r0, r0
 8007808:	b130      	cbz	r0, 8007818 <FRAMEWIN__CalcTitleHeight+0x1c>
 800780a:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 800780e:	b918      	cbnz	r0, 8007818 <FRAMEWIN__CalcTitleHeight+0x1c>
 8007810:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007812:	f006 f8d7 	bl	800d9c4 <GUI_GetYSizeOfFont>
 8007816:	3002      	adds	r0, #2
 8007818:	bd08      	pop	{r3, pc}

0800781a <FRAMEWIN__GetTitleLimits>:
 800781a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800781e:	4607      	mov	r7, r0
 8007820:	460d      	mov	r5, r1
 8007822:	4616      	mov	r6, r2
 8007824:	f007 fbda 	bl	800efdc <GUI_ALLOC_LockH>
 8007828:	4603      	mov	r3, r0
 800782a:	a802      	add	r0, sp, #8
 800782c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800782e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007832:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8007836:	f8b3 8000 	ldrh.w	r8, [r3]
 800783a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800783e:	4668      	mov	r0, sp
 8007840:	f007 fbda 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007844:	f8da 3000 	ldr.w	r3, [sl]
 8007848:	4638      	mov	r0, r7
 800784a:	2100      	movs	r1, #0
 800784c:	4798      	blx	r3
 800784e:	4682      	mov	sl, r0
 8007850:	4638      	mov	r0, r7
 8007852:	f000 fe1b 	bl	800848c <WM_GetFirstChild>
 8007856:	4604      	mov	r4, r0
 8007858:	b340      	cbz	r0, 80078ac <FRAMEWIN__GetTitleLimits+0x92>
 800785a:	4620      	mov	r0, r4
 800785c:	f007 fbbe 	bl	800efdc <GUI_ALLOC_LockH>
 8007860:	4603      	mov	r3, r0
 8007862:	fa0f f289 	sxth.w	r2, r9
 8007866:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	1aba      	subs	r2, r7, r2
 800786e:	4552      	cmp	r2, sl
 8007870:	8800      	ldrh	r0, [r0, #0]
 8007872:	8899      	ldrh	r1, [r3, #4]
 8007874:	d113      	bne.n	800789e <FRAMEWIN__GetTitleLimits+0x84>
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	061b      	lsls	r3, r3, #24
 800787a:	fa0f f288 	sxth.w	r2, r8
 800787e:	d507      	bpl.n	8007890 <FRAMEWIN__GetTitleLimits+0x76>
 8007880:	b203      	sxth	r3, r0
 8007882:	1a9a      	subs	r2, r3, r2
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	dc09      	bgt.n	800789e <FRAMEWIN__GetTitleLimits+0x84>
 800788a:	3a01      	subs	r2, #1
 800788c:	6032      	str	r2, [r6, #0]
 800788e:	e006      	b.n	800789e <FRAMEWIN__GetTitleLimits+0x84>
 8007890:	b20b      	sxth	r3, r1
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	682a      	ldr	r2, [r5, #0]
 8007896:	4293      	cmp	r3, r2
 8007898:	bfa4      	itt	ge
 800789a:	3301      	addge	r3, #1
 800789c:	602b      	strge	r3, [r5, #0]
 800789e:	a801      	add	r0, sp, #4
 80078a0:	f007 fbaa 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fe56 	bl	8008556 <WM_GetNextSibling>
 80078aa:	e7d4      	b.n	8007856 <FRAMEWIN__GetTitleLimits+0x3c>
 80078ac:	b002      	add	sp, #8
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080078b2 <FRAMEWIN__CalcPositions>:
 80078b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b6:	b087      	sub	sp, #28
 80078b8:	4604      	mov	r4, r0
 80078ba:	460f      	mov	r7, r1
 80078bc:	f007 fb8e 	bl	800efdc <GUI_ALLOC_LockH>
 80078c0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80078c2:	9003      	str	r0, [sp, #12]
 80078c4:	6895      	ldr	r5, [r2, #8]
 80078c6:	2101      	movs	r1, #1
 80078c8:	682a      	ldr	r2, [r5, #0]
 80078ca:	4620      	mov	r0, r4
 80078cc:	4790      	blx	r2
 80078ce:	682a      	ldr	r2, [r5, #0]
 80078d0:	2103      	movs	r1, #3
 80078d2:	4683      	mov	fp, r0
 80078d4:	4620      	mov	r0, r4
 80078d6:	4790      	blx	r2
 80078d8:	682a      	ldr	r2, [r5, #0]
 80078da:	2102      	movs	r1, #2
 80078dc:	4681      	mov	r9, r0
 80078de:	4620      	mov	r0, r4
 80078e0:	4790      	blx	r2
 80078e2:	682a      	ldr	r2, [r5, #0]
 80078e4:	9001      	str	r0, [sp, #4]
 80078e6:	2100      	movs	r1, #0
 80078e8:	4620      	mov	r0, r4
 80078ea:	4790      	blx	r2
 80078ec:	4605      	mov	r5, r0
 80078ee:	9803      	ldr	r0, [sp, #12]
 80078f0:	f001 f83e 	bl	8008970 <WM__GetWindowSizeX>
 80078f4:	4682      	mov	sl, r0
 80078f6:	9803      	ldr	r0, [sp, #12]
 80078f8:	f001 f841 	bl	800897e <WM__GetWindowSizeY>
 80078fc:	4680      	mov	r8, r0
 80078fe:	9803      	ldr	r0, [sp, #12]
 8007900:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8007902:	f006 0620 	and.w	r6, r6, #32
 8007906:	b2b6      	uxth	r6, r6
 8007908:	b10e      	cbz	r6, 800790e <FRAMEWIN__CalcPositions+0x5c>
 800790a:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 800790e:	f7ff ff75 	bl	80077fc <FRAMEWIN__CalcTitleHeight>
 8007912:	9903      	ldr	r1, [sp, #12]
 8007914:	4602      	mov	r2, r0
 8007916:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 8007918:	b118      	cbz	r0, 8007922 <FRAMEWIN__CalcPositions+0x70>
 800791a:	9200      	str	r2, [sp, #0]
 800791c:	f001 f84b 	bl	80089b6 <WM_GetWindowSizeY>
 8007920:	9a00      	ldr	r2, [sp, #0]
 8007922:	803a      	strh	r2, [r7, #0]
 8007924:	b292      	uxth	r2, r2
 8007926:	b2a9      	uxth	r1, r5
 8007928:	4416      	add	r6, r2
 800792a:	440e      	add	r6, r1
 800792c:	8078      	strh	r0, [r7, #2]
 800792e:	4430      	add	r0, r6
 8007930:	80f8      	strh	r0, [r7, #6]
 8007932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007936:	9801      	ldr	r0, [sp, #4]
 8007938:	81fd      	strh	r5, [r7, #14]
 800793a:	3901      	subs	r1, #1
 800793c:	ebc9 090a 	rsb	r9, r9, sl
 8007940:	f108 38ff 	add.w	r8, r8, #4294967295
 8007944:	ebc0 0308 	rsb	r3, r0, r8
 8007948:	440a      	add	r2, r1
 800794a:	fa1f fb8b 	uxth.w	fp, fp
 800794e:	fa1f f989 	uxth.w	r9, r9
 8007952:	817b      	strh	r3, [r7, #10]
 8007954:	827a      	strh	r2, [r7, #18]
 8007956:	f8a7 b004 	strh.w	fp, [r7, #4]
 800795a:	f8a7 9008 	strh.w	r9, [r7, #8]
 800795e:	f8a7 b00c 	strh.w	fp, [r7, #12]
 8007962:	f8a7 9010 	strh.w	r9, [r7, #16]
 8007966:	a803      	add	r0, sp, #12
 8007968:	f007 fb46 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800796c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007970:	9204      	str	r2, [sp, #16]
 8007972:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007976:	9205      	str	r2, [sp, #20]
 8007978:	4620      	mov	r0, r4
 800797a:	aa05      	add	r2, sp, #20
 800797c:	a904      	add	r1, sp, #16
 800797e:	f7ff ff4c 	bl	800781a <FRAMEWIN__GetTitleLimits>
 8007982:	9a04      	ldr	r2, [sp, #16]
 8007984:	81ba      	strh	r2, [r7, #12]
 8007986:	9a05      	ldr	r2, [sp, #20]
 8007988:	823a      	strh	r2, [r7, #16]
 800798a:	b007      	add	sp, #28
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007990 <FRAMEWIN_SetText>:
 8007990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007992:	460d      	mov	r5, r1
 8007994:	4604      	mov	r4, r0
 8007996:	b1c0      	cbz	r0, 80079ca <FRAMEWIN_SetText+0x3a>
 8007998:	f007 fb20 	bl	800efdc <GUI_ALLOC_LockH>
 800799c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800799e:	9000      	str	r0, [sp, #0]
 80079a0:	4668      	mov	r0, sp
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	f007 fb28 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80079a8:	a801      	add	r0, sp, #4
 80079aa:	4629      	mov	r1, r5
 80079ac:	f005 f8de 	bl	800cb6c <GUI__SetText>
 80079b0:	b158      	cbz	r0, 80079ca <FRAMEWIN_SetText+0x3a>
 80079b2:	4620      	mov	r0, r4
 80079b4:	f007 fb12 	bl	800efdc <GUI_ALLOC_LockH>
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	9000      	str	r0, [sp, #0]
 80079bc:	6703      	str	r3, [r0, #112]	; 0x70
 80079be:	4668      	mov	r0, sp
 80079c0:	f007 fb1a 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80079c4:	4620      	mov	r0, r4
 80079c6:	f001 fd31 	bl	800942c <WM_InvalidateWindow>
 80079ca:	b003      	add	sp, #12
 80079cc:	bd30      	pop	{r4, r5, pc}
	...

080079d0 <FRAMEWIN_CreateUser>:
 80079d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d4:	b08b      	sub	sp, #44	; 0x2c
 80079d6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80079da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80079dc:	9400      	str	r4, [sp, #0]
 80079de:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 80079e2:	9401      	str	r4, [sp, #4]
 80079e4:	4c33      	ldr	r4, [pc, #204]	; (8007ab4 <FRAMEWIN_CreateUser+0xe4>)
 80079e6:	9402      	str	r4, [sp, #8]
 80079e8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80079ea:	3460      	adds	r4, #96	; 0x60
 80079ec:	9403      	str	r4, [sp, #12]
 80079ee:	f001 fd4b 	bl	8009488 <WM_CreateWindowAsChild>
 80079f2:	4606      	mov	r6, r0
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d058      	beq.n	8007aaa <FRAMEWIN_CreateUser+0xda>
 80079f8:	f007 faf0 	bl	800efdc <GUI_ALLOC_LockH>
 80079fc:	4d2e      	ldr	r5, [pc, #184]	; (8007ab8 <FRAMEWIN_CreateUser+0xe8>)
 80079fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	2230      	movs	r2, #48	; 0x30
 8007a04:	f007 fd7c 	bl	800f500 <WIDGET__Init>
 8007a08:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a0e:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 8007a12:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007a20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a22:	4d26      	ldr	r5, [pc, #152]	; (8007abc <FRAMEWIN_CreateUser+0xec>)
 8007a24:	e884 0003 	stmia.w	r4, {r0, r1}
 8007a28:	667b      	str	r3, [r7, #100]	; 0x64
 8007a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a2c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8007a30:	2400      	movs	r4, #0
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a36:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8007a3a:	66fc      	str	r4, [r7, #108]	; 0x6c
 8007a3c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8007a40:	4640      	mov	r0, r8
 8007a42:	f007 fad9 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007a46:	4630      	mov	r0, r6
 8007a48:	a905      	add	r1, sp, #20
 8007a4a:	f7ff ff32 	bl	80078b2 <FRAMEWIN__CalcPositions>
 8007a4e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8007a52:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8007a56:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8007a5a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007a5e:	9403      	str	r4, [sp, #12]
 8007a60:	f241 7782 	movw	r7, #6018	; 0x1782
 8007a64:	1a5b      	subs	r3, r3, r1
 8007a66:	1a12      	subs	r2, r2, r0
 8007a68:	9701      	str	r7, [sp, #4]
 8007a6a:	4f15      	ldr	r7, [pc, #84]	; (8007ac0 <FRAMEWIN_CreateUser+0xf0>)
 8007a6c:	9600      	str	r6, [sp, #0]
 8007a6e:	3201      	adds	r2, #1
 8007a70:	3301      	adds	r3, #1
 8007a72:	9702      	str	r7, [sp, #8]
 8007a74:	f001 fd08 	bl	8009488 <WM_CreateWindowAsChild>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4798      	blx	r3
 8007a82:	4630      	mov	r0, r6
 8007a84:	f007 faaa 	bl	800efdc <GUI_ALLOC_LockH>
 8007a88:	9004      	str	r0, [sp, #16]
 8007a8a:	6684      	str	r4, [r0, #104]	; 0x68
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	f007 fab3 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007a92:	f242 0304 	movw	r3, #8196	; 0x2004
 8007a96:	ea09 0303 	and.w	r3, r9, r3
 8007a9a:	b913      	cbnz	r3, 8007aa2 <FRAMEWIN_CreateUser+0xd2>
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fcbf 	bl	8008420 <WM_DisableMemdev>
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007aa6:	f7ff ff73 	bl	8007990 <FRAMEWIN_SetText>
 8007aaa:	4630      	mov	r0, r6
 8007aac:	b00b      	add	sp, #44	; 0x2c
 8007aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ab2:	bf00      	nop
 8007ab4:	08007b0f 	.word	0x08007b0f
 8007ab8:	20000034 	.word	0x20000034
 8007abc:	2000005c 	.word	0x2000005c
 8007ac0:	08007719 	.word	0x08007719

08007ac4 <FRAMEWIN_CreateIndirect>:
 8007ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac6:	b089      	sub	sp, #36	; 0x24
 8007ac8:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007acc:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8007ad0:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8007ad4:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007ad8:	9100      	str	r1, [sp, #0]
 8007ada:	2100      	movs	r1, #0
 8007adc:	9101      	str	r1, [sp, #4]
 8007ade:	8a41      	ldrh	r1, [r0, #18]
 8007ae0:	9102      	str	r1, [sp, #8]
 8007ae2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	6844      	ldr	r4, [r0, #4]
 8007aea:	9404      	str	r4, [sp, #16]
 8007aec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007aee:	9405      	str	r4, [sp, #20]
 8007af0:	6984      	ldr	r4, [r0, #24]
 8007af2:	9406      	str	r4, [sp, #24]
 8007af4:	eb0e 0002 	add.w	r0, lr, r2
 8007af8:	18f9      	adds	r1, r7, r3
 8007afa:	4632      	mov	r2, r6
 8007afc:	462b      	mov	r3, r5
 8007afe:	f7ff ff67 	bl	80079d0 <FRAMEWIN_CreateUser>
 8007b02:	b009      	add	sp, #36	; 0x24
 8007b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b06 <FRAMEWIN_SetActive>:
 8007b06:	b108      	cbz	r0, 8007b0c <FRAMEWIN_SetActive+0x6>
 8007b08:	f7ff bdea 	b.w	80076e0 <_SetActive>
 8007b0c:	4770      	bx	lr

08007b0e <FRAMEWIN_Callback>:
 8007b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b12:	6844      	ldr	r4, [r0, #4]
 8007b14:	b086      	sub	sp, #24
 8007b16:	4605      	mov	r5, r0
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f007 fa5f 	bl	800efdc <GUI_ALLOC_LockH>
 8007b1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007b20:	9000      	str	r0, [sp, #0]
 8007b22:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 8007b26:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8007b2a:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8007b2e:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 8007b32:	b113      	cbz	r3, 8007b3a <FRAMEWIN_Callback+0x2c>
 8007b34:	f8d3 a000 	ldr.w	sl, [r3]
 8007b38:	e000      	b.n	8007b3c <FRAMEWIN_Callback+0x2e>
 8007b3a:	469a      	mov	sl, r3
 8007b3c:	4668      	mov	r0, sp
 8007b3e:	f007 fa5b 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007b42:	b13f      	cbz	r7, 8007b54 <FRAMEWIN_Callback+0x46>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4628      	mov	r0, r5
 8007b48:	4798      	blx	r3
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f040 811d 	bne.w	8007d8a <FRAMEWIN_Callback+0x27c>
 8007b50:	683f      	ldr	r7, [r7, #0]
 8007b52:	e7f6      	b.n	8007b42 <FRAMEWIN_Callback+0x34>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	2b17      	cmp	r3, #23
 8007b58:	f000 808a 	beq.w	8007c70 <FRAMEWIN_Callback+0x162>
 8007b5c:	dc18      	bgt.n	8007b90 <FRAMEWIN_Callback+0x82>
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d043      	beq.n	8007bea <FRAMEWIN_Callback+0xdc>
 8007b62:	dc06      	bgt.n	8007b72 <FRAMEWIN_Callback+0x64>
 8007b64:	2b0b      	cmp	r3, #11
 8007b66:	f000 80fe 	beq.w	8007d66 <FRAMEWIN_Callback+0x258>
 8007b6a:	2b0d      	cmp	r3, #13
 8007b6c:	f000 80c0 	beq.w	8007cf0 <FRAMEWIN_Callback+0x1e2>
 8007b70:	e103      	b.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007b72:	2b11      	cmp	r3, #17
 8007b74:	d01b      	beq.n	8007bae <FRAMEWIN_Callback+0xa0>
 8007b76:	2b14      	cmp	r3, #20
 8007b78:	f040 80ff 	bne.w	8007d7a <FRAMEWIN_Callback+0x26c>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	a901      	add	r1, sp, #4
 8007b80:	f7ff fe97 	bl	80078b2 <FRAMEWIN__CalcPositions>
 8007b84:	ab02      	add	r3, sp, #8
 8007b86:	cb03      	ldmia	r3!, {r0, r1}
 8007b88:	68ea      	ldr	r2, [r5, #12]
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	6051      	str	r1, [r2, #4]
 8007b8e:	e0fc      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007b90:	2b26      	cmp	r3, #38	; 0x26
 8007b92:	d070      	beq.n	8007c76 <FRAMEWIN_Callback+0x168>
 8007b94:	dc05      	bgt.n	8007ba2 <FRAMEWIN_Callback+0x94>
 8007b96:	2b1e      	cmp	r3, #30
 8007b98:	d07b      	beq.n	8007c92 <FRAMEWIN_Callback+0x184>
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	f000 80b6 	beq.w	8007d0c <FRAMEWIN_Callback+0x1fe>
 8007ba0:	e0eb      	b.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba4:	d013      	beq.n	8007bce <FRAMEWIN_Callback+0xc0>
 8007ba6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007baa:	d025      	beq.n	8007bf8 <FRAMEWIN_Callback+0xea>
 8007bac:	e0e5      	b.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007bae:	4620      	mov	r0, r4
 8007bb0:	68ee      	ldr	r6, [r5, #12]
 8007bb2:	f007 fa13 	bl	800efdc <GUI_ALLOC_LockH>
 8007bb6:	9001      	str	r0, [sp, #4]
 8007bb8:	8933      	ldrh	r3, [r6, #8]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <FRAMEWIN_Callback+0xbc>
 8007bbe:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007bca:	a801      	add	r0, sp, #4
 8007bcc:	e0d3      	b.n	8007d76 <FRAMEWIN_Callback+0x268>
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f007 fa04 	bl	800efdc <GUI_ALLOC_LockH>
 8007bd4:	68eb      	ldr	r3, [r5, #12]
 8007bd6:	9000      	str	r0, [sp, #0]
 8007bd8:	b113      	cbz	r3, 8007be0 <FRAMEWIN_Callback+0xd2>
 8007bda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8007bde:	e002      	b.n	8007be6 <FRAMEWIN_Callback+0xd8>
 8007be0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007be4:	60eb      	str	r3, [r5, #12]
 8007be6:	4668      	mov	r0, sp
 8007be8:	e03f      	b.n	8007c6a <FRAMEWIN_Callback+0x15c>
 8007bea:	f1ba 0f00 	cmp.w	sl, #0
 8007bee:	f000 80c4 	beq.w	8007d7a <FRAMEWIN_Callback+0x26c>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	47d0      	blx	sl
 8007bf6:	e0c0      	b.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007bfe:	f007 f9ed 	bl	800efdc <GUI_ALLOC_LockH>
 8007c02:	ae06      	add	r6, sp, #24
 8007c04:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 8007c08:	f846 0d14 	str.w	r0, [r6, #-20]!
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f007 f9f3 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007c12:	68eb      	ldr	r3, [r5, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b8 	beq.w	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c1a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007c1e:	b1cb      	cbz	r3, 8007c54 <FRAMEWIN_Callback+0x146>
 8007c20:	073b      	lsls	r3, r7, #28
 8007c22:	d402      	bmi.n	8007c2a <FRAMEWIN_Callback+0x11c>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fde5 	bl	80087f4 <WM_SetFocus>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 feda 	bl	80089e4 <WM_BringToTop>
 8007c30:	f407 7388 	and.w	r3, r7, #272	; 0x110
 8007c34:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007c38:	f040 80a7 	bne.w	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c3c:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007c40:	b2bb      	uxth	r3, r7
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 80a1 	bne.w	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	f000 fad9 	bl	8008204 <WM_SetCaptureMove>
 8007c52:	e09a      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c54:	4620      	mov	r0, r4
 8007c56:	f007 f9c1 	bl	800efdc <GUI_ALLOC_LockH>
 8007c5a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c64:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f007 f9c5 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007c6e:	e08c      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c70:	f8c5 800c 	str.w	r8, [r5, #12]
 8007c74:	e089      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c76:	68eb      	ldr	r3, [r5, #12]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	f040 8086 	bne.w	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c7e:	a906      	add	r1, sp, #24
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	2327      	movs	r3, #39	; 0x27
 8007c84:	f841 3d14 	str.w	r3, [r1, #-20]!
 8007c88:	68a8      	ldr	r0, [r5, #8]
 8007c8a:	9403      	str	r4, [sp, #12]
 8007c8c:	f000 f95e 	bl	8007f4c <WM__SendMessage>
 8007c90:	e07b      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007c92:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007c96:	f1b9 0f01 	cmp.w	r9, #1
 8007c9a:	d124      	bne.n	8007ce6 <FRAMEWIN_Callback+0x1d8>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 fcf6 	bl	800868e <WM_IsWindow>
 8007ca2:	b158      	cbz	r0, 8007cbc <FRAMEWIN_Callback+0x1ae>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 fda5 	bl	80087f4 <WM_SetFocus>
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 fcc8 	bl	8008640 <WM_HasFocus>
 8007cb0:	b188      	cbz	r0, 8007cd6 <FRAMEWIN_Callback+0x1c8>
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f007 fc3d 	bl	800f534 <WIDGET_OrState>
 8007cba:	e00c      	b.n	8007cd6 <FRAMEWIN_Callback+0x1c8>
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	f000 fa73 	bl	80081a8 <WM_SetFocusOnNextChild>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f007 f989 	bl	800efdc <GUI_ALLOC_LockH>
 8007cca:	9000      	str	r0, [sp, #0]
 8007ccc:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8007cd0:	4668      	mov	r0, sp
 8007cd2:	f007 f991 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	2101      	movs	r1, #1
 8007cda:	f7ff ff14 	bl	8007b06 <FRAMEWIN_SetActive>
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d153      	bne.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007ce2:	60ee      	str	r6, [r5, #12]
 8007ce4:	e051      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7ff ff0c 	bl	8007b06 <FRAMEWIN_SetActive>
 8007cee:	e04c      	b.n	8007d8a <FRAMEWIN_Callback+0x27c>
 8007cf0:	f019 0f08 	tst.w	r9, #8
 8007cf4:	d141      	bne.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007cf6:	68eb      	ldr	r3, [r5, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d03d      	beq.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007cfe:	7a1b      	ldrb	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d03a      	beq.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fd75 	bl	80087f4 <WM_SetFocus>
 8007d0a:	e036      	b.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007d0c:	68ee      	ldr	r6, [r5, #12]
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	d033      	beq.n	8007d7a <FRAMEWIN_Callback+0x26c>
 8007d12:	6870      	ldr	r0, [r6, #4]
 8007d14:	4621      	mov	r1, r4
 8007d16:	f000 f8ed 	bl	8007ef4 <WM__IsAncestorOrSelf>
 8007d1a:	b180      	cbz	r0, 8007d3e <FRAMEWIN_Callback+0x230>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	2101      	movs	r1, #1
 8007d20:	f7ff fcde 	bl	80076e0 <_SetActive>
 8007d24:	6870      	ldr	r0, [r6, #4]
 8007d26:	4621      	mov	r1, r4
 8007d28:	f000 f8d3 	bl	8007ed2 <WM__IsAncestor>
 8007d2c:	b328      	cbz	r0, 8007d7a <FRAMEWIN_Callback+0x26c>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f007 f954 	bl	800efdc <GUI_ALLOC_LockH>
 8007d34:	ab06      	add	r3, sp, #24
 8007d36:	6872      	ldr	r2, [r6, #4]
 8007d38:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007d3c:	e00f      	b.n	8007d5e <FRAMEWIN_Callback+0x250>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4639      	mov	r1, r7
 8007d42:	f7ff fccd 	bl	80076e0 <_SetActive>
 8007d46:	6830      	ldr	r0, [r6, #0]
 8007d48:	4621      	mov	r1, r4
 8007d4a:	f000 f8c2 	bl	8007ed2 <WM__IsAncestor>
 8007d4e:	b1a0      	cbz	r0, 8007d7a <FRAMEWIN_Callback+0x26c>
 8007d50:	4620      	mov	r0, r4
 8007d52:	f007 f943 	bl	800efdc <GUI_ALLOC_LockH>
 8007d56:	ab06      	add	r3, sp, #24
 8007d58:	6832      	ldr	r2, [r6, #0]
 8007d5a:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007d5e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8007d62:	4618      	mov	r0, r3
 8007d64:	e007      	b.n	8007d76 <FRAMEWIN_Callback+0x268>
 8007d66:	4620      	mov	r0, r4
 8007d68:	f007 f938 	bl	800efdc <GUI_ALLOC_LockH>
 8007d6c:	9000      	str	r0, [sp, #0]
 8007d6e:	3070      	adds	r0, #112	; 0x70
 8007d70:	f007 fb04 	bl	800f37c <GUI_ALLOC_FreePtr>
 8007d74:	4668      	mov	r0, sp
 8007d76:	f007 f93f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f007 fbef 	bl	800f560 <WIDGET_HandleActive>
 8007d82:	b110      	cbz	r0, 8007d8a <FRAMEWIN_Callback+0x27c>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f001 ff71 	bl	8009c6c <WM_DefaultProc>
 8007d8a:	b006      	add	sp, #24
 8007d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d90 <FRAMEWIN_GetActive>:
 8007d90:	b513      	push	{r0, r1, r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	b158      	cbz	r0, 8007dae <FRAMEWIN_GetActive+0x1e>
 8007d96:	f007 f921 	bl	800efdc <GUI_ALLOC_LockH>
 8007d9a:	ab02      	add	r3, sp, #8
 8007d9c:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8007da0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007da4:	4618      	mov	r0, r3
 8007da6:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8007daa:	f007 f925 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007dae:	4620      	mov	r0, r4
 8007db0:	b002      	add	sp, #8
 8007db2:	bd10      	pop	{r4, pc}

08007db4 <GUI_CreateDialogBox>:
 8007db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	4606      	mov	r6, r0
 8007dba:	4688      	mov	r8, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	b913      	cbnz	r3, 8007dc8 <GUI_CreateDialogBox+0x14>
 8007dc2:	f000 fb57 	bl	8008474 <WM_GetDesktopWindow>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	9400      	str	r4, [sp, #0]
 8007dca:	4630      	mov	r0, r6
 8007dcc:	6834      	ldr	r4, [r6, #0]
 8007dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	47a0      	blx	r4
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d039      	beq.n	8007e50 <GUI_CreateDialogBox+0x9c>
 8007ddc:	f000 fb3c 	bl	8008458 <WM_GetClientWindow>
 8007de0:	8a71      	ldrh	r1, [r6, #18]
 8007de2:	4607      	mov	r7, r0
 8007de4:	4620      	mov	r0, r4
 8007de6:	f007 fba5 	bl	800f534 <WIDGET_OrState>
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fd93 	bl	8008916 <WM_ShowWindow>
 8007df0:	4638      	mov	r0, r7
 8007df2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007df6:	f000 fd8e 	bl	8008916 <WM_ShowWindow>
 8007dfa:	f1b8 0f00 	cmp.w	r8, #0
 8007dfe:	dd0f      	ble.n	8007e20 <GUI_CreateDialogBox+0x6c>
 8007e00:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8007e04:	2200      	movs	r2, #0
 8007e06:	9200      	str	r2, [sp, #0]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	47e0      	blx	ip
 8007e10:	4681      	mov	r9, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1ed      	bne.n	8007df2 <GUI_CreateDialogBox+0x3e>
 8007e16:	4620      	mov	r0, r4
 8007e18:	f001 fbe0 	bl	80095dc <WM_DeleteWindow>
 8007e1c:	4648      	mov	r0, r9
 8007e1e:	e018      	b.n	8007e52 <GUI_CreateDialogBox+0x9e>
 8007e20:	4638      	mov	r0, r7
 8007e22:	211d      	movs	r1, #29
 8007e24:	f000 fccb 	bl	80087be <WM_SendMessageNoPara>
 8007e28:	1c6b      	adds	r3, r5, #1
 8007e2a:	d011      	beq.n	8007e50 <GUI_CreateDialogBox+0x9c>
 8007e2c:	f000 fb36 	bl	800849c <WM_GetFocusedWindow>
 8007e30:	b150      	cbz	r0, 8007e48 <GUI_CreateDialogBox+0x94>
 8007e32:	f007 f8c9 	bl	800efc8 <GUI_ALLOC_h2p>
 8007e36:	6980      	ldr	r0, [r0, #24]
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d00a      	beq.n	8007e52 <GUI_CreateDialogBox+0x9e>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d1f8      	bne.n	8007e32 <GUI_CreateDialogBox+0x7e>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 f9b1 	bl	80081a8 <WM_SetFocusOnNextChild>
 8007e46:	e003      	b.n	8007e50 <GUI_CreateDialogBox+0x9c>
 8007e48:	42a5      	cmp	r5, r4
 8007e4a:	d1f9      	bne.n	8007e40 <GUI_CreateDialogBox+0x8c>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	e000      	b.n	8007e52 <GUI_CreateDialogBox+0x9e>
 8007e50:	4620      	mov	r0, r4
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007e58 <WM__ForEachDesc>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	f007 f8b3 	bl	800efc8 <GUI_ALLOC_h2p>
 8007e62:	69c4      	ldr	r4, [r0, #28]
 8007e64:	b164      	cbz	r4, 8007e80 <WM__ForEachDesc+0x28>
 8007e66:	4620      	mov	r0, r4
 8007e68:	4631      	mov	r1, r6
 8007e6a:	47a8      	blx	r5
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4632      	mov	r2, r6
 8007e72:	f7ff fff1 	bl	8007e58 <WM__ForEachDesc>
 8007e76:	4620      	mov	r0, r4
 8007e78:	f007 f8a6 	bl	800efc8 <GUI_ALLOC_h2p>
 8007e7c:	6a04      	ldr	r4, [r0, #32]
 8007e7e:	e7f1      	b.n	8007e64 <WM__ForEachDesc+0xc>
 8007e80:	bd70      	pop	{r4, r5, r6, pc}

08007e82 <WM__GetFirstSibling>:
 8007e82:	b508      	push	{r3, lr}
 8007e84:	f000 fb77 	bl	8008576 <WM_GetParent>
 8007e88:	b118      	cbz	r0, 8007e92 <WM__GetFirstSibling+0x10>
 8007e8a:	f007 f89d 	bl	800efc8 <GUI_ALLOC_h2p>
 8007e8e:	69c0      	ldr	r0, [r0, #28]
 8007e90:	bd08      	pop	{r3, pc}
 8007e92:	bd08      	pop	{r3, pc}

08007e94 <WM__GetLastSibling>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	4604      	mov	r4, r0
 8007e98:	b130      	cbz	r0, 8007ea8 <WM__GetLastSibling+0x14>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f007 f894 	bl	800efc8 <GUI_ALLOC_h2p>
 8007ea0:	6a03      	ldr	r3, [r0, #32]
 8007ea2:	b10b      	cbz	r3, 8007ea8 <WM__GetLastSibling+0x14>
 8007ea4:	461c      	mov	r4, r3
 8007ea6:	e7f8      	b.n	8007e9a <WM__GetLastSibling+0x6>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	bd10      	pop	{r4, pc}

08007eac <WM__GetPrevSibling>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4605      	mov	r5, r0
 8007eb0:	f7ff ffe7 	bl	8007e82 <WM__GetFirstSibling>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	b154      	cbz	r4, 8007ece <WM__GetPrevSibling+0x22>
 8007eb8:	42ac      	cmp	r4, r5
 8007eba:	d007      	beq.n	8007ecc <WM__GetPrevSibling+0x20>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f007 f883 	bl	800efc8 <GUI_ALLOC_h2p>
 8007ec2:	6a03      	ldr	r3, [r0, #32]
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	d002      	beq.n	8007ece <WM__GetPrevSibling+0x22>
 8007ec8:	461c      	mov	r4, r3
 8007eca:	e7f4      	b.n	8007eb6 <WM__GetPrevSibling+0xa>
 8007ecc:	2400      	movs	r4, #0
 8007ece:	4620      	mov	r0, r4
 8007ed0:	bd38      	pop	{r3, r4, r5, pc}

08007ed2 <WM__IsAncestor>:
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	b908      	cbnz	r0, 8007edc <WM__IsAncestor+0xa>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d0fb      	beq.n	8007ed8 <WM__IsAncestor+0x6>
 8007ee0:	f007 f872 	bl	800efc8 <GUI_ALLOC_h2p>
 8007ee4:	6980      	ldr	r0, [r0, #24]
 8007ee6:	42a0      	cmp	r0, r4
 8007ee8:	d002      	beq.n	8007ef0 <WM__IsAncestor+0x1e>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d1f8      	bne.n	8007ee0 <WM__IsAncestor+0xe>
 8007eee:	e7f3      	b.n	8007ed8 <WM__IsAncestor+0x6>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	bd10      	pop	{r4, pc}

08007ef4 <WM__IsAncestorOrSelf>:
 8007ef4:	4288      	cmp	r0, r1
 8007ef6:	d001      	beq.n	8007efc <WM__IsAncestorOrSelf+0x8>
 8007ef8:	f7ff bfeb 	b.w	8007ed2 <WM__IsAncestor>
 8007efc:	2001      	movs	r0, #1
 8007efe:	4770      	bx	lr

08007f00 <WM__IsChild>:
 8007f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f02:	460d      	mov	r5, r1
 8007f04:	4604      	mov	r4, r0
 8007f06:	b160      	cbz	r0, 8007f22 <WM__IsChild+0x22>
 8007f08:	f007 f868 	bl	800efdc <GUI_ALLOC_LockH>
 8007f0c:	9001      	str	r0, [sp, #4]
 8007f0e:	b120      	cbz	r0, 8007f1a <WM__IsChild+0x1a>
 8007f10:	6984      	ldr	r4, [r0, #24]
 8007f12:	1b63      	subs	r3, r4, r5
 8007f14:	425c      	negs	r4, r3
 8007f16:	415c      	adcs	r4, r3
 8007f18:	e000      	b.n	8007f1c <WM__IsChild+0x1c>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	a801      	add	r0, sp, #4
 8007f1e:	f007 f86b 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8007f22:	4620      	mov	r0, r4
 8007f24:	b003      	add	sp, #12
 8007f26:	bd30      	pop	{r4, r5, pc}

08007f28 <WM__GetFocusedChild>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d06      	ldr	r5, [pc, #24]	; (8007f44 <WM__GetFocusedChild+0x1c>)
 8007f2c:	4c06      	ldr	r4, [pc, #24]	; (8007f48 <WM__GetFocusedChild+0x20>)
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	4601      	mov	r1, r0
 8007f32:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007f36:	f7ff ffe3 	bl	8007f00 <WM__IsChild>
 8007f3a:	b110      	cbz	r0, 8007f42 <WM__GetFocusedChild+0x1a>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	2000564c 	.word	0x2000564c
 8007f48:	2000563c 	.word	0x2000563c

08007f4c <WM__SendMessage>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4c0d      	ldr	r4, [pc, #52]	; (8007f84 <WM__SendMessage+0x38>)
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	2b13      	cmp	r3, #19
 8007f54:	4606      	mov	r6, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	dc12      	bgt.n	8007f80 <WM__SendMessage+0x34>
 8007f5a:	f007 f835 	bl	800efc8 <GUI_ALLOC_h2p>
 8007f5e:	6903      	ldr	r3, [r0, #16]
 8007f60:	606e      	str	r6, [r5, #4]
 8007f62:	b143      	cbz	r3, 8007f76 <WM__SendMessage+0x2a>
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	4628      	mov	r0, r5
 8007f68:	3201      	adds	r2, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	4798      	blx	r3
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
 8007f76:	4628      	mov	r0, r5
 8007f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f7c:	f001 be76 	b.w	8009c6c <WM_DefaultProc>
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	bf00      	nop
 8007f84:	20005434 	.word	0x20005434

08007f88 <WM__SendMessageNoPara>:
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	2210      	movs	r2, #16
 8007f90:	460d      	mov	r5, r1
 8007f92:	4668      	mov	r0, sp
 8007f94:	2100      	movs	r1, #0
 8007f96:	f00a f9dd 	bl	8012354 <memset>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f007 f814 	bl	800efc8 <GUI_ALLOC_h2p>
 8007fa0:	6903      	ldr	r3, [r0, #16]
 8007fa2:	b11b      	cbz	r3, 8007fac <WM__SendMessageNoPara+0x24>
 8007fa4:	9401      	str	r4, [sp, #4]
 8007fa6:	9500      	str	r5, [sp, #0]
 8007fa8:	4668      	mov	r0, sp
 8007faa:	4798      	blx	r3
 8007fac:	b005      	add	sp, #20
 8007fae:	bd30      	pop	{r4, r5, pc}

08007fb0 <WM__UpdateChildPositions>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	69c4      	ldr	r4, [r0, #28]
 8007fb8:	9303      	str	r3, [sp, #12]
 8007fba:	468a      	mov	sl, r1
 8007fbc:	4693      	mov	fp, r2
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d06d      	beq.n	800809e <WM__UpdateChildPositions+0xee>
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f007 f80a 	bl	800efdc <GUI_ALLOC_LockH>
 8007fc8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007fca:	9005      	str	r0, [sp, #20]
 8007fcc:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	f8b0 8000 	ldrh.w	r8, [r0]
 8007fd6:	8842      	ldrh	r2, [r0, #2]
 8007fd8:	8886      	ldrh	r6, [r0, #4]
 8007fda:	88c5      	ldrh	r5, [r0, #6]
 8007fdc:	d008      	beq.n	8007ff0 <WM__UpdateChildPositions+0x40>
 8007fde:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007fe2:	d108      	bne.n	8007ff6 <WM__UpdateChildPositions+0x46>
 8007fe4:	eb08 090a 	add.w	r9, r8, sl
 8007fe8:	fa1f f989 	uxth.w	r9, r9
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	e008      	b.n	8008002 <WM__UpdateChildPositions+0x52>
 8007ff0:	9803      	ldr	r0, [sp, #12]
 8007ff2:	b283      	uxth	r3, r0
 8007ff4:	e001      	b.n	8007ffa <WM__UpdateChildPositions+0x4a>
 8007ff6:	fa1f f38a 	uxth.w	r3, sl
 8007ffa:	eb03 0908 	add.w	r9, r3, r8
 8007ffe:	fa1f f989 	uxth.w	r9, r9
 8008002:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8008006:	4433      	add	r3, r6
 8008008:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800800c:	b29b      	uxth	r3, r3
 800800e:	d008      	beq.n	8008022 <WM__UpdateChildPositions+0x72>
 8008010:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8008014:	d108      	bne.n	8008028 <WM__UpdateChildPositions+0x78>
 8008016:	eb02 0c0b 	add.w	ip, r2, fp
 800801a:	fa1f fc8c 	uxth.w	ip, ip
 800801e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008020:	e008      	b.n	8008034 <WM__UpdateChildPositions+0x84>
 8008022:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008024:	b28f      	uxth	r7, r1
 8008026:	e001      	b.n	800802c <WM__UpdateChildPositions+0x7c>
 8008028:	fa1f f78b 	uxth.w	r7, fp
 800802c:	eb07 0c02 	add.w	ip, r7, r2
 8008030:	fa1f fc8c 	uxth.w	ip, ip
 8008034:	fa0f f989 	sxth.w	r9, r9
 8008038:	fa0f f888 	sxth.w	r8, r8
 800803c:	b212      	sxth	r2, r2
 800803e:	442f      	add	r7, r5
 8008040:	fa0f fc8c 	sxth.w	ip, ip
 8008044:	ebb9 0108 	subs.w	r1, r9, r8
 8008048:	9202      	str	r2, [sp, #8]
 800804a:	b2bf      	uxth	r7, r7
 800804c:	ebc2 020c 	rsb	r2, r2, ip
 8008050:	d100      	bne.n	8008054 <WM__UpdateChildPositions+0xa4>
 8008052:	b142      	cbz	r2, 8008066 <WM__UpdateChildPositions+0xb6>
 8008054:	4620      	mov	r0, r4
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f8cd c000 	str.w	ip, [sp]
 800805c:	f000 f9de 	bl	800841c <WM_MoveWindow>
 8008060:	f8dd c000 	ldr.w	ip, [sp]
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	b21b      	sxth	r3, r3
 8008068:	ebc9 0903 	rsb	r9, r9, r3
 800806c:	b236      	sxth	r6, r6
 800806e:	9b02      	ldr	r3, [sp, #8]
 8008070:	ebc6 0808 	rsb	r8, r6, r8
 8008074:	b23f      	sxth	r7, r7
 8008076:	b22d      	sxth	r5, r5
 8008078:	ebcc 0c07 	rsb	ip, ip, r7
 800807c:	1b5d      	subs	r5, r3, r5
 800807e:	eb19 0108 	adds.w	r1, r9, r8
 8008082:	eb0c 0205 	add.w	r2, ip, r5
 8008086:	d100      	bne.n	800808a <WM__UpdateChildPositions+0xda>
 8008088:	b112      	cbz	r2, 8008090 <WM__UpdateChildPositions+0xe0>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fb1c 	bl	80086c8 <WM_ResizeWindow>
 8008090:	a806      	add	r0, sp, #24
 8008092:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008096:	6a1c      	ldr	r4, [r3, #32]
 8008098:	f006 ffae 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800809c:	e78f      	b.n	8007fbe <WM__UpdateChildPositions+0xe>
 800809e:	b007      	add	sp, #28
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080a4 <WM__AddCriticalHandle>:
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <WM__AddCriticalHandle+0xc>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	6002      	str	r2, [r0, #0]
 80080aa:	6018      	str	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20005668 	.word	0x20005668

080080b4 <WM__GetClientRectEx>:
 80080b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b6:	460d      	mov	r5, r1
 80080b8:	b158      	cbz	r0, 80080d2 <WM__GetClientRectEx+0x1e>
 80080ba:	b151      	cbz	r1, 80080d2 <WM__GetClientRectEx+0x1e>
 80080bc:	f006 ff8e 	bl	800efdc <GUI_ALLOC_LockH>
 80080c0:	ac02      	add	r4, sp, #8
 80080c2:	4629      	mov	r1, r5
 80080c4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80080c8:	f001 f866 	bl	8009198 <WM__GetClientRectWin>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f006 ff93 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80080d2:	b003      	add	sp, #12
 80080d4:	bd30      	pop	{r4, r5, pc}
	...

080080d8 <WM_SetHasTrans>:
 80080d8:	b513      	push	{r0, r1, r4, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	b1b8      	cbz	r0, 800810e <WM_SetHasTrans+0x36>
 80080de:	f006 ff7d 	bl	800efdc <GUI_ALLOC_LockH>
 80080e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080e4:	9001      	str	r0, [sp, #4]
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d40e      	bmi.n	8008108 <WM_SetHasTrans+0x30>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fc28 	bl	8008940 <WM_ValidateWindow>
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080f4:	f042 0201 	orr.w	r2, r2, #1
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28
 80080fa:	4b06      	ldr	r3, [pc, #24]	; (8008114 <WM_SetHasTrans+0x3c>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4620      	mov	r0, r4
 8008100:	3201      	adds	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f001 f992 	bl	800942c <WM_InvalidateWindow>
 8008108:	a801      	add	r0, sp, #4
 800810a:	f006 ff75 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800810e:	b002      	add	sp, #8
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	2000567c 	.word	0x2000567c

08008118 <WM_GetHasTrans>:
 8008118:	b508      	push	{r3, lr}
 800811a:	b128      	cbz	r0, 8008128 <WM_GetHasTrans+0x10>
 800811c:	f006 ff54 	bl	800efc8 <GUI_ALLOC_h2p>
 8008120:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008122:	f000 0001 	and.w	r0, r0, #1
 8008126:	bd08      	pop	{r3, pc}
 8008128:	bd08      	pop	{r3, pc}

0800812a <_GetPrevChild>:
 800812a:	b510      	push	{r4, lr}
 800812c:	4604      	mov	r4, r0
 800812e:	b918      	cbnz	r0, 8008138 <_GetPrevChild+0xe>
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff feaf 	bl	8007e94 <WM__GetLastSibling>
 8008136:	e003      	b.n	8008140 <_GetPrevChild+0x16>
 8008138:	f7ff feb8 	bl	8007eac <WM__GetPrevSibling>
 800813c:	2800      	cmp	r0, #0
 800813e:	d0f7      	beq.n	8008130 <_GetPrevChild+0x6>
 8008140:	42a0      	cmp	r0, r4
 8008142:	bf08      	it	eq
 8008144:	2000      	moveq	r0, #0
 8008146:	bd10      	pop	{r4, pc}

08008148 <WM_SetFocusOnPrevChild>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4604      	mov	r4, r0
 800814c:	b1b0      	cbz	r0, 800817c <WM_SetFocusOnPrevChild+0x34>
 800814e:	f7ff feeb 	bl	8007f28 <WM__GetFocusedChild>
 8008152:	f7ff ffea 	bl	800812a <_GetPrevChild>
 8008156:	4605      	mov	r5, r0
 8008158:	4604      	mov	r4, r0
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fa7e 	bl	800865c <WM_IsFocusable>
 8008160:	b930      	cbnz	r0, 8008170 <WM_SetFocusOnPrevChild+0x28>
 8008162:	b12c      	cbz	r4, 8008170 <WM_SetFocusOnPrevChild+0x28>
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff ffe0 	bl	800812a <_GetPrevChild>
 800816a:	42a8      	cmp	r0, r5
 800816c:	4604      	mov	r4, r0
 800816e:	d1f4      	bne.n	800815a <WM_SetFocusOnPrevChild+0x12>
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fb3f 	bl	80087f4 <WM_SetFocus>
 8008176:	2800      	cmp	r0, #0
 8008178:	bf18      	it	ne
 800817a:	2400      	movne	r4, #0
 800817c:	4620      	mov	r0, r4
 800817e:	bd38      	pop	{r3, r4, r5, pc}

08008180 <_GetNextChild>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4605      	mov	r5, r0
 8008184:	460c      	mov	r4, r1
 8008186:	b921      	cbnz	r1, 8008192 <_GetNextChild+0x12>
 8008188:	4628      	mov	r0, r5
 800818a:	f006 ff1d 	bl	800efc8 <GUI_ALLOC_h2p>
 800818e:	69c0      	ldr	r0, [r0, #28]
 8008190:	e005      	b.n	800819e <_GetNextChild+0x1e>
 8008192:	4608      	mov	r0, r1
 8008194:	f006 ff18 	bl	800efc8 <GUI_ALLOC_h2p>
 8008198:	6a00      	ldr	r0, [r0, #32]
 800819a:	2800      	cmp	r0, #0
 800819c:	d0f4      	beq.n	8008188 <_GetNextChild+0x8>
 800819e:	42a0      	cmp	r0, r4
 80081a0:	bf08      	it	eq
 80081a2:	2000      	moveq	r0, #0
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080081a8 <WM_SetFocusOnNextChild>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	4605      	mov	r5, r0
 80081ac:	b328      	cbz	r0, 80081fa <WM_SetFocusOnNextChild+0x52>
 80081ae:	f7ff febb 	bl	8007f28 <WM__GetFocusedChild>
 80081b2:	4601      	mov	r1, r0
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff ffe3 	bl	8008180 <_GetNextChild>
 80081ba:	4606      	mov	r6, r0
 80081bc:	4604      	mov	r4, r0
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fa4c 	bl	800865c <WM_IsFocusable>
 80081c4:	b938      	cbnz	r0, 80081d6 <WM_SetFocusOnNextChild+0x2e>
 80081c6:	b13c      	cbz	r4, 80081d8 <WM_SetFocusOnNextChild+0x30>
 80081c8:	4621      	mov	r1, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff ffd8 	bl	8008180 <_GetNextChild>
 80081d0:	42b0      	cmp	r0, r6
 80081d2:	4604      	mov	r4, r0
 80081d4:	d1f3      	bne.n	80081be <WM_SetFocusOnNextChild+0x16>
 80081d6:	b90c      	cbnz	r4, 80081dc <WM_SetFocusOnNextChild+0x34>
 80081d8:	2400      	movs	r4, #0
 80081da:	e00f      	b.n	80081fc <WM_SetFocusOnNextChild+0x54>
 80081dc:	4d08      	ldr	r5, [pc, #32]	; (8008200 <WM_SetFocusOnNextChild+0x58>)
 80081de:	4620      	mov	r0, r4
 80081e0:	682e      	ldr	r6, [r5, #0]
 80081e2:	f000 ffe5 	bl	80091b0 <WM__GetTopLevelLayer>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d008      	beq.n	80081fc <WM_SetFocusOnNextChild+0x54>
 80081ea:	6028      	str	r0, [r5, #0]
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fb01 	bl	80087f4 <WM_SetFocus>
 80081f2:	602e      	str	r6, [r5, #0]
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d1ef      	bne.n	80081d8 <WM_SetFocusOnNextChild+0x30>
 80081f8:	e000      	b.n	80081fc <WM_SetFocusOnNextChild+0x54>
 80081fa:	4604      	mov	r4, r0
 80081fc:	4620      	mov	r0, r4
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	2000564c 	.word	0x2000564c

08008204 <WM_SetCaptureMove>:
 8008204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008208:	b085      	sub	sp, #20
 800820a:	4604      	mov	r4, r0
 800820c:	460d      	mov	r5, r1
 800820e:	4691      	mov	r9, r2
 8008210:	4698      	mov	r8, r3
 8008212:	f000 fa07 	bl	8008624 <WM_HasCaptured>
 8008216:	4e21      	ldr	r6, [pc, #132]	; (800829c <WM_SetCaptureMove+0x98>)
 8008218:	b940      	cbnz	r0, 800822c <WM_SetCaptureMove+0x28>
 800821a:	4620      	mov	r0, r4
 800821c:	2101      	movs	r1, #1
 800821e:	f000 f859 	bl	80082d4 <WM_SetCapture>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	8033      	strh	r3, [r6, #0]
 8008226:	686b      	ldr	r3, [r5, #4]
 8008228:	8073      	strh	r3, [r6, #2]
 800822a:	e034      	b.n	8008296 <WM_SetCaptureMove+0x92>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	f9b6 7000 	ldrsh.w	r7, [r6]
 8008232:	686d      	ldr	r5, [r5, #4]
 8008234:	1bdf      	subs	r7, r3, r7
 8008236:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800823a:	4620      	mov	r0, r4
 800823c:	1aed      	subs	r5, r5, r3
 800823e:	f1b9 0f00 	cmp.w	r9, #0
 8008242:	d102      	bne.n	800824a <WM_SetCaptureMove+0x46>
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	d021      	beq.n	800828e <WM_SetCaptureMove+0x8a>
 800824a:	4669      	mov	r1, sp
 800824c:	f000 f9de 	bl	800860c <WM_GetWindowRectEx>
 8008250:	f1b8 0f00 	cmp.w	r8, #0
 8008254:	d005      	beq.n	8008262 <WM_SetCaptureMove+0x5e>
 8008256:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800825a:	3b01      	subs	r3, #1
 800825c:	4498      	add	r8, r3
 800825e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f987 	bl	8008576 <WM_GetParent>
 8008268:	a902      	add	r1, sp, #8
 800826a:	f000 f9cf 	bl	800860c <WM_GetWindowRectEx>
 800826e:	4668      	mov	r0, sp
 8008270:	4639      	mov	r1, r7
 8008272:	462a      	mov	r2, r5
 8008274:	f005 fbd5 	bl	800da22 <GUI_MoveRect>
 8008278:	a802      	add	r0, sp, #8
 800827a:	4601      	mov	r1, r0
 800827c:	464a      	mov	r2, r9
 800827e:	f004 fc20 	bl	800cac2 <GUI__ReduceRect>
 8008282:	4668      	mov	r0, sp
 8008284:	a902      	add	r1, sp, #8
 8008286:	f005 fc17 	bl	800dab8 <GUI_RectsIntersect>
 800828a:	b120      	cbz	r0, 8008296 <WM_SetCaptureMove+0x92>
 800828c:	4620      	mov	r0, r4
 800828e:	4639      	mov	r1, r7
 8008290:	462a      	mov	r2, r5
 8008292:	f000 f8c3 	bl	800841c <WM_MoveWindow>
 8008296:	b005      	add	sp, #20
 8008298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829c:	20005438 	.word	0x20005438

080082a0 <WM__ReleaseCapture>:
 80082a0:	b530      	push	{r4, r5, lr}
 80082a2:	4d0a      	ldr	r5, [pc, #40]	; (80082cc <WM__ReleaseCapture+0x2c>)
 80082a4:	4c0a      	ldr	r4, [pc, #40]	; (80082d0 <WM__ReleaseCapture+0x30>)
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80082ac:	b085      	sub	sp, #20
 80082ae:	b150      	cbz	r0, 80082c6 <WM__ReleaseCapture+0x26>
 80082b0:	a904      	add	r1, sp, #16
 80082b2:	2318      	movs	r3, #24
 80082b4:	f841 3d10 	str.w	r3, [r1, #-16]!
 80082b8:	4669      	mov	r1, sp
 80082ba:	f7ff fe47 	bl	8007f4c <WM__SendMessage>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 80082c6:	b005      	add	sp, #20
 80082c8:	bd30      	pop	{r4, r5, pc}
 80082ca:	bf00      	nop
 80082cc:	2000564c 	.word	0x2000564c
 80082d0:	20005670 	.word	0x20005670

080082d4 <WM_SetCapture>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <WM_SetCapture+0x28>)
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <WM_SetCapture+0x2c>)
 80082da:	4604      	mov	r4, r0
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	460f      	mov	r7, r1
 80082e0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80082e4:	42a1      	cmp	r1, r4
 80082e6:	4615      	mov	r5, r2
 80082e8:	461e      	mov	r6, r3
 80082ea:	d001      	beq.n	80082f0 <WM_SetCapture+0x1c>
 80082ec:	f7ff ffd8 	bl	80082a0 <WM__ReleaseCapture>
 80082f0:	6833      	ldr	r3, [r6, #0]
 80082f2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <WM_SetCapture+0x30>)
 80082f8:	701f      	strb	r7, [r3, #0]
 80082fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fc:	2000564c 	.word	0x2000564c
 8008300:	20005670 	.word	0x20005670
 8008304:	20005650 	.word	0x20005650

08008308 <_MoveDescendents>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	b088      	sub	sp, #32
 800830e:	4606      	mov	r6, r0
 8008310:	460c      	mov	r4, r1
 8008312:	4615      	mov	r5, r2
 8008314:	a804      	add	r0, sp, #16
 8008316:	2100      	movs	r1, #0
 8008318:	2210      	movs	r2, #16
 800831a:	f00a f81b 	bl	8012354 <memset>
 800831e:	b336      	cbz	r6, 800836e <_MoveDescendents+0x66>
 8008320:	4630      	mov	r0, r6
 8008322:	f006 fe5b 	bl	800efdc <GUI_ALLOC_LockH>
 8008326:	4621      	mov	r1, r4
 8008328:	462a      	mov	r2, r5
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	f005 fb79 	bl	800da22 <GUI_MoveRect>
 8008330:	9801      	ldr	r0, [sp, #4]
 8008332:	4621      	mov	r1, r4
 8008334:	3008      	adds	r0, #8
 8008336:	462a      	mov	r2, r5
 8008338:	f005 fb73 	bl	800da22 <GUI_MoveRect>
 800833c:	a808      	add	r0, sp, #32
 800833e:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8008342:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8008346:	6a17      	ldr	r7, [r2, #32]
 8008348:	f006 fe56 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800834c:	4640      	mov	r0, r8
 800834e:	4621      	mov	r1, r4
 8008350:	462a      	mov	r2, r5
 8008352:	f7ff ffd9 	bl	8008308 <_MoveDescendents>
 8008356:	2303      	movs	r3, #3
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	4630      	mov	r0, r6
 800835c:	ab02      	add	r3, sp, #8
 800835e:	a904      	add	r1, sp, #16
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	9402      	str	r4, [sp, #8]
 8008364:	9503      	str	r5, [sp, #12]
 8008366:	463e      	mov	r6, r7
 8008368:	f7ff fdf0 	bl	8007f4c <WM__SendMessage>
 800836c:	e7d7      	b.n	800831e <_MoveDescendents+0x16>
 800836e:	b008      	add	sp, #32
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008374 <WM__MoveWindow>:
 8008374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008378:	b08b      	sub	sp, #44	; 0x2c
 800837a:	4606      	mov	r6, r0
 800837c:	460d      	mov	r5, r1
 800837e:	4614      	mov	r4, r2
 8008380:	a806      	add	r0, sp, #24
 8008382:	2100      	movs	r1, #0
 8008384:	2210      	movs	r2, #16
 8008386:	f009 ffe5 	bl	8012354 <memset>
 800838a:	2e00      	cmp	r6, #0
 800838c:	d043      	beq.n	8008416 <WM__MoveWindow+0xa2>
 800838e:	b90d      	cbnz	r5, 8008394 <WM__MoveWindow+0x20>
 8008390:	2c00      	cmp	r4, #0
 8008392:	d040      	beq.n	8008416 <WM__MoveWindow+0xa2>
 8008394:	4630      	mov	r0, r6
 8008396:	f006 fe21 	bl	800efdc <GUI_ALLOC_LockH>
 800839a:	4603      	mov	r3, r0
 800839c:	9001      	str	r0, [sp, #4]
 800839e:	c803      	ldmia	r0, {r0, r1}
 80083a0:	f10d 0808 	add.w	r8, sp, #8
 80083a4:	e888 0003 	stmia.w	r8, {r0, r1}
 80083a8:	4622      	mov	r2, r4
 80083aa:	4618      	mov	r0, r3
 80083ac:	4629      	mov	r1, r5
 80083ae:	f005 fb38 	bl	800da22 <GUI_MoveRect>
 80083b2:	9801      	ldr	r0, [sp, #4]
 80083b4:	af0a      	add	r7, sp, #40	; 0x28
 80083b6:	4629      	mov	r1, r5
 80083b8:	4622      	mov	r2, r4
 80083ba:	3008      	adds	r0, #8
 80083bc:	f005 fb31 	bl	800da22 <GUI_MoveRect>
 80083c0:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 80083c4:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80083c8:	4638      	mov	r0, r7
 80083ca:	f006 fe15 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80083ce:	4622      	mov	r2, r4
 80083d0:	4648      	mov	r0, r9
 80083d2:	4629      	mov	r1, r5
 80083d4:	f7ff ff98 	bl	8008308 <_MoveDescendents>
 80083d8:	4630      	mov	r0, r6
 80083da:	f006 fdff 	bl	800efdc <GUI_ALLOC_LockH>
 80083de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80083e0:	9001      	str	r0, [sp, #4]
 80083e2:	0792      	lsls	r2, r2, #30
 80083e4:	d50a      	bpl.n	80083fc <WM__MoveWindow+0x88>
 80083e6:	6981      	ldr	r1, [r0, #24]
 80083e8:	b141      	cbz	r1, 80083fc <WM__MoveWindow+0x88>
 80083ea:	6a02      	ldr	r2, [r0, #32]
 80083ec:	f000 ffb5 	bl	800935a <WM__InvalidateParent>
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	4640      	mov	r0, r8
 80083f4:	6999      	ldr	r1, [r3, #24]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	f000 ffaf 	bl	800935a <WM__InvalidateParent>
 80083fc:	4638      	mov	r0, r7
 80083fe:	f006 fdfb 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008402:	2303      	movs	r3, #3
 8008404:	9306      	str	r3, [sp, #24]
 8008406:	4630      	mov	r0, r6
 8008408:	ab04      	add	r3, sp, #16
 800840a:	a906      	add	r1, sp, #24
 800840c:	9309      	str	r3, [sp, #36]	; 0x24
 800840e:	9504      	str	r5, [sp, #16]
 8008410:	9405      	str	r4, [sp, #20]
 8008412:	f7ff fd9b 	bl	8007f4c <WM__SendMessage>
 8008416:	b00b      	add	sp, #44	; 0x2c
 8008418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800841c <WM_MoveWindow>:
 800841c:	f7ff bfaa 	b.w	8008374 <WM__MoveWindow>

08008420 <WM_DisableMemdev>:
 8008420:	b508      	push	{r3, lr}
 8008422:	b138      	cbz	r0, 8008434 <WM_DisableMemdev+0x14>
 8008424:	f006 fdd0 	bl	800efc8 <GUI_ALLOC_h2p>
 8008428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800842a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800842e:	f023 0304 	bic.w	r3, r3, #4
 8008432:	6283      	str	r3, [r0, #40]	; 0x28
 8008434:	bd08      	pop	{r3, pc}

08008436 <WM_ForEachDesc>:
 8008436:	f7ff bd0f 	b.w	8007e58 <WM__ForEachDesc>
	...

0800843c <WM_GetClientRect>:
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <WM_GetClientRect+0x14>)
 800843e:	4601      	mov	r1, r0
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	b910      	cbnz	r0, 800844a <WM_GetClientRect+0xe>
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <WM_GetClientRect+0x18>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800844a:	f7ff be33 	b.w	80080b4 <WM__GetClientRectEx>
 800844e:	bf00      	nop
 8008450:	20005628 	.word	0x20005628
 8008454:	20000084 	.word	0x20000084

08008458 <WM_GetClientWindow>:
 8008458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800845a:	2300      	movs	r3, #0
 800845c:	a904      	add	r1, sp, #16
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	2317      	movs	r3, #23
 8008462:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008466:	4669      	mov	r1, sp
 8008468:	f000 fe87 	bl	800917a <WM_SendMessage>
 800846c:	9803      	ldr	r0, [sp, #12]
 800846e:	b005      	add	sp, #20
 8008470:	f85d fb04 	ldr.w	pc, [sp], #4

08008474 <WM_GetDesktopWindow>:
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <WM_GetDesktopWindow+0x10>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	7c5a      	ldrb	r2, [r3, #17]
 800847a:	4b03      	ldr	r3, [pc, #12]	; (8008488 <WM_GetDesktopWindow+0x14>)
 800847c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000084 	.word	0x20000084
 8008488:	2000562c 	.word	0x2000562c

0800848c <WM_GetFirstChild>:
 800848c:	b508      	push	{r3, lr}
 800848e:	4603      	mov	r3, r0
 8008490:	b110      	cbz	r0, 8008498 <WM_GetFirstChild+0xc>
 8008492:	f006 fd99 	bl	800efc8 <GUI_ALLOC_h2p>
 8008496:	69c3      	ldr	r3, [r0, #28]
 8008498:	4618      	mov	r0, r3
 800849a:	bd08      	pop	{r3, pc}

0800849c <WM_GetFocusedWindow>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <WM_GetFocusedWindow+0xc>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <WM_GetFocusedWindow+0x10>)
 80084a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80084a6:	4770      	bx	lr
 80084a8:	2000564c 	.word	0x2000564c
 80084ac:	2000563c 	.word	0x2000563c

080084b0 <WM_GetId>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	4604      	mov	r4, r0
 80084b4:	2210      	movs	r2, #16
 80084b6:	4668      	mov	r0, sp
 80084b8:	2100      	movs	r1, #0
 80084ba:	f009 ff4b 	bl	8012354 <memset>
 80084be:	2315      	movs	r3, #21
 80084c0:	4620      	mov	r0, r4
 80084c2:	4669      	mov	r1, sp
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f000 fe58 	bl	800917a <WM_SendMessage>
 80084ca:	9803      	ldr	r0, [sp, #12]
 80084cc:	b004      	add	sp, #16
 80084ce:	bd10      	pop	{r4, pc}

080084d0 <_GetDialogItem>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4606      	mov	r6, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	f006 fd77 	bl	800efc8 <GUI_ALLOC_h2p>
 80084da:	69c4      	ldr	r4, [r0, #28]
 80084dc:	b14c      	cbz	r4, 80084f2 <_GetDialogItem+0x22>
 80084de:	4620      	mov	r0, r4
 80084e0:	f7ff ffe6 	bl	80084b0 <WM_GetId>
 80084e4:	42a8      	cmp	r0, r5
 80084e6:	4620      	mov	r0, r4
 80084e8:	d013      	beq.n	8008512 <_GetDialogItem+0x42>
 80084ea:	f006 fd6d 	bl	800efc8 <GUI_ALLOC_h2p>
 80084ee:	6a04      	ldr	r4, [r0, #32]
 80084f0:	e7f4      	b.n	80084dc <_GetDialogItem+0xc>
 80084f2:	4630      	mov	r0, r6
 80084f4:	f006 fd68 	bl	800efc8 <GUI_ALLOC_h2p>
 80084f8:	69c4      	ldr	r4, [r0, #28]
 80084fa:	4620      	mov	r0, r4
 80084fc:	b144      	cbz	r4, 8008510 <_GetDialogItem+0x40>
 80084fe:	4629      	mov	r1, r5
 8008500:	f7ff ffe6 	bl	80084d0 <_GetDialogItem>
 8008504:	b928      	cbnz	r0, 8008512 <_GetDialogItem+0x42>
 8008506:	4620      	mov	r0, r4
 8008508:	f006 fd5e 	bl	800efc8 <GUI_ALLOC_h2p>
 800850c:	6a04      	ldr	r4, [r0, #32]
 800850e:	e7f4      	b.n	80084fa <_GetDialogItem+0x2a>
 8008510:	bd70      	pop	{r4, r5, r6, pc}
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <WM_GetDialogItem>:
 8008514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008516:	460d      	mov	r5, r1
 8008518:	4604      	mov	r4, r0
 800851a:	b1c8      	cbz	r0, 8008550 <WM_GetDialogItem+0x3c>
 800851c:	f006 fd5e 	bl	800efdc <GUI_ALLOC_LockH>
 8008520:	ab02      	add	r3, sp, #8
 8008522:	69c4      	ldr	r4, [r0, #28]
 8008524:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008528:	4618      	mov	r0, r3
 800852a:	f006 fd65 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800852e:	b17c      	cbz	r4, 8008550 <WM_GetDialogItem+0x3c>
 8008530:	4620      	mov	r0, r4
 8008532:	f7ff ffbd 	bl	80084b0 <WM_GetId>
 8008536:	42a8      	cmp	r0, r5
 8008538:	d00a      	beq.n	8008550 <WM_GetDialogItem+0x3c>
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f7ff ffc7 	bl	80084d0 <_GetDialogItem>
 8008542:	b920      	cbnz	r0, 800854e <WM_GetDialogItem+0x3a>
 8008544:	4620      	mov	r0, r4
 8008546:	f006 fd3f 	bl	800efc8 <GUI_ALLOC_h2p>
 800854a:	6a04      	ldr	r4, [r0, #32]
 800854c:	e7ef      	b.n	800852e <WM_GetDialogItem+0x1a>
 800854e:	4604      	mov	r4, r0
 8008550:	4620      	mov	r0, r4
 8008552:	b003      	add	sp, #12
 8008554:	bd30      	pop	{r4, r5, pc}

08008556 <WM_GetNextSibling>:
 8008556:	b508      	push	{r3, lr}
 8008558:	4603      	mov	r3, r0
 800855a:	b110      	cbz	r0, 8008562 <WM_GetNextSibling+0xc>
 800855c:	f006 fd34 	bl	800efc8 <GUI_ALLOC_h2p>
 8008560:	6a03      	ldr	r3, [r0, #32]
 8008562:	4618      	mov	r0, r3
 8008564:	bd08      	pop	{r3, pc}

08008566 <WM_GetWindowOrgX>:
 8008566:	b508      	push	{r3, lr}
 8008568:	b120      	cbz	r0, 8008574 <WM_GetWindowOrgX+0xe>
 800856a:	f006 fd2d 	bl	800efc8 <GUI_ALLOC_h2p>
 800856e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8008572:	bd08      	pop	{r3, pc}
 8008574:	bd08      	pop	{r3, pc}

08008576 <WM_GetParent>:
 8008576:	b508      	push	{r3, lr}
 8008578:	4603      	mov	r3, r0
 800857a:	b110      	cbz	r0, 8008582 <WM_GetParent+0xc>
 800857c:	f006 fd24 	bl	800efc8 <GUI_ALLOC_h2p>
 8008580:	6983      	ldr	r3, [r0, #24]
 8008582:	4618      	mov	r0, r3
 8008584:	bd08      	pop	{r3, pc}

08008586 <WM_BringToBottom>:
 8008586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	b087      	sub	sp, #28
 800858e:	2800      	cmp	r0, #0
 8008590:	d039      	beq.n	8008606 <WM_BringToBottom+0x80>
 8008592:	f006 fd23 	bl	800efdc <GUI_ALLOC_LockH>
 8008596:	4603      	mov	r3, r0
 8008598:	9001      	str	r0, [sp, #4]
 800859a:	c803      	ldmia	r0, {r0, r1}
 800859c:	ad04      	add	r5, sp, #16
 800859e:	e885 0003 	stmia.w	r5, {r0, r1}
 80085a2:	a801      	add	r0, sp, #4
 80085a4:	6a1e      	ldr	r6, [r3, #32]
 80085a6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80085aa:	f006 fd25 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff fc7c 	bl	8007eac <WM__GetPrevSibling>
 80085b4:	4607      	mov	r7, r0
 80085b6:	b330      	cbz	r0, 8008606 <WM_BringToBottom+0x80>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7ff ffdc 	bl	8008576 <WM_GetParent>
 80085be:	f019 0f02 	tst.w	r9, #2
 80085c2:	4680      	mov	r8, r0
 80085c4:	d004      	beq.n	80085d0 <WM_BringToBottom+0x4a>
 80085c6:	4628      	mov	r0, r5
 80085c8:	4641      	mov	r1, r8
 80085ca:	4632      	mov	r2, r6
 80085cc:	f000 feda 	bl	8009384 <WM__InvalidateRectEx>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f006 fd03 	bl	800efdc <GUI_ALLOC_LockH>
 80085d6:	9001      	str	r0, [sp, #4]
 80085d8:	4640      	mov	r0, r8
 80085da:	f006 fcff 	bl	800efdc <GUI_ALLOC_LockH>
 80085de:	9003      	str	r0, [sp, #12]
 80085e0:	4638      	mov	r0, r7
 80085e2:	f006 fcfb 	bl	800efdc <GUI_ALLOC_LockH>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	69d9      	ldr	r1, [r3, #28]
 80085ec:	6206      	str	r6, [r0, #32]
 80085ee:	9002      	str	r0, [sp, #8]
 80085f0:	6211      	str	r1, [r2, #32]
 80085f2:	a801      	add	r0, sp, #4
 80085f4:	61dc      	str	r4, [r3, #28]
 80085f6:	f006 fcff 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80085fa:	a803      	add	r0, sp, #12
 80085fc:	f006 fcfc 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008600:	a802      	add	r0, sp, #8
 8008602:	f006 fcf9 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008606:	b007      	add	sp, #28
 8008608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800860c <WM_GetWindowRectEx>:
 800860c:	b510      	push	{r4, lr}
 800860e:	460c      	mov	r4, r1
 8008610:	b130      	cbz	r0, 8008620 <WM_GetWindowRectEx+0x14>
 8008612:	b129      	cbz	r1, 8008620 <WM_GetWindowRectEx+0x14>
 8008614:	f006 fcd8 	bl	800efc8 <GUI_ALLOC_h2p>
 8008618:	4603      	mov	r3, r0
 800861a:	cb03      	ldmia	r3!, {r0, r1}
 800861c:	6020      	str	r0, [r4, #0]
 800861e:	6061      	str	r1, [r4, #4]
 8008620:	bd10      	pop	{r4, pc}
	...

08008624 <WM_HasCaptured>:
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <WM_HasCaptured+0x14>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4b04      	ldr	r3, [pc, #16]	; (800863c <WM_HasCaptured+0x18>)
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	1ac3      	subs	r3, r0, r3
 8008630:	4258      	negs	r0, r3
 8008632:	4158      	adcs	r0, r3
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	2000564c 	.word	0x2000564c
 800863c:	20005670 	.word	0x20005670

08008640 <WM_HasFocus>:
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <WM_HasFocus+0x14>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <WM_HasFocus+0x18>)
 8008646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864a:	1ac3      	subs	r3, r0, r3
 800864c:	4258      	negs	r0, r3
 800864e:	4158      	adcs	r0, r3
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	2000564c 	.word	0x2000564c
 8008658:	2000563c 	.word	0x2000563c

0800865c <WM_IsFocusable>:
 800865c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800865e:	4604      	mov	r4, r0
 8008660:	b908      	cbnz	r0, 8008666 <WM_IsFocusable+0xa>
 8008662:	2000      	movs	r0, #0
 8008664:	e011      	b.n	800868a <WM_IsFocusable+0x2e>
 8008666:	f006 fcaf 	bl	800efc8 <GUI_ALLOC_h2p>
 800866a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800866c:	079a      	lsls	r2, r3, #30
 800866e:	d5f8      	bpl.n	8008662 <WM_IsFocusable+0x6>
 8008670:	f013 0310 	ands.w	r3, r3, #16
 8008674:	d1f5      	bne.n	8008662 <WM_IsFocusable+0x6>
 8008676:	a904      	add	r1, sp, #16
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	231f      	movs	r3, #31
 800867c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008680:	4620      	mov	r0, r4
 8008682:	4669      	mov	r1, sp
 8008684:	f000 fd79 	bl	800917a <WM_SendMessage>
 8008688:	9803      	ldr	r0, [sp, #12]
 800868a:	b004      	add	sp, #16
 800868c:	bd10      	pop	{r4, pc}

0800868e <WM_IsWindow>:
 800868e:	f000 bd2b 	b.w	80090e8 <WM__IsWindow>
	...

08008694 <WM_OnKey>:
 8008694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008696:	4a0a      	ldr	r2, [pc, #40]	; (80086c0 <WM_OnKey+0x2c>)
 8008698:	4603      	mov	r3, r0
 800869a:	6810      	ldr	r0, [r2, #0]
 800869c:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <WM_OnKey+0x30>)
 800869e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80086a2:	b148      	cbz	r0, 80086b8 <WM_OnKey+0x24>
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	230e      	movs	r3, #14
 80086a8:	9101      	str	r1, [sp, #4]
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	a902      	add	r1, sp, #8
 80086ae:	ab00      	add	r3, sp, #0
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	f7ff fc4b 	bl	8007f4c <WM__SendMessage>
 80086b6:	2001      	movs	r0, #1
 80086b8:	b007      	add	sp, #28
 80086ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80086be:	bf00      	nop
 80086c0:	2000564c 	.word	0x2000564c
 80086c4:	2000563c 	.word	0x2000563c

080086c8 <WM_ResizeWindow>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	ea51 0302 	orrs.w	r3, r1, r2
 80086d0:	b08a      	sub	sp, #40	; 0x28
 80086d2:	4680      	mov	r8, r0
 80086d4:	460e      	mov	r6, r1
 80086d6:	4617      	mov	r7, r2
 80086d8:	d06e      	beq.n	80087b8 <WM_ResizeWindow+0xf0>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d06c      	beq.n	80087b8 <WM_ResizeWindow+0xf0>
 80086de:	f006 fc7d 	bl	800efdc <GUI_ALLOC_LockH>
 80086e2:	4603      	mov	r3, r0
 80086e4:	9003      	str	r0, [sp, #12]
 80086e6:	c803      	ldmia	r0, {r0, r1}
 80086e8:	ad04      	add	r5, sp, #16
 80086ea:	ac06      	add	r4, sp, #24
 80086ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80086f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80086f4:	b17e      	cbz	r6, 8008716 <WM_ResizeWindow+0x4e>
 80086f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086f8:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80086fc:	2a80      	cmp	r2, #128	; 0x80
 80086fe:	d105      	bne.n	800870c <WM_ResizeWindow+0x44>
 8008700:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008704:	1b96      	subs	r6, r2, r6
 8008706:	f8ad 6018 	strh.w	r6, [sp, #24]
 800870a:	e004      	b.n	8008716 <WM_ResizeWindow+0x4e>
 800870c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008710:	4416      	add	r6, r2
 8008712:	f8ad 601c 	strh.w	r6, [sp, #28]
 8008716:	b187      	cbz	r7, 800873a <WM_ResizeWindow+0x72>
 8008718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800871a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800871e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008722:	d105      	bne.n	8008730 <WM_ResizeWindow+0x68>
 8008724:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8008728:	1bd7      	subs	r7, r2, r7
 800872a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800872e:	e004      	b.n	800873a <WM_ResizeWindow+0x72>
 8008730:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008734:	4417      	add	r7, r2
 8008736:	f8ad 701e 	strh.w	r7, [sp, #30]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	03da      	lsls	r2, r3, #15
 800873e:	d502      	bpl.n	8008746 <WM_ResizeWindow+0x7e>
 8008740:	4640      	mov	r0, r8
 8008742:	f000 fce1 	bl	8009108 <WM__InvalidateDrawAndDescs>
 8008746:	e894 0003 	ldmia.w	r4, {r0, r1}
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	079b      	lsls	r3, r3, #30
 8008754:	d50a      	bpl.n	800876c <WM_ResizeWindow+0xa4>
 8008756:	a808      	add	r0, sp, #32
 8008758:	4629      	mov	r1, r5
 800875a:	4622      	mov	r2, r4
 800875c:	f005 f936 	bl	800d9cc <GUI_MergeRect>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	a808      	add	r0, sp, #32
 8008764:	6999      	ldr	r1, [r3, #24]
 8008766:	6a1a      	ldr	r2, [r3, #32]
 8008768:	f000 fe0c 	bl	8009384 <WM__InvalidateRectEx>
 800876c:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8008770:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008774:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8008778:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800877c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8008780:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8008784:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8008788:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800878c:	1ae3      	subs	r3, r4, r3
 800878e:	1a38      	subs	r0, r7, r0
 8008790:	ac0a      	add	r4, sp, #40	; 0x28
 8008792:	1aaa      	subs	r2, r5, r2
 8008794:	9000      	str	r0, [sp, #0]
 8008796:	1a71      	subs	r1, r6, r1
 8008798:	9803      	ldr	r0, [sp, #12]
 800879a:	f7ff fc09 	bl	8007fb0 <WM__UpdateChildPositions>
 800879e:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 80087a2:	f101 0008 	add.w	r0, r1, #8
 80087a6:	f004 f8f7 	bl	800c998 <GUI__IntersectRect>
 80087aa:	4640      	mov	r0, r8
 80087ac:	2105      	movs	r1, #5
 80087ae:	f000 fce8 	bl	8009182 <WM__SendMsgNoData>
 80087b2:	4620      	mov	r0, r4
 80087b4:	f006 fc20 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80087b8:	b00a      	add	sp, #40	; 0x28
 80087ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087be <WM_SendMessageNoPara>:
 80087be:	f7ff bbe3 	b.w	8007f88 <WM__SendMessageNoPara>

080087c2 <WM_SendToParent>:
 80087c2:	b538      	push	{r3, r4, r5, lr}
 80087c4:	4605      	mov	r5, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b141      	cbz	r1, 80087dc <WM_SendToParent+0x1a>
 80087ca:	f7ff fed4 	bl	8008576 <WM_GetParent>
 80087ce:	b128      	cbz	r0, 80087dc <WM_SendToParent+0x1a>
 80087d0:	60a5      	str	r5, [r4, #8]
 80087d2:	4621      	mov	r1, r4
 80087d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d8:	f7ff bbb8 	b.w	8007f4c <WM__SendMessage>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}

080087de <WM_NotifyParent>:
 80087de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087e0:	2326      	movs	r3, #38	; 0x26
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	4669      	mov	r1, sp
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	f7ff ffeb 	bl	80087c2 <WM_SendToParent>
 80087ec:	b005      	add	sp, #20
 80087ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080087f4 <WM_SetFocus>:
 80087f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f6:	b087      	sub	sp, #28
 80087f8:	4604      	mov	r4, r0
 80087fa:	2100      	movs	r1, #0
 80087fc:	a802      	add	r0, sp, #8
 80087fe:	2210      	movs	r2, #16
 8008800:	f009 fda8 	bl	8012354 <memset>
 8008804:	2c00      	cmp	r4, #0
 8008806:	d03a      	beq.n	800887e <WM_SetFocus+0x8a>
 8008808:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <WM_SetFocus+0x94>)
 800880a:	4a20      	ldr	r2, [pc, #128]	; (800888c <WM_SetFocus+0x98>)
 800880c:	6819      	ldr	r1, [r3, #0]
 800880e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008812:	4284      	cmp	r4, r0
 8008814:	4616      	mov	r6, r2
 8008816:	461f      	mov	r7, r3
 8008818:	d031      	beq.n	800887e <WM_SetFocus+0x8a>
 800881a:	231e      	movs	r3, #30
 800881c:	e88d 0011 	stmia.w	sp, {r0, r4}
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	b110      	cbz	r0, 800882a <WM_SetFocus+0x36>
 8008824:	a902      	add	r1, sp, #8
 8008826:	f7ff fb91 	bl	8007f4c <WM__SendMessage>
 800882a:	2301      	movs	r3, #1
 800882c:	4620      	mov	r0, r4
 800882e:	a902      	add	r1, sp, #8
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	f7ff fb8b 	bl	8007f4c <WM__SendMessage>
 8008836:	9d05      	ldr	r5, [sp, #20]
 8008838:	bb15      	cbnz	r5, 8008880 <WM_SetFocus+0x8c>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff fe98 	bl	8008576 <WM_GetParent>
 8008846:	4604      	mov	r4, r0
 8008848:	b138      	cbz	r0, 800885a <WM_SetFocus+0x66>
 800884a:	2320      	movs	r3, #32
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	a902      	add	r1, sp, #8
 8008850:	ab00      	add	r3, sp, #0
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	f7ff fb7a 	bl	8007f4c <WM__SendMessage>
 8008858:	e7f2      	b.n	8008840 <WM_SetFocus+0x4c>
 800885a:	9c00      	ldr	r4, [sp, #0]
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fc43 	bl	80090e8 <WM__IsWindow>
 8008862:	b168      	cbz	r0, 8008880 <WM_SetFocus+0x8c>
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fe86 	bl	8008576 <WM_GetParent>
 800886a:	4604      	mov	r4, r0
 800886c:	b140      	cbz	r0, 8008880 <WM_SetFocus+0x8c>
 800886e:	2320      	movs	r3, #32
 8008870:	9302      	str	r3, [sp, #8]
 8008872:	a902      	add	r1, sp, #8
 8008874:	ab00      	add	r3, sp, #0
 8008876:	9305      	str	r3, [sp, #20]
 8008878:	f7ff fb68 	bl	8007f4c <WM__SendMessage>
 800887c:	e7f2      	b.n	8008864 <WM_SetFocus+0x70>
 800887e:	2501      	movs	r5, #1
 8008880:	4628      	mov	r0, r5
 8008882:	b007      	add	sp, #28
 8008884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008886:	bf00      	nop
 8008888:	2000564c 	.word	0x2000564c
 800888c:	2000563c 	.word	0x2000563c

08008890 <WM_SetSize>:
 8008890:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8008894:	460e      	mov	r6, r1
 8008896:	4690      	mov	r8, r2
 8008898:	4607      	mov	r7, r0
 800889a:	b1d0      	cbz	r0, 80088d2 <WM_SetSize+0x42>
 800889c:	f006 fb9e 	bl	800efdc <GUI_ALLOC_LockH>
 80088a0:	4603      	mov	r3, r0
 80088a2:	a802      	add	r0, sp, #8
 80088a4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80088a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80088ac:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80088b0:	f840 3d04 	str.w	r3, [r0, #-4]!
 80088b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80088b8:	1a8a      	subs	r2, r1, r2
 80088ba:	1aed      	subs	r5, r5, r3
 80088bc:	43d2      	mvns	r2, r2
 80088be:	43ed      	mvns	r5, r5
 80088c0:	4416      	add	r6, r2
 80088c2:	4445      	add	r5, r8
 80088c4:	f006 fb98 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80088c8:	4638      	mov	r0, r7
 80088ca:	4631      	mov	r1, r6
 80088cc:	462a      	mov	r2, r5
 80088ce:	f7ff fefb 	bl	80086c8 <WM_ResizeWindow>
 80088d2:	b003      	add	sp, #12
 80088d4:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

080088d8 <WM_SetUserClipRect>:
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <WM_SetUserClipRect+0x14>)
 80088da:	b510      	push	{r4, lr}
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80088e0:	6458      	str	r0, [r3, #68]	; 0x44
 80088e2:	f000 fbdd 	bl	80090a0 <WM__ActivateClipRect>
 80088e6:	4620      	mov	r0, r4
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	bf00      	nop
 80088ec:	20000084 	.word	0x20000084

080088f0 <WM_InvalidateWindowAndDescs>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	b170      	cbz	r0, 8008914 <WM_InvalidateWindowAndDescs+0x24>
 80088f6:	f000 fd99 	bl	800942c <WM_InvalidateWindow>
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fdc6 	bl	800848c <WM_GetFirstChild>
 8008900:	4604      	mov	r4, r0
 8008902:	b13c      	cbz	r4, 8008914 <WM_InvalidateWindowAndDescs+0x24>
 8008904:	4620      	mov	r0, r4
 8008906:	f7ff fff3 	bl	80088f0 <WM_InvalidateWindowAndDescs>
 800890a:	4620      	mov	r0, r4
 800890c:	f006 fb5c 	bl	800efc8 <GUI_ALLOC_h2p>
 8008910:	6a04      	ldr	r4, [r0, #32]
 8008912:	e7f6      	b.n	8008902 <WM_InvalidateWindowAndDescs+0x12>
 8008914:	bd10      	pop	{r4, pc}

08008916 <WM_ShowWindow>:
 8008916:	b513      	push	{r0, r1, r4, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	b170      	cbz	r0, 800893a <WM_ShowWindow+0x24>
 800891c:	f006 fb5e 	bl	800efdc <GUI_ALLOC_LockH>
 8008920:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008922:	9001      	str	r0, [sp, #4]
 8008924:	0793      	lsls	r3, r2, #30
 8008926:	d405      	bmi.n	8008934 <WM_ShowWindow+0x1e>
 8008928:	f042 0202 	orr.w	r2, r2, #2
 800892c:	6282      	str	r2, [r0, #40]	; 0x28
 800892e:	4620      	mov	r0, r4
 8008930:	f7ff ffde 	bl	80088f0 <WM_InvalidateWindowAndDescs>
 8008934:	a801      	add	r0, sp, #4
 8008936:	f006 fb5f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800893a:	b002      	add	sp, #8
 800893c:	bd10      	pop	{r4, pc}
	...

08008940 <WM_ValidateWindow>:
 8008940:	b507      	push	{r0, r1, r2, lr}
 8008942:	b178      	cbz	r0, 8008964 <WM_ValidateWindow+0x24>
 8008944:	f006 fb4a 	bl	800efdc <GUI_ALLOC_LockH>
 8008948:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	069a      	lsls	r2, r3, #26
 800894e:	d506      	bpl.n	800895e <WM_ValidateWindow+0x1e>
 8008950:	f023 0320 	bic.w	r3, r3, #32
 8008954:	6283      	str	r3, [r0, #40]	; 0x28
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <WM_ValidateWindow+0x2c>)
 8008958:	881a      	ldrh	r2, [r3, #0]
 800895a:	3a01      	subs	r2, #1
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	a801      	add	r0, sp, #4
 8008960:	f006 fb4a 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008964:	b003      	add	sp, #12
 8008966:	f85d fb04 	ldr.w	pc, [sp], #4
 800896a:	bf00      	nop
 800896c:	20005644 	.word	0x20005644

08008970 <WM__GetWindowSizeX>:
 8008970:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008974:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008978:	1ad0      	subs	r0, r2, r3
 800897a:	3001      	adds	r0, #1
 800897c:	4770      	bx	lr

0800897e <WM__GetWindowSizeY>:
 800897e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8008982:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008986:	1ad0      	subs	r0, r2, r3
 8008988:	3001      	adds	r0, #1
 800898a:	4770      	bx	lr

0800898c <WM_GetWindowSizeX>:
 800898c:	b513      	push	{r0, r1, r4, lr}
 800898e:	b908      	cbnz	r0, 8008994 <WM_GetWindowSizeX+0x8>
 8008990:	f000 fef0 	bl	8009774 <WM_GetActiveWindow>
 8008994:	f006 fb22 	bl	800efdc <GUI_ALLOC_LockH>
 8008998:	ab02      	add	r3, sp, #8
 800899a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800899e:	f843 0d04 	str.w	r0, [r3, #-4]!
 80089a2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80089a6:	4618      	mov	r0, r3
 80089a8:	1aa4      	subs	r4, r4, r2
 80089aa:	f006 fb25 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80089ae:	3401      	adds	r4, #1
 80089b0:	4620      	mov	r0, r4
 80089b2:	b002      	add	sp, #8
 80089b4:	bd10      	pop	{r4, pc}

080089b6 <WM_GetWindowSizeY>:
 80089b6:	b513      	push	{r0, r1, r4, lr}
 80089b8:	b908      	cbnz	r0, 80089be <WM_GetWindowSizeY+0x8>
 80089ba:	f000 fedb 	bl	8009774 <WM_GetActiveWindow>
 80089be:	f006 fb0d 	bl	800efdc <GUI_ALLOC_LockH>
 80089c2:	ab02      	add	r3, sp, #8
 80089c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80089c8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80089cc:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80089d0:	4618      	mov	r0, r3
 80089d2:	1aa4      	subs	r4, r4, r2
 80089d4:	f006 fb10 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80089d8:	3401      	adds	r4, #1
 80089da:	4620      	mov	r0, r4
 80089dc:	b002      	add	sp, #8
 80089de:	bd10      	pop	{r4, pc}

080089e0 <_cbInvalidateOne>:
 80089e0:	f000 bd24 	b.w	800942c <WM_InvalidateWindow>

080089e4 <WM_BringToTop>:
 80089e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089e6:	4605      	mov	r5, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d032      	beq.n	8008a52 <WM_BringToTop+0x6e>
 80089ec:	f006 faf6 	bl	800efdc <GUI_ALLOC_LockH>
 80089f0:	ac02      	add	r4, sp, #8
 80089f2:	4603      	mov	r3, r0
 80089f4:	f844 0d08 	str.w	r0, [r4, #-8]!
 80089f8:	6a00      	ldr	r0, [r0, #32]
 80089fa:	b908      	cbnz	r0, 8008a00 <WM_BringToTop+0x1c>
 80089fc:	4668      	mov	r0, sp
 80089fe:	e00e      	b.n	8008a1e <WM_BringToTop+0x3a>
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	071a      	lsls	r2, r3, #28
 8008a04:	d411      	bmi.n	8008a2a <WM_BringToTop+0x46>
 8008a06:	f006 fae9 	bl	800efdc <GUI_ALLOC_LockH>
 8008a0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a0c:	ae02      	add	r6, sp, #8
 8008a0e:	071b      	lsls	r3, r3, #28
 8008a10:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008a14:	d506      	bpl.n	8008a24 <WM_BringToTop+0x40>
 8008a16:	4668      	mov	r0, sp
 8008a18:	f006 faee 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f006 faeb 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008a22:	e016      	b.n	8008a52 <WM_BringToTop+0x6e>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f006 fae7 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	4668      	mov	r0, sp
 8008a2e:	699e      	ldr	r6, [r3, #24]
 8008a30:	f006 fae2 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 fae5 	bl	8009004 <WM__RemoveWindowFromList>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 fa8f 	bl	8008f60 <WM__InsertWindowIntoList>
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 fcf2 	bl	800942c <WM_InvalidateWindow>
 8008a48:	4628      	mov	r0, r5
 8008a4a:	4903      	ldr	r1, [pc, #12]	; (8008a58 <WM_BringToTop+0x74>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f7ff fcf2 	bl	8008436 <WM_ForEachDesc>
 8008a52:	b002      	add	sp, #8
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	bf00      	nop
 8008a58:	080089e1 	.word	0x080089e1

08008a5c <_OnExit>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <_OnExit+0x68>)
 8008a60:	4d19      	ldr	r5, [pc, #100]	; (8008ac8 <_OnExit+0x6c>)
 8008a62:	4a1a      	ldr	r2, [pc, #104]	; (8008acc <_OnExit+0x70>)
 8008a64:	481a      	ldr	r0, [pc, #104]	; (8008ad0 <_OnExit+0x74>)
 8008a66:	2400      	movs	r4, #0
 8008a68:	701c      	strb	r4, [r3, #0]
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <_OnExit+0x78>)
 8008a6c:	6014      	str	r4, [r2, #0]
 8008a6e:	601c      	str	r4, [r3, #0]
 8008a70:	4b19      	ldr	r3, [pc, #100]	; (8008ad8 <_OnExit+0x7c>)
 8008a72:	6054      	str	r4, [r2, #4]
 8008a74:	601c      	str	r4, [r3, #0]
 8008a76:	4b19      	ldr	r3, [pc, #100]	; (8008adc <_OnExit+0x80>)
 8008a78:	601c      	str	r4, [r3, #0]
 8008a7a:	605c      	str	r4, [r3, #4]
 8008a7c:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <_OnExit+0x84>)
 8008a7e:	601c      	str	r4, [r3, #0]
 8008a80:	4b18      	ldr	r3, [pc, #96]	; (8008ae4 <_OnExit+0x88>)
 8008a82:	601c      	str	r4, [r3, #0]
 8008a84:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <_OnExit+0x8c>)
 8008a86:	601c      	str	r4, [r3, #0]
 8008a88:	4b18      	ldr	r3, [pc, #96]	; (8008aec <_OnExit+0x90>)
 8008a8a:	601c      	str	r4, [r3, #0]
 8008a8c:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <_OnExit+0x94>)
 8008a8e:	4621      	mov	r1, r4
 8008a90:	601c      	str	r4, [r3, #0]
 8008a92:	2218      	movs	r2, #24
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	4798      	blx	r3
 8008a98:	4b16      	ldr	r3, [pc, #88]	; (8008af4 <_OnExit+0x98>)
 8008a9a:	4817      	ldr	r0, [pc, #92]	; (8008af8 <_OnExit+0x9c>)
 8008a9c:	601c      	str	r4, [r3, #0]
 8008a9e:	4b17      	ldr	r3, [pc, #92]	; (8008afc <_OnExit+0xa0>)
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	601c      	str	r4, [r3, #0]
 8008aa4:	605c      	str	r4, [r3, #4]
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	4798      	blx	r3
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	4814      	ldr	r0, [pc, #80]	; (8008b00 <_OnExit+0xa4>)
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	2210      	movs	r2, #16
 8008ab4:	4798      	blx	r3
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	4812      	ldr	r0, [pc, #72]	; (8008b04 <_OnExit+0xa8>)
 8008aba:	4621      	mov	r1, r4
 8008abc:	2210      	movs	r2, #16
 8008abe:	4798      	blx	r3
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20005464 	.word	0x20005464
 8008ac8:	20000070 	.word	0x20000070
 8008acc:	2000563c 	.word	0x2000563c
 8008ad0:	20005448 	.word	0x20005448
 8008ad4:	20005444 	.word	0x20005444
 8008ad8:	20005668 	.word	0x20005668
 8008adc:	20005670 	.word	0x20005670
 8008ae0:	2000567c 	.word	0x2000567c
 8008ae4:	20005628 	.word	0x20005628
 8008ae8:	2000565c 	.word	0x2000565c
 8008aec:	2000566c 	.word	0x2000566c
 8008af0:	20005460 	.word	0x20005460
 8008af4:	20005638 	.word	0x20005638
 8008af8:	200057c4 	.word	0x200057c4
 8008afc:	2000562c 	.word	0x2000562c
 8008b00:	200057b4 	.word	0x200057b4
 8008b04:	200057a4 	.word	0x200057a4

08008b08 <_Paint1>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f006 fa5c 	bl	800efc8 <GUI_ALLOC_h2p>
 8008b10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008b12:	4a04      	ldr	r2, [pc, #16]	; (8008b24 <_Paint1+0x1c>)
 8008b14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008b18:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <_Paint1+0x20>)
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	bf08      	it	eq
 8008b1e:	4613      	moveq	r3, r2
 8008b20:	4798      	blx	r3
 8008b22:	bd10      	pop	{r4, pc}
 8008b24:	08009a15 	.word	0x08009a15
 8008b28:	08009f85 	.word	0x08009f85

08008b2c <_Findy1>:
 8008b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2e:	4605      	mov	r5, r0
 8008b30:	b085      	sub	sp, #20
 8008b32:	460c      	mov	r4, r1
 8008b34:	4616      	mov	r6, r2
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	d04c      	beq.n	8008bd4 <_Findy1+0xa8>
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f006 fa4e 	bl	800efdc <GUI_ALLOC_LockH>
 8008b40:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008b42:	9001      	str	r0, [sp, #4]
 8008b44:	07bb      	lsls	r3, r7, #30
 8008b46:	4601      	mov	r1, r0
 8008b48:	d53d      	bpl.n	8008bc6 <_Findy1+0x9a>
 8008b4a:	ad02      	add	r5, sp, #8
 8008b4c:	b126      	cbz	r6, 8008b58 <_Findy1+0x2c>
 8008b4e:	4628      	mov	r0, r5
 8008b50:	4632      	mov	r2, r6
 8008b52:	f003 ff3f 	bl	800c9d4 <GUI__IntersectRects>
 8008b56:	e002      	b.n	8008b5e <_Findy1+0x32>
 8008b58:	c803      	ldmia	r0, {r0, r1}
 8008b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f004 ffa9 	bl	800dab8 <GUI_RectsIntersect>
 8008b66:	b370      	cbz	r0, 8008bc6 <_Findy1+0x9a>
 8008b68:	f017 0f01 	tst.w	r7, #1
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	d11e      	bne.n	8008bae <_Findy1+0x82>
 8008b70:	b13e      	cbz	r6, 8008b82 <_Findy1+0x56>
 8008b72:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008b76:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bfa8      	it	ge
 8008b7e:	4613      	movge	r3, r2
 8008b80:	e001      	b.n	8008b86 <_Findy1+0x5a>
 8008b82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008b90:	dd06      	ble.n	8008ba0 <_Findy1+0x74>
 8008b92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008b96:	b219      	sxth	r1, r3
 8008b98:	428a      	cmp	r2, r1
 8008b9a:	db14      	blt.n	8008bc6 <_Findy1+0x9a>
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	e004      	b.n	8008baa <_Findy1+0x7e>
 8008ba0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008ba4:	b219      	sxth	r1, r3
 8008ba6:	428a      	cmp	r2, r1
 8008ba8:	dd0d      	ble.n	8008bc6 <_Findy1+0x9a>
 8008baa:	80e3      	strh	r3, [r4, #6]
 8008bac:	e00b      	b.n	8008bc6 <_Findy1+0x9a>
 8008bae:	69df      	ldr	r7, [r3, #28]
 8008bb0:	b14f      	cbz	r7, 8008bc6 <_Findy1+0x9a>
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	f7ff ffb8 	bl	8008b2c <_Findy1>
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f006 fa03 	bl	800efc8 <GUI_ALLOC_h2p>
 8008bc2:	6a07      	ldr	r7, [r0, #32]
 8008bc4:	e7f4      	b.n	8008bb0 <_Findy1+0x84>
 8008bc6:	a804      	add	r0, sp, #16
 8008bc8:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008bcc:	6a1d      	ldr	r5, [r3, #32]
 8008bce:	f006 fa13 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008bd2:	e7b0      	b.n	8008b36 <_Findy1+0xa>
 8008bd4:	b005      	add	sp, #20
 8008bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bd8 <_Findx0>:
 8008bd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	460f      	mov	r7, r1
 8008be0:	4690      	mov	r8, r2
 8008be2:	2500      	movs	r5, #0
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d037      	beq.n	8008c58 <_Findx0+0x80>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f006 f9f7 	bl	800efdc <GUI_ALLOC_LockH>
 8008bee:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008bf0:	9001      	str	r0, [sp, #4]
 8008bf2:	07b2      	lsls	r2, r6, #30
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	d528      	bpl.n	8008c4a <_Findx0+0x72>
 8008bf8:	ac02      	add	r4, sp, #8
 8008bfa:	f1b8 0f00 	cmp.w	r8, #0
 8008bfe:	d004      	beq.n	8008c0a <_Findx0+0x32>
 8008c00:	4620      	mov	r0, r4
 8008c02:	4642      	mov	r2, r8
 8008c04:	f003 fee6 	bl	800c9d4 <GUI__IntersectRects>
 8008c08:	e002      	b.n	8008c10 <_Findx0+0x38>
 8008c0a:	c803      	ldmia	r0, {r0, r1}
 8008c0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c10:	4638      	mov	r0, r7
 8008c12:	4621      	mov	r1, r4
 8008c14:	f004 ff50 	bl	800dab8 <GUI_RectsIntersect>
 8008c18:	b1b8      	cbz	r0, 8008c4a <_Findx0+0x72>
 8008c1a:	07f3      	lsls	r3, r6, #31
 8008c1c:	d405      	bmi.n	8008c2a <_Findx0+0x52>
 8008c1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	803b      	strh	r3, [r7, #0]
 8008c26:	2501      	movs	r5, #1
 8008c28:	e00f      	b.n	8008c4a <_Findx0+0x72>
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	69de      	ldr	r6, [r3, #28]
 8008c2e:	b166      	cbz	r6, 8008c4a <_Findx0+0x72>
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	4622      	mov	r2, r4
 8008c36:	f7ff ffcf 	bl	8008bd8 <_Findx0>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	bf18      	it	ne
 8008c40:	2501      	movne	r5, #1
 8008c42:	f006 f9c1 	bl	800efc8 <GUI_ALLOC_h2p>
 8008c46:	6a06      	ldr	r6, [r0, #32]
 8008c48:	e7f1      	b.n	8008c2e <_Findx0+0x56>
 8008c4a:	a804      	add	r0, sp, #16
 8008c4c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008c50:	6a1c      	ldr	r4, [r3, #32]
 8008c52:	f006 f9d1 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008c56:	e7c5      	b.n	8008be4 <_Findx0+0xc>
 8008c58:	4628      	mov	r0, r5
 8008c5a:	b004      	add	sp, #16
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c60 <_Findx1>:
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	4604      	mov	r4, r0
 8008c64:	b085      	sub	sp, #20
 8008c66:	460e      	mov	r6, r1
 8008c68:	4617      	mov	r7, r2
 8008c6a:	2c00      	cmp	r4, #0
 8008c6c:	d031      	beq.n	8008cd2 <_Findx1+0x72>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f006 f9b4 	bl	800efdc <GUI_ALLOC_LockH>
 8008c74:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8008c76:	9001      	str	r0, [sp, #4]
 8008c78:	07aa      	lsls	r2, r5, #30
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	d522      	bpl.n	8008cc4 <_Findx1+0x64>
 8008c7e:	ac02      	add	r4, sp, #8
 8008c80:	b127      	cbz	r7, 8008c8c <_Findx1+0x2c>
 8008c82:	4620      	mov	r0, r4
 8008c84:	463a      	mov	r2, r7
 8008c86:	f003 fea5 	bl	800c9d4 <GUI__IntersectRects>
 8008c8a:	e002      	b.n	8008c92 <_Findx1+0x32>
 8008c8c:	c803      	ldmia	r0, {r0, r1}
 8008c8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c92:	4630      	mov	r0, r6
 8008c94:	4621      	mov	r1, r4
 8008c96:	f004 ff0f 	bl	800dab8 <GUI_RectsIntersect>
 8008c9a:	b198      	cbz	r0, 8008cc4 <_Findx1+0x64>
 8008c9c:	07eb      	lsls	r3, r5, #31
 8008c9e:	d404      	bmi.n	8008caa <_Findx1+0x4a>
 8008ca0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	80b3      	strh	r3, [r6, #4]
 8008ca8:	e00c      	b.n	8008cc4 <_Findx1+0x64>
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	69dd      	ldr	r5, [r3, #28]
 8008cae:	b14d      	cbz	r5, 8008cc4 <_Findx1+0x64>
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	f7ff ffd3 	bl	8008c60 <_Findx1>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f006 f984 	bl	800efc8 <GUI_ALLOC_h2p>
 8008cc0:	6a05      	ldr	r5, [r0, #32]
 8008cc2:	e7f4      	b.n	8008cae <_Findx1+0x4e>
 8008cc4:	a804      	add	r0, sp, #16
 8008cc6:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008cca:	6a1c      	ldr	r4, [r3, #32]
 8008ccc:	f006 f994 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008cd0:	e7cb      	b.n	8008c6a <_Findx1+0xa>
 8008cd2:	b005      	add	sp, #20
 8008cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008cd8 <_Paint1Trans>:
 8008cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008cdc:	4d21      	ldr	r5, [pc, #132]	; (8008d64 <_Paint1Trans+0x8c>)
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ce4:	f006 f97a 	bl	800efdc <GUI_ALLOC_LockH>
 8008ce8:	9000      	str	r0, [sp, #0]
 8008cea:	4630      	mov	r0, r6
 8008cec:	f006 f976 	bl	800efdc <GUI_ALLOC_LockH>
 8008cf0:	ac02      	add	r4, sp, #8
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	9001      	str	r0, [sp, #4]
 8008cf6:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8008cfa:	3008      	adds	r0, #8
 8008cfc:	f004 fedc 	bl	800dab8 <GUI_RectsIntersect>
 8008d00:	4607      	mov	r7, r0
 8008d02:	b328      	cbz	r0, 8008d50 <_Paint1Trans+0x78>
 8008d04:	9901      	ldr	r1, [sp, #4]
 8008d06:	9a00      	ldr	r2, [sp, #0]
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	4c17      	ldr	r4, [pc, #92]	; (8008d68 <_Paint1Trans+0x90>)
 8008d0c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8008d0e:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8008d12:	f101 0008 	add.w	r0, r1, #8
 8008d16:	3208      	adds	r2, #8
 8008d18:	f003 fe5c 	bl	800c9d4 <GUI__IntersectRects>
 8008d1c:	4668      	mov	r0, sp
 8008d1e:	f006 f96b 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008d22:	9a01      	ldr	r2, [sp, #4]
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	f9b2 1000 	ldrsh.w	r1, [r2]
 8008d2a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008d2e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008d30:	651a      	str	r2, [r3, #80]	; 0x50
 8008d32:	a801      	add	r0, sp, #4
 8008d34:	6026      	str	r6, [r4, #0]
 8008d36:	f006 f95f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff fee4 	bl	8008b08 <_Paint1>
 8008d40:	2300      	movs	r3, #0
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	651f      	str	r7, [r3, #80]	; 0x50
 8008d48:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8008d4c:	2701      	movs	r7, #1
 8008d4e:	e005      	b.n	8008d5c <_Paint1Trans+0x84>
 8008d50:	4668      	mov	r0, sp
 8008d52:	f006 f951 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008d56:	a801      	add	r0, sp, #4
 8008d58:	f006 f94e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	b002      	add	sp, #8
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	20000084 	.word	0x20000084
 8008d68:	20005628 	.word	0x20005628

08008d6c <_PaintTransChildren>:
 8008d6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d70:	4606      	mov	r6, r0
 8008d72:	f006 f933 	bl	800efdc <GUI_ALLOC_LockH>
 8008d76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008d78:	9001      	str	r0, [sp, #4]
 8008d7a:	079b      	lsls	r3, r3, #30
 8008d7c:	d405      	bmi.n	8008d8a <_PaintTransChildren+0x1e>
 8008d7e:	a801      	add	r0, sp, #4
 8008d80:	f006 f93a 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008d84:	b002      	add	sp, #8
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	69c4      	ldr	r4, [r0, #28]
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	d0f6      	beq.n	8008d7e <_PaintTransChildren+0x12>
 8008d90:	4620      	mov	r0, r4
 8008d92:	f006 f923 	bl	800efdc <GUI_ALLOC_LockH>
 8008d96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008d98:	ad02      	add	r5, sp, #8
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	f845 0d08 	str.w	r0, [r5, #-8]!
 8008da4:	d137      	bne.n	8008e16 <_PaintTransChildren+0xaa>
 8008da6:	9901      	ldr	r1, [sp, #4]
 8008da8:	3108      	adds	r1, #8
 8008daa:	f004 fe85 	bl	800dab8 <GUI_RectsIntersect>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d031      	beq.n	8008e16 <_PaintTransChildren+0xaa>
 8008db2:	a802      	add	r0, sp, #8
 8008db4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008db8:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8008dbc:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8008dc0:	899f      	ldrh	r7, [r3, #12]
 8008dc2:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8008dc6:	f006 f917 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008dca:	4668      	mov	r0, sp
 8008dcc:	f006 f914 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7ff ff81 	bl	8008cd8 <_Paint1Trans>
 8008dd6:	b170      	cbz	r0, 8008df6 <_PaintTransChildren+0x8a>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f006 f8f5 	bl	800efc8 <GUI_ALLOC_h2p>
 8008dde:	9000      	str	r0, [sp, #0]
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff ffc3 	bl	8008d6c <_PaintTransChildren>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f006 f8ee 	bl	800efc8 <GUI_ALLOC_h2p>
 8008dec:	9000      	str	r0, [sp, #0]
 8008dee:	4630      	mov	r0, r6
 8008df0:	f006 f8ea 	bl	800efc8 <GUI_ALLOC_h2p>
 8008df4:	9001      	str	r0, [sp, #4]
 8008df6:	4630      	mov	r0, r6
 8008df8:	f006 f8f0 	bl	800efdc <GUI_ALLOC_LockH>
 8008dfc:	9001      	str	r0, [sp, #4]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f006 f8ec 	bl	800efdc <GUI_ALLOC_LockH>
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	9000      	str	r0, [sp, #0]
 8008e08:	f8a3 9008 	strh.w	r9, [r3, #8]
 8008e0c:	f8a3 800a 	strh.w	r8, [r3, #10]
 8008e10:	819f      	strh	r7, [r3, #12]
 8008e12:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	4668      	mov	r0, sp
 8008e1a:	6a1c      	ldr	r4, [r3, #32]
 8008e1c:	f006 f8ec 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008e20:	e7b4      	b.n	8008d8c <_PaintTransChildren+0x20>
	...

08008e24 <WM__PaintWinAndOverlays>:
 8008e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	f006 f8d8 	bl	800efdc <GUI_ALLOC_LockH>
 8008e2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008e2e:	9001      	str	r0, [sp, #4]
 8008e30:	f640 0301 	movw	r3, #2049	; 0x801
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d005      	beq.n	8008e46 <WM__PaintWinAndOverlays+0x22>
 8008e3a:	a801      	add	r0, sp, #4
 8008e3c:	f006 f8dc 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff fe61 	bl	8008b08 <_Paint1>
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <WM__PaintWinAndOverlays+0x74>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	b313      	cbz	r3, 8008e92 <WM__PaintWinAndOverlays+0x6e>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff ff8d 	bl	8008d6c <_PaintTransChildren>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f006 f8b8 	bl	800efc8 <GUI_ALLOC_h2p>
 8008e58:	6985      	ldr	r5, [r0, #24]
 8008e5a:	6a04      	ldr	r4, [r0, #32]
 8008e5c:	b1cd      	cbz	r5, 8008e92 <WM__PaintWinAndOverlays+0x6e>
 8008e5e:	b194      	cbz	r4, 8008e86 <WM__PaintWinAndOverlays+0x62>
 8008e60:	4620      	mov	r0, r4
 8008e62:	f006 f8b1 	bl	800efc8 <GUI_ALLOC_h2p>
 8008e66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d102      	bne.n	8008e76 <WM__PaintWinAndOverlays+0x52>
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff ff31 	bl	8008cd8 <_Paint1Trans>
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7ff ff78 	bl	8008d6c <_PaintTransChildren>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f006 f8a3 	bl	800efc8 <GUI_ALLOC_h2p>
 8008e82:	6a04      	ldr	r4, [r0, #32]
 8008e84:	e7eb      	b.n	8008e5e <WM__PaintWinAndOverlays+0x3a>
 8008e86:	4628      	mov	r0, r5
 8008e88:	f006 f89e 	bl	800efc8 <GUI_ALLOC_h2p>
 8008e8c:	6a04      	ldr	r4, [r0, #32]
 8008e8e:	6985      	ldr	r5, [r0, #24]
 8008e90:	e7e4      	b.n	8008e5c <WM__PaintWinAndOverlays+0x38>
 8008e92:	b003      	add	sp, #12
 8008e94:	bd30      	pop	{r4, r5, pc}
 8008e96:	bf00      	nop
 8008e98:	2000567c 	.word	0x2000567c

08008e9c <_cbPaintMemDev>:
 8008e9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	4d17      	ldr	r5, [pc, #92]	; (8008f00 <_cbPaintMemDev+0x64>)
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ea8:	f006 f898 	bl	800efdc <GUI_ALLOC_LockH>
 8008eac:	682a      	ldr	r2, [r5, #0]
 8008eae:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8008eb2:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8008eb6:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8008eba:	89c7      	ldrh	r7, [r0, #14]
 8008ebc:	ac02      	add	r4, sp, #8
 8008ebe:	3208      	adds	r2, #8
 8008ec0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008ec4:	f100 0308 	add.w	r3, r0, #8
 8008ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ecc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f006 f891 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008ed6:	6830      	ldr	r0, [r6, #0]
 8008ed8:	f7ff ffa4 	bl	8008e24 <WM__PaintWinAndOverlays>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ee0:	f006 f87c 	bl	800efdc <GUI_ALLOC_LockH>
 8008ee4:	9001      	str	r0, [sp, #4]
 8008ee6:	f8a0 a008 	strh.w	sl, [r0, #8]
 8008eea:	f8a0 900a 	strh.w	r9, [r0, #10]
 8008eee:	f8a0 800c 	strh.w	r8, [r0, #12]
 8008ef2:	81c7      	strh	r7, [r0, #14]
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f006 f87f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008efa:	b002      	add	sp, #8
 8008efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f00:	20000084 	.word	0x20000084

08008f04 <WM__ClipAtParentBorders>:
 8008f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f06:	4607      	mov	r7, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f006 f866 	bl	800efdc <GUI_ALLOC_LockH>
 8008f10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f12:	ac02      	add	r4, sp, #8
 8008f14:	f013 0602 	ands.w	r6, r3, #2
 8008f18:	4601      	mov	r1, r0
 8008f1a:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008f1e:	d104      	bne.n	8008f2a <WM__ClipAtParentBorders+0x26>
 8008f20:	4620      	mov	r0, r4
 8008f22:	f006 f869 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008f26:	4630      	mov	r0, r6
 8008f28:	e016      	b.n	8008f58 <WM__ClipAtParentBorders+0x54>
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f003 fd34 	bl	800c998 <GUI__IntersectRect>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	699e      	ldr	r6, [r3, #24]
 8008f34:	4620      	mov	r0, r4
 8008f36:	b956      	cbnz	r6, 8008f4e <WM__ClipAtParentBorders+0x4a>
 8008f38:	f006 f85e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <WM__ClipAtParentBorders+0x58>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	4295      	cmp	r5, r2
 8008f42:	d008      	beq.n	8008f56 <WM__ClipAtParentBorders+0x52>
 8008f44:	6858      	ldr	r0, [r3, #4]
 8008f46:	1a2b      	subs	r3, r5, r0
 8008f48:	4258      	negs	r0, r3
 8008f4a:	4158      	adcs	r0, r3
 8008f4c:	e004      	b.n	8008f58 <WM__ClipAtParentBorders+0x54>
 8008f4e:	f006 f853 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008f52:	4635      	mov	r5, r6
 8008f54:	e7d9      	b.n	8008f0a <WM__ClipAtParentBorders+0x6>
 8008f56:	2001      	movs	r0, #1
 8008f58:	b003      	add	sp, #12
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5c:	2000562c 	.word	0x2000562c

08008f60 <WM__InsertWindowIntoList>:
 8008f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	b085      	sub	sp, #20
 8008f66:	460d      	mov	r5, r1
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d049      	beq.n	8009000 <WM__InsertWindowIntoList+0xa0>
 8008f6c:	f006 f836 	bl	800efdc <GUI_ALLOC_LockH>
 8008f70:	2300      	movs	r3, #0
 8008f72:	6203      	str	r3, [r0, #32]
 8008f74:	6185      	str	r5, [r0, #24]
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f006 f82f 	bl	800efdc <GUI_ALLOC_LockH>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	69c5      	ldr	r5, [r0, #28]
 8008f82:	9002      	str	r0, [sp, #8]
 8008f84:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8008f86:	b92d      	cbnz	r5, 8008f94 <WM__InsertWindowIntoList+0x34>
 8008f88:	61c4      	str	r4, [r0, #28]
 8008f8a:	a801      	add	r0, sp, #4
 8008f8c:	f006 f834 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008f90:	a802      	add	r0, sp, #8
 8008f92:	e033      	b.n	8008ffc <WM__InsertWindowIntoList+0x9c>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f006 f821 	bl	800efdc <GUI_ALLOC_LockH>
 8008f9a:	ae04      	add	r6, sp, #16
 8008f9c:	f007 0708 	and.w	r7, r7, #8
 8008fa0:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008fa4:	b977      	cbnz	r7, 8008fc4 <WM__InsertWindowIntoList+0x64>
 8008fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d50b      	bpl.n	8008fc4 <WM__InsertWindowIntoList+0x64>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	621d      	str	r5, [r3, #32]
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	a801      	add	r0, sp, #4
 8008fb4:	61dc      	str	r4, [r3, #28]
 8008fb6:	f006 f81f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008fba:	a802      	add	r0, sp, #8
 8008fbc:	f006 f81c 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	e01b      	b.n	8008ffc <WM__InsertWindowIntoList+0x9c>
 8008fc4:	a802      	add	r0, sp, #8
 8008fc6:	f006 f817 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f006 f814 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f005 fff9 	bl	800efc8 <GUI_ALLOC_h2p>
 8008fd6:	9003      	str	r0, [sp, #12]
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	6a1d      	ldr	r5, [r3, #32]
 8008fdc:	b90d      	cbnz	r5, 8008fe2 <WM__InsertWindowIntoList+0x82>
 8008fde:	621c      	str	r4, [r3, #32]
 8008fe0:	e00b      	b.n	8008ffa <WM__InsertWindowIntoList+0x9a>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f005 fff0 	bl	800efc8 <GUI_ALLOC_h2p>
 8008fe8:	2f00      	cmp	r7, #0
 8008fea:	d1f4      	bne.n	8008fd6 <WM__InsertWindowIntoList+0x76>
 8008fec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008fee:	071b      	lsls	r3, r3, #28
 8008ff0:	d5f1      	bpl.n	8008fd6 <WM__InsertWindowIntoList+0x76>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	621c      	str	r4, [r3, #32]
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	621d      	str	r5, [r3, #32]
 8008ffa:	a801      	add	r0, sp, #4
 8008ffc:	f005 fffc 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009000:	b005      	add	sp, #20
 8009002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009004 <WM__RemoveWindowFromList>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4604      	mov	r4, r0
 8009008:	f005 ffde 	bl	800efc8 <GUI_ALLOC_h2p>
 800900c:	4605      	mov	r5, r0
 800900e:	6980      	ldr	r0, [r0, #24]
 8009010:	b1a8      	cbz	r0, 800903e <WM__RemoveWindowFromList+0x3a>
 8009012:	f005 ffd9 	bl	800efc8 <GUI_ALLOC_h2p>
 8009016:	69c3      	ldr	r3, [r0, #28]
 8009018:	42a3      	cmp	r3, r4
 800901a:	4606      	mov	r6, r0
 800901c:	d105      	bne.n	800902a <WM__RemoveWindowFromList+0x26>
 800901e:	4618      	mov	r0, r3
 8009020:	f005 ffd2 	bl	800efc8 <GUI_ALLOC_h2p>
 8009024:	6a03      	ldr	r3, [r0, #32]
 8009026:	61f3      	str	r3, [r6, #28]
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	b143      	cbz	r3, 800903e <WM__RemoveWindowFromList+0x3a>
 800902c:	4618      	mov	r0, r3
 800902e:	f005 ffcb 	bl	800efc8 <GUI_ALLOC_h2p>
 8009032:	6a03      	ldr	r3, [r0, #32]
 8009034:	42a3      	cmp	r3, r4
 8009036:	d1f8      	bne.n	800902a <WM__RemoveWindowFromList+0x26>
 8009038:	6a2b      	ldr	r3, [r5, #32]
 800903a:	6203      	str	r3, [r0, #32]
 800903c:	bd70      	pop	{r4, r5, r6, pc}
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <WM__Client2Screen>:
 8009040:	4603      	mov	r3, r0
 8009042:	4608      	mov	r0, r1
 8009044:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009048:	f9b3 1000 	ldrsh.w	r1, [r3]
 800904c:	f004 bce9 	b.w	800da22 <GUI_MoveRect>

08009050 <_SetClipRectUserIntersect>:
 8009050:	4b11      	ldr	r3, [pc, #68]	; (8009098 <_SetClipRectUserIntersect+0x48>)
 8009052:	b530      	push	{r4, r5, lr}
 8009054:	681c      	ldr	r4, [r3, #0]
 8009056:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009058:	b085      	sub	sp, #20
 800905a:	4605      	mov	r5, r0
 800905c:	b1ba      	cbz	r2, 800908e <_SetClipRectUserIntersect+0x3e>
 800905e:	6810      	ldr	r0, [r2, #0]
 8009060:	6851      	ldr	r1, [r2, #4]
 8009062:	ab02      	add	r3, sp, #8
 8009064:	c303      	stmia	r3!, {r0, r1}
 8009066:	4b0d      	ldr	r3, [pc, #52]	; (800909c <_SetClipRectUserIntersect+0x4c>)
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	b900      	cbnz	r0, 800906e <_SetClipRectUserIntersect+0x1e>
 800906c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800906e:	f005 ffb5 	bl	800efdc <GUI_ALLOC_LockH>
 8009072:	ac04      	add	r4, sp, #16
 8009074:	a902      	add	r1, sp, #8
 8009076:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800907a:	f7ff ffe1 	bl	8009040 <WM__Client2Screen>
 800907e:	4620      	mov	r0, r4
 8009080:	f005 ffba 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009084:	a802      	add	r0, sp, #8
 8009086:	4629      	mov	r1, r5
 8009088:	f003 fc86 	bl	800c998 <GUI__IntersectRect>
 800908c:	a802      	add	r0, sp, #8
 800908e:	f002 ffa3 	bl	800bfd8 <LCD_SetClipRectEx>
 8009092:	b005      	add	sp, #20
 8009094:	bd30      	pop	{r4, r5, pc}
 8009096:	bf00      	nop
 8009098:	20000084 	.word	0x20000084
 800909c:	20005628 	.word	0x20005628

080090a0 <WM__ActivateClipRect>:
 80090a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <WM__ActivateClipRect+0x3c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80090aa:	b10a      	cbz	r2, 80090b0 <WM__ActivateClipRect+0x10>
 80090ac:	480c      	ldr	r0, [pc, #48]	; (80090e0 <WM__ActivateClipRect+0x40>)
 80090ae:	e011      	b.n	80090d4 <WM__ActivateClipRect+0x34>
 80090b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80090b2:	f005 ff93 	bl	800efdc <GUI_ALLOC_LockH>
 80090b6:	9001      	str	r0, [sp, #4]
 80090b8:	c803      	ldmia	r0, {r0, r1}
 80090ba:	ac02      	add	r4, sp, #8
 80090bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80090c0:	a801      	add	r0, sp, #4
 80090c2:	f005 ff99 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <WM__ActivateClipRect+0x44>)
 80090c8:	6819      	ldr	r1, [r3, #0]
 80090ca:	b111      	cbz	r1, 80090d2 <WM__ActivateClipRect+0x32>
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff ff19 	bl	8008f04 <WM__ClipAtParentBorders>
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff ffbc 	bl	8009050 <_SetClipRectUserIntersect>
 80090d8:	b004      	add	sp, #16
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	20000084 	.word	0x20000084
 80090e0:	20005450 	.word	0x20005450
 80090e4:	20005628 	.word	0x20005628

080090e8 <WM__IsWindow>:
 80090e8:	4b06      	ldr	r3, [pc, #24]	; (8009104 <WM__IsWindow+0x1c>)
 80090ea:	b510      	push	{r4, lr}
 80090ec:	4604      	mov	r4, r0
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	b128      	cbz	r0, 80090fe <WM__IsWindow+0x16>
 80090f2:	42a0      	cmp	r0, r4
 80090f4:	d004      	beq.n	8009100 <WM__IsWindow+0x18>
 80090f6:	f005 ff67 	bl	800efc8 <GUI_ALLOC_h2p>
 80090fa:	6940      	ldr	r0, [r0, #20]
 80090fc:	e7f8      	b.n	80090f0 <WM__IsWindow+0x8>
 80090fe:	bd10      	pop	{r4, pc}
 8009100:	2001      	movs	r0, #1
 8009102:	bd10      	pop	{r4, pc}
 8009104:	20005648 	.word	0x20005648

08009108 <WM__InvalidateDrawAndDescs>:
 8009108:	b513      	push	{r0, r1, r4, lr}
 800910a:	4604      	mov	r4, r0
 800910c:	b300      	cbz	r0, 8009150 <WM__InvalidateDrawAndDescs+0x48>
 800910e:	f005 ff65 	bl	800efdc <GUI_ALLOC_LockH>
 8009112:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009114:	9001      	str	r0, [sp, #4]
 8009116:	0793      	lsls	r3, r2, #30
 8009118:	d517      	bpl.n	800914a <WM__InvalidateDrawAndDescs+0x42>
 800911a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800911c:	b140      	cbz	r0, 8009130 <WM__InvalidateDrawAndDescs+0x28>
 800911e:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <WM__InvalidateDrawAndDescs+0x4c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	42a3      	cmp	r3, r4
 8009124:	d004      	beq.n	8009130 <WM__InvalidateDrawAndDescs+0x28>
 8009126:	f001 fdf9 	bl	800ad1c <GUI_MEMDEV_Delete>
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	625a      	str	r2, [r3, #36]	; 0x24
 8009130:	4620      	mov	r0, r4
 8009132:	f7ff f9ab 	bl	800848c <WM_GetFirstChild>
 8009136:	4604      	mov	r4, r0
 8009138:	b13c      	cbz	r4, 800914a <WM__InvalidateDrawAndDescs+0x42>
 800913a:	4620      	mov	r0, r4
 800913c:	f7ff ffe4 	bl	8009108 <WM__InvalidateDrawAndDescs>
 8009140:	4620      	mov	r0, r4
 8009142:	f005 ff41 	bl	800efc8 <GUI_ALLOC_h2p>
 8009146:	6a04      	ldr	r4, [r0, #32]
 8009148:	e7f6      	b.n	8009138 <WM__InvalidateDrawAndDescs+0x30>
 800914a:	a801      	add	r0, sp, #4
 800914c:	f005 ff54 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009150:	b002      	add	sp, #8
 8009152:	bd10      	pop	{r4, pc}
 8009154:	20005678 	.word	0x20005678

08009158 <WM__RectIsNZ>:
 8009158:	f9b0 2000 	ldrsh.w	r2, [r0]
 800915c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	dc08      	bgt.n	8009176 <WM__RectIsNZ+0x1e>
 8009164:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009168:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800916c:	429a      	cmp	r2, r3
 800916e:	bfcc      	ite	gt
 8009170:	2000      	movgt	r0, #0
 8009172:	2001      	movle	r0, #1
 8009174:	4770      	bx	lr
 8009176:	2000      	movs	r0, #0
 8009178:	4770      	bx	lr

0800917a <WM_SendMessage>:
 800917a:	b108      	cbz	r0, 8009180 <WM_SendMessage+0x6>
 800917c:	f7fe bee6 	b.w	8007f4c <WM__SendMessage>
 8009180:	4770      	bx	lr

08009182 <WM__SendMsgNoData>:
 8009182:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009184:	ab04      	add	r3, sp, #16
 8009186:	9001      	str	r0, [sp, #4]
 8009188:	f843 1d10 	str.w	r1, [r3, #-16]!
 800918c:	4669      	mov	r1, sp
 800918e:	f7fe fedd 	bl	8007f4c <WM__SendMessage>
 8009192:	b005      	add	sp, #20
 8009194:	f85d fb04 	ldr.w	pc, [sp], #4

08009198 <WM__GetClientRectWin>:
 8009198:	2300      	movs	r3, #0
 800919a:	800b      	strh	r3, [r1, #0]
 800919c:	8882      	ldrh	r2, [r0, #4]
 800919e:	804b      	strh	r3, [r1, #2]
 80091a0:	8803      	ldrh	r3, [r0, #0]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	808b      	strh	r3, [r1, #4]
 80091a6:	88c2      	ldrh	r2, [r0, #6]
 80091a8:	8843      	ldrh	r3, [r0, #2]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	80cb      	strh	r3, [r1, #6]
 80091ae:	4770      	bx	lr

080091b0 <WM__GetTopLevelLayer>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	f005 ff08 	bl	800efc8 <GUI_ALLOC_h2p>
 80091b8:	6980      	ldr	r0, [r0, #24]
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d1f9      	bne.n	80091b2 <WM__GetTopLevelLayer+0x2>
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <WM__GetTopLevelLayer+0x24>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4294      	cmp	r4, r2
 80091c4:	d005      	beq.n	80091d2 <WM__GetTopLevelLayer+0x22>
 80091c6:	6858      	ldr	r0, [r3, #4]
 80091c8:	4284      	cmp	r4, r0
 80091ca:	bf14      	ite	ne
 80091cc:	f04f 30ff 	movne.w	r0, #4294967295
 80091d0:	2001      	moveq	r0, #1
 80091d2:	bd10      	pop	{r4, pc}
 80091d4:	2000562c 	.word	0x2000562c

080091d8 <_Invalidate1Abs>:
 80091d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091da:	b085      	sub	sp, #20
 80091dc:	4606      	mov	r6, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4617      	mov	r7, r2
 80091e2:	f005 fef1 	bl	800efc8 <GUI_ALLOC_h2p>
 80091e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80091e8:	9001      	str	r0, [sp, #4]
 80091ea:	07a3      	lsls	r3, r4, #30
 80091ec:	d53e      	bpl.n	800926c <_Invalidate1Abs+0x94>
 80091ee:	4628      	mov	r0, r5
 80091f0:	f7ff ffb2 	bl	8009158 <WM__RectIsNZ>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d039      	beq.n	800926c <_Invalidate1Abs+0x94>
 80091f8:	f640 0301 	movw	r3, #2049	; 0x801
 80091fc:	4023      	ands	r3, r4
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d034      	beq.n	800926c <_Invalidate1Abs+0x94>
 8009202:	4630      	mov	r0, r6
 8009204:	f005 feea 	bl	800efdc <GUI_ALLOC_LockH>
 8009208:	ac02      	add	r4, sp, #8
 800920a:	4602      	mov	r2, r0
 800920c:	9001      	str	r0, [sp, #4]
 800920e:	4629      	mov	r1, r5
 8009210:	4620      	mov	r0, r4
 8009212:	f003 fbdf 	bl	800c9d4 <GUI__IntersectRects>
 8009216:	4620      	mov	r0, r4
 8009218:	f7ff ff9e 	bl	8009158 <WM__RectIsNZ>
 800921c:	b318      	cbz	r0, 8009266 <_Invalidate1Abs+0x8e>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009222:	f244 0120 	movw	r1, #16416	; 0x4020
 8009226:	4011      	ands	r1, r2
 8009228:	f103 0508 	add.w	r5, r3, #8
 800922c:	b129      	cbz	r1, 800923a <_Invalidate1Abs+0x62>
 800922e:	4628      	mov	r0, r5
 8009230:	4629      	mov	r1, r5
 8009232:	4622      	mov	r2, r4
 8009234:	f004 fbca 	bl	800d9cc <GUI_MergeRect>
 8009238:	e015      	b.n	8009266 <_Invalidate1Abs+0x8e>
 800923a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800923e:	4317      	orrs	r7, r2
 8009240:	e885 0003 	stmia.w	r5, {r0, r1}
 8009244:	629f      	str	r7, [r3, #40]	; 0x28
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <_Invalidate1Abs+0x98>)
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	4630      	mov	r0, r6
 800924c:	3201      	adds	r2, #1
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	f7ff ffae 	bl	80091b0 <WM__GetTopLevelLayer>
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <_Invalidate1Abs+0x9c>)
 8009256:	2201      	movs	r2, #1
 8009258:	fa02 f000 	lsl.w	r0, r2, r0
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4302      	orrs	r2, r0
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	f003 fee7 	bl	800d034 <GUI_SignalEvent>
 8009266:	a801      	add	r0, sp, #4
 8009268:	f005 fec6 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800926c:	b005      	add	sp, #20
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	20005644 	.word	0x20005644
 8009274:	20005654 	.word	0x20005654

08009278 <WM__Invalidate1Abs>:
 8009278:	2220      	movs	r2, #32
 800927a:	f7ff bfad 	b.w	80091d8 <_Invalidate1Abs>

0800927e <WM_InvalidateWindowAndDescsEx>:
 800927e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009280:	460f      	mov	r7, r1
 8009282:	b085      	sub	sp, #20
 8009284:	4615      	mov	r5, r2
 8009286:	4606      	mov	r6, r0
 8009288:	b348      	cbz	r0, 80092de <WM_InvalidateWindowAndDescsEx+0x60>
 800928a:	f005 fea7 	bl	800efdc <GUI_ALLOC_LockH>
 800928e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009290:	ac04      	add	r4, sp, #16
 8009292:	079b      	lsls	r3, r3, #30
 8009294:	4602      	mov	r2, r0
 8009296:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800929a:	d403      	bmi.n	80092a4 <WM_InvalidateWindowAndDescsEx+0x26>
 800929c:	4620      	mov	r0, r4
 800929e:	f005 feab 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80092a2:	e01c      	b.n	80092de <WM_InvalidateWindowAndDescsEx+0x60>
 80092a4:	a802      	add	r0, sp, #8
 80092a6:	4639      	mov	r1, r7
 80092a8:	f003 fb94 	bl	800c9d4 <GUI__IntersectRects>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0f5      	beq.n	800929c <WM_InvalidateWindowAndDescsEx+0x1e>
 80092b0:	4620      	mov	r0, r4
 80092b2:	f005 fea1 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80092b6:	4630      	mov	r0, r6
 80092b8:	a902      	add	r1, sp, #8
 80092ba:	462a      	mov	r2, r5
 80092bc:	f7ff ff8c 	bl	80091d8 <_Invalidate1Abs>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff f8e3 	bl	800848c <WM_GetFirstChild>
 80092c6:	4604      	mov	r4, r0
 80092c8:	b14c      	cbz	r4, 80092de <WM_InvalidateWindowAndDescsEx+0x60>
 80092ca:	4620      	mov	r0, r4
 80092cc:	a902      	add	r1, sp, #8
 80092ce:	462a      	mov	r2, r5
 80092d0:	f7ff ffd5 	bl	800927e <WM_InvalidateWindowAndDescsEx>
 80092d4:	4620      	mov	r0, r4
 80092d6:	f005 fe77 	bl	800efc8 <GUI_ALLOC_h2p>
 80092da:	6a04      	ldr	r4, [r0, #32]
 80092dc:	e7f4      	b.n	80092c8 <WM_InvalidateWindowAndDescsEx+0x4a>
 80092de:	b005      	add	sp, #20
 80092e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092e2 <WM__InvalidateRect>:
 80092e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80092e6:	4680      	mov	r8, r0
 80092e8:	4617      	mov	r7, r2
 80092ea:	461d      	mov	r5, r3
 80092ec:	460c      	mov	r4, r1
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d030      	beq.n	8009354 <WM__InvalidateRect+0x72>
 80092f2:	4608      	mov	r0, r1
 80092f4:	f005 fe72 	bl	800efdc <GUI_ALLOC_LockH>
 80092f8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80092fa:	9001      	str	r0, [sp, #4]
 80092fc:	07b3      	lsls	r3, r6, #30
 80092fe:	4602      	mov	r2, r0
 8009300:	d525      	bpl.n	800934e <WM__InvalidateRect+0x6c>
 8009302:	a802      	add	r0, sp, #8
 8009304:	4641      	mov	r1, r8
 8009306:	f003 fb65 	bl	800c9d4 <GUI__IntersectRects>
 800930a:	b300      	cbz	r0, 800934e <WM__InvalidateRect+0x6c>
 800930c:	f640 0301 	movw	r3, #2049	; 0x801
 8009310:	4033      	ands	r3, r6
 8009312:	2b01      	cmp	r3, #1
 8009314:	d107      	bne.n	8009326 <WM__InvalidateRect+0x44>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	a802      	add	r0, sp, #8
 800931a:	6999      	ldr	r1, [r3, #24]
 800931c:	6a1a      	ldr	r2, [r3, #32]
 800931e:	462b      	mov	r3, r5
 8009320:	f7ff ffdf 	bl	80092e2 <WM__InvalidateRect>
 8009324:	e004      	b.n	8009330 <WM__InvalidateRect+0x4e>
 8009326:	4620      	mov	r0, r4
 8009328:	a902      	add	r1, sp, #8
 800932a:	462a      	mov	r2, r5
 800932c:	f7ff ff54 	bl	80091d8 <_Invalidate1Abs>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	69dc      	ldr	r4, [r3, #28]
 8009334:	b15c      	cbz	r4, 800934e <WM__InvalidateRect+0x6c>
 8009336:	42bc      	cmp	r4, r7
 8009338:	d009      	beq.n	800934e <WM__InvalidateRect+0x6c>
 800933a:	4620      	mov	r0, r4
 800933c:	a902      	add	r1, sp, #8
 800933e:	462a      	mov	r2, r5
 8009340:	f7ff ff9d 	bl	800927e <WM_InvalidateWindowAndDescsEx>
 8009344:	4620      	mov	r0, r4
 8009346:	f005 fe3f 	bl	800efc8 <GUI_ALLOC_h2p>
 800934a:	6a04      	ldr	r4, [r0, #32]
 800934c:	e7f2      	b.n	8009334 <WM__InvalidateRect+0x52>
 800934e:	a801      	add	r0, sp, #4
 8009350:	f005 fe52 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009354:	b004      	add	sp, #16
 8009356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800935a <WM__InvalidateParent>:
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	4605      	mov	r5, r0
 800935e:	4608      	mov	r0, r1
 8009360:	460c      	mov	r4, r1
 8009362:	4616      	mov	r6, r2
 8009364:	f005 fe30 	bl	800efc8 <GUI_ALLOC_h2p>
 8009368:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800936a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800936e:	4628      	mov	r0, r5
 8009370:	4621      	mov	r1, r4
 8009372:	4632      	mov	r2, r6
 8009374:	bf0c      	ite	eq
 8009376:	2320      	moveq	r3, #32
 8009378:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800937c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009380:	f7ff bfaf 	b.w	80092e2 <WM__InvalidateRect>

08009384 <WM__InvalidateRectEx>:
 8009384:	2320      	movs	r3, #32
 8009386:	f7ff bfac 	b.w	80092e2 <WM__InvalidateRect>

0800938a <WM__DetachWindow>:
 800938a:	b513      	push	{r0, r1, r4, lr}
 800938c:	4604      	mov	r4, r0
 800938e:	f005 fe25 	bl	800efdc <GUI_ALLOC_LockH>
 8009392:	6981      	ldr	r1, [r0, #24]
 8009394:	9001      	str	r0, [sp, #4]
 8009396:	b141      	cbz	r1, 80093aa <WM__DetachWindow+0x20>
 8009398:	6a02      	ldr	r2, [r0, #32]
 800939a:	f7ff fff3 	bl	8009384 <WM__InvalidateRectEx>
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff fe30 	bl	8009004 <WM__RemoveWindowFromList>
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	619a      	str	r2, [r3, #24]
 80093aa:	a801      	add	r0, sp, #4
 80093ac:	f005 fe24 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80093b0:	b002      	add	sp, #8
 80093b2:	bd10      	pop	{r4, pc}

080093b4 <WM_InvalidateRect>:
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	460f      	mov	r7, r1
 80093b8:	b087      	sub	sp, #28
 80093ba:	4605      	mov	r5, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d033      	beq.n	8009428 <WM_InvalidateRect+0x74>
 80093c0:	f005 fe0c 	bl	800efdc <GUI_ALLOC_LockH>
 80093c4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80093c6:	9001      	str	r0, [sp, #4]
 80093c8:	07b2      	lsls	r2, r6, #30
 80093ca:	d52a      	bpl.n	8009422 <WM_InvalidateRect+0x6e>
 80093cc:	c803      	ldmia	r0, {r0, r1}
 80093ce:	ac04      	add	r4, sp, #16
 80093d0:	03f3      	lsls	r3, r6, #15
 80093d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80093d6:	d502      	bpl.n	80093de <WM_InvalidateRect+0x2a>
 80093d8:	4628      	mov	r0, r5
 80093da:	f7ff fe95 	bl	8009108 <WM__InvalidateDrawAndDescs>
 80093de:	b15f      	cbz	r7, 80093f8 <WM_InvalidateRect+0x44>
 80093e0:	6838      	ldr	r0, [r7, #0]
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	ab02      	add	r3, sp, #8
 80093e6:	c303      	stmia	r3!, {r0, r1}
 80093e8:	9801      	ldr	r0, [sp, #4]
 80093ea:	a902      	add	r1, sp, #8
 80093ec:	f7ff fe28 	bl	8009040 <WM__Client2Screen>
 80093f0:	4620      	mov	r0, r4
 80093f2:	a902      	add	r1, sp, #8
 80093f4:	f003 fad0 	bl	800c998 <GUI__IntersectRect>
 80093f8:	4620      	mov	r0, r4
 80093fa:	4629      	mov	r1, r5
 80093fc:	f7ff fd82 	bl	8008f04 <WM__ClipAtParentBorders>
 8009400:	b178      	cbz	r0, 8009422 <WM_InvalidateRect+0x6e>
 8009402:	f640 0301 	movw	r3, #2049	; 0x801
 8009406:	4033      	ands	r3, r6
 8009408:	2b01      	cmp	r3, #1
 800940a:	d106      	bne.n	800941a <WM_InvalidateRect+0x66>
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	4620      	mov	r0, r4
 8009410:	6999      	ldr	r1, [r3, #24]
 8009412:	6a1a      	ldr	r2, [r3, #32]
 8009414:	f7ff ffb6 	bl	8009384 <WM__InvalidateRectEx>
 8009418:	e003      	b.n	8009422 <WM_InvalidateRect+0x6e>
 800941a:	4628      	mov	r0, r5
 800941c:	4621      	mov	r1, r4
 800941e:	f7ff ff2b 	bl	8009278 <WM__Invalidate1Abs>
 8009422:	a801      	add	r0, sp, #4
 8009424:	f005 fde8 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009428:	b007      	add	sp, #28
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800942c <WM_InvalidateWindow>:
 800942c:	2100      	movs	r1, #0
 800942e:	f7ff bfc1 	b.w	80093b4 <WM_InvalidateRect>

08009432 <WM__SelectTopLevelLayer>:
 8009432:	b508      	push	{r3, lr}
 8009434:	f7ff febc 	bl	80091b0 <WM__GetTopLevelLayer>
 8009438:	2800      	cmp	r0, #0
 800943a:	db03      	blt.n	8009444 <WM__SelectTopLevelLayer+0x12>
 800943c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009440:	f003 bedc 	b.w	800d1fc <GUI_SelectLayer>
 8009444:	bd08      	pop	{r3, pc}
	...

08009448 <WM_SelectWindow>:
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <WM_SelectWindow+0x38>)
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8009450:	4604      	mov	r4, r0
 8009452:	4616      	mov	r6, r2
 8009454:	b908      	cbnz	r0, 800945a <WM_SelectWindow+0x12>
 8009456:	4a0b      	ldr	r2, [pc, #44]	; (8009484 <WM_SelectWindow+0x3c>)
 8009458:	6814      	ldr	r4, [r2, #0]
 800945a:	649c      	str	r4, [r3, #72]	; 0x48
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff ffe8 	bl	8009432 <WM__SelectTopLevelLayer>
 8009462:	f003 f9b9 	bl	800c7d8 <LCD_SetClipRectMax>
 8009466:	4620      	mov	r0, r4
 8009468:	f005 fdae 	bl	800efc8 <GUI_ALLOC_h2p>
 800946c:	6833      	ldr	r3, [r6, #0]
 800946e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8009472:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009476:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009478:	651a      	str	r2, [r3, #80]	; 0x50
 800947a:	4628      	mov	r0, r5
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	bf00      	nop
 8009480:	20000084 	.word	0x20000084
 8009484:	20005648 	.word	0x20005648

08009488 <WM_CreateWindowAsChild>:
 8009488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800948e:	469b      	mov	fp, r3
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <WM_CreateWindowAsChild+0x138>)
 8009492:	4607      	mov	r7, r0
 8009494:	4688      	mov	r8, r1
 8009496:	4692      	mov	sl, r2
 8009498:	681e      	ldr	r6, [r3, #0]
 800949a:	bb65      	cbnz	r5, 80094f6 <WM_CreateWindowAsChild+0x6e>
 800949c:	4b49      	ldr	r3, [pc, #292]	; (80095c4 <WM_CreateWindowAsChild+0x13c>)
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b363      	cbz	r3, 80094fc <WM_CreateWindowAsChild+0x74>
 80094a2:	4b49      	ldr	r3, [pc, #292]	; (80095c8 <WM_CreateWindowAsChild+0x140>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	7c5a      	ldrb	r2, [r3, #17]
 80094a8:	4b48      	ldr	r3, [pc, #288]	; (80095cc <WM_CreateWindowAsChild+0x144>)
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	d024      	beq.n	80094fc <WM_CreateWindowAsChild+0x74>
 80094b2:	b31b      	cbz	r3, 80094fc <WM_CreateWindowAsChild+0x74>
 80094b4:	461d      	mov	r5, r3
 80094b6:	4628      	mov	r0, r5
 80094b8:	f005 fd90 	bl	800efdc <GUI_ALLOC_LockH>
 80094bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80094c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80094c4:	9001      	str	r0, [sp, #4]
 80094c6:	4417      	add	r7, r2
 80094c8:	4498      	add	r8, r3
 80094ca:	f1ba 0f00 	cmp.w	sl, #0
 80094ce:	d105      	bne.n	80094dc <WM_CreateWindowAsChild+0x54>
 80094d0:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 80094d4:	ebc2 0a0a 	rsb	sl, r2, sl
 80094d8:	f10a 0a01 	add.w	sl, sl, #1
 80094dc:	f1bb 0f00 	cmp.w	fp, #0
 80094e0:	d105      	bne.n	80094ee <WM_CreateWindowAsChild+0x66>
 80094e2:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 80094e6:	ebc3 0b0b 	rsb	fp, r3, fp
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	a801      	add	r0, sp, #4
 80094f0:	f005 fd82 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80094f4:	e002      	b.n	80094fc <WM_CreateWindowAsChild+0x74>
 80094f6:	1c6b      	adds	r3, r5, #1
 80094f8:	d1dd      	bne.n	80094b6 <WM_CreateWindowAsChild+0x2e>
 80094fa:	2500      	movs	r5, #0
 80094fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80094fe:	302c      	adds	r0, #44	; 0x2c
 8009500:	f005 ff44 	bl	800f38c <GUI_ALLOC_AllocZero>
 8009504:	4604      	mov	r4, r0
 8009506:	2800      	cmp	r0, #0
 8009508:	d056      	beq.n	80095b8 <WM_CreateWindowAsChild+0x130>
 800950a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800950c:	431e      	orrs	r6, r3
 800950e:	4b2d      	ldr	r3, [pc, #180]	; (80095c4 <WM_CreateWindowAsChild+0x13c>)
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	3201      	adds	r2, #1
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	f005 fd61 	bl	800efdc <GUI_ALLOC_LockH>
 800951a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800951c:	6103      	str	r3, [r0, #16]
 800951e:	f10d 0908 	add.w	r9, sp, #8
 8009522:	4b2b      	ldr	r3, [pc, #172]	; (80095d0 <WM_CreateWindowAsChild+0x148>)
 8009524:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009526:	f849 0d08 	str.w	r0, [r9, #-8]!
 800952a:	4033      	ands	r3, r6
 800952c:	8007      	strh	r7, [r0, #0]
 800952e:	f8a0 8002 	strh.w	r8, [r0, #2]
 8009532:	4457      	add	r7, sl
 8009534:	44d8      	add	r8, fp
 8009536:	4313      	orrs	r3, r2
 8009538:	3f01      	subs	r7, #1
 800953a:	f108 38ff 	add.w	r8, r8, #4294967295
 800953e:	6283      	str	r3, [r0, #40]	; 0x28
 8009540:	8087      	strh	r7, [r0, #4]
 8009542:	f8a0 8006 	strh.w	r8, [r0, #6]
 8009546:	4668      	mov	r0, sp
 8009548:	f005 fd56 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800954c:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <WM_CreateWindowAsChild+0x14c>)
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	b148      	cbz	r0, 8009566 <WM_CreateWindowAsChild+0xde>
 8009552:	f005 fd39 	bl	800efc8 <GUI_ALLOC_h2p>
 8009556:	4607      	mov	r7, r0
 8009558:	4620      	mov	r0, r4
 800955a:	f005 fd35 	bl	800efc8 <GUI_ALLOC_h2p>
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	6143      	str	r3, [r0, #20]
 8009562:	617c      	str	r4, [r7, #20]
 8009564:	e000      	b.n	8009568 <WM_CreateWindowAsChild+0xe0>
 8009566:	601c      	str	r4, [r3, #0]
 8009568:	4629      	mov	r1, r5
 800956a:	4620      	mov	r0, r4
 800956c:	f7ff fcf8 	bl	8008f60 <WM__InsertWindowIntoList>
 8009570:	06b5      	lsls	r5, r6, #26
 8009572:	d502      	bpl.n	800957a <WM_CreateWindowAsChild+0xf2>
 8009574:	4620      	mov	r0, r4
 8009576:	f7ff ff67 	bl	8009448 <WM_SelectWindow>
 800957a:	07f0      	lsls	r0, r6, #31
 800957c:	d503      	bpl.n	8009586 <WM_CreateWindowAsChild+0xfe>
 800957e:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <WM_CreateWindowAsChild+0x150>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	3201      	adds	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	0671      	lsls	r1, r6, #25
 8009588:	d502      	bpl.n	8009590 <WM_CreateWindowAsChild+0x108>
 800958a:	4620      	mov	r0, r4
 800958c:	f7fe fffb 	bl	8008586 <WM_BringToBottom>
 8009590:	07b2      	lsls	r2, r6, #30
 8009592:	d50d      	bpl.n	80095b0 <WM_CreateWindowAsChild+0x128>
 8009594:	4620      	mov	r0, r4
 8009596:	f005 fd21 	bl	800efdc <GUI_ALLOC_LockH>
 800959a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800959c:	9000      	str	r0, [sp, #0]
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	6283      	str	r3, [r0, #40]	; 0x28
 80095a4:	4668      	mov	r0, sp
 80095a6:	f005 fd27 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff ff3e 	bl	800942c <WM_InvalidateWindow>
 80095b0:	4620      	mov	r0, r4
 80095b2:	2101      	movs	r1, #1
 80095b4:	f7ff fde5 	bl	8009182 <WM__SendMsgNoData>
 80095b8:	4620      	mov	r0, r4
 80095ba:	b003      	add	sp, #12
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	2000565c 	.word	0x2000565c
 80095c4:	20005624 	.word	0x20005624
 80095c8:	20000084 	.word	0x20000084
 80095cc:	2000562c 	.word	0x2000562c
 80095d0:	003f3f9f 	.word	0x003f3f9f
 80095d4:	20005648 	.word	0x20005648
 80095d8:	2000567c 	.word	0x2000567c

080095dc <WM_DeleteWindow>:
 80095dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095de:	4604      	mov	r4, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d06e      	beq.n	80096c2 <WM_DeleteWindow+0xe6>
 80095e4:	f7ff fd80 	bl	80090e8 <WM__IsWindow>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d06a      	beq.n	80096c2 <WM_DeleteWindow+0xe6>
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff fddf 	bl	80091b0 <WM__GetTopLevelLayer>
 80095f2:	210b      	movs	r1, #11
 80095f4:	4605      	mov	r5, r0
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7ff fdc3 	bl	8009182 <WM__SendMsgNoData>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f006 fad9 	bl	800fbb4 <WM__DeleteAssocTimer>
 8009602:	4620      	mov	r0, r4
 8009604:	f005 fcea 	bl	800efdc <GUI_ALLOC_LockH>
 8009608:	9001      	str	r0, [sp, #4]
 800960a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800960c:	b108      	cbz	r0, 8009612 <WM_DeleteWindow+0x36>
 800960e:	f001 fb85 	bl	800ad1c <GUI_MEMDEV_Delete>
 8009612:	4b2d      	ldr	r3, [pc, #180]	; (80096c8 <WM_DeleteWindow+0xec>)
 8009614:	4a2d      	ldr	r2, [pc, #180]	; (80096cc <WM_DeleteWindow+0xf0>)
 8009616:	2100      	movs	r1, #0
 8009618:	6019      	str	r1, [r3, #0]
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <WM_DeleteWindow+0xf4>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009622:	42a0      	cmp	r0, r4
 8009624:	bf08      	it	eq
 8009626:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800962a:	4a2a      	ldr	r2, [pc, #168]	; (80096d4 <WM_DeleteWindow+0xf8>)
 800962c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009630:	42a1      	cmp	r1, r4
 8009632:	bf04      	itt	eq
 8009634:	2100      	moveq	r1, #0
 8009636:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800963a:	4b27      	ldr	r3, [pc, #156]	; (80096d8 <WM_DeleteWindow+0xfc>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	b12b      	cbz	r3, 800964c <WM_DeleteWindow+0x70>
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	42a2      	cmp	r2, r4
 8009644:	bf04      	itt	eq
 8009646:	2200      	moveq	r2, #0
 8009648:	605a      	streq	r2, [r3, #4]
 800964a:	e7f7      	b.n	800963c <WM_DeleteWindow+0x60>
 800964c:	4620      	mov	r0, r4
 800964e:	2107      	movs	r1, #7
 8009650:	f7ff f8c5 	bl	80087de <WM_NotifyParent>
 8009654:	9e01      	ldr	r6, [sp, #4]
 8009656:	69f0      	ldr	r0, [r6, #28]
 8009658:	f7ff ffc0 	bl	80095dc <WM_DeleteWindow>
 800965c:	69f3      	ldr	r3, [r6, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1f9      	bne.n	8009656 <WM_DeleteWindow+0x7a>
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff fe91 	bl	800938a <WM__DetachWindow>
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <WM_DeleteWindow+0x100>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	b150      	cbz	r0, 8009684 <WM_DeleteWindow+0xa8>
 800966e:	f005 fcab 	bl	800efc8 <GUI_ALLOC_h2p>
 8009672:	4606      	mov	r6, r0
 8009674:	6940      	ldr	r0, [r0, #20]
 8009676:	42a0      	cmp	r0, r4
 8009678:	d1f8      	bne.n	800966c <WM_DeleteWindow+0x90>
 800967a:	4620      	mov	r0, r4
 800967c:	f005 fca4 	bl	800efc8 <GUI_ALLOC_h2p>
 8009680:	6943      	ldr	r3, [r0, #20]
 8009682:	6173      	str	r3, [r6, #20]
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	07da      	lsls	r2, r3, #31
 800968a:	d503      	bpl.n	8009694 <WM_DeleteWindow+0xb8>
 800968c:	4a14      	ldr	r2, [pc, #80]	; (80096e0 <WM_DeleteWindow+0x104>)
 800968e:	6811      	ldr	r1, [r2, #0]
 8009690:	3901      	subs	r1, #1
 8009692:	6011      	str	r1, [r2, #0]
 8009694:	069b      	lsls	r3, r3, #26
 8009696:	d503      	bpl.n	80096a0 <WM_DeleteWindow+0xc4>
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <WM_DeleteWindow+0x108>)
 800969a:	881a      	ldrh	r2, [r3, #0]
 800969c:	3a01      	subs	r2, #1
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	a801      	add	r0, sp, #4
 80096a2:	f005 fca9 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <WM_DeleteWindow+0x10c>)
 80096a8:	881a      	ldrh	r2, [r3, #0]
 80096aa:	4620      	mov	r0, r4
 80096ac:	3a01      	subs	r2, #1
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	f005 fcce 	bl	800f050 <GUI_ALLOC_Free>
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	db04      	blt.n	80096c2 <WM_DeleteWindow+0xe6>
 80096b8:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <WM_DeleteWindow+0x110>)
 80096ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096be:	f7ff fec3 	bl	8009448 <WM_SelectWindow>
 80096c2:	b002      	add	sp, #8
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	bf00      	nop
 80096c8:	20005460 	.word	0x20005460
 80096cc:	2000563c 	.word	0x2000563c
 80096d0:	2000564c 	.word	0x2000564c
 80096d4:	20005670 	.word	0x20005670
 80096d8:	20005668 	.word	0x20005668
 80096dc:	20005648 	.word	0x20005648
 80096e0:	2000567c 	.word	0x2000567c
 80096e4:	20005644 	.word	0x20005644
 80096e8:	20005624 	.word	0x20005624
 80096ec:	2000562c 	.word	0x2000562c

080096f0 <_Exec1Input>:
 80096f0:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <_Exec1Input+0x70>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096f6:	461e      	mov	r6, r3
 80096f8:	b1d2      	cbz	r2, 8009730 <_Exec1Input+0x40>
 80096fa:	4b1a      	ldr	r3, [pc, #104]	; (8009764 <_Exec1Input+0x74>)
 80096fc:	681c      	ldr	r4, [r3, #0]
 80096fe:	b1b4      	cbz	r4, 800972e <_Exec1Input+0x3e>
 8009700:	4620      	mov	r0, r4
 8009702:	f005 fc6b 	bl	800efdc <GUI_ALLOC_LockH>
 8009706:	4603      	mov	r3, r0
 8009708:	a802      	add	r0, sp, #8
 800970a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800970c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009710:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009714:	695d      	ldr	r5, [r3, #20]
 8009716:	d006      	beq.n	8009726 <_Exec1Input+0x36>
 8009718:	f005 fc6e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff ff5d 	bl	80095dc <WM_DeleteWindow>
 8009722:	462c      	mov	r4, r5
 8009724:	e7eb      	b.n	80096fe <_Exec1Input+0xe>
 8009726:	462c      	mov	r4, r5
 8009728:	f005 fc66 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800972c:	e7e7      	b.n	80096fe <_Exec1Input+0xe>
 800972e:	6034      	str	r4, [r6, #0]
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <_Exec1Input+0x78>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	b103      	cbz	r3, 8009738 <_Exec1Input+0x48>
 8009736:	4798      	blx	r3
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <_Exec1Input+0x7c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b953      	cbnz	r3, 8009754 <_Exec1Input+0x64>
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <_Exec1Input+0x80>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009746:	b148      	cbz	r0, 800975c <_Exec1Input+0x6c>
 8009748:	f003 fd76 	bl	800d238 <GUI_PollKeyMsg>
 800974c:	3000      	adds	r0, #0
 800974e:	bf18      	it	ne
 8009750:	2001      	movne	r0, #1
 8009752:	e003      	b.n	800975c <_Exec1Input+0x6c>
 8009754:	4798      	blx	r3
 8009756:	2800      	cmp	r0, #0
 8009758:	d0f1      	beq.n	800973e <_Exec1Input+0x4e>
 800975a:	2001      	movs	r0, #1
 800975c:	b002      	add	sp, #8
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	20005444 	.word	0x20005444
 8009764:	20005648 	.word	0x20005648
 8009768:	20005634 	.word	0x20005634
 800976c:	200056e0 	.word	0x200056e0
 8009770:	20000084 	.word	0x20000084

08009774 <WM_GetActiveWindow>:
 8009774:	4b01      	ldr	r3, [pc, #4]	; (800977c <WM_GetActiveWindow+0x8>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800977a:	4770      	bx	lr
 800977c:	20000084 	.word	0x20000084

08009780 <WM__GetNextIVR>:
 8009780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009784:	4f5d      	ldr	r7, [pc, #372]	; (80098fc <WM__GetNextIVR+0x17c>)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800978c:	2800      	cmp	r0, #0
 800978e:	f000 80b2 	beq.w	80098f6 <WM__GetNextIVR+0x176>
 8009792:	4b5b      	ldr	r3, [pc, #364]	; (8009900 <WM__GetNextIVR+0x180>)
 8009794:	695a      	ldr	r2, [r3, #20]
 8009796:	2a01      	cmp	r2, #1
 8009798:	461c      	mov	r4, r3
 800979a:	dd03      	ble.n	80097a4 <WM__GetNextIVR+0x24>
 800979c:	3a01      	subs	r2, #1
 800979e:	615a      	str	r2, [r3, #20]
 80097a0:	2000      	movs	r0, #0
 80097a2:	e0a8      	b.n	80098f6 <WM__GetNextIVR+0x176>
 80097a4:	f104 0608 	add.w	r6, r4, #8
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097ae:	3301      	adds	r3, #1
 80097b0:	ad02      	add	r5, sp, #8
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80097b8:	b923      	cbnz	r3, 80097c4 <WM__GetNextIVR+0x44>
 80097ba:	8823      	ldrh	r3, [r4, #0]
 80097bc:	f8ad 3008 	strh.w	r3, [sp, #8]
 80097c0:	8863      	ldrh	r3, [r4, #2]
 80097c2:	e011      	b.n	80097e8 <WM__GetNextIVR+0x68>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	8962      	ldrh	r2, [r4, #10]
 80097c8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80097cc:	3301      	adds	r3, #1
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80097d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80097d8:	b21b      	sxth	r3, r3
 80097da:	429a      	cmp	r2, r3
 80097dc:	da06      	bge.n	80097ec <WM__GetNextIVR+0x6c>
 80097de:	8823      	ldrh	r3, [r4, #0]
 80097e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80097e4:	89e3      	ldrh	r3, [r4, #14]
 80097e6:	3301      	adds	r3, #1
 80097e8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80097ec:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80097f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80097f4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009900 <WM__GetNextIVR+0x180>
 80097f8:	429a      	cmp	r2, r3
 80097fa:	dd04      	ble.n	8009806 <WM__GetNextIVR+0x86>
 80097fc:	6963      	ldr	r3, [r4, #20]
 80097fe:	3b01      	subs	r3, #1
 8009800:	2000      	movs	r0, #0
 8009802:	6163      	str	r3, [r4, #20]
 8009804:	e077      	b.n	80098f6 <WM__GetNextIVR+0x176>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800980a:	f005 fbe7 	bl	800efdc <GUI_ALLOC_LockH>
 800980e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009812:	f9b8 3000 	ldrsh.w	r3, [r8]
 8009816:	9001      	str	r0, [sp, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d11c      	bne.n	8009856 <WM__GetNextIVR+0xd6>
 800981c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009820:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009824:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009828:	f8ad 300c 	strh.w	r3, [sp, #12]
 800982c:	4b33      	ldr	r3, [pc, #204]	; (80098fc <WM__GetNextIVR+0x17c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009832:	b15a      	cbz	r2, 800984c <WM__GetNextIVR+0xcc>
 8009834:	4610      	mov	r0, r2
 8009836:	f005 fbc7 	bl	800efc8 <GUI_ALLOC_h2p>
 800983a:	4680      	mov	r8, r0
 800983c:	2200      	movs	r2, #0
 800983e:	6a00      	ldr	r0, [r0, #32]
 8009840:	4629      	mov	r1, r5
 8009842:	f7ff f973 	bl	8008b2c <_Findy1>
 8009846:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800984a:	e7f2      	b.n	8009832 <WM__GetNextIVR+0xb2>
 800984c:	9b01      	ldr	r3, [sp, #4]
 800984e:	4629      	mov	r1, r5
 8009850:	69d8      	ldr	r0, [r3, #28]
 8009852:	f7ff f96b 	bl	8008b2c <_Findy1>
 8009856:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800985a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009862:	b16a      	cbz	r2, 8009880 <WM__GetNextIVR+0x100>
 8009864:	4610      	mov	r0, r2
 8009866:	f005 fbaf 	bl	800efc8 <GUI_ALLOC_h2p>
 800986a:	4629      	mov	r1, r5
 800986c:	4680      	mov	r8, r0
 800986e:	2200      	movs	r2, #0
 8009870:	6a00      	ldr	r0, [r0, #32]
 8009872:	f7ff f9b1 	bl	8008bd8 <_Findx0>
 8009876:	2800      	cmp	r0, #0
 8009878:	d1ed      	bne.n	8009856 <WM__GetNextIVR+0xd6>
 800987a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800987e:	e7f0      	b.n	8009862 <WM__GetNextIVR+0xe2>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	4629      	mov	r1, r5
 8009884:	69d8      	ldr	r0, [r3, #28]
 8009886:	f7ff f9a7 	bl	8008bd8 <_Findx0>
 800988a:	2800      	cmp	r0, #0
 800988c:	d1e3      	bne.n	8009856 <WM__GetNextIVR+0xd6>
 800988e:	88a3      	ldrh	r3, [r4, #4]
 8009890:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009894:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009898:	b21b      	sxth	r3, r3
 800989a:	429a      	cmp	r2, r3
 800989c:	dd07      	ble.n	80098ae <WM__GetNextIVR+0x12e>
 800989e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098a2:	e886 0003 	stmia.w	r6, {r0, r1}
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f005 fba6 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80098ac:	e797      	b.n	80097de <WM__GetNextIVR+0x5e>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098b2:	b152      	cbz	r2, 80098ca <WM__GetNextIVR+0x14a>
 80098b4:	4610      	mov	r0, r2
 80098b6:	f005 fb87 	bl	800efc8 <GUI_ALLOC_h2p>
 80098ba:	4607      	mov	r7, r0
 80098bc:	2200      	movs	r2, #0
 80098be:	6a00      	ldr	r0, [r0, #32]
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7ff f9cd 	bl	8008c60 <_Findx1>
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	e7f3      	b.n	80098b2 <WM__GetNextIVR+0x132>
 80098ca:	af04      	add	r7, sp, #16
 80098cc:	4629      	mov	r1, r5
 80098ce:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 80098d2:	69d8      	ldr	r0, [r3, #28]
 80098d4:	f7ff f9c4 	bl	8008c60 <_Findx1>
 80098d8:	4638      	mov	r0, r7
 80098da:	f005 fb8d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80098de:	6923      	ldr	r3, [r4, #16]
 80098e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80098e4:	4293      	cmp	r3, r2
 80098e6:	dc89      	bgt.n	80097fc <WM__GetNextIVR+0x7c>
 80098e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098ec:	e886 0003 	stmia.w	r6, {r0, r1}
 80098f0:	f7ff fbd6 	bl	80090a0 <WM__ActivateClipRect>
 80098f4:	2001      	movs	r0, #1
 80098f6:	b004      	add	sp, #16
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	20000084 	.word	0x20000084
 8009900:	20005448 	.word	0x20005448

08009904 <WM__InitIVRSearch>:
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	4f39      	ldr	r7, [pc, #228]	; (80099f0 <WM__InitIVRSearch+0xec>)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009910:	b086      	sub	sp, #24
 8009912:	4606      	mov	r6, r0
 8009914:	b912      	cbnz	r2, 800991c <WM__InitIVRSearch+0x18>
 8009916:	f7ff fbc3 	bl	80090a0 <WM__ActivateClipRect>
 800991a:	e064      	b.n	80099e6 <WM__InitIVRSearch+0xe2>
 800991c:	4d35      	ldr	r5, [pc, #212]	; (80099f4 <WM__InitIVRSearch+0xf0>)
 800991e:	696a      	ldr	r2, [r5, #20]
 8009920:	3201      	adds	r2, #1
 8009922:	2a01      	cmp	r2, #1
 8009924:	616a      	str	r2, [r5, #20]
 8009926:	462c      	mov	r4, r5
 8009928:	dc5d      	bgt.n	80099e6 <WM__InitIVRSearch+0xe2>
 800992a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800992c:	f005 fb56 	bl	800efdc <GUI_ALLOC_LockH>
 8009930:	f04f 32ff 	mov.w	r2, #4294967295
 8009934:	612a      	str	r2, [r5, #16]
 8009936:	4a30      	ldr	r2, [pc, #192]	; (80099f8 <WM__InitIVRSearch+0xf4>)
 8009938:	9000      	str	r0, [sp, #0]
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	b12a      	cbz	r2, 800994a <WM__InitIVRSearch+0x46>
 800993e:	f100 0308 	add.w	r3, r0, #8
 8009942:	aa02      	add	r2, sp, #8
 8009944:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009948:	e005      	b.n	8009956 <WM__InitIVRSearch+0x52>
 800994a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800994c:	f012 0802 	ands.w	r8, r2, #2
 8009950:	d00a      	beq.n	8009968 <WM__InitIVRSearch+0x64>
 8009952:	c803      	ldmia	r0, {r0, r1}
 8009954:	aa02      	add	r2, sp, #8
 8009956:	e882 0003 	stmia.w	r2, {r0, r1}
 800995a:	ad02      	add	r5, sp, #8
 800995c:	b166      	cbz	r6, 8009978 <WM__InitIVRSearch+0x74>
 800995e:	4628      	mov	r0, r5
 8009960:	4631      	mov	r1, r6
 8009962:	f003 f819 	bl	800c998 <GUI__IntersectRect>
 8009966:	e007      	b.n	8009978 <WM__InitIVRSearch+0x74>
 8009968:	696b      	ldr	r3, [r5, #20]
 800996a:	4668      	mov	r0, sp
 800996c:	3b01      	subs	r3, #1
 800996e:	616b      	str	r3, [r5, #20]
 8009970:	f005 fb42 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009974:	4640      	mov	r0, r8
 8009976:	e037      	b.n	80099e8 <WM__InitIVRSearch+0xe4>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	4e20      	ldr	r6, [pc, #128]	; (80099fc <WM__InitIVRSearch+0xf8>)
 800997c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800997e:	b1c2      	cbz	r2, 80099b2 <WM__InitIVRSearch+0xae>
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	6810      	ldr	r0, [r2, #0]
 8009984:	6851      	ldr	r1, [r2, #4]
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	ab04      	add	r3, sp, #16
 800998a:	c303      	stmia	r3!, {r0, r1}
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	b133      	cbz	r3, 800999e <WM__InitIVRSearch+0x9a>
 8009990:	a801      	add	r0, sp, #4
 8009992:	f005 fb31 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009996:	6830      	ldr	r0, [r6, #0]
 8009998:	f005 fb20 	bl	800efdc <GUI_ALLOC_LockH>
 800999c:	9001      	str	r0, [sp, #4]
 800999e:	9801      	ldr	r0, [sp, #4]
 80099a0:	a904      	add	r1, sp, #16
 80099a2:	f7ff fb4d 	bl	8009040 <WM__Client2Screen>
 80099a6:	4628      	mov	r0, r5
 80099a8:	a904      	add	r1, sp, #16
 80099aa:	f002 fff5 	bl	800c998 <GUI__IntersectRect>
 80099ae:	a801      	add	r0, sp, #4
 80099b0:	e000      	b.n	80099b4 <WM__InitIVRSearch+0xb0>
 80099b2:	4668      	mov	r0, sp
 80099b4:	f005 fb20 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80099b8:	6831      	ldr	r1, [r6, #0]
 80099ba:	b119      	cbz	r1, 80099c4 <WM__InitIVRSearch+0xc0>
 80099bc:	4628      	mov	r0, r5
 80099be:	f7ff faa1 	bl	8008f04 <WM__ClipAtParentBorders>
 80099c2:	b128      	cbz	r0, 80099d0 <WM__InitIVRSearch+0xcc>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	4628      	mov	r0, r5
 80099c8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80099ca:	f7ff fa9b 	bl	8008f04 <WM__ClipAtParentBorders>
 80099ce:	b918      	cbnz	r0, 80099d8 <WM__InitIVRSearch+0xd4>
 80099d0:	6963      	ldr	r3, [r4, #20]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	6163      	str	r3, [r4, #20]
 80099d6:	e007      	b.n	80099e8 <WM__InitIVRSearch+0xe4>
 80099d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80099dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80099e0:	f7ff fece 	bl	8009780 <WM__GetNextIVR>
 80099e4:	e000      	b.n	80099e8 <WM__InitIVRSearch+0xe4>
 80099e6:	2001      	movs	r0, #1
 80099e8:	b006      	add	sp, #24
 80099ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ee:	bf00      	nop
 80099f0:	20000084 	.word	0x20000084
 80099f4:	20005448 	.word	0x20005448
 80099f8:	20005658 	.word	0x20005658
 80099fc:	20005628 	.word	0x20005628

08009a00 <WM_SetDefault>:
 8009a00:	b508      	push	{r3, lr}
 8009a02:	f004 f8db 	bl	800dbbc <GL_SetDefault>
 8009a06:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <WM_SetDefault+0x10>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	645a      	str	r2, [r3, #68]	; 0x44
 8009a0e:	bd08      	pop	{r3, pc}
 8009a10:	20000084 	.word	0x20000084

08009a14 <WM__Paint1>:
 8009a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a16:	b089      	sub	sp, #36	; 0x24
 8009a18:	4604      	mov	r4, r0
 8009a1a:	f005 fadf 	bl	800efdc <GUI_ALLOC_LockH>
 8009a1e:	6907      	ldr	r7, [r0, #16]
 8009a20:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009a22:	9001      	str	r0, [sp, #4]
 8009a24:	3008      	adds	r0, #8
 8009a26:	c803      	ldmia	r0, {r0, r1}
 8009a28:	ad02      	add	r5, sp, #8
 8009a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a2e:	a801      	add	r0, sp, #4
 8009a30:	f005 fae2 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009a34:	2f00      	cmp	r7, #0
 8009a36:	d031      	beq.n	8009a9c <WM__Paint1+0x88>
 8009a38:	07b3      	lsls	r3, r6, #30
 8009a3a:	d52f      	bpl.n	8009a9c <WM__Paint1+0x88>
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	212e      	movs	r1, #46	; 0x2e
 8009a40:	f7fe febd 	bl	80087be <WM_SendMessageNoPara>
 8009a44:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <WM__Paint1+0x8c>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8009a4c:	f102 0201 	add.w	r2, r2, #1
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	461e      	mov	r6, r3
 8009a54:	d00a      	beq.n	8009a6c <WM__Paint1+0x58>
 8009a56:	230f      	movs	r3, #15
 8009a58:	9405      	str	r4, [sp, #20]
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9507      	str	r5, [sp, #28]
 8009a5e:	f7ff ffcf 	bl	8009a00 <WM_SetDefault>
 8009a62:	4620      	mov	r0, r4
 8009a64:	a904      	add	r1, sp, #16
 8009a66:	f7fe fa71 	bl	8007f4c <WM__SendMessage>
 8009a6a:	e010      	b.n	8009a8e <WM__Paint1+0x7a>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f7ff ff49 	bl	8009904 <WM__InitIVRSearch>
 8009a72:	b160      	cbz	r0, 8009a8e <WM__Paint1+0x7a>
 8009a74:	230f      	movs	r3, #15
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	9405      	str	r4, [sp, #20]
 8009a7a:	9507      	str	r5, [sp, #28]
 8009a7c:	f7ff ffc0 	bl	8009a00 <WM_SetDefault>
 8009a80:	4620      	mov	r0, r4
 8009a82:	a904      	add	r1, sp, #16
 8009a84:	f7fe fa62 	bl	8007f4c <WM__SendMessage>
 8009a88:	f7ff fe7a 	bl	8009780 <WM__GetNextIVR>
 8009a8c:	e7f1      	b.n	8009a72 <WM__Paint1+0x5e>
 8009a8e:	7833      	ldrb	r3, [r6, #0]
 8009a90:	4620      	mov	r0, r4
 8009a92:	3b01      	subs	r3, #1
 8009a94:	212f      	movs	r1, #47	; 0x2f
 8009a96:	7033      	strb	r3, [r6, #0]
 8009a98:	f7fe fe91 	bl	80087be <WM_SendMessageNoPara>
 8009a9c:	b009      	add	sp, #36	; 0x24
 8009a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa0:	20005658 	.word	0x20005658

08009aa4 <WM__Paint>:
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	b089      	sub	sp, #36	; 0x24
 8009aa8:	ac06      	add	r4, sp, #24
 8009aaa:	9003      	str	r0, [sp, #12]
 8009aac:	f005 fa96 	bl	800efdc <GUI_ALLOC_LockH>
 8009ab0:	f100 0208 	add.w	r2, r0, #8
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	9005      	str	r0, [sp, #20]
 8009ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009abc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009abe:	699e      	ldr	r6, [r3, #24]
 8009ac0:	691f      	ldr	r7, [r3, #16]
 8009ac2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ac6:	a805      	add	r0, sp, #20
 8009ac8:	f005 fa96 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009acc:	f244 0320 	movw	r3, #16416	; 0x4020
 8009ad0:	402b      	ands	r3, r5
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d034      	beq.n	8009b40 <WM__Paint+0x9c>
 8009ad6:	b1bf      	cbz	r7, 8009b08 <WM__Paint+0x64>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	9903      	ldr	r1, [sp, #12]
 8009adc:	f7ff fa12 	bl	8008f04 <WM__ClipAtParentBorders>
 8009ae0:	b190      	cbz	r0, 8009b08 <WM__Paint+0x64>
 8009ae2:	9803      	ldr	r0, [sp, #12]
 8009ae4:	f7ff fcb0 	bl	8009448 <WM_SelectWindow>
 8009ae8:	0769      	lsls	r1, r5, #29
 8009aea:	d50f      	bpl.n	8009b0c <WM__Paint+0x68>
 8009aec:	b126      	cbz	r6, 8009af8 <WM__Paint+0x54>
 8009aee:	f005 0501 	and.w	r5, r5, #1
 8009af2:	f085 0501 	eor.w	r5, r5, #1
 8009af6:	e000      	b.n	8009afa <WM__Paint+0x56>
 8009af8:	2501      	movs	r5, #1
 8009afa:	9500      	str	r5, [sp, #0]
 8009afc:	4620      	mov	r0, r4
 8009afe:	4912      	ldr	r1, [pc, #72]	; (8009b48 <WM__Paint+0xa4>)
 8009b00:	aa03      	add	r2, sp, #12
 8009b02:	2300      	movs	r3, #0
 8009b04:	f000 fa9c 	bl	800a040 <GUI_MEMDEV_Draw>
 8009b08:	2400      	movs	r4, #0
 8009b0a:	e003      	b.n	8009b14 <WM__Paint+0x70>
 8009b0c:	9803      	ldr	r0, [sp, #12]
 8009b0e:	f7ff f989 	bl	8008e24 <WM__PaintWinAndOverlays>
 8009b12:	2401      	movs	r4, #1
 8009b14:	9803      	ldr	r0, [sp, #12]
 8009b16:	f005 fa61 	bl	800efdc <GUI_ALLOC_LockH>
 8009b1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009b1c:	9005      	str	r0, [sp, #20]
 8009b1e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8009b22:	f023 0320 	bic.w	r3, r3, #32
 8009b26:	0492      	lsls	r2, r2, #18
 8009b28:	bf48      	it	mi
 8009b2a:	f043 0304 	orrmi.w	r3, r3, #4
 8009b2e:	6283      	str	r3, [r0, #40]	; 0x28
 8009b30:	a805      	add	r0, sp, #20
 8009b32:	f005 fa61 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <WM__Paint+0xa8>)
 8009b38:	881a      	ldrh	r2, [r3, #0]
 8009b3a:	3a01      	subs	r2, #1
 8009b3c:	801a      	strh	r2, [r3, #0]
 8009b3e:	e000      	b.n	8009b42 <WM__Paint+0x9e>
 8009b40:	461c      	mov	r4, r3
 8009b42:	4620      	mov	r0, r4
 8009b44:	b009      	add	sp, #36	; 0x24
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b48:	08008e9d 	.word	0x08008e9d
 8009b4c:	20005644 	.word	0x20005644

08009b50 <_Exec1Draw>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <_Exec1Draw+0x70>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	461d      	mov	r5, r3
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d02a      	beq.n	8009bba <_Exec1Draw+0x6a>
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <_Exec1Draw+0x74>)
 8009b66:	8818      	ldrh	r0, [r3, #0]
 8009b68:	b338      	cbz	r0, 8009bba <_Exec1Draw+0x6a>
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <_Exec1Draw+0x78>)
 8009b6c:	6814      	ldr	r4, [r2, #0]
 8009b6e:	4616      	mov	r6, r2
 8009b70:	b90c      	cbnz	r4, 8009b76 <_Exec1Draw+0x26>
 8009b72:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <_Exec1Draw+0x7c>)
 8009b74:	681c      	ldr	r4, [r3, #0]
 8009b76:	4668      	mov	r0, sp
 8009b78:	f003 ffbc 	bl	800daf4 <GUI_SaveContext_W>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8009b80:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009b82:	b924      	cbnz	r4, 8009b8e <_Exec1Draw+0x3e>
 8009b84:	2400      	movs	r4, #0
 8009b86:	e00d      	b.n	8009ba4 <_Exec1Draw+0x54>
 8009b88:	f1b8 0f00 	cmp.w	r8, #0
 8009b8c:	d10a      	bne.n	8009ba4 <_Exec1Draw+0x54>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7ff ff88 	bl	8009aa4 <WM__Paint>
 8009b94:	4680      	mov	r8, r0
 8009b96:	4620      	mov	r0, r4
 8009b98:	f005 fa16 	bl	800efc8 <GUI_ALLOC_h2p>
 8009b9c:	6944      	ldr	r4, [r0, #20]
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	d1f2      	bne.n	8009b88 <_Exec1Draw+0x38>
 8009ba2:	e7ef      	b.n	8009b84 <_Exec1Draw+0x34>
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	6034      	str	r4, [r6, #0]
 8009ba8:	f003 ffc3 	bl	800db32 <GUI_SetColor>
 8009bac:	4628      	mov	r0, r5
 8009bae:	f003 ffbe 	bl	800db2e <GUI_SetBkColor>
 8009bb2:	4668      	mov	r0, sp
 8009bb4:	f003 ffa8 	bl	800db08 <GUI_RestoreContext>
 8009bb8:	2001      	movs	r0, #1
 8009bba:	b01c      	add	sp, #112	; 0x70
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	20000084 	.word	0x20000084
 8009bc4:	20005644 	.word	0x20005644
 8009bc8:	20005460 	.word	0x20005460
 8009bcc:	20005648 	.word	0x20005648

08009bd0 <WM_Exec>:
 8009bd0:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <WM_Exec+0x64>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	b103      	cbz	r3, 8009bda <WM_Exec+0xa>
 8009bd8:	4798      	blx	r3
 8009bda:	2500      	movs	r5, #0
 8009bdc:	f7ff fd88 	bl	80096f0 <_Exec1Input>
 8009be0:	b108      	cbz	r0, 8009be6 <WM_Exec+0x16>
 8009be2:	2501      	movs	r5, #1
 8009be4:	e7fa      	b.n	8009bdc <WM_Exec+0xc>
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <WM_Exec+0x68>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009bee:	b144      	cbz	r4, 8009c02 <WM_Exec+0x32>
 8009bf0:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <WM_Exec+0x6c>)
 8009bf2:	881c      	ldrh	r4, [r3, #0]
 8009bf4:	b12c      	cbz	r4, 8009c02 <WM_Exec+0x32>
 8009bf6:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <WM_Exec+0x70>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	b1a3      	cbz	r3, 8009c26 <WM_Exec+0x56>
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4798      	blx	r3
 8009c00:	2401      	movs	r4, #1
 8009c02:	f7ff ffa5 	bl	8009b50 <_Exec1Draw>
 8009c06:	4606      	mov	r6, r0
 8009c08:	b108      	cbz	r0, 8009c0e <WM_Exec+0x3e>
 8009c0a:	2501      	movs	r5, #1
 8009c0c:	e7f9      	b.n	8009c02 <WM_Exec+0x32>
 8009c0e:	b174      	cbz	r4, 8009c2e <WM_Exec+0x5e>
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <WM_Exec+0x70>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	b123      	cbz	r3, 8009c20 <WM_Exec+0x50>
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <WM_Exec+0x74>)
 8009c1c:	601e      	str	r6, [r3, #0]
 8009c1e:	e006      	b.n	8009c2e <WM_Exec+0x5e>
 8009c20:	f003 f856 	bl	800ccd0 <GUI__ManageCache>
 8009c24:	e003      	b.n	8009c2e <WM_Exec+0x5e>
 8009c26:	2001      	movs	r0, #1
 8009c28:	f003 f852 	bl	800ccd0 <GUI__ManageCache>
 8009c2c:	e7e8      	b.n	8009c00 <WM_Exec+0x30>
 8009c2e:	4628      	mov	r0, r5
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	bf00      	nop
 8009c34:	20005638 	.word	0x20005638
 8009c38:	20000084 	.word	0x20000084
 8009c3c:	20005644 	.word	0x20005644
 8009c40:	2000566c 	.word	0x2000566c
 8009c44:	20005654 	.word	0x20005654

08009c48 <WM_Activate>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <WM_Activate+0xc>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009c52:	4770      	bx	lr
 8009c54:	20000084 	.word	0x20000084

08009c58 <WM_Deactivate>:
 8009c58:	4b03      	ldr	r3, [pc, #12]	; (8009c68 <WM_Deactivate+0x10>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009c62:	f002 bdb9 	b.w	800c7d8 <LCD_SetClipRectMax>
 8009c66:	bf00      	nop
 8009c68:	20000084 	.word	0x20000084

08009c6c <WM_DefaultProc>:
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	4604      	mov	r4, r0
 8009c70:	6840      	ldr	r0, [r0, #4]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	68e1      	ldr	r1, [r4, #12]
 8009c76:	2b17      	cmp	r3, #23
 8009c78:	d00f      	beq.n	8009c9a <WM_DefaultProc+0x2e>
 8009c7a:	dc06      	bgt.n	8009c8a <WM_DefaultProc+0x1e>
 8009c7c:	2b0e      	cmp	r3, #14
 8009c7e:	d00e      	beq.n	8009c9e <WM_DefaultProc+0x32>
 8009c80:	2b14      	cmp	r3, #20
 8009c82:	d114      	bne.n	8009cae <WM_DefaultProc+0x42>
 8009c84:	f7fe fa16 	bl	80080b4 <WM__GetClientRectEx>
 8009c88:	e011      	b.n	8009cae <WM_DefaultProc+0x42>
 8009c8a:	2b22      	cmp	r3, #34	; 0x22
 8009c8c:	d00c      	beq.n	8009ca8 <WM_DefaultProc+0x3c>
 8009c8e:	2b28      	cmp	r3, #40	; 0x28
 8009c90:	d10d      	bne.n	8009cae <WM_DefaultProc+0x42>
 8009c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c96:	f7ff bbc9 	b.w	800942c <WM_InvalidateWindow>
 8009c9a:	60e0      	str	r0, [r4, #12]
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca4:	f7fe bd8d 	b.w	80087c2 <WM_SendToParent>
 8009ca8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009cac:	e000      	b.n	8009cb0 <WM_DefaultProc+0x44>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60e3      	str	r3, [r4, #12]
 8009cb2:	bd10      	pop	{r4, pc}

08009cb4 <_cbBackWin>:
 8009cb4:	6803      	ldr	r3, [r0, #0]
 8009cb6:	2b0e      	cmp	r3, #14
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	d002      	beq.n	8009cc4 <_cbBackWin+0x10>
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	d009      	beq.n	8009cd6 <_cbBackWin+0x22>
 8009cc2:	e020      	b.n	8009d06 <_cbBackWin+0x52>
 8009cc4:	68c3      	ldr	r3, [r0, #12]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	2a01      	cmp	r2, #1
 8009cca:	d121      	bne.n	8009d10 <_cbBackWin+0x5c>
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd2:	f003 baa9 	b.w	800d228 <GUI_StoreKey>
 8009cd6:	4a0f      	ldr	r2, [pc, #60]	; (8009d14 <_cbBackWin+0x60>)
 8009cd8:	6843      	ldr	r3, [r0, #4]
 8009cda:	6811      	ldr	r1, [r2, #0]
 8009cdc:	428b      	cmp	r3, r1
 8009cde:	d006      	beq.n	8009cee <_cbBackWin+0x3a>
 8009ce0:	6852      	ldr	r2, [r2, #4]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	bf14      	ite	ne
 8009ce6:	f04f 33ff 	movne.w	r3, #4294967295
 8009cea:	2301      	moveq	r3, #1
 8009cec:	e000      	b.n	8009cf0 <_cbBackWin+0x3c>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4a09      	ldr	r2, [pc, #36]	; (8009d18 <_cbBackWin+0x64>)
 8009cf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009cf6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009cfa:	4298      	cmp	r0, r3
 8009cfc:	d003      	beq.n	8009d06 <_cbBackWin+0x52>
 8009cfe:	f003 ff16 	bl	800db2e <GUI_SetBkColor>
 8009d02:	f003 fd7b 	bl	800d7fc <GUI_Clear>
 8009d06:	4620      	mov	r0, r4
 8009d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d0c:	f7ff bfae 	b.w	8009c6c <WM_DefaultProc>
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	bf00      	nop
 8009d14:	2000562c 	.word	0x2000562c
 8009d18:	20005660 	.word	0x20005660

08009d1c <WM_Init>:
 8009d1c:	b530      	push	{r4, r5, lr}
 8009d1e:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <WM_Init+0xb0>)
 8009d20:	7818      	ldrb	r0, [r3, #0]
 8009d22:	b085      	sub	sp, #20
 8009d24:	461d      	mov	r5, r3
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d14d      	bne.n	8009dc6 <WM_Init+0xaa>
 8009d2a:	4b29      	ldr	r3, [pc, #164]	; (8009dd0 <WM_Init+0xb4>)
 8009d2c:	6018      	str	r0, [r3, #0]
 8009d2e:	4b29      	ldr	r3, [pc, #164]	; (8009dd4 <WM_Init+0xb8>)
 8009d30:	6018      	str	r0, [r3, #0]
 8009d32:	4b29      	ldr	r3, [pc, #164]	; (8009dd8 <WM_Init+0xbc>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6458      	str	r0, [r3, #68]	; 0x44
 8009d38:	4b28      	ldr	r3, [pc, #160]	; (8009ddc <WM_Init+0xc0>)
 8009d3a:	8018      	strh	r0, [r3, #0]
 8009d3c:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <WM_Init+0xc4>)
 8009d3e:	4604      	mov	r4, r0
 8009d40:	8018      	strh	r0, [r3, #0]
 8009d42:	4620      	mov	r0, r4
 8009d44:	f003 fc10 	bl	800d568 <GUI_DEVICE__GetpDriver>
 8009d48:	b1c0      	cbz	r0, 8009d7c <WM_Init+0x60>
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009d54:	2000      	movs	r0, #0
 8009d56:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009d5a:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <WM_Init+0xc8>)
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	9003      	str	r0, [sp, #12]
 8009d60:	4613      	mov	r3, r2
 8009d62:	4601      	mov	r1, r0
 8009d64:	f7ff fb90 	bl	8009488 <WM_CreateWindowAsChild>
 8009d68:	4b1f      	ldr	r3, [pc, #124]	; (8009de8 <WM_Init+0xcc>)
 8009d6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009d6e:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <WM_Init+0xd0>)
 8009d70:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009d74:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009d78:	f7ff fb58 	bl	800942c <WM_InvalidateWindow>
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	2c02      	cmp	r4, #2
 8009d80:	d1df      	bne.n	8009d42 <WM_Init+0x26>
 8009d82:	481b      	ldr	r0, [pc, #108]	; (8009df0 <WM_Init+0xd4>)
 8009d84:	f7fe f98e 	bl	80080a4 <WM__AddCriticalHandle>
 8009d88:	481a      	ldr	r0, [pc, #104]	; (8009df4 <WM_Init+0xd8>)
 8009d8a:	f7fe f98b 	bl	80080a4 <WM__AddCriticalHandle>
 8009d8e:	481a      	ldr	r0, [pc, #104]	; (8009df8 <WM_Init+0xdc>)
 8009d90:	f7fe f988 	bl	80080a4 <WM__AddCriticalHandle>
 8009d94:	4819      	ldr	r0, [pc, #100]	; (8009dfc <WM_Init+0xe0>)
 8009d96:	f7fe f985 	bl	80080a4 <WM__AddCriticalHandle>
 8009d9a:	4819      	ldr	r0, [pc, #100]	; (8009e00 <WM_Init+0xe4>)
 8009d9c:	f7fe f982 	bl	80080a4 <WM__AddCriticalHandle>
 8009da0:	4818      	ldr	r0, [pc, #96]	; (8009e04 <WM_Init+0xe8>)
 8009da2:	f7fe f97f 	bl	80080a4 <WM__AddCriticalHandle>
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <WM_Init+0xcc>)
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	f7ff fb4d 	bl	8009448 <WM_SelectWindow>
 8009dae:	f7ff ff4b 	bl	8009c48 <WM_Activate>
 8009db2:	2301      	movs	r3, #1
 8009db4:	702b      	strb	r3, [r5, #0]
 8009db6:	4814      	ldr	r0, [pc, #80]	; (8009e08 <WM_Init+0xec>)
 8009db8:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <WM_Init+0xf0>)
 8009dba:	6003      	str	r3, [r0, #0]
 8009dbc:	b005      	add	sp, #20
 8009dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc2:	f003 bd2b 	b.w	800d81c <GUI__RegisterExit>
 8009dc6:	b005      	add	sp, #20
 8009dc8:	bd30      	pop	{r4, r5, pc}
 8009dca:	bf00      	nop
 8009dcc:	20005464 	.word	0x20005464
 8009dd0:	20005648 	.word	0x20005648
 8009dd4:	20005460 	.word	0x20005460
 8009dd8:	20000084 	.word	0x20000084
 8009ddc:	20005644 	.word	0x20005644
 8009de0:	20005624 	.word	0x20005624
 8009de4:	08009cb5 	.word	0x08009cb5
 8009de8:	2000562c 	.word	0x2000562c
 8009dec:	20005660 	.word	0x20005660
 8009df0:	200057c4 	.word	0x200057c4
 8009df4:	200057b4 	.word	0x200057b4
 8009df8:	200057a4 	.word	0x200057a4
 8009dfc:	200057cc 	.word	0x200057cc
 8009e00:	200057bc 	.word	0x200057bc
 8009e04:	200057ac 	.word	0x200057ac
 8009e08:	2000543c 	.word	0x2000543c
 8009e0c:	08008a5d 	.word	0x08008a5d

08009e10 <_CreateStaticDevice>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	b087      	sub	sp, #28
 8009e16:	4604      	mov	r4, r0
 8009e18:	f005 f8e0 	bl	800efdc <GUI_ALLOC_LockH>
 8009e1c:	af06      	add	r7, sp, #24
 8009e1e:	f8b0 8000 	ldrh.w	r8, [r0]
 8009e22:	8886      	ldrh	r6, [r0, #4]
 8009e24:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8009e28:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8009e2c:	f847 0d04 	str.w	r0, [r7, #-4]!
 8009e30:	fa0f f888 	sxth.w	r8, r8
 8009e34:	b236      	sxth	r6, r6
 8009e36:	ebc8 0606 	rsb	r6, r8, r6
 8009e3a:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8009e3e:	3601      	adds	r6, #1
 8009e40:	4638      	mov	r0, r7
 8009e42:	fa0f f989 	sxth.w	r9, r9
 8009e46:	fa0f f58b 	sxth.w	r5, fp
 8009e4a:	f005 f8d5 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009e4e:	ebc9 0505 	rsb	r5, r9, r5
 8009e52:	2e00      	cmp	r6, #0
 8009e54:	f105 0501 	add.w	r5, r5, #1
 8009e58:	dd4d      	ble.n	8009ef6 <_CreateStaticDevice+0xe6>
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	dd4b      	ble.n	8009ef6 <_CreateStaticDevice+0xe6>
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d04a      	beq.n	8009efa <_CreateStaticDevice+0xea>
 8009e64:	4650      	mov	r0, sl
 8009e66:	f005 f8b9 	bl	800efdc <GUI_ALLOC_LockH>
 8009e6a:	ab06      	add	r3, sp, #24
 8009e6c:	8886      	ldrh	r6, [r0, #4]
 8009e6e:	f843 0d08 	str.w	r0, [r3, #-8]!
 8009e72:	88c5      	ldrh	r5, [r0, #6]
 8009e74:	b236      	sxth	r6, r6
 8009e76:	4618      	mov	r0, r3
 8009e78:	f005 f8be 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009e7c:	4546      	cmp	r6, r8
 8009e7e:	d102      	bne.n	8009e86 <_CreateStaticDevice+0x76>
 8009e80:	b22d      	sxth	r5, r5
 8009e82:	454d      	cmp	r5, r9
 8009e84:	d032      	beq.n	8009eec <_CreateStaticDevice+0xdc>
 8009e86:	4650      	mov	r0, sl
 8009e88:	4641      	mov	r1, r8
 8009e8a:	464a      	mov	r2, r9
 8009e8c:	f000 f888 	bl	8009fa0 <GUI_MEMDEV_SetOrg>
 8009e90:	e02c      	b.n	8009eec <_CreateStaticDevice+0xdc>
 8009e92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e98:	6283      	str	r3, [r0, #40]	; 0x28
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f005 f8ac 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	f000 ff99 	bl	800add8 <GUI_MEMDEV_Select>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f003 f995 	bl	800d1d8 <GUI__AlphaPreserveTrans>
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f000 f8b6 	bl	800a020 <GUI_MEMDEV_GetDataPtr>
 8009eb4:	4a2d      	ldr	r2, [pc, #180]	; (8009f6c <_CreateStaticDevice+0x15c>)
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <_CreateStaticDevice+0x160>)
 8009eb8:	7811      	ldrb	r1, [r2, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4375      	muls	r5, r6
 8009ebe:	00aa      	lsls	r2, r5, #2
 8009ec0:	4e2c      	ldr	r6, [pc, #176]	; (8009f74 <_CreateStaticDevice+0x164>)
 8009ec2:	4d2d      	ldr	r5, [pc, #180]	; (8009f78 <_CreateStaticDevice+0x168>)
 8009ec4:	4798      	blx	r3
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f8d5 8000 	ldr.w	r8, [r5]
 8009ecc:	6034      	str	r4, [r6, #0]
 8009ece:	f7fe fb4a 	bl	8008566 <WM_GetWindowOrgX>
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7ff fd9d 	bl	8009a14 <WM__Paint1>
 8009eda:	2000      	movs	r0, #0
 8009edc:	f8c5 8000 	str.w	r8, [r5]
 8009ee0:	6030      	str	r0, [r6, #0]
 8009ee2:	f003 f979 	bl	800d1d8 <GUI__AlphaPreserveTrans>
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f000 ff76 	bl	800add8 <GUI_MEMDEV_Select>
 8009eec:	4620      	mov	r0, r4
 8009eee:	f005 f86b 	bl	800efc8 <GUI_ALLOC_h2p>
 8009ef2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009ef4:	e037      	b.n	8009f66 <_CreateStaticDevice+0x156>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e035      	b.n	8009f66 <_CreateStaticDevice+0x156>
 8009efa:	f7fe fabb 	bl	8008474 <WM_GetDesktopWindow>
 8009efe:	4284      	cmp	r4, r0
 8009f00:	d112      	bne.n	8009f28 <_CreateStaticDevice+0x118>
 8009f02:	f002 f8fb 	bl	800c0fc <LCD_GetXSize>
 8009f06:	4682      	mov	sl, r0
 8009f08:	f002 f900 	bl	800c10c <LCD_GetYSize>
 8009f0c:	4556      	cmp	r6, sl
 8009f0e:	dc02      	bgt.n	8009f16 <_CreateStaticDevice+0x106>
 8009f10:	4285      	cmp	r5, r0
 8009f12:	dd09      	ble.n	8009f28 <_CreateStaticDevice+0x118>
 8009f14:	e000      	b.n	8009f18 <_CreateStaticDevice+0x108>
 8009f16:	4656      	mov	r6, sl
 8009f18:	4285      	cmp	r5, r0
 8009f1a:	bfa8      	it	ge
 8009f1c:	4605      	movge	r5, r0
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4620      	mov	r0, r4
 8009f22:	462a      	mov	r2, r5
 8009f24:	f7fe fcb4 	bl	8008890 <WM_SetSize>
 8009f28:	4b14      	ldr	r3, [pc, #80]	; (8009f7c <_CreateStaticDevice+0x16c>)
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	f04f 0a01 	mov.w	sl, #1
 8009f30:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <_CreateStaticDevice+0x170>)
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	4632      	mov	r2, r6
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	f8cd a000 	str.w	sl, [sp]
 8009f40:	f000 fe54 	bl	800abec <GUI_MEMDEV__CreateFixed>
 8009f44:	4680      	mov	r8, r0
 8009f46:	4620      	mov	r0, r4
 8009f48:	f005 f848 	bl	800efdc <GUI_ALLOC_LockH>
 8009f4c:	9005      	str	r0, [sp, #20]
 8009f4e:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8009f52:	f1b8 0f00 	cmp.w	r8, #0
 8009f56:	d19c      	bne.n	8009e92 <_CreateStaticDevice+0x82>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f005 f84d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff fd58 	bl	8009a14 <WM__Paint1>
 8009f64:	4640      	mov	r0, r8
 8009f66:	b007      	add	sp, #28
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	20000060 	.word	0x20000060
 8009f70:	20000070 	.word	0x20000070
 8009f74:	20005678 	.word	0x20005678
 8009f78:	20005690 	.word	0x20005690
 8009f7c:	08013f18 	.word	0x08013f18
 8009f80:	0801501c 	.word	0x0801501c

08009f84 <GUI_MEMDEV_Paint1Static>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4605      	mov	r5, r0
 8009f88:	2405      	movs	r4, #5
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7ff ff40 	bl	8009e10 <_CreateStaticDevice>
 8009f90:	b910      	cbnz	r0, 8009f98 <GUI_MEMDEV_Paint1Static+0x14>
 8009f92:	3c01      	subs	r4, #1
 8009f94:	d1f9      	bne.n	8009f8a <GUI_MEMDEV_Paint1Static+0x6>
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f9c:	f006 bafa 	b.w	8010594 <GUI_MEMDEV_Write>

08009fa0 <GUI_MEMDEV_SetOrg>:
 8009fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	b918      	cbnz	r0, 8009fb0 <GUI_MEMDEV_SetOrg+0x10>
 8009fa8:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <GUI_MEMDEV_SetOrg+0x50>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009fae:	b1e8      	cbz	r0, 8009fec <GUI_MEMDEV_SetOrg+0x4c>
 8009fb0:	f005 f814 	bl	800efdc <GUI_ALLOC_LockH>
 8009fb4:	b2a4      	uxth	r4, r4
 8009fb6:	b2ad      	uxth	r5, r5
 8009fb8:	80c4      	strh	r4, [r0, #6]
 8009fba:	8085      	strh	r5, [r0, #4]
 8009fbc:	9000      	str	r0, [sp, #0]
 8009fbe:	f002 fc0b 	bl	800c7d8 <LCD_SetClipRectMax>
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	6958      	ldr	r0, [r3, #20]
 8009fc6:	b170      	cbz	r0, 8009fe6 <GUI_MEMDEV_SetOrg+0x46>
 8009fc8:	f005 f808 	bl	800efdc <GUI_ALLOC_LockH>
 8009fcc:	9b00      	ldr	r3, [sp, #0]
 8009fce:	9001      	str	r0, [sp, #4]
 8009fd0:	891a      	ldrh	r2, [r3, #8]
 8009fd2:	895b      	ldrh	r3, [r3, #10]
 8009fd4:	8082      	strh	r2, [r0, #4]
 8009fd6:	80c3      	strh	r3, [r0, #6]
 8009fd8:	b112      	cbz	r2, 8009fe0 <GUI_MEMDEV_SetOrg+0x40>
 8009fda:	b10b      	cbz	r3, 8009fe0 <GUI_MEMDEV_SetOrg+0x40>
 8009fdc:	8005      	strh	r5, [r0, #0]
 8009fde:	8044      	strh	r4, [r0, #2]
 8009fe0:	a801      	add	r0, sp, #4
 8009fe2:	f005 f809 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009fe6:	4668      	mov	r0, sp
 8009fe8:	f005 f806 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8009fec:	b003      	add	sp, #12
 8009fee:	bd30      	pop	{r4, r5, pc}
 8009ff0:	20000084 	.word	0x20000084

08009ff4 <GUI_MEMDEV_GetYSize>:
 8009ff4:	b513      	push	{r0, r1, r4, lr}
 8009ff6:	b920      	cbnz	r0, 800a002 <GUI_MEMDEV_GetYSize+0xe>
 8009ff8:	4b08      	ldr	r3, [pc, #32]	; (800a01c <GUI_MEMDEV_GetYSize+0x28>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009ffe:	4604      	mov	r4, r0
 800a000:	b148      	cbz	r0, 800a016 <GUI_MEMDEV_GetYSize+0x22>
 800a002:	f004 ffeb 	bl	800efdc <GUI_ALLOC_LockH>
 800a006:	ab02      	add	r3, sp, #8
 800a008:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800a00c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a010:	4618      	mov	r0, r3
 800a012:	f004 fff1 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a016:	4620      	mov	r0, r4
 800a018:	b002      	add	sp, #8
 800a01a:	bd10      	pop	{r4, pc}
 800a01c:	20000084 	.word	0x20000084

0800a020 <GUI_MEMDEV_GetDataPtr>:
 800a020:	b513      	push	{r0, r1, r4, lr}
 800a022:	b150      	cbz	r0, 800a03a <GUI_MEMDEV_GetDataPtr+0x1a>
 800a024:	f004 ffda 	bl	800efdc <GUI_ALLOC_LockH>
 800a028:	4604      	mov	r4, r0
 800a02a:	a802      	add	r0, sp, #8
 800a02c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800a030:	f004 ffe2 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a034:	f104 0018 	add.w	r0, r4, #24
 800a038:	e7ff      	b.n	800a03a <GUI_MEMDEV_GetDataPtr+0x1a>
 800a03a:	b002      	add	sp, #8
 800a03c:	bd10      	pop	{r4, pc}
	...

0800a040 <GUI_MEMDEV_Draw>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	461e      	mov	r6, r3
 800a046:	b089      	sub	sp, #36	; 0x24
 800a048:	4b4e      	ldr	r3, [pc, #312]	; (800a184 <GUI_MEMDEV_Draw+0x144>)
 800a04a:	9204      	str	r2, [sp, #16]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	7c54      	ldrb	r4, [r2, #17]
 800a052:	4a4d      	ldr	r2, [pc, #308]	; (800a188 <GUI_MEMDEV_Draw+0x148>)
 800a054:	5712      	ldrsb	r2, [r2, r4]
 800a056:	2a01      	cmp	r2, #1
 800a058:	4605      	mov	r5, r0
 800a05a:	469b      	mov	fp, r3
 800a05c:	4620      	mov	r0, r4
 800a05e:	dd06      	ble.n	800a06e <GUI_MEMDEV_Draw+0x2e>
 800a060:	f002 f83a 	bl	800c0d8 <LCD_GetXSizeEx>
 800a064:	4607      	mov	r7, r0
 800a066:	4620      	mov	r0, r4
 800a068:	f002 f839 	bl	800c0de <LCD_GetYSizeEx>
 800a06c:	e005      	b.n	800a07a <GUI_MEMDEV_Draw+0x3a>
 800a06e:	f002 f839 	bl	800c0e4 <LCD_GetVXSizeEx>
 800a072:	4607      	mov	r7, r0
 800a074:	4620      	mov	r0, r4
 800a076:	f002 f838 	bl	800c0ea <LCD_GetVYSizeEx>
 800a07a:	4604      	mov	r4, r0
 800a07c:	b325      	cbz	r5, 800a0c8 <GUI_MEMDEV_Draw+0x88>
 800a07e:	a806      	add	r0, sp, #24
 800a080:	a907      	add	r1, sp, #28
 800a082:	f003 fc91 	bl	800d9a8 <GUI_GetOrg>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	f9b5 a000 	ldrsh.w	sl, [r5]
 800a08c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a090:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800a094:	441f      	add	r7, r3
 800a096:	9b07      	ldr	r3, [sp, #28]
 800a098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a09c:	3f01      	subs	r7, #1
 800a09e:	4297      	cmp	r7, r2
 800a0a0:	bfd4      	ite	le
 800a0a2:	ebca 0707 	rsble	r7, sl, r7
 800a0a6:	ebca 0702 	rsbgt	r7, sl, r2
 800a0aa:	441c      	add	r4, r3
 800a0ac:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800a0b0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a0b4:	3c01      	subs	r4, #1
 800a0b6:	4294      	cmp	r4, r2
 800a0b8:	bfd4      	ite	le
 800a0ba:	ebc8 0404 	rsble	r4, r8, r4
 800a0be:	ebc8 0402 	rsbgt	r4, r8, r2
 800a0c2:	3701      	adds	r7, #1
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	e001      	b.n	800a0cc <GUI_MEMDEV_Draw+0x8c>
 800a0c8:	46a8      	mov	r8, r5
 800a0ca:	46aa      	mov	sl, r5
 800a0cc:	b906      	cbnz	r6, 800a0d0 <GUI_MEMDEV_Draw+0x90>
 800a0ce:	4266      	negs	r6, r4
 800a0d0:	2f00      	cmp	r7, #0
 800a0d2:	dd52      	ble.n	800a17a <GUI_MEMDEV_Draw+0x13a>
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	dd50      	ble.n	800a17a <GUI_MEMDEV_Draw+0x13a>
 800a0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	4650      	mov	r0, sl
 800a0de:	4641      	mov	r1, r8
 800a0e0:	463a      	mov	r2, r7
 800a0e2:	4633      	mov	r3, r6
 800a0e4:	f000 fe3c 	bl	800ad60 <GUI_MEMDEV_CreateEx>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	b920      	cbnz	r0, 800a0f6 <GUI_MEMDEV_Draw+0xb6>
 800a0ec:	9804      	ldr	r0, [sp, #16]
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	4798      	blx	r3
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	e042      	b.n	800a17c <GUI_MEMDEV_Draw+0x13c>
 800a0f6:	f7ff ff7d 	bl	8009ff4 <GUI_MEMDEV_GetYSize>
 800a0fa:	42a0      	cmp	r0, r4
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	d006      	beq.n	800a10e <GUI_MEMDEV_Draw+0xce>
 800a100:	f8db 3000 	ldr.w	r3, [fp]
 800a104:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a106:	b110      	cbz	r0, 800a10e <GUI_MEMDEV_Draw+0xce>
 800a108:	2132      	movs	r1, #50	; 0x32
 800a10a:	f7fd ff3d 	bl	8007f88 <WM__SendMessageNoPara>
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 fe62 	bl	800add8 <GUI_MEMDEV_Select>
 800a114:	4273      	negs	r3, r6
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	46a1      	mov	r9, r4
 800a11a:	2700      	movs	r7, #0
 800a11c:	45b1      	cmp	r9, r6
 800a11e:	da03      	bge.n	800a128 <GUI_MEMDEV_Draw+0xe8>
 800a120:	4628      	mov	r0, r5
 800a122:	4649      	mov	r1, r9
 800a124:	f006 fb36 	bl	8010794 <GUI_MEMDEV_ReduceYSize>
 800a128:	b147      	cbz	r7, 800a13c <GUI_MEMDEV_Draw+0xfc>
 800a12a:	4628      	mov	r0, r5
 800a12c:	4651      	mov	r1, sl
 800a12e:	eb07 0208 	add.w	r2, r7, r8
 800a132:	f7ff ff35 	bl	8009fa0 <GUI_MEMDEV_SetOrg>
 800a136:	4628      	mov	r0, r5
 800a138:	f006 fb42 	bl	80107c0 <GUI_MEMDEV_Clear>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	9804      	ldr	r0, [sp, #16]
 800a140:	4798      	blx	r3
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <GUI_MEMDEV_Draw+0x14c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	b10b      	cbz	r3, 800a14c <GUI_MEMDEV_Draw+0x10c>
 800a148:	2000      	movs	r0, #0
 800a14a:	4798      	blx	r3
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 febb 	bl	800aec8 <GUI_MEMDEV_CopyToLCD>
 800a152:	4437      	add	r7, r6
 800a154:	9b05      	ldr	r3, [sp, #20]
 800a156:	42a7      	cmp	r7, r4
 800a158:	4499      	add	r9, r3
 800a15a:	dbdf      	blt.n	800a11c <GUI_MEMDEV_Draw+0xdc>
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 fddd 	bl	800ad1c <GUI_MEMDEV_Delete>
 800a162:	2000      	movs	r0, #0
 800a164:	f000 fe38 	bl	800add8 <GUI_MEMDEV_Select>
 800a168:	42a6      	cmp	r6, r4
 800a16a:	d006      	beq.n	800a17a <GUI_MEMDEV_Draw+0x13a>
 800a16c:	f8db 3000 	ldr.w	r3, [fp]
 800a170:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a172:	b110      	cbz	r0, 800a17a <GUI_MEMDEV_Draw+0x13a>
 800a174:	2133      	movs	r1, #51	; 0x33
 800a176:	f7fd ff07 	bl	8007f88 <WM__SendMessageNoPara>
 800a17a:	2000      	movs	r0, #0
 800a17c:	b009      	add	sp, #36	; 0x24
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	bf00      	nop
 800a184:	20000084 	.word	0x20000084
 800a188:	20005680 	.word	0x20005680
 800a18c:	20005468 	.word	0x20005468

0800a190 <_GetDevData>:
 800a190:	4802      	ldr	r0, [pc, #8]	; (800a19c <_GetDevData+0xc>)
 800a192:	2901      	cmp	r1, #1
 800a194:	bf18      	it	ne
 800a196:	2000      	movne	r0, #0
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	08013f18 	.word	0x08013f18

0800a1a0 <_GetDevFunc>:
 800a1a0:	4802      	ldr	r0, [pc, #8]	; (800a1ac <_GetDevFunc+0xc>)
 800a1a2:	2916      	cmp	r1, #22
 800a1a4:	bf18      	it	ne
 800a1a6:	2000      	movne	r0, #0
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	080103a5 	.word	0x080103a5

0800a1b0 <_GetDevProp>:
 800a1b0:	2908      	cmp	r1, #8
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2020      	moveq	r0, #32
 800a1b6:	2000      	movne	r0, #0
 800a1b8:	4770      	bx	lr

0800a1ba <_SetOrg>:
 800a1ba:	b508      	push	{r3, lr}
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	68c3      	ldr	r3, [r0, #12]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	4798      	blx	r3
 800a1c4:	bd08      	pop	{r3, pc}

0800a1c6 <_GetRect>:
 800a1c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c8:	6880      	ldr	r0, [r0, #8]
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	f004 ff06 	bl	800efdc <GUI_ALLOC_LockH>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	a802      	add	r0, sp, #8
 800a1d4:	8899      	ldrh	r1, [r3, #4]
 800a1d6:	88da      	ldrh	r2, [r3, #6]
 800a1d8:	891d      	ldrh	r5, [r3, #8]
 800a1da:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a1de:	895b      	ldrh	r3, [r3, #10]
 800a1e0:	8021      	strh	r1, [r4, #0]
 800a1e2:	8062      	strh	r2, [r4, #2]
 800a1e4:	4429      	add	r1, r5
 800a1e6:	441a      	add	r2, r3
 800a1e8:	3901      	subs	r1, #1
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	80a1      	strh	r1, [r4, #4]
 800a1ee:	80e2      	strh	r2, [r4, #6]
 800a1f0:	f004 ff02 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a1f4:	b003      	add	sp, #12
 800a1f6:	bd30      	pop	{r4, r5, pc}

0800a1f8 <_XY2PTR>:
 800a1f8:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <_XY2PTR+0x3c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1fe:	4605      	mov	r5, r0
 800a200:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a202:	460e      	mov	r6, r1
 800a204:	f004 feea 	bl	800efdc <GUI_ALLOC_LockH>
 800a208:	4603      	mov	r3, r0
 800a20a:	a802      	add	r0, sp, #8
 800a20c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a210:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a214:	f103 0118 	add.w	r1, r3, #24
 800a218:	1b36      	subs	r6, r6, r4
 800a21a:	68dc      	ldr	r4, [r3, #12]
 800a21c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a220:	fb04 1406 	mla	r4, r4, r6, r1
 800a224:	1aed      	subs	r5, r5, r3
 800a226:	f004 fee7 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a22a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a22e:	4620      	mov	r0, r4
 800a230:	b002      	add	sp, #8
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	20000084 	.word	0x20000084

0800a238 <_GetPixelIndex>:
 800a238:	b508      	push	{r3, lr}
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	f7ff ffdb 	bl	800a1f8 <_XY2PTR>
 800a242:	6800      	ldr	r0, [r0, #0]
 800a244:	bd08      	pop	{r3, pc}
	...

0800a248 <_XorPixel>:
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <_XorPixel+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a24e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a250:	4615      	mov	r5, r2
 800a252:	460e      	mov	r6, r1
 800a254:	f004 fec2 	bl	800efdc <GUI_ALLOC_LockH>
 800a258:	4629      	mov	r1, r5
 800a25a:	9000      	str	r0, [sp, #0]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff ffcb 	bl	800a1f8 <_XY2PTR>
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	4604      	mov	r4, r0
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	4798      	blx	r3
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	4058      	eors	r0, r3
 800a272:	9b00      	ldr	r3, [sp, #0]
 800a274:	6020      	str	r0, [r4, #0]
 800a276:	6958      	ldr	r0, [r3, #20]
 800a278:	b160      	cbz	r0, 800a294 <_XorPixel+0x4c>
 800a27a:	f004 feaf 	bl	800efdc <GUI_ALLOC_LockH>
 800a27e:	ac02      	add	r4, sp, #8
 800a280:	6883      	ldr	r3, [r0, #8]
 800a282:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4631      	mov	r1, r6
 800a28a:	462a      	mov	r2, r5
 800a28c:	4798      	blx	r3
 800a28e:	4620      	mov	r0, r4
 800a290:	f004 feb2 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a294:	4668      	mov	r0, sp
 800a296:	f004 feaf 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a29a:	b002      	add	sp, #8
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000084 	.word	0x20000084

0800a2a4 <_SetPixelIndex>:
 800a2a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2a6:	461c      	mov	r4, r3
 800a2a8:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <_SetPixelIndex+0x48>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a2ae:	460e      	mov	r6, r1
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	f004 fe93 	bl	800efdc <GUI_ALLOC_LockH>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	9000      	str	r0, [sp, #0]
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff9c 	bl	800a1f8 <_XY2PTR>
 800a2c0:	9b00      	ldr	r3, [sp, #0]
 800a2c2:	6004      	str	r4, [r0, #0]
 800a2c4:	6958      	ldr	r0, [r3, #20]
 800a2c6:	b160      	cbz	r0, 800a2e2 <_SetPixelIndex+0x3e>
 800a2c8:	f004 fe88 	bl	800efdc <GUI_ALLOC_LockH>
 800a2cc:	ac02      	add	r4, sp, #8
 800a2ce:	6883      	ldr	r3, [r0, #8]
 800a2d0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4798      	blx	r3
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f004 fe8b 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	f004 fe88 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a2e8:	b002      	add	sp, #8
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	20000084 	.word	0x20000084

0800a2f0 <_DrawVLine>:
 800a2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4d2c      	ldr	r5, [pc, #176]	; (800a3a8 <_DrawVLine+0xb8>)
 800a2f6:	461e      	mov	r6, r3
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	4614      	mov	r4, r2
 800a300:	f004 fe6c 	bl	800efdc <GUI_ALLOC_LockH>
 800a304:	9000      	str	r0, [sp, #0]
 800a306:	6940      	ldr	r0, [r0, #20]
 800a308:	46a9      	mov	r9, r5
 800a30a:	b108      	cbz	r0, 800a310 <_DrawVLine+0x20>
 800a30c:	f004 fe66 	bl	800efdc <GUI_ALLOC_LockH>
 800a310:	9001      	str	r0, [sp, #4]
 800a312:	4621      	mov	r1, r4
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff ff6f 	bl	800a1f8 <_XY2PTR>
 800a31a:	f8d9 2000 	ldr.w	r2, [r9]
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a328:	f8d1 9000 	ldr.w	r9, [r1]
 800a32c:	07d2      	lsls	r2, r2, #31
 800a32e:	4605      	mov	r5, r0
 800a330:	d51f      	bpl.n	800a372 <_DrawVLine+0x82>
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	4798      	blx	r3
 800a33a:	4680      	mov	r8, r0
 800a33c:	9801      	ldr	r0, [sp, #4]
 800a33e:	b128      	cbz	r0, 800a34c <_DrawVLine+0x5c>
 800a340:	6882      	ldr	r2, [r0, #8]
 800a342:	4639      	mov	r1, r7
 800a344:	f8d2 c000 	ldr.w	ip, [r2]
 800a348:	4622      	mov	r2, r4
 800a34a:	47e0      	blx	ip
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	ea83 0308 	eor.w	r3, r3, r8
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	9b00      	ldr	r3, [sp, #0]
 800a356:	3401      	adds	r4, #1
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	42b4      	cmp	r4, r6
 800a35c:	441d      	add	r5, r3
 800a35e:	dded      	ble.n	800a33c <_DrawVLine+0x4c>
 800a360:	4668      	mov	r0, sp
 800a362:	f004 fe49 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	b1d3      	cbz	r3, 800a3a0 <_DrawVLine+0xb0>
 800a36a:	a801      	add	r0, sp, #4
 800a36c:	f004 fe44 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a370:	e016      	b.n	800a3a0 <_DrawVLine+0xb0>
 800a372:	9b01      	ldr	r3, [sp, #4]
 800a374:	b163      	cbz	r3, 800a390 <_DrawVLine+0xa0>
 800a376:	9801      	ldr	r0, [sp, #4]
 800a378:	6883      	ldr	r3, [r0, #8]
 800a37a:	4622      	mov	r2, r4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4639      	mov	r1, r7
 800a380:	3401      	adds	r4, #1
 800a382:	4798      	blx	r3
 800a384:	42b4      	cmp	r4, r6
 800a386:	f8c5 9000 	str.w	r9, [r5]
 800a38a:	4445      	add	r5, r8
 800a38c:	ddf3      	ble.n	800a376 <_DrawVLine+0x86>
 800a38e:	e7e7      	b.n	800a360 <_DrawVLine+0x70>
 800a390:	1b34      	subs	r4, r6, r4
 800a392:	3401      	adds	r4, #1
 800a394:	3c01      	subs	r4, #1
 800a396:	f8c5 9000 	str.w	r9, [r5]
 800a39a:	4445      	add	r5, r8
 800a39c:	d1fa      	bne.n	800a394 <_DrawVLine+0xa4>
 800a39e:	e7df      	b.n	800a360 <_DrawVLine+0x70>
 800a3a0:	b003      	add	sp, #12
 800a3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000084 	.word	0x20000084

0800a3ac <_FillRect>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a460 <_FillRect+0xb4>
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	f8db 2000 	ldr.w	r2, [fp]
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a3be:	460f      	mov	r7, r1
 800a3c0:	461d      	mov	r5, r3
 800a3c2:	f004 fe0b 	bl	800efdc <GUI_ALLOC_LockH>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	9002      	str	r0, [sp, #8]
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	f7ff ff14 	bl	800a1f8 <_XY2PTR>
 800a3d0:	9a02      	ldr	r2, [sp, #8]
 800a3d2:	f8db 3000 	ldr.w	r3, [fp]
 800a3d6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800a3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3dc:	4606      	mov	r6, r0
 800a3de:	6950      	ldr	r0, [r2, #20]
 800a3e0:	f8d3 a000 	ldr.w	sl, [r3]
 800a3e4:	1bed      	subs	r5, r5, r7
 800a3e6:	3501      	adds	r5, #1
 800a3e8:	b338      	cbz	r0, 800a43a <_FillRect+0x8e>
 800a3ea:	f004 fdf7 	bl	800efdc <GUI_ALLOC_LockH>
 800a3ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3f0:	f10d 0810 	add.w	r8, sp, #16
 800a3f4:	1b13      	subs	r3, r2, r4
 800a3f6:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4639      	mov	r1, r7
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	f006 f9b0 	bl	8010768 <GUI_USAGE_AddRect>
 800a408:	4640      	mov	r0, r8
 800a40a:	f004 fdf5 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a40e:	e014      	b.n	800a43a <_FillRect+0x8e>
 800a410:	f8db 3000 	ldr.w	r3, [fp]
 800a414:	7c1b      	ldrb	r3, [r3, #16]
 800a416:	07db      	lsls	r3, r3, #31
 800a418:	d513      	bpl.n	800a442 <_FillRect+0x96>
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	4798      	blx	r3
 800a424:	4632      	mov	r2, r6
 800a426:	462b      	mov	r3, r5
 800a428:	6811      	ldr	r1, [r2, #0]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	ea81 0100 	eor.w	r1, r1, r0
 800a430:	f842 1b04 	str.w	r1, [r2], #4
 800a434:	d1f8      	bne.n	800a428 <_FillRect+0x7c>
 800a436:	444e      	add	r6, r9
 800a438:	3401      	adds	r4, #1
 800a43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a43c:	429c      	cmp	r4, r3
 800a43e:	dde7      	ble.n	800a410 <_FillRect+0x64>
 800a440:	e008      	b.n	800a454 <_FillRect+0xa8>
 800a442:	2d00      	cmp	r5, #0
 800a444:	ddf7      	ble.n	800a436 <_FillRect+0x8a>
 800a446:	462b      	mov	r3, r5
 800a448:	4632      	mov	r2, r6
 800a44a:	3b01      	subs	r3, #1
 800a44c:	f842 ab04 	str.w	sl, [r2], #4
 800a450:	d1fb      	bne.n	800a44a <_FillRect+0x9e>
 800a452:	e7f0      	b.n	800a436 <_FillRect+0x8a>
 800a454:	a802      	add	r0, sp, #8
 800a456:	f004 fdcf 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a45a:	b005      	add	sp, #20
 800a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a460:	20000084 	.word	0x20000084

0800a464 <_DrawHLine>:
 800a464:	b507      	push	{r0, r1, r2, lr}
 800a466:	9200      	str	r2, [sp, #0]
 800a468:	f7ff ffa0 	bl	800a3ac <_FillRect>
 800a46c:	b003      	add	sp, #12
 800a46e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a474 <_DrawBitmap>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	4c90      	ldr	r4, [pc, #576]	; (800a6bc <_DrawBitmap+0x248>)
 800a47a:	b091      	sub	sp, #68	; 0x44
 800a47c:	469b      	mov	fp, r3
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	9008      	str	r0, [sp, #32]
 800a482:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a484:	9207      	str	r2, [sp, #28]
 800a486:	460e      	mov	r6, r1
 800a488:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800a48c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a48e:	2800      	cmp	r0, #0
 800a490:	f000 838b 	beq.w	800abaa <_DrawBitmap+0x736>
 800a494:	f004 fda2 	bl	800efdc <GUI_ALLOC_LockH>
 800a498:	900e      	str	r0, [sp, #56]	; 0x38
 800a49a:	6940      	ldr	r0, [r0, #20]
 800a49c:	b108      	cbz	r0, 800a4a2 <_DrawBitmap+0x2e>
 800a49e:	f004 fd9d 	bl	800efdc <GUI_ALLOC_LockH>
 800a4a2:	900f      	str	r0, [sp, #60]	; 0x3c
 800a4a4:	a810      	add	r0, sp, #64	; 0x40
 800a4a6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ae:	f004 fda3 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a4b2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a4b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a4b6:	4437      	add	r7, r6
 800a4b8:	9704      	str	r7, [sp, #16]
 800a4ba:	b150      	cbz	r0, 800a4d2 <_DrawBitmap+0x5e>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	7c1b      	ldrb	r3, [r3, #16]
 800a4c0:	079c      	lsls	r4, r3, #30
 800a4c2:	d406      	bmi.n	800a4d2 <_DrawBitmap+0x5e>
 800a4c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a4c6:	9700      	str	r7, [sp, #0]
 800a4c8:	9904      	ldr	r1, [sp, #16]
 800a4ca:	9a07      	ldr	r2, [sp, #28]
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	f006 f94b 	bl	8010768 <GUI_USAGE_AddRect>
 800a4d2:	9804      	ldr	r0, [sp, #16]
 800a4d4:	9907      	ldr	r1, [sp, #28]
 800a4d6:	f7ff fe8f 	bl	800a1f8 <_XY2PTR>
 800a4da:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a4dc:	2f17      	cmp	r7, #23
 800a4de:	4606      	mov	r6, r0
 800a4e0:	dd64      	ble.n	800a5ac <_DrawBitmap+0x138>
 800a4e2:	ea4f 078b 	mov.w	r7, fp, lsl #2
 800a4e6:	9706      	str	r7, [sp, #24]
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a4ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a4f0:	45b9      	cmp	r9, r7
 800a4f2:	da57      	bge.n	800a5a4 <_DrawBitmap+0x130>
 800a4f4:	b130      	cbz	r0, 800a504 <_DrawBitmap+0x90>
 800a4f6:	6883      	ldr	r3, [r0, #8]
 800a4f8:	9a07      	ldr	r2, [sp, #28]
 800a4fa:	685c      	ldr	r4, [r3, #4]
 800a4fc:	9904      	ldr	r1, [sp, #16]
 800a4fe:	444a      	add	r2, r9
 800a500:	465b      	mov	r3, fp
 800a502:	47a0      	blx	r4
 800a504:	9f08      	ldr	r7, [sp, #32]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	68d8      	ldr	r0, [r3, #12]
 800a50a:	b130      	cbz	r0, 800a51a <_DrawBitmap+0xa6>
 800a50c:	4b6c      	ldr	r3, [pc, #432]	; (800a6c0 <_DrawBitmap+0x24c>)
 800a50e:	9a06      	ldr	r2, [sp, #24]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4630      	mov	r0, r6
 800a514:	4651      	mov	r1, sl
 800a516:	4798      	blx	r3
 800a518:	e03d      	b.n	800a596 <_DrawBitmap+0x122>
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4798      	blx	r3
 800a51e:	0e00      	lsrs	r0, r0, #24
 800a520:	9005      	str	r0, [sp, #20]
 800a522:	4635      	mov	r5, r6
 800a524:	465f      	mov	r7, fp
 800a526:	4654      	mov	r4, sl
 800a528:	463b      	mov	r3, r7
 800a52a:	4622      	mov	r2, r4
 800a52c:	f04f 0800 	mov.w	r8, #0
 800a530:	f852 1b04 	ldr.w	r1, [r2], #4
 800a534:	9805      	ldr	r0, [sp, #20]
 800a536:	0e09      	lsrs	r1, r1, #24
 800a538:	4281      	cmp	r1, r0
 800a53a:	9805      	ldr	r0, [sp, #20]
 800a53c:	bf08      	it	eq
 800a53e:	f108 0801 	addeq.w	r8, r8, #1
 800a542:	4281      	cmp	r1, r0
 800a544:	f103 33ff 	add.w	r3, r3, #4294967295
 800a548:	d012      	beq.n	800a570 <_DrawBitmap+0xfc>
 800a54a:	f1b8 0f00 	cmp.w	r8, #0
 800a54e:	d012      	beq.n	800a576 <_DrawBitmap+0x102>
 800a550:	4a5b      	ldr	r2, [pc, #364]	; (800a6c0 <_DrawBitmap+0x24c>)
 800a552:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800a556:	f8d2 c000 	ldr.w	ip, [r2]
 800a55a:	9303      	str	r3, [sp, #12]
 800a55c:	4628      	mov	r0, r5
 800a55e:	4621      	mov	r1, r4
 800a560:	461a      	mov	r2, r3
 800a562:	47e0      	blx	ip
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	ebc8 0707 	rsb	r7, r8, r7
 800a56a:	441d      	add	r5, r3
 800a56c:	441c      	add	r4, r3
 800a56e:	e010      	b.n	800a592 <_DrawBitmap+0x11e>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1dd      	bne.n	800a530 <_DrawBitmap+0xbc>
 800a574:	e7e9      	b.n	800a54a <_DrawBitmap+0xd6>
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	0e02      	lsrs	r2, r0, #24
 800a57a:	2aff      	cmp	r2, #255	; 0xff
 800a57c:	d006      	beq.n	800a58c <_DrawBitmap+0x118>
 800a57e:	4b51      	ldr	r3, [pc, #324]	; (800a6c4 <_DrawBitmap+0x250>)
 800a580:	6829      	ldr	r1, [r5, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	43d2      	mvns	r2, r2
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	4798      	blx	r3
 800a58a:	6028      	str	r0, [r5, #0]
 800a58c:	3504      	adds	r5, #4
 800a58e:	3404      	adds	r4, #4
 800a590:	3f01      	subs	r7, #1
 800a592:	2f00      	cmp	r7, #0
 800a594:	d1c8      	bne.n	800a528 <_DrawBitmap+0xb4>
 800a596:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a598:	44ba      	add	sl, r7
 800a59a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a59c:	f109 0901 	add.w	r9, r9, #1
 800a5a0:	443e      	add	r6, r7
 800a5a2:	e7a3      	b.n	800a4ec <_DrawBitmap+0x78>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f040 82fd 	bne.w	800aba4 <_DrawBitmap+0x730>
 800a5aa:	e2fe      	b.n	800abaa <_DrawBitmap+0x736>
 800a5ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a5ae:	2f10      	cmp	r7, #16
 800a5b0:	d134      	bne.n	800a61c <_DrawBitmap+0x1a8>
 800a5b2:	1f06      	subs	r6, r0, #4
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a5b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a5ba:	42bd      	cmp	r5, r7
 800a5bc:	f280 80a3 	bge.w	800a706 <_DrawBitmap+0x292>
 800a5c0:	9f07      	ldr	r7, [sp, #28]
 800a5c2:	442f      	add	r7, r5
 800a5c4:	b13c      	cbz	r4, 800a5d6 <_DrawBitmap+0x162>
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	9904      	ldr	r1, [sp, #16]
 800a5ca:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	463a      	mov	r2, r7
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	47e0      	blx	ip
 800a5d6:	f1aa 0902 	sub.w	r9, sl, #2
 800a5da:	9605      	str	r6, [sp, #20]
 800a5dc:	46d8      	mov	r8, fp
 800a5de:	9808      	ldr	r0, [sp, #32]
 800a5e0:	9904      	ldr	r1, [sp, #16]
 800a5e2:	6903      	ldr	r3, [r0, #16]
 800a5e4:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	4459      	add	r1, fp
 800a5ec:	ebc8 0101 	rsb	r1, r8, r1
 800a5f0:	9103      	str	r1, [sp, #12]
 800a5f2:	4798      	blx	r3
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	9903      	ldr	r1, [sp, #12]
 800a5f8:	f843 0f04 	str.w	r0, [r3, #4]!
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	b124      	cbz	r4, 800a60a <_DrawBitmap+0x196>
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	4620      	mov	r0, r4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	463a      	mov	r2, r7
 800a608:	4798      	blx	r3
 800a60a:	f1b8 0801 	subs.w	r8, r8, #1
 800a60e:	d1e6      	bne.n	800a5de <_DrawBitmap+0x16a>
 800a610:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a612:	44ba      	add	sl, r7
 800a614:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a616:	3501      	adds	r5, #1
 800a618:	443e      	add	r6, r7
 800a61a:	e7cc      	b.n	800a5b6 <_DrawBitmap+0x142>
 800a61c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a61e:	2f08      	cmp	r7, #8
 800a620:	f100 0604 	add.w	r6, r0, #4
 800a624:	d173      	bne.n	800a70e <_DrawBitmap+0x29a>
 800a626:	9f07      	ldr	r7, [sp, #28]
 800a628:	9907      	ldr	r1, [sp, #28]
 800a62a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a62c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a62e:	1a7b      	subs	r3, r7, r1
 800a630:	4293      	cmp	r3, r2
 800a632:	f1a6 0004 	sub.w	r0, r6, #4
 800a636:	da66      	bge.n	800a706 <_DrawBitmap+0x292>
 800a638:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <_DrawBitmap+0x248>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	7c1b      	ldrb	r3, [r3, #16]
 800a63e:	b36d      	cbz	r5, 800a69c <_DrawBitmap+0x228>
 800a640:	f013 0303 	ands.w	r3, r3, #3
 800a644:	d005      	beq.n	800a652 <_DrawBitmap+0x1de>
 800a646:	2b02      	cmp	r3, #2
 800a648:	d157      	bne.n	800a6fa <_DrawBitmap+0x286>
 800a64a:	46b1      	mov	r9, r6
 800a64c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a650:	e01c      	b.n	800a68c <_DrawBitmap+0x218>
 800a652:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a656:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a65a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a65e:	3301      	adds	r3, #1
 800a660:	455b      	cmp	r3, fp
 800a662:	d1f6      	bne.n	800a652 <_DrawBitmap+0x1de>
 800a664:	e049      	b.n	800a6fa <_DrawBitmap+0x286>
 800a666:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a66a:	f849 3c04 	str.w	r3, [r9, #-4]
 800a66e:	b12c      	cbz	r4, 800a67c <_DrawBitmap+0x208>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	4620      	mov	r0, r4
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4641      	mov	r1, r8
 800a678:	463a      	mov	r2, r7
 800a67a:	4798      	blx	r3
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	445b      	add	r3, fp
 800a684:	4543      	cmp	r3, r8
 800a686:	f109 0904 	add.w	r9, r9, #4
 800a68a:	d036      	beq.n	800a6fa <_DrawBitmap+0x286>
 800a68c:	9804      	ldr	r0, [sp, #16]
 800a68e:	ebc0 030a 	rsb	r3, r0, sl
 800a692:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0f0      	beq.n	800a67c <_DrawBitmap+0x208>
 800a69a:	e7e4      	b.n	800a666 <_DrawBitmap+0x1f2>
 800a69c:	f013 0303 	ands.w	r3, r3, #3
 800a6a0:	d005      	beq.n	800a6ae <_DrawBitmap+0x23a>
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d129      	bne.n	800a6fa <_DrawBitmap+0x286>
 800a6a6:	46b1      	mov	r9, r6
 800a6a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6ac:	e01d      	b.n	800a6ea <_DrawBitmap+0x276>
 800a6ae:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <_DrawBitmap+0x24c>)
 800a6b0:	4651      	mov	r1, sl
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	465a      	mov	r2, fp
 800a6b6:	4798      	blx	r3
 800a6b8:	e01f      	b.n	800a6fa <_DrawBitmap+0x286>
 800a6ba:	bf00      	nop
 800a6bc:	20000084 	.word	0x20000084
 800a6c0:	20000074 	.word	0x20000074
 800a6c4:	20000078 	.word	0x20000078
 800a6c8:	f849 3c04 	str.w	r3, [r9, #-4]
 800a6cc:	b12c      	cbz	r4, 800a6da <_DrawBitmap+0x266>
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4641      	mov	r1, r8
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	4798      	blx	r3
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	f108 0801 	add.w	r8, r8, #1
 800a6e0:	445b      	add	r3, fp
 800a6e2:	4543      	cmp	r3, r8
 800a6e4:	f109 0904 	add.w	r9, r9, #4
 800a6e8:	d007      	beq.n	800a6fa <_DrawBitmap+0x286>
 800a6ea:	9904      	ldr	r1, [sp, #16]
 800a6ec:	ebc1 030a 	rsb	r3, r1, sl
 800a6f0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0f0      	beq.n	800a6da <_DrawBitmap+0x266>
 800a6f8:	e7e6      	b.n	800a6c8 <_DrawBitmap+0x254>
 800a6fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fe:	4492      	add	sl, r2
 800a700:	3701      	adds	r7, #1
 800a702:	441e      	add	r6, r3
 800a704:	e790      	b.n	800a628 <_DrawBitmap+0x1b4>
 800a706:	2c00      	cmp	r4, #0
 800a708:	f040 824c 	bne.w	800aba4 <_DrawBitmap+0x730>
 800a70c:	e24d      	b.n	800abaa <_DrawBitmap+0x736>
 800a70e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a710:	4bb2      	ldr	r3, [pc, #712]	; (800a9dc <_DrawBitmap+0x568>)
 800a712:	9608      	str	r6, [sp, #32]
 800a714:	007f      	lsls	r7, r7, #1
 800a716:	970c      	str	r7, [sp, #48]	; 0x30
 800a718:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a71a:	00bf      	lsls	r7, r7, #2
 800a71c:	970d      	str	r7, [sp, #52]	; 0x34
 800a71e:	9f07      	ldr	r7, [sp, #28]
 800a720:	9705      	str	r7, [sp, #20]
 800a722:	2d00      	cmp	r5, #0
 800a724:	bf08      	it	eq
 800a726:	461d      	moveq	r5, r3
 800a728:	9f08      	ldr	r7, [sp, #32]
 800a72a:	9807      	ldr	r0, [sp, #28]
 800a72c:	1f3c      	subs	r4, r7, #4
 800a72e:	9f05      	ldr	r7, [sp, #20]
 800a730:	1a3b      	subs	r3, r7, r0
 800a732:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a734:	42bb      	cmp	r3, r7
 800a736:	f280 8233 	bge.w	800aba0 <_DrawBitmap+0x72c>
 800a73a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a73c:	2f02      	cmp	r7, #2
 800a73e:	f000 80ad 	beq.w	800a89c <_DrawBitmap+0x428>
 800a742:	2f04      	cmp	r7, #4
 800a744:	f000 8150 	beq.w	800a9e8 <_DrawBitmap+0x574>
 800a748:	2f01      	cmp	r7, #1
 800a74a:	f040 821f 	bne.w	800ab8c <_DrawBitmap+0x718>
 800a74e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800a9e4 <_DrawBitmap+0x570>
 800a752:	f8d9 3000 	ldr.w	r3, [r9]
 800a756:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a758:	f004 fc40 	bl	800efdc <GUI_ALLOC_LockH>
 800a75c:	f89a 3000 	ldrb.w	r3, [sl]
 800a760:	4a9f      	ldr	r2, [pc, #636]	; (800a9e0 <_DrawBitmap+0x56c>)
 800a762:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a764:	5cd6      	ldrb	r6, [r2, r3]
 800a766:	f8d9 3000 	ldr.w	r3, [r9]
 800a76a:	900e      	str	r0, [sp, #56]	; 0x38
 800a76c:	7c1b      	ldrb	r3, [r3, #16]
 800a76e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	2b02      	cmp	r3, #2
 800a778:	465f      	mov	r7, fp
 800a77a:	f1c1 0808 	rsb	r8, r1, #8
 800a77e:	fa46 f601 	asr.w	r6, r6, r1
 800a782:	d020      	beq.n	800a7c6 <_DrawBitmap+0x352>
 800a784:	2b03      	cmp	r3, #3
 800a786:	d061      	beq.n	800a84c <_DrawBitmap+0x3d8>
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d05f      	beq.n	800a84c <_DrawBitmap+0x3d8>
 800a78c:	4652      	mov	r2, sl
 800a78e:	4547      	cmp	r7, r8
 800a790:	bf38      	it	cc
 800a792:	46b8      	movcc	r8, r7
 800a794:	ebc8 0707 	rsb	r7, r8, r7
 800a798:	4643      	mov	r3, r8
 800a79a:	4621      	mov	r1, r4
 800a79c:	f006 0001 	and.w	r0, r6, #1
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800a7a6:	f841 0b04 	str.w	r0, [r1], #4
 800a7aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a7ae:	d1f5      	bne.n	800a79c <_DrawBitmap+0x328>
 800a7b0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	d06d      	beq.n	800a894 <_DrawBitmap+0x420>
 800a7b8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a7bc:	4988      	ldr	r1, [pc, #544]	; (800a9e0 <_DrawBitmap+0x56c>)
 800a7be:	f04f 0808 	mov.w	r8, #8
 800a7c2:	5cce      	ldrb	r6, [r1, r3]
 800a7c4:	e7e3      	b.n	800a78e <_DrawBitmap+0x31a>
 800a7c6:	686b      	ldr	r3, [r5, #4]
 800a7c8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a7cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7ce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7d2:	4547      	cmp	r7, r8
 800a7d4:	bf38      	it	cc
 800a7d6:	46b8      	movcc	r8, r7
 800a7d8:	ebc8 0707 	rsb	r7, r8, r7
 800a7dc:	f1bc 0f00 	cmp.w	ip, #0
 800a7e0:	d026      	beq.n	800a830 <_DrawBitmap+0x3bc>
 800a7e2:	b91e      	cbnz	r6, 800a7ec <_DrawBitmap+0x378>
 800a7e4:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a7e8:	44c1      	add	r9, r8
 800a7ea:	e025      	b.n	800a838 <_DrawBitmap+0x3c4>
 800a7ec:	07f0      	lsls	r0, r6, #31
 800a7ee:	d50c      	bpl.n	800a80a <_DrawBitmap+0x396>
 800a7f0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a7f4:	9a05      	ldr	r2, [sp, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f8cd c00c 	str.w	ip, [sp, #12]
 800a7fc:	4660      	mov	r0, ip
 800a7fe:	4649      	mov	r1, r9
 800a800:	4798      	blx	r3
 800a802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a804:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	f1b8 0801 	subs.w	r8, r8, #1
 800a80e:	f109 0901 	add.w	r9, r9, #1
 800a812:	f104 0404 	add.w	r4, r4, #4
 800a816:	d00f      	beq.n	800a838 <_DrawBitmap+0x3c4>
 800a818:	0876      	lsrs	r6, r6, #1
 800a81a:	e7e2      	b.n	800a7e2 <_DrawBitmap+0x36e>
 800a81c:	07f1      	lsls	r1, r6, #31
 800a81e:	bf44      	itt	mi
 800a820:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800a822:	6023      	strmi	r3, [r4, #0]
 800a824:	f1b8 0801 	subs.w	r8, r8, #1
 800a828:	f104 0404 	add.w	r4, r4, #4
 800a82c:	d004      	beq.n	800a838 <_DrawBitmap+0x3c4>
 800a82e:	0876      	lsrs	r6, r6, #1
 800a830:	2e00      	cmp	r6, #0
 800a832:	d1f3      	bne.n	800a81c <_DrawBitmap+0x3a8>
 800a834:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a838:	b367      	cbz	r7, 800a894 <_DrawBitmap+0x420>
 800a83a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83c:	4a68      	ldr	r2, [pc, #416]	; (800a9e0 <_DrawBitmap+0x56c>)
 800a83e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a842:	9009      	str	r0, [sp, #36]	; 0x24
 800a844:	5cd6      	ldrb	r6, [r2, r3]
 800a846:	f04f 0808 	mov.w	r8, #8
 800a84a:	e7c2      	b.n	800a7d2 <_DrawBitmap+0x35e>
 800a84c:	6803      	ldr	r3, [r0, #0]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	4798      	blx	r3
 800a854:	4651      	mov	r1, sl
 800a856:	4547      	cmp	r7, r8
 800a858:	bf38      	it	cc
 800a85a:	46b8      	movcc	r8, r7
 800a85c:	ebc8 0707 	rsb	r7, r8, r7
 800a860:	1d23      	adds	r3, r4, #4
 800a862:	46c6      	mov	lr, r8
 800a864:	07f2      	lsls	r2, r6, #31
 800a866:	d504      	bpl.n	800a872 <_DrawBitmap+0x3fe>
 800a868:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a86c:	4042      	eors	r2, r0
 800a86e:	f843 2c04 	str.w	r2, [r3, #-4]
 800a872:	f1be 0e01 	subs.w	lr, lr, #1
 800a876:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a87a:	f103 0304 	add.w	r3, r3, #4
 800a87e:	d1f1      	bne.n	800a864 <_DrawBitmap+0x3f0>
 800a880:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a884:	b137      	cbz	r7, 800a894 <_DrawBitmap+0x420>
 800a886:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a88a:	4a55      	ldr	r2, [pc, #340]	; (800a9e0 <_DrawBitmap+0x56c>)
 800a88c:	f04f 0808 	mov.w	r8, #8
 800a890:	5cd6      	ldrb	r6, [r2, r3]
 800a892:	e7e0      	b.n	800a856 <_DrawBitmap+0x3e2>
 800a894:	a80e      	add	r0, sp, #56	; 0x38
 800a896:	f004 fbaf 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800a89a:	e177      	b.n	800ab8c <_DrawBitmap+0x718>
 800a89c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a8a4:	f1c7 0604 	rsb	r6, r7, #4
 800a8a8:	f89a 7000 	ldrb.w	r7, [sl]
 800a8ac:	409f      	lsls	r7, r3
 800a8ae:	4b4d      	ldr	r3, [pc, #308]	; (800a9e4 <_DrawBitmap+0x570>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	7c1b      	ldrb	r3, [r3, #16]
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	b2f6      	uxtb	r6, r6
 800a8bc:	b2ff      	uxtb	r7, r7
 800a8be:	d066      	beq.n	800a98e <_DrawBitmap+0x51a>
 800a8c0:	d308      	bcc.n	800a8d4 <_DrawBitmap+0x460>
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	f040 8162 	bne.w	800ab8c <_DrawBitmap+0x718>
 800a8c8:	9804      	ldr	r0, [sp, #16]
 800a8ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a8ce:	46d8      	mov	r8, fp
 800a8d0:	9006      	str	r0, [sp, #24]
 800a8d2:	e03e      	b.n	800a952 <_DrawBitmap+0x4de>
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	465b      	mov	r3, fp
 800a8d8:	429e      	cmp	r6, r3
 800a8da:	bfc8      	it	gt
 800a8dc:	b2de      	uxtbgt	r6, r3
 800a8de:	1b9b      	subs	r3, r3, r6
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800a8e8:	3901      	subs	r1, #1
 800a8ea:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800a8ee:	f840 cb04 	str.w	ip, [r0], #4
 800a8f2:	00bf      	lsls	r7, r7, #2
 800a8f4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a8f8:	b2ff      	uxtb	r7, r7
 800a8fa:	d1f3      	bne.n	800a8e4 <_DrawBitmap+0x470>
 800a8fc:	3e01      	subs	r6, #1
 800a8fe:	b2f6      	uxtb	r6, r6
 800a900:	3601      	adds	r6, #1
 800a902:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 8140 	beq.w	800ab8c <_DrawBitmap+0x718>
 800a90c:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800a910:	2604      	movs	r6, #4
 800a912:	e7e1      	b.n	800a8d8 <_DrawBitmap+0x464>
 800a914:	9906      	ldr	r1, [sp, #24]
 800a916:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a91a:	4449      	add	r1, r9
 800a91c:	d122      	bne.n	800a964 <_DrawBitmap+0x4f0>
 800a91e:	f109 0901 	add.w	r9, r9, #1
 800a922:	fa5f f289 	uxtb.w	r2, r9
 800a926:	00bf      	lsls	r7, r7, #2
 800a928:	4296      	cmp	r6, r2
 800a92a:	b2ff      	uxtb	r7, r7
 800a92c:	d1f2      	bne.n	800a914 <_DrawBitmap+0x4a0>
 800a92e:	9f06      	ldr	r7, [sp, #24]
 800a930:	3e01      	subs	r6, #1
 800a932:	b2f6      	uxtb	r6, r6
 800a934:	1c7b      	adds	r3, r7, #1
 800a936:	1c72      	adds	r2, r6, #1
 800a938:	199e      	adds	r6, r3, r6
 800a93a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800a93e:	9606      	str	r6, [sp, #24]
 800a940:	f1b8 0f00 	cmp.w	r8, #0
 800a944:	f000 8122 	beq.w	800ab8c <_DrawBitmap+0x718>
 800a948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a94e:	9309      	str	r3, [sp, #36]	; 0x24
 800a950:	2604      	movs	r6, #4
 800a952:	4546      	cmp	r6, r8
 800a954:	bfc8      	it	gt
 800a956:	fa5f f688 	uxtbgt.w	r6, r8
 800a95a:	ebc6 0808 	rsb	r8, r6, r8
 800a95e:	f04f 0900 	mov.w	r9, #0
 800a962:	e7d7      	b.n	800a914 <_DrawBitmap+0x4a0>
 800a964:	09ba      	lsrs	r2, r7, #6
 800a966:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a96a:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800a96e:	f1bc 0f00 	cmp.w	ip, #0
 800a972:	d0d4      	beq.n	800a91e <_DrawBitmap+0x4aa>
 800a974:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a97c:	4660      	mov	r0, ip
 800a97e:	f8cd c00c 	str.w	ip, [sp, #12]
 800a982:	9a05      	ldr	r2, [sp, #20]
 800a984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a986:	4798      	blx	r3
 800a988:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a98c:	e7c7      	b.n	800a91e <_DrawBitmap+0x4aa>
 800a98e:	4650      	mov	r0, sl
 800a990:	465b      	mov	r3, fp
 800a992:	429e      	cmp	r6, r3
 800a994:	bfc8      	it	gt
 800a996:	b2de      	uxtbgt	r6, r3
 800a998:	1b9b      	subs	r3, r3, r6
 800a99a:	1d22      	adds	r2, r4, #4
 800a99c:	46b4      	mov	ip, r6
 800a99e:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800a9a2:	d005      	beq.n	800a9b0 <_DrawBitmap+0x53c>
 800a9a4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a9a8:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a9ac:	f842 1c04 	str.w	r1, [r2, #-4]
 800a9b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9b4:	00bf      	lsls	r7, r7, #2
 800a9b6:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800a9ba:	b2ff      	uxtb	r7, r7
 800a9bc:	f102 0204 	add.w	r2, r2, #4
 800a9c0:	d1ed      	bne.n	800a99e <_DrawBitmap+0x52a>
 800a9c2:	3e01      	subs	r6, #1
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 80dd 	beq.w	800ab8c <_DrawBitmap+0x718>
 800a9d2:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a9d6:	2604      	movs	r6, #4
 800a9d8:	e7db      	b.n	800a992 <_DrawBitmap+0x51e>
 800a9da:	bf00      	nop
 800a9dc:	08013ed8 	.word	0x08013ed8
 800a9e0:	08014f08 	.word	0x08014f08
 800a9e4:	20000084 	.word	0x20000084
 800a9e8:	4a71      	ldr	r2, [pc, #452]	; (800abb0 <_DrawBitmap+0x73c>)
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	6812      	ldr	r2, [r2, #0]
 800a9f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a9f2:	7c12      	ldrb	r2, [r2, #16]
 800a9f4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a9f6:	f002 0203 	and.w	r2, r2, #3
 800a9fa:	4083      	lsls	r3, r0
 800a9fc:	2a01      	cmp	r2, #1
 800a9fe:	b2de      	uxtb	r6, r3
 800aa00:	f000 809c 	beq.w	800ab3c <_DrawBitmap+0x6c8>
 800aa04:	d302      	bcc.n	800aa0c <_DrawBitmap+0x598>
 800aa06:	2a02      	cmp	r2, #2
 800aa08:	d035      	beq.n	800aa76 <_DrawBitmap+0x602>
 800aa0a:	e0bf      	b.n	800ab8c <_DrawBitmap+0x718>
 800aa0c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aa0e:	b15f      	cbz	r7, 800aa28 <_DrawBitmap+0x5b4>
 800aa10:	0936      	lsrs	r6, r6, #4
 800aa12:	f10a 0201 	add.w	r2, sl, #1
 800aa16:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800aa20:	9c08      	ldr	r4, [sp, #32]
 800aa22:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aa26:	e001      	b.n	800aa2c <_DrawBitmap+0x5b8>
 800aa28:	465b      	mov	r3, fp
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	dd1a      	ble.n	800aa66 <_DrawBitmap+0x5f2>
 800aa30:	1058      	asrs	r0, r3, #1
 800aa32:	f104 0108 	add.w	r1, r4, #8
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	eb02 0800 	add.w	r8, r2, r0
 800aa3e:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800aa42:	f006 060f 	and.w	r6, r6, #15
 800aa46:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800aa4a:	f841 7c08 	str.w	r7, [r1, #-8]
 800aa4e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800aa52:	f841 6c04 	str.w	r6, [r1, #-4]
 800aa56:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800aa5a:	4542      	cmp	r2, r8
 800aa5c:	f101 0108 	add.w	r1, r1, #8
 800aa60:	d1ed      	bne.n	800aa3e <_DrawBitmap+0x5ca>
 800aa62:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 8090 	beq.w	800ab8c <_DrawBitmap+0x718>
 800aa6c:	0936      	lsrs	r6, r6, #4
 800aa6e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	e08a      	b.n	800ab8c <_DrawBitmap+0x718>
 800aa76:	981e      	ldr	r0, [sp, #120]	; 0x78
 800aa78:	b1c0      	cbz	r0, 800aaac <_DrawBitmap+0x638>
 800aa7a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800aa7e:	d00a      	beq.n	800aa96 <_DrawBitmap+0x622>
 800aa80:	0936      	lsrs	r6, r6, #4
 800aa82:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	b12f      	cbz	r7, 800aa96 <_DrawBitmap+0x622>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	9904      	ldr	r1, [sp, #16]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9a05      	ldr	r2, [sp, #20]
 800aa92:	4638      	mov	r0, r7
 800aa94:	4798      	blx	r3
 800aa96:	9904      	ldr	r1, [sp, #16]
 800aa98:	9c08      	ldr	r4, [sp, #32]
 800aa9a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800aa9e:	f101 0801 	add.w	r8, r1, #1
 800aaa2:	f10b 3cff 	add.w	ip, fp, #4294967295
 800aaa6:	f10a 0901 	add.w	r9, sl, #1
 800aaaa:	e011      	b.n	800aad0 <_DrawBitmap+0x65c>
 800aaac:	46dc      	mov	ip, fp
 800aaae:	46d1      	mov	r9, sl
 800aab0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aab4:	e00c      	b.n	800aad0 <_DrawBitmap+0x65c>
 800aab6:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800aaba:	d10d      	bne.n	800aad8 <_DrawBitmap+0x664>
 800aabc:	f016 060f 	ands.w	r6, r6, #15
 800aac0:	d11b      	bne.n	800aafa <_DrawBitmap+0x686>
 800aac2:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800aac6:	3408      	adds	r4, #8
 800aac8:	f108 0802 	add.w	r8, r8, #2
 800aacc:	f1ac 0c02 	sub.w	ip, ip, #2
 800aad0:	f1bc 0f01 	cmp.w	ip, #1
 800aad4:	dcef      	bgt.n	800aab6 <_DrawBitmap+0x642>
 800aad6:	e021      	b.n	800ab1c <_DrawBitmap+0x6a8>
 800aad8:	0933      	lsrs	r3, r6, #4
 800aada:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	d0eb      	beq.n	800aabc <_DrawBitmap+0x648>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	9a05      	ldr	r2, [sp, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f8cd c00c 	str.w	ip, [sp, #12]
 800aaee:	4638      	mov	r0, r7
 800aaf0:	4641      	mov	r1, r8
 800aaf2:	4798      	blx	r3
 800aaf4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800aaf8:	e7e0      	b.n	800aabc <_DrawBitmap+0x648>
 800aafa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	d0de      	beq.n	800aac2 <_DrawBitmap+0x64e>
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	9a05      	ldr	r2, [sp, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f8cd c00c 	str.w	ip, [sp, #12]
 800ab0e:	4638      	mov	r0, r7
 800ab10:	f108 0101 	add.w	r1, r8, #1
 800ab14:	4798      	blx	r3
 800ab16:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ab1a:	e7d2      	b.n	800aac2 <_DrawBitmap+0x64e>
 800ab1c:	f1bc 0f00 	cmp.w	ip, #0
 800ab20:	d034      	beq.n	800ab8c <_DrawBitmap+0x718>
 800ab22:	0936      	lsrs	r6, r6, #4
 800ab24:	d032      	beq.n	800ab8c <_DrawBitmap+0x718>
 800ab26:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	b377      	cbz	r7, 800ab8c <_DrawBitmap+0x718>
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	9a05      	ldr	r2, [sp, #20]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4638      	mov	r0, r7
 800ab36:	4641      	mov	r1, r8
 800ab38:	4798      	blx	r3
 800ab3a:	e027      	b.n	800ab8c <_DrawBitmap+0x718>
 800ab3c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ab3e:	f1c7 0302 	rsb	r3, r7, #2
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	4657      	mov	r7, sl
 800ab46:	465a      	mov	r2, fp
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	bfc8      	it	gt
 800ab4c:	b2d3      	uxtbgt	r3, r2
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	1d20      	adds	r0, r4, #4
 800ab52:	469c      	mov	ip, r3
 800ab54:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800ab58:	d005      	beq.n	800ab66 <_DrawBitmap+0x6f2>
 800ab5a:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800ab5e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ab62:	f840 1c04 	str.w	r1, [r0, #-4]
 800ab66:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab6a:	0136      	lsls	r6, r6, #4
 800ab6c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ab70:	b2f6      	uxtb	r6, r6
 800ab72:	f100 0004 	add.w	r0, r0, #4
 800ab76:	d1ed      	bne.n	800ab54 <_DrawBitmap+0x6e0>
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ab82:	b11a      	cbz	r2, 800ab8c <_DrawBitmap+0x718>
 800ab84:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e7dd      	b.n	800ab48 <_DrawBitmap+0x6d4>
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ab90:	3301      	adds	r3, #1
 800ab92:	44ba      	add	sl, r7
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	443b      	add	r3, r7
 800ab9c:	9308      	str	r3, [sp, #32]
 800ab9e:	e5c3      	b.n	800a728 <_DrawBitmap+0x2b4>
 800aba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aba2:	b113      	cbz	r3, 800abaa <_DrawBitmap+0x736>
 800aba4:	a80f      	add	r0, sp, #60	; 0x3c
 800aba6:	f004 fa27 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800abaa:	b011      	add	sp, #68	; 0x44
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	20000084 	.word	0x20000084

0800abb4 <GUI_MEMDEV__WriteToActiveAt>:
 800abb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800abb8:	460e      	mov	r6, r1
 800abba:	4690      	mov	r8, r2
 800abbc:	4607      	mov	r7, r0
 800abbe:	f004 fa0d 	bl	800efdc <GUI_ALLOC_LockH>
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	ac02      	add	r4, sp, #8
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2000      	movs	r0, #0
 800abd0:	2116      	movs	r1, #22
 800abd2:	4798      	blx	r3
 800abd4:	4605      	mov	r5, r0
 800abd6:	4620      	mov	r0, r4
 800abd8:	f004 fa0e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800abdc:	b11d      	cbz	r5, 800abe6 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800abde:	4638      	mov	r0, r7
 800abe0:	4631      	mov	r1, r6
 800abe2:	4642      	mov	r2, r8
 800abe4:	47a8      	blx	r5
 800abe6:	b002      	add	sp, #8
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abec <GUI_MEMDEV__CreateFixed>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4e3e      	ldr	r6, [pc, #248]	; (800acec <GUI_MEMDEV__CreateFixed+0x100>)
 800abf2:	b087      	sub	sp, #28
 800abf4:	461d      	mov	r5, r3
 800abf6:	6833      	ldr	r3, [r6, #0]
 800abf8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800abfa:	7c5b      	ldrb	r3, [r3, #17]
 800abfc:	4683      	mov	fp, r0
 800abfe:	468a      	mov	sl, r1
 800ac00:	4690      	mov	r8, r2
 800ac02:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ac04:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac06:	2200      	movs	r2, #0
 800ac08:	f002 fcc0 	bl	800d58c <GUI_DEVICE_Create>
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d033      	beq.n	800ac7a <GUI_MEMDEV__CreateFixed+0x8e>
 800ac12:	6903      	ldr	r3, [r0, #16]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	4798      	blx	r3
 800ac18:	f001 fb1d 	bl	800c256 <LCD__GetBPPDevice>
 800ac1c:	fb08 f600 	mul.w	r6, r8, r0
 800ac20:	9003      	str	r0, [sp, #12]
 800ac22:	3607      	adds	r6, #7
 800ac24:	f004 fb1a 	bl	800f25c <GUI_ALLOC_RequestSize>
 800ac28:	f017 0901 	ands.w	r9, r7, #1
 800ac2c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800ac30:	d104      	bne.n	800ac3c <GUI_MEMDEV__CreateFixed+0x50>
 800ac32:	2304      	movs	r3, #4
 800ac34:	fb90 f0f3 	sdiv	r0, r0, r3
 800ac38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	dc09      	bgt.n	800ac54 <GUI_MEMDEV__CreateFixed+0x68>
 800ac40:	b11e      	cbz	r6, 800ac4a <GUI_MEMDEV__CreateFixed+0x5e>
 800ac42:	3818      	subs	r0, #24
 800ac44:	fbb0 f0f6 	udiv	r0, r0, r6
 800ac48:	e000      	b.n	800ac4c <GUI_MEMDEV__CreateFixed+0x60>
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	426d      	negs	r5, r5
 800ac4e:	42a8      	cmp	r0, r5
 800ac50:	bfb8      	it	lt
 800ac52:	4605      	movlt	r5, r0
 800ac54:	f1b9 0f00 	cmp.w	r9, #0
 800ac58:	d109      	bne.n	800ac6e <GUI_MEMDEV__CreateFixed+0x82>
 800ac5a:	f8cd 9000 	str.w	r9, [sp]
 800ac5e:	4658      	mov	r0, fp
 800ac60:	4651      	mov	r1, sl
 800ac62:	4642      	mov	r2, r8
 800ac64:	462b      	mov	r3, r5
 800ac66:	f005 fd3f 	bl	80106e8 <GUI_USAGE_BM_Create>
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	e000      	b.n	800ac70 <GUI_MEMDEV__CreateFixed+0x84>
 800ac6e:	2700      	movs	r7, #0
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	dc04      	bgt.n	800ac7e <GUI_MEMDEV__CreateFixed+0x92>
 800ac74:	4620      	mov	r0, r4
 800ac76:	f002 fc87 	bl	800d588 <GUI_DEVICE_Delete>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e032      	b.n	800ace4 <GUI_MEMDEV__CreateFixed+0xf8>
 800ac7e:	fb06 f005 	mul.w	r0, r6, r5
 800ac82:	3018      	adds	r0, #24
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	d002      	beq.n	800ac90 <GUI_MEMDEV__CreateFixed+0xa4>
 800ac8a:	f004 fb73 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 800ac8e:	e001      	b.n	800ac94 <GUI_MEMDEV__CreateFixed+0xa8>
 800ac90:	f004 fb7c 	bl	800f38c <GUI_ALLOC_AllocZero>
 800ac94:	4681      	mov	r9, r0
 800ac96:	b940      	cbnz	r0, 800acaa <GUI_MEMDEV__CreateFixed+0xbe>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f002 fc75 	bl	800d588 <GUI_DEVICE_Delete>
 800ac9e:	2f00      	cmp	r7, #0
 800aca0:	d0eb      	beq.n	800ac7a <GUI_MEMDEV__CreateFixed+0x8e>
 800aca2:	4638      	mov	r0, r7
 800aca4:	f004 f9d4 	bl	800f050 <GUI_ALLOC_Free>
 800aca8:	e01b      	b.n	800ace2 <GUI_MEMDEV__CreateFixed+0xf6>
 800acaa:	f004 f997 	bl	800efdc <GUI_ALLOC_LockH>
 800acae:	4603      	mov	r3, r0
 800acb0:	a806      	add	r0, sp, #24
 800acb2:	9a03      	ldr	r2, [sp, #12]
 800acb4:	f840 3d04 	str.w	r3, [r0, #-4]!
 800acb8:	611a      	str	r2, [r3, #16]
 800acba:	601c      	str	r4, [r3, #0]
 800acbc:	f8a3 b004 	strh.w	fp, [r3, #4]
 800acc0:	f8a3 a006 	strh.w	sl, [r3, #6]
 800acc4:	f8a3 8008 	strh.w	r8, [r3, #8]
 800acc8:	815d      	strh	r5, [r3, #10]
 800acca:	60de      	str	r6, [r3, #12]
 800accc:	615f      	str	r7, [r3, #20]
 800acce:	f004 f993 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800acd2:	4a06      	ldr	r2, [pc, #24]	; (800acec <GUI_MEMDEV__CreateFixed+0x100>)
 800acd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	6813      	ldr	r3, [r2, #0]
 800acda:	f8c4 9008 	str.w	r9, [r4, #8]
 800acde:	7c5b      	ldrb	r3, [r3, #17]
 800ace0:	61a3      	str	r3, [r4, #24]
 800ace2:	4648      	mov	r0, r9
 800ace4:	b007      	add	sp, #28
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acea:	bf00      	nop
 800acec:	20000084 	.word	0x20000084

0800acf0 <GUI_MEMDEV_GetBitsPerPixel>:
 800acf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acf2:	4605      	mov	r5, r0
 800acf4:	b170      	cbz	r0, 800ad14 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800acf6:	f004 f971 	bl	800efdc <GUI_ALLOC_LockH>
 800acfa:	6803      	ldr	r3, [r0, #0]
 800acfc:	ac02      	add	r4, sp, #8
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	4798      	blx	r3
 800ad08:	f001 faa5 	bl	800c256 <LCD__GetBPPDevice>
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f004 f972 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800ad14:	4628      	mov	r0, r5
 800ad16:	b003      	add	sp, #12
 800ad18:	bd30      	pop	{r4, r5, pc}
	...

0800ad1c <GUI_MEMDEV_Delete>:
 800ad1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	b1d0      	cbz	r0, 800ad58 <GUI_MEMDEV_Delete+0x3c>
 800ad22:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <GUI_MEMDEV_Delete+0x40>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad28:	4283      	cmp	r3, r0
 800ad2a:	d101      	bne.n	800ad30 <GUI_MEMDEV_Delete+0x14>
 800ad2c:	f002 fef6 	bl	800db1c <GUI_SelectLCD>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f004 f953 	bl	800efdc <GUI_ALLOC_LockH>
 800ad36:	9001      	str	r0, [sp, #4]
 800ad38:	6940      	ldr	r0, [r0, #20]
 800ad3a:	b108      	cbz	r0, 800ad40 <GUI_MEMDEV_Delete+0x24>
 800ad3c:	f005 fd00 	bl	8010740 <GUI_USAGE_DecUseCnt>
 800ad40:	ad02      	add	r5, sp, #8
 800ad42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	f002 fc1e 	bl	800d588 <GUI_DEVICE_Delete>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f004 f953 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800ad52:	4620      	mov	r0, r4
 800ad54:	f004 f97c 	bl	800f050 <GUI_ALLOC_Free>
 800ad58:	b003      	add	sp, #12
 800ad5a:	bd30      	pop	{r4, r5, pc}
 800ad5c:	20000084 	.word	0x20000084

0800ad60 <GUI_MEMDEV_CreateEx>:
 800ad60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	469a      	mov	sl, r3
 800ad66:	4b19      	ldr	r3, [pc, #100]	; (800adcc <GUI_MEMDEV_CreateEx+0x6c>)
 800ad68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	7c58      	ldrb	r0, [r3, #17]
 800ad70:	4b17      	ldr	r3, [pc, #92]	; (800add0 <GUI_MEMDEV_CreateEx+0x70>)
 800ad72:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ad76:	4688      	mov	r8, r1
 800ad78:	4691      	mov	r9, r2
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d006      	beq.n	800ad90 <GUI_MEMDEV_CreateEx+0x30>
 800ad82:	6824      	ldr	r4, [r4, #0]
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	d1f8      	bne.n	800ad7a <GUI_MEMDEV_CreateEx+0x1a>
 800ad88:	f002 fbee 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	b130      	cbz	r0, 800ad9e <GUI_MEMDEV_CreateEx+0x3e>
 800ad90:	68e3      	ldr	r3, [r4, #12]
 800ad92:	4620      	mov	r0, r4
 800ad94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad96:	2101      	movs	r1, #1
 800ad98:	4798      	blx	r3
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b908      	cbnz	r0, 800ada2 <GUI_MEMDEV_CreateEx+0x42>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	e010      	b.n	800adc4 <GUI_MEMDEV_CreateEx+0x64>
 800ada2:	6924      	ldr	r4, [r4, #16]
 800ada4:	68a3      	ldr	r3, [r4, #8]
 800ada6:	4798      	blx	r3
 800ada8:	3001      	adds	r0, #1
 800adaa:	bf04      	itt	eq
 800adac:	f045 0501 	orreq.w	r5, r5, #1
 800adb0:	4c08      	ldreq	r4, [pc, #32]	; (800add4 <GUI_MEMDEV_CreateEx+0x74>)
 800adb2:	9402      	str	r4, [sp, #8]
 800adb4:	e88d 0060 	stmia.w	sp, {r5, r6}
 800adb8:	4638      	mov	r0, r7
 800adba:	4641      	mov	r1, r8
 800adbc:	464a      	mov	r2, r9
 800adbe:	4653      	mov	r3, sl
 800adc0:	f7ff ff14 	bl	800abec <GUI_MEMDEV__CreateFixed>
 800adc4:	b004      	add	sp, #16
 800adc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adca:	bf00      	nop
 800adcc:	20000084 	.word	0x20000084
 800add0:	200056d4 	.word	0x200056d4
 800add4:	0801501c 	.word	0x0801501c

0800add8 <GUI_MEMDEV_Select>:
 800add8:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <GUI_MEMDEV_Select+0x48>)
 800adda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4604      	mov	r4, r0
 800ade0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800ade2:	461f      	mov	r7, r3
 800ade4:	b910      	cbnz	r0, 800adec <GUI_MEMDEV_Select+0x14>
 800ade6:	f002 fe99 	bl	800db1c <GUI_SelectLCD>
 800adea:	e016      	b.n	800ae1a <GUI_MEMDEV_Select+0x42>
 800adec:	b10e      	cbz	r6, 800adf2 <GUI_MEMDEV_Select+0x1a>
 800adee:	f002 fe95 	bl	800db1c <GUI_SelectLCD>
 800adf2:	f7fe ff31 	bl	8009c58 <WM_Deactivate>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f004 f8f0 	bl	800efdc <GUI_ALLOC_LockH>
 800adfc:	ad02      	add	r5, sp, #8
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ae04:	661c      	str	r4, [r3, #96]	; 0x60
 800ae06:	6800      	ldr	r0, [r0, #0]
 800ae08:	f002 fc00 	bl	800d60c <GUI_DEVICE_Link>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f004 f8f3 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800ae12:	f001 f8cf 	bl	800bfb4 <LCD_UpdateColorIndices>
 800ae16:	f001 fcdf 	bl	800c7d8 <LCD_SetClipRectMax>
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	b003      	add	sp, #12
 800ae1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae20:	20000084 	.word	0x20000084

0800ae24 <GUI_MEMDEV_CopyToLCDAt>:
 800ae24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae28:	460c      	mov	r4, r1
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	4615      	mov	r5, r2
 800ae2e:	4606      	mov	r6, r0
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d041      	beq.n	800aeb8 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800ae34:	2000      	movs	r0, #0
 800ae36:	f002 fe7e 	bl	800db36 <GUI_SetDrawMode>
 800ae3a:	4b21      	ldr	r3, [pc, #132]	; (800aec0 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4607      	mov	r7, r0
 800ae40:	4630      	mov	r0, r6
 800ae42:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800ae46:	f004 f8c9 	bl	800efdc <GUI_ALLOC_LockH>
 800ae4a:	6803      	ldr	r3, [r0, #0]
 800ae4c:	9001      	str	r0, [sp, #4]
 800ae4e:	6998      	ldr	r0, [r3, #24]
 800ae50:	f002 f9d4 	bl	800d1fc <GUI_SelectLayer>
 800ae54:	4b1b      	ldr	r3, [pc, #108]	; (800aec4 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800ae56:	429c      	cmp	r4, r3
 800ae58:	9b01      	ldr	r3, [sp, #4]
 800ae5a:	bf04      	itt	eq
 800ae5c:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800ae60:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800ae64:	891a      	ldrh	r2, [r3, #8]
 800ae66:	895b      	ldrh	r3, [r3, #10]
 800ae68:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ae6c:	3a01      	subs	r2, #1
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	4422      	add	r2, r4
 800ae72:	442b      	add	r3, r5
 800ae74:	4681      	mov	r9, r0
 800ae76:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ae7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ae7e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ae82:	f7fe fee1 	bl	8009c48 <WM_Activate>
 800ae86:	a801      	add	r0, sp, #4
 800ae88:	f004 f8b6 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800ae8c:	a802      	add	r0, sp, #8
 800ae8e:	f7fe fd39 	bl	8009904 <WM__InitIVRSearch>
 800ae92:	b948      	cbnz	r0, 800aea8 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800ae94:	4648      	mov	r0, r9
 800ae96:	f002 f9b1 	bl	800d1fc <GUI_SelectLayer>
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f7ff ff9c 	bl	800add8 <GUI_MEMDEV_Select>
 800aea0:	4638      	mov	r0, r7
 800aea2:	f002 fe48 	bl	800db36 <GUI_SetDrawMode>
 800aea6:	e007      	b.n	800aeb8 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800aea8:	4630      	mov	r0, r6
 800aeaa:	4621      	mov	r1, r4
 800aeac:	462a      	mov	r2, r5
 800aeae:	f004 fee7 	bl	800fc80 <GUI_MEMDEV__WriteToActiveOpaque>
 800aeb2:	f7fe fc65 	bl	8009780 <WM__GetNextIVR>
 800aeb6:	e7ec      	b.n	800ae92 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800aeb8:	b005      	add	sp, #20
 800aeba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aebe:	bf00      	nop
 800aec0:	20000084 	.word	0x20000084
 800aec4:	fffff001 	.word	0xfffff001

0800aec8 <GUI_MEMDEV_CopyToLCD>:
 800aec8:	4901      	ldr	r1, [pc, #4]	; (800aed0 <GUI_MEMDEV_CopyToLCD+0x8>)
 800aeca:	460a      	mov	r2, r1
 800aecc:	f7ff bfaa 	b.w	800ae24 <GUI_MEMDEV_CopyToLCDAt>
 800aed0:	fffff001 	.word	0xfffff001

0800aed4 <_SetPhysRAMAddr>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	4604      	mov	r4, r0
 800aed8:	460e      	mov	r6, r1
 800aeda:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800aede:	212a      	movs	r1, #42	; 0x2a
 800aee0:	4615      	mov	r5, r2
 800aee2:	4798      	blx	r3
 800aee4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aee6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aeea:	4431      	add	r1, r6
 800aeec:	4620      	mov	r0, r4
 800aeee:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800aef2:	4798      	blx	r3
 800aef4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aef6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aefa:	b2b7      	uxth	r7, r6
 800aefc:	4439      	add	r1, r7
 800aefe:	4620      	mov	r0, r4
 800af00:	b2c9      	uxtb	r1, r1
 800af02:	4798      	blx	r3
 800af04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af0a:	4431      	add	r1, r6
 800af0c:	4620      	mov	r0, r4
 800af0e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800af12:	4798      	blx	r3
 800af14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af1a:	4439      	add	r1, r7
 800af1c:	4620      	mov	r0, r4
 800af1e:	b2c9      	uxtb	r1, r1
 800af20:	4798      	blx	r3
 800af22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800af26:	4620      	mov	r0, r4
 800af28:	212b      	movs	r1, #43	; 0x2b
 800af2a:	4798      	blx	r3
 800af2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af32:	4429      	add	r1, r5
 800af34:	4620      	mov	r0, r4
 800af36:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800af3a:	4798      	blx	r3
 800af3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af42:	b2ae      	uxth	r6, r5
 800af44:	4431      	add	r1, r6
 800af46:	4620      	mov	r0, r4
 800af48:	b2c9      	uxtb	r1, r1
 800af4a:	4798      	blx	r3
 800af4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af52:	4429      	add	r1, r5
 800af54:	4620      	mov	r0, r4
 800af56:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800af5a:	4798      	blx	r3
 800af5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af62:	4431      	add	r1, r6
 800af64:	4620      	mov	r0, r4
 800af66:	b2c9      	uxtb	r1, r1
 800af68:	4798      	blx	r3
 800af6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800af6e:	4620      	mov	r0, r4
 800af70:	212c      	movs	r1, #44	; 0x2c
 800af72:	4798      	blx	r3
 800af74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af76 <_SetRect>:
 800af76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7a:	4604      	mov	r4, r0
 800af7c:	4688      	mov	r8, r1
 800af7e:	461f      	mov	r7, r3
 800af80:	212a      	movs	r1, #42	; 0x2a
 800af82:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800af86:	9d06      	ldr	r5, [sp, #24]
 800af88:	4616      	mov	r6, r2
 800af8a:	4798      	blx	r3
 800af8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af92:	4441      	add	r1, r8
 800af94:	4620      	mov	r0, r4
 800af96:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800af9a:	4798      	blx	r3
 800af9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afa2:	4441      	add	r1, r8
 800afa4:	4620      	mov	r0, r4
 800afa6:	b2c9      	uxtb	r1, r1
 800afa8:	4798      	blx	r3
 800afaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800afac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afb0:	4439      	add	r1, r7
 800afb2:	4620      	mov	r0, r4
 800afb4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800afb8:	4798      	blx	r3
 800afba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800afbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afc0:	4439      	add	r1, r7
 800afc2:	4620      	mov	r0, r4
 800afc4:	b2c9      	uxtb	r1, r1
 800afc6:	4798      	blx	r3
 800afc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800afcc:	4620      	mov	r0, r4
 800afce:	212b      	movs	r1, #43	; 0x2b
 800afd0:	4798      	blx	r3
 800afd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afd4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afd8:	4431      	add	r1, r6
 800afda:	4620      	mov	r0, r4
 800afdc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800afe0:	4798      	blx	r3
 800afe2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afe4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afe8:	4431      	add	r1, r6
 800afea:	4620      	mov	r0, r4
 800afec:	b2c9      	uxtb	r1, r1
 800afee:	4798      	blx	r3
 800aff0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aff2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aff6:	4429      	add	r1, r5
 800aff8:	4620      	mov	r0, r4
 800affa:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800affe:	4798      	blx	r3
 800b000:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b002:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b006:	4429      	add	r1, r5
 800b008:	4620      	mov	r0, r4
 800b00a:	b2c9      	uxtb	r1, r1
 800b00c:	4798      	blx	r3
 800b00e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b012:	4620      	mov	r0, r4
 800b014:	212c      	movs	r1, #44	; 0x2c
 800b016:	4798      	blx	r3
 800b018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b01c <_SetOrientation>:
 800b01c:	b513      	push	{r0, r1, r4, lr}
 800b01e:	4a0d      	ldr	r2, [pc, #52]	; (800b054 <_SetOrientation+0x38>)
 800b020:	4604      	mov	r4, r0
 800b022:	6851      	ldr	r1, [r2, #4]
 800b024:	6810      	ldr	r0, [r2, #0]
 800b026:	466b      	mov	r3, sp
 800b028:	c303      	stmia	r3!, {r0, r1}
 800b02a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b02e:	4620      	mov	r0, r4
 800b030:	2136      	movs	r1, #54	; 0x36
 800b032:	4798      	blx	r3
 800b034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b036:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800b038:	aa02      	add	r2, sp, #8
 800b03a:	4413      	add	r3, r2
 800b03c:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800b040:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b044:	4319      	orrs	r1, r3
 800b046:	4620      	mov	r0, r4
 800b048:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b04c:	b289      	uxth	r1, r1
 800b04e:	4798      	blx	r3
 800b050:	b002      	add	sp, #8
 800b052:	bd10      	pop	{r4, pc}
 800b054:	0801393c 	.word	0x0801393c

0800b058 <_ReadPixel_16bpp_B8>:
 800b058:	b513      	push	{r0, r1, r4, lr}
 800b05a:	4604      	mov	r4, r0
 800b05c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800b060:	202e      	movs	r0, #46	; 0x2e
 800b062:	4798      	blx	r3
 800b064:	6a21      	ldr	r1, [r4, #32]
 800b066:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b06a:	4668      	mov	r0, sp
 800b06c:	3103      	adds	r1, #3
 800b06e:	4798      	blx	r3
 800b070:	6a22      	ldr	r2, [r4, #32]
 800b072:	ab00      	add	r3, sp, #0
 800b074:	4413      	add	r3, r2
 800b076:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800b07a:	7859      	ldrb	r1, [r3, #1]
 800b07c:	7898      	ldrb	r0, [r3, #2]
 800b07e:	08d2      	lsrs	r2, r2, #3
 800b080:	0889      	lsrs	r1, r1, #2
 800b082:	02d2      	lsls	r2, r2, #11
 800b084:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800b088:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800b08c:	b002      	add	sp, #8
 800b08e:	bd10      	pop	{r4, pc}

0800b090 <_ReadPixel_16bpp_B16_I>:
 800b090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b092:	4604      	mov	r4, r0
 800b094:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800b098:	202e      	movs	r0, #46	; 0x2e
 800b09a:	4798      	blx	r3
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b0a2:	4668      	mov	r0, sp
 800b0a4:	3102      	adds	r1, #2
 800b0a6:	4798      	blx	r3
 800b0a8:	6a23      	ldr	r3, [r4, #32]
 800b0aa:	a900      	add	r1, sp, #0
 800b0ac:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800b0b0:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800b0b4:	8852      	ldrh	r2, [r2, #2]
 800b0b6:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800b0ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800b0be:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800b0c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800b0c6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800b0ca:	b004      	add	sp, #16
 800b0cc:	bd10      	pop	{r4, pc}

0800b0ce <_SetReg_B8>:
 800b0ce:	b538      	push	{r3, r4, r5, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800b0d8:	0a08      	lsrs	r0, r1, #8
 800b0da:	4798      	blx	r3
 800b0dc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b0e0:	b2e8      	uxtb	r0, r5
 800b0e2:	4798      	blx	r3
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}

0800b0e6 <_SetReg_B16>:
 800b0e6:	b508      	push	{r3, lr}
 800b0e8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	4798      	blx	r3
 800b0f0:	bd08      	pop	{r3, pc}

0800b0f2 <_WritePara_B8>:
 800b0f2:	b508      	push	{r3, lr}
 800b0f4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800b0f8:	b2c8      	uxtb	r0, r1
 800b0fa:	4798      	blx	r3
 800b0fc:	bd08      	pop	{r3, pc}

0800b0fe <_WritePara_B16>:
 800b0fe:	b508      	push	{r3, lr}
 800b100:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800b104:	4608      	mov	r0, r1
 800b106:	4798      	blx	r3
 800b108:	bd08      	pop	{r3, pc}
	...

0800b10c <_SetInterface>:
 800b10c:	2908      	cmp	r1, #8
 800b10e:	d002      	beq.n	800b116 <_SetInterface+0xa>
 800b110:	2910      	cmp	r1, #16
 800b112:	d005      	beq.n	800b120 <_SetInterface+0x14>
 800b114:	4770      	bx	lr
 800b116:	4b06      	ldr	r3, [pc, #24]	; (800b130 <_SetInterface+0x24>)
 800b118:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <_SetInterface+0x28>)
 800b11e:	e003      	b.n	800b128 <_SetInterface+0x1c>
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <_SetInterface+0x2c>)
 800b122:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <_SetInterface+0x30>)
 800b128:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	0800b0cf 	.word	0x0800b0cf
 800b134:	0800b0f3 	.word	0x0800b0f3
 800b138:	0800b0e7 	.word	0x0800b0e7
 800b13c:	0800b0ff 	.word	0x0800b0ff

0800b140 <_ReadRect_16bpp_B8>:
 800b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b142:	b085      	sub	sp, #20
 800b144:	6884      	ldr	r4, [r0, #8]
 800b146:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b148:	9700      	str	r7, [sp, #0]
 800b14a:	1abd      	subs	r5, r7, r2
 800b14c:	1a58      	subs	r0, r3, r1
 800b14e:	3501      	adds	r5, #1
 800b150:	fb00 5505 	mla	r5, r0, r5, r5
 800b154:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b158:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b15a:	4620      	mov	r0, r4
 800b15c:	47b8      	blx	r7
 800b15e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b162:	202e      	movs	r0, #46	; 0x2e
 800b164:	4798      	blx	r3
 800b166:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b16a:	6a21      	ldr	r1, [r4, #32]
 800b16c:	a802      	add	r0, sp, #8
 800b16e:	4798      	blx	r3
 800b170:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b174:	a802      	add	r0, sp, #8
 800b176:	2103      	movs	r1, #3
 800b178:	4798      	blx	r3
 800b17a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b17e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800b182:	08db      	lsrs	r3, r3, #3
 800b184:	0892      	lsrs	r2, r2, #2
 800b186:	02db      	lsls	r3, r3, #11
 800b188:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b18c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800b190:	3d01      	subs	r5, #1
 800b192:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800b196:	f826 3b02 	strh.w	r3, [r6], #2
 800b19a:	d1e9      	bne.n	800b170 <_ReadRect_16bpp_B8+0x30>
 800b19c:	b005      	add	sp, #20
 800b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1a0 <_ReadRect_16bpp_B16_I>:
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	6884      	ldr	r4, [r0, #8]
 800b1a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b1a8:	9700      	str	r7, [sp, #0]
 800b1aa:	1abd      	subs	r5, r7, r2
 800b1ac:	1a58      	subs	r0, r3, r1
 800b1ae:	3501      	adds	r5, #1
 800b1b0:	fb00 5505 	mla	r5, r0, r5, r5
 800b1b4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b1b8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	47b8      	blx	r7
 800b1be:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800b1c2:	202e      	movs	r0, #46	; 0x2e
 800b1c4:	4798      	blx	r3
 800b1c6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b1ca:	6a21      	ldr	r1, [r4, #32]
 800b1cc:	a802      	add	r0, sp, #8
 800b1ce:	4798      	blx	r3
 800b1d0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b1d4:	a802      	add	r0, sp, #8
 800b1d6:	2102      	movs	r1, #2
 800b1d8:	4798      	blx	r3
 800b1da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b1de:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800b1e2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b1e6:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800b1ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b1ee:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800b1f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b1f6:	3d01      	subs	r5, #1
 800b1f8:	f826 3b02 	strh.w	r3, [r6], #2
 800b1fc:	d1e8      	bne.n	800b1d0 <_ReadRect_16bpp_B16_I+0x30>
 800b1fe:	b007      	add	sp, #28
 800b200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b204 <GUIDRV_FlexColor_SetFunc66709>:
 800b204:	b510      	push	{r4, lr}
 800b206:	4604      	mov	r4, r0
 800b208:	f000 fde2 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800b20c:	68a3      	ldr	r3, [r4, #8]
 800b20e:	4a12      	ldr	r2, [pc, #72]	; (800b258 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800b210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800b214:	4a11      	ldr	r2, [pc, #68]	; (800b25c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800b216:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800b21a:	4a11      	ldr	r2, [pc, #68]	; (800b260 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800b21c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b220:	4a10      	ldr	r2, [pc, #64]	; (800b264 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800b222:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b22c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800b230:	4a0d      	ldr	r2, [pc, #52]	; (800b268 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800b232:	490e      	ldr	r1, [pc, #56]	; (800b26c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800b234:	6812      	ldr	r2, [r2, #0]
 800b236:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800b23a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800b23c:	6809      	ldr	r1, [r1, #0]
 800b23e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800b242:	f022 0203 	bic.w	r2, r2, #3
 800b246:	490a      	ldr	r1, [pc, #40]	; (800b270 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 800b248:	84da      	strh	r2, [r3, #38]	; 0x26
 800b24a:	4a0a      	ldr	r2, [pc, #40]	; (800b274 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800b24c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800b250:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b254:	bd10      	pop	{r4, pc}
 800b256:	bf00      	nop
 800b258:	0800aed5 	.word	0x0800aed5
 800b25c:	0800af77 	.word	0x0800af77
 800b260:	0800b01d 	.word	0x0800b01d
 800b264:	0800b059 	.word	0x0800b059
 800b268:	20000068 	.word	0x20000068
 800b26c:	20000064 	.word	0x20000064
 800b270:	0800b141 	.word	0x0800b141
 800b274:	0800b10d 	.word	0x0800b10d

0800b278 <_WriteU16_A1>:
 800b278:	b508      	push	{r3, lr}
 800b27a:	0a0b      	lsrs	r3, r1, #8
 800b27c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800b280:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800b284:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800b288:	2102      	movs	r1, #2
 800b28a:	3071      	adds	r0, #113	; 0x71
 800b28c:	4798      	blx	r3
 800b28e:	bd08      	pop	{r3, pc}

0800b290 <_WriteDataMP>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800b294:	4604      	mov	r4, r0
 800b296:	460f      	mov	r7, r1
 800b298:	4615      	mov	r5, r2
 800b29a:	2300      	movs	r3, #0
 800b29c:	b1a5      	cbz	r5, 800b2c8 <_WriteDataMP+0x38>
 800b29e:	f837 2b02 	ldrh.w	r2, [r7], #2
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	0a11      	lsrs	r1, r2, #8
 800b2a8:	2bfa      	cmp	r3, #250	; 0xfa
 800b2aa:	f800 1b02 	strb.w	r1, [r0], #2
 800b2ae:	7072      	strb	r2, [r6, #1]
 800b2b0:	d107      	bne.n	800b2c2 <_WriteDataMP+0x32>
 800b2b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b2b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b2b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b2bc:	4798      	blx	r3
 800b2be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	3d01      	subs	r5, #1
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	e7e9      	b.n	800b29c <_WriteDataMP+0xc>
 800b2c8:	b123      	cbz	r3, 800b2d4 <_WriteDataMP+0x44>
 800b2ca:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b2ce:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b2d0:	0059      	lsls	r1, r3, #1
 800b2d2:	4790      	blx	r2
 800b2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2d6 <_ReadData>:
 800b2d6:	b508      	push	{r3, lr}
 800b2d8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800b2dc:	4798      	blx	r3
 800b2de:	bd08      	pop	{r3, pc}

0800b2e0 <_WriteData>:
 800b2e0:	b289      	uxth	r1, r1
 800b2e2:	f7ff bfc9 	b.w	800b278 <_WriteU16_A1>
	...

0800b2e8 <_FillRect>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	4f40      	ldr	r7, [pc, #256]	; (800b3f0 <_FillRect+0x108>)
 800b2ee:	6884      	ldr	r4, [r0, #8]
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	6838      	ldr	r0, [r7, #0]
 800b2f4:	7c00      	ldrb	r0, [r0, #16]
 800b2f6:	f010 0f01 	tst.w	r0, #1
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	4615      	mov	r5, r2
 800b300:	4698      	mov	r8, r3
 800b302:	ebc1 0903 	rsb	r9, r1, r3
 800b306:	d045      	beq.n	800b394 <_FillRect+0xac>
 800b308:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800b30c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b30e:	4285      	cmp	r5, r0
 800b310:	dc6b      	bgt.n	800b3ea <_FillRect+0x102>
 800b312:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 800b316:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b318:	f1bc 0f00 	cmp.w	ip, #0
 800b31c:	d101      	bne.n	800b322 <_FillRect+0x3a>
 800b31e:	46b4      	mov	ip, r6
 800b320:	e007      	b.n	800b332 <_FillRect+0x4a>
 800b322:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800b326:	4650      	mov	r0, sl
 800b328:	4631      	mov	r1, r6
 800b32a:	462a      	mov	r2, r5
 800b32c:	4643      	mov	r3, r8
 800b32e:	47e0      	blx	ip
 800b330:	e011      	b.n	800b356 <_FillRect+0x6e>
 800b332:	45c4      	cmp	ip, r8
 800b334:	dc0e      	bgt.n	800b354 <_FillRect+0x6c>
 800b336:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b33a:	f8cd c00c 	str.w	ip, [sp, #12]
 800b33e:	4661      	mov	r1, ip
 800b340:	4650      	mov	r0, sl
 800b342:	462a      	mov	r2, r5
 800b344:	4798      	blx	r3
 800b346:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b34a:	f827 0b02 	strh.w	r0, [r7], #2
 800b34e:	f10c 0c01 	add.w	ip, ip, #1
 800b352:	e7ee      	b.n	800b332 <_FillRect+0x4a>
 800b354:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b356:	1ebb      	subs	r3, r7, #2
 800b358:	f109 0c01 	add.w	ip, r9, #1
 800b35c:	445f      	add	r7, fp
 800b35e:	42bb      	cmp	r3, r7
 800b360:	d005      	beq.n	800b36e <_FillRect+0x86>
 800b362:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b364:	8859      	ldrh	r1, [r3, #2]
 800b366:	404a      	eors	r2, r1
 800b368:	f823 2f02 	strh.w	r2, [r3, #2]!
 800b36c:	e7f7      	b.n	800b35e <_FillRect+0x76>
 800b36e:	9500      	str	r5, [sp, #0]
 800b370:	462a      	mov	r2, r5
 800b372:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b376:	f8cd c00c 	str.w	ip, [sp, #12]
 800b37a:	4620      	mov	r0, r4
 800b37c:	4631      	mov	r1, r6
 800b37e:	4643      	mov	r3, r8
 800b380:	47b8      	blx	r7
 800b382:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b386:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b388:	4620      	mov	r0, r4
 800b38a:	4662      	mov	r2, ip
 800b38c:	f7ff ff80 	bl	800b290 <_WriteDataMP>
 800b390:	3501      	adds	r5, #1
 800b392:	e7bb      	b.n	800b30c <_FillRect+0x24>
 800b394:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b396:	9000      	str	r0, [sp, #0]
 800b398:	1a85      	subs	r5, r0, r2
 800b39a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b39e:	4620      	mov	r0, r4
 800b3a0:	47b0      	blx	r6
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800b3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f109 0901 	add.w	r9, r9, #1
 800b3ae:	fb05 9509 	mla	r5, r5, r9, r9
 800b3b2:	f3c3 2807 	ubfx	r8, r3, #8, #8
 800b3b6:	fa5f f983 	uxtb.w	r9, r3
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	b1ad      	cbz	r5, 800b3ea <_FillRect+0x102>
 800b3be:	2df9      	cmp	r5, #249	; 0xf9
 800b3c0:	bf34      	ite	cc
 800b3c2:	462f      	movcc	r7, r5
 800b3c4:	27f9      	movcs	r7, #249	; 0xf9
 800b3c6:	0079      	lsls	r1, r7, #1
 800b3c8:	b143      	cbz	r3, 800b3dc <_FillRect+0xf4>
 800b3ca:	4633      	mov	r3, r6
 800b3cc:	1872      	adds	r2, r6, r1
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d004      	beq.n	800b3dc <_FillRect+0xf4>
 800b3d2:	f883 8001 	strb.w	r8, [r3, #1]
 800b3d6:	f803 9f02 	strb.w	r9, [r3, #2]!
 800b3da:	e7f8      	b.n	800b3ce <_FillRect+0xe6>
 800b3dc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b3e0:	1c70      	adds	r0, r6, #1
 800b3e2:	4790      	blx	r2
 800b3e4:	1bed      	subs	r5, r5, r7
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e7e8      	b.n	800b3bc <_FillRect+0xd4>
 800b3ea:	b005      	add	sp, #20
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	20000084 	.word	0x20000084

0800b3f4 <_DrawBitmap>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	b08d      	sub	sp, #52	; 0x34
 800b3fa:	6885      	ldr	r5, [r0, #8]
 800b3fc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b3fe:	9305      	str	r3, [sp, #20]
 800b400:	1e7b      	subs	r3, r7, #1
 800b402:	2b01      	cmp	r3, #1
 800b404:	9009      	str	r0, [sp, #36]	; 0x24
 800b406:	9108      	str	r1, [sp, #32]
 800b408:	920a      	str	r2, [sp, #40]	; 0x28
 800b40a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b40c:	d903      	bls.n	800b416 <_DrawBitmap+0x22>
 800b40e:	2f04      	cmp	r7, #4
 800b410:	d001      	beq.n	800b416 <_DrawBitmap+0x22>
 800b412:	2f08      	cmp	r7, #8
 800b414:	d106      	bne.n	800b424 <_DrawBitmap+0x30>
 800b416:	4b91      	ldr	r3, [pc, #580]	; (800b65c <_DrawBitmap+0x268>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	2b02      	cmp	r3, #2
 800b422:	d010      	beq.n	800b446 <_DrawBitmap+0x52>
 800b424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b426:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b428:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b42a:	9908      	ldr	r1, [sp, #32]
 800b42c:	9b05      	ldr	r3, [sp, #20]
 800b42e:	443a      	add	r2, r7
 800b430:	4429      	add	r1, r5
 800b432:	3a01      	subs	r2, #1
 800b434:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b436:	9200      	str	r2, [sp, #0]
 800b438:	440b      	add	r3, r1
 800b43a:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800b43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b440:	4628      	mov	r0, r5
 800b442:	3b01      	subs	r3, #1
 800b444:	47a0      	blx	r4
 800b446:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b44a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b44c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b44e:	ebc5 030b 	rsb	r3, r5, fp
 800b452:	42bb      	cmp	r3, r7
 800b454:	f280 8253 	bge.w	800b8fe <_DrawBitmap+0x50a>
 800b458:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b45a:	1e7b      	subs	r3, r7, #1
 800b45c:	2b0f      	cmp	r3, #15
 800b45e:	f200 8247 	bhi.w	800b8f0 <_DrawBitmap+0x4fc>
 800b462:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b466:	0010      	.short	0x0010
 800b468:	024500bb 	.word	0x024500bb
 800b46c:	02450144 	.word	0x02450144
 800b470:	02450245 	.word	0x02450245
 800b474:	024501db 	.word	0x024501db
 800b478:	02450245 	.word	0x02450245
 800b47c:	02450245 	.word	0x02450245
 800b480:	02450245 	.word	0x02450245
 800b484:	0240      	.short	0x0240
 800b486:	4b75      	ldr	r3, [pc, #468]	; (800b65c <_DrawBitmap+0x268>)
 800b488:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b48a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68ac      	ldr	r4, [r5, #8]
 800b490:	7c1b      	ldrb	r3, [r3, #16]
 800b492:	687d      	ldr	r5, [r7, #4]
 800b494:	683e      	ldr	r6, [r7, #0]
 800b496:	9507      	str	r5, [sp, #28]
 800b498:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b49a:	9d08      	ldr	r5, [sp, #32]
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	443d      	add	r5, r7
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	9503      	str	r5, [sp, #12]
 800b4a6:	d01c      	beq.n	800b4e2 <_DrawBitmap+0xee>
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d071      	beq.n	800b590 <_DrawBitmap+0x19c>
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d06f      	beq.n	800b590 <_DrawBitmap+0x19c>
 800b4b0:	9f05      	ldr	r7, [sp, #20]
 800b4b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b4b4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800b4b8:	f898 2000 	ldrb.w	r2, [r8]
 800b4bc:	2380      	movs	r3, #128	; 0x80
 800b4be:	412b      	asrs	r3, r5
 800b4c0:	421a      	tst	r2, r3
 800b4c2:	bf16      	itet	ne
 800b4c4:	9807      	ldrne	r0, [sp, #28]
 800b4c6:	b2b1      	uxtheq	r1, r6
 800b4c8:	b281      	uxthne	r1, r0
 800b4ca:	3501      	adds	r5, #1
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f7ff fed3 	bl	800b278 <_WriteU16_A1>
 800b4d2:	2d08      	cmp	r5, #8
 800b4d4:	bf04      	itt	eq
 800b4d6:	f108 0801 	addeq.w	r8, r8, #1
 800b4da:	2500      	moveq	r5, #0
 800b4dc:	3f01      	subs	r7, #1
 800b4de:	d1eb      	bne.n	800b4b8 <_DrawBitmap+0xc4>
 800b4e0:	e206      	b.n	800b8f0 <_DrawBitmap+0x4fc>
 800b4e2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b4e4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800b4e8:	9506      	str	r5, [sp, #24]
 800b4ea:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b4ee:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b4f2:	2500      	movs	r5, #0
 800b4f4:	4656      	mov	r6, sl
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	9f06      	ldr	r7, [sp, #24]
 800b4fa:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b4fe:	783a      	ldrb	r2, [r7, #0]
 800b500:	fa4c fc08 	asr.w	ip, ip, r8
 800b504:	ea12 0c0c 	ands.w	ip, r2, ip
 800b508:	d00b      	beq.n	800b522 <_DrawBitmap+0x12e>
 800b50a:	b913      	cbnz	r3, 800b512 <_DrawBitmap+0x11e>
 800b50c:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b510:	46b2      	mov	sl, r6
 800b512:	9f07      	ldr	r7, [sp, #28]
 800b514:	f8a9 7000 	strh.w	r7, [r9]
 800b518:	3501      	adds	r5, #1
 800b51a:	f109 0902 	add.w	r9, r9, #2
 800b51e:	2301      	movs	r3, #1
 800b520:	e017      	b.n	800b552 <_DrawBitmap+0x15e>
 800b522:	2b01      	cmp	r3, #1
 800b524:	d114      	bne.n	800b550 <_DrawBitmap+0x15c>
 800b526:	f8cd b000 	str.w	fp, [sp]
 800b52a:	1e73      	subs	r3, r6, #1
 800b52c:	f8cd c010 	str.w	ip, [sp, #16]
 800b530:	4620      	mov	r0, r4
 800b532:	4651      	mov	r1, sl
 800b534:	465a      	mov	r2, fp
 800b536:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b53a:	47b8      	blx	r7
 800b53c:	462a      	mov	r2, r5
 800b53e:	4620      	mov	r0, r4
 800b540:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b542:	f7ff fea5 	bl	800b290 <_WriteDataMP>
 800b546:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b54a:	4665      	mov	r5, ip
 800b54c:	4663      	mov	r3, ip
 800b54e:	e000      	b.n	800b552 <_DrawBitmap+0x15e>
 800b550:	4663      	mov	r3, ip
 800b552:	f108 0801 	add.w	r8, r8, #1
 800b556:	f1b8 0f08 	cmp.w	r8, #8
 800b55a:	f106 0601 	add.w	r6, r6, #1
 800b55e:	d104      	bne.n	800b56a <_DrawBitmap+0x176>
 800b560:	9f06      	ldr	r7, [sp, #24]
 800b562:	3701      	adds	r7, #1
 800b564:	9706      	str	r7, [sp, #24]
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	9a05      	ldr	r2, [sp, #20]
 800b56c:	9f03      	ldr	r7, [sp, #12]
 800b56e:	443a      	add	r2, r7
 800b570:	42b2      	cmp	r2, r6
 800b572:	d1c1      	bne.n	800b4f8 <_DrawBitmap+0x104>
 800b574:	9f05      	ldr	r7, [sp, #20]
 800b576:	1e7b      	subs	r3, r7, #1
 800b578:	9f03      	ldr	r7, [sp, #12]
 800b57a:	443b      	add	r3, r7
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	f000 81b7 	beq.w	800b8f0 <_DrawBitmap+0x4fc>
 800b582:	f8cd b000 	str.w	fp, [sp]
 800b586:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b58a:	4620      	mov	r0, r4
 800b58c:	4651      	mov	r1, sl
 800b58e:	e13f      	b.n	800b810 <_DrawBitmap+0x41c>
 800b590:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b594:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b596:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b598:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b59c:	9f03      	ldr	r7, [sp, #12]
 800b59e:	782a      	ldrb	r2, [r5, #0]
 800b5a0:	2380      	movs	r3, #128	; 0x80
 800b5a2:	4133      	asrs	r3, r6
 800b5a4:	44b9      	add	r9, r7
 800b5a6:	421a      	tst	r2, r3
 800b5a8:	ebc8 0909 	rsb	r9, r8, r9
 800b5ac:	d00d      	beq.n	800b5ca <_DrawBitmap+0x1d6>
 800b5ae:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b5b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	465a      	mov	r2, fp
 800b5b8:	4798      	blx	r3
 800b5ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5bc:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 800b5c0:	4043      	eors	r3, r0
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c6:	465a      	mov	r2, fp
 800b5c8:	47b8      	blx	r7
 800b5ca:	3601      	adds	r6, #1
 800b5cc:	2e08      	cmp	r6, #8
 800b5ce:	bf04      	itt	eq
 800b5d0:	3501      	addeq	r5, #1
 800b5d2:	2600      	moveq	r6, #0
 800b5d4:	f1b8 0801 	subs.w	r8, r8, #1
 800b5d8:	d1de      	bne.n	800b598 <_DrawBitmap+0x1a4>
 800b5da:	e189      	b.n	800b8f0 <_DrawBitmap+0x4fc>
 800b5dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b5de:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b5e0:	68ac      	ldr	r4, [r5, #8]
 800b5e2:	2f00      	cmp	r7, #0
 800b5e4:	f000 8184 	beq.w	800b8f0 <_DrawBitmap+0x4fc>
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <_DrawBitmap+0x268>)
 800b5ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f895 a000 	ldrb.w	sl, [r5]
 800b5f2:	7c1b      	ldrb	r3, [r3, #16]
 800b5f4:	f013 0303 	ands.w	r3, r3, #3
 800b5f8:	d011      	beq.n	800b61e <_DrawBitmap+0x22a>
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	f040 8178 	bne.w	800b8f0 <_DrawBitmap+0x4fc>
 800b600:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b602:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b606:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b608:	9703      	str	r7, [sp, #12]
 800b60a:	44a9      	add	r9, r5
 800b60c:	46a8      	mov	r8, r5
 800b60e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b610:	9507      	str	r5, [sp, #28]
 800b612:	2500      	movs	r5, #0
 800b614:	f8cd 9018 	str.w	r9, [sp, #24]
 800b618:	464e      	mov	r6, r9
 800b61a:	462b      	mov	r3, r5
 800b61c:	e040      	b.n	800b6a0 <_DrawBitmap+0x2ac>
 800b61e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b620:	9e05      	ldr	r6, [sp, #20]
 800b622:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b624:	f1c5 0303 	rsb	r3, r5, #3
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	f1c3 0206 	rsb	r2, r3, #6
 800b62e:	21c0      	movs	r1, #192	; 0xc0
 800b630:	fa41 f202 	asr.w	r2, r1, r2
 800b634:	ea02 020a 	and.w	r2, r2, sl
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b63e:	4620      	mov	r0, r4
 800b640:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b644:	3501      	adds	r5, #1
 800b646:	f7ff fe17 	bl	800b278 <_WriteU16_A1>
 800b64a:	2d04      	cmp	r5, #4
 800b64c:	d103      	bne.n	800b656 <_DrawBitmap+0x262>
 800b64e:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b652:	2500      	movs	r5, #0
 800b654:	3701      	adds	r7, #1
 800b656:	3e01      	subs	r6, #1
 800b658:	d1e4      	bne.n	800b624 <_DrawBitmap+0x230>
 800b65a:	e149      	b.n	800b8f0 <_DrawBitmap+0x4fc>
 800b65c:	20000084 	.word	0x20000084
 800b660:	b913      	cbnz	r3, 800b668 <_DrawBitmap+0x274>
 800b662:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b664:	9703      	str	r7, [sp, #12]
 800b666:	9606      	str	r6, [sp, #24]
 800b668:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b66a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b66e:	9f03      	ldr	r7, [sp, #12]
 800b670:	803b      	strh	r3, [r7, #0]
 800b672:	3702      	adds	r7, #2
 800b674:	3501      	adds	r5, #1
 800b676:	9703      	str	r7, [sp, #12]
 800b678:	2301      	movs	r3, #1
 800b67a:	f108 0801 	add.w	r8, r8, #1
 800b67e:	f1b8 0f04 	cmp.w	r8, #4
 800b682:	f106 0601 	add.w	r6, r6, #1
 800b686:	d106      	bne.n	800b696 <_DrawBitmap+0x2a2>
 800b688:	9f07      	ldr	r7, [sp, #28]
 800b68a:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b68e:	3701      	adds	r7, #1
 800b690:	9707      	str	r7, [sp, #28]
 800b692:	f04f 0800 	mov.w	r8, #0
 800b696:	9a05      	ldr	r2, [sp, #20]
 800b698:	444a      	add	r2, r9
 800b69a:	42b2      	cmp	r2, r6
 800b69c:	f000 80ad 	beq.w	800b7fa <_DrawBitmap+0x406>
 800b6a0:	f1c8 0203 	rsb	r2, r8, #3
 800b6a4:	0052      	lsls	r2, r2, #1
 800b6a6:	f1c2 0106 	rsb	r1, r2, #6
 800b6aa:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800b6ae:	fa4c fc01 	asr.w	ip, ip, r1
 800b6b2:	ea0c 0c0a 	and.w	ip, ip, sl
 800b6b6:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b6ba:	d1d1      	bne.n	800b660 <_DrawBitmap+0x26c>
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d114      	bne.n	800b6ea <_DrawBitmap+0x2f6>
 800b6c0:	f8cd b000 	str.w	fp, [sp]
 800b6c4:	1e73      	subs	r3, r6, #1
 800b6c6:	f8cd c010 	str.w	ip, [sp, #16]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	9906      	ldr	r1, [sp, #24]
 800b6ce:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b6d2:	465a      	mov	r2, fp
 800b6d4:	47b8      	blx	r7
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4620      	mov	r0, r4
 800b6da:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b6dc:	f7ff fdd8 	bl	800b290 <_WriteDataMP>
 800b6e0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b6e4:	4665      	mov	r5, ip
 800b6e6:	4663      	mov	r3, ip
 800b6e8:	e7c7      	b.n	800b67a <_DrawBitmap+0x286>
 800b6ea:	4663      	mov	r3, ip
 800b6ec:	e7c5      	b.n	800b67a <_DrawBitmap+0x286>
 800b6ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b6f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b6f2:	68ac      	ldr	r4, [r5, #8]
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	f000 80fb 	beq.w	800b8f0 <_DrawBitmap+0x4fc>
 800b6fa:	4b82      	ldr	r3, [pc, #520]	; (800b904 <_DrawBitmap+0x510>)
 800b6fc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f895 a000 	ldrb.w	sl, [r5]
 800b704:	7c1b      	ldrb	r3, [r3, #16]
 800b706:	f013 0303 	ands.w	r3, r3, #3
 800b70a:	d011      	beq.n	800b730 <_DrawBitmap+0x33c>
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	f040 80ef 	bne.w	800b8f0 <_DrawBitmap+0x4fc>
 800b712:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b718:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b71a:	9703      	str	r7, [sp, #12]
 800b71c:	44a9      	add	r9, r5
 800b71e:	46a8      	mov	r8, r5
 800b720:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b722:	9507      	str	r5, [sp, #28]
 800b724:	2500      	movs	r5, #0
 800b726:	f8cd 9018 	str.w	r9, [sp, #24]
 800b72a:	464e      	mov	r6, r9
 800b72c:	462b      	mov	r3, r5
 800b72e:	e03d      	b.n	800b7ac <_DrawBitmap+0x3b8>
 800b730:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b732:	9e05      	ldr	r6, [sp, #20]
 800b734:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b736:	f1c5 0301 	rsb	r3, r5, #1
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	f1c3 0204 	rsb	r2, r3, #4
 800b740:	21f0      	movs	r1, #240	; 0xf0
 800b742:	fa41 f202 	asr.w	r2, r1, r2
 800b746:	ea02 020a 	and.w	r2, r2, sl
 800b74a:	fa22 f303 	lsr.w	r3, r2, r3
 800b74e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b750:	4620      	mov	r0, r4
 800b752:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b756:	3501      	adds	r5, #1
 800b758:	f7ff fd8e 	bl	800b278 <_WriteU16_A1>
 800b75c:	2d02      	cmp	r5, #2
 800b75e:	d103      	bne.n	800b768 <_DrawBitmap+0x374>
 800b760:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b764:	2500      	movs	r5, #0
 800b766:	3701      	adds	r7, #1
 800b768:	3e01      	subs	r6, #1
 800b76a:	d1e4      	bne.n	800b736 <_DrawBitmap+0x342>
 800b76c:	e0c0      	b.n	800b8f0 <_DrawBitmap+0x4fc>
 800b76e:	b913      	cbnz	r3, 800b776 <_DrawBitmap+0x382>
 800b770:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b772:	9703      	str	r7, [sp, #12]
 800b774:	9606      	str	r6, [sp, #24]
 800b776:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b778:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b77c:	9f03      	ldr	r7, [sp, #12]
 800b77e:	803b      	strh	r3, [r7, #0]
 800b780:	3702      	adds	r7, #2
 800b782:	3501      	adds	r5, #1
 800b784:	9703      	str	r7, [sp, #12]
 800b786:	2301      	movs	r3, #1
 800b788:	f108 0801 	add.w	r8, r8, #1
 800b78c:	f1b8 0f02 	cmp.w	r8, #2
 800b790:	f106 0601 	add.w	r6, r6, #1
 800b794:	d106      	bne.n	800b7a4 <_DrawBitmap+0x3b0>
 800b796:	9f07      	ldr	r7, [sp, #28]
 800b798:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b79c:	3701      	adds	r7, #1
 800b79e:	9707      	str	r7, [sp, #28]
 800b7a0:	f04f 0800 	mov.w	r8, #0
 800b7a4:	9a05      	ldr	r2, [sp, #20]
 800b7a6:	444a      	add	r2, r9
 800b7a8:	42b2      	cmp	r2, r6
 800b7aa:	d026      	beq.n	800b7fa <_DrawBitmap+0x406>
 800b7ac:	f1c8 0201 	rsb	r2, r8, #1
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	f1c2 0104 	rsb	r1, r2, #4
 800b7b6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800b7ba:	fa4c fc01 	asr.w	ip, ip, r1
 800b7be:	ea0c 0c0a 	and.w	ip, ip, sl
 800b7c2:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b7c6:	d1d2      	bne.n	800b76e <_DrawBitmap+0x37a>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d114      	bne.n	800b7f6 <_DrawBitmap+0x402>
 800b7cc:	f8cd b000 	str.w	fp, [sp]
 800b7d0:	1e73      	subs	r3, r6, #1
 800b7d2:	f8cd c010 	str.w	ip, [sp, #16]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	9906      	ldr	r1, [sp, #24]
 800b7da:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b7de:	465a      	mov	r2, fp
 800b7e0:	47b8      	blx	r7
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b7e8:	f7ff fd52 	bl	800b290 <_WriteDataMP>
 800b7ec:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b7f0:	4665      	mov	r5, ip
 800b7f2:	4663      	mov	r3, ip
 800b7f4:	e7c8      	b.n	800b788 <_DrawBitmap+0x394>
 800b7f6:	4663      	mov	r3, ip
 800b7f8:	e7c6      	b.n	800b788 <_DrawBitmap+0x394>
 800b7fa:	9f05      	ldr	r7, [sp, #20]
 800b7fc:	1e7b      	subs	r3, r7, #1
 800b7fe:	444b      	add	r3, r9
 800b800:	2d00      	cmp	r5, #0
 800b802:	d075      	beq.n	800b8f0 <_DrawBitmap+0x4fc>
 800b804:	f8cd b000 	str.w	fp, [sp]
 800b808:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b80c:	9906      	ldr	r1, [sp, #24]
 800b80e:	4620      	mov	r0, r4
 800b810:	465a      	mov	r2, fp
 800b812:	47b0      	blx	r6
 800b814:	4620      	mov	r0, r4
 800b816:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b818:	462a      	mov	r2, r5
 800b81a:	e067      	b.n	800b8ec <_DrawBitmap+0x4f8>
 800b81c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b81e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b820:	68ac      	ldr	r4, [r5, #8]
 800b822:	2f00      	cmp	r7, #0
 800b824:	d064      	beq.n	800b8f0 <_DrawBitmap+0x4fc>
 800b826:	4b37      	ldr	r3, [pc, #220]	; (800b904 <_DrawBitmap+0x510>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	7c1b      	ldrb	r3, [r3, #16]
 800b82c:	f013 0303 	ands.w	r3, r3, #3
 800b830:	d009      	beq.n	800b846 <_DrawBitmap+0x452>
 800b832:	2b02      	cmp	r3, #2
 800b834:	d15c      	bne.n	800b8f0 <_DrawBitmap+0x4fc>
 800b836:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b83a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800b83e:	2600      	movs	r6, #0
 800b840:	464f      	mov	r7, r9
 800b842:	4633      	mov	r3, r6
 800b844:	e022      	b.n	800b88c <_DrawBitmap+0x498>
 800b846:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b848:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b84a:	9f05      	ldr	r7, [sp, #20]
 800b84c:	443b      	add	r3, r7
 800b84e:	1b5b      	subs	r3, r3, r5
 800b850:	2b00      	cmp	r3, #0
 800b852:	dd4d      	ble.n	800b8f0 <_DrawBitmap+0x4fc>
 800b854:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b858:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b85a:	4620      	mov	r0, r4
 800b85c:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 800b860:	f7ff fd0a 	bl	800b278 <_WriteU16_A1>
 800b864:	e7f0      	b.n	800b848 <_DrawBitmap+0x454>
 800b866:	b913      	cbnz	r3, 800b86e <_DrawBitmap+0x47a>
 800b868:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800b86c:	46b9      	mov	r9, r7
 800b86e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b870:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800b874:	f8a8 3000 	strh.w	r3, [r8]
 800b878:	3601      	adds	r6, #1
 800b87a:	f108 0802 	add.w	r8, r8, #2
 800b87e:	2301      	movs	r3, #1
 800b880:	9a08      	ldr	r2, [sp, #32]
 800b882:	9d05      	ldr	r5, [sp, #20]
 800b884:	3701      	adds	r7, #1
 800b886:	442a      	add	r2, r5
 800b888:	42ba      	cmp	r2, r7
 800b88a:	d01c      	beq.n	800b8c6 <_DrawBitmap+0x4d2>
 800b88c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b88e:	9808      	ldr	r0, [sp, #32]
 800b890:	1a2a      	subs	r2, r5, r0
 800b892:	f812 a007 	ldrb.w	sl, [r2, r7]
 800b896:	f1ba 0f00 	cmp.w	sl, #0
 800b89a:	d1e4      	bne.n	800b866 <_DrawBitmap+0x472>
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d110      	bne.n	800b8c2 <_DrawBitmap+0x4ce>
 800b8a0:	f8cd b000 	str.w	fp, [sp]
 800b8a4:	1e7b      	subs	r3, r7, #1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	465a      	mov	r2, fp
 800b8ac:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800b8b0:	47a8      	blx	r5
 800b8b2:	4632      	mov	r2, r6
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b8b8:	f7ff fcea 	bl	800b290 <_WriteDataMP>
 800b8bc:	4656      	mov	r6, sl
 800b8be:	4653      	mov	r3, sl
 800b8c0:	e7de      	b.n	800b880 <_DrawBitmap+0x48c>
 800b8c2:	4653      	mov	r3, sl
 800b8c4:	e7dc      	b.n	800b880 <_DrawBitmap+0x48c>
 800b8c6:	9f08      	ldr	r7, [sp, #32]
 800b8c8:	1e6b      	subs	r3, r5, #1
 800b8ca:	443b      	add	r3, r7
 800b8cc:	b186      	cbz	r6, 800b8f0 <_DrawBitmap+0x4fc>
 800b8ce:	f8cd b000 	str.w	fp, [sp]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	465a      	mov	r2, fp
 800b8d8:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800b8dc:	47a8      	blx	r5
 800b8de:	4620      	mov	r0, r4
 800b8e0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b8e2:	4632      	mov	r2, r6
 800b8e4:	e002      	b.n	800b8ec <_DrawBitmap+0x4f8>
 800b8e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b8e8:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b8ea:	9a05      	ldr	r2, [sp, #20]
 800b8ec:	f7ff fcd0 	bl	800b290 <_WriteDataMP>
 800b8f0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b8f2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b8f4:	443d      	add	r5, r7
 800b8f6:	9519      	str	r5, [sp, #100]	; 0x64
 800b8f8:	f10b 0b01 	add.w	fp, fp, #1
 800b8fc:	e5a5      	b.n	800b44a <_DrawBitmap+0x56>
 800b8fe:	b00d      	add	sp, #52	; 0x34
 800b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	20000084 	.word	0x20000084

0800b908 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800b908:	b510      	push	{r4, lr}
 800b90a:	4604      	mov	r4, r0
 800b90c:	f000 fa60 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800b910:	68a4      	ldr	r4, [r4, #8]
 800b912:	4b10      	ldr	r3, [pc, #64]	; (800b954 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800b914:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800b918:	4b0f      	ldr	r3, [pc, #60]	; (800b958 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800b91a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800b920:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800b924:	4b0e      	ldr	r3, [pc, #56]	; (800b960 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800b926:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800b92a:	4b0e      	ldr	r3, [pc, #56]	; (800b964 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800b92c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800b930:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800b932:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800b936:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800b93a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800b93e:	4620      	mov	r0, r4
 800b940:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b944:	2108      	movs	r1, #8
 800b946:	4798      	blx	r3
 800b948:	2310      	movs	r3, #16
 800b94a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b94c:	4b07      	ldr	r3, [pc, #28]	; (800b96c <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800b94e:	6463      	str	r3, [r4, #68]	; 0x44
 800b950:	bd10      	pop	{r4, pc}
 800b952:	bf00      	nop
 800b954:	0800b3f5 	.word	0x0800b3f5
 800b958:	0800b2e9 	.word	0x0800b2e9
 800b95c:	0800bd1f 	.word	0x0800bd1f
 800b960:	0800bc8f 	.word	0x0800bc8f
 800b964:	0800b2d7 	.word	0x0800b2d7
 800b968:	0800b2e1 	.word	0x0800b2e1
 800b96c:	080150a4 	.word	0x080150a4

0800b970 <_Log2PhysX_X0Y0S0>:
 800b970:	4608      	mov	r0, r1
 800b972:	4770      	bx	lr

0800b974 <_Log2PhysX_X1Y0S0>:
 800b974:	6800      	ldr	r0, [r0, #0]
 800b976:	1a40      	subs	r0, r0, r1
 800b978:	3801      	subs	r0, #1
 800b97a:	4770      	bx	lr

0800b97c <_Log2PhysX_X0Y1S0>:
 800b97c:	4608      	mov	r0, r1
 800b97e:	4770      	bx	lr

0800b980 <_Log2PhysX_X1Y1S0>:
 800b980:	6800      	ldr	r0, [r0, #0]
 800b982:	1a40      	subs	r0, r0, r1
 800b984:	3801      	subs	r0, #1
 800b986:	4770      	bx	lr

0800b988 <_Log2PhysX_X0Y0S1>:
 800b988:	4610      	mov	r0, r2
 800b98a:	4770      	bx	lr

0800b98c <_Log2PhysX_X1Y0S1>:
 800b98c:	6840      	ldr	r0, [r0, #4]
 800b98e:	1a80      	subs	r0, r0, r2
 800b990:	3801      	subs	r0, #1
 800b992:	4770      	bx	lr

0800b994 <_Log2PhysX_X0Y1S1>:
 800b994:	4610      	mov	r0, r2
 800b996:	4770      	bx	lr

0800b998 <_Log2PhysX_X1Y1S1>:
 800b998:	6840      	ldr	r0, [r0, #4]
 800b99a:	1a80      	subs	r0, r0, r2
 800b99c:	3801      	subs	r0, #1
 800b99e:	4770      	bx	lr

0800b9a0 <_Log2PhysY_X0Y0S0>:
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4770      	bx	lr

0800b9a4 <_Log2PhysY_X1Y0S0>:
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	4770      	bx	lr

0800b9a8 <_Log2PhysY_X0Y1S0>:
 800b9a8:	6840      	ldr	r0, [r0, #4]
 800b9aa:	1a80      	subs	r0, r0, r2
 800b9ac:	3801      	subs	r0, #1
 800b9ae:	4770      	bx	lr

0800b9b0 <_Log2PhysY_X1Y1S0>:
 800b9b0:	6840      	ldr	r0, [r0, #4]
 800b9b2:	1a80      	subs	r0, r0, r2
 800b9b4:	3801      	subs	r0, #1
 800b9b6:	4770      	bx	lr

0800b9b8 <_Log2PhysY_X0Y0S1>:
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4770      	bx	lr

0800b9bc <_Log2PhysY_X1Y0S1>:
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4770      	bx	lr

0800b9c0 <_Log2PhysY_X0Y1S1>:
 800b9c0:	6800      	ldr	r0, [r0, #0]
 800b9c2:	1a40      	subs	r0, r0, r1
 800b9c4:	3801      	subs	r0, #1
 800b9c6:	4770      	bx	lr

0800b9c8 <_Log2PhysY_X1Y1S1>:
 800b9c8:	6800      	ldr	r0, [r0, #0]
 800b9ca:	1a40      	subs	r0, r0, r1
 800b9cc:	3801      	subs	r0, #1
 800b9ce:	4770      	bx	lr

0800b9d0 <_SetPixelIndex>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	6884      	ldr	r4, [r0, #8]
 800b9d4:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800b9d8:	47a0      	blx	r4
 800b9da:	bd10      	pop	{r4, pc}

0800b9dc <_GetPixelIndex>:
 800b9dc:	b508      	push	{r3, lr}
 800b9de:	6883      	ldr	r3, [r0, #8]
 800b9e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9e4:	4798      	blx	r3
 800b9e6:	bd08      	pop	{r3, pc}

0800b9e8 <_XorPixel>:
 800b9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	4616      	mov	r6, r2
 800b9f0:	6885      	ldr	r5, [r0, #8]
 800b9f2:	f7ff fff3 	bl	800b9dc <_GetPixelIndex>
 800b9f6:	9001      	str	r0, [sp, #4]
 800b9f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4639      	mov	r1, r7
 800ba02:	4632      	mov	r2, r6
 800ba04:	ea8e 0303 	eor.w	r3, lr, r3
 800ba08:	f7ff ffe2 	bl	800b9d0 <_SetPixelIndex>
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba10 <_DrawHLine>:
 800ba10:	b513      	push	{r0, r1, r4, lr}
 800ba12:	6884      	ldr	r4, [r0, #8]
 800ba14:	9200      	str	r2, [sp, #0]
 800ba16:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800ba1a:	47a0      	blx	r4
 800ba1c:	b002      	add	sp, #8
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <_DrawVLine>:
 800ba20:	b513      	push	{r0, r1, r4, lr}
 800ba22:	6884      	ldr	r4, [r0, #8]
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	47a0      	blx	r4
 800ba2e:	b002      	add	sp, #8
 800ba30:	bd10      	pop	{r4, pc}

0800ba32 <_FillRect>:
 800ba32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba34:	9c06      	ldr	r4, [sp, #24]
 800ba36:	6885      	ldr	r5, [r0, #8]
 800ba38:	9400      	str	r4, [sp, #0]
 800ba3a:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 800ba3e:	47a0      	blx	r4
 800ba40:	b003      	add	sp, #12
 800ba42:	bd30      	pop	{r4, r5, pc}

0800ba44 <_DrawBitmap>:
 800ba44:	b530      	push	{r4, r5, lr}
 800ba46:	b087      	sub	sp, #28
 800ba48:	6885      	ldr	r5, [r0, #8]
 800ba4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba4c:	9400      	str	r4, [sp, #0]
 800ba4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ba50:	9401      	str	r4, [sp, #4]
 800ba52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ba54:	9402      	str	r4, [sp, #8]
 800ba56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ba58:	9403      	str	r4, [sp, #12]
 800ba5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ba5c:	9404      	str	r4, [sp, #16]
 800ba5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ba60:	9405      	str	r4, [sp, #20]
 800ba62:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 800ba66:	47a0      	blx	r4
 800ba68:	b007      	add	sp, #28
 800ba6a:	bd30      	pop	{r4, r5, pc}

0800ba6c <_GetDevFunc_SetRect>:
 800ba6c:	4770      	bx	lr
	...

0800ba70 <_GetDevFunc_SetRectOutside>:
 800ba70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba72:	9e07      	ldr	r6, [sp, #28]
 800ba74:	6884      	ldr	r4, [r0, #8]
 800ba76:	4d0c      	ldr	r5, [pc, #48]	; (800baa8 <_GetDevFunc_SetRectOutside+0x38>)
 800ba78:	b176      	cbz	r6, 800ba98 <_GetDevFunc_SetRectOutside+0x28>
 800ba7a:	6828      	ldr	r0, [r5, #0]
 800ba7c:	b988      	cbnz	r0, 800baa2 <_GetDevFunc_SetRectOutside+0x32>
 800ba7e:	9806      	ldr	r0, [sp, #24]
 800ba80:	9000      	str	r0, [sp, #0]
 800ba82:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800ba86:	4620      	mov	r0, r4
 800ba88:	47b0      	blx	r6
 800ba8a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800ba8e:	602b      	str	r3, [r5, #0]
 800ba90:	4b06      	ldr	r3, [pc, #24]	; (800baac <_GetDevFunc_SetRectOutside+0x3c>)
 800ba92:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800ba96:	e004      	b.n	800baa2 <_GetDevFunc_SetRectOutside+0x32>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b113      	cbz	r3, 800baa2 <_GetDevFunc_SetRectOutside+0x32>
 800ba9c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800baa0:	602e      	str	r6, [r5, #0]
 800baa2:	b002      	add	sp, #8
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
 800baa6:	bf00      	nop
 800baa8:	2000546c 	.word	0x2000546c
 800baac:	0800ba6d 	.word	0x0800ba6d

0800bab0 <_ReadPixelCust_16bpp>:
 800bab0:	b508      	push	{r3, lr}
 800bab2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bab4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800bab8:	6990      	ldr	r0, [r2, #24]
 800baba:	4798      	blx	r3
 800babc:	bd08      	pop	{r3, pc}

0800babe <_ReadPixelCust_18bpp>:
 800babe:	b508      	push	{r3, lr}
 800bac0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bac2:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800bac6:	6990      	ldr	r0, [r2, #24]
 800bac8:	4798      	blx	r3
 800baca:	bd08      	pop	{r3, pc}

0800bacc <_ReadRectCust_16bpp>:
 800bacc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bad0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bad2:	6884      	ldr	r4, [r0, #8]
 800bad4:	9500      	str	r5, [sp, #0]
 800bad6:	4617      	mov	r7, r2
 800bad8:	4620      	mov	r0, r4
 800bada:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800bade:	4699      	mov	r9, r3
 800bae0:	4688      	mov	r8, r1
 800bae2:	1bed      	subs	r5, r5, r7
 800bae4:	47b0      	blx	r6
 800bae6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bae8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800baec:	6988      	ldr	r0, [r1, #24]
 800baee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baf0:	ebc8 0809 	rsb	r8, r8, r9
 800baf4:	1c6a      	adds	r2, r5, #1
 800baf6:	fb08 2202 	mla	r2, r8, r2, r2
 800bafa:	4798      	blx	r3
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb02 <_ReadRectCust_18bpp>:
 800bb02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb08:	6884      	ldr	r4, [r0, #8]
 800bb0a:	9500      	str	r5, [sp, #0]
 800bb0c:	4617      	mov	r7, r2
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800bb14:	4699      	mov	r9, r3
 800bb16:	4688      	mov	r8, r1
 800bb18:	1bed      	subs	r5, r5, r7
 800bb1a:	47b0      	blx	r6
 800bb1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb1e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800bb22:	6988      	ldr	r0, [r1, #24]
 800bb24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb26:	ebc8 0809 	rsb	r8, r8, r9
 800bb2a:	1c6a      	adds	r2, r5, #1
 800bb2c:	fb08 2202 	mla	r2, r8, r2, r2
 800bb30:	4798      	blx	r3
 800bb32:	b003      	add	sp, #12
 800bb34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb38 <_GetDevFunc>:
 800bb38:	3901      	subs	r1, #1
 800bb3a:	2917      	cmp	r1, #23
 800bb3c:	d828      	bhi.n	800bb90 <_GetDevFunc+0x58>
 800bb3e:	e8df f001 	tbb	[pc, r1]
 800bb42:	2714      	.short	0x2714
 800bb44:	27272727 	.word	0x27272727
 800bb48:	0e272727 	.word	0x0e272727
 800bb4c:	0c191210 	.word	0x0c191210
 800bb50:	27272729 	.word	0x27272729
 800bb54:	23272727 	.word	0x23272727
 800bb58:	251e      	.short	0x251e
 800bb5a:	480f      	ldr	r0, [pc, #60]	; (800bb98 <_GetDevFunc+0x60>)
 800bb5c:	4770      	bx	lr
 800bb5e:	480f      	ldr	r0, [pc, #60]	; (800bb9c <_GetDevFunc+0x64>)
 800bb60:	4770      	bx	lr
 800bb62:	480f      	ldr	r0, [pc, #60]	; (800bba0 <_GetDevFunc+0x68>)
 800bb64:	4770      	bx	lr
 800bb66:	480f      	ldr	r0, [pc, #60]	; (800bba4 <_GetDevFunc+0x6c>)
 800bb68:	4770      	bx	lr
 800bb6a:	6803      	ldr	r3, [r0, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800bb72:	4770      	bx	lr
 800bb74:	6803      	ldr	r3, [r0, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800bb7c:	4770      	bx	lr
 800bb7e:	6803      	ldr	r3, [r0, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800bb86:	4770      	bx	lr
 800bb88:	4807      	ldr	r0, [pc, #28]	; (800bba8 <_GetDevFunc+0x70>)
 800bb8a:	4770      	bx	lr
 800bb8c:	4807      	ldr	r0, [pc, #28]	; (800bbac <_GetDevFunc+0x74>)
 800bb8e:	4770      	bx	lr
 800bb90:	2000      	movs	r0, #0
 800bb92:	4770      	bx	lr
 800bb94:	4806      	ldr	r0, [pc, #24]	; (800bbb0 <_GetDevFunc+0x78>)
 800bb96:	4770      	bx	lr
 800bb98:	0800bf31 	.word	0x0800bf31
 800bb9c:	0800bf07 	.word	0x0800bf07
 800bba0:	0800bef3 	.word	0x0800bef3
 800bba4:	0800bea9 	.word	0x0800bea9
 800bba8:	0800be0d 	.word	0x0800be0d
 800bbac:	0800ba71 	.word	0x0800ba71
 800bbb0:	0800bf1b 	.word	0x0800bf1b

0800bbb4 <_GetDevProp>:
 800bbb4:	3901      	subs	r1, #1
 800bbb6:	6880      	ldr	r0, [r0, #8]
 800bbb8:	290d      	cmp	r1, #13
 800bbba:	d823      	bhi.n	800bc04 <_GetDevProp+0x50>
 800bbbc:	e8df f001 	tbb	[pc, r1]
 800bbc0:	0f0d0b09 	.word	0x0f0d0b09
 800bbc4:	11222222 	.word	0x11222222
 800bbc8:	13252507 	.word	0x13252507
 800bbcc:	1d18      	.short	0x1d18
 800bbce:	2000      	movs	r0, #0
 800bbd0:	4770      	bx	lr
 800bbd2:	6800      	ldr	r0, [r0, #0]
 800bbd4:	4770      	bx	lr
 800bbd6:	6840      	ldr	r0, [r0, #4]
 800bbd8:	4770      	bx	lr
 800bbda:	6880      	ldr	r0, [r0, #8]
 800bbdc:	4770      	bx	lr
 800bbde:	68c0      	ldr	r0, [r0, #12]
 800bbe0:	4770      	bx	lr
 800bbe2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bbe4:	4770      	bx	lr
 800bbe6:	b188      	cbz	r0, 800bc0c <_GetDevProp+0x58>
 800bbe8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bbea:	f000 0001 	and.w	r0, r0, #1
 800bbee:	4770      	bx	lr
 800bbf0:	b160      	cbz	r0, 800bc0c <_GetDevProp+0x58>
 800bbf2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bbf4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800bbf8:	4770      	bx	lr
 800bbfa:	b138      	cbz	r0, 800bc0c <_GetDevProp+0x58>
 800bbfc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bbfe:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800bc02:	4770      	bx	lr
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	4770      	bx	lr
 800bc0a:	2001      	movs	r0, #1
 800bc0c:	4770      	bx	lr

0800bc0e <_GetDevData>:
 800bc0e:	6883      	ldr	r3, [r0, #8]
 800bc10:	2901      	cmp	r1, #1
 800bc12:	bf0c      	ite	eq
 800bc14:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800bc16:	2000      	movne	r0, #0
 800bc18:	4770      	bx	lr

0800bc1a <_GetRect>:
 800bc1a:	6883      	ldr	r3, [r0, #8]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	800a      	strh	r2, [r1, #0]
 800bc20:	804a      	strh	r2, [r1, #2]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	3a01      	subs	r2, #1
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	808a      	strh	r2, [r1, #4]
 800bc2c:	80cb      	strh	r3, [r1, #6]
 800bc2e:	4770      	bx	lr

0800bc30 <GUIDRV_FlexColor__SetLog2Phys>:
 800bc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc32:	4d10      	ldr	r5, [pc, #64]	; (800bc74 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800bc34:	462e      	mov	r6, r5
 800bc36:	4607      	mov	r7, r0
 800bc38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bc3a:	b091      	sub	sp, #68	; 0x44
 800bc3c:	466c      	mov	r4, sp
 800bc3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800bc44:	3520      	adds	r5, #32
 800bc46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc4c:	ac08      	add	r4, sp, #32
 800bc4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bc54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5a:	aa10      	add	r2, sp, #64	; 0x40
 800bc5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc60:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800bc64:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800bc68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bc6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bc70:	b011      	add	sp, #68	; 0x44
 800bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc74:	08013944 	.word	0x08013944

0800bc78 <_SetOrg>:
 800bc78:	b507      	push	{r0, r1, r2, lr}
 800bc7a:	6980      	ldr	r0, [r0, #24]
 800bc7c:	e88d 0006 	stmia.w	sp, {r1, r2}
 800bc80:	2103      	movs	r1, #3
 800bc82:	466a      	mov	r2, sp
 800bc84:	f7f4 fea8 	bl	80009d8 <LCD_X_DisplayDriver>
 800bc88:	b003      	add	sp, #12
 800bc8a:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc8e <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800bc8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc92:	6884      	ldr	r4, [r0, #8]
 800bc94:	4698      	mov	r8, r3
 800bc96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bc98:	079b      	lsls	r3, r3, #30
 800bc9a:	4689      	mov	r9, r1
 800bc9c:	4617      	mov	r7, r2
 800bc9e:	d532      	bpl.n	800bd06 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800bca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800bca4:	4620      	mov	r0, r4
 800bca6:	4798      	blx	r3
 800bca8:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800bcac:	4606      	mov	r6, r0
 800bcae:	463a      	mov	r2, r7
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	47a8      	blx	r5
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	69a2      	ldr	r2, [r4, #24]
 800bcba:	429e      	cmp	r6, r3
 800bcbc:	bfac      	ite	ge
 800bcbe:	2300      	movge	r3, #0
 800bcc0:	2301      	movlt	r3, #1
 800bcc2:	4296      	cmp	r6, r2
 800bcc4:	bfd4      	ite	le
 800bcc6:	461a      	movle	r2, r3
 800bcc8:	f043 0201 	orrgt.w	r2, r3, #1
 800bccc:	6963      	ldr	r3, [r4, #20]
 800bcce:	4298      	cmp	r0, r3
 800bcd0:	bfac      	ite	ge
 800bcd2:	4613      	movge	r3, r2
 800bcd4:	f042 0301 	orrlt.w	r3, r2, #1
 800bcd8:	4605      	mov	r5, r0
 800bcda:	b913      	cbnz	r3, 800bce2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800bcdc:	69e3      	ldr	r3, [r4, #28]
 800bcde:	4298      	cmp	r0, r3
 800bce0:	dd0a      	ble.n	800bcf8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800bce2:	6862      	ldr	r2, [r4, #4]
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	3a01      	subs	r2, #1
 800bce8:	9200      	str	r2, [sp, #0]
 800bcea:	2100      	movs	r1, #0
 800bcec:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	47b8      	blx	r7
 800bcf8:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	4631      	mov	r1, r6
 800bd00:	462a      	mov	r2, r5
 800bd02:	47b8      	blx	r7
 800bd04:	e003      	b.n	800bd0e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800bd06:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	47a8      	blx	r5
 800bd0e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bd12:	4620      	mov	r0, r4
 800bd14:	4641      	mov	r1, r8
 800bd16:	4798      	blx	r3
 800bd18:	b003      	add	sp, #12
 800bd1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bd1e <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800bd1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd20:	6884      	ldr	r4, [r0, #8]
 800bd22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bd24:	079b      	lsls	r3, r3, #30
 800bd26:	460f      	mov	r7, r1
 800bd28:	4616      	mov	r6, r2
 800bd2a:	d545      	bpl.n	800bdb8 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800bd2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800bd30:	4620      	mov	r0, r4
 800bd32:	4798      	blx	r3
 800bd34:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800bd38:	4632      	mov	r2, r6
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4798      	blx	r3
 800bd42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bd46:	4606      	mov	r6, r0
 800bd48:	b11b      	cbz	r3, 800bd52 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4798      	blx	r3
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	69a2      	ldr	r2, [r4, #24]
 800bd56:	429d      	cmp	r5, r3
 800bd58:	bfac      	ite	ge
 800bd5a:	2300      	movge	r3, #0
 800bd5c:	2301      	movlt	r3, #1
 800bd5e:	4295      	cmp	r5, r2
 800bd60:	bfd4      	ite	le
 800bd62:	461a      	movle	r2, r3
 800bd64:	f043 0201 	orrgt.w	r2, r3, #1
 800bd68:	6963      	ldr	r3, [r4, #20]
 800bd6a:	429e      	cmp	r6, r3
 800bd6c:	bfac      	ite	ge
 800bd6e:	4613      	movge	r3, r2
 800bd70:	f042 0301 	orrlt.w	r3, r2, #1
 800bd74:	b913      	cbnz	r3, 800bd7c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800bd76:	69e3      	ldr	r3, [r4, #28]
 800bd78:	429e      	cmp	r6, r3
 800bd7a:	dd0a      	ble.n	800bd92 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800bd7c:	6862      	ldr	r2, [r4, #4]
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	3a01      	subs	r2, #1
 800bd82:	9200      	str	r2, [sp, #0]
 800bd84:	2100      	movs	r1, #0
 800bd86:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	460a      	mov	r2, r1
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	47b8      	blx	r7
 800bd92:	4629      	mov	r1, r5
 800bd94:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4632      	mov	r2, r6
 800bd9c:	4798      	blx	r3
 800bd9e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bda2:	4620      	mov	r0, r4
 800bda4:	4798      	blx	r3
 800bda6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bdaa:	4605      	mov	r5, r0
 800bdac:	b16b      	cbz	r3, 800bdca <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bdae:	4620      	mov	r0, r4
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4798      	blx	r3
 800bdb6:	e008      	b.n	800bdca <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bdb8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4798      	blx	r3
 800bdc0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4798      	blx	r3
 800bdc8:	4605      	mov	r5, r0
 800bdca:	4628      	mov	r0, r5
 800bdcc:	b003      	add	sp, #12
 800bdce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdd0 <GUIDRV_FlexColor__InitOnce>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	6885      	ldr	r5, [r0, #8]
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	b99d      	cbnz	r5, 800be00 <GUIDRV_FlexColor__InitOnce+0x30>
 800bdd8:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800bddc:	f003 f9ce 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800bde0:	4b08      	ldr	r3, [pc, #32]	; (800be04 <GUIDRV_FlexColor__InitOnce+0x34>)
 800bde2:	60a0      	str	r0, [r4, #8]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800bdea:	4629      	mov	r1, r5
 800bdec:	4798      	blx	r3
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	84da      	strh	r2, [r3, #38]	; 0x26
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	621a      	str	r2, [r3, #32]
 800bdf8:	4a03      	ldr	r2, [pc, #12]	; (800be08 <GUIDRV_FlexColor__InitOnce+0x38>)
 800bdfa:	641c      	str	r4, [r3, #64]	; 0x40
 800bdfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800be00:	bd38      	pop	{r3, r4, r5, pc}
 800be02:	bf00      	nop
 800be04:	20000070 	.word	0x20000070
 800be08:	0800bc31 	.word	0x0800bc31

0800be0c <_SetDevFunc>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	4606      	mov	r6, r0
 800be10:	460d      	mov	r5, r1
 800be12:	4614      	mov	r4, r2
 800be14:	f7ff ffdc 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800be18:	68b3      	ldr	r3, [r6, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d03b      	beq.n	800be96 <_SetDevFunc+0x8a>
 800be1e:	2d26      	cmp	r5, #38	; 0x26
 800be20:	d002      	beq.n	800be28 <_SetDevFunc+0x1c>
 800be22:	2d27      	cmp	r5, #39	; 0x27
 800be24:	d016      	beq.n	800be54 <_SetDevFunc+0x48>
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be2a:	2a10      	cmp	r2, #16
 800be2c:	d002      	beq.n	800be34 <_SetDevFunc+0x28>
 800be2e:	2a12      	cmp	r2, #18
 800be30:	d008      	beq.n	800be44 <_SetDevFunc+0x38>
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	4a18      	ldr	r2, [pc, #96]	; (800be98 <_SetDevFunc+0x8c>)
 800be36:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800be3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800be3e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	4a15      	ldr	r2, [pc, #84]	; (800be9c <_SetDevFunc+0x90>)
 800be46:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800be4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800be4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be56:	2a10      	cmp	r2, #16
 800be58:	d002      	beq.n	800be60 <_SetDevFunc+0x54>
 800be5a:	2a12      	cmp	r2, #18
 800be5c:	d00e      	beq.n	800be7c <_SetDevFunc+0x70>
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	b13c      	cbz	r4, 800be72 <_SetDevFunc+0x66>
 800be62:	4a0f      	ldr	r2, [pc, #60]	; (800bea0 <_SetDevFunc+0x94>)
 800be64:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800be68:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800be6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800be70:	bd70      	pop	{r4, r5, r6, pc}
 800be72:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800be76:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	b13c      	cbz	r4, 800be8e <_SetDevFunc+0x82>
 800be7e:	4a09      	ldr	r2, [pc, #36]	; (800bea4 <_SetDevFunc+0x98>)
 800be80:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800be84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800be88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
 800be8e:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800be92:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	0800bab1 	.word	0x0800bab1
 800be9c:	0800babf 	.word	0x0800babf
 800bea0:	0800bacd 	.word	0x0800bacd
 800bea4:	0800bb03 	.word	0x0800bb03

0800bea8 <_GetDevFunc_Init>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4605      	mov	r5, r0
 800beac:	f7ff ff90 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800beb0:	68ac      	ldr	r4, [r5, #8]
 800beb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800beb6:	f003 f961 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800beba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bebc:	66a0      	str	r0, [r4, #104]	; 0x68
 800bebe:	3307      	adds	r3, #7
 800bec0:	10d8      	asrs	r0, r3, #3
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	4358      	muls	r0, r3
 800bec6:	f003 f959 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800beca:	2101      	movs	r1, #1
 800becc:	2200      	movs	r2, #0
 800bece:	66e0      	str	r0, [r4, #108]	; 0x6c
 800bed0:	69a8      	ldr	r0, [r5, #24]
 800bed2:	f7f4 fd81 	bl	80009d8 <LCD_X_DisplayDriver>
 800bed6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800beda:	4605      	mov	r5, r0
 800bedc:	4620      	mov	r0, r4
 800bede:	4798      	blx	r3
 800bee0:	4620      	mov	r0, r4
 800bee2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800bee6:	4798      	blx	r3
 800bee8:	2d00      	cmp	r5, #0
 800beea:	bfd4      	ite	le
 800beec:	2000      	movle	r0, #0
 800beee:	2001      	movgt	r0, #1
 800bef0:	bd38      	pop	{r3, r4, r5, pc}

0800bef2 <_GetDevFunc_SetSize>:
 800bef2:	b570      	push	{r4, r5, r6, lr}
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	4616      	mov	r6, r2
 800befa:	f7ff ff69 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800befe:	68a3      	ldr	r3, [r4, #8]
 800bf00:	e883 0060 	stmia.w	r3, {r5, r6}
 800bf04:	bd70      	pop	{r4, r5, r6, pc}

0800bf06 <_GetDevFunc_SetVSize>:
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	f7ff ff5f 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	609d      	str	r5, [r3, #8]
 800bf16:	60de      	str	r6, [r3, #12]
 800bf18:	bd70      	pop	{r4, r5, r6, pc}

0800bf1a <_GetDevFunc_Off>:
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	f7ff ff57 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800bf22:	69a0      	ldr	r0, [r4, #24]
 800bf24:	2106      	movs	r1, #6
 800bf26:	2200      	movs	r2, #0
 800bf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf2c:	f7f4 bd54 	b.w	80009d8 <LCD_X_DisplayDriver>

0800bf30 <_GetDevFunc_On>:
 800bf30:	b510      	push	{r4, lr}
 800bf32:	4604      	mov	r4, r0
 800bf34:	f7ff ff4c 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800bf38:	69a0      	ldr	r0, [r4, #24]
 800bf3a:	2105      	movs	r1, #5
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf42:	f7f4 bd49 	b.w	80009d8 <LCD_X_DisplayDriver>

0800bf46 <GUIDRV_FlexColor_Config>:
 800bf46:	b538      	push	{r3, r4, r5, lr}
 800bf48:	4605      	mov	r5, r0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	f7ff ff40 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800bf50:	68ab      	ldr	r3, [r5, #8]
 800bf52:	6822      	ldr	r2, [r4, #0]
 800bf54:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf56:	6862      	ldr	r2, [r4, #4]
 800bf58:	631a      	str	r2, [r3, #48]	; 0x30
 800bf5a:	68a2      	ldr	r2, [r4, #8]
 800bf5c:	635a      	str	r2, [r3, #52]	; 0x34
 800bf5e:	0752      	lsls	r2, r2, #29
 800bf60:	d507      	bpl.n	800bf72 <GUIDRV_FlexColor_Config+0x2c>
 800bf62:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	6059      	str	r1, [r3, #4]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	6899      	ldr	r1, [r3, #8]
 800bf6e:	60d9      	str	r1, [r3, #12]
 800bf70:	609a      	str	r2, [r3, #8]
 800bf72:	89a2      	ldrh	r2, [r4, #12]
 800bf74:	849a      	strh	r2, [r3, #36]	; 0x24
 800bf76:	6922      	ldr	r2, [r4, #16]
 800bf78:	b112      	cbz	r2, 800bf80 <GUIDRV_FlexColor_Config+0x3a>
 800bf7a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800bf7e:	621a      	str	r2, [r3, #32]
 800bf80:	bd38      	pop	{r3, r4, r5, pc}

0800bf82 <GUIDRV_FlexColor_SetFunc>:
 800bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	461f      	mov	r7, r3
 800bf8a:	4616      	mov	r6, r2
 800bf8c:	4688      	mov	r8, r1
 800bf8e:	f7ff ff1f 	bl	800bdd0 <GUIDRV_FlexColor__InitOnce>
 800bf92:	68a5      	ldr	r5, [r4, #8]
 800bf94:	4641      	mov	r1, r8
 800bf96:	2268      	movs	r2, #104	; 0x68
 800bf98:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800bf9c:	f006 f9b2 	bl	8012304 <memcpy>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	47b0      	blx	r6
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	47b8      	blx	r7
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	4798      	blx	r3
 800bfae:	62a8      	str	r0, [r5, #40]	; 0x28
 800bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bfb4 <LCD_UpdateColorIndices>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	4c07      	ldr	r4, [pc, #28]	; (800bfd4 <LCD_UpdateColorIndices+0x20>)
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfbc:	f000 fc70 	bl	800c8a0 <LCD_Color2Index>
 800bfc0:	f000 fc8e 	bl	800c8e0 <LCD_SetColorIndex>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bfc8:	f000 fc6a 	bl	800c8a0 <LCD_Color2Index>
 800bfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd0:	f000 bca2 	b.w	800c918 <LCD_SetBkColorIndex>
 800bfd4:	20000084 	.word	0x20000084

0800bfd8 <LCD_SetClipRectEx>:
 800bfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfda:	4c09      	ldr	r4, [pc, #36]	; (800c000 <LCD_SetClipRectEx+0x28>)
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	7c5a      	ldrb	r2, [r3, #17]
 800bfe0:	4b08      	ldr	r3, [pc, #32]	; (800c004 <LCD_SetClipRectEx+0x2c>)
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bfe8:	68c2      	ldr	r2, [r0, #12]
 800bfea:	4669      	mov	r1, sp
 800bfec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfee:	4790      	blx	r2
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	4629      	mov	r1, r5
 800bff4:	466a      	mov	r2, sp
 800bff6:	3008      	adds	r0, #8
 800bff8:	f000 fcec 	bl	800c9d4 <GUI__IntersectRects>
 800bffc:	b003      	add	sp, #12
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	20000084 	.word	0x20000084
 800c004:	200056d4 	.word	0x200056d4

0800c008 <LCD_SetVSizeEx>:
 800c008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c00a:	460d      	mov	r5, r1
 800c00c:	4614      	mov	r4, r2
 800c00e:	f001 faab 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c012:	9001      	str	r0, [sp, #4]
 800c014:	b908      	cbnz	r0, 800c01a <LCD_SetVSizeEx+0x12>
 800c016:	2001      	movs	r0, #1
 800c018:	e00c      	b.n	800c034 <LCD_SetVSizeEx+0x2c>
 800c01a:	68c3      	ldr	r3, [r0, #12]
 800c01c:	210a      	movs	r1, #10
 800c01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c020:	a801      	add	r0, sp, #4
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	2800      	cmp	r0, #0
 800c028:	d0f5      	beq.n	800c016 <LCD_SetVSizeEx+0xe>
 800c02a:	9801      	ldr	r0, [sp, #4]
 800c02c:	4629      	mov	r1, r5
 800c02e:	4622      	mov	r2, r4
 800c030:	4798      	blx	r3
 800c032:	2000      	movs	r0, #0
 800c034:	b003      	add	sp, #12
 800c036:	bd30      	pop	{r4, r5, pc}

0800c038 <LCD_SetSizeEx>:
 800c038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03a:	460d      	mov	r5, r1
 800c03c:	4614      	mov	r4, r2
 800c03e:	f001 fa93 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c042:	9001      	str	r0, [sp, #4]
 800c044:	b908      	cbnz	r0, 800c04a <LCD_SetSizeEx+0x12>
 800c046:	2001      	movs	r0, #1
 800c048:	e00c      	b.n	800c064 <LCD_SetSizeEx+0x2c>
 800c04a:	68c3      	ldr	r3, [r0, #12]
 800c04c:	210b      	movs	r1, #11
 800c04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c050:	a801      	add	r0, sp, #4
 800c052:	4798      	blx	r3
 800c054:	4603      	mov	r3, r0
 800c056:	2800      	cmp	r0, #0
 800c058:	d0f5      	beq.n	800c046 <LCD_SetSizeEx+0xe>
 800c05a:	9801      	ldr	r0, [sp, #4]
 800c05c:	4629      	mov	r1, r5
 800c05e:	4622      	mov	r2, r4
 800c060:	4798      	blx	r3
 800c062:	2000      	movs	r0, #0
 800c064:	b003      	add	sp, #12
 800c066:	bd30      	pop	{r4, r5, pc}

0800c068 <LCD_SetLUTEntryEx>:
 800c068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c06a:	460d      	mov	r5, r1
 800c06c:	4614      	mov	r4, r2
 800c06e:	f001 fa7b 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c072:	9001      	str	r0, [sp, #4]
 800c074:	b908      	cbnz	r0, 800c07a <LCD_SetLUTEntryEx+0x12>
 800c076:	2001      	movs	r0, #1
 800c078:	e00c      	b.n	800c094 <LCD_SetLUTEntryEx+0x2c>
 800c07a:	68c3      	ldr	r3, [r0, #12]
 800c07c:	2110      	movs	r1, #16
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	a801      	add	r0, sp, #4
 800c082:	4798      	blx	r3
 800c084:	4603      	mov	r3, r0
 800c086:	2800      	cmp	r0, #0
 800c088:	d0f5      	beq.n	800c076 <LCD_SetLUTEntryEx+0xe>
 800c08a:	9801      	ldr	r0, [sp, #4]
 800c08c:	4629      	mov	r1, r5
 800c08e:	4622      	mov	r2, r4
 800c090:	4798      	blx	r3
 800c092:	2000      	movs	r0, #0
 800c094:	b003      	add	sp, #12
 800c096:	bd30      	pop	{r4, r5, pc}

0800c098 <_GetDevProp>:
 800c098:	2801      	cmp	r0, #1
 800c09a:	b510      	push	{r4, lr}
 800c09c:	460c      	mov	r4, r1
 800c09e:	dc08      	bgt.n	800c0b2 <_GetDevProp+0x1a>
 800c0a0:	f001 fa62 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c0a4:	b120      	cbz	r0, 800c0b0 <_GetDevProp+0x18>
 800c0a6:	68c3      	ldr	r3, [r0, #12]
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ac:	4798      	blx	r3
 800c0ae:	bd10      	pop	{r4, pc}
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	bd10      	pop	{r4, pc}

0800c0b6 <_GetMaxValue>:
 800c0b6:	b538      	push	{r3, r4, r5, lr}
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	2001      	movs	r0, #1
 800c0be:	f7ff ffeb 	bl	800c098 <_GetDevProp>
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f7ff ffe6 	bl	800c098 <_GetDevProp>
 800c0cc:	42a8      	cmp	r0, r5
 800c0ce:	bfb8      	it	lt
 800c0d0:	4628      	movlt	r0, r5
 800c0d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}

0800c0d8 <LCD_GetXSizeEx>:
 800c0d8:	2101      	movs	r1, #1
 800c0da:	f7ff bfdd 	b.w	800c098 <_GetDevProp>

0800c0de <LCD_GetYSizeEx>:
 800c0de:	2102      	movs	r1, #2
 800c0e0:	f7ff bfda 	b.w	800c098 <_GetDevProp>

0800c0e4 <LCD_GetVXSizeEx>:
 800c0e4:	2103      	movs	r1, #3
 800c0e6:	f7ff bfd7 	b.w	800c098 <_GetDevProp>

0800c0ea <LCD_GetVYSizeEx>:
 800c0ea:	2104      	movs	r1, #4
 800c0ec:	f7ff bfd4 	b.w	800c098 <_GetDevProp>

0800c0f0 <LCD_GetBitsPerPixelEx>:
 800c0f0:	2108      	movs	r1, #8
 800c0f2:	f7ff bfd1 	b.w	800c098 <_GetDevProp>

0800c0f6 <LCD_GetNumColorsEx>:
 800c0f6:	2109      	movs	r1, #9
 800c0f8:	f7ff bfce 	b.w	800c098 <_GetDevProp>

0800c0fc <LCD_GetXSize>:
 800c0fc:	4b02      	ldr	r3, [pc, #8]	; (800c108 <LCD_GetXSize+0xc>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	7c58      	ldrb	r0, [r3, #17]
 800c102:	f7ff bfe9 	b.w	800c0d8 <LCD_GetXSizeEx>
 800c106:	bf00      	nop
 800c108:	20000084 	.word	0x20000084

0800c10c <LCD_GetYSize>:
 800c10c:	4b02      	ldr	r3, [pc, #8]	; (800c118 <LCD_GetYSize+0xc>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	7c58      	ldrb	r0, [r3, #17]
 800c112:	f7ff bfe4 	b.w	800c0de <LCD_GetYSizeEx>
 800c116:	bf00      	nop
 800c118:	20000084 	.word	0x20000084

0800c11c <LCD_GetNumColors>:
 800c11c:	4b02      	ldr	r3, [pc, #8]	; (800c128 <LCD_GetNumColors+0xc>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	7c58      	ldrb	r0, [r3, #17]
 800c122:	f7ff bfe8 	b.w	800c0f6 <LCD_GetNumColorsEx>
 800c126:	bf00      	nop
 800c128:	20000084 	.word	0x20000084

0800c12c <GUI_GetBitsPerPixelEx>:
 800c12c:	b508      	push	{r3, lr}
 800c12e:	4b04      	ldr	r3, [pc, #16]	; (800c140 <GUI_GetBitsPerPixelEx+0x14>)
 800c130:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c134:	68c3      	ldr	r3, [r0, #12]
 800c136:	2108      	movs	r1, #8
 800c138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c13a:	4798      	blx	r3
 800c13c:	bd08      	pop	{r3, pc}
 800c13e:	bf00      	nop
 800c140:	200056d4 	.word	0x200056d4

0800c144 <LCD_GetPaletteEx>:
 800c144:	b508      	push	{r3, lr}
 800c146:	f001 fa0f 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c14a:	b120      	cbz	r0, 800c156 <LCD_GetPaletteEx+0x12>
 800c14c:	68c3      	ldr	r3, [r0, #12]
 800c14e:	2102      	movs	r1, #2
 800c150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c152:	4798      	blx	r3
 800c154:	bd08      	pop	{r3, pc}
 800c156:	bd08      	pop	{r3, pc}

0800c158 <LCD_GetPalette>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <LCD_GetPalette+0xc>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	7c58      	ldrb	r0, [r3, #17]
 800c15e:	f7ff bff1 	b.w	800c144 <LCD_GetPaletteEx>
 800c162:	bf00      	nop
 800c164:	20000084 	.word	0x20000084

0800c168 <GUI_GetpfIndex2ColorEx>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <GUI_GetpfIndex2ColorEx+0xc>)
 800c16a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	6858      	ldr	r0, [r3, #4]
 800c172:	4770      	bx	lr
 800c174:	200056d4 	.word	0x200056d4

0800c178 <LCD_GetpfColor2IndexEx>:
 800c178:	b508      	push	{r3, lr}
 800c17a:	f001 f9f5 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c17e:	b108      	cbz	r0, 800c184 <LCD_GetpfColor2IndexEx+0xc>
 800c180:	6903      	ldr	r3, [r0, #16]
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	bd08      	pop	{r3, pc}
	...

0800c188 <GUI_GetpfColor2IndexEx>:
 800c188:	4b02      	ldr	r3, [pc, #8]	; (800c194 <GUI_GetpfColor2IndexEx+0xc>)
 800c18a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	4770      	bx	lr
 800c194:	200056d4 	.word	0x200056d4

0800c198 <LCD_GetXSizeMax>:
 800c198:	2001      	movs	r0, #1
 800c19a:	f7ff bf8c 	b.w	800c0b6 <_GetMaxValue>

0800c19e <LCD_GetYSizeMax>:
 800c19e:	2002      	movs	r0, #2
 800c1a0:	f7ff bf89 	b.w	800c0b6 <_GetMaxValue>

0800c1a4 <LCD_GetVXSizeMax>:
 800c1a4:	2003      	movs	r0, #3
 800c1a6:	f7ff bf86 	b.w	800c0b6 <_GetMaxValue>
	...

0800c1ac <LCD_SetDisplaySize>:
 800c1ac:	4b02      	ldr	r3, [pc, #8]	; (800c1b8 <LCD_SetDisplaySize+0xc>)
 800c1ae:	6018      	str	r0, [r3, #0]
 800c1b0:	4b02      	ldr	r3, [pc, #8]	; (800c1bc <LCD_SetDisplaySize+0x10>)
 800c1b2:	6019      	str	r1, [r3, #0]
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	20005474 	.word	0x20005474
 800c1bc:	20005470 	.word	0x20005470

0800c1c0 <LCD_GetXSizeDisplay>:
 800c1c0:	4b01      	ldr	r3, [pc, #4]	; (800c1c8 <LCD_GetXSizeDisplay+0x8>)
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	20005474 	.word	0x20005474

0800c1cc <LCD_GetYSizeDisplay>:
 800c1cc:	4b01      	ldr	r3, [pc, #4]	; (800c1d4 <LCD_GetYSizeDisplay+0x8>)
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20005470 	.word	0x20005470

0800c1d8 <LCD__GetBPP>:
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d03b      	beq.n	800c254 <LCD__GetBPP+0x7c>
 800c1dc:	f030 0301 	bics.w	r3, r0, #1
 800c1e0:	d029      	beq.n	800c236 <LCD__GetBPP+0x5e>
 800c1e2:	f030 0303 	bics.w	r3, r0, #3
 800c1e6:	d028      	beq.n	800c23a <LCD__GetBPP+0x62>
 800c1e8:	f030 0307 	bics.w	r3, r0, #7
 800c1ec:	d027      	beq.n	800c23e <LCD__GetBPP+0x66>
 800c1ee:	f030 030f 	bics.w	r3, r0, #15
 800c1f2:	d026      	beq.n	800c242 <LCD__GetBPP+0x6a>
 800c1f4:	f030 031f 	bics.w	r3, r0, #31
 800c1f8:	d025      	beq.n	800c246 <LCD__GetBPP+0x6e>
 800c1fa:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800c1fe:	d024      	beq.n	800c24a <LCD__GetBPP+0x72>
 800c200:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800c204:	f023 0301 	bic.w	r3, r3, #1
 800c208:	b30b      	cbz	r3, 800c24e <LCD__GetBPP+0x76>
 800c20a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800c20e:	f023 030f 	bic.w	r3, r3, #15
 800c212:	b1e3      	cbz	r3, 800c24e <LCD__GetBPP+0x76>
 800c214:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800c218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c21c:	b1bb      	cbz	r3, 800c24e <LCD__GetBPP+0x76>
 800c21e:	0c03      	lsrs	r3, r0, #16
 800c220:	041b      	lsls	r3, r3, #16
 800c222:	b1a3      	cbz	r3, 800c24e <LCD__GetBPP+0x76>
 800c224:	0c83      	lsrs	r3, r0, #18
 800c226:	049b      	lsls	r3, r3, #18
 800c228:	b19b      	cbz	r3, 800c252 <LCD__GetBPP+0x7a>
 800c22a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c22e:	bf0c      	ite	eq
 800c230:	2018      	moveq	r0, #24
 800c232:	2020      	movne	r0, #32
 800c234:	4770      	bx	lr
 800c236:	2001      	movs	r0, #1
 800c238:	4770      	bx	lr
 800c23a:	2002      	movs	r0, #2
 800c23c:	4770      	bx	lr
 800c23e:	2003      	movs	r0, #3
 800c240:	4770      	bx	lr
 800c242:	2004      	movs	r0, #4
 800c244:	4770      	bx	lr
 800c246:	2005      	movs	r0, #5
 800c248:	4770      	bx	lr
 800c24a:	2008      	movs	r0, #8
 800c24c:	4770      	bx	lr
 800c24e:	2010      	movs	r0, #16
 800c250:	4770      	bx	lr
 800c252:	2012      	movs	r0, #18
 800c254:	4770      	bx	lr

0800c256 <LCD__GetBPPDevice>:
 800c256:	b508      	push	{r3, lr}
 800c258:	f7ff ffbe 	bl	800c1d8 <LCD__GetBPP>
 800c25c:	2801      	cmp	r0, #1
 800c25e:	d00f      	beq.n	800c280 <LCD__GetBPPDevice+0x2a>
 800c260:	1e83      	subs	r3, r0, #2
 800c262:	2b06      	cmp	r3, #6
 800c264:	d909      	bls.n	800c27a <LCD__GetBPPDevice+0x24>
 800c266:	f1a0 0309 	sub.w	r3, r0, #9
 800c26a:	2b07      	cmp	r3, #7
 800c26c:	d907      	bls.n	800c27e <LCD__GetBPPDevice+0x28>
 800c26e:	3811      	subs	r0, #17
 800c270:	2810      	cmp	r0, #16
 800c272:	bf34      	ite	cc
 800c274:	2020      	movcc	r0, #32
 800c276:	2000      	movcs	r0, #0
 800c278:	bd08      	pop	{r3, pc}
 800c27a:	2008      	movs	r0, #8
 800c27c:	bd08      	pop	{r3, pc}
 800c27e:	2010      	movs	r0, #16
 800c280:	bd08      	pop	{r3, pc}
	...

0800c284 <_SetDrawMode>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <_SetDrawMode+0x24>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	7c1a      	ldrb	r2, [r3, #16]
 800c28c:	ea80 0102 	eor.w	r1, r0, r2
 800c290:	0749      	lsls	r1, r1, #29
 800c292:	d505      	bpl.n	800c2a0 <_SetDrawMode+0x1c>
 800c294:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c296:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c298:	6826      	ldr	r6, [r4, #0]
 800c29a:	680d      	ldr	r5, [r1, #0]
 800c29c:	6025      	str	r5, [r4, #0]
 800c29e:	600e      	str	r6, [r1, #0]
 800c2a0:	7418      	strb	r0, [r3, #16]
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	bd70      	pop	{r4, r5, r6, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20000084 	.word	0x20000084

0800c2ac <LCD_SetDrawMode>:
 800c2ac:	b508      	push	{r3, lr}
 800c2ae:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <LCD_SetDrawMode+0xc>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	4798      	blx	r3
 800c2b6:	bd08      	pop	{r3, pc}
 800c2b8:	2000006c 	.word	0x2000006c

0800c2bc <LCD_DrawPixel>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4b14      	ldr	r3, [pc, #80]	; (800c310 <LCD_DrawPixel+0x54>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	460a      	mov	r2, r1
 800c2c4:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800c2c8:	428a      	cmp	r2, r1
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	db1e      	blt.n	800c30c <LCD_DrawPixel+0x50>
 800c2ce:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800c2d2:	428a      	cmp	r2, r1
 800c2d4:	dc1a      	bgt.n	800c30c <LCD_DrawPixel+0x50>
 800c2d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800c2da:	4288      	cmp	r0, r1
 800c2dc:	db16      	blt.n	800c30c <LCD_DrawPixel+0x50>
 800c2de:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800c2e2:	4288      	cmp	r0, r1
 800c2e4:	dc12      	bgt.n	800c30c <LCD_DrawPixel+0x50>
 800c2e6:	7c19      	ldrb	r1, [r3, #16]
 800c2e8:	7c58      	ldrb	r0, [r3, #17]
 800c2ea:	f011 0f01 	tst.w	r1, #1
 800c2ee:	4909      	ldr	r1, [pc, #36]	; (800c314 <LCD_DrawPixel+0x58>)
 800c2f0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c2f4:	d004      	beq.n	800c300 <LCD_DrawPixel+0x44>
 800c2f6:	68c3      	ldr	r3, [r0, #12]
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	4798      	blx	r3
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	68c1      	ldr	r1, [r0, #12]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	698d      	ldr	r5, [r1, #24]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4621      	mov	r1, r4
 800c30a:	47a8      	blx	r5
 800c30c:	bd38      	pop	{r3, r4, r5, pc}
 800c30e:	bf00      	nop
 800c310:	20000084 	.word	0x20000084
 800c314:	200056d4 	.word	0x200056d4

0800c318 <LCD_DrawHLine>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4b10      	ldr	r3, [pc, #64]	; (800c35c <LCD_DrawHLine+0x44>)
 800c31c:	681c      	ldr	r4, [r3, #0]
 800c31e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800c322:	4299      	cmp	r1, r3
 800c324:	460d      	mov	r5, r1
 800c326:	db17      	blt.n	800c358 <LCD_DrawHLine+0x40>
 800c328:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c32c:	4299      	cmp	r1, r3
 800c32e:	dc13      	bgt.n	800c358 <LCD_DrawHLine+0x40>
 800c330:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c338:	4288      	cmp	r0, r1
 800c33a:	bfa8      	it	ge
 800c33c:	4601      	movge	r1, r0
 800c33e:	429a      	cmp	r2, r3
 800c340:	bfb8      	it	lt
 800c342:	4613      	movlt	r3, r2
 800c344:	428b      	cmp	r3, r1
 800c346:	db07      	blt.n	800c358 <LCD_DrawHLine+0x40>
 800c348:	7c60      	ldrb	r0, [r4, #17]
 800c34a:	4a05      	ldr	r2, [pc, #20]	; (800c360 <LCD_DrawHLine+0x48>)
 800c34c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800c350:	68c2      	ldr	r2, [r0, #12]
 800c352:	6894      	ldr	r4, [r2, #8]
 800c354:	462a      	mov	r2, r5
 800c356:	47a0      	blx	r4
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	bf00      	nop
 800c35c:	20000084 	.word	0x20000084
 800c360:	200056d4 	.word	0x200056d4

0800c364 <LCD_DrawVLine>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4b10      	ldr	r3, [pc, #64]	; (800c3a8 <LCD_DrawVLine+0x44>)
 800c368:	681c      	ldr	r4, [r3, #0]
 800c36a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800c36e:	4605      	mov	r5, r0
 800c370:	429d      	cmp	r5, r3
 800c372:	4610      	mov	r0, r2
 800c374:	db17      	blt.n	800c3a6 <LCD_DrawVLine+0x42>
 800c376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37a:	429d      	cmp	r5, r3
 800c37c:	dc13      	bgt.n	800c3a6 <LCD_DrawVLine+0x42>
 800c37e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c382:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c386:	4291      	cmp	r1, r2
 800c388:	bfa8      	it	ge
 800c38a:	460a      	movge	r2, r1
 800c38c:	4298      	cmp	r0, r3
 800c38e:	bfb8      	it	lt
 800c390:	4603      	movlt	r3, r0
 800c392:	4293      	cmp	r3, r2
 800c394:	db07      	blt.n	800c3a6 <LCD_DrawVLine+0x42>
 800c396:	7c60      	ldrb	r0, [r4, #17]
 800c398:	4904      	ldr	r1, [pc, #16]	; (800c3ac <LCD_DrawVLine+0x48>)
 800c39a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c39e:	68c1      	ldr	r1, [r0, #12]
 800c3a0:	68cc      	ldr	r4, [r1, #12]
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	47a0      	blx	r4
 800c3a6:	bd38      	pop	{r3, r4, r5, pc}
 800c3a8:	20000084 	.word	0x20000084
 800c3ac:	200056d4 	.word	0x200056d4

0800c3b0 <LCD_FillRect>:
 800c3b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3b2:	460e      	mov	r6, r1
 800c3b4:	4912      	ldr	r1, [pc, #72]	; (800c400 <LCD_FillRect+0x50>)
 800c3b6:	680c      	ldr	r4, [r1, #0]
 800c3b8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3c0:	4288      	cmp	r0, r1
 800c3c2:	bfa8      	it	ge
 800c3c4:	4601      	movge	r1, r0
 800c3c6:	42aa      	cmp	r2, r5
 800c3c8:	bfb8      	it	lt
 800c3ca:	4615      	movlt	r5, r2
 800c3cc:	428d      	cmp	r5, r1
 800c3ce:	db14      	blt.n	800c3fa <LCD_FillRect+0x4a>
 800c3d0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c3d4:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800c3d8:	4296      	cmp	r6, r2
 800c3da:	bfa8      	it	ge
 800c3dc:	4632      	movge	r2, r6
 800c3de:	4283      	cmp	r3, r0
 800c3e0:	bfa8      	it	ge
 800c3e2:	4603      	movge	r3, r0
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	db08      	blt.n	800c3fa <LCD_FillRect+0x4a>
 800c3e8:	7c64      	ldrb	r4, [r4, #17]
 800c3ea:	4806      	ldr	r0, [pc, #24]	; (800c404 <LCD_FillRect+0x54>)
 800c3ec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c3f0:	68c4      	ldr	r4, [r0, #12]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	6924      	ldr	r4, [r4, #16]
 800c3f6:	462b      	mov	r3, r5
 800c3f8:	47a0      	blx	r4
 800c3fa:	b002      	add	sp, #8
 800c3fc:	bd70      	pop	{r4, r5, r6, pc}
 800c3fe:	bf00      	nop
 800c400:	20000084 	.word	0x20000084
 800c404:	200056d4 	.word	0x200056d4

0800c408 <LCD__DrawBitmap_1bpp>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800c5bc <LCD__DrawBitmap_1bpp+0x1b4>
 800c410:	b08f      	sub	sp, #60	; 0x3c
 800c412:	f8dc c000 	ldr.w	ip, [ip]
 800c416:	9009      	str	r0, [sp, #36]	; 0x24
 800c418:	460e      	mov	r6, r1
 800c41a:	4615      	mov	r5, r2
 800c41c:	469b      	mov	fp, r3
 800c41e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c420:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c424:	f1bc 0f00 	cmp.w	ip, #0
 800c428:	d00d      	beq.n	800c446 <LCD__DrawBitmap_1bpp+0x3e>
 800c42a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c42c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c42e:	9500      	str	r5, [sp, #0]
 800c430:	9601      	str	r6, [sp, #4]
 800c432:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c434:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c436:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c438:	9702      	str	r7, [sp, #8]
 800c43a:	9503      	str	r5, [sp, #12]
 800c43c:	9404      	str	r4, [sp, #16]
 800c43e:	9605      	str	r6, [sp, #20]
 800c440:	f8dc 4000 	ldr.w	r4, [ip]
 800c444:	e053      	b.n	800c4ee <LCD__DrawBitmap_1bpp+0xe6>
 800c446:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c448:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c44a:	ea47 0300 	orr.w	r3, r7, r0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d14f      	bne.n	800c4f2 <LCD__DrawBitmap_1bpp+0xea>
 800c452:	4b58      	ldr	r3, [pc, #352]	; (800c5b4 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c45a:	1a51      	subs	r1, r2, r1
 800c45c:	2900      	cmp	r1, #0
 800c45e:	dd08      	ble.n	800c472 <LCD__DrawBitmap_1bpp+0x6a>
 800c460:	ebc1 030b 	rsb	r3, r1, fp
 800c464:	2b00      	cmp	r3, #0
 800c466:	f340 80a2 	ble.w	800c5ae <LCD__DrawBitmap_1bpp+0x1a6>
 800c46a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c46c:	fb07 4401 	mla	r4, r7, r1, r4
 800c470:	e001      	b.n	800c476 <LCD__DrawBitmap_1bpp+0x6e>
 800c472:	465b      	mov	r3, fp
 800c474:	4632      	mov	r2, r6
 800c476:	445e      	add	r6, fp
 800c478:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800c47c:	3e01      	subs	r6, #1
 800c47e:	1a76      	subs	r6, r6, r1
 800c480:	2e00      	cmp	r6, #0
 800c482:	dd03      	ble.n	800c48c <LCD__DrawBitmap_1bpp+0x84>
 800c484:	1b9b      	subs	r3, r3, r6
 800c486:	2b00      	cmp	r3, #0
 800c488:	f340 8091 	ble.w	800c5ae <LCD__DrawBitmap_1bpp+0x1a6>
 800c48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c48e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800c492:	4429      	add	r1, r5
 800c494:	3901      	subs	r1, #1
 800c496:	1b89      	subs	r1, r1, r6
 800c498:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c49a:	2900      	cmp	r1, #0
 800c49c:	bfc8      	it	gt
 800c49e:	ebc1 0505 	rsbgt	r5, r1, r5
 800c4a2:	ebc8 0106 	rsb	r1, r8, r6
 800c4a6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800c4aa:	42b1      	cmp	r1, r6
 800c4ac:	da0c      	bge.n	800c4c8 <LCD__DrawBitmap_1bpp+0xc0>
 800c4ae:	ebc1 0c06 	rsb	ip, r1, r6
 800c4b2:	eb08 070c 	add.w	r7, r8, ip
 800c4b6:	1b8e      	subs	r6, r1, r6
 800c4b8:	f02c 0c07 	bic.w	ip, ip, #7
 800c4bc:	4435      	add	r5, r6
 800c4be:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800c4c2:	4461      	add	r1, ip
 800c4c4:	f007 0807 	and.w	r8, r7, #7
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	dd70      	ble.n	800c5ae <LCD__DrawBitmap_1bpp+0x1a6>
 800c4cc:	7c46      	ldrb	r6, [r0, #17]
 800c4ce:	483a      	ldr	r0, [pc, #232]	; (800c5b8 <LCD__DrawBitmap_1bpp+0x1b0>)
 800c4d0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c4d2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800c4d6:	68c6      	ldr	r6, [r0, #12]
 800c4d8:	9701      	str	r7, [sp, #4]
 800c4da:	9403      	str	r4, [sp, #12]
 800c4dc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c4de:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	9702      	str	r7, [sp, #8]
 800c4e4:	f8cd 8010 	str.w	r8, [sp, #16]
 800c4e8:	9405      	str	r4, [sp, #20]
 800c4ea:	6874      	ldr	r4, [r6, #4]
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	47a0      	blx	r4
 800c4f0:	e05d      	b.n	800c5ae <LCD__DrawBitmap_1bpp+0x1a6>
 800c4f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c4f4:	f1c7 0708 	rsb	r7, r7, #8
 800c4f8:	970c      	str	r7, [sp, #48]	; 0x30
 800c4fa:	4667      	mov	r7, ip
 800c4fc:	45dc      	cmp	ip, fp
 800c4fe:	da56      	bge.n	800c5ae <LCD__DrawBitmap_1bpp+0x1a6>
 800c500:	4b2c      	ldr	r3, [pc, #176]	; (800c5b4 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c502:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4430      	add	r0, r6
 800c508:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c50c:	900a      	str	r0, [sp, #40]	; 0x28
 800c50e:	1e41      	subs	r1, r0, #1
 800c510:	4291      	cmp	r1, r2
 800c512:	910b      	str	r1, [sp, #44]	; 0x2c
 800c514:	db45      	blt.n	800c5a2 <LCD__DrawBitmap_1bpp+0x19a>
 800c516:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c51a:	429e      	cmp	r6, r3
 800c51c:	dc41      	bgt.n	800c5a2 <LCD__DrawBitmap_1bpp+0x19a>
 800c51e:	f04f 0800 	mov.w	r8, #0
 800c522:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c526:	9408      	str	r4, [sp, #32]
 800c528:	46c2      	mov	sl, r8
 800c52a:	45aa      	cmp	sl, r5
 800c52c:	da39      	bge.n	800c5a2 <LCD__DrawBitmap_1bpp+0x19a>
 800c52e:	f1b8 0f00 	cmp.w	r8, #0
 800c532:	d105      	bne.n	800c540 <LCD__DrawBitmap_1bpp+0x138>
 800c534:	9a08      	ldr	r2, [sp, #32]
 800c536:	7817      	ldrb	r7, [r2, #0]
 800c538:	3201      	adds	r2, #1
 800c53a:	9208      	str	r2, [sp, #32]
 800c53c:	f04f 0808 	mov.w	r8, #8
 800c540:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c542:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c544:	4a1b      	ldr	r2, [pc, #108]	; (800c5b4 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c546:	fa47 f300 	asr.w	r3, r7, r0
 800c54a:	ebc1 0808 	rsb	r8, r1, r8
 800c54e:	408f      	lsls	r7, r1
 800c550:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c554:	b2ff      	uxtb	r7, r7
 800c556:	d103      	bne.n	800c560 <LCD__DrawBitmap_1bpp+0x158>
 800c558:	6810      	ldr	r0, [r2, #0]
 800c55a:	7c00      	ldrb	r0, [r0, #16]
 800c55c:	0780      	lsls	r0, r0, #30
 800c55e:	d41b      	bmi.n	800c598 <LCD__DrawBitmap_1bpp+0x190>
 800c560:	6812      	ldr	r2, [r2, #0]
 800c562:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c564:	6810      	ldr	r0, [r2, #0]
 800c566:	900d      	str	r0, [sp, #52]	; 0x34
 800c568:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c56a:	b110      	cbz	r0, 800c572 <LCD__DrawBitmap_1bpp+0x16a>
 800c56c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c570:	e000      	b.n	800c574 <LCD__DrawBitmap_1bpp+0x16c>
 800c572:	b2db      	uxtb	r3, r3
 800c574:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	1e4a      	subs	r2, r1, #1
 800c57a:	444a      	add	r2, r9
 800c57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c582:	4648      	mov	r0, r9
 800c584:	4631      	mov	r1, r6
 800c586:	f7ff ff13 	bl	800c3b0 <LCD_FillRect>
 800c58a:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c58c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c59a:	f10a 0a01 	add.w	sl, sl, #1
 800c59e:	4499      	add	r9, r3
 800c5a0:	e7c3      	b.n	800c52a <LCD__DrawBitmap_1bpp+0x122>
 800c5a2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c5a4:	f10c 0c01 	add.w	ip, ip, #1
 800c5a8:	4434      	add	r4, r6
 800c5aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c5ac:	e7a6      	b.n	800c4fc <LCD__DrawBitmap_1bpp+0xf4>
 800c5ae:	b00f      	add	sp, #60	; 0x3c
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	20000084 	.word	0x20000084
 800c5b8:	200056d4 	.word	0x200056d4
 800c5bc:	2000568c 	.word	0x2000568c

0800c5c0 <LCD_DrawBitmap>:
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800c7d4 <LCD_DrawBitmap+0x214>
 800c5c8:	b091      	sub	sp, #68	; 0x44
 800c5ca:	f8dc 9000 	ldr.w	r9, [ip]
 800c5ce:	9207      	str	r2, [sp, #28]
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	4688      	mov	r8, r1
 800c5d4:	469b      	mov	fp, r3
 800c5d6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c5d8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c5da:	f1b9 0f00 	cmp.w	r9, #0
 800c5de:	d00c      	beq.n	800c5fa <LCD_DrawBitmap+0x3a>
 800c5e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c5e2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c5e4:	9500      	str	r5, [sp, #0]
 800c5e6:	9701      	str	r7, [sp, #4]
 800c5e8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c5ea:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c5ec:	9602      	str	r6, [sp, #8]
 800c5ee:	9503      	str	r5, [sp, #12]
 800c5f0:	9404      	str	r4, [sp, #16]
 800c5f2:	9705      	str	r7, [sp, #20]
 800c5f4:	f8d9 4000 	ldr.w	r4, [r9]
 800c5f8:	e081      	b.n	800c6fe <LCD_DrawBitmap+0x13e>
 800c5fa:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c5fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c5fe:	ea47 0300 	orr.w	r3, r7, r0
 800c602:	2b01      	cmp	r3, #1
 800c604:	d17d      	bne.n	800c702 <LCD_DrawBitmap+0x142>
 800c606:	4b71      	ldr	r3, [pc, #452]	; (800c7cc <LCD_DrawBitmap+0x20c>)
 800c608:	6818      	ldr	r0, [r3, #0]
 800c60a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c60e:	1a53      	subs	r3, r2, r1
 800c610:	2b00      	cmp	r3, #0
 800c612:	dd08      	ble.n	800c626 <LCD_DrawBitmap+0x66>
 800c614:	ebc3 010b 	rsb	r1, r3, fp
 800c618:	2900      	cmp	r1, #0
 800c61a:	f340 80d4 	ble.w	800c7c6 <LCD_DrawBitmap+0x206>
 800c61e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c620:	fb07 4403 	mla	r4, r7, r3, r4
 800c624:	e001      	b.n	800c62a <LCD_DrawBitmap+0x6a>
 800c626:	4659      	mov	r1, fp
 800c628:	4642      	mov	r2, r8
 800c62a:	44d8      	add	r8, fp
 800c62c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800c630:	f108 38ff 	add.w	r8, r8, #4294967295
 800c634:	ebc3 0808 	rsb	r8, r3, r8
 800c638:	f1b8 0f00 	cmp.w	r8, #0
 800c63c:	dd04      	ble.n	800c648 <LCD_DrawBitmap+0x88>
 800c63e:	ebc8 0101 	rsb	r1, r8, r1
 800c642:	2900      	cmp	r1, #0
 800c644:	f340 80bf 	ble.w	800c7c6 <LCD_DrawBitmap+0x206>
 800c648:	9b07      	ldr	r3, [sp, #28]
 800c64a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800c64e:	442b      	add	r3, r5
 800c650:	3b01      	subs	r3, #1
 800c652:	ebcc 0303 	rsb	r3, ip, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	dd02      	ble.n	800c660 <LCD_DrawBitmap+0xa0>
 800c65a:	9f07      	ldr	r7, [sp, #28]
 800c65c:	1aff      	subs	r7, r7, r3
 800c65e:	9707      	str	r7, [sp, #28]
 800c660:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800c664:	4565      	cmp	r5, ip
 800c666:	da33      	bge.n	800c6d0 <LCD_DrawBitmap+0x110>
 800c668:	9f07      	ldr	r7, [sp, #28]
 800c66a:	ebc5 030c 	rsb	r3, r5, ip
 800c66e:	1aff      	subs	r7, r7, r3
 800c670:	2e08      	cmp	r6, #8
 800c672:	9707      	str	r7, [sp, #28]
 800c674:	d027      	beq.n	800c6c6 <LCD_DrawBitmap+0x106>
 800c676:	dc0d      	bgt.n	800c694 <LCD_DrawBitmap+0xd4>
 800c678:	2e02      	cmp	r6, #2
 800c67a:	d014      	beq.n	800c6a6 <LCD_DrawBitmap+0xe6>
 800c67c:	2e04      	cmp	r6, #4
 800c67e:	d01a      	beq.n	800c6b6 <LCD_DrawBitmap+0xf6>
 800c680:	2e01      	cmp	r6, #1
 800c682:	d126      	bne.n	800c6d2 <LCD_DrawBitmap+0x112>
 800c684:	f023 0c07 	bic.w	ip, r3, #7
 800c688:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800c68c:	4465      	add	r5, ip
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	e01e      	b.n	800c6d2 <LCD_DrawBitmap+0x112>
 800c694:	2e18      	cmp	r6, #24
 800c696:	d018      	beq.n	800c6ca <LCD_DrawBitmap+0x10a>
 800c698:	2e20      	cmp	r6, #32
 800c69a:	d016      	beq.n	800c6ca <LCD_DrawBitmap+0x10a>
 800c69c:	2e10      	cmp	r6, #16
 800c69e:	d118      	bne.n	800c6d2 <LCD_DrawBitmap+0x112>
 800c6a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c6a4:	e013      	b.n	800c6ce <LCD_DrawBitmap+0x10e>
 800c6a6:	f023 0c03 	bic.w	ip, r3, #3
 800c6aa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800c6ae:	4465      	add	r5, ip
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	e00d      	b.n	800c6d2 <LCD_DrawBitmap+0x112>
 800c6b6:	f023 0c01 	bic.w	ip, r3, #1
 800c6ba:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800c6be:	4465      	add	r5, ip
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	e005      	b.n	800c6d2 <LCD_DrawBitmap+0x112>
 800c6c6:	441c      	add	r4, r3
 800c6c8:	e001      	b.n	800c6ce <LCD_DrawBitmap+0x10e>
 800c6ca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c6ce:	4665      	mov	r5, ip
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9f07      	ldr	r7, [sp, #28]
 800c6d4:	2f00      	cmp	r7, #0
 800c6d6:	dd76      	ble.n	800c7c6 <LCD_DrawBitmap+0x206>
 800c6d8:	f890 e011 	ldrb.w	lr, [r0, #17]
 800c6dc:	483c      	ldr	r0, [pc, #240]	; (800c7d0 <LCD_DrawBitmap+0x210>)
 800c6de:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c6e0:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800c6e4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c6e8:	9403      	str	r4, [sp, #12]
 800c6ea:	e88d 0042 	stmia.w	sp, {r1, r6}
 800c6ee:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	9702      	str	r7, [sp, #8]
 800c6f4:	9405      	str	r4, [sp, #20]
 800c6f6:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c6fa:	9b07      	ldr	r3, [sp, #28]
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	47a0      	blx	r4
 800c700:	e061      	b.n	800c7c6 <LCD_DrawBitmap+0x206>
 800c702:	f1c6 0708 	rsb	r7, r6, #8
 800c706:	970e      	str	r7, [sp, #56]	; 0x38
 800c708:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c70c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c70e:	455f      	cmp	r7, fp
 800c710:	da59      	bge.n	800c7c6 <LCD_DrawBitmap+0x206>
 800c712:	4b2e      	ldr	r3, [pc, #184]	; (800c7cc <LCD_DrawBitmap+0x20c>)
 800c714:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4447      	add	r7, r8
 800c71a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c71e:	970c      	str	r7, [sp, #48]	; 0x30
 800c720:	3f01      	subs	r7, #1
 800c722:	4297      	cmp	r7, r2
 800c724:	970d      	str	r7, [sp, #52]	; 0x34
 800c726:	db46      	blt.n	800c7b6 <LCD_DrawBitmap+0x1f6>
 800c728:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c72c:	4598      	cmp	r8, r3
 800c72e:	dc42      	bgt.n	800c7b6 <LCD_DrawBitmap+0x1f6>
 800c730:	f04f 0a00 	mov.w	sl, #0
 800c734:	940b      	str	r4, [sp, #44]	; 0x2c
 800c736:	46ac      	mov	ip, r5
 800c738:	4657      	mov	r7, sl
 800c73a:	9807      	ldr	r0, [sp, #28]
 800c73c:	4287      	cmp	r7, r0
 800c73e:	da3a      	bge.n	800c7b6 <LCD_DrawBitmap+0x1f6>
 800c740:	f1ba 0f00 	cmp.w	sl, #0
 800c744:	d106      	bne.n	800c754 <LCD_DrawBitmap+0x194>
 800c746:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c748:	f890 9000 	ldrb.w	r9, [r0]
 800c74c:	3001      	adds	r0, #1
 800c74e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c750:	f04f 0a08 	mov.w	sl, #8
 800c754:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c756:	4a1d      	ldr	r2, [pc, #116]	; (800c7cc <LCD_DrawBitmap+0x20c>)
 800c758:	fa49 f301 	asr.w	r3, r9, r1
 800c75c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c760:	fa09 f906 	lsl.w	r9, r9, r6
 800c764:	fa5f f989 	uxtb.w	r9, r9
 800c768:	ebc6 0a0a 	rsb	sl, r6, sl
 800c76c:	d103      	bne.n	800c776 <LCD_DrawBitmap+0x1b6>
 800c76e:	6810      	ldr	r0, [r2, #0]
 800c770:	7c00      	ldrb	r0, [r0, #16]
 800c772:	0780      	lsls	r0, r0, #30
 800c774:	d41b      	bmi.n	800c7ae <LCD_DrawBitmap+0x1ee>
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c77a:	6810      	ldr	r0, [r2, #0]
 800c77c:	900f      	str	r0, [sp, #60]	; 0x3c
 800c77e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c780:	b110      	cbz	r0, 800c788 <LCD_DrawBitmap+0x1c8>
 800c782:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c786:	e000      	b.n	800c78a <LCD_DrawBitmap+0x1ca>
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	1e4a      	subs	r2, r1, #1
 800c790:	4462      	add	r2, ip
 800c792:	4660      	mov	r0, ip
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	f8cd c020 	str.w	ip, [sp, #32]
 800c79a:	4641      	mov	r1, r8
 800c79c:	f7ff fe08 	bl	800c3b0 <LCD_FillRect>
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <LCD_DrawBitmap+0x20c>)
 800c7a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c7b0:	3701      	adds	r7, #1
 800c7b2:	449c      	add	ip, r3
 800c7b4:	e7c1      	b.n	800c73a <LCD_DrawBitmap+0x17a>
 800c7b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c7b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c7bc:	3701      	adds	r7, #1
 800c7be:	970a      	str	r7, [sp, #40]	; 0x28
 800c7c0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c7c2:	443c      	add	r4, r7
 800c7c4:	e7a2      	b.n	800c70c <LCD_DrawBitmap+0x14c>
 800c7c6:	b011      	add	sp, #68	; 0x44
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	20000084 	.word	0x20000084
 800c7d0:	200056d4 	.word	0x200056d4
 800c7d4:	2000568c 	.word	0x2000568c

0800c7d8 <LCD_SetClipRectMax>:
 800c7d8:	b508      	push	{r3, lr}
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <LCD_SetClipRectMax+0x18>)
 800c7dc:	6819      	ldr	r1, [r3, #0]
 800c7de:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <LCD_SetClipRectMax+0x1c>)
 800c7e0:	7c4a      	ldrb	r2, [r1, #17]
 800c7e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c7e6:	68c3      	ldr	r3, [r0, #12]
 800c7e8:	3108      	adds	r1, #8
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ec:	4798      	blx	r3
 800c7ee:	bd08      	pop	{r3, pc}
 800c7f0:	20000084 	.word	0x20000084
 800c7f4:	200056d4 	.word	0x200056d4

0800c7f8 <emWin_LCD_Init>:
 800c7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7fa:	f7ff ffed 	bl	800c7d8 <LCD_SetClipRectMax>
 800c7fe:	f004 fe6f 	bl	80114e0 <LCD_InitColors>
 800c802:	4604      	mov	r4, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d145      	bne.n	800c894 <emWin_LCD_Init+0x9c>
 800c808:	4605      	mov	r5, r0
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 feac 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c810:	9001      	str	r0, [sp, #4]
 800c812:	b150      	cbz	r0, 800c82a <emWin_LCD_Init+0x32>
 800c814:	68c3      	ldr	r3, [r0, #12]
 800c816:	210c      	movs	r1, #12
 800c818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81a:	a801      	add	r0, sp, #4
 800c81c:	4798      	blx	r3
 800c81e:	4603      	mov	r3, r0
 800c820:	2800      	cmp	r0, #0
 800c822:	d035      	beq.n	800c890 <emWin_LCD_Init+0x98>
 800c824:	9801      	ldr	r0, [sp, #4]
 800c826:	4798      	blx	r3
 800c828:	4304      	orrs	r4, r0
 800c82a:	3501      	adds	r5, #1
 800c82c:	2d02      	cmp	r5, #2
 800c82e:	d1ec      	bne.n	800c80a <emWin_LCD_Init+0x12>
 800c830:	bb84      	cbnz	r4, 800c894 <emWin_LCD_Init+0x9c>
 800c832:	f004 fe71 	bl	8011518 <LCD_InitLUT>
 800c836:	4b19      	ldr	r3, [pc, #100]	; (800c89c <emWin_LCD_Init+0xa4>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c83e:	429a      	cmp	r2, r3
 800c840:	d101      	bne.n	800c846 <emWin_LCD_Init+0x4e>
 800c842:	2000      	movs	r0, #0
 800c844:	e027      	b.n	800c896 <emWin_LCD_Init+0x9e>
 800c846:	2401      	movs	r4, #1
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fe8d 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800c84e:	9001      	str	r0, [sp, #4]
 800c850:	b1d0      	cbz	r0, 800c888 <emWin_LCD_Init+0x90>
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fcd2 	bl	800d1fc <GUI_SelectLayer>
 800c858:	2004      	movs	r0, #4
 800c85a:	f7ff fd27 	bl	800c2ac <LCD_SetDrawMode>
 800c85e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c862:	2000      	movs	r0, #0
 800c864:	4601      	mov	r1, r0
 800c866:	4613      	mov	r3, r2
 800c868:	f7ff fda2 	bl	800c3b0 <LCD_FillRect>
 800c86c:	2000      	movs	r0, #0
 800c86e:	f7ff fd1d 	bl	800c2ac <LCD_SetDrawMode>
 800c872:	a802      	add	r0, sp, #8
 800c874:	210e      	movs	r1, #14
 800c876:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	4798      	blx	r3
 800c880:	4603      	mov	r3, r0
 800c882:	b108      	cbz	r0, 800c888 <emWin_LCD_Init+0x90>
 800c884:	9801      	ldr	r0, [sp, #4]
 800c886:	4798      	blx	r3
 800c888:	f114 34ff 	adds.w	r4, r4, #4294967295
 800c88c:	d2dc      	bcs.n	800c848 <emWin_LCD_Init+0x50>
 800c88e:	e7d8      	b.n	800c842 <emWin_LCD_Init+0x4a>
 800c890:	2001      	movs	r0, #1
 800c892:	e000      	b.n	800c896 <emWin_LCD_Init+0x9e>
 800c894:	4620      	mov	r0, r4
 800c896:	b003      	add	sp, #12
 800c898:	bd30      	pop	{r4, r5, pc}
 800c89a:	bf00      	nop
 800c89c:	2000551c 	.word	0x2000551c

0800c8a0 <LCD_Color2Index>:
 800c8a0:	b508      	push	{r3, lr}
 800c8a2:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <LCD_Color2Index+0x18>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	7c5a      	ldrb	r2, [r3, #17]
 800c8a8:	4b04      	ldr	r3, [pc, #16]	; (800c8bc <LCD_Color2Index+0x1c>)
 800c8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4798      	blx	r3
 800c8b4:	bd08      	pop	{r3, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20000084 	.word	0x20000084
 800c8bc:	200056d4 	.word	0x200056d4

0800c8c0 <LCD_Index2Color>:
 800c8c0:	b508      	push	{r3, lr}
 800c8c2:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <LCD_Index2Color+0x18>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	7c5a      	ldrb	r2, [r3, #17]
 800c8c8:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <LCD_Index2Color+0x1c>)
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	4798      	blx	r3
 800c8d4:	bd08      	pop	{r3, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20000084 	.word	0x20000084
 800c8dc:	200056d4 	.word	0x200056d4

0800c8e0 <LCD_SetColorIndex>:
 800c8e0:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <LCD_SetColorIndex+0x14>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	7c1a      	ldrb	r2, [r3, #16]
 800c8e6:	0752      	lsls	r2, r2, #29
 800c8e8:	bf4c      	ite	mi
 800c8ea:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800c8ec:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800c8ee:	6018      	str	r0, [r3, #0]
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20000084 	.word	0x20000084

0800c8f8 <_SetColor>:
 800c8f8:	b508      	push	{r3, lr}
 800c8fa:	4b06      	ldr	r3, [pc, #24]	; (800c914 <_SetColor+0x1c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c900:	4281      	cmp	r1, r0
 800c902:	d006      	beq.n	800c912 <_SetColor+0x1a>
 800c904:	6318      	str	r0, [r3, #48]	; 0x30
 800c906:	f7ff ffcb 	bl	800c8a0 <LCD_Color2Index>
 800c90a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c90e:	f7ff bfe7 	b.w	800c8e0 <LCD_SetColorIndex>
 800c912:	bd08      	pop	{r3, pc}
 800c914:	20000084 	.word	0x20000084

0800c918 <LCD_SetBkColorIndex>:
 800c918:	4b04      	ldr	r3, [pc, #16]	; (800c92c <LCD_SetBkColorIndex+0x14>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	7c1a      	ldrb	r2, [r3, #16]
 800c91e:	0752      	lsls	r2, r2, #29
 800c920:	bf4c      	ite	mi
 800c922:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800c924:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800c926:	6018      	str	r0, [r3, #0]
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	20000084 	.word	0x20000084

0800c930 <_SetBkColor>:
 800c930:	b508      	push	{r3, lr}
 800c932:	4b06      	ldr	r3, [pc, #24]	; (800c94c <_SetBkColor+0x1c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c938:	4281      	cmp	r1, r0
 800c93a:	d006      	beq.n	800c94a <_SetBkColor+0x1a>
 800c93c:	6358      	str	r0, [r3, #52]	; 0x34
 800c93e:	f7ff ffaf 	bl	800c8a0 <LCD_Color2Index>
 800c942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c946:	f7ff bfe7 	b.w	800c918 <LCD_SetBkColorIndex>
 800c94a:	bd08      	pop	{r3, pc}
 800c94c:	20000084 	.word	0x20000084

0800c950 <LCD_SetBkColor>:
 800c950:	b508      	push	{r3, lr}
 800c952:	4b02      	ldr	r3, [pc, #8]	; (800c95c <LCD_SetBkColor+0xc>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4798      	blx	r3
 800c95a:	bd08      	pop	{r3, pc}
 800c95c:	2000006c 	.word	0x2000006c

0800c960 <LCD_SetColor>:
 800c960:	b508      	push	{r3, lr}
 800c962:	4b02      	ldr	r3, [pc, #8]	; (800c96c <LCD_SetColor+0xc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4798      	blx	r3
 800c96a:	bd08      	pop	{r3, pc}
 800c96c:	2000006c 	.word	0x2000006c

0800c970 <GUI__HandleEOLine>:
 800c970:	b513      	push	{r0, r1, r4, lr}
 800c972:	6802      	ldr	r2, [r0, #0]
 800c974:	4604      	mov	r4, r0
 800c976:	a802      	add	r0, sp, #8
 800c978:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c97c:	f000 fb62 	bl	800d044 <GUI_UC__GetCharCodeInc>
 800c980:	b2c0      	uxtb	r0, r0
 800c982:	b120      	cbz	r0, 800c98e <GUI__HandleEOLine+0x1e>
 800c984:	280a      	cmp	r0, #10
 800c986:	d104      	bne.n	800c992 <GUI__HandleEOLine+0x22>
 800c988:	9b01      	ldr	r3, [sp, #4]
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	e001      	b.n	800c992 <GUI__HandleEOLine+0x22>
 800c98e:	2001      	movs	r0, #1
 800c990:	e000      	b.n	800c994 <GUI__HandleEOLine+0x24>
 800c992:	2000      	movs	r0, #0
 800c994:	b002      	add	sp, #8
 800c996:	bd10      	pop	{r4, pc}

0800c998 <GUI__IntersectRect>:
 800c998:	880b      	ldrh	r3, [r1, #0]
 800c99a:	b510      	push	{r4, lr}
 800c99c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c9a0:	b21a      	sxth	r2, r3
 800c9a2:	4294      	cmp	r4, r2
 800c9a4:	bfb8      	it	lt
 800c9a6:	8003      	strhlt	r3, [r0, #0]
 800c9a8:	884b      	ldrh	r3, [r1, #2]
 800c9aa:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c9ae:	b21a      	sxth	r2, r3
 800c9b0:	4294      	cmp	r4, r2
 800c9b2:	bfb8      	it	lt
 800c9b4:	8043      	strhlt	r3, [r0, #2]
 800c9b6:	888b      	ldrh	r3, [r1, #4]
 800c9b8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c9bc:	b21a      	sxth	r2, r3
 800c9be:	4294      	cmp	r4, r2
 800c9c0:	bfc8      	it	gt
 800c9c2:	8083      	strhgt	r3, [r0, #4]
 800c9c4:	88cb      	ldrh	r3, [r1, #6]
 800c9c6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c9ca:	b21a      	sxth	r2, r3
 800c9cc:	4291      	cmp	r1, r2
 800c9ce:	bfc8      	it	gt
 800c9d0:	80c3      	strhgt	r3, [r0, #6]
 800c9d2:	bd10      	pop	{r4, pc}

0800c9d4 <GUI__IntersectRects>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c9da:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c9de:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c9e2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800c9e6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c9ea:	429c      	cmp	r4, r3
 800c9ec:	bfb8      	it	lt
 800c9ee:	461c      	movlt	r4, r3
 800c9f0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c9f4:	429d      	cmp	r5, r3
 800c9f6:	bfa8      	it	ge
 800c9f8:	462b      	movge	r3, r5
 800c9fa:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c9fe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ca02:	42ae      	cmp	r6, r5
 800ca04:	bfb8      	it	lt
 800ca06:	4635      	movlt	r5, r6
 800ca08:	b2a4      	uxth	r4, r4
 800ca0a:	b2ad      	uxth	r5, r5
 800ca0c:	4291      	cmp	r1, r2
 800ca0e:	bfb8      	it	lt
 800ca10:	460a      	movlt	r2, r1
 800ca12:	8004      	strh	r4, [r0, #0]
 800ca14:	8085      	strh	r5, [r0, #4]
 800ca16:	b224      	sxth	r4, r4
 800ca18:	b22d      	sxth	r5, r5
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	b292      	uxth	r2, r2
 800ca1e:	42a5      	cmp	r5, r4
 800ca20:	8043      	strh	r3, [r0, #2]
 800ca22:	80c2      	strh	r2, [r0, #6]
 800ca24:	db06      	blt.n	800ca34 <GUI__IntersectRects+0x60>
 800ca26:	b210      	sxth	r0, r2
 800ca28:	b21b      	sxth	r3, r3
 800ca2a:	4298      	cmp	r0, r3
 800ca2c:	bfb4      	ite	lt
 800ca2e:	2000      	movlt	r0, #0
 800ca30:	2001      	movge	r0, #1
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	2000      	movs	r0, #0
 800ca36:	bd70      	pop	{r4, r5, r6, pc}

0800ca38 <GUI__memset16>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	0784      	lsls	r4, r0, #30
 800ca3c:	d502      	bpl.n	800ca44 <GUI__memset16+0xc>
 800ca3e:	8001      	strh	r1, [r0, #0]
 800ca40:	3a01      	subs	r2, #1
 800ca42:	3002      	adds	r0, #2
 800ca44:	0855      	lsrs	r5, r2, #1
 800ca46:	462b      	mov	r3, r5
 800ca48:	b305      	cbz	r5, 800ca8c <GUI__memset16+0x54>
 800ca4a:	2d03      	cmp	r5, #3
 800ca4c:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800ca50:	dc02      	bgt.n	800ca58 <GUI__memset16+0x20>
 800ca52:	4606      	mov	r6, r0
 800ca54:	461d      	mov	r5, r3
 800ca56:	e012      	b.n	800ca7e <GUI__memset16+0x46>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	462e      	mov	r6, r5
 800ca5c:	3e04      	subs	r6, #4
 800ca5e:	2e03      	cmp	r6, #3
 800ca60:	601c      	str	r4, [r3, #0]
 800ca62:	605c      	str	r4, [r3, #4]
 800ca64:	609c      	str	r4, [r3, #8]
 800ca66:	60dc      	str	r4, [r3, #12]
 800ca68:	f103 0310 	add.w	r3, r3, #16
 800ca6c:	dcf6      	bgt.n	800ca5c <GUI__memset16+0x24>
 800ca6e:	3d04      	subs	r5, #4
 800ca70:	08ab      	lsrs	r3, r5, #2
 800ca72:	1c5e      	adds	r6, r3, #1
 800ca74:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800ca78:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800ca7c:	e7e9      	b.n	800ca52 <GUI__memset16+0x1a>
 800ca7e:	b11d      	cbz	r5, 800ca88 <GUI__memset16+0x50>
 800ca80:	f846 4b04 	str.w	r4, [r6], #4
 800ca84:	3d01      	subs	r5, #1
 800ca86:	e7fa      	b.n	800ca7e <GUI__memset16+0x46>
 800ca88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ca8c:	07d3      	lsls	r3, r2, #31
 800ca8e:	bf48      	it	mi
 800ca90:	8001      	strhmi	r1, [r0, #0]
 800ca92:	bd70      	pop	{r4, r5, r6, pc}

0800ca94 <GUI__Read16>:
 800ca94:	6803      	ldr	r3, [r0, #0]
 800ca96:	781a      	ldrb	r2, [r3, #0]
 800ca98:	7859      	ldrb	r1, [r3, #1]
 800ca9a:	3302      	adds	r3, #2
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800caa2:	4770      	bx	lr

0800caa4 <GUI__Read32>:
 800caa4:	b510      	push	{r4, lr}
 800caa6:	6803      	ldr	r3, [r0, #0]
 800caa8:	789a      	ldrb	r2, [r3, #2]
 800caaa:	785c      	ldrb	r4, [r3, #1]
 800caac:	7819      	ldrb	r1, [r3, #0]
 800caae:	0412      	lsls	r2, r2, #16
 800cab0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800cab4:	430a      	orrs	r2, r1
 800cab6:	78d9      	ldrb	r1, [r3, #3]
 800cab8:	3304      	adds	r3, #4
 800caba:	6003      	str	r3, [r0, #0]
 800cabc:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <GUI__ReduceRect>:
 800cac2:	880b      	ldrh	r3, [r1, #0]
 800cac4:	b292      	uxth	r2, r2
 800cac6:	4413      	add	r3, r2
 800cac8:	8003      	strh	r3, [r0, #0]
 800caca:	888b      	ldrh	r3, [r1, #4]
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	8083      	strh	r3, [r0, #4]
 800cad0:	884b      	ldrh	r3, [r1, #2]
 800cad2:	4413      	add	r3, r2
 800cad4:	8043      	strh	r3, [r0, #2]
 800cad6:	88cb      	ldrh	r3, [r1, #6]
 800cad8:	1a9a      	subs	r2, r3, r2
 800cada:	80c2      	strh	r2, [r0, #6]
 800cadc:	4770      	bx	lr

0800cade <GUI__sqrt32>:
 800cade:	b510      	push	{r4, lr}
 800cae0:	2110      	movs	r1, #16
 800cae2:	2300      	movs	r3, #0
 800cae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cae8:	189c      	adds	r4, r3, r2
 800caea:	4284      	cmp	r4, r0
 800caec:	bf9c      	itt	ls
 800caee:	18a3      	addls	r3, r4, r2
 800caf0:	ebc4 0000 	rsbls	r0, r4, r0
 800caf4:	3901      	subs	r1, #1
 800caf6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800cafa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800cafe:	d1f3      	bne.n	800cae8 <GUI__sqrt32+0xa>
 800cb00:	4618      	mov	r0, r3
 800cb02:	bd10      	pop	{r4, pc}

0800cb04 <GUI__strcmp>:
 800cb04:	b510      	push	{r4, lr}
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <GUI__strcmp+0x28>)
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	bf08      	it	eq
 800cb0c:	4618      	moveq	r0, r3
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	bf08      	it	eq
 800cb12:	4619      	moveq	r1, r3
 800cb14:	2300      	movs	r3, #0
 800cb16:	5cc4      	ldrb	r4, [r0, r3]
 800cb18:	5cca      	ldrb	r2, [r1, r3]
 800cb1a:	42a2      	cmp	r2, r4
 800cb1c:	d104      	bne.n	800cb28 <GUI__strcmp+0x24>
 800cb1e:	3301      	adds	r3, #1
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	d1f8      	bne.n	800cb16 <GUI__strcmp+0x12>
 800cb24:	4610      	mov	r0, r2
 800cb26:	bd10      	pop	{r4, pc}
 800cb28:	2001      	movs	r0, #1
 800cb2a:	bd10      	pop	{r4, pc}
 800cb2c:	08015c33 	.word	0x08015c33

0800cb30 <GUI__strcmp_hp>:
 800cb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb32:	460d      	mov	r5, r1
 800cb34:	b160      	cbz	r0, 800cb50 <GUI__strcmp_hp+0x20>
 800cb36:	f002 fa51 	bl	800efdc <GUI_ALLOC_LockH>
 800cb3a:	ac02      	add	r4, sp, #8
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cb42:	f7ff ffdf 	bl	800cb04 <GUI__strcmp>
 800cb46:	4605      	mov	r5, r0
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f002 fa55 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800cb4e:	e000      	b.n	800cb52 <GUI__strcmp_hp+0x22>
 800cb50:	2501      	movs	r5, #1
 800cb52:	4628      	mov	r0, r5
 800cb54:	b003      	add	sp, #12
 800cb56:	bd30      	pop	{r4, r5, pc}

0800cb58 <GUI__strlen>:
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5c:	b118      	cbz	r0, 800cb66 <GUI__strlen+0xe>
 800cb5e:	3301      	adds	r3, #1
 800cb60:	5cc2      	ldrb	r2, [r0, r3]
 800cb62:	2a00      	cmp	r2, #0
 800cb64:	d1fb      	bne.n	800cb5e <GUI__strlen+0x6>
 800cb66:	4618      	mov	r0, r3
 800cb68:	4770      	bx	lr
	...

0800cb6c <GUI__SetText>:
 800cb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb6e:	6807      	ldr	r7, [r0, #0]
 800cb70:	4605      	mov	r5, r0
 800cb72:	4638      	mov	r0, r7
 800cb74:	460e      	mov	r6, r1
 800cb76:	f7ff ffdb 	bl	800cb30 <GUI__strcmp_hp>
 800cb7a:	b908      	cbnz	r0, 800cb80 <GUI__SetText+0x14>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e02f      	b.n	800cbe0 <GUI__SetText+0x74>
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff ffe9 	bl	800cb58 <GUI__strlen>
 800cb86:	1c44      	adds	r4, r0, #1
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f002 fa55 	bl	800f038 <GUI_ALLOC_GetSize>
 800cb8e:	4284      	cmp	r4, r0
 800cb90:	d110      	bne.n	800cbb4 <GUI__SetText+0x48>
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d0f2      	beq.n	800cb7c <GUI__SetText+0x10>
 800cb96:	4638      	mov	r0, r7
 800cb98:	f002 fa20 	bl	800efdc <GUI_ALLOC_LockH>
 800cb9c:	ad02      	add	r5, sp, #8
 800cb9e:	4b11      	ldr	r3, [pc, #68]	; (800cbe4 <GUI__SetText+0x78>)
 800cba0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4631      	mov	r1, r6
 800cba8:	4622      	mov	r2, r4
 800cbaa:	4798      	blx	r3
 800cbac:	4628      	mov	r0, r5
 800cbae:	f002 fa23 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800cbb2:	e014      	b.n	800cbde <GUI__SetText+0x72>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f002 fbdd 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 800cbba:	4607      	mov	r7, r0
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0dd      	beq.n	800cb7c <GUI__SetText+0x10>
 800cbc0:	f002 fa0c 	bl	800efdc <GUI_ALLOC_LockH>
 800cbc4:	ac02      	add	r4, sp, #8
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cbcc:	f005 fbf7 	bl	80123be <strcpy>
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f002 fa11 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f002 fbd0 	bl	800f37c <GUI_ALLOC_FreePtr>
 800cbdc:	602f      	str	r7, [r5, #0]
 800cbde:	2001      	movs	r0, #1
 800cbe0:	b003      	add	sp, #12
 800cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe4:	20000074 	.word	0x20000074

0800cbe8 <GUI__ManageCacheEx>:
 800cbe8:	2801      	cmp	r0, #1
 800cbea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbec:	4604      	mov	r4, r0
 800cbee:	460d      	mov	r5, r1
 800cbf0:	dc65      	bgt.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cbf2:	4b34      	ldr	r3, [pc, #208]	; (800ccc4 <GUI__ManageCacheEx+0xdc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <GUI__ManageCacheEx+0x12>
 800cbf8:	4798      	blx	r3
 800cbfa:	2d01      	cmp	r5, #1
 800cbfc:	d004      	beq.n	800cc08 <GUI__ManageCacheEx+0x20>
 800cbfe:	2d02      	cmp	r5, #2
 800cc00:	d021      	beq.n	800cc46 <GUI__ManageCacheEx+0x5e>
 800cc02:	2d00      	cmp	r5, #0
 800cc04:	d15b      	bne.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc06:	e035      	b.n	800cc74 <GUI__ManageCacheEx+0x8c>
 800cc08:	4e2f      	ldr	r6, [pc, #188]	; (800ccc8 <GUI__ManageCacheEx+0xe0>)
 800cc0a:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800cc0e:	b9b7      	cbnz	r7, 800cc3e <GUI__ManageCacheEx+0x56>
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 fca9 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800cc16:	9001      	str	r0, [sp, #4]
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d050      	beq.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc1c:	68c3      	ldr	r3, [r0, #12]
 800cc1e:	210d      	movs	r1, #13
 800cc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc22:	a801      	add	r0, sp, #4
 800cc24:	4798      	blx	r3
 800cc26:	4603      	mov	r3, r0
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d048      	beq.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc2c:	9801      	ldr	r0, [sp, #4]
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4798      	blx	r3
 800cc32:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800cc36:	3301      	adds	r3, #1
 800cc38:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800cc3c:	e018      	b.n	800cc70 <GUI__ManageCacheEx+0x88>
 800cc3e:	3701      	adds	r7, #1
 800cc40:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800cc44:	e03b      	b.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 fc8e 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800cc4c:	9001      	str	r0, [sp, #4]
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d035      	beq.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc52:	68c3      	ldr	r3, [r0, #12]
 800cc54:	210d      	movs	r1, #13
 800cc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc58:	a801      	add	r0, sp, #4
 800cc5a:	4798      	blx	r3
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d02d      	beq.n	800ccbe <GUI__ManageCacheEx+0xd6>
 800cc62:	4b1a      	ldr	r3, [pc, #104]	; (800cccc <GUI__ManageCacheEx+0xe4>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <GUI__ManageCacheEx+0x82>
 800cc68:	4798      	blx	r3
 800cc6a:	9801      	ldr	r0, [sp, #4]
 800cc6c:	2102      	movs	r1, #2
 800cc6e:	47a0      	blx	r4
 800cc70:	2000      	movs	r0, #0
 800cc72:	e025      	b.n	800ccc0 <GUI__ManageCacheEx+0xd8>
 800cc74:	4d14      	ldr	r5, [pc, #80]	; (800ccc8 <GUI__ManageCacheEx+0xe0>)
 800cc76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d001      	beq.n	800cc82 <GUI__ManageCacheEx+0x9a>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e015      	b.n	800ccae <GUI__ManageCacheEx+0xc6>
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fc70 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800cc88:	9001      	str	r0, [sp, #4]
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d0f7      	beq.n	800cc7e <GUI__ManageCacheEx+0x96>
 800cc8e:	68c3      	ldr	r3, [r0, #12]
 800cc90:	210d      	movs	r1, #13
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	a801      	add	r0, sp, #4
 800cc96:	4798      	blx	r3
 800cc98:	4606      	mov	r6, r0
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d0ef      	beq.n	800cc7e <GUI__ManageCacheEx+0x96>
 800cc9e:	4b0b      	ldr	r3, [pc, #44]	; (800cccc <GUI__ManageCacheEx+0xe4>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <GUI__ManageCacheEx+0xbe>
 800cca4:	4798      	blx	r3
 800cca6:	9801      	ldr	r0, [sp, #4]
 800cca8:	2100      	movs	r1, #0
 800ccaa:	47b0      	blx	r6
 800ccac:	2000      	movs	r0, #0
 800ccae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bf18      	it	ne
 800ccb6:	3b01      	subne	r3, #1
 800ccb8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800ccbc:	e000      	b.n	800ccc0 <GUI__ManageCacheEx+0xd8>
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	b003      	add	sp, #12
 800ccc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc4:	20005484 	.word	0x20005484
 800ccc8:	2000547c 	.word	0x2000547c
 800cccc:	20005478 	.word	0x20005478

0800ccd0 <GUI__ManageCache>:
 800ccd0:	4b02      	ldr	r3, [pc, #8]	; (800ccdc <GUI__ManageCache+0xc>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	7c58      	ldrb	r0, [r3, #17]
 800ccd8:	f7ff bf86 	b.w	800cbe8 <GUI__ManageCacheEx>
 800ccdc:	20000084 	.word	0x20000084

0800cce0 <GUI__MixColors>:
 800cce0:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800cce4:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cce8:	0e0b      	lsrs	r3, r1, #24
 800ccea:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ccee:	b530      	push	{r4, r5, lr}
 800ccf0:	fb02 f303 	mul.w	r3, r2, r3
 800ccf4:	f04f 04ff 	mov.w	r4, #255	; 0xff
 800ccf8:	fbb3 f3f4 	udiv	r3, r3, r4
 800ccfc:	bf08      	it	eq
 800ccfe:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800cd02:	1ae2      	subs	r2, r4, r3
 800cd04:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cd08:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 800cd0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800cd10:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800cd14:	0a2d      	lsrs	r5, r5, #8
 800cd16:	435c      	muls	r4, r3
 800cd18:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800cd1c:	4343      	muls	r3, r0
 800cd1e:	fb02 4405 	mla	r4, r2, r5, r4
 800cd22:	fb02 3201 	mla	r2, r2, r1, r3
 800cd26:	0a12      	lsrs	r2, r2, #8
 800cd28:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800cd2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800cd30:	ea44 0002 	orr.w	r0, r4, r2
 800cd34:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cd38:	bd30      	pop	{r4, r5, pc}
	...

0800cd3c <_OnExit>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	4c0a      	ldr	r4, [pc, #40]	; (800cd68 <_OnExit+0x2c>)
 800cd40:	4d0a      	ldr	r5, [pc, #40]	; (800cd6c <_OnExit+0x30>)
 800cd42:	6820      	ldr	r0, [r4, #0]
 800cd44:	4e0a      	ldr	r6, [pc, #40]	; (800cd70 <_OnExit+0x34>)
 800cd46:	f002 f935 	bl	800efb4 <GUI_ALLOC_FreeFixedBlock>
 800cd4a:	6828      	ldr	r0, [r5, #0]
 800cd4c:	f002 f932 	bl	800efb4 <GUI_ALLOC_FreeFixedBlock>
 800cd50:	6830      	ldr	r0, [r6, #0]
 800cd52:	f002 f92f 	bl	800efb4 <GUI_ALLOC_FreeFixedBlock>
 800cd56:	4a07      	ldr	r2, [pc, #28]	; (800cd74 <_OnExit+0x38>)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	4a06      	ldr	r2, [pc, #24]	; (800cd78 <_OnExit+0x3c>)
 800cd5e:	6033      	str	r3, [r6, #0]
 800cd60:	602b      	str	r3, [r5, #0]
 800cd62:	6023      	str	r3, [r4, #0]
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	2000548c 	.word	0x2000548c
 800cd6c:	20005488 	.word	0x20005488
 800cd70:	20005490 	.word	0x20005490
 800cd74:	20005494 	.word	0x20005494
 800cd78:	200054a4 	.word	0x200054a4

0800cd7c <GUI__GetAlphaBuffer>:
 800cd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd80:	461c      	mov	r4, r3
 800cd82:	4b28      	ldr	r3, [pc, #160]	; (800ce24 <GUI__GetAlphaBuffer+0xa8>)
 800cd84:	4617      	mov	r7, r2
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	4606      	mov	r6, r0
 800cd8a:	4688      	mov	r8, r1
 800cd8c:	b932      	cbnz	r2, 800cd9c <GUI__GetAlphaBuffer+0x20>
 800cd8e:	2201      	movs	r2, #1
 800cd90:	4825      	ldr	r0, [pc, #148]	; (800ce28 <GUI__GetAlphaBuffer+0xac>)
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	4b25      	ldr	r3, [pc, #148]	; (800ce2c <GUI__GetAlphaBuffer+0xb0>)
 800cd96:	6003      	str	r3, [r0, #0]
 800cd98:	f000 fd40 	bl	800d81c <GUI__RegisterExit>
 800cd9c:	4d24      	ldr	r5, [pc, #144]	; (800ce30 <GUI__GetAlphaBuffer+0xb4>)
 800cd9e:	682b      	ldr	r3, [r5, #0]
 800cda0:	b933      	cbnz	r3, 800cdb0 <GUI__GetAlphaBuffer+0x34>
 800cda2:	4b24      	ldr	r3, [pc, #144]	; (800ce34 <GUI__GetAlphaBuffer+0xb8>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	602b      	str	r3, [r5, #0]
 800cda8:	b913      	cbnz	r3, 800cdb0 <GUI__GetAlphaBuffer+0x34>
 800cdaa:	f7ff f9fb 	bl	800c1a4 <LCD_GetVXSizeMax>
 800cdae:	6028      	str	r0, [r5, #0]
 800cdb0:	b10c      	cbz	r4, 800cdb6 <GUI__GetAlphaBuffer+0x3a>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	b196      	cbz	r6, 800cdde <GUI__GetAlphaBuffer+0x62>
 800cdb8:	4b1f      	ldr	r3, [pc, #124]	; (800ce38 <GUI__GetAlphaBuffer+0xbc>)
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	4699      	mov	r9, r3
 800cdbe:	2400      	movs	r4, #0
 800cdc0:	b94a      	cbnz	r2, 800cdd6 <GUI__GetAlphaBuffer+0x5a>
 800cdc2:	6828      	ldr	r0, [r5, #0]
 800cdc4:	0080      	lsls	r0, r0, #2
 800cdc6:	f002 f9d9 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800cdca:	f1d0 0401 	rsbs	r4, r0, #1
 800cdce:	f8c9 0000 	str.w	r0, [r9]
 800cdd2:	bf38      	it	cc
 800cdd4:	2400      	movcc	r4, #0
 800cdd6:	f8d9 3000 	ldr.w	r3, [r9]
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	e000      	b.n	800cde0 <GUI__GetAlphaBuffer+0x64>
 800cdde:	4634      	mov	r4, r6
 800cde0:	f1b8 0f00 	cmp.w	r8, #0
 800cde4:	d00d      	beq.n	800ce02 <GUI__GetAlphaBuffer+0x86>
 800cde6:	4e15      	ldr	r6, [pc, #84]	; (800ce3c <GUI__GetAlphaBuffer+0xc0>)
 800cde8:	6833      	ldr	r3, [r6, #0]
 800cdea:	b93b      	cbnz	r3, 800cdfc <GUI__GetAlphaBuffer+0x80>
 800cdec:	6828      	ldr	r0, [r5, #0]
 800cdee:	0080      	lsls	r0, r0, #2
 800cdf0:	f002 f9c4 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	6030      	str	r0, [r6, #0]
 800cdf8:	bf08      	it	eq
 800cdfa:	2401      	moveq	r4, #1
 800cdfc:	6833      	ldr	r3, [r6, #0]
 800cdfe:	f8c8 3000 	str.w	r3, [r8]
 800ce02:	b167      	cbz	r7, 800ce1e <GUI__GetAlphaBuffer+0xa2>
 800ce04:	4e0e      	ldr	r6, [pc, #56]	; (800ce40 <GUI__GetAlphaBuffer+0xc4>)
 800ce06:	6833      	ldr	r3, [r6, #0]
 800ce08:	b93b      	cbnz	r3, 800ce1a <GUI__GetAlphaBuffer+0x9e>
 800ce0a:	6828      	ldr	r0, [r5, #0]
 800ce0c:	0080      	lsls	r0, r0, #2
 800ce0e:	f002 f9b5 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	6030      	str	r0, [r6, #0]
 800ce16:	bf08      	it	eq
 800ce18:	2401      	moveq	r4, #1
 800ce1a:	6833      	ldr	r3, [r6, #0]
 800ce1c:	603b      	str	r3, [r7, #0]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce24:	200054a4 	.word	0x200054a4
 800ce28:	20005498 	.word	0x20005498
 800ce2c:	0800cd3d 	.word	0x0800cd3d
 800ce30:	20005494 	.word	0x20005494
 800ce34:	200056dc 	.word	0x200056dc
 800ce38:	2000548c 	.word	0x2000548c
 800ce3c:	20005488 	.word	0x20005488
 800ce40:	20005490 	.word	0x20005490

0800ce44 <GUI__DoAlphaBlending>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	b093      	sub	sp, #76	; 0x4c
 800ce4a:	2400      	movs	r4, #0
 800ce4c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ce4e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce50:	910c      	str	r1, [sp, #48]	; 0x30
 800ce52:	4690      	mov	r8, r2
 800ce54:	461f      	mov	r7, r3
 800ce56:	6034      	str	r4, [r6, #0]
 800ce58:	a80f      	add	r0, sp, #60	; 0x3c
 800ce5a:	a910      	add	r1, sp, #64	; 0x40
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	ab11      	add	r3, sp, #68	; 0x44
 800ce60:	f7ff ff8c 	bl	800cd7c <GUI__GetAlphaBuffer>
 800ce64:	4605      	mov	r5, r0
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f040 80c5 	bne.w	800cff6 <GUI__DoAlphaBlending+0x1b2>
 800ce6c:	4c64      	ldr	r4, [pc, #400]	; (800d000 <GUI__DoAlphaBlending+0x1bc>)
 800ce6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	7c58      	ldrb	r0, [r3, #17]
 800ce74:	4b63      	ldr	r3, [pc, #396]	; (800d004 <GUI__DoAlphaBlending+0x1c0>)
 800ce76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ce7a:	9307      	str	r3, [sp, #28]
 800ce7c:	4297      	cmp	r7, r2
 800ce7e:	bfa8      	it	ge
 800ce80:	4617      	movge	r7, r2
 800ce82:	691a      	ldr	r2, [r3, #16]
 800ce84:	920d      	str	r2, [sp, #52]	; 0x34
 800ce86:	970a      	str	r7, [sp, #40]	; 0x28
 800ce88:	f7ff f950 	bl	800c12c <GUI_GetBitsPerPixelEx>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	9008      	str	r0, [sp, #32]
 800ce90:	7c58      	ldrb	r0, [r3, #17]
 800ce92:	f7ff f969 	bl	800c168 <GUI_GetpfIndex2ColorEx>
 800ce96:	4b5c      	ldr	r3, [pc, #368]	; (800d008 <GUI__DoAlphaBlending+0x1c4>)
 800ce98:	9004      	str	r0, [sp, #16]
 800ce9a:	4298      	cmp	r0, r3
 800ce9c:	d005      	beq.n	800ceaa <GUI__DoAlphaBlending+0x66>
 800ce9e:	4b5b      	ldr	r3, [pc, #364]	; (800d00c <GUI__DoAlphaBlending+0x1c8>)
 800cea0:	1ac3      	subs	r3, r0, r3
 800cea2:	bf18      	it	ne
 800cea4:	2301      	movne	r3, #1
 800cea6:	9306      	str	r3, [sp, #24]
 800cea8:	e000      	b.n	800ceac <GUI__DoAlphaBlending+0x68>
 800ceaa:	9506      	str	r5, [sp, #24]
 800ceac:	2500      	movs	r5, #0
 800ceae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ceb0:	46ab      	mov	fp, r5
 800ceb2:	4643      	mov	r3, r8
 800ceb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ceb6:	f853 0b04 	ldr.w	r0, [r3], #4
 800ceba:	9305      	str	r3, [sp, #20]
 800cebc:	4790      	blx	r2
 800cebe:	0e03      	lsrs	r3, r0, #24
 800cec0:	4681      	mov	r9, r0
 800cec2:	9309      	str	r3, [sp, #36]	; 0x24
 800cec4:	f000 8087 	beq.w	800cfd6 <GUI__DoAlphaBlending+0x192>
 800cec8:	f1bb 0f00 	cmp.w	fp, #0
 800cecc:	d13f      	bne.n	800cf4e <GUI__DoAlphaBlending+0x10a>
 800cece:	4b4c      	ldr	r3, [pc, #304]	; (800d000 <GUI__DoAlphaBlending+0x1bc>)
 800ced0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ced6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ceda:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800cede:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cee0:	442f      	add	r7, r5
 800cee2:	42bb      	cmp	r3, r7
 800cee4:	bfc8      	it	gt
 800cee6:	ebc7 0b03 	rsbgt	fp, r7, r3
 800ceea:	eb0b 0a05 	add.w	sl, fp, r5
 800ceee:	bfc8      	it	gt
 800cef0:	461f      	movgt	r7, r3
 800cef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cef4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800cef8:	4453      	add	r3, sl
 800cefa:	4494      	add	ip, r2
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	9b07      	ldr	r3, [sp, #28]
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	f10c 32ff 	add.w	r2, ip, #4294967295
 800cf06:	4638      	mov	r0, r7
 800cf08:	460b      	mov	r3, r1
 800cf0a:	f8cd c00c 	str.w	ip, [sp, #12]
 800cf0e:	f004 fa99 	bl	8011444 <GUI_ReadRectEx>
 800cf12:	9a08      	ldr	r2, [sp, #32]
 800cf14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cf16:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cf1a:	2a17      	cmp	r2, #23
 800cf1c:	dc06      	bgt.n	800cf2c <GUI__DoAlphaBlending+0xe8>
 800cf1e:	4450      	add	r0, sl
 800cf20:	ebcb 0104 	rsb	r1, fp, r4
 800cf24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf26:	f004 fbf1 	bl	801170c <GUI__ExpandPixelIndicesEx>
 800cf2a:	e001      	b.n	800cf30 <GUI__DoAlphaBlending+0xec>
 800cf2c:	9b06      	ldr	r3, [sp, #24]
 800cf2e:	b913      	cbnz	r3, 800cf36 <GUI__DoAlphaBlending+0xf2>
 800cf30:	f04f 0b01 	mov.w	fp, #1
 800cf34:	e00b      	b.n	800cf4e <GUI__DoAlphaBlending+0x10a>
 800cf36:	ebc7 070c 	rsb	r7, r7, ip
 800cf3a:	4482      	add	sl, r0
 800cf3c:	f8da 0000 	ldr.w	r0, [sl]
 800cf40:	9a04      	ldr	r2, [sp, #16]
 800cf42:	4790      	blx	r2
 800cf44:	3f01      	subs	r7, #1
 800cf46:	f84a 0b04 	str.w	r0, [sl], #4
 800cf4a:	d1f7      	bne.n	800cf3c <GUI__DoAlphaBlending+0xf8>
 800cf4c:	e7f0      	b.n	800cf30 <GUI__DoAlphaBlending+0xec>
 800cf4e:	4b30      	ldr	r3, [pc, #192]	; (800d010 <GUI__DoAlphaBlending+0x1cc>)
 800cf50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf52:	f8d3 c000 	ldr.w	ip, [r3]
 800cf56:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cf58:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800cf5c:	f1bc 0f00 	cmp.w	ip, #0
 800cf60:	d024      	beq.n	800cfac <GUI__DoAlphaBlending+0x168>
 800cf62:	eb07 020a 	add.w	r2, r7, sl
 800cf66:	4451      	add	r1, sl
 800cf68:	9210      	str	r2, [sp, #64]	; 0x40
 800cf6a:	4623      	mov	r3, r4
 800cf6c:	910f      	str	r1, [sp, #60]	; 0x3c
 800cf6e:	4640      	mov	r0, r8
 800cf70:	47e0      	blx	ip
 800cf72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf76:	2300      	movs	r3, #0
 800cf78:	f858 1003 	ldr.w	r1, [r8, r3]
 800cf7c:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800cf80:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800cf84:	58e8      	ldr	r0, [r5, r3]
 800cf86:	d101      	bne.n	800cf8c <GUI__DoAlphaBlending+0x148>
 800cf88:	50d0      	str	r0, [r2, r3]
 800cf8a:	e005      	b.n	800cf98 <GUI__DoAlphaBlending+0x154>
 800cf8c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800cf90:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800cf94:	bf08      	it	eq
 800cf96:	50d1      	streq	r1, [r2, r3]
 800cf98:	3c01      	subs	r4, #1
 800cf9a:	f103 0304 	add.w	r3, r3, #4
 800cf9e:	d1eb      	bne.n	800cf78 <GUI__DoAlphaBlending+0x134>
 800cfa0:	6833      	ldr	r3, [r6, #0]
 800cfa2:	9710      	str	r7, [sp, #64]	; 0x40
 800cfa4:	f043 0301 	orr.w	r3, r3, #1
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	e022      	b.n	800cff2 <GUI__DoAlphaBlending+0x1ae>
 800cfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfae:	2bff      	cmp	r3, #255	; 0xff
 800cfb0:	d104      	bne.n	800cfbc <GUI__DoAlphaBlending+0x178>
 800cfb2:	f851 300a 	ldr.w	r3, [r1, sl]
 800cfb6:	f847 300a 	str.w	r3, [r7, sl]
 800cfba:	e013      	b.n	800cfe4 <GUI__DoAlphaBlending+0x1a0>
 800cfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbe:	f851 100a 	ldr.w	r1, [r1, sl]
 800cfc2:	43da      	mvns	r2, r3
 800cfc4:	4b13      	ldr	r3, [pc, #76]	; (800d014 <GUI__DoAlphaBlending+0x1d0>)
 800cfc6:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	4798      	blx	r3
 800cfd0:	f847 000a 	str.w	r0, [r7, sl]
 800cfd4:	e002      	b.n	800cfdc <GUI__DoAlphaBlending+0x198>
 800cfd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cfdc:	6833      	ldr	r3, [r6, #0]
 800cfde:	f043 0301 	orr.w	r3, r3, #1
 800cfe2:	6033      	str	r3, [r6, #0]
 800cfe4:	3c01      	subs	r4, #1
 800cfe6:	f105 0501 	add.w	r5, r5, #1
 800cfea:	d002      	beq.n	800cff2 <GUI__DoAlphaBlending+0x1ae>
 800cfec:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cff0:	e75f      	b.n	800ceb2 <GUI__DoAlphaBlending+0x6e>
 800cff2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cff4:	e000      	b.n	800cff8 <GUI__DoAlphaBlending+0x1b4>
 800cff6:	4620      	mov	r0, r4
 800cff8:	b013      	add	sp, #76	; 0x4c
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	bf00      	nop
 800d000:	20000084 	.word	0x20000084
 800d004:	200056d4 	.word	0x200056d4
 800d008:	0800f3e3 	.word	0x0800f3e3
 800d00c:	0800f3e1 	.word	0x0800f3e1
 800d010:	200054a0 	.word	0x200054a0
 800d014:	20000078 	.word	0x20000078

0800d018 <GUI__AllocAlphaBuffer>:
 800d018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d01a:	b108      	cbz	r0, 800d020 <GUI__AllocAlphaBuffer+0x8>
 800d01c:	aa03      	add	r2, sp, #12
 800d01e:	e000      	b.n	800d022 <GUI__AllocAlphaBuffer+0xa>
 800d020:	4602      	mov	r2, r0
 800d022:	a801      	add	r0, sp, #4
 800d024:	a902      	add	r1, sp, #8
 800d026:	2300      	movs	r3, #0
 800d028:	f7ff fea8 	bl	800cd7c <GUI__GetAlphaBuffer>
 800d02c:	b005      	add	sp, #20
 800d02e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d034 <GUI_SignalEvent>:
 800d034:	b508      	push	{r3, lr}
 800d036:	4b02      	ldr	r3, [pc, #8]	; (800d040 <GUI_SignalEvent+0xc>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	b103      	cbz	r3, 800d03e <GUI_SignalEvent+0xa>
 800d03c:	4798      	blx	r3
 800d03e:	bd08      	pop	{r3, pc}
 800d040:	200054a8 	.word	0x200054a8

0800d044 <GUI_UC__GetCharCodeInc>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	4e08      	ldr	r6, [pc, #32]	; (800d068 <GUI_UC__GetCharCodeInc+0x24>)
 800d048:	6804      	ldr	r4, [r0, #0]
 800d04a:	6833      	ldr	r3, [r6, #0]
 800d04c:	4605      	mov	r5, r0
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4620      	mov	r0, r4
 800d052:	4798      	blx	r3
 800d054:	6833      	ldr	r3, [r6, #0]
 800d056:	4607      	mov	r7, r0
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	4620      	mov	r0, r4
 800d05c:	4798      	blx	r3
 800d05e:	4420      	add	r0, r4
 800d060:	6028      	str	r0, [r5, #0]
 800d062:	4638      	mov	r0, r7
 800d064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d066:	bf00      	nop
 800d068:	200056cc 	.word	0x200056cc

0800d06c <GUI_UC__NumChars2NumBytes>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	4604      	mov	r4, r0
 800d070:	460e      	mov	r6, r1
 800d072:	2500      	movs	r5, #0
 800d074:	b146      	cbz	r6, 800d088 <GUI_UC__NumChars2NumBytes+0x1c>
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <GUI_UC__NumChars2NumBytes+0x20>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4620      	mov	r0, r4
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	4798      	blx	r3
 800d080:	3e01      	subs	r6, #1
 800d082:	4404      	add	r4, r0
 800d084:	4405      	add	r5, r0
 800d086:	e7f5      	b.n	800d074 <GUI_UC__NumChars2NumBytes+0x8>
 800d088:	4628      	mov	r0, r5
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	200056cc 	.word	0x200056cc

0800d090 <_Unlink>:
 800d090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d092:	4605      	mov	r5, r0
 800d094:	b1f0      	cbz	r0, 800d0d4 <_Unlink+0x44>
 800d096:	f001 ffa1 	bl	800efdc <GUI_ALLOC_LockH>
 800d09a:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <_Unlink+0x48>)
 800d09c:	9000      	str	r0, [sp, #0]
 800d09e:	681c      	ldr	r4, [r3, #0]
 800d0a0:	42ac      	cmp	r4, r5
 800d0a2:	d104      	bne.n	800d0ae <_Unlink+0x1e>
 800d0a4:	6842      	ldr	r2, [r0, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	e011      	b.n	800d0ce <_Unlink+0x3e>
 800d0aa:	f001 ffa5 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d0ae:	b174      	cbz	r4, 800d0ce <_Unlink+0x3e>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f001 ff93 	bl	800efdc <GUI_ALLOC_LockH>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	a802      	add	r0, sp, #8
 800d0ba:	685c      	ldr	r4, [r3, #4]
 800d0bc:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d0c0:	42ac      	cmp	r4, r5
 800d0c2:	d1f2      	bne.n	800d0aa <_Unlink+0x1a>
 800d0c4:	9a00      	ldr	r2, [sp, #0]
 800d0c6:	6852      	ldr	r2, [r2, #4]
 800d0c8:	605a      	str	r2, [r3, #4]
 800d0ca:	f001 ff95 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d0ce:	4668      	mov	r0, sp
 800d0d0:	f001 ff92 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d0d4:	b003      	add	sp, #12
 800d0d6:	bd30      	pop	{r4, r5, pc}
 800d0d8:	200054b0 	.word	0x200054b0

0800d0dc <GUI_TIMER__GetFirstTimer>:
 800d0dc:	2300      	movs	r3, #0
 800d0de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0e0:	6003      	str	r3, [r0, #0]
 800d0e2:	4b09      	ldr	r3, [pc, #36]	; (800d108 <GUI_TIMER__GetFirstTimer+0x2c>)
 800d0e4:	681c      	ldr	r4, [r3, #0]
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	b154      	cbz	r4, 800d100 <GUI_TIMER__GetFirstTimer+0x24>
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f001 ff76 	bl	800efdc <GUI_ALLOC_LockH>
 800d0f0:	ab02      	add	r3, sp, #8
 800d0f2:	6902      	ldr	r2, [r0, #16]
 800d0f4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d0f8:	602a      	str	r2, [r5, #0]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 ff7c 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d100:	4620      	mov	r0, r4
 800d102:	b003      	add	sp, #12
 800d104:	bd30      	pop	{r4, r5, pc}
 800d106:	bf00      	nop
 800d108:	200054ac 	.word	0x200054ac

0800d10c <GUI_TIMER__GetNextTimerLin>:
 800d10c:	2300      	movs	r3, #0
 800d10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d110:	600b      	str	r3, [r1, #0]
 800d112:	460e      	mov	r6, r1
 800d114:	4604      	mov	r4, r0
 800d116:	b190      	cbz	r0, 800d13e <GUI_TIMER__GetNextTimerLin+0x32>
 800d118:	f001 ff60 	bl	800efdc <GUI_ALLOC_LockH>
 800d11c:	ad02      	add	r5, sp, #8
 800d11e:	6884      	ldr	r4, [r0, #8]
 800d120:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d124:	b144      	cbz	r4, 800d138 <GUI_TIMER__GetNextTimerLin+0x2c>
 800d126:	4628      	mov	r0, r5
 800d128:	f001 ff66 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d12c:	4620      	mov	r0, r4
 800d12e:	f001 ff55 	bl	800efdc <GUI_ALLOC_LockH>
 800d132:	6903      	ldr	r3, [r0, #16]
 800d134:	9001      	str	r0, [sp, #4]
 800d136:	6033      	str	r3, [r6, #0]
 800d138:	4628      	mov	r0, r5
 800d13a:	f001 ff5d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d13e:	4620      	mov	r0, r4
 800d140:	b002      	add	sp, #8
 800d142:	bd70      	pop	{r4, r5, r6, pc}

0800d144 <GUI_TIMER_Delete>:
 800d144:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	b360      	cbz	r0, 800d1a4 <GUI_TIMER_Delete+0x60>
 800d14a:	4e17      	ldr	r6, [pc, #92]	; (800d1a8 <GUI_TIMER_Delete+0x64>)
 800d14c:	6835      	ldr	r5, [r6, #0]
 800d14e:	4285      	cmp	r5, r0
 800d150:	d10b      	bne.n	800d16a <GUI_TIMER_Delete+0x26>
 800d152:	f001 ff43 	bl	800efdc <GUI_ALLOC_LockH>
 800d156:	ab02      	add	r3, sp, #8
 800d158:	6882      	ldr	r2, [r0, #8]
 800d15a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d15e:	6032      	str	r2, [r6, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	e017      	b.n	800d194 <GUI_TIMER_Delete+0x50>
 800d164:	4668      	mov	r0, sp
 800d166:	f001 ff47 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d16a:	b1ad      	cbz	r5, 800d198 <GUI_TIMER_Delete+0x54>
 800d16c:	4628      	mov	r0, r5
 800d16e:	f001 ff35 	bl	800efdc <GUI_ALLOC_LockH>
 800d172:	6885      	ldr	r5, [r0, #8]
 800d174:	ae02      	add	r6, sp, #8
 800d176:	42a5      	cmp	r5, r4
 800d178:	f846 0d08 	str.w	r0, [r6, #-8]!
 800d17c:	d1f2      	bne.n	800d164 <GUI_TIMER_Delete+0x20>
 800d17e:	4620      	mov	r0, r4
 800d180:	f001 ff2c 	bl	800efdc <GUI_ALLOC_LockH>
 800d184:	9b00      	ldr	r3, [sp, #0]
 800d186:	6882      	ldr	r2, [r0, #8]
 800d188:	9001      	str	r0, [sp, #4]
 800d18a:	609a      	str	r2, [r3, #8]
 800d18c:	a801      	add	r0, sp, #4
 800d18e:	f001 ff33 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d192:	4668      	mov	r0, sp
 800d194:	f001 ff30 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d198:	4620      	mov	r0, r4
 800d19a:	f7ff ff79 	bl	800d090 <_Unlink>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f001 ff56 	bl	800f050 <GUI_ALLOC_Free>
 800d1a4:	b002      	add	sp, #8
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	200054ac 	.word	0x200054ac

0800d1ac <GUI_TIMER_GetFlag>:
 800d1ac:	b513      	push	{r0, r1, r4, lr}
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b168      	cbz	r0, 800d1ce <GUI_TIMER_GetFlag+0x22>
 800d1b2:	f001 ff13 	bl	800efdc <GUI_ALLOC_LockH>
 800d1b6:	ab02      	add	r3, sp, #8
 800d1b8:	8982      	ldrh	r2, [r0, #12]
 800d1ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d1be:	4214      	tst	r4, r2
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	bf0c      	ite	eq
 800d1c4:	2400      	moveq	r4, #0
 800d1c6:	2401      	movne	r4, #1
 800d1c8:	f001 ff16 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800d1cc:	e000      	b.n	800d1d0 <GUI_TIMER_GetFlag+0x24>
 800d1ce:	2401      	movs	r4, #1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	b002      	add	sp, #8
 800d1d4:	bd10      	pop	{r4, pc}
	...

0800d1d8 <GUI__AlphaPreserveTrans>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <GUI__AlphaPreserveTrans+0x20>)
 800d1dc:	781c      	ldrb	r4, [r3, #0]
 800d1de:	b120      	cbz	r0, 800d1ea <GUI__AlphaPreserveTrans+0x12>
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	701a      	strb	r2, [r3, #0]
 800d1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e8:	e002      	b.n	800d1f0 <GUI__AlphaPreserveTrans+0x18>
 800d1ea:	7018      	strb	r0, [r3, #0]
 800d1ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d1f0:	f004 f9d0 	bl	8011594 <LCD_AA_SetAndMask>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bd10      	pop	{r4, pc}
 800d1f8:	200056bc 	.word	0x200056bc

0800d1fc <GUI_SelectLayer>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	4d08      	ldr	r5, [pc, #32]	; (800d220 <GUI_SelectLayer+0x24>)
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	2801      	cmp	r0, #1
 800d204:	4604      	mov	r4, r0
 800d206:	7c5e      	ldrb	r6, [r3, #17]
 800d208:	d808      	bhi.n	800d21c <GUI_SelectLayer+0x20>
 800d20a:	f000 f9ad 	bl	800d568 <GUI_DEVICE__GetpDriver>
 800d20e:	b128      	cbz	r0, 800d21c <GUI_SelectLayer+0x20>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	745c      	strb	r4, [r3, #17]
 800d214:	f000 fc82 	bl	800db1c <GUI_SelectLCD>
 800d218:	4b02      	ldr	r3, [pc, #8]	; (800d224 <GUI_SelectLayer+0x28>)
 800d21a:	601c      	str	r4, [r3, #0]
 800d21c:	4630      	mov	r0, r6
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	20000084 	.word	0x20000084
 800d224:	2000564c 	.word	0x2000564c

0800d228 <GUI_StoreKey>:
 800d228:	4b02      	ldr	r3, [pc, #8]	; (800d234 <GUI_StoreKey+0xc>)
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	b902      	cbnz	r2, 800d230 <GUI_StoreKey+0x8>
 800d22e:	6018      	str	r0, [r3, #0]
 800d230:	f7ff bf00 	b.w	800d034 <GUI_SignalEvent>
 800d234:	200054b4 	.word	0x200054b4

0800d238 <GUI_PollKeyMsg>:
 800d238:	4a0a      	ldr	r2, [pc, #40]	; (800d264 <GUI_PollKeyMsg+0x2c>)
 800d23a:	490b      	ldr	r1, [pc, #44]	; (800d268 <GUI_PollKeyMsg+0x30>)
 800d23c:	6813      	ldr	r3, [r2, #0]
 800d23e:	6809      	ldr	r1, [r1, #0]
 800d240:	428b      	cmp	r3, r1
 800d242:	b510      	push	{r4, lr}
 800d244:	d00b      	beq.n	800d25e <GUI_PollKeyMsg+0x26>
 800d246:	4c09      	ldr	r4, [pc, #36]	; (800d26c <GUI_PollKeyMsg+0x34>)
 800d248:	42a3      	cmp	r3, r4
 800d24a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d24e:	bf14      	ite	ne
 800d250:	3308      	addne	r3, #8
 800d252:	3b50      	subeq	r3, #80	; 0x50
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	f7fb fa1d 	bl	8008694 <WM_OnKey>
 800d25a:	2001      	movs	r0, #1
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	2000      	movs	r0, #0
 800d260:	bd10      	pop	{r4, pc}
 800d262:	bf00      	nop
 800d264:	20000080 	.word	0x20000080
 800d268:	2000007c 	.word	0x2000007c
 800d26c:	20005508 	.word	0x20005508

0800d270 <GUI__DispStringInRect>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	b087      	sub	sp, #28
 800d276:	460c      	mov	r4, r1
 800d278:	9001      	str	r0, [sp, #4]
 800d27a:	4691      	mov	r9, r2
 800d27c:	461d      	mov	r5, r3
 800d27e:	f000 ff3f 	bl	800e100 <GUI_GetFontDistY>
 800d282:	9f01      	ldr	r7, [sp, #4]
 800d284:	4680      	mov	r8, r0
 800d286:	b124      	cbz	r4, 800d292 <GUI__DispStringInRect+0x22>
 800d288:	6820      	ldr	r0, [r4, #0]
 800d28a:	6861      	ldr	r1, [r4, #4]
 800d28c:	ab04      	add	r3, sp, #16
 800d28e:	c303      	stmia	r3!, {r0, r1}
 800d290:	e002      	b.n	800d298 <GUI__DispStringInRect+0x28>
 800d292:	a804      	add	r0, sp, #16
 800d294:	f000 fb76 	bl	800d984 <GUI_GetClientRect>
 800d298:	f019 0a0c 	ands.w	sl, r9, #12
 800d29c:	d002      	beq.n	800d2a4 <GUI__DispStringInRect+0x34>
 800d29e:	462c      	mov	r4, r5
 800d2a0:	2600      	movs	r6, #0
 800d2a2:	e016      	b.n	800d2d2 <GUI__DispStringInRect+0x62>
 800d2a4:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800d2a8:	e032      	b.n	800d310 <GUI__DispStringInRect+0xa0>
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	9801      	ldr	r0, [sp, #4]
 800d2ae:	f000 fe75 	bl	800df9c <GUI__GetLineNumChars>
 800d2b2:	f8dd b004 	ldr.w	fp, [sp, #4]
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	1a24      	subs	r4, r4, r0
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	f7ff fed6 	bl	800d06c <GUI_UC__NumChars2NumBytes>
 800d2c0:	eb0b 0300 	add.w	r3, fp, r0
 800d2c4:	a806      	add	r0, sp, #24
 800d2c6:	3601      	adds	r6, #1
 800d2c8:	f840 3d14 	str.w	r3, [r0, #-20]!
 800d2cc:	f7ff fb50 	bl	800c970 <GUI__HandleEOLine>
 800d2d0:	b908      	cbnz	r0, 800d2d6 <GUI__DispStringInRect+0x66>
 800d2d2:	2c00      	cmp	r4, #0
 800d2d4:	d1e9      	bne.n	800d2aa <GUI__DispStringInRect+0x3a>
 800d2d6:	f1ba 0f08 	cmp.w	sl, #8
 800d2da:	d005      	beq.n	800d2e8 <GUI__DispStringInRect+0x78>
 800d2dc:	f1ba 0f0c 	cmp.w	sl, #12
 800d2e0:	d008      	beq.n	800d2f4 <GUI__DispStringInRect+0x84>
 800d2e2:	f1ba 0f04 	cmp.w	sl, #4
 800d2e6:	d112      	bne.n	800d30e <GUI__DispStringInRect+0x9e>
 800d2e8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d2ec:	fb08 4416 	mls	r4, r8, r6, r4
 800d2f0:	3401      	adds	r4, #1
 800d2f2:	e00d      	b.n	800d310 <GUI__DispStringInRect+0xa0>
 800d2f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d2f8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d2fc:	1ae4      	subs	r4, r4, r3
 800d2fe:	3401      	adds	r4, #1
 800d300:	fb08 4416 	mls	r4, r8, r6, r4
 800d304:	2202      	movs	r2, #2
 800d306:	fb94 f4f2 	sdiv	r4, r4, r2
 800d30a:	441c      	add	r4, r3
 800d30c:	e000      	b.n	800d310 <GUI__DispStringInRect+0xa0>
 800d30e:	2400      	movs	r4, #0
 800d310:	9701      	str	r7, [sp, #4]
 800d312:	2600      	movs	r6, #0
 800d314:	2d00      	cmp	r5, #0
 800d316:	d04b      	beq.n	800d3b0 <GUI__DispStringInRect+0x140>
 800d318:	4629      	mov	r1, r5
 800d31a:	9801      	ldr	r0, [sp, #4]
 800d31c:	f000 fe3e 	bl	800df9c <GUI__GetLineNumChars>
 800d320:	4607      	mov	r7, r0
 800d322:	1a2d      	subs	r5, r5, r0
 800d324:	4639      	mov	r1, r7
 800d326:	9801      	ldr	r0, [sp, #4]
 800d328:	f000 fe66 	bl	800dff8 <GUI__GetLineDistX>
 800d32c:	f009 0303 	and.w	r3, r9, #3
 800d330:	2b01      	cmp	r3, #1
 800d332:	d00f      	beq.n	800d354 <GUI__DispStringInRect+0xe4>
 800d334:	2b02      	cmp	r3, #2
 800d336:	d003      	beq.n	800d340 <GUI__DispStringInRect+0xd0>
 800d338:	b983      	cbnz	r3, 800d35c <GUI__DispStringInRect+0xec>
 800d33a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800d33e:	e00d      	b.n	800d35c <GUI__DispStringInRect+0xec>
 800d340:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d344:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d348:	1ab6      	subs	r6, r6, r2
 800d34a:	1a36      	subs	r6, r6, r0
 800d34c:	fb96 f6f3 	sdiv	r6, r6, r3
 800d350:	4416      	add	r6, r2
 800d352:	e003      	b.n	800d35c <GUI__DispStringInRect+0xec>
 800d354:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d358:	1a36      	subs	r6, r6, r0
 800d35a:	3601      	adds	r6, #1
 800d35c:	4b16      	ldr	r3, [pc, #88]	; (800d3b8 <GUI__DispStringInRect+0x148>)
 800d35e:	6819      	ldr	r1, [r3, #0]
 800d360:	3801      	subs	r0, #1
 800d362:	b2a3      	uxth	r3, r4
 800d364:	b2b2      	uxth	r2, r6
 800d366:	848b      	strh	r3, [r1, #36]	; 0x24
 800d368:	4430      	add	r0, r6
 800d36a:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d36e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d372:	4423      	add	r3, r4
 800d374:	844a      	strh	r2, [r1, #34]	; 0x22
 800d376:	f8ad 2008 	strh.w	r2, [sp, #8]
 800d37a:	4639      	mov	r1, r7
 800d37c:	aa02      	add	r2, sp, #8
 800d37e:	f8ad 000c 	strh.w	r0, [sp, #12]
 800d382:	9801      	ldr	r0, [sp, #4]
 800d384:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d388:	f000 fe66 	bl	800e058 <GUI__DispLine>
 800d38c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d390:	4639      	mov	r1, r7
 800d392:	4650      	mov	r0, sl
 800d394:	f7ff fe6a 	bl	800d06c <GUI_UC__NumChars2NumBytes>
 800d398:	af06      	add	r7, sp, #24
 800d39a:	4450      	add	r0, sl
 800d39c:	f847 0d14 	str.w	r0, [r7, #-20]!
 800d3a0:	f000 feae 	bl	800e100 <GUI_GetFontDistY>
 800d3a4:	4404      	add	r4, r0
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	f7ff fae2 	bl	800c970 <GUI__HandleEOLine>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d0b1      	beq.n	800d314 <GUI__DispStringInRect+0xa4>
 800d3b0:	b007      	add	sp, #28
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20000084 	.word	0x20000084

0800d3bc <GUI_DispStringInRectMax>:
 800d3bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	4690      	mov	r8, r2
 800d3c4:	461f      	mov	r7, r3
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	b1c0      	cbz	r0, 800d3fc <GUI_DispStringInRectMax+0x40>
 800d3ca:	b169      	cbz	r1, 800d3e8 <GUI_DispStringInRectMax+0x2c>
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	f7fb fa83 	bl	80088d8 <WM_SetUserClipRect>
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	b148      	cbz	r0, 800d3ea <GUI_DispStringInRectMax+0x2e>
 800d3d6:	4668      	mov	r0, sp
 800d3d8:	4621      	mov	r1, r4
 800d3da:	462a      	mov	r2, r5
 800d3dc:	f7ff fafa 	bl	800c9d4 <GUI__IntersectRects>
 800d3e0:	4668      	mov	r0, sp
 800d3e2:	f7fb fa79 	bl	80088d8 <WM_SetUserClipRect>
 800d3e6:	e000      	b.n	800d3ea <GUI_DispStringInRectMax+0x2e>
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	463b      	mov	r3, r7
 800d3f2:	f7ff ff3d 	bl	800d270 <GUI__DispStringInRect>
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f7fb fa6e 	bl	80088d8 <WM_SetUserClipRect>
 800d3fc:	b002      	add	sp, #8
 800d3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d402 <GUI_DispStringInRect>:
 800d402:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d406:	f7ff bfd9 	b.w	800d3bc <GUI_DispStringInRectMax>

0800d40a <GUI_WrapGetNumLines>:
 800d40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40c:	4605      	mov	r5, r0
 800d40e:	460e      	mov	r6, r1
 800d410:	4617      	mov	r7, r2
 800d412:	2400      	movs	r4, #0
 800d414:	4628      	mov	r0, r5
 800d416:	4631      	mov	r1, r6
 800d418:	463a      	mov	r2, r7
 800d41a:	f004 f96d 	bl	80116f8 <GUI__WrapGetNumBytesToNextLine>
 800d41e:	b110      	cbz	r0, 800d426 <GUI_WrapGetNumLines+0x1c>
 800d420:	4405      	add	r5, r0
 800d422:	3401      	adds	r4, #1
 800d424:	e7f6      	b.n	800d414 <GUI_WrapGetNumLines+0xa>
 800d426:	4620      	mov	r0, r4
 800d428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d42a <GUI_DispStringInRectWrap>:
 800d42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42e:	b089      	sub	sp, #36	; 0x24
 800d430:	460c      	mov	r4, r1
 800d432:	9202      	str	r2, [sp, #8]
 800d434:	9303      	str	r3, [sp, #12]
 800d436:	4605      	mov	r5, r0
 800d438:	2800      	cmp	r0, #0
 800d43a:	f000 8092 	beq.w	800d562 <GUI_DispStringInRectWrap+0x138>
 800d43e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d442:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800d446:	884e      	ldrh	r6, [r1, #2]
 800d448:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800d44c:	fa0f f289 	sxth.w	r2, r9
 800d450:	fa0f f38a 	sxth.w	r3, sl
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	3301      	adds	r3, #1
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	f000 fe51 	bl	800e100 <GUI_GetFontDistY>
 800d45e:	9902      	ldr	r1, [sp, #8]
 800d460:	f011 070c 	ands.w	r7, r1, #12
 800d464:	4680      	mov	r8, r0
 800d466:	d01b      	beq.n	800d4a0 <GUI_DispStringInRectWrap+0x76>
 800d468:	4628      	mov	r0, r5
 800d46a:	9901      	ldr	r1, [sp, #4]
 800d46c:	9a03      	ldr	r2, [sp, #12]
 800d46e:	f7ff ffcc 	bl	800d40a <GUI_WrapGetNumLines>
 800d472:	2f08      	cmp	r7, #8
 800d474:	d003      	beq.n	800d47e <GUI_DispStringInRectWrap+0x54>
 800d476:	2f0c      	cmp	r7, #12
 800d478:	d006      	beq.n	800d488 <GUI_DispStringInRectWrap+0x5e>
 800d47a:	2f04      	cmp	r7, #4
 800d47c:	d110      	bne.n	800d4a0 <GUI_DispStringInRectWrap+0x76>
 800d47e:	f10b 0601 	add.w	r6, fp, #1
 800d482:	fb00 6618 	mls	r6, r0, r8, r6
 800d486:	e00a      	b.n	800d49e <GUI_DispStringInRectWrap+0x74>
 800d488:	b232      	sxth	r2, r6
 800d48a:	fa0f f38b 	sxth.w	r3, fp
 800d48e:	1a9b      	subs	r3, r3, r2
 800d490:	3301      	adds	r3, #1
 800d492:	fb08 3010 	mls	r0, r8, r0, r3
 800d496:	2302      	movs	r3, #2
 800d498:	fb90 f0f3 	sdiv	r0, r0, r3
 800d49c:	4406      	add	r6, r0
 800d49e:	b2b6      	uxth	r6, r6
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f7fb fa19 	bl	80088d8 <WM_SetUserClipRect>
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	b178      	cbz	r0, 800d4ca <GUI_DispStringInRectWrap+0xa0>
 800d4aa:	a804      	add	r0, sp, #16
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	463a      	mov	r2, r7
 800d4b0:	f8ad a010 	strh.w	sl, [sp, #16]
 800d4b4:	f8ad 6012 	strh.w	r6, [sp, #18]
 800d4b8:	f8ad 9014 	strh.w	r9, [sp, #20]
 800d4bc:	f8ad b016 	strh.w	fp, [sp, #22]
 800d4c0:	f7ff fa88 	bl	800c9d4 <GUI__IntersectRects>
 800d4c4:	a804      	add	r0, sp, #16
 800d4c6:	f7fb fa07 	bl	80088d8 <WM_SetUserClipRect>
 800d4ca:	9901      	ldr	r1, [sp, #4]
 800d4cc:	9a03      	ldr	r2, [sp, #12]
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f004 f8e0 	bl	8011694 <GUI__WrapGetNumCharsDisp>
 800d4d4:	eb06 0b08 	add.w	fp, r6, r8
 800d4d8:	4602      	mov	r2, r0
 800d4da:	fa1f fb8b 	uxth.w	fp, fp
 800d4de:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d4ea:	9200      	str	r2, [sp, #0]
 800d4ec:	f8ad a018 	strh.w	sl, [sp, #24]
 800d4f0:	f8ad 601a 	strh.w	r6, [sp, #26]
 800d4f4:	f8ad 901c 	strh.w	r9, [sp, #28]
 800d4f8:	f000 fd7e 	bl	800dff8 <GUI__GetLineDistX>
 800d4fc:	9902      	ldr	r1, [sp, #8]
 800d4fe:	9a00      	ldr	r2, [sp, #0]
 800d500:	f001 0303 	and.w	r3, r1, #3
 800d504:	2b01      	cmp	r3, #1
 800d506:	d014      	beq.n	800d532 <GUI_DispStringInRectWrap+0x108>
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d004      	beq.n	800d516 <GUI_DispStringInRectWrap+0xec>
 800d50c:	b9b3      	cbnz	r3, 800d53c <GUI_DispStringInRectWrap+0x112>
 800d50e:	8823      	ldrh	r3, [r4, #0]
 800d510:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d514:	e012      	b.n	800d53c <GUI_DispStringInRectWrap+0x112>
 800d516:	8821      	ldrh	r1, [r4, #0]
 800d518:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800d51c:	b20e      	sxth	r6, r1
 800d51e:	ebc6 060e 	rsb	r6, r6, lr
 800d522:	1a30      	subs	r0, r6, r0
 800d524:	3001      	adds	r0, #1
 800d526:	fb90 f3f3 	sdiv	r3, r0, r3
 800d52a:	4419      	add	r1, r3
 800d52c:	f8ad 1018 	strh.w	r1, [sp, #24]
 800d530:	e004      	b.n	800d53c <GUI_DispStringInRectWrap+0x112>
 800d532:	88a3      	ldrh	r3, [r4, #4]
 800d534:	3301      	adds	r3, #1
 800d536:	1a18      	subs	r0, r3, r0
 800d538:	f8ad 0018 	strh.w	r0, [sp, #24]
 800d53c:	4628      	mov	r0, r5
 800d53e:	4611      	mov	r1, r2
 800d540:	aa06      	add	r2, sp, #24
 800d542:	f000 fd89 	bl	800e058 <GUI__DispLine>
 800d546:	4628      	mov	r0, r5
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	9a03      	ldr	r2, [sp, #12]
 800d54c:	f004 f8d4 	bl	80116f8 <GUI__WrapGetNumBytesToNextLine>
 800d550:	4405      	add	r5, r0
 800d552:	fa1f f68b 	uxth.w	r6, fp
 800d556:	782b      	ldrb	r3, [r5, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1b6      	bne.n	800d4ca <GUI_DispStringInRectWrap+0xa0>
 800d55c:	4638      	mov	r0, r7
 800d55e:	f7fb f9bb 	bl	80088d8 <WM_SetUserClipRect>
 800d562:	b009      	add	sp, #36	; 0x24
 800d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d568 <GUI_DEVICE__GetpDriver>:
 800d568:	2801      	cmp	r0, #1
 800d56a:	dc09      	bgt.n	800d580 <GUI_DEVICE__GetpDriver+0x18>
 800d56c:	4b05      	ldr	r3, [pc, #20]	; (800d584 <GUI_DEVICE__GetpDriver+0x1c>)
 800d56e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d572:	b120      	cbz	r0, 800d57e <GUI_DEVICE__GetpDriver+0x16>
 800d574:	68c3      	ldr	r3, [r0, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	b11b      	cbz	r3, 800d582 <GUI_DEVICE__GetpDriver+0x1a>
 800d57a:	6800      	ldr	r0, [r0, #0]
 800d57c:	e7f9      	b.n	800d572 <GUI_DEVICE__GetpDriver+0xa>
 800d57e:	4770      	bx	lr
 800d580:	2000      	movs	r0, #0
 800d582:	4770      	bx	lr
 800d584:	200056d4 	.word	0x200056d4

0800d588 <GUI_DEVICE_Delete>:
 800d588:	f001 bd14 	b.w	800efb4 <GUI_ALLOC_FreeFixedBlock>

0800d58c <GUI_DEVICE_Create>:
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d590:	4606      	mov	r6, r0
 800d592:	460d      	mov	r5, r1
 800d594:	4617      	mov	r7, r2
 800d596:	461c      	mov	r4, r3
 800d598:	dd01      	ble.n	800d59e <GUI_DEVICE_Create+0x12>
 800d59a:	2000      	movs	r0, #0
 800d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d59e:	201c      	movs	r0, #28
 800d5a0:	f001 fdec 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d0f8      	beq.n	800d59a <GUI_DEVICE_Create+0xe>
 800d5a8:	b10d      	cbz	r5, 800d5ae <GUI_DEVICE_Create+0x22>
 800d5aa:	6105      	str	r5, [r0, #16]
 800d5ac:	e009      	b.n	800d5c2 <GUI_DEVICE_Create+0x36>
 800d5ae:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <GUI_DEVICE_Create+0x48>)
 800d5b0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d5b4:	b129      	cbz	r1, 800d5c2 <GUI_DEVICE_Create+0x36>
 800d5b6:	680b      	ldr	r3, [r1, #0]
 800d5b8:	b10b      	cbz	r3, 800d5be <GUI_DEVICE_Create+0x32>
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	e7fb      	b.n	800d5b6 <GUI_DEVICE_Create+0x2a>
 800d5be:	690b      	ldr	r3, [r1, #16]
 800d5c0:	6103      	str	r3, [r0, #16]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6083      	str	r3, [r0, #8]
 800d5c6:	6184      	str	r4, [r0, #24]
 800d5c8:	8287      	strh	r7, [r0, #20]
 800d5ca:	60c6      	str	r6, [r0, #12]
 800d5cc:	6003      	str	r3, [r0, #0]
 800d5ce:	6043      	str	r3, [r0, #4]
 800d5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	200056d4 	.word	0x200056d4

0800d5d8 <GUI_DEVICE_Unlink>:
 800d5d8:	6981      	ldr	r1, [r0, #24]
 800d5da:	4a0b      	ldr	r2, [pc, #44]	; (800d608 <GUI_DEVICE_Unlink+0x30>)
 800d5dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5e0:	4283      	cmp	r3, r0
 800d5e2:	d105      	bne.n	800d5f0 <GUI_DEVICE_Unlink+0x18>
 800d5e4:	6803      	ldr	r3, [r0, #0]
 800d5e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d5ea:	b10b      	cbz	r3, 800d5f0 <GUI_DEVICE_Unlink+0x18>
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	605a      	str	r2, [r3, #4]
 800d5f0:	6843      	ldr	r3, [r0, #4]
 800d5f2:	b10b      	cbz	r3, 800d5f8 <GUI_DEVICE_Unlink+0x20>
 800d5f4:	6802      	ldr	r2, [r0, #0]
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	6802      	ldr	r2, [r0, #0]
 800d5fa:	b102      	cbz	r2, 800d5fe <GUI_DEVICE_Unlink+0x26>
 800d5fc:	6053      	str	r3, [r2, #4]
 800d5fe:	2300      	movs	r3, #0
 800d600:	6003      	str	r3, [r0, #0]
 800d602:	6043      	str	r3, [r0, #4]
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	200056d4 	.word	0x200056d4

0800d60c <GUI_DEVICE_Link>:
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	b908      	cbnz	r0, 800d614 <GUI_DEVICE_Link+0x8>
 800d610:	2001      	movs	r0, #1
 800d612:	bd70      	pop	{r4, r5, r6, pc}
 800d614:	6982      	ldr	r2, [r0, #24]
 800d616:	2a01      	cmp	r2, #1
 800d618:	dcfa      	bgt.n	800d610 <GUI_DEVICE_Link+0x4>
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <GUI_DEVICE_Link+0x7c>)
 800d61c:	7819      	ldrb	r1, [r3, #0]
 800d61e:	428a      	cmp	r2, r1
 800d620:	bfa4      	itt	ge
 800d622:	1c51      	addge	r1, r2, #1
 800d624:	7019      	strbge	r1, [r3, #0]
 800d626:	4919      	ldr	r1, [pc, #100]	; (800d68c <GUI_DEVICE_Link+0x80>)
 800d628:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800d62c:	460d      	mov	r5, r1
 800d62e:	b913      	cbnz	r3, 800d636 <GUI_DEVICE_Link+0x2a>
 800d630:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800d634:	e01a      	b.n	800d66c <GUI_DEVICE_Link+0x60>
 800d636:	6859      	ldr	r1, [r3, #4]
 800d638:	b109      	cbz	r1, 800d63e <GUI_DEVICE_Link+0x32>
 800d63a:	460b      	mov	r3, r1
 800d63c:	e7fb      	b.n	800d636 <GUI_DEVICE_Link+0x2a>
 800d63e:	68c1      	ldr	r1, [r0, #12]
 800d640:	680e      	ldr	r6, [r1, #0]
 800d642:	68d9      	ldr	r1, [r3, #12]
 800d644:	680c      	ldr	r4, [r1, #0]
 800d646:	42b4      	cmp	r4, r6
 800d648:	dd03      	ble.n	800d652 <GUI_DEVICE_Link+0x46>
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1f8      	bne.n	800d642 <GUI_DEVICE_Link+0x36>
 800d650:	e7de      	b.n	800d610 <GUI_DEVICE_Link+0x4>
 800d652:	d102      	bne.n	800d65a <GUI_DEVICE_Link+0x4e>
 800d654:	8a81      	ldrh	r1, [r0, #20]
 800d656:	2901      	cmp	r1, #1
 800d658:	d00f      	beq.n	800d67a <GUI_DEVICE_Link+0x6e>
 800d65a:	6859      	ldr	r1, [r3, #4]
 800d65c:	b189      	cbz	r1, 800d682 <GUI_DEVICE_Link+0x76>
 800d65e:	6008      	str	r0, [r1, #0]
 800d660:	6041      	str	r1, [r0, #4]
 800d662:	6058      	str	r0, [r3, #4]
 800d664:	4298      	cmp	r0, r3
 800d666:	bf08      	it	eq
 800d668:	2300      	moveq	r3, #0
 800d66a:	6003      	str	r3, [r0, #0]
 800d66c:	2000      	movs	r0, #0
 800d66e:	bd70      	pop	{r4, r5, r6, pc}
 800d670:	68cb      	ldr	r3, [r1, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	42a3      	cmp	r3, r4
 800d676:	460b      	mov	r3, r1
 800d678:	dbef      	blt.n	800d65a <GUI_DEVICE_Link+0x4e>
 800d67a:	6819      	ldr	r1, [r3, #0]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d1f7      	bne.n	800d670 <GUI_DEVICE_Link+0x64>
 800d680:	e7eb      	b.n	800d65a <GUI_DEVICE_Link+0x4e>
 800d682:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800d686:	e7ec      	b.n	800d662 <GUI_DEVICE_Link+0x56>
 800d688:	20005682 	.word	0x20005682
 800d68c:	200056d4 	.word	0x200056d4

0800d690 <GUI_DEVICE_CreateAndLink>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	461d      	mov	r5, r3
 800d694:	f7ff ff7a 	bl	800d58c <GUI_DEVICE_Create>
 800d698:	4604      	mov	r4, r0
 800d69a:	b148      	cbz	r0, 800d6b0 <GUI_DEVICE_CreateAndLink+0x20>
 800d69c:	f7ff ffb6 	bl	800d60c <GUI_DEVICE_Link>
 800d6a0:	68e3      	ldr	r3, [r4, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	b923      	cbnz	r3, 800d6b0 <GUI_DEVICE_CreateAndLink+0x20>
 800d6a6:	4b03      	ldr	r3, [pc, #12]	; (800d6b4 <GUI_DEVICE_CreateAndLink+0x24>)
 800d6a8:	3516      	adds	r5, #22
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	20000084 	.word	0x20000084

0800d6b8 <_OnExit>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	4b0b      	ldr	r3, [pc, #44]	; (800d6e8 <_OnExit+0x30>)
 800d6bc:	4e0b      	ldr	r6, [pc, #44]	; (800d6ec <_OnExit+0x34>)
 800d6be:	4d0c      	ldr	r5, [pc, #48]	; (800d6f0 <_OnExit+0x38>)
 800d6c0:	2400      	movs	r4, #0
 800d6c2:	601c      	str	r4, [r3, #0]
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	6833      	ldr	r3, [r6, #0]
 800d6c8:	2270      	movs	r2, #112	; 0x70
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	4798      	blx	r3
 800d6ce:	6833      	ldr	r3, [r6, #0]
 800d6d0:	4808      	ldr	r0, [pc, #32]	; (800d6f4 <_OnExit+0x3c>)
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	2208      	movs	r2, #8
 800d6d6:	4798      	blx	r3
 800d6d8:	4b07      	ldr	r3, [pc, #28]	; (800d6f8 <_OnExit+0x40>)
 800d6da:	601d      	str	r5, [r3, #0]
 800d6dc:	4b07      	ldr	r3, [pc, #28]	; (800d6fc <_OnExit+0x44>)
 800d6de:	701c      	strb	r4, [r3, #0]
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <_OnExit+0x48>)
 800d6e2:	601c      	str	r4, [r3, #0]
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20005590 	.word	0x20005590
 800d6ec:	20000070 	.word	0x20000070
 800d6f0:	20005520 	.word	0x20005520
 800d6f4:	200056d4 	.word	0x200056d4
 800d6f8:	20000084 	.word	0x20000084
 800d6fc:	200056bc 	.word	0x200056bc
 800d700:	20005694 	.word	0x20005694

0800d704 <_InitContext>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4d19      	ldr	r5, [pc, #100]	; (800d76c <_InitContext+0x68>)
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	63da      	str	r2, [r3, #60]	; 0x3c
 800d70e:	f103 0208 	add.w	r2, r3, #8
 800d712:	639b      	str	r3, [r3, #56]	; 0x38
 800d714:	641b      	str	r3, [r3, #64]	; 0x40
 800d716:	6142      	str	r2, [r0, #20]
 800d718:	7c5a      	ldrb	r2, [r3, #17]
 800d71a:	4b15      	ldr	r3, [pc, #84]	; (800d770 <_InitContext+0x6c>)
 800d71c:	4604      	mov	r4, r0
 800d71e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d722:	68c3      	ldr	r3, [r0, #12]
 800d724:	f104 0108 	add.w	r1, r4, #8
 800d728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72a:	4798      	blx	r3
 800d72c:	4b11      	ldr	r3, [pc, #68]	; (800d774 <_InitContext+0x70>)
 800d72e:	6663      	str	r3, [r4, #100]	; 0x64
 800d730:	4b11      	ldr	r3, [pc, #68]	; (800d778 <_InitContext+0x74>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	61e3      	str	r3, [r4, #28]
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	3308      	adds	r3, #8
 800d73a:	6163      	str	r3, [r4, #20]
 800d73c:	2301      	movs	r3, #1
 800d73e:	7623      	strb	r3, [r4, #24]
 800d740:	f7fa fe98 	bl	8008474 <WM_GetDesktopWindow>
 800d744:	2303      	movs	r3, #3
 800d746:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800d74a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d74e:	6323      	str	r3, [r4, #48]	; 0x30
 800d750:	6363      	str	r3, [r4, #52]	; 0x34
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <_InitContext+0x78>)
 800d754:	64a0      	str	r0, [r4, #72]	; 0x48
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	f7ff f8fa 	bl	800c950 <LCD_SetBkColor>
 800d75c:	4b08      	ldr	r3, [pc, #32]	; (800d780 <_InitContext+0x7c>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	f7ff f8fe 	bl	800c960 <LCD_SetColor>
 800d764:	4b07      	ldr	r3, [pc, #28]	; (800d784 <_InitContext+0x80>)
 800d766:	4a08      	ldr	r2, [pc, #32]	; (800d788 <_InitContext+0x84>)
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	20000084 	.word	0x20000084
 800d770:	200056d4 	.word	0x200056d4
 800d774:	08015014 	.word	0x08015014
 800d778:	20000088 	.word	0x20000088
 800d77c:	2000551c 	.word	0x2000551c
 800d780:	2000008c 	.word	0x2000008c
 800d784:	200056cc 	.word	0x200056cc
 800d788:	08015b3c 	.word	0x08015b3c

0800d78c <GUI_SetDefaultFont>:
 800d78c:	4b01      	ldr	r3, [pc, #4]	; (800d794 <GUI_SetDefaultFont+0x8>)
 800d78e:	6018      	str	r0, [r3, #0]
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20000088 	.word	0x20000088

0800d798 <GUI_ClearRect>:
 800d798:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	4607      	mov	r7, r0
 800d79e:	2004      	movs	r0, #4
 800d7a0:	469a      	mov	sl, r3
 800d7a2:	460e      	mov	r6, r1
 800d7a4:	4691      	mov	r9, r2
 800d7a6:	f7fe fd81 	bl	800c2ac <LCD_SetDrawMode>
 800d7aa:	4b13      	ldr	r3, [pc, #76]	; (800d7f8 <GUI_ClearRect+0x60>)
 800d7ac:	681c      	ldr	r4, [r3, #0]
 800d7ae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d7b0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800d7b2:	442f      	add	r7, r5
 800d7b4:	4426      	add	r6, r4
 800d7b6:	4680      	mov	r8, r0
 800d7b8:	444d      	add	r5, r9
 800d7ba:	4454      	add	r4, sl
 800d7bc:	4668      	mov	r0, sp
 800d7be:	f8ad 7000 	strh.w	r7, [sp]
 800d7c2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d7c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d7ca:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d7ce:	f7fc f899 	bl	8009904 <WM__InitIVRSearch>
 800d7d2:	b928      	cbnz	r0, 800d7e0 <GUI_ClearRect+0x48>
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	f7fe fd69 	bl	800c2ac <LCD_SetDrawMode>
 800d7da:	b002      	add	sp, #8
 800d7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	462a      	mov	r2, r5
 800d7e6:	4623      	mov	r3, r4
 800d7e8:	f7fe fde2 	bl	800c3b0 <LCD_FillRect>
 800d7ec:	f7fb ffc8 	bl	8009780 <WM__GetNextIVR>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d1f5      	bne.n	800d7e0 <GUI_ClearRect+0x48>
 800d7f4:	e7ee      	b.n	800d7d4 <GUI_ClearRect+0x3c>
 800d7f6:	bf00      	nop
 800d7f8:	20000084 	.word	0x20000084

0800d7fc <GUI_Clear>:
 800d7fc:	b510      	push	{r4, lr}
 800d7fe:	2000      	movs	r0, #0
 800d800:	4601      	mov	r1, r0
 800d802:	f000 f949 	bl	800da98 <GUI_GotoXY>
 800d806:	4804      	ldr	r0, [pc, #16]	; (800d818 <GUI_Clear+0x1c>)
 800d808:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d80c:	4601      	mov	r1, r0
 800d80e:	4613      	mov	r3, r2
 800d810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d814:	f7ff bfc0 	b.w	800d798 <GUI_ClearRect>
 800d818:	ffffc001 	.word	0xffffc001

0800d81c <GUI__RegisterExit>:
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <GUI__RegisterExit+0x20>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	605a      	str	r2, [r3, #4]
 800d82c:	4b03      	ldr	r3, [pc, #12]	; (800d83c <GUI__RegisterExit+0x20>)
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	20005510 	.word	0x20005510

0800d840 <GUI__Config>:
 800d840:	b508      	push	{r3, lr}
 800d842:	4b08      	ldr	r3, [pc, #32]	; (800d864 <GUI__Config+0x24>)
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	b962      	cbnz	r2, 800d862 <GUI__Config+0x22>
 800d848:	2201      	movs	r2, #1
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	f7f2 fe9a 	bl	8000584 <GUI_X_Config>
 800d850:	f7f3 f870 	bl	8000934 <LCD_X_Config>
 800d854:	4804      	ldr	r0, [pc, #16]	; (800d868 <GUI__Config+0x28>)
 800d856:	4b05      	ldr	r3, [pc, #20]	; (800d86c <GUI__Config+0x2c>)
 800d858:	6003      	str	r3, [r0, #0]
 800d85a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d85e:	f7ff bfdd 	b.w	800d81c <GUI__RegisterExit>
 800d862:	bd08      	pop	{r3, pc}
 800d864:	20005590 	.word	0x20005590
 800d868:	20005514 	.word	0x20005514
 800d86c:	0800d6b9 	.word	0x0800d6b9

0800d870 <GUI_Init>:
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4b26      	ldr	r3, [pc, #152]	; (800d910 <GUI_Init+0xa0>)
 800d878:	4a25      	ldr	r2, [pc, #148]	; (800d910 <GUI_Init+0xa0>)
 800d87a:	6812      	ldr	r2, [r2, #0]
 800d87c:	f022 0201 	bic.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	4b24      	ldr	r3, [pc, #144]	; (800d914 <GUI_Init+0xa4>)
 800d884:	2201      	movs	r2, #1
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	bf00      	nop
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <GUI_Init+0xa4>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1fb      	bne.n	800d88a <GUI_Init+0x1a>
 800d892:	4b21      	ldr	r3, [pc, #132]	; (800d918 <GUI_Init+0xa8>)
 800d894:	4a21      	ldr	r2, [pc, #132]	; (800d91c <GUI_Init+0xac>)
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	4b1f      	ldr	r3, [pc, #124]	; (800d918 <GUI_Init+0xa8>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	4b20      	ldr	r3, [pc, #128]	; (800d920 <GUI_Init+0xb0>)
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d000      	beq.n	800d8a4 <GUI_Init+0x34>
 800d8a2:	e7fe      	b.n	800d8a2 <GUI_Init+0x32>
 800d8a4:	f7ff ffcc 	bl	800d840 <GUI__Config>
 800d8a8:	4b1e      	ldr	r3, [pc, #120]	; (800d924 <GUI_Init+0xb4>)
 800d8aa:	222e      	movs	r2, #46	; 0x2e
 800d8ac:	701a      	strb	r2, [r3, #0]
 800d8ae:	f7f2 fe79 	bl	80005a4 <GUI_X_Init>
 800d8b2:	481d      	ldr	r0, [pc, #116]	; (800d928 <GUI_Init+0xb8>)
 800d8b4:	f7ff ff26 	bl	800d704 <_InitContext>
 800d8b8:	f7fe ff9e 	bl	800c7f8 <emWin_LCD_Init>
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	f7fe fc7f 	bl	800c1c0 <LCD_GetXSizeDisplay>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <GUI_Init+0x62>
 800d8c8:	f7fe fc80 	bl	800c1cc <LCD_GetYSizeDisplay>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d109      	bne.n	800d8e6 <GUI_Init+0x76>
 800d8d2:	f7fe fc61 	bl	800c198 <LCD_GetXSizeMax>
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	f7fe fc61 	bl	800c19e <LCD_GetYSizeMax>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f7fe fc63 	bl	800c1ac <LCD_SetDisplaySize>
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	f000 f939 	bl	800db60 <GUI_SetOrg>
 800d8ee:	f7fc fa15 	bl	8009d1c <WM_Init>
 800d8f2:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <GUI_Init+0xbc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <GUI_Init+0x90>
 800d8fa:	4b0c      	ldr	r3, [pc, #48]	; (800d92c <GUI_Init+0xbc>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4798      	blx	r3
 800d900:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <GUI_Init+0xc0>)
 800d902:	2201      	movs	r2, #1
 800d904:	701a      	strb	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd90      	pop	{r4, r7, pc}
 800d910:	e0002000 	.word	0xe0002000
 800d914:	40023008 	.word	0x40023008
 800d918:	40023000 	.word	0x40023000
 800d91c:	f407a5c2 	.word	0xf407a5c2
 800d920:	b5e8b5cd 	.word	0xb5e8b5cd
 800d924:	20005688 	.word	0x20005688
 800d928:	20005520 	.word	0x20005520
 800d92c:	200056ac 	.word	0x200056ac
 800d930:	200056b4 	.word	0x200056b4

0800d934 <GUI_CalcColorDist>:
 800d934:	b2cb      	uxtb	r3, r1
 800d936:	b2c2      	uxtb	r2, r0
 800d938:	1ad2      	subs	r2, r2, r3
 800d93a:	b292      	uxth	r2, r2
 800d93c:	b293      	uxth	r3, r2
 800d93e:	b530      	push	{r4, r5, lr}
 800d940:	041c      	lsls	r4, r3, #16
 800d942:	bf48      	it	mi
 800d944:	4253      	negmi	r3, r2
 800d946:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d94a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d94e:	ebc5 0202 	rsb	r2, r5, r2
 800d952:	bf48      	it	mi
 800d954:	b29b      	uxthmi	r3, r3
 800d956:	b292      	uxth	r2, r2
 800d958:	0c09      	lsrs	r1, r1, #16
 800d95a:	fb13 f403 	smulbb	r4, r3, r3
 800d95e:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800d962:	b293      	uxth	r3, r2
 800d964:	041d      	lsls	r5, r3, #16
 800d966:	b289      	uxth	r1, r1
 800d968:	b288      	uxth	r0, r1
 800d96a:	bf44      	itt	mi
 800d96c:	4253      	negmi	r3, r2
 800d96e:	b29b      	uxthmi	r3, r3
 800d970:	0402      	lsls	r2, r0, #16
 800d972:	bf48      	it	mi
 800d974:	4248      	negmi	r0, r1
 800d976:	fb13 4303 	smlabb	r3, r3, r3, r4
 800d97a:	bf48      	it	mi
 800d97c:	b280      	uxthmi	r0, r0
 800d97e:	fb00 3000 	mla	r0, r0, r0, r3
 800d982:	bd30      	pop	{r4, r5, pc}

0800d984 <GUI_GetClientRect>:
 800d984:	b108      	cbz	r0, 800d98a <GUI_GetClientRect+0x6>
 800d986:	f7fa bd59 	b.w	800843c <WM_GetClientRect>
 800d98a:	4770      	bx	lr

0800d98c <GUI_GetBkColor>:
 800d98c:	b508      	push	{r3, lr}
 800d98e:	f003 fd89 	bl	80114a4 <LCD_GetBkColorIndex>
 800d992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d996:	f7fe bf93 	b.w	800c8c0 <LCD_Index2Color>

0800d99a <GUI_GetColor>:
 800d99a:	b508      	push	{r3, lr}
 800d99c:	f003 fd8a 	bl	80114b4 <LCD_GetColorIndex>
 800d9a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9a4:	f7fe bf8c 	b.w	800c8c0 <LCD_Index2Color>

0800d9a8 <GUI_GetOrg>:
 800d9a8:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <GUI_GetOrg+0x14>)
 800d9aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9ae:	6003      	str	r3, [r0, #0]
 800d9b0:	4b03      	ldr	r3, [pc, #12]	; (800d9c0 <GUI_GetOrg+0x18>)
 800d9b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9b6:	600b      	str	r3, [r1, #0]
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	200056a8 	.word	0x200056a8
 800d9c0:	20005698 	.word	0x20005698

0800d9c4 <GUI_GetYSizeOfFont>:
 800d9c4:	7e02      	ldrb	r2, [r0, #24]
 800d9c6:	7ec0      	ldrb	r0, [r0, #27]
 800d9c8:	4350      	muls	r0, r2
 800d9ca:	4770      	bx	lr

0800d9cc <GUI_MergeRect>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	b338      	cbz	r0, 800da20 <GUI_MergeRect+0x54>
 800d9d0:	b309      	cbz	r1, 800da16 <GUI_MergeRect+0x4a>
 800d9d2:	b30a      	cbz	r2, 800da18 <GUI_MergeRect+0x4c>
 800d9d4:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d9d8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d9dc:	429c      	cmp	r4, r3
 800d9de:	bfb8      	it	lt
 800d9e0:	4623      	movlt	r3, r4
 800d9e2:	8003      	strh	r3, [r0, #0]
 800d9e4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800d9e8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d9ec:	429c      	cmp	r4, r3
 800d9ee:	bfb8      	it	lt
 800d9f0:	4623      	movlt	r3, r4
 800d9f2:	8043      	strh	r3, [r0, #2]
 800d9f4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800d9f8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d9fc:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800da00:	429c      	cmp	r4, r3
 800da02:	bfa8      	it	ge
 800da04:	4623      	movge	r3, r4
 800da06:	8083      	strh	r3, [r0, #4]
 800da08:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800da0c:	4299      	cmp	r1, r3
 800da0e:	bfa8      	it	ge
 800da10:	460b      	movge	r3, r1
 800da12:	80c3      	strh	r3, [r0, #6]
 800da14:	bd10      	pop	{r4, pc}
 800da16:	4611      	mov	r1, r2
 800da18:	680b      	ldr	r3, [r1, #0]
 800da1a:	6003      	str	r3, [r0, #0]
 800da1c:	684b      	ldr	r3, [r1, #4]
 800da1e:	6043      	str	r3, [r0, #4]
 800da20:	bd10      	pop	{r4, pc}

0800da22 <GUI_MoveRect>:
 800da22:	b168      	cbz	r0, 800da40 <GUI_MoveRect+0x1e>
 800da24:	8803      	ldrh	r3, [r0, #0]
 800da26:	b289      	uxth	r1, r1
 800da28:	440b      	add	r3, r1
 800da2a:	8003      	strh	r3, [r0, #0]
 800da2c:	8883      	ldrh	r3, [r0, #4]
 800da2e:	4419      	add	r1, r3
 800da30:	8843      	ldrh	r3, [r0, #2]
 800da32:	8081      	strh	r1, [r0, #4]
 800da34:	b292      	uxth	r2, r2
 800da36:	4413      	add	r3, r2
 800da38:	8043      	strh	r3, [r0, #2]
 800da3a:	88c3      	ldrh	r3, [r0, #6]
 800da3c:	441a      	add	r2, r3
 800da3e:	80c2      	strh	r2, [r0, #6]
 800da40:	4770      	bx	lr
	...

0800da44 <GUI_Exec1>:
 800da44:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <GUI_Exec1+0x34>)
 800da46:	b510      	push	{r4, lr}
 800da48:	681c      	ldr	r4, [r3, #0]
 800da4a:	b11c      	cbz	r4, 800da54 <GUI_Exec1+0x10>
 800da4c:	47a0      	blx	r4
 800da4e:	1c04      	adds	r4, r0, #0
 800da50:	bf18      	it	ne
 800da52:	2401      	movne	r4, #1
 800da54:	f7fc f8bc 	bl	8009bd0 <WM_Exec>
 800da58:	4b08      	ldr	r3, [pc, #32]	; (800da7c <GUI_Exec1+0x38>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2800      	cmp	r0, #0
 800da5e:	bf18      	it	ne
 800da60:	2401      	movne	r4, #1
 800da62:	b11b      	cbz	r3, 800da6c <GUI_Exec1+0x28>
 800da64:	4798      	blx	r3
 800da66:	2800      	cmp	r0, #0
 800da68:	bf18      	it	ne
 800da6a:	2401      	movne	r4, #1
 800da6c:	4b04      	ldr	r3, [pc, #16]	; (800da80 <GUI_Exec1+0x3c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	b103      	cbz	r3, 800da74 <GUI_Exec1+0x30>
 800da72:	4798      	blx	r3
 800da74:	4620      	mov	r0, r4
 800da76:	bd10      	pop	{r4, pc}
 800da78:	200056a4 	.word	0x200056a4
 800da7c:	200056d0 	.word	0x200056d0
 800da80:	200056c8 	.word	0x200056c8

0800da84 <GUI_Exec>:
 800da84:	b510      	push	{r4, lr}
 800da86:	2400      	movs	r4, #0
 800da88:	f7ff ffdc 	bl	800da44 <GUI_Exec1>
 800da8c:	b108      	cbz	r0, 800da92 <GUI_Exec+0xe>
 800da8e:	2401      	movs	r4, #1
 800da90:	e7fa      	b.n	800da88 <GUI_Exec+0x4>
 800da92:	4620      	mov	r0, r4
 800da94:	bd10      	pop	{r4, pc}
	...

0800da98 <GUI_GotoXY>:
 800da98:	4b02      	ldr	r3, [pc, #8]	; (800daa4 <GUI_GotoXY+0xc>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	8458      	strh	r0, [r3, #34]	; 0x22
 800da9e:	8499      	strh	r1, [r3, #36]	; 0x24
 800daa0:	2000      	movs	r0, #0
 800daa2:	4770      	bx	lr
 800daa4:	20000084 	.word	0x20000084

0800daa8 <GUI_SetPenSize>:
 800daa8:	4b02      	ldr	r3, [pc, #8]	; (800dab4 <GUI_SetPenSize+0xc>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	7e1a      	ldrb	r2, [r3, #24]
 800daae:	7618      	strb	r0, [r3, #24]
 800dab0:	4610      	mov	r0, r2
 800dab2:	4770      	bx	lr
 800dab4:	20000084 	.word	0x20000084

0800dab8 <GUI_RectsIntersect>:
 800dab8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dabc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	dc14      	bgt.n	800daee <GUI_RectsIntersect+0x36>
 800dac4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800dac8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800dacc:	429a      	cmp	r2, r3
 800dace:	dc0e      	bgt.n	800daee <GUI_RectsIntersect+0x36>
 800dad0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dad4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	dc08      	bgt.n	800daee <GUI_RectsIntersect+0x36>
 800dadc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dae0:	f9b1 2000 	ldrsh.w	r2, [r1]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	bfcc      	ite	gt
 800dae8:	2000      	movgt	r0, #0
 800daea:	2001      	movle	r0, #1
 800daec:	4770      	bx	lr
 800daee:	2000      	movs	r0, #0
 800daf0:	4770      	bx	lr
	...

0800daf4 <GUI_SaveContext_W>:
 800daf4:	b508      	push	{r3, lr}
 800daf6:	4b03      	ldr	r3, [pc, #12]	; (800db04 <GUI_SaveContext_W+0x10>)
 800daf8:	2270      	movs	r2, #112	; 0x70
 800dafa:	6819      	ldr	r1, [r3, #0]
 800dafc:	f004 fc02 	bl	8012304 <memcpy>
 800db00:	bd08      	pop	{r3, pc}
 800db02:	bf00      	nop
 800db04:	20000084 	.word	0x20000084

0800db08 <GUI_RestoreContext>:
 800db08:	b508      	push	{r3, lr}
 800db0a:	4b03      	ldr	r3, [pc, #12]	; (800db18 <GUI_RestoreContext+0x10>)
 800db0c:	4601      	mov	r1, r0
 800db0e:	2270      	movs	r2, #112	; 0x70
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f004 fbf7 	bl	8012304 <memcpy>
 800db16:	bd08      	pop	{r3, pc}
 800db18:	20000084 	.word	0x20000084

0800db1c <GUI_SelectLCD>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	f003 fb7d 	bl	801121c <LCD_SelectLCD>
 800db22:	f7fe fa47 	bl	800bfb4 <LCD_UpdateColorIndices>
 800db26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db2a:	f7fc b88d 	b.w	8009c48 <WM_Activate>

0800db2e <GUI_SetBkColor>:
 800db2e:	f7fe bf0f 	b.w	800c950 <LCD_SetBkColor>

0800db32 <GUI_SetColor>:
 800db32:	f7fe bf15 	b.w	800c960 <LCD_SetColor>

0800db36 <GUI_SetDrawMode>:
 800db36:	f7fe bbb9 	b.w	800c2ac <LCD_SetDrawMode>
	...

0800db3c <GUI_SetFont>:
 800db3c:	4b03      	ldr	r3, [pc, #12]	; (800db4c <GUI_SetFont+0x10>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	69d9      	ldr	r1, [r3, #28]
 800db42:	b100      	cbz	r0, 800db46 <GUI_SetFont+0xa>
 800db44:	61d8      	str	r0, [r3, #28]
 800db46:	4608      	mov	r0, r1
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	20000084 	.word	0x20000084

0800db50 <GUI_SetLineStyle>:
 800db50:	4b02      	ldr	r3, [pc, #8]	; (800db5c <GUI_SetLineStyle+0xc>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	7e9a      	ldrb	r2, [r3, #26]
 800db56:	7698      	strb	r0, [r3, #26]
 800db58:	4610      	mov	r0, r2
 800db5a:	4770      	bx	lr
 800db5c:	20000084 	.word	0x20000084

0800db60 <GUI_SetOrg>:
 800db60:	460a      	mov	r2, r1
 800db62:	4908      	ldr	r1, [pc, #32]	; (800db84 <GUI_SetOrg+0x24>)
 800db64:	b510      	push	{r4, lr}
 800db66:	8008      	strh	r0, [r1, #0]
 800db68:	4907      	ldr	r1, [pc, #28]	; (800db88 <GUI_SetOrg+0x28>)
 800db6a:	800a      	strh	r2, [r1, #0]
 800db6c:	4907      	ldr	r1, [pc, #28]	; (800db8c <GUI_SetOrg+0x2c>)
 800db6e:	6809      	ldr	r1, [r1, #0]
 800db70:	4603      	mov	r3, r0
 800db72:	7c48      	ldrb	r0, [r1, #17]
 800db74:	4906      	ldr	r1, [pc, #24]	; (800db90 <GUI_SetOrg+0x30>)
 800db76:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800db7a:	68c1      	ldr	r1, [r0, #12]
 800db7c:	6a0c      	ldr	r4, [r1, #32]
 800db7e:	4619      	mov	r1, r3
 800db80:	47a0      	blx	r4
 800db82:	bd10      	pop	{r4, pc}
 800db84:	200056a8 	.word	0x200056a8
 800db88:	20005698 	.word	0x20005698
 800db8c:	20000084 	.word	0x20000084
 800db90:	200056d4 	.word	0x200056d4

0800db94 <GUI_SetTextAlign>:
 800db94:	4b03      	ldr	r3, [pc, #12]	; (800dba4 <GUI_SetTextAlign+0x10>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800db9c:	8598      	strh	r0, [r3, #44]	; 0x2c
 800db9e:	4610      	mov	r0, r2
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	20000084 	.word	0x20000084

0800dba8 <GUI_SetTextMode>:
 800dba8:	4b03      	ldr	r3, [pc, #12]	; (800dbb8 <GUI_SetTextMode+0x10>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800dbb0:	8558      	strh	r0, [r3, #42]	; 0x2a
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20000084 	.word	0x20000084

0800dbbc <GL_SetDefault>:
 800dbbc:	b508      	push	{r3, lr}
 800dbbe:	4b0e      	ldr	r3, [pc, #56]	; (800dbf8 <GL_SetDefault+0x3c>)
 800dbc0:	6818      	ldr	r0, [r3, #0]
 800dbc2:	f7fe fec5 	bl	800c950 <LCD_SetBkColor>
 800dbc6:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <GL_SetDefault+0x40>)
 800dbc8:	6818      	ldr	r0, [r3, #0]
 800dbca:	f7fe fec9 	bl	800c960 <LCD_SetColor>
 800dbce:	2001      	movs	r0, #1
 800dbd0:	f7ff ff6a 	bl	800daa8 <GUI_SetPenSize>
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	f7ff ffdd 	bl	800db94 <GUI_SetTextAlign>
 800dbda:	2000      	movs	r0, #0
 800dbdc:	f7ff ffe4 	bl	800dba8 <GUI_SetTextMode>
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	f7ff ffa8 	bl	800db36 <GUI_SetDrawMode>
 800dbe6:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <GL_SetDefault+0x44>)
 800dbe8:	6818      	ldr	r0, [r3, #0]
 800dbea:	f7ff ffa7 	bl	800db3c <GUI_SetFont>
 800dbee:	2000      	movs	r0, #0
 800dbf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dbf4:	f7ff bfac 	b.w	800db50 <GUI_SetLineStyle>
 800dbf8:	2000551c 	.word	0x2000551c
 800dbfc:	2000008c 	.word	0x2000008c
 800dc00:	20000088 	.word	0x20000088

0800dc04 <GUIPROP__FindChar>:
 800dc04:	b138      	cbz	r0, 800dc16 <GUIPROP__FindChar+0x12>
 800dc06:	8803      	ldrh	r3, [r0, #0]
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	d802      	bhi.n	800dc12 <GUIPROP__FindChar+0xe>
 800dc0c:	8843      	ldrh	r3, [r0, #2]
 800dc0e:	428b      	cmp	r3, r1
 800dc10:	d201      	bcs.n	800dc16 <GUIPROP__FindChar+0x12>
 800dc12:	6880      	ldr	r0, [r0, #8]
 800dc14:	e7f6      	b.n	800dc04 <GUIPROP__FindChar>
 800dc16:	4770      	bx	lr

0800dc18 <GUIPROP_DispChar>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	4c38      	ldr	r4, [pc, #224]	; (800dd00 <GUIPROP_DispChar+0xe8>)
 800dc1e:	6823      	ldr	r3, [r4, #0]
 800dc20:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	4605      	mov	r5, r0
 800dc28:	b089      	sub	sp, #36	; 0x24
 800dc2a:	69d8      	ldr	r0, [r3, #28]
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	f7ff ffe9 	bl	800dc04 <GUIPROP__FindChar>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d061      	beq.n	800dcfa <GUIPROP_DispChar+0xe2>
 800dc36:	f8b0 8000 	ldrh.w	r8, [r0]
 800dc3a:	6847      	ldr	r7, [r0, #4]
 800dc3c:	ebc8 0805 	rsb	r8, r8, r5
 800dc40:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800dc44:	4648      	mov	r0, r9
 800dc46:	f896 b002 	ldrb.w	fp, [r6, #2]
 800dc4a:	f7fe fb2f 	bl	800c2ac <LCD_SetDrawMode>
 800dc4e:	6825      	ldr	r5, [r4, #0]
 800dc50:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800dc54:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800dc58:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800dc5c:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800dc60:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800dc64:	9306      	str	r3, [sp, #24]
 800dc66:	4682      	mov	sl, r0
 800dc68:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800dc6c:	f8cd c000 	str.w	ip, [sp]
 800dc70:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800dc74:	f8cd e004 	str.w	lr, [sp, #4]
 800dc78:	f04f 0e01 	mov.w	lr, #1
 800dc7c:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc80:	f8cd e008 	str.w	lr, [sp, #8]
 800dc84:	6873      	ldr	r3, [r6, #4]
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800dc8a:	9b06      	ldr	r3, [sp, #24]
 800dc8c:	9505      	str	r5, [sp, #20]
 800dc8e:	f7fe fc97 	bl	800c5c0 <LCD_DrawBitmap>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	69da      	ldr	r2, [r3, #28]
 800dc96:	f892 b019 	ldrb.w	fp, [r2, #25]
 800dc9a:	7e11      	ldrb	r1, [r2, #24]
 800dc9c:	458b      	cmp	fp, r1
 800dc9e:	d920      	bls.n	800dce2 <GUIPROP_DispChar+0xca>
 800dca0:	f1b9 0f02 	cmp.w	r9, #2
 800dca4:	7ed5      	ldrb	r5, [r2, #27]
 800dca6:	d01c      	beq.n	800dce2 <GUIPROP_DispChar+0xca>
 800dca8:	9107      	str	r1, [sp, #28]
 800dcaa:	f7ff fe76 	bl	800d99a <GUI_GetColor>
 800dcae:	4681      	mov	r9, r0
 800dcb0:	f7ff fe6c 	bl	800d98c <GUI_GetBkColor>
 800dcb4:	f7ff ff3d 	bl	800db32 <GUI_SetColor>
 800dcb8:	6824      	ldr	r4, [r4, #0]
 800dcba:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800dcbe:	69e2      	ldr	r2, [r4, #28]
 800dcc0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800dcc4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800dcc8:	7ed2      	ldrb	r2, [r2, #27]
 800dcca:	9907      	ldr	r1, [sp, #28]
 800dccc:	fb07 0202 	mla	r2, r7, r2, r0
 800dcd0:	fb01 3105 	mla	r1, r1, r5, r3
 800dcd4:	fb0b 3305 	mla	r3, fp, r5, r3
 800dcd8:	f7fe fb6a 	bl	800c3b0 <LCD_FillRect>
 800dcdc:	4648      	mov	r0, r9
 800dcde:	f7ff ff28 	bl	800db32 <GUI_SetColor>
 800dce2:	4650      	mov	r0, sl
 800dce4:	f7fe fae2 	bl	800c2ac <LCD_SetDrawMode>
 800dce8:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <GUIPROP_DispChar+0xe8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69da      	ldr	r2, [r3, #28]
 800dcee:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800dcf0:	7e90      	ldrb	r0, [r2, #26]
 800dcf2:	7872      	ldrb	r2, [r6, #1]
 800dcf4:	fb00 1202 	mla	r2, r0, r2, r1
 800dcf8:	845a      	strh	r2, [r3, #34]	; 0x22
 800dcfa:	b009      	add	sp, #36	; 0x24
 800dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd00:	20000084 	.word	0x20000084

0800dd04 <GUIPROP_GetCharDistX>:
 800dd04:	4b0d      	ldr	r3, [pc, #52]	; (800dd3c <GUIPROP_GetCharDistX+0x38>)
 800dd06:	b570      	push	{r4, r5, r6, lr}
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	69dd      	ldr	r5, [r3, #28]
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	69e8      	ldr	r0, [r5, #28]
 800dd12:	4631      	mov	r1, r6
 800dd14:	f7ff ff76 	bl	800dc04 <GUIPROP__FindChar>
 800dd18:	b170      	cbz	r0, 800dd38 <GUIPROP_GetCharDistX+0x34>
 800dd1a:	8803      	ldrh	r3, [r0, #0]
 800dd1c:	6842      	ldr	r2, [r0, #4]
 800dd1e:	1af6      	subs	r6, r6, r3
 800dd20:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800dd24:	7858      	ldrb	r0, [r3, #1]
 800dd26:	7eab      	ldrb	r3, [r5, #26]
 800dd28:	fb10 f003 	smulbb	r0, r0, r3
 800dd2c:	b124      	cbz	r4, 800dd38 <GUIPROP_GetCharDistX+0x34>
 800dd2e:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800dd32:	fb12 f303 	smulbb	r3, r2, r3
 800dd36:	6023      	str	r3, [r4, #0]
 800dd38:	bd70      	pop	{r4, r5, r6, pc}
 800dd3a:	bf00      	nop
 800dd3c:	20000084 	.word	0x20000084

0800dd40 <GUIPROP_GetFontInfo>:
 800dd40:	2301      	movs	r3, #1
 800dd42:	800b      	strh	r3, [r1, #0]
 800dd44:	4770      	bx	lr

0800dd46 <GUIPROP_IsInFont>:
 800dd46:	b508      	push	{r3, lr}
 800dd48:	69c0      	ldr	r0, [r0, #28]
 800dd4a:	f7ff ff5b 	bl	800dc04 <GUIPROP__FindChar>
 800dd4e:	3000      	adds	r0, #0
 800dd50:	bf18      	it	ne
 800dd52:	2001      	movne	r0, #1
 800dd54:	bd08      	pop	{r3, pc}
	...

0800dd58 <GUIMONO_DispChar>:
 800dd58:	4b52      	ldr	r3, [pc, #328]	; (800dea4 <GUIMONO_DispChar+0x14c>)
 800dd5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	69d9      	ldr	r1, [r3, #28]
 800dd62:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800dd64:	69cc      	ldr	r4, [r1, #28]
 800dd66:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800dd68:	89a2      	ldrh	r2, [r4, #12]
 800dd6a:	4290      	cmp	r0, r2
 800dd6c:	b08b      	sub	sp, #44	; 0x2c
 800dd6e:	d308      	bcc.n	800dd82 <GUIMONO_DispChar+0x2a>
 800dd70:	89e6      	ldrh	r6, [r4, #14]
 800dd72:	4286      	cmp	r6, r0
 800dd74:	d305      	bcc.n	800dd82 <GUIMONO_DispChar+0x2a>
 800dd76:	f8d4 9000 	ldr.w	r9, [r4]
 800dd7a:	1a82      	subs	r2, r0, r2
 800dd7c:	f04f 3bff 	mov.w	fp, #4294967295
 800dd80:	e015      	b.n	800ddae <GUIMONO_DispChar+0x56>
 800dd82:	68a2      	ldr	r2, [r4, #8]
 800dd84:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dd88:	2a00      	cmp	r2, #0
 800dd8a:	f000 8081 	beq.w	800de90 <GUIMONO_DispChar+0x138>
 800dd8e:	8816      	ldrh	r6, [r2, #0]
 800dd90:	42b0      	cmp	r0, r6
 800dd92:	d37d      	bcc.n	800de90 <GUIMONO_DispChar+0x138>
 800dd94:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800dd98:	4584      	cmp	ip, r0
 800dd9a:	d379      	bcc.n	800de90 <GUIMONO_DispChar+0x138>
 800dd9c:	6852      	ldr	r2, [r2, #4]
 800dd9e:	1b80      	subs	r0, r0, r6
 800dda0:	b280      	uxth	r0, r0
 800dda2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800dda6:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800ddaa:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800ddae:	1c50      	adds	r0, r2, #1
 800ddb0:	d06e      	beq.n	800de90 <GUIMONO_DispChar+0x138>
 800ddb2:	f891 8018 	ldrb.w	r8, [r1, #24]
 800ddb6:	7ca1      	ldrb	r1, [r4, #18]
 800ddb8:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800ddbc:	7c26      	ldrb	r6, [r4, #16]
 800ddbe:	9206      	str	r2, [sp, #24]
 800ddc0:	fb18 f101 	smulbb	r1, r8, r1
 800ddc4:	9107      	str	r1, [sp, #28]
 800ddc6:	fa0f f18a 	sxth.w	r1, sl
 800ddca:	4608      	mov	r0, r1
 800ddcc:	9108      	str	r1, [sp, #32]
 800ddce:	f7fe fa6d 	bl	800c2ac <LCD_SetDrawMode>
 800ddd2:	4934      	ldr	r1, [pc, #208]	; (800dea4 <GUIMONO_DispChar+0x14c>)
 800ddd4:	9009      	str	r0, [sp, #36]	; 0x24
 800ddd6:	680b      	ldr	r3, [r1, #0]
 800ddd8:	9a06      	ldr	r2, [sp, #24]
 800ddda:	69d9      	ldr	r1, [r3, #28]
 800dddc:	7e88      	ldrb	r0, [r1, #26]
 800ddde:	9000      	str	r0, [sp, #0]
 800dde0:	7ec9      	ldrb	r1, [r1, #27]
 800dde2:	9101      	str	r1, [sp, #4]
 800dde4:	2101      	movs	r1, #1
 800dde6:	9102      	str	r1, [sp, #8]
 800dde8:	7ca1      	ldrb	r1, [r4, #18]
 800ddea:	9103      	str	r1, [sp, #12]
 800ddec:	9907      	ldr	r1, [sp, #28]
 800ddee:	fb01 9202 	mla	r2, r1, r2, r9
 800ddf2:	9204      	str	r2, [sp, #16]
 800ddf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf6:	9305      	str	r3, [sp, #20]
 800ddf8:	b23f      	sxth	r7, r7
 800ddfa:	b22d      	sxth	r5, r5
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	4629      	mov	r1, r5
 800de00:	4632      	mov	r2, r6
 800de02:	4643      	mov	r3, r8
 800de04:	f7fe fbdc 	bl	800c5c0 <LCD_DrawBitmap>
 800de08:	f1bb 3fff 	cmp.w	fp, #4294967295
 800de0c:	d01b      	beq.n	800de46 <GUIMONO_DispChar+0xee>
 800de0e:	f04a 0002 	orr.w	r0, sl, #2
 800de12:	b200      	sxth	r0, r0
 800de14:	f7fe fa4a 	bl	800c2ac <LCD_SetDrawMode>
 800de18:	4a22      	ldr	r2, [pc, #136]	; (800dea4 <GUIMONO_DispChar+0x14c>)
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	69da      	ldr	r2, [r3, #28]
 800de1e:	7e91      	ldrb	r1, [r2, #26]
 800de20:	9100      	str	r1, [sp, #0]
 800de22:	7ed2      	ldrb	r2, [r2, #27]
 800de24:	9201      	str	r2, [sp, #4]
 800de26:	2101      	movs	r1, #1
 800de28:	9102      	str	r1, [sp, #8]
 800de2a:	9907      	ldr	r1, [sp, #28]
 800de2c:	7ca2      	ldrb	r2, [r4, #18]
 800de2e:	9203      	str	r2, [sp, #12]
 800de30:	fb01 920b 	mla	r2, r1, fp, r9
 800de34:	9204      	str	r2, [sp, #16]
 800de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	4638      	mov	r0, r7
 800de3c:	4629      	mov	r1, r5
 800de3e:	4632      	mov	r2, r6
 800de40:	4643      	mov	r3, r8
 800de42:	f7fe fbbd 	bl	800c5c0 <LCD_DrawBitmap>
 800de46:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800dea4 <GUIMONO_DispChar+0x14c>
 800de4a:	f8d8 3000 	ldr.w	r3, [r8]
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	7e5a      	ldrb	r2, [r3, #25]
 800de52:	7e1b      	ldrb	r3, [r3, #24]
 800de54:	429a      	cmp	r2, r3
 800de56:	d917      	bls.n	800de88 <GUIMONO_DispChar+0x130>
 800de58:	9a08      	ldr	r2, [sp, #32]
 800de5a:	2a02      	cmp	r2, #2
 800de5c:	d014      	beq.n	800de88 <GUIMONO_DispChar+0x130>
 800de5e:	f08a 0004 	eor.w	r0, sl, #4
 800de62:	b200      	sxth	r0, r0
 800de64:	f7fe fa22 	bl	800c2ac <LCD_SetDrawMode>
 800de68:	f8d8 3000 	ldr.w	r3, [r8]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	f893 e018 	ldrb.w	lr, [r3, #24]
 800de72:	7ed9      	ldrb	r1, [r3, #27]
 800de74:	7e9a      	ldrb	r2, [r3, #26]
 800de76:	7e5b      	ldrb	r3, [r3, #25]
 800de78:	4638      	mov	r0, r7
 800de7a:	fb0e 5101 	mla	r1, lr, r1, r5
 800de7e:	fb06 7202 	mla	r2, r6, r2, r7
 800de82:	442b      	add	r3, r5
 800de84:	f7fe fa94 	bl	800c3b0 <LCD_FillRect>
 800de88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8a:	b2d8      	uxtb	r0, r3
 800de8c:	f7fe fa0e 	bl	800c2ac <LCD_SetDrawMode>
 800de90:	4b04      	ldr	r3, [pc, #16]	; (800dea4 <GUIMONO_DispChar+0x14c>)
 800de92:	7c61      	ldrb	r1, [r4, #17]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800de98:	440a      	add	r2, r1
 800de9a:	845a      	strh	r2, [r3, #34]	; 0x22
 800de9c:	b00b      	add	sp, #44	; 0x2c
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	bf00      	nop
 800dea4:	20000084 	.word	0x20000084

0800dea8 <GUIMONO_GetCharDistX>:
 800dea8:	4b04      	ldr	r3, [pc, #16]	; (800debc <GUIMONO_GetCharDistX+0x14>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	69db      	ldr	r3, [r3, #28]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	b109      	cbz	r1, 800deb6 <GUIMONO_GetCharDistX+0xe>
 800deb2:	7c1a      	ldrb	r2, [r3, #16]
 800deb4:	600a      	str	r2, [r1, #0]
 800deb6:	7c58      	ldrb	r0, [r3, #17]
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	20000084 	.word	0x20000084

0800dec0 <GUIMONO_GetFontInfo>:
 800dec0:	2302      	movs	r3, #2
 800dec2:	800b      	strh	r3, [r1, #0]
 800dec4:	4770      	bx	lr

0800dec6 <GUIMONO_IsInFont>:
 800dec6:	69c3      	ldr	r3, [r0, #28]
 800dec8:	899a      	ldrh	r2, [r3, #12]
 800deca:	428a      	cmp	r2, r1
 800decc:	d802      	bhi.n	800ded4 <GUIMONO_IsInFont+0xe>
 800dece:	89da      	ldrh	r2, [r3, #14]
 800ded0:	428a      	cmp	r2, r1
 800ded2:	d20f      	bcs.n	800def4 <GUIMONO_IsInFont+0x2e>
 800ded4:	6898      	ldr	r0, [r3, #8]
 800ded6:	b180      	cbz	r0, 800defa <GUIMONO_IsInFont+0x34>
 800ded8:	8803      	ldrh	r3, [r0, #0]
 800deda:	4299      	cmp	r1, r3
 800dedc:	d30c      	bcc.n	800def8 <GUIMONO_IsInFont+0x32>
 800dede:	8842      	ldrh	r2, [r0, #2]
 800dee0:	428a      	cmp	r2, r1
 800dee2:	d309      	bcc.n	800def8 <GUIMONO_IsInFont+0x32>
 800dee4:	1ac9      	subs	r1, r1, r3
 800dee6:	6842      	ldr	r2, [r0, #4]
 800dee8:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800deec:	43c0      	mvns	r0, r0
 800deee:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800def2:	4770      	bx	lr
 800def4:	2001      	movs	r0, #1
 800def6:	4770      	bx	lr
 800def8:	2000      	movs	r0, #0
 800defa:	4770      	bx	lr

0800defc <_Log2VisBuffered>:
 800defc:	4770      	bx	lr
	...

0800df00 <_DispLine>:
 800df00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df02:	4615      	mov	r5, r2
 800df04:	ab02      	add	r3, sp, #8
 800df06:	4a21      	ldr	r2, [pc, #132]	; (800df8c <_DispLine+0x8c>)
 800df08:	f843 1d08 	str.w	r1, [r3, #-8]!
 800df0c:	9001      	str	r0, [sp, #4]
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	4c1f      	ldr	r4, [pc, #124]	; (800df90 <_DispLine+0x90>)
 800df12:	4669      	mov	r1, sp
 800df14:	4790      	blx	r2
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	9001      	str	r0, [sp, #4]
 800df1a:	6958      	ldr	r0, [r3, #20]
 800df1c:	b938      	cbnz	r0, 800df2e <_DispLine+0x2e>
 800df1e:	2001      	movs	r0, #1
 800df20:	f7fe fed6 	bl	800ccd0 <GUI__ManageCache>
 800df24:	6822      	ldr	r2, [r4, #0]
 800df26:	69d3      	ldr	r3, [r2, #28]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	b933      	cbnz	r3, 800df3a <_DispLine+0x3a>
 800df2c:	e023      	b.n	800df76 <_DispLine+0x76>
 800df2e:	4629      	mov	r1, r5
 800df30:	f7ff fdc2 	bl	800dab8 <GUI_RectsIntersect>
 800df34:	2800      	cmp	r0, #0
 800df36:	d1f2      	bne.n	800df1e <_DispLine+0x1e>
 800df38:	e025      	b.n	800df86 <_DispLine+0x86>
 800df3a:	4c16      	ldr	r4, [pc, #88]	; (800df94 <_DispLine+0x94>)
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	6821      	ldr	r1, [r4, #0]
 800df40:	b141      	cbz	r1, 800df54 <_DispLine+0x54>
 800df42:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800df46:	9801      	ldr	r0, [sp, #4]
 800df48:	9900      	ldr	r1, [sp, #0]
 800df4a:	4798      	blx	r3
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	4628      	mov	r0, r5
 800df50:	4798      	blx	r3
 800df52:	e015      	b.n	800df80 <_DispLine+0x80>
 800df54:	9801      	ldr	r0, [sp, #4]
 800df56:	9900      	ldr	r1, [sp, #0]
 800df58:	4798      	blx	r3
 800df5a:	e011      	b.n	800df80 <_DispLine+0x80>
 800df5c:	a801      	add	r0, sp, #4
 800df5e:	f7ff f871 	bl	800d044 <GUI_UC__GetCharCodeInc>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	69db      	ldr	r3, [r3, #28]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4605      	mov	r5, r0
 800df6a:	4798      	blx	r3
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <_DispLine+0x98>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	b10b      	cbz	r3, 800df76 <_DispLine+0x76>
 800df72:	4628      	mov	r0, r5
 800df74:	4798      	blx	r3
 800df76:	9b00      	ldr	r3, [sp, #0]
 800df78:	3b01      	subs	r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	daed      	bge.n	800df5c <_DispLine+0x5c>
 800df80:	2000      	movs	r0, #0
 800df82:	f7fe fea5 	bl	800ccd0 <GUI__ManageCache>
 800df86:	b003      	add	sp, #12
 800df88:	bd30      	pop	{r4, r5, pc}
 800df8a:	bf00      	nop
 800df8c:	20000090 	.word	0x20000090
 800df90:	20000084 	.word	0x20000084
 800df94:	200056a0 	.word	0x200056a0
 800df98:	200056b0 	.word	0x200056b0

0800df9c <GUI__GetLineNumChars>:
 800df9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df9e:	460d      	mov	r5, r1
 800dfa0:	9001      	str	r0, [sp, #4]
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	b198      	cbz	r0, 800dfce <GUI__GetLineNumChars+0x32>
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <GUI__GetLineNumChars+0x38>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	695b      	ldr	r3, [r3, #20]
 800dfae:	b10b      	cbz	r3, 800dfb4 <GUI__GetLineNumChars+0x18>
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	b90b      	cbnz	r3, 800dfb8 <GUI__GetLineNumChars+0x1c>
 800dfb4:	2400      	movs	r4, #0
 800dfb6:	e008      	b.n	800dfca <GUI__GetLineNumChars+0x2e>
 800dfb8:	4798      	blx	r3
 800dfba:	e009      	b.n	800dfd0 <GUI__GetLineNumChars+0x34>
 800dfbc:	a801      	add	r0, sp, #4
 800dfbe:	f7ff f841 	bl	800d044 <GUI_UC__GetCharCodeInc>
 800dfc2:	b120      	cbz	r0, 800dfce <GUI__GetLineNumChars+0x32>
 800dfc4:	280a      	cmp	r0, #10
 800dfc6:	d002      	beq.n	800dfce <GUI__GetLineNumChars+0x32>
 800dfc8:	3401      	adds	r4, #1
 800dfca:	42ac      	cmp	r4, r5
 800dfcc:	dbf6      	blt.n	800dfbc <GUI__GetLineNumChars+0x20>
 800dfce:	4620      	mov	r0, r4
 800dfd0:	b003      	add	sp, #12
 800dfd2:	bd30      	pop	{r4, r5, pc}
 800dfd4:	20000084 	.word	0x20000084

0800dfd8 <GUI__GetOverlap>:
 800dfd8:	b513      	push	{r0, r1, r4, lr}
 800dfda:	a902      	add	r1, sp, #8
 800dfdc:	2400      	movs	r4, #0
 800dfde:	f841 4d04 	str.w	r4, [r1, #-4]!
 800dfe2:	f000 f89f 	bl	800e124 <GUI_GetCharDistXEx>
 800dfe6:	9b01      	ldr	r3, [sp, #4]
 800dfe8:	4283      	cmp	r3, r0
 800dfea:	bfcc      	ite	gt
 800dfec:	ebc0 0003 	rsbgt	r0, r0, r3
 800dff0:	4620      	movle	r0, r4
 800dff2:	b002      	add	sp, #8
 800dff4:	bd10      	pop	{r4, pc}
	...

0800dff8 <GUI__GetLineDistX>:
 800dff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dffa:	4a15      	ldr	r2, [pc, #84]	; (800e050 <GUI__GetLineDistX+0x58>)
 800dffc:	9001      	str	r0, [sp, #4]
 800dffe:	ab02      	add	r3, sp, #8
 800e000:	6812      	ldr	r2, [r2, #0]
 800e002:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e006:	4669      	mov	r1, sp
 800e008:	4790      	blx	r2
 800e00a:	9001      	str	r0, [sp, #4]
 800e00c:	b1f0      	cbz	r0, 800e04c <GUI__GetLineDistX+0x54>
 800e00e:	4b11      	ldr	r3, [pc, #68]	; (800e054 <GUI__GetLineDistX+0x5c>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	b10b      	cbz	r3, 800e01c <GUI__GetLineDistX+0x24>
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	b913      	cbnz	r3, 800e022 <GUI__GetLineDistX+0x2a>
 800e01c:	2500      	movs	r5, #0
 800e01e:	462c      	mov	r4, r5
 800e020:	e002      	b.n	800e028 <GUI__GetLineDistX+0x30>
 800e022:	9900      	ldr	r1, [sp, #0]
 800e024:	4798      	blx	r3
 800e026:	e011      	b.n	800e04c <GUI__GetLineDistX+0x54>
 800e028:	9b00      	ldr	r3, [sp, #0]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	db07      	blt.n	800e042 <GUI__GetLineDistX+0x4a>
 800e032:	a801      	add	r0, sp, #4
 800e034:	f7ff f806 	bl	800d044 <GUI_UC__GetCharCodeInc>
 800e038:	4605      	mov	r5, r0
 800e03a:	f000 f869 	bl	800e110 <GUI_GetCharDistX>
 800e03e:	4404      	add	r4, r0
 800e040:	e7f2      	b.n	800e028 <GUI__GetLineDistX+0x30>
 800e042:	4628      	mov	r0, r5
 800e044:	f7ff ffc8 	bl	800dfd8 <GUI__GetOverlap>
 800e048:	4420      	add	r0, r4
 800e04a:	e7ff      	b.n	800e04c <GUI__GetLineDistX+0x54>
 800e04c:	b003      	add	sp, #12
 800e04e:	bd30      	pop	{r4, r5, pc}
 800e050:	20000090 	.word	0x20000090
 800e054:	20000084 	.word	0x20000084

0800e058 <GUI__DispLine>:
 800e058:	4b27      	ldr	r3, [pc, #156]	; (800e0f8 <GUI__DispLine+0xa0>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e05e:	4605      	mov	r5, r0
 800e060:	460c      	mov	r4, r1
 800e062:	b163      	cbz	r3, 800e07e <GUI__DispLine+0x26>
 800e064:	2000      	movs	r0, #0
 800e066:	f7fb fc4d 	bl	8009904 <WM__InitIVRSearch>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d041      	beq.n	800e0f2 <GUI__DispLine+0x9a>
 800e06e:	4628      	mov	r0, r5
 800e070:	4621      	mov	r1, r4
 800e072:	466a      	mov	r2, sp
 800e074:	f7ff ff44 	bl	800df00 <_DispLine>
 800e078:	f7fb fb82 	bl	8009780 <WM__GetNextIVR>
 800e07c:	e7f5      	b.n	800e06a <GUI__DispLine+0x12>
 800e07e:	6810      	ldr	r0, [r2, #0]
 800e080:	6851      	ldr	r1, [r2, #4]
 800e082:	4e1e      	ldr	r6, [pc, #120]	; (800e0fc <GUI__DispLine+0xa4>)
 800e084:	466b      	mov	r3, sp
 800e086:	c303      	stmia	r3!, {r0, r1}
 800e088:	6833      	ldr	r3, [r6, #0]
 800e08a:	f8bd 1000 	ldrh.w	r1, [sp]
 800e08e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800e092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e096:	4411      	add	r1, r2
 800e098:	f8ad 1000 	strh.w	r1, [sp]
 800e09c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e0a0:	4419      	add	r1, r3
 800e0a2:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e0a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e0aa:	440a      	add	r2, r1
 800e0ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e0b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e0b4:	4668      	mov	r0, sp
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e0bc:	f7fb fc22 	bl	8009904 <WM__InitIVRSearch>
 800e0c0:	6833      	ldr	r3, [r6, #0]
 800e0c2:	b940      	cbnz	r0, 800e0d6 <GUI__DispLine+0x7e>
 800e0c4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e0c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0c8:	1a8a      	subs	r2, r1, r2
 800e0ca:	845a      	strh	r2, [r3, #34]	; 0x22
 800e0cc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d0:	1a8a      	subs	r2, r1, r2
 800e0d2:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0d4:	e00d      	b.n	800e0f2 <GUI__DispLine+0x9a>
 800e0d6:	f8bd 2000 	ldrh.w	r2, [sp]
 800e0da:	845a      	strh	r2, [r3, #34]	; 0x22
 800e0dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e0e0:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	466a      	mov	r2, sp
 800e0e8:	f7ff ff0a 	bl	800df00 <_DispLine>
 800e0ec:	f7fb fb48 	bl	8009780 <WM__GetNextIVR>
 800e0f0:	e7e6      	b.n	800e0c0 <GUI__DispLine+0x68>
 800e0f2:	b002      	add	sp, #8
 800e0f4:	bd70      	pop	{r4, r5, r6, pc}
 800e0f6:	bf00      	nop
 800e0f8:	2000568c 	.word	0x2000568c
 800e0fc:	20000084 	.word	0x20000084

0800e100 <GUI_GetFontDistY>:
 800e100:	4b02      	ldr	r3, [pc, #8]	; (800e10c <GUI_GetFontDistY+0xc>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	7e58      	ldrb	r0, [r3, #25]
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	20000084 	.word	0x20000084

0800e110 <GUI_GetCharDistX>:
 800e110:	b508      	push	{r3, lr}
 800e112:	4b03      	ldr	r3, [pc, #12]	; (800e120 <GUI_GetCharDistX+0x10>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	2100      	movs	r1, #0
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	4798      	blx	r3
 800e11e:	bd08      	pop	{r3, pc}
 800e120:	20000084 	.word	0x20000084

0800e124 <GUI_GetCharDistXEx>:
 800e124:	b508      	push	{r3, lr}
 800e126:	4b03      	ldr	r3, [pc, #12]	; (800e134 <GUI_GetCharDistXEx+0x10>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	69db      	ldr	r3, [r3, #28]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	4798      	blx	r3
 800e130:	bd08      	pop	{r3, pc}
 800e132:	bf00      	nop
 800e134:	20000084 	.word	0x20000084

0800e138 <_GetClipParam>:
 800e138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e13a:	4f33      	ldr	r7, [pc, #204]	; (800e208 <_GetClipParam+0xd0>)
 800e13c:	9c07      	ldr	r4, [sp, #28]
 800e13e:	683f      	ldr	r7, [r7, #0]
 800e140:	9e05      	ldr	r6, [sp, #20]
 800e142:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 800e146:	9d06      	ldr	r5, [sp, #24]
 800e148:	ebc0 0c0c 	rsb	ip, r0, ip
 800e14c:	f1bc 0f00 	cmp.w	ip, #0
 800e150:	bfc8      	it	gt
 800e152:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 800e156:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 800e15a:	ebc1 0c0c 	rsb	ip, r1, ip
 800e15e:	f1bc 0f00 	cmp.w	ip, #0
 800e162:	bfc8      	it	gt
 800e164:	f8c4 c010 	strgt.w	ip, [r4, #16]
 800e168:	4410      	add	r0, r2
 800e16a:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 800e16e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e172:	3801      	subs	r0, #1
 800e174:	4419      	add	r1, r3
 800e176:	ebcc 0000 	rsb	r0, ip, r0
 800e17a:	3901      	subs	r1, #1
 800e17c:	2800      	cmp	r0, #0
 800e17e:	ebc2 0101 	rsb	r1, r2, r1
 800e182:	bfc8      	it	gt
 800e184:	60a0      	strgt	r0, [r4, #8]
 800e186:	2900      	cmp	r1, #0
 800e188:	bfc8      	it	gt
 800e18a:	6161      	strgt	r1, [r4, #20]
 800e18c:	2e08      	cmp	r6, #8
 800e18e:	d024      	beq.n	800e1da <_GetClipParam+0xa2>
 800e190:	dc04      	bgt.n	800e19c <_GetClipParam+0x64>
 800e192:	2e01      	cmp	r6, #1
 800e194:	d00f      	beq.n	800e1b6 <_GetClipParam+0x7e>
 800e196:	2e04      	cmp	r6, #4
 800e198:	d016      	beq.n	800e1c8 <_GetClipParam+0x90>
 800e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e19c:	2e18      	cmp	r6, #24
 800e19e:	d021      	beq.n	800e1e4 <_GetClipParam+0xac>
 800e1a0:	2e20      	cmp	r6, #32
 800e1a2:	d028      	beq.n	800e1f6 <_GetClipParam+0xbe>
 800e1a4:	2e10      	cmp	r6, #16
 800e1a6:	d12e      	bne.n	800e206 <_GetClipParam+0xce>
 800e1a8:	68e3      	ldr	r3, [r4, #12]
 800e1aa:	68a2      	ldr	r2, [r4, #8]
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	6023      	str	r3, [r4, #0]
 800e1b0:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800e1b4:	e025      	b.n	800e202 <_GetClipParam+0xca>
 800e1b6:	68e3      	ldr	r3, [r4, #12]
 800e1b8:	10db      	asrs	r3, r3, #3
 800e1ba:	00da      	lsls	r2, r3, #3
 800e1bc:	60e2      	str	r2, [r4, #12]
 800e1be:	68a2      	ldr	r2, [r4, #8]
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 800e1c6:	e01c      	b.n	800e202 <_GetClipParam+0xca>
 800e1c8:	68e3      	ldr	r3, [r4, #12]
 800e1ca:	105b      	asrs	r3, r3, #1
 800e1cc:	005a      	lsls	r2, r3, #1
 800e1ce:	60e2      	str	r2, [r4, #12]
 800e1d0:	68a2      	ldr	r2, [r4, #8]
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 800e1d8:	e013      	b.n	800e202 <_GetClipParam+0xca>
 800e1da:	68a2      	ldr	r2, [r4, #8]
 800e1dc:	68e3      	ldr	r3, [r4, #12]
 800e1de:	6023      	str	r3, [r4, #0]
 800e1e0:	1aad      	subs	r5, r5, r2
 800e1e2:	e00e      	b.n	800e202 <_GetClipParam+0xca>
 800e1e4:	68e3      	ldr	r3, [r4, #12]
 800e1e6:	68a2      	ldr	r2, [r4, #8]
 800e1e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1ec:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	4415      	add	r5, r2
 800e1f4:	e005      	b.n	800e202 <_GetClipParam+0xca>
 800e1f6:	68e3      	ldr	r3, [r4, #12]
 800e1f8:	68a2      	ldr	r2, [r4, #8]
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 800e202:	1aeb      	subs	r3, r5, r3
 800e204:	6063      	str	r3, [r4, #4]
 800e206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e208:	20000084 	.word	0x20000084

0800e20c <_GetBitfieldsPara>:
 800e20c:	2300      	movs	r3, #0
 800e20e:	600b      	str	r3, [r1, #0]
 800e210:	07c3      	lsls	r3, r0, #31
 800e212:	d403      	bmi.n	800e21c <_GetBitfieldsPara+0x10>
 800e214:	680b      	ldr	r3, [r1, #0]
 800e216:	0840      	lsrs	r0, r0, #1
 800e218:	3301      	adds	r3, #1
 800e21a:	e7f8      	b.n	800e20e <_GetBitfieldsPara+0x2>
 800e21c:	2300      	movs	r3, #0
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	07c3      	lsls	r3, r0, #31
 800e222:	d503      	bpl.n	800e22c <_GetBitfieldsPara+0x20>
 800e224:	6813      	ldr	r3, [r2, #0]
 800e226:	0840      	lsrs	r0, r0, #1
 800e228:	3301      	adds	r3, #1
 800e22a:	e7f8      	b.n	800e21e <_GetBitfieldsPara+0x12>
 800e22c:	4770      	bx	lr

0800e22e <_DrawLine_RGB>:
 800e22e:	6983      	ldr	r3, [r0, #24]
 800e230:	b513      	push	{r0, r1, r4, lr}
 800e232:	4604      	mov	r4, r0
 800e234:	b1c3      	cbz	r3, 800e268 <_DrawLine_RGB+0x3a>
 800e236:	2300      	movs	r3, #0
 800e238:	6063      	str	r3, [r4, #4]
 800e23a:	6863      	ldr	r3, [r4, #4]
 800e23c:	68e2      	ldr	r2, [r4, #12]
 800e23e:	4293      	cmp	r3, r2
 800e240:	da2b      	bge.n	800e29a <_DrawLine_RGB+0x6c>
 800e242:	6921      	ldr	r1, [r4, #16]
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	a802      	add	r0, sp, #8
 800e248:	fb01 2303 	mla	r3, r1, r3, r2
 800e24c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e250:	f7fe fc28 	bl	800caa4 <GUI__Read32>
 800e254:	69a3      	ldr	r3, [r4, #24]
 800e256:	4798      	blx	r3
 800e258:	6963      	ldr	r3, [r4, #20]
 800e25a:	4798      	blx	r3
 800e25c:	69e3      	ldr	r3, [r4, #28]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4798      	blx	r3
 800e262:	6863      	ldr	r3, [r4, #4]
 800e264:	3301      	adds	r3, #1
 800e266:	e7e7      	b.n	800e238 <_DrawLine_RGB+0xa>
 800e268:	6063      	str	r3, [r4, #4]
 800e26a:	6863      	ldr	r3, [r4, #4]
 800e26c:	68e2      	ldr	r2, [r4, #12]
 800e26e:	4293      	cmp	r3, r2
 800e270:	da13      	bge.n	800e29a <_DrawLine_RGB+0x6c>
 800e272:	6922      	ldr	r2, [r4, #16]
 800e274:	6821      	ldr	r1, [r4, #0]
 800e276:	435a      	muls	r2, r3
 800e278:	188b      	adds	r3, r1, r2
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	7858      	ldrb	r0, [r3, #1]
 800e27e:	5c8a      	ldrb	r2, [r1, r2]
 800e280:	0200      	lsls	r0, r0, #8
 800e282:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e286:	789a      	ldrb	r2, [r3, #2]
 800e288:	6963      	ldr	r3, [r4, #20]
 800e28a:	4310      	orrs	r0, r2
 800e28c:	4798      	blx	r3
 800e28e:	69e3      	ldr	r3, [r4, #28]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	4798      	blx	r3
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	3301      	adds	r3, #1
 800e298:	e7e6      	b.n	800e268 <_DrawLine_RGB+0x3a>
 800e29a:	68a3      	ldr	r3, [r4, #8]
 800e29c:	b113      	cbz	r3, 800e2a4 <_DrawLine_RGB+0x76>
 800e29e:	69e3      	ldr	r3, [r4, #28]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	4798      	blx	r3
 800e2a4:	b002      	add	sp, #8
 800e2a6:	bd10      	pop	{r4, pc}

0800e2a8 <_NextPixel_FlushBuffer>:
 800e2a8:	b530      	push	{r4, r5, lr}
 800e2aa:	4c10      	ldr	r4, [pc, #64]	; (800e2ec <_NextPixel_FlushBuffer+0x44>)
 800e2ac:	6a22      	ldr	r2, [r4, #32]
 800e2ae:	b089      	sub	sp, #36	; 0x24
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	428a      	cmp	r2, r1
 800e2b4:	f04f 0300 	mov.w	r3, #0
 800e2b8:	9306      	str	r3, [sp, #24]
 800e2ba:	9202      	str	r2, [sp, #8]
 800e2bc:	bf08      	it	eq
 800e2be:	ab06      	addeq	r3, sp, #24
 800e2c0:	6962      	ldr	r2, [r4, #20]
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	9100      	str	r1, [sp, #0]
 800e2c8:	9101      	str	r1, [sp, #4]
 800e2ca:	9503      	str	r5, [sp, #12]
 800e2cc:	9204      	str	r2, [sp, #16]
 800e2ce:	1d20      	adds	r0, r4, #4
 800e2d0:	9107      	str	r1, [sp, #28]
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	c807      	ldmia	r0, {r0, r1, r2}
 800e2d6:	f7fe f973 	bl	800c5c0 <LCD_DrawBitmap>
 800e2da:	6862      	ldr	r2, [r4, #4]
 800e2dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2de:	62a5      	str	r5, [r4, #40]	; 0x28
 800e2e0:	4413      	add	r3, r2
 800e2e2:	6063      	str	r3, [r4, #4]
 800e2e4:	6963      	ldr	r3, [r4, #20]
 800e2e6:	61a3      	str	r3, [r4, #24]
 800e2e8:	b009      	add	sp, #36	; 0x24
 800e2ea:	bd30      	pop	{r4, r5, pc}
 800e2ec:	20005594 	.word	0x20005594

0800e2f0 <_NextPixel_NextLine>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4c06      	ldr	r4, [pc, #24]	; (800e30c <_NextPixel_NextLine+0x1c>)
 800e2f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2f6:	b10b      	cbz	r3, 800e2fc <_NextPixel_NextLine+0xc>
 800e2f8:	f7ff ffd6 	bl	800e2a8 <_NextPixel_FlushBuffer>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	6063      	str	r3, [r4, #4]
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	3b01      	subs	r3, #1
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	2300      	movs	r3, #0
 800e308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e30a:	bd10      	pop	{r4, pc}
 800e30c:	20005594 	.word	0x20005594

0800e310 <_NextPixel_SetPixel>:
 800e310:	4b33      	ldr	r3, [pc, #204]	; (800e3e0 <_NextPixel_SetPixel+0xd0>)
 800e312:	69da      	ldr	r2, [r3, #28]
 800e314:	2a02      	cmp	r2, #2
 800e316:	b570      	push	{r4, r5, r6, lr}
 800e318:	d04e      	beq.n	800e3b8 <_NextPixel_SetPixel+0xa8>
 800e31a:	2a04      	cmp	r2, #4
 800e31c:	d050      	beq.n	800e3c0 <_NextPixel_SetPixel+0xb0>
 800e31e:	2a01      	cmp	r2, #1
 800e320:	d152      	bne.n	800e3c8 <_NextPixel_SetPixel+0xb8>
 800e322:	6a19      	ldr	r1, [r3, #32]
 800e324:	699a      	ldr	r2, [r3, #24]
 800e326:	3901      	subs	r1, #1
 800e328:	2907      	cmp	r1, #7
 800e32a:	d84d      	bhi.n	800e3c8 <_NextPixel_SetPixel+0xb8>
 800e32c:	e8df f001 	tbb	[pc, r1]
 800e330:	264c1504 	.word	0x264c1504
 800e334:	404c4c4c 	.word	0x404c4c4c
 800e338:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e33a:	7816      	ldrb	r6, [r2, #0]
 800e33c:	4928      	ldr	r1, [pc, #160]	; (800e3e0 <_NextPixel_SetPixel+0xd0>)
 800e33e:	f1c4 0407 	rsb	r4, r4, #7
 800e342:	2501      	movs	r5, #1
 800e344:	40a5      	lsls	r5, r4
 800e346:	ea26 0505 	bic.w	r5, r6, r5
 800e34a:	fa00 f404 	lsl.w	r4, r0, r4
 800e34e:	ea45 0004 	orr.w	r0, r5, r4
 800e352:	7010      	strb	r0, [r2, #0]
 800e354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e356:	3201      	adds	r2, #1
 800e358:	e020      	b.n	800e39c <_NextPixel_SetPixel+0x8c>
 800e35a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e35c:	7816      	ldrb	r6, [r2, #0]
 800e35e:	4920      	ldr	r1, [pc, #128]	; (800e3e0 <_NextPixel_SetPixel+0xd0>)
 800e360:	f1c4 0406 	rsb	r4, r4, #6
 800e364:	2503      	movs	r5, #3
 800e366:	40a5      	lsls	r5, r4
 800e368:	ea26 0505 	bic.w	r5, r6, r5
 800e36c:	fa00 f404 	lsl.w	r4, r0, r4
 800e370:	ea45 0004 	orr.w	r0, r5, r4
 800e374:	7010      	strb	r0, [r2, #0]
 800e376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e378:	3202      	adds	r2, #2
 800e37a:	e00f      	b.n	800e39c <_NextPixel_SetPixel+0x8c>
 800e37c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e37e:	7816      	ldrb	r6, [r2, #0]
 800e380:	4917      	ldr	r1, [pc, #92]	; (800e3e0 <_NextPixel_SetPixel+0xd0>)
 800e382:	f1c4 0404 	rsb	r4, r4, #4
 800e386:	250f      	movs	r5, #15
 800e388:	40a5      	lsls	r5, r4
 800e38a:	ea26 0505 	bic.w	r5, r6, r5
 800e38e:	fa00 f404 	lsl.w	r4, r0, r4
 800e392:	ea45 0004 	orr.w	r0, r5, r4
 800e396:	7010      	strb	r0, [r2, #0]
 800e398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39a:	3204      	adds	r2, #4
 800e39c:	2a08      	cmp	r2, #8
 800e39e:	d001      	beq.n	800e3a4 <_NextPixel_SetPixel+0x94>
 800e3a0:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e3a2:	e011      	b.n	800e3c8 <_NextPixel_SetPixel+0xb8>
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e3a8:	698a      	ldr	r2, [r1, #24]
 800e3aa:	3201      	adds	r2, #1
 800e3ac:	618a      	str	r2, [r1, #24]
 800e3ae:	e00b      	b.n	800e3c8 <_NextPixel_SetPixel+0xb8>
 800e3b0:	7010      	strb	r0, [r2, #0]
 800e3b2:	699a      	ldr	r2, [r3, #24]
 800e3b4:	3201      	adds	r2, #1
 800e3b6:	e006      	b.n	800e3c6 <_NextPixel_SetPixel+0xb6>
 800e3b8:	699a      	ldr	r2, [r3, #24]
 800e3ba:	f822 0b02 	strh.w	r0, [r2], #2
 800e3be:	e002      	b.n	800e3c6 <_NextPixel_SetPixel+0xb6>
 800e3c0:	699a      	ldr	r2, [r3, #24]
 800e3c2:	f842 0b04 	str.w	r0, [r2], #4
 800e3c6:	619a      	str	r2, [r3, #24]
 800e3c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3ca:	3201      	adds	r2, #1
 800e3cc:	629a      	str	r2, [r3, #40]	; 0x28
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d103      	bne.n	800e3dc <_NextPixel_SetPixel+0xcc>
 800e3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3d8:	f7ff bf66 	b.w	800e2a8 <_NextPixel_FlushBuffer>
 800e3dc:	bd70      	pop	{r4, r5, r6, pc}
 800e3de:	bf00      	nop
 800e3e0:	20005594 	.word	0x20005594

0800e3e4 <_NextPixel_End>:
 800e3e4:	4b07      	ldr	r3, [pc, #28]	; (800e404 <_NextPixel_End+0x20>)
 800e3e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	461c      	mov	r4, r3
 800e3ec:	b10a      	cbz	r2, 800e3f2 <_NextPixel_End+0xe>
 800e3ee:	f7ff ff5b 	bl	800e2a8 <_NextPixel_FlushBuffer>
 800e3f2:	4805      	ldr	r0, [pc, #20]	; (800e408 <_NextPixel_End+0x24>)
 800e3f4:	f000 fe00 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800e3f8:	6920      	ldr	r0, [r4, #16]
 800e3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3fe:	f000 be27 	b.w	800f050 <GUI_ALLOC_Free>
 800e402:	bf00      	nop
 800e404:	20005594 	.word	0x20005594
 800e408:	200055a8 	.word	0x200055a8

0800e40c <_NextPixel_Start>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	469a      	mov	sl, r3
 800e412:	4b1f      	ldr	r3, [pc, #124]	; (800e490 <_NextPixel_Start+0x84>)
 800e414:	4c1f      	ldr	r4, [pc, #124]	; (800e494 <_NextPixel_Start+0x88>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	1a12      	subs	r2, r2, r0
 800e41a:	3201      	adds	r2, #1
 800e41c:	4606      	mov	r6, r0
 800e41e:	7c58      	ldrb	r0, [r3, #17]
 800e420:	60e2      	str	r2, [r4, #12]
 800e422:	f7fd fe83 	bl	800c12c <GUI_GetBitsPerPixelEx>
 800e426:	2817      	cmp	r0, #23
 800e428:	bfc8      	it	gt
 800e42a:	2020      	movgt	r0, #32
 800e42c:	2808      	cmp	r0, #8
 800e42e:	6220      	str	r0, [r4, #32]
 800e430:	dd04      	ble.n	800e43c <_NextPixel_Start+0x30>
 800e432:	2810      	cmp	r0, #16
 800e434:	bfcc      	ite	gt
 800e436:	2504      	movgt	r5, #4
 800e438:	2502      	movle	r5, #2
 800e43a:	e000      	b.n	800e43e <_NextPixel_Start+0x32>
 800e43c:	2501      	movs	r5, #1
 800e43e:	68e3      	ldr	r3, [r4, #12]
 800e440:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e494 <_NextPixel_Start+0x88>
 800e444:	fb03 f805 	mul.w	r8, r3, r5
 800e448:	f000 feea 	bl	800f220 <GUI_ALLOC_GetMaxSize>
 800e44c:	4540      	cmp	r0, r8
 800e44e:	bf3a      	itte	cc
 800e450:	fbb0 f0f5 	udivcc	r0, r0, r5
 800e454:	4368      	mulcc	r0, r5
 800e456:	4640      	movcs	r0, r8
 800e458:	fb90 f0f5 	sdiv	r0, r0, r5
 800e45c:	6260      	str	r0, [r4, #36]	; 0x24
 800e45e:	2700      	movs	r7, #0
 800e460:	4640      	mov	r0, r8
 800e462:	62a7      	str	r7, [r4, #40]	; 0x28
 800e464:	6066      	str	r6, [r4, #4]
 800e466:	6026      	str	r6, [r4, #0]
 800e468:	f8c4 a008 	str.w	sl, [r4, #8]
 800e46c:	61e5      	str	r5, [r4, #28]
 800e46e:	62e7      	str	r7, [r4, #44]	; 0x2c
 800e470:	f000 ff80 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 800e474:	6120      	str	r0, [r4, #16]
 800e476:	b140      	cbz	r0, 800e48a <_NextPixel_Start+0x7e>
 800e478:	f000 fdb0 	bl	800efdc <GUI_ALLOC_LockH>
 800e47c:	f8c9 0014 	str.w	r0, [r9, #20]
 800e480:	f8c9 0018 	str.w	r0, [r9, #24]
 800e484:	4638      	mov	r0, r7
 800e486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e48a:	2001      	movs	r0, #1
 800e48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e490:	20000084 	.word	0x20000084
 800e494:	20005594 	.word	0x20005594

0800e498 <_GetEarlyOut.isra.0>:
 800e498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e49c:	6807      	ldr	r7, [r0, #0]
 800e49e:	680e      	ldr	r6, [r1, #0]
 800e4a0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e4a4:	9c08      	ldr	r4, [sp, #32]
 800e4a6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e4aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e4ac:	eb07 0906 	add.w	r9, r7, r6
 800e4b0:	681f      	ldr	r7, [r3, #0]
 800e4b2:	f8c0 9000 	str.w	r9, [r0]
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	dd04      	ble.n	800e4c4 <_GetEarlyOut.isra.0+0x2c>
 800e4ba:	3f01      	subs	r7, #1
 800e4bc:	6027      	str	r7, [r4, #0]
 800e4be:	f04f 37ff 	mov.w	r7, #4294967295
 800e4c2:	e005      	b.n	800e4d0 <_GetEarlyOut.isra.0+0x38>
 800e4c4:	d004      	beq.n	800e4d0 <_GetEarlyOut.isra.0+0x38>
 800e4c6:	427f      	negs	r7, r7
 800e4c8:	2600      	movs	r6, #0
 800e4ca:	601f      	str	r7, [r3, #0]
 800e4cc:	6026      	str	r6, [r4, #0]
 800e4ce:	2701      	movs	r7, #1
 800e4d0:	f8c8 7000 	str.w	r7, [r8]
 800e4d4:	2f00      	cmp	r7, #0
 800e4d6:	d032      	beq.n	800e53e <_GetEarlyOut.isra.0+0xa6>
 800e4d8:	690f      	ldr	r7, [r1, #16]
 800e4da:	694e      	ldr	r6, [r1, #20]
 800e4dc:	443e      	add	r6, r7
 800e4de:	681f      	ldr	r7, [r3, #0]
 800e4e0:	1bbe      	subs	r6, r7, r6
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	601e      	str	r6, [r3, #0]
 800e4e6:	dd2a      	ble.n	800e53e <_GetEarlyOut.isra.0+0xa6>
 800e4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	da08      	bge.n	800e502 <_GetEarlyOut.isra.0+0x6a>
 800e4f0:	694b      	ldr	r3, [r1, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dd0e      	ble.n	800e514 <_GetEarlyOut.isra.0+0x7c>
 800e4f6:	fb03 9605 	mla	r6, r3, r5, r9
 800e4fa:	6006      	str	r6, [r0, #0]
 800e4fc:	6820      	ldr	r0, [r4, #0]
 800e4fe:	1ac3      	subs	r3, r0, r3
 800e500:	e007      	b.n	800e512 <_GetEarlyOut.isra.0+0x7a>
 800e502:	690b      	ldr	r3, [r1, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	dd05      	ble.n	800e514 <_GetEarlyOut.isra.0+0x7c>
 800e508:	fb03 9605 	mla	r6, r3, r5, r9
 800e50c:	6006      	str	r6, [r0, #0]
 800e50e:	6820      	ldr	r0, [r4, #0]
 800e510:	4403      	add	r3, r0
 800e512:	6023      	str	r3, [r4, #0]
 800e514:	6888      	ldr	r0, [r1, #8]
 800e516:	68cb      	ldr	r3, [r1, #12]
 800e518:	4403      	add	r3, r0
 800e51a:	6810      	ldr	r0, [r2, #0]
 800e51c:	1ac3      	subs	r3, r0, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	6013      	str	r3, [r2, #0]
 800e522:	dd0c      	ble.n	800e53e <_GetEarlyOut.isra.0+0xa6>
 800e524:	f8dc 2000 	ldr.w	r2, [ip]
 800e528:	68cb      	ldr	r3, [r1, #12]
 800e52a:	4413      	add	r3, r2
 800e52c:	f8cc 3000 	str.w	r3, [ip]
 800e530:	684b      	ldr	r3, [r1, #4]
 800e532:	1aed      	subs	r5, r5, r3
 800e534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e536:	2000      	movs	r0, #0
 800e538:	601d      	str	r5, [r3, #0]
 800e53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e53e:	2001      	movs	r0, #1
 800e540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e544 <GUI_BMP__ReadData>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	4604      	mov	r4, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	b10b      	cbz	r3, 800e550 <GUI_BMP__ReadData+0xc>
 800e54c:	2300      	movs	r3, #0
 800e54e:	6043      	str	r3, [r0, #4]
 800e550:	4611      	mov	r1, r2
 800e552:	6826      	ldr	r6, [r4, #0]
 800e554:	68a0      	ldr	r0, [r4, #8]
 800e556:	6863      	ldr	r3, [r4, #4]
 800e558:	462a      	mov	r2, r5
 800e55a:	47b0      	blx	r6
 800e55c:	42a8      	cmp	r0, r5
 800e55e:	d104      	bne.n	800e56a <GUI_BMP__ReadData+0x26>
 800e560:	6863      	ldr	r3, [r4, #4]
 800e562:	441d      	add	r5, r3
 800e564:	6065      	str	r5, [r4, #4]
 800e566:	2000      	movs	r0, #0
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	2001      	movs	r0, #1
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e570 <GUI_BMP__ReadPalette>:
 800e570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e572:	4606      	mov	r6, r0
 800e574:	460d      	mov	r5, r1
 800e576:	2400      	movs	r4, #0
 800e578:	42ac      	cmp	r4, r5
 800e57a:	da17      	bge.n	800e5ac <GUI_BMP__ReadPalette+0x3c>
 800e57c:	2104      	movs	r1, #4
 800e57e:	4630      	mov	r0, r6
 800e580:	eb0d 0201 	add.w	r2, sp, r1
 800e584:	2300      	movs	r3, #0
 800e586:	f7ff ffdd 	bl	800e544 <GUI_BMP__ReadData>
 800e58a:	b988      	cbnz	r0, 800e5b0 <GUI_BMP__ReadPalette+0x40>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	4a0a      	ldr	r2, [pc, #40]	; (800e5b8 <GUI_BMP__ReadPalette+0x48>)
 800e590:	7858      	ldrb	r0, [r3, #1]
 800e592:	6817      	ldr	r7, [r2, #0]
 800e594:	781a      	ldrb	r2, [r3, #0]
 800e596:	789b      	ldrb	r3, [r3, #2]
 800e598:	0200      	lsls	r0, r0, #8
 800e59a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e59e:	4318      	orrs	r0, r3
 800e5a0:	f7fe f97e 	bl	800c8a0 <LCD_Color2Index>
 800e5a4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800e5a8:	3401      	adds	r4, #1
 800e5aa:	e7e5      	b.n	800e578 <GUI_BMP__ReadPalette+0x8>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	e000      	b.n	800e5b2 <GUI_BMP__ReadPalette+0x42>
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	b003      	add	sp, #12
 800e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	200057d4 	.word	0x200057d4

0800e5bc <_ManageBitfields.part.2>:
 800e5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5be:	2300      	movs	r3, #0
 800e5c0:	2110      	movs	r1, #16
 800e5c2:	aa01      	add	r2, sp, #4
 800e5c4:	f7ff ffbe 	bl	800e544 <GUI_BMP__ReadData>
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	bb10      	cbnz	r0, 800e612 <_ManageBitfields.part.2+0x56>
 800e5cc:	a801      	add	r0, sp, #4
 800e5ce:	f7fe fa69 	bl	800caa4 <GUI__Read32>
 800e5d2:	4c12      	ldr	r4, [pc, #72]	; (800e61c <_ManageBitfields.part.2+0x60>)
 800e5d4:	6020      	str	r0, [r4, #0]
 800e5d6:	a801      	add	r0, sp, #4
 800e5d8:	f7fe fa64 	bl	800caa4 <GUI__Read32>
 800e5dc:	6060      	str	r0, [r4, #4]
 800e5de:	a801      	add	r0, sp, #4
 800e5e0:	f7fe fa60 	bl	800caa4 <GUI__Read32>
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	60a0      	str	r0, [r4, #8]
 800e5e8:	f104 0218 	add.w	r2, r4, #24
 800e5ec:	f851 0b0c 	ldr.w	r0, [r1], #12
 800e5f0:	f7ff fe0c 	bl	800e20c <_GetBitfieldsPara>
 800e5f4:	6860      	ldr	r0, [r4, #4]
 800e5f6:	f104 0110 	add.w	r1, r4, #16
 800e5fa:	f104 021c 	add.w	r2, r4, #28
 800e5fe:	f7ff fe05 	bl	800e20c <_GetBitfieldsPara>
 800e602:	68a0      	ldr	r0, [r4, #8]
 800e604:	f104 0114 	add.w	r1, r4, #20
 800e608:	f104 0220 	add.w	r2, r4, #32
 800e60c:	f7ff fdfe 	bl	800e20c <_GetBitfieldsPara>
 800e610:	e000      	b.n	800e614 <_ManageBitfields.part.2+0x58>
 800e612:	2501      	movs	r5, #1
 800e614:	4628      	mov	r0, r5
 800e616:	b003      	add	sp, #12
 800e618:	bd30      	pop	{r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	200055c4 	.word	0x200055c4

0800e620 <_Index2ColorBitfields>:
 800e620:	4b15      	ldr	r3, [pc, #84]	; (800e678 <_Index2ColorBitfields+0x58>)
 800e622:	685a      	ldr	r2, [r3, #4]
 800e624:	6919      	ldr	r1, [r3, #16]
 800e626:	4002      	ands	r2, r0
 800e628:	40ca      	lsrs	r2, r1
 800e62a:	69d9      	ldr	r1, [r3, #28]
 800e62c:	b530      	push	{r4, r5, lr}
 800e62e:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 800e632:	2201      	movs	r2, #1
 800e634:	fa02 f101 	lsl.w	r1, r2, r1
 800e638:	3901      	subs	r1, #1
 800e63a:	fbb5 f5f1 	udiv	r5, r5, r1
 800e63e:	6899      	ldr	r1, [r3, #8]
 800e640:	695c      	ldr	r4, [r3, #20]
 800e642:	4001      	ands	r1, r0
 800e644:	40e1      	lsrs	r1, r4
 800e646:	6a1c      	ldr	r4, [r3, #32]
 800e648:	fa02 f404 	lsl.w	r4, r2, r4
 800e64c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e650:	3c01      	subs	r4, #1
 800e652:	fbb1 f4f4 	udiv	r4, r1, r4
 800e656:	0424      	lsls	r4, r4, #16
 800e658:	6819      	ldr	r1, [r3, #0]
 800e65a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800e65e:	68dc      	ldr	r4, [r3, #12]
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	4001      	ands	r1, r0
 800e664:	40e1      	lsrs	r1, r4
 800e666:	409a      	lsls	r2, r3
 800e668:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e66c:	3a01      	subs	r2, #1
 800e66e:	fbb1 f0f2 	udiv	r0, r1, r2
 800e672:	4328      	orrs	r0, r5
 800e674:	bd30      	pop	{r4, r5, pc}
 800e676:	bf00      	nop
 800e678:	200055c4 	.word	0x200055c4

0800e67c <_DrawBitmap_RGB>:
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	b09d      	sub	sp, #116	; 0x74
 800e682:	af0a      	add	r7, sp, #40	; 0x28
 800e684:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800e688:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800e68c:	9107      	str	r1, [sp, #28]
 800e68e:	4606      	mov	r6, r0
 800e690:	468a      	mov	sl, r1
 800e692:	4614      	mov	r4, r2
 800e694:	2100      	movs	r1, #0
 800e696:	2218      	movs	r2, #24
 800e698:	4638      	mov	r0, r7
 800e69a:	469b      	mov	fp, r3
 800e69c:	9306      	str	r3, [sp, #24]
 800e69e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800e6a0:	f003 fe58 	bl	8012354 <memset>
 800e6a4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e6a8:	e88d 0208 	stmia.w	sp, {r3, r9}
 800e6ac:	4650      	mov	r0, sl
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	465a      	mov	r2, fp
 800e6b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6b4:	9702      	str	r7, [sp, #8]
 800e6b6:	f7ff fd3f 	bl	800e138 <_GetClipParam>
 800e6ba:	ab07      	add	r3, sp, #28
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	ab12      	add	r3, sp, #72	; 0x48
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	ab08      	add	r3, sp, #32
 800e6c4:	9302      	str	r3, [sp, #8]
 800e6c6:	ab09      	add	r3, sp, #36	; 0x24
 800e6c8:	9303      	str	r3, [sp, #12]
 800e6ca:	f8cd 9010 	str.w	r9, [sp, #16]
 800e6ce:	1d30      	adds	r0, r6, #4
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	aa06      	add	r2, sp, #24
 800e6d4:	ab26      	add	r3, sp, #152	; 0x98
 800e6d6:	f7ff fedf 	bl	800e498 <_GetEarlyOut.isra.0>
 800e6da:	b108      	cbz	r0, 800e6e0 <_DrawBitmap_RGB+0x64>
 800e6dc:	2400      	movs	r4, #0
 800e6de:	e04e      	b.n	800e77e <_DrawBitmap_RGB+0x102>
 800e6e0:	4b29      	ldr	r3, [pc, #164]	; (800e788 <_DrawBitmap_RGB+0x10c>)
 800e6e2:	4f2a      	ldr	r7, [pc, #168]	; (800e78c <_DrawBitmap_RGB+0x110>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	7c58      	ldrb	r0, [r3, #17]
 800e6e8:	f7fd fd4e 	bl	800c188 <GUI_GetpfColor2IndexEx>
 800e6ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e6ee:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800e790 <_DrawBitmap_RGB+0x114>
 800e6f2:	9015      	str	r0, [sp, #84]	; 0x54
 800e6f4:	42bd      	cmp	r5, r7
 800e6f6:	9316      	str	r3, [sp, #88]	; 0x58
 800e6f8:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800e6fc:	9807      	ldr	r0, [sp, #28]
 800e6fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e700:	9a06      	ldr	r2, [sp, #24]
 800e702:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e704:	d109      	bne.n	800e71a <_DrawBitmap_RGB+0x9e>
 800e706:	4421      	add	r1, r4
 800e708:	4402      	add	r2, r0
 800e70a:	440b      	add	r3, r1
 800e70c:	f8de 4000 	ldr.w	r4, [lr]
 800e710:	3a01      	subs	r2, #1
 800e712:	3b01      	subs	r3, #1
 800e714:	47a0      	blx	r4
 800e716:	b148      	cbz	r0, 800e72c <_DrawBitmap_RGB+0xb0>
 800e718:	e01b      	b.n	800e752 <_DrawBitmap_RGB+0xd6>
 800e71a:	440c      	add	r4, r1
 800e71c:	9419      	str	r4, [sp, #100]	; 0x64
 800e71e:	4402      	add	r2, r0
 800e720:	441c      	add	r4, r3
 800e722:	3a01      	subs	r2, #1
 800e724:	3c01      	subs	r4, #1
 800e726:	9018      	str	r0, [sp, #96]	; 0x60
 800e728:	921a      	str	r2, [sp, #104]	; 0x68
 800e72a:	941b      	str	r4, [sp, #108]	; 0x6c
 800e72c:	9b06      	ldr	r3, [sp, #24]
 800e72e:	9313      	str	r3, [sp, #76]	; 0x4c
 800e730:	2300      	movs	r3, #0
 800e732:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e736:	9311      	str	r3, [sp, #68]	; 0x44
 800e738:	4630      	mov	r0, r6
 800e73a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e73c:	aa10      	add	r2, sp, #64	; 0x40
 800e73e:	2300      	movs	r3, #0
 800e740:	f7ff ff00 	bl	800e544 <GUI_BMP__ReadData>
 800e744:	4604      	mov	r4, r0
 800e746:	b130      	cbz	r0, 800e756 <_DrawBitmap_RGB+0xda>
 800e748:	42bd      	cmp	r5, r7
 800e74a:	d102      	bne.n	800e752 <_DrawBitmap_RGB+0xd6>
 800e74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4798      	blx	r3
 800e752:	2401      	movs	r4, #1
 800e754:	e013      	b.n	800e77e <_DrawBitmap_RGB+0x102>
 800e756:	a810      	add	r0, sp, #64	; 0x40
 800e758:	47a8      	blx	r5
 800e75a:	6872      	ldr	r2, [r6, #4]
 800e75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75e:	4413      	add	r3, r2
 800e760:	6073      	str	r3, [r6, #4]
 800e762:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e764:	9b08      	ldr	r3, [sp, #32]
 800e766:	4413      	add	r3, r2
 800e768:	9312      	str	r3, [sp, #72]	; 0x48
 800e76a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e76c:	3b01      	subs	r3, #1
 800e76e:	9326      	str	r3, [sp, #152]	; 0x98
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e1      	bne.n	800e738 <_DrawBitmap_RGB+0xbc>
 800e774:	42bd      	cmp	r5, r7
 800e776:	d1b1      	bne.n	800e6dc <_DrawBitmap_RGB+0x60>
 800e778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	4798      	blx	r3
 800e77e:	4620      	mov	r0, r4
 800e780:	b01d      	add	sp, #116	; 0x74
 800e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e786:	bf00      	nop
 800e788:	20000084 	.word	0x20000084
 800e78c:	0800e22f 	.word	0x0800e22f
 800e790:	20000098 	.word	0x20000098

0800e794 <_DrawBitmap_16bpp>:
 800e794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e798:	461f      	mov	r7, r3
 800e79a:	b093      	sub	sp, #76	; 0x4c
 800e79c:	ea4f 1807 	mov.w	r8, r7, lsl #4
 800e7a0:	ac0c      	add	r4, sp, #48	; 0x30
 800e7a2:	f108 081f 	add.w	r8, r8, #31
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	4689      	mov	r9, r1
 800e7aa:	9107      	str	r1, [sp, #28]
 800e7ac:	4616      	mov	r6, r2
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	2218      	movs	r2, #24
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	ea4f 1868 	mov.w	r8, r8, asr #5
 800e7b8:	9306      	str	r3, [sp, #24]
 800e7ba:	f003 fdcb 	bl	8012354 <memset>
 800e7be:	463a      	mov	r2, r7
 800e7c0:	2310      	movs	r3, #16
 800e7c2:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800e7c6:	e88d 0088 	stmia.w	sp, {r3, r7}
 800e7ca:	4648      	mov	r0, r9
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e7d0:	9402      	str	r4, [sp, #8]
 800e7d2:	f7ff fcb1 	bl	800e138 <_GetClipParam>
 800e7d6:	ab07      	add	r3, sp, #28
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	ab09      	add	r3, sp, #36	; 0x24
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	ab0a      	add	r3, sp, #40	; 0x28
 800e7e0:	9302      	str	r3, [sp, #8]
 800e7e2:	ab0b      	add	r3, sp, #44	; 0x2c
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	9704      	str	r7, [sp, #16]
 800e7e8:	1d28      	adds	r0, r5, #4
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	aa06      	add	r2, sp, #24
 800e7ee:	ab1a      	add	r3, sp, #104	; 0x68
 800e7f0:	f7ff fe52 	bl	800e498 <_GetEarlyOut.isra.0>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d142      	bne.n	800e87e <_DrawBitmap_16bpp+0xea>
 800e7f8:	4b23      	ldr	r3, [pc, #140]	; (800e888 <_DrawBitmap_16bpp+0xf4>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	7c58      	ldrb	r0, [r3, #17]
 800e7fe:	f7fd fcbb 	bl	800c178 <LCD_GetpfColor2IndexEx>
 800e802:	4607      	mov	r7, r0
 800e804:	b908      	cbnz	r0, 800e80a <_DrawBitmap_16bpp+0x76>
 800e806:	2401      	movs	r4, #1
 800e808:	e03a      	b.n	800e880 <_DrawBitmap_16bpp+0xec>
 800e80a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e80c:	9807      	ldr	r0, [sp, #28]
 800e80e:	9a06      	ldr	r2, [sp, #24]
 800e810:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e812:	4431      	add	r1, r6
 800e814:	4e1d      	ldr	r6, [pc, #116]	; (800e88c <_DrawBitmap_16bpp+0xf8>)
 800e816:	4402      	add	r2, r0
 800e818:	440b      	add	r3, r1
 800e81a:	6834      	ldr	r4, [r6, #0]
 800e81c:	3a01      	subs	r2, #1
 800e81e:	3b01      	subs	r3, #1
 800e820:	47a0      	blx	r4
 800e822:	2800      	cmp	r0, #0
 800e824:	d1ef      	bne.n	800e806 <_DrawBitmap_16bpp+0x72>
 800e826:	4628      	mov	r0, r5
 800e828:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e82a:	aa08      	add	r2, sp, #32
 800e82c:	2300      	movs	r3, #0
 800e82e:	f7ff fe89 	bl	800e544 <GUI_BMP__ReadData>
 800e832:	4604      	mov	r4, r0
 800e834:	2800      	cmp	r0, #0
 800e836:	d1e6      	bne.n	800e806 <_DrawBitmap_16bpp+0x72>
 800e838:	4680      	mov	r8, r0
 800e83a:	9b06      	ldr	r3, [sp, #24]
 800e83c:	4598      	cmp	r8, r3
 800e83e:	da0a      	bge.n	800e856 <_DrawBitmap_16bpp+0xc2>
 800e840:	a808      	add	r0, sp, #32
 800e842:	f7fe f927 	bl	800ca94 <GUI__Read16>
 800e846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e848:	4798      	blx	r3
 800e84a:	47b8      	blx	r7
 800e84c:	6873      	ldr	r3, [r6, #4]
 800e84e:	4798      	blx	r3
 800e850:	f108 0801 	add.w	r8, r8, #1
 800e854:	e7f1      	b.n	800e83a <_DrawBitmap_16bpp+0xa6>
 800e856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e858:	b10b      	cbz	r3, 800e85e <_DrawBitmap_16bpp+0xca>
 800e85a:	68b3      	ldr	r3, [r6, #8]
 800e85c:	4798      	blx	r3
 800e85e:	686a      	ldr	r2, [r5, #4]
 800e860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e862:	4413      	add	r3, r2
 800e864:	606b      	str	r3, [r5, #4]
 800e866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e86a:	4413      	add	r3, r2
 800e86c:	9309      	str	r3, [sp, #36]	; 0x24
 800e86e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e870:	3b01      	subs	r3, #1
 800e872:	931a      	str	r3, [sp, #104]	; 0x68
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1d6      	bne.n	800e826 <_DrawBitmap_16bpp+0x92>
 800e878:	68f3      	ldr	r3, [r6, #12]
 800e87a:	4798      	blx	r3
 800e87c:	e000      	b.n	800e880 <_DrawBitmap_16bpp+0xec>
 800e87e:	2400      	movs	r4, #0
 800e880:	4620      	mov	r0, r4
 800e882:	b013      	add	sp, #76	; 0x4c
 800e884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e888:	20000084 	.word	0x20000084
 800e88c:	20000098 	.word	0x20000098

0800e890 <GUI_BMP__Init>:
 800e890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	468b      	mov	fp, r1
 800e896:	4692      	mov	sl, r2
 800e898:	4698      	mov	r8, r3
 800e89a:	2136      	movs	r1, #54	; 0x36
 800e89c:	aa01      	add	r2, sp, #4
 800e89e:	2301      	movs	r3, #1
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e8a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e8a6:	f7ff fe4d 	bl	800e544 <GUI_BMP__ReadData>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d15e      	bne.n	800e96c <GUI_BMP__Init+0xdc>
 800e8ae:	a801      	add	r0, sp, #4
 800e8b0:	f7fe f8f0 	bl	800ca94 <GUI__Read16>
 800e8b4:	9b01      	ldr	r3, [sp, #4]
 800e8b6:	4681      	mov	r9, r0
 800e8b8:	330c      	adds	r3, #12
 800e8ba:	a801      	add	r0, sp, #4
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	f7fe f8f1 	bl	800caa4 <GUI__Read32>
 800e8c2:	4607      	mov	r7, r0
 800e8c4:	a801      	add	r0, sp, #4
 800e8c6:	f7fe f8ed 	bl	800caa4 <GUI__Read32>
 800e8ca:	f8cb 0000 	str.w	r0, [fp]
 800e8ce:	a801      	add	r0, sp, #4
 800e8d0:	f7fe f8e8 	bl	800caa4 <GUI__Read32>
 800e8d4:	9b01      	ldr	r3, [sp, #4]
 800e8d6:	f8ca 0000 	str.w	r0, [sl]
 800e8da:	3302      	adds	r3, #2
 800e8dc:	a801      	add	r0, sp, #4
 800e8de:	9301      	str	r3, [sp, #4]
 800e8e0:	f7fe f8d8 	bl	800ca94 <GUI__Read16>
 800e8e4:	f8a8 0000 	strh.w	r0, [r8]
 800e8e8:	a801      	add	r0, sp, #4
 800e8ea:	f7fe f8db 	bl	800caa4 <GUI__Read32>
 800e8ee:	9b01      	ldr	r3, [sp, #4]
 800e8f0:	6030      	str	r0, [r6, #0]
 800e8f2:	330c      	adds	r3, #12
 800e8f4:	a801      	add	r0, sp, #4
 800e8f6:	9301      	str	r3, [sp, #4]
 800e8f8:	f7fe f8d4 	bl	800caa4 <GUI__Read32>
 800e8fc:	f8b8 3000 	ldrh.w	r3, [r8]
 800e900:	2b08      	cmp	r3, #8
 800e902:	d00f      	beq.n	800e924 <GUI_BMP__Init+0x94>
 800e904:	d805      	bhi.n	800e912 <GUI_BMP__Init+0x82>
 800e906:	2b01      	cmp	r3, #1
 800e908:	d00a      	beq.n	800e920 <GUI_BMP__Init+0x90>
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	d12e      	bne.n	800e96c <GUI_BMP__Init+0xdc>
 800e90e:	2310      	movs	r3, #16
 800e910:	e00c      	b.n	800e92c <GUI_BMP__Init+0x9c>
 800e912:	2b18      	cmp	r3, #24
 800e914:	d009      	beq.n	800e92a <GUI_BMP__Init+0x9a>
 800e916:	2b20      	cmp	r3, #32
 800e918:	d007      	beq.n	800e92a <GUI_BMP__Init+0x9a>
 800e91a:	2b10      	cmp	r3, #16
 800e91c:	d126      	bne.n	800e96c <GUI_BMP__Init+0xdc>
 800e91e:	e004      	b.n	800e92a <GUI_BMP__Init+0x9a>
 800e920:	2302      	movs	r3, #2
 800e922:	e003      	b.n	800e92c <GUI_BMP__Init+0x9c>
 800e924:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e928:	e000      	b.n	800e92c <GUI_BMP__Init+0x9c>
 800e92a:	2300      	movs	r3, #0
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	b10b      	cbz	r3, 800e936 <GUI_BMP__Init+0xa6>
 800e932:	b100      	cbz	r0, 800e936 <GUI_BMP__Init+0xa6>
 800e934:	6020      	str	r0, [r4, #0]
 800e936:	6833      	ldr	r3, [r6, #0]
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d105      	bne.n	800e948 <GUI_BMP__Init+0xb8>
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7ff fe3d 	bl	800e5bc <_ManageBitfields.part.2>
 800e942:	686b      	ldr	r3, [r5, #4]
 800e944:	3b38      	subs	r3, #56	; 0x38
 800e946:	e001      	b.n	800e94c <GUI_BMP__Init+0xbc>
 800e948:	686b      	ldr	r3, [r5, #4]
 800e94a:	3b28      	subs	r3, #40	; 0x28
 800e94c:	441f      	add	r7, r3
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	606f      	str	r7, [r5, #4]
 800e952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e956:	dc09      	bgt.n	800e96c <GUI_BMP__Init+0xdc>
 800e958:	f644 5342 	movw	r3, #19778	; 0x4d42
 800e95c:	4599      	cmp	r9, r3
 800e95e:	d105      	bne.n	800e96c <GUI_BMP__Init+0xdc>
 800e960:	6830      	ldr	r0, [r6, #0]
 800e962:	2803      	cmp	r0, #3
 800e964:	bf94      	ite	ls
 800e966:	2000      	movls	r0, #0
 800e968:	2001      	movhi	r0, #1
 800e96a:	e000      	b.n	800e96e <GUI_BMP__Init+0xde>
 800e96c:	2001      	movs	r0, #1
 800e96e:	b003      	add	sp, #12
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e974 <GUI_BMP_DrawEx>:
 800e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	b0a5      	sub	sp, #148	; 0x94
 800e97a:	461d      	mov	r5, r3
 800e97c:	ab10      	add	r3, sp, #64	; 0x40
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	ab11      	add	r3, sp, #68	; 0x44
 800e982:	901b      	str	r0, [sp, #108]	; 0x6c
 800e984:	911d      	str	r1, [sp, #116]	; 0x74
 800e986:	9301      	str	r3, [sp, #4]
 800e988:	4617      	mov	r7, r2
 800e98a:	a81b      	add	r0, sp, #108	; 0x6c
 800e98c:	a90e      	add	r1, sp, #56	; 0x38
 800e98e:	aa0f      	add	r2, sp, #60	; 0x3c
 800e990:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800e994:	f7ff ff7c 	bl	800e890 <GUI_BMP__Init>
 800e998:	4604      	mov	r4, r0
 800e99a:	2800      	cmp	r0, #0
 800e99c:	f040 8229 	bne.w	800edf2 <GUI_BMP_DrawEx+0x47e>
 800e9a0:	4b9e      	ldr	r3, [pc, #632]	; (800ec1c <GUI_BMP_DrawEx+0x2a8>)
 800e9a2:	6819      	ldr	r1, [r3, #0]
 800e9a4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800e9a6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800e9a8:	eb05 0803 	add.w	r8, r5, r3
 800e9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9ae:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 800e9b2:	4407      	add	r7, r0
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	443b      	add	r3, r7
 800e9b8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800e9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9be:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	4443      	add	r3, r8
 800e9c6:	a819      	add	r0, sp, #100	; 0x64
 800e9c8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800e9cc:	f7fa ff9a 	bl	8009904 <WM__InitIVRSearch>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	f000 8215 	beq.w	800ee00 <GUI_BMP_DrawEx+0x48c>
 800e9d6:	9408      	str	r4, [sp, #32]
 800e9d8:	46a1      	mov	r9, r4
 800e9da:	9a08      	ldr	r2, [sp, #32]
 800e9dc:	b15a      	cbz	r2, 800e9f6 <GUI_BMP_DrawEx+0x82>
 800e9de:	ab10      	add	r3, sp, #64	; 0x40
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	ab11      	add	r3, sp, #68	; 0x44
 800e9e4:	9301      	str	r3, [sp, #4]
 800e9e6:	a81b      	add	r0, sp, #108	; 0x6c
 800e9e8:	a90e      	add	r1, sp, #56	; 0x38
 800e9ea:	aa0f      	add	r2, sp, #60	; 0x3c
 800e9ec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800e9f0:	f7ff ff4e 	bl	800e890 <GUI_BMP__Init>
 800e9f4:	4681      	mov	r9, r0
 800e9f6:	f1b9 0f00 	cmp.w	r9, #0
 800e9fa:	f040 81f0 	bne.w	800edde <GUI_BMP_DrawEx+0x46a>
 800e9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea00:	9307      	str	r3, [sp, #28]
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	f200 81eb 	bhi.w	800edde <GUI_BMP_DrawEx+0x46a>
 800ea08:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea0c:	00a40004 	.word	0x00a40004
 800ea10:	01cd00a4 	.word	0x01cd00a4
 800ea14:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800ea18:	2c08      	cmp	r4, #8
 800ea1a:	d012      	beq.n	800ea42 <GUI_BMP_DrawEx+0xce>
 800ea1c:	d805      	bhi.n	800ea2a <GUI_BMP_DrawEx+0xb6>
 800ea1e:	2c01      	cmp	r4, #1
 800ea20:	d00f      	beq.n	800ea42 <GUI_BMP_DrawEx+0xce>
 800ea22:	2c04      	cmp	r4, #4
 800ea24:	f040 81d9 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ea28:	e00b      	b.n	800ea42 <GUI_BMP_DrawEx+0xce>
 800ea2a:	2c18      	cmp	r4, #24
 800ea2c:	d071      	beq.n	800eb12 <GUI_BMP_DrawEx+0x19e>
 800ea2e:	2c20      	cmp	r4, #32
 800ea30:	f000 8084 	beq.w	800eb3c <GUI_BMP_DrawEx+0x1c8>
 800ea34:	2c10      	cmp	r4, #16
 800ea36:	f040 81d0 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ea3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	4b78      	ldr	r3, [pc, #480]	; (800ec20 <GUI_BMP_DrawEx+0x2ac>)
 800ea40:	e1c3      	b.n	800edca <GUI_BMP_DrawEx+0x456>
 800ea42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ea46:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea48:	ae1e      	add	r6, sp, #120	; 0x78
 800ea4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea4c:	9712      	str	r7, [sp, #72]	; 0x48
 800ea4e:	2100      	movs	r1, #0
 800ea50:	4630      	mov	r0, r6
 800ea52:	2218      	movs	r2, #24
 800ea54:	9314      	str	r3, [sp, #80]	; 0x50
 800ea56:	f003 fc7d 	bl	8012354 <memset>
 800ea5a:	a81b      	add	r0, sp, #108	; 0x6c
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7ff fd87 	bl	800e570 <GUI_BMP__ReadPalette>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	f040 81b9 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ea68:	2c04      	cmp	r4, #4
 800ea6a:	d005      	beq.n	800ea78 <GUI_BMP_DrawEx+0x104>
 800ea6c:	2c08      	cmp	r4, #8
 800ea6e:	d009      	beq.n	800ea84 <GUI_BMP_DrawEx+0x110>
 800ea70:	2c01      	cmp	r4, #1
 800ea72:	d10c      	bne.n	800ea8e <GUI_BMP_DrawEx+0x11a>
 800ea74:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea76:	e001      	b.n	800ea7c <GUI_BMP_DrawEx+0x108>
 800ea78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea7a:	00ad      	lsls	r5, r5, #2
 800ea7c:	351f      	adds	r5, #31
 800ea7e:	116d      	asrs	r5, r5, #5
 800ea80:	00ad      	lsls	r5, r5, #2
 800ea82:	e005      	b.n	800ea90 <GUI_BMP_DrawEx+0x11c>
 800ea84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea86:	3503      	adds	r5, #3
 800ea88:	f025 0503 	bic.w	r5, r5, #3
 800ea8c:	e000      	b.n	800ea90 <GUI_BMP_DrawEx+0x11c>
 800ea8e:	4605      	mov	r5, r0
 800ea90:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea96:	4641      	mov	r1, r8
 800ea98:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 800ea9c:	f7ff fb4c 	bl	800e138 <_GetClipParam>
 800eaa0:	ab12      	add	r3, sp, #72	; 0x48
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	ab16      	add	r3, sp, #88	; 0x58
 800eaa6:	9301      	str	r3, [sp, #4]
 800eaa8:	ab17      	add	r3, sp, #92	; 0x5c
 800eaaa:	9302      	str	r3, [sp, #8]
 800eaac:	ab18      	add	r3, sp, #96	; 0x60
 800eaae:	9303      	str	r3, [sp, #12]
 800eab0:	9504      	str	r5, [sp, #16]
 800eab2:	a81c      	add	r0, sp, #112	; 0x70
 800eab4:	4631      	mov	r1, r6
 800eab6:	aa13      	add	r2, sp, #76	; 0x4c
 800eab8:	ab14      	add	r3, sp, #80	; 0x50
 800eaba:	f7ff fced 	bl	800e498 <_GetEarlyOut.isra.0>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f040 818d 	bne.w	800edde <GUI_BMP_DrawEx+0x46a>
 800eac4:	a81b      	add	r0, sp, #108	; 0x6c
 800eac6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800eac8:	aa15      	add	r2, sp, #84	; 0x54
 800eaca:	2300      	movs	r3, #0
 800eacc:	f7ff fd3a 	bl	800e544 <GUI_BMP__ReadData>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f040 8182 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ead6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ead8:	9204      	str	r2, [sp, #16]
 800eada:	2301      	movs	r3, #1
 800eadc:	4a51      	ldr	r2, [pc, #324]	; (800ec24 <GUI_BMP_DrawEx+0x2b0>)
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	9303      	str	r3, [sp, #12]
 800eae4:	9402      	str	r4, [sp, #8]
 800eae6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eae8:	6812      	ldr	r2, [r2, #0]
 800eaea:	9205      	str	r2, [sp, #20]
 800eaec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eaee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eaf0:	4441      	add	r1, r8
 800eaf2:	f7fd fd65 	bl	800c5c0 <LCD_DrawBitmap>
 800eaf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eaf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eafa:	4413      	add	r3, r2
 800eafc:	931c      	str	r3, [sp, #112]	; 0x70
 800eafe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eb00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb02:	4413      	add	r3, r2
 800eb04:	9316      	str	r3, [sp, #88]	; 0x58
 800eb06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	9314      	str	r3, [sp, #80]	; 0x50
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1d9      	bne.n	800eac4 <GUI_BMP_DrawEx+0x150>
 800eb10:	e165      	b.n	800edde <GUI_BMP_DrawEx+0x46a>
 800eb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb16:	9200      	str	r2, [sp, #0]
 800eb18:	435c      	muls	r4, r3
 800eb1a:	341f      	adds	r4, #31
 800eb1c:	1164      	asrs	r4, r4, #5
 800eb1e:	2203      	movs	r2, #3
 800eb20:	00a4      	lsls	r4, r4, #2
 800eb22:	9202      	str	r2, [sp, #8]
 800eb24:	9401      	str	r4, [sp, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	9203      	str	r2, [sp, #12]
 800eb2a:	4a3f      	ldr	r2, [pc, #252]	; (800ec28 <GUI_BMP_DrawEx+0x2b4>)
 800eb2c:	9204      	str	r2, [sp, #16]
 800eb2e:	a81b      	add	r0, sp, #108	; 0x6c
 800eb30:	4639      	mov	r1, r7
 800eb32:	4642      	mov	r2, r8
 800eb34:	f7ff fda2 	bl	800e67c <_DrawBitmap_RGB>
 800eb38:	4681      	mov	r9, r0
 800eb3a:	e150      	b.n	800edde <GUI_BMP_DrawEx+0x46a>
 800eb3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb40:	9200      	str	r2, [sp, #0]
 800eb42:	009a      	lsls	r2, r3, #2
 800eb44:	9201      	str	r2, [sp, #4]
 800eb46:	2204      	movs	r2, #4
 800eb48:	9202      	str	r2, [sp, #8]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	9203      	str	r2, [sp, #12]
 800eb4e:	4a37      	ldr	r2, [pc, #220]	; (800ec2c <GUI_BMP_DrawEx+0x2b8>)
 800eb50:	6812      	ldr	r2, [r2, #0]
 800eb52:	e7eb      	b.n	800eb2c <GUI_BMP_DrawEx+0x1b8>
 800eb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb56:	9309      	str	r3, [sp, #36]	; 0x24
 800eb58:	4b30      	ldr	r3, [pc, #192]	; (800ec1c <GUI_BMP_DrawEx+0x2a8>)
 800eb5a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb62:	a81b      	add	r0, sp, #108	; 0x6c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb68:	f7ff fd02 	bl	800e570 <GUI_BMP__ReadPalette>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	f040 8134 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800eb72:	4445      	add	r5, r8
 800eb74:	3d01      	subs	r5, #1
 800eb76:	463c      	mov	r4, r7
 800eb78:	a81b      	add	r0, sp, #108	; 0x6c
 800eb7a:	2102      	movs	r1, #2
 800eb7c:	aa1e      	add	r2, sp, #120	; 0x78
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f7ff fce0 	bl	800e544 <GUI_BMP__ReadData>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	f040 8128 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800eb8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb8c:	1c5a      	adds	r2, r3, #1
 800eb8e:	921e      	str	r2, [sp, #120]	; 0x78
 800eb90:	f893 b000 	ldrb.w	fp, [r3]
 800eb94:	785e      	ldrb	r6, [r3, #1]
 800eb96:	f1bb 0f00 	cmp.w	fp, #0
 800eb9a:	f040 80c6 	bne.w	800ed2a <GUI_BMP_DrawEx+0x3b6>
 800eb9e:	2e01      	cmp	r6, #1
 800eba0:	d019      	beq.n	800ebd6 <GUI_BMP_DrawEx+0x262>
 800eba2:	d302      	bcc.n	800ebaa <GUI_BMP_DrawEx+0x236>
 800eba4:	2e02      	cmp	r6, #2
 800eba6:	d043      	beq.n	800ec30 <GUI_BMP_DrawEx+0x2bc>
 800eba8:	e062      	b.n	800ec70 <GUI_BMP_DrawEx+0x2fc>
 800ebaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebac:	443a      	add	r2, r7
 800ebae:	3a01      	subs	r2, #1
 800ebb0:	4294      	cmp	r4, r2
 800ebb2:	da0a      	bge.n	800ebca <GUI_BMP_DrawEx+0x256>
 800ebb4:	4b1b      	ldr	r3, [pc, #108]	; (800ec24 <GUI_BMP_DrawEx+0x2b0>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	6819      	ldr	r1, [r3, #0]
 800ebba:	4b18      	ldr	r3, [pc, #96]	; (800ec1c <GUI_BMP_DrawEx+0x2a8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	6019      	str	r1, [r3, #0]
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	f7fd fba7 	bl	800c318 <LCD_DrawHLine>
 800ebca:	3d01      	subs	r5, #1
 800ebcc:	4545      	cmp	r5, r8
 800ebce:	f2c0 8104 	blt.w	800edda <GUI_BMP_DrawEx+0x466>
 800ebd2:	46ba      	mov	sl, r7
 800ebd4:	e0e5      	b.n	800eda2 <GUI_BMP_DrawEx+0x42e>
 800ebd6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ebda:	4e10      	ldr	r6, [pc, #64]	; (800ec1c <GUI_BMP_DrawEx+0x2a8>)
 800ebdc:	44ba      	add	sl, r7
 800ebde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebe2:	4554      	cmp	r4, sl
 800ebe4:	da0a      	bge.n	800ebfc <GUI_BMP_DrawEx+0x288>
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	; (800ec24 <GUI_BMP_DrawEx+0x2b0>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	4652      	mov	r2, sl
 800ebf8:	f7fd fb8e 	bl	800c318 <LCD_DrawHLine>
 800ebfc:	4545      	cmp	r5, r8
 800ebfe:	f340 80fa 	ble.w	800edf6 <GUI_BMP_DrawEx+0x482>
 800ec02:	4b08      	ldr	r3, [pc, #32]	; (800ec24 <GUI_BMP_DrawEx+0x2b0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	6833      	ldr	r3, [r6, #0]
 800ec0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0c:	4638      	mov	r0, r7
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	4641      	mov	r1, r8
 800ec12:	4652      	mov	r2, sl
 800ec14:	1e6b      	subs	r3, r5, #1
 800ec16:	f7fd fbcb 	bl	800c3b0 <LCD_FillRect>
 800ec1a:	e0ec      	b.n	800edf6 <GUI_BMP_DrawEx+0x482>
 800ec1c:	20000084 	.word	0x20000084
 800ec20:	0800f3bd 	.word	0x0800f3bd
 800ec24:	200057d4 	.word	0x200057d4
 800ec28:	0800e22f 	.word	0x0800e22f
 800ec2c:	20000094 	.word	0x20000094
 800ec30:	a81b      	add	r0, sp, #108	; 0x6c
 800ec32:	4631      	mov	r1, r6
 800ec34:	aa1e      	add	r2, sp, #120	; 0x78
 800ec36:	465b      	mov	r3, fp
 800ec38:	f7ff fc84 	bl	800e544 <GUI_BMP__ReadData>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f040 80cc 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ec42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	921e      	str	r2, [sp, #120]	; 0x78
 800ec48:	f893 a000 	ldrb.w	sl, [r3]
 800ec4c:	785e      	ldrb	r6, [r3, #1]
 800ec4e:	4b6e      	ldr	r3, [pc, #440]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	4b6d      	ldr	r3, [pc, #436]	; (800ee0c <GUI_BMP_DrawEx+0x498>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec5a:	1bae      	subs	r6, r5, r6
 800ec5c:	44a2      	add	sl, r4
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	4620      	mov	r0, r4
 800ec62:	462b      	mov	r3, r5
 800ec64:	4631      	mov	r1, r6
 800ec66:	4652      	mov	r2, sl
 800ec68:	f7fd fba2 	bl	800c3b0 <LCD_FillRect>
 800ec6c:	4635      	mov	r5, r6
 800ec6e:	e098      	b.n	800eda2 <GUI_BMP_DrawEx+0x42e>
 800ec70:	9a07      	ldr	r2, [sp, #28]
 800ec72:	2a02      	cmp	r2, #2
 800ec74:	d12a      	bne.n	800eccc <GUI_BMP_DrawEx+0x358>
 800ec76:	1c73      	adds	r3, r6, #1
 800ec78:	ea4f 0a63 	mov.w	sl, r3, asr #1
 800ec7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ec7e:	a81b      	add	r0, sp, #108	; 0x6c
 800ec80:	4651      	mov	r1, sl
 800ec82:	aa1e      	add	r2, sp, #120	; 0x78
 800ec84:	465b      	mov	r3, fp
 800ec86:	f7ff fc5d 	bl	800e544 <GUI_BMP__ReadData>
 800ec8a:	4684      	mov	ip, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f040 80a4 	bne.w	800edda <GUI_BMP_DrawEx+0x466>
 800ec92:	2304      	movs	r3, #4
 800ec94:	9302      	str	r3, [sp, #8]
 800ec96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ec98:	9304      	str	r3, [sp, #16]
 800ec9a:	f04f 0b01 	mov.w	fp, #1
 800ec9e:	4b5a      	ldr	r3, [pc, #360]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800eca0:	f8cd a00c 	str.w	sl, [sp, #12]
 800eca4:	f8cd b000 	str.w	fp, [sp]
 800eca8:	f8cd b004 	str.w	fp, [sp, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	9305      	str	r3, [sp, #20]
 800ecb0:	4632      	mov	r2, r6
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	465b      	mov	r3, fp
 800ecb8:	f8cd c018 	str.w	ip, [sp, #24]
 800ecbc:	f7fd fc80 	bl	800c5c0 <LCD_DrawBitmap>
 800ecc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecc2:	eb04 0a06 	add.w	sl, r4, r6
 800ecc6:	f012 0f02 	tst.w	r2, #2
 800ecca:	e022      	b.n	800ed12 <GUI_BMP_DrawEx+0x39e>
 800eccc:	a81b      	add	r0, sp, #108	; 0x6c
 800ecce:	4631      	mov	r1, r6
 800ecd0:	aa1e      	add	r2, sp, #120	; 0x78
 800ecd2:	465b      	mov	r3, fp
 800ecd4:	f7ff fc36 	bl	800e544 <GUI_BMP__ReadData>
 800ecd8:	4684      	mov	ip, r0
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d17d      	bne.n	800edda <GUI_BMP_DrawEx+0x466>
 800ecde:	2308      	movs	r3, #8
 800ece0:	9302      	str	r3, [sp, #8]
 800ece2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ece4:	9304      	str	r3, [sp, #16]
 800ece6:	f04f 0b01 	mov.w	fp, #1
 800ecea:	4b47      	ldr	r3, [pc, #284]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800ecec:	f8cd b000 	str.w	fp, [sp]
 800ecf0:	f8cd b004 	str.w	fp, [sp, #4]
 800ecf4:	9603      	str	r6, [sp, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	9305      	str	r3, [sp, #20]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	4632      	mov	r2, r6
 800ed00:	465b      	mov	r3, fp
 800ed02:	f8cd c018 	str.w	ip, [sp, #24]
 800ed06:	eb04 0a06 	add.w	sl, r4, r6
 800ed0a:	f7fd fc59 	bl	800c5c0 <LCD_DrawBitmap>
 800ed0e:	f016 0f01 	tst.w	r6, #1
 800ed12:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ed16:	d044      	beq.n	800eda2 <GUI_BMP_DrawEx+0x42e>
 800ed18:	a81b      	add	r0, sp, #108	; 0x6c
 800ed1a:	4659      	mov	r1, fp
 800ed1c:	aa1e      	add	r2, sp, #120	; 0x78
 800ed1e:	4663      	mov	r3, ip
 800ed20:	f7ff fc10 	bl	800e544 <GUI_BMP__ReadData>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d03c      	beq.n	800eda2 <GUI_BMP_DrawEx+0x42e>
 800ed28:	e057      	b.n	800edda <GUI_BMP_DrawEx+0x466>
 800ed2a:	9b07      	ldr	r3, [sp, #28]
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d128      	bne.n	800ed82 <GUI_BMP_DrawEx+0x40e>
 800ed30:	f006 030f 	and.w	r3, r6, #15
 800ed34:	0936      	lsrs	r6, r6, #4
 800ed36:	42b3      	cmp	r3, r6
 800ed38:	b21b      	sxth	r3, r3
 800ed3a:	d003      	beq.n	800ed44 <GUI_BMP_DrawEx+0x3d0>
 800ed3c:	00b6      	lsls	r6, r6, #2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4682      	mov	sl, r0
 800ed42:	e004      	b.n	800ed4e <GUI_BMP_DrawEx+0x3da>
 800ed44:	4a30      	ldr	r2, [pc, #192]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800ed46:	6812      	ldr	r2, [r2, #0]
 800ed48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ed4c:	e01d      	b.n	800ed8a <GUI_BMP_DrawEx+0x416>
 800ed4e:	45da      	cmp	sl, fp
 800ed50:	eb0a 0004 	add.w	r0, sl, r4
 800ed54:	da12      	bge.n	800ed7c <GUI_BMP_DrawEx+0x408>
 800ed56:	4a2d      	ldr	r2, [pc, #180]	; (800ee0c <GUI_BMP_DrawEx+0x498>)
 800ed58:	492b      	ldr	r1, [pc, #172]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800ed5a:	6812      	ldr	r2, [r2, #0]
 800ed5c:	6809      	ldr	r1, [r1, #0]
 800ed5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ed60:	f01a 0f01 	tst.w	sl, #1
 800ed64:	bf14      	ite	ne
 800ed66:	58c9      	ldrne	r1, [r1, r3]
 800ed68:	5989      	ldreq	r1, [r1, r6]
 800ed6a:	6011      	str	r1, [r2, #0]
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	9306      	str	r3, [sp, #24]
 800ed70:	f10a 0a01 	add.w	sl, sl, #1
 800ed74:	f7fd faa2 	bl	800c2bc <LCD_DrawPixel>
 800ed78:	9b06      	ldr	r3, [sp, #24]
 800ed7a:	e7e8      	b.n	800ed4e <GUI_BMP_DrawEx+0x3da>
 800ed7c:	eb04 0a0b 	add.w	sl, r4, fp
 800ed80:	e00f      	b.n	800eda2 <GUI_BMP_DrawEx+0x42e>
 800ed82:	4b21      	ldr	r3, [pc, #132]	; (800ee08 <GUI_BMP_DrawEx+0x494>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800ed8a:	4b20      	ldr	r3, [pc, #128]	; (800ee0c <GUI_BMP_DrawEx+0x498>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed90:	eb04 0a0b 	add.w	sl, r4, fp
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	4620      	mov	r0, r4
 800ed98:	4629      	mov	r1, r5
 800ed9a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ed9e:	f7fd fabb 	bl	800c318 <LCD_DrawHLine>
 800eda2:	4654      	mov	r4, sl
 800eda4:	e6e8      	b.n	800eb78 <GUI_BMP_DrawEx+0x204>
 800eda6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800edaa:	2b10      	cmp	r3, #16
 800edac:	d00a      	beq.n	800edc4 <GUI_BMP_DrawEx+0x450>
 800edae:	2b20      	cmp	r3, #32
 800edb0:	d113      	bne.n	800edda <GUI_BMP_DrawEx+0x466>
 800edb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edb6:	9200      	str	r2, [sp, #0]
 800edb8:	009a      	lsls	r2, r3, #2
 800edba:	9201      	str	r2, [sp, #4]
 800edbc:	2204      	movs	r2, #4
 800edbe:	9202      	str	r2, [sp, #8]
 800edc0:	4a13      	ldr	r2, [pc, #76]	; (800ee10 <GUI_BMP_DrawEx+0x49c>)
 800edc2:	e6b1      	b.n	800eb28 <GUI_BMP_DrawEx+0x1b4>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	4b11      	ldr	r3, [pc, #68]	; (800ee10 <GUI_BMP_DrawEx+0x49c>)
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	a81b      	add	r0, sp, #108	; 0x6c
 800edce:	4639      	mov	r1, r7
 800edd0:	4642      	mov	r2, r8
 800edd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edd4:	f7ff fcde 	bl	800e794 <_DrawBitmap_16bpp>
 800edd8:	e6ae      	b.n	800eb38 <GUI_BMP_DrawEx+0x1c4>
 800edda:	f04f 0901 	mov.w	r9, #1
 800edde:	f7fa fccf 	bl	8009780 <WM__GetNextIVR>
 800ede2:	9a08      	ldr	r2, [sp, #32]
 800ede4:	3201      	adds	r2, #1
 800ede6:	9208      	str	r2, [sp, #32]
 800ede8:	2800      	cmp	r0, #0
 800edea:	f47f adf6 	bne.w	800e9da <GUI_BMP_DrawEx+0x66>
 800edee:	4648      	mov	r0, r9
 800edf0:	e006      	b.n	800ee00 <GUI_BMP_DrawEx+0x48c>
 800edf2:	2001      	movs	r0, #1
 800edf4:	e004      	b.n	800ee00 <GUI_BMP_DrawEx+0x48c>
 800edf6:	6833      	ldr	r3, [r6, #0]
 800edf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfc:	601a      	str	r2, [r3, #0]
 800edfe:	e7ee      	b.n	800edde <GUI_BMP_DrawEx+0x46a>
 800ee00:	b025      	add	sp, #148	; 0x94
 800ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee06:	bf00      	nop
 800ee08:	200057d4 	.word	0x200057d4
 800ee0c:	20000084 	.word	0x20000084
 800ee10:	0800e621 	.word	0x0800e621

0800ee14 <_PushFreeBlock>:
 800ee14:	4b07      	ldr	r3, [pc, #28]	; (800ee34 <_PushFreeBlock+0x20>)
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ee1a:	3201      	adds	r2, #1
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	605a      	str	r2, [r3, #4]
 800ee20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee22:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800ee26:	6061      	str	r1, [r4, #4]
 800ee28:	2100      	movs	r1, #0
 800ee2a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800ee2e:	6258      	str	r0, [r3, #36]	; 0x24
 800ee30:	bd10      	pop	{r4, pc}
 800ee32:	bf00      	nop
 800ee34:	200056e4 	.word	0x200056e4

0800ee38 <_RemoveFreeBlock>:
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	6842      	ldr	r2, [r0, #4]
 800ee3c:	230f      	movs	r3, #15
 800ee3e:	490d      	ldr	r1, [pc, #52]	; (800ee74 <_RemoveFreeBlock+0x3c>)
 800ee40:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800ee44:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800ee46:	42a2      	cmp	r2, r4
 800ee48:	d203      	bcs.n	800ee52 <_RemoveFreeBlock+0x1a>
 800ee4a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ee4e:	d2f6      	bcs.n	800ee3e <_RemoveFreeBlock+0x6>
 800ee50:	bd10      	pop	{r4, pc}
 800ee52:	2b0f      	cmp	r3, #15
 800ee54:	d80c      	bhi.n	800ee70 <_RemoveFreeBlock+0x38>
 800ee56:	680c      	ldr	r4, [r1, #0]
 800ee58:	1aa2      	subs	r2, r4, r2
 800ee5a:	600a      	str	r2, [r1, #0]
 800ee5c:	6882      	ldr	r2, [r0, #8]
 800ee5e:	68c0      	ldr	r0, [r0, #12]
 800ee60:	b102      	cbz	r2, 800ee64 <_RemoveFreeBlock+0x2c>
 800ee62:	6050      	str	r0, [r2, #4]
 800ee64:	b108      	cbz	r0, 800ee6a <_RemoveFreeBlock+0x32>
 800ee66:	6002      	str	r2, [r0, #0]
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ee6e:	645a      	str	r2, [r3, #68]	; 0x44
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	bf00      	nop
 800ee74:	200056e4 	.word	0x200056e4

0800ee78 <_AddFreeMemory>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	4e26      	ldr	r6, [pc, #152]	; (800ef14 <_AddFreeMemory+0x9c>)
 800ee7c:	68f3      	ldr	r3, [r6, #12]
 800ee7e:	1e5a      	subs	r2, r3, #1
 800ee80:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ee82:	4605      	mov	r5, r0
 800ee84:	4413      	add	r3, r2
 800ee86:	1808      	adds	r0, r1, r0
 800ee88:	4298      	cmp	r0, r3
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	d805      	bhi.n	800ee9a <_AddFreeMemory+0x22>
 800ee8e:	594b      	ldr	r3, [r1, r5]
 800ee90:	b91b      	cbnz	r3, 800ee9a <_AddFreeMemory+0x22>
 800ee92:	6843      	ldr	r3, [r0, #4]
 800ee94:	441d      	add	r5, r3
 800ee96:	f7ff ffcf 	bl	800ee38 <_RemoveFreeBlock>
 800ee9a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ee9c:	429c      	cmp	r4, r3
 800ee9e:	d90a      	bls.n	800eeb6 <_AddFreeMemory+0x3e>
 800eea0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800eea4:	1be7      	subs	r7, r4, r7
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	b92b      	cbnz	r3, 800eeb6 <_AddFreeMemory+0x3e>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4638      	mov	r0, r7
 800eeae:	441d      	add	r5, r3
 800eeb0:	f7ff ffc2 	bl	800ee38 <_RemoveFreeBlock>
 800eeb4:	463c      	mov	r4, r7
 800eeb6:	230f      	movs	r3, #15
 800eeb8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800eebc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eebe:	4295      	cmp	r5, r2
 800eec0:	d203      	bcs.n	800eeca <_AddFreeMemory+0x52>
 800eec2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800eec6:	d2f7      	bcs.n	800eeb8 <_AddFreeMemory+0x40>
 800eec8:	e022      	b.n	800ef10 <_AddFreeMemory+0x98>
 800eeca:	2b0f      	cmp	r3, #15
 800eecc:	d820      	bhi.n	800ef10 <_AddFreeMemory+0x98>
 800eece:	3308      	adds	r3, #8
 800eed0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800eed4:	1961      	adds	r1, r4, r5
 800eed6:	6852      	ldr	r2, [r2, #4]
 800eed8:	60a2      	str	r2, [r4, #8]
 800eeda:	2000      	movs	r0, #0
 800eedc:	e884 0021 	stmia.w	r4, {r0, r5}
 800eee0:	6124      	str	r4, [r4, #16]
 800eee2:	f841 5c04 	str.w	r5, [r1, #-4]
 800eee6:	f104 0108 	add.w	r1, r4, #8
 800eeea:	b102      	cbz	r2, 800eeee <_AddFreeMemory+0x76>
 800eeec:	6051      	str	r1, [r2, #4]
 800eeee:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800eef2:	60e0      	str	r0, [r4, #12]
 800eef4:	6059      	str	r1, [r3, #4]
 800eef6:	6833      	ldr	r3, [r6, #0]
 800eef8:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800eefc:	4a05      	ldr	r2, [pc, #20]	; (800ef14 <_AddFreeMemory+0x9c>)
 800eefe:	442b      	add	r3, r5
 800ef00:	6033      	str	r3, [r6, #0]
 800ef02:	b929      	cbnz	r1, 800ef10 <_AddFreeMemory+0x98>
 800ef04:	68d1      	ldr	r1, [r2, #12]
 800ef06:	1acb      	subs	r3, r1, r3
 800ef08:	6891      	ldr	r1, [r2, #8]
 800ef0a:	4299      	cmp	r1, r3
 800ef0c:	bf38      	it	cc
 800ef0e:	6093      	strcc	r3, [r2, #8]
 800ef10:	4628      	mov	r0, r5
 800ef12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef14:	200056e4 	.word	0x200056e4

0800ef18 <_RemoveHoles>:
 800ef18:	4b25      	ldr	r3, [pc, #148]	; (800efb0 <_RemoveHoles+0x98>)
 800ef1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1e:	68da      	ldr	r2, [r3, #12]
 800ef20:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ef22:	3a01      	subs	r2, #1
 800ef24:	4682      	mov	sl, r0
 800ef26:	eb02 0904 	add.w	r9, r2, r4
 800ef2a:	469b      	mov	fp, r3
 800ef2c:	e894 0028 	ldmia.w	r4, {r3, r5}
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d133      	bne.n	800ef9c <_RemoveHoles+0x84>
 800ef34:	eb04 0805 	add.w	r8, r4, r5
 800ef38:	45c8      	cmp	r8, r9
 800ef3a:	d22f      	bcs.n	800ef9c <_RemoveHoles+0x84>
 800ef3c:	f854 c005 	ldr.w	ip, [r4, r5]
 800ef40:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800ef44:	f1bc 0f00 	cmp.w	ip, #0
 800ef48:	d028      	beq.n	800ef9c <_RemoveHoles+0x84>
 800ef4a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800ef4e:	4f18      	ldr	r7, [pc, #96]	; (800efb0 <_RemoveHoles+0x98>)
 800ef50:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d121      	bne.n	800ef9c <_RemoveHoles+0x84>
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	e88d 1008 	stmia.w	sp, {r3, ip}
 800ef60:	f7ff ff6a 	bl	800ee38 <_RemoveFreeBlock>
 800ef64:	f8d8 1000 	ldr.w	r1, [r8]
 800ef68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ef6e:	4620      	mov	r0, r4
 800ef70:	6054      	str	r4, [r2, #4]
 800ef72:	4641      	mov	r1, r8
 800ef74:	4632      	mov	r2, r6
 800ef76:	f003 f9d3 	bl	8012320 <memmove>
 800ef7a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800ef7e:	459c      	cmp	ip, r3
 800ef80:	d102      	bne.n	800ef88 <_RemoveHoles+0x70>
 800ef82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef84:	1b5b      	subs	r3, r3, r5
 800ef86:	637b      	str	r3, [r7, #52]	; 0x34
 800ef88:	4628      	mov	r0, r5
 800ef8a:	19a1      	adds	r1, r4, r6
 800ef8c:	f7ff ff74 	bl	800ee78 <_AddFreeMemory>
 800ef90:	f1ba 0f00 	cmp.w	sl, #0
 800ef94:	d001      	beq.n	800ef9a <_RemoveHoles+0x82>
 800ef96:	4582      	cmp	sl, r0
 800ef98:	d905      	bls.n	800efa6 <_RemoveHoles+0x8e>
 800ef9a:	4635      	mov	r5, r6
 800ef9c:	442c      	add	r4, r5
 800ef9e:	454c      	cmp	r4, r9
 800efa0:	d3c4      	bcc.n	800ef2c <_RemoveHoles+0x14>
 800efa2:	2001      	movs	r0, #1
 800efa4:	e000      	b.n	800efa8 <_RemoveHoles+0x90>
 800efa6:	2000      	movs	r0, #0
 800efa8:	b003      	add	sp, #12
 800efaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efae:	bf00      	nop
 800efb0:	200056e4 	.word	0x200056e4

0800efb4 <GUI_ALLOC_FreeFixedBlock>:
 800efb4:	b128      	cbz	r0, 800efc2 <GUI_ALLOC_FreeFixedBlock+0xe>
 800efb6:	4a03      	ldr	r2, [pc, #12]	; (800efc4 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800efb8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800efba:	6003      	str	r3, [r0, #0]
 800efbc:	b103      	cbz	r3, 800efc0 <GUI_ALLOC_FreeFixedBlock+0xc>
 800efbe:	6058      	str	r0, [r3, #4]
 800efc0:	63d0      	str	r0, [r2, #60]	; 0x3c
 800efc2:	4770      	bx	lr
 800efc4:	200056e4 	.word	0x200056e4

0800efc8 <GUI_ALLOC_h2p>:
 800efc8:	4b03      	ldr	r3, [pc, #12]	; (800efd8 <GUI_ALLOC_h2p+0x10>)
 800efca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efcc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800efd0:	6840      	ldr	r0, [r0, #4]
 800efd2:	3008      	adds	r0, #8
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	200056e4 	.word	0x200056e4

0800efdc <GUI_ALLOC_LockH>:
 800efdc:	4b05      	ldr	r3, [pc, #20]	; (800eff4 <GUI_ALLOC_LockH+0x18>)
 800efde:	69d9      	ldr	r1, [r3, #28]
 800efe0:	3101      	adds	r1, #1
 800efe2:	61d9      	str	r1, [r3, #28]
 800efe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe6:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800efea:	3101      	adds	r1, #1
 800efec:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800eff0:	f7ff bfea 	b.w	800efc8 <GUI_ALLOC_h2p>
 800eff4:	200056e4 	.word	0x200056e4

0800eff8 <GUI_ALLOC_UnlockH>:
 800eff8:	b530      	push	{r4, r5, lr}
 800effa:	6802      	ldr	r2, [r0, #0]
 800effc:	4b09      	ldr	r3, [pc, #36]	; (800f024 <GUI_ALLOC_UnlockH+0x2c>)
 800effe:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800f002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f004:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800f008:	2c01      	cmp	r4, #1
 800f00a:	d903      	bls.n	800f014 <GUI_ALLOC_UnlockH+0x1c>
 800f00c:	69dd      	ldr	r5, [r3, #28]
 800f00e:	b10d      	cbz	r5, 800f014 <GUI_ALLOC_UnlockH+0x1c>
 800f010:	3d01      	subs	r5, #1
 800f012:	61dd      	str	r5, [r3, #28]
 800f014:	3c01      	subs	r4, #1
 800f016:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800f01a:	2300      	movs	r3, #0
 800f01c:	6003      	str	r3, [r0, #0]
 800f01e:	4618      	mov	r0, r3
 800f020:	bd30      	pop	{r4, r5, pc}
 800f022:	bf00      	nop
 800f024:	200056e4 	.word	0x200056e4

0800f028 <GUI_ALLOC_AssignMemory>:
 800f028:	4b02      	ldr	r3, [pc, #8]	; (800f034 <GUI_ALLOC_AssignMemory+0xc>)
 800f02a:	f021 0103 	bic.w	r1, r1, #3
 800f02e:	6018      	str	r0, [r3, #0]
 800f030:	6059      	str	r1, [r3, #4]
 800f032:	4770      	bx	lr
 800f034:	200055e8 	.word	0x200055e8

0800f038 <GUI_ALLOC_GetSize>:
 800f038:	b130      	cbz	r0, 800f048 <GUI_ALLOC_GetSize+0x10>
 800f03a:	4b04      	ldr	r3, [pc, #16]	; (800f04c <GUI_ALLOC_GetSize+0x14>)
 800f03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f042:	6843      	ldr	r3, [r0, #4]
 800f044:	6858      	ldr	r0, [r3, #4]
 800f046:	380c      	subs	r0, #12
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	200056e4 	.word	0x200056e4

0800f050 <GUI_ALLOC_Free>:
 800f050:	b510      	push	{r4, lr}
 800f052:	4604      	mov	r4, r0
 800f054:	b160      	cbz	r0, 800f070 <GUI_ALLOC_Free+0x20>
 800f056:	4b07      	ldr	r3, [pc, #28]	; (800f074 <GUI_ALLOC_Free+0x24>)
 800f058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f05a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f05e:	6859      	ldr	r1, [r3, #4]
 800f060:	6848      	ldr	r0, [r1, #4]
 800f062:	f7ff ff09 	bl	800ee78 <_AddFreeMemory>
 800f066:	4620      	mov	r0, r4
 800f068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f06c:	f7ff bed2 	b.w	800ee14 <_PushFreeBlock>
 800f070:	bd10      	pop	{r4, pc}
 800f072:	bf00      	nop
 800f074:	200056e4 	.word	0x200056e4

0800f078 <_EnlargeBlocks>:
 800f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07c:	4c23      	ldr	r4, [pc, #140]	; (800f10c <_EnlargeBlocks+0x94>)
 800f07e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f080:	b93b      	cbnz	r3, 800f092 <_EnlargeBlocks+0x1a>
 800f082:	4b23      	ldr	r3, [pc, #140]	; (800f110 <_EnlargeBlocks+0x98>)
 800f084:	689d      	ldr	r5, [r3, #8]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	3508      	adds	r5, #8
 800f08a:	fbb3 f5f5 	udiv	r5, r3, r5
 800f08e:	3502      	adds	r5, #2
 800f090:	e003      	b.n	800f09a <_EnlargeBlocks+0x22>
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	1d1d      	adds	r5, r3, #4
 800f096:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800f09a:	00e8      	lsls	r0, r5, #3
 800f09c:	f000 f8f4 	bl	800f288 <_Alloc>
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	b368      	cbz	r0, 800f100 <_EnlargeBlocks+0x88>
 800f0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0a6:	6922      	ldr	r2, [r4, #16]
 800f0a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f0aa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800f0ae:	00d2      	lsls	r2, r2, #3
 800f0b0:	685e      	ldr	r6, [r3, #4]
 800f0b2:	4b18      	ldr	r3, [pc, #96]	; (800f114 <_EnlargeBlocks+0x9c>)
 800f0b4:	3608      	adds	r6, #8
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	4798      	blx	r3
 800f0bc:	6922      	ldr	r2, [r4, #16]
 800f0be:	6366      	str	r6, [r4, #52]	; 0x34
 800f0c0:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800f0c4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800f0c8:	3104      	adds	r1, #4
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	1e68      	subs	r0, r5, #1
 800f0ce:	4283      	cmp	r3, r0
 800f0d0:	f101 0108 	add.w	r1, r1, #8
 800f0d4:	d203      	bcs.n	800f0de <_EnlargeBlocks+0x66>
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	f841 3c08 	str.w	r3, [r1, #-8]
 800f0dc:	e7f6      	b.n	800f0cc <_EnlargeBlocks+0x54>
 800f0de:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f0e2:	2600      	movs	r6, #0
 800f0e4:	605e      	str	r6, [r3, #4]
 800f0e6:	6863      	ldr	r3, [r4, #4]
 800f0e8:	6262      	str	r2, [r4, #36]	; 0x24
 800f0ea:	1a9b      	subs	r3, r3, r2
 800f0ec:	442b      	add	r3, r5
 800f0ee:	6063      	str	r3, [r4, #4]
 800f0f0:	6125      	str	r5, [r4, #16]
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	b13f      	cbz	r7, 800f106 <_EnlargeBlocks+0x8e>
 800f0f6:	f7ff ffab 	bl	800f050 <GUI_ALLOC_Free>
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f100:	2001      	movs	r0, #1
 800f102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10a:	bf00      	nop
 800f10c:	200056e4 	.word	0x200056e4
 800f110:	200055e8 	.word	0x200055e8
 800f114:	20000074 	.word	0x20000074

0800f118 <_InitOnce>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4916      	ldr	r1, [pc, #88]	; (800f174 <_InitOnce+0x5c>)
 800f11c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800f120:	bb3b      	cbnz	r3, 800f172 <_InitOnce+0x5a>
 800f122:	4a15      	ldr	r2, [pc, #84]	; (800f178 <_InitOnce+0x60>)
 800f124:	2301      	movs	r3, #1
 800f126:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800f12a:	6893      	ldr	r3, [r2, #8]
 800f12c:	b913      	cbnz	r3, 800f134 <_InitOnce+0x1c>
 800f12e:	6853      	ldr	r3, [r2, #4]
 800f130:	089b      	lsrs	r3, r3, #2
 800f132:	6093      	str	r3, [r2, #8]
 800f134:	235a      	movs	r3, #90	; 0x5a
 800f136:	620b      	str	r3, [r1, #32]
 800f138:	2300      	movs	r3, #0
 800f13a:	2510      	movs	r5, #16
 800f13c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800f140:	409d      	lsls	r5, r3
 800f142:	3301      	adds	r3, #1
 800f144:	2b10      	cmp	r3, #16
 800f146:	4c0b      	ldr	r4, [pc, #44]	; (800f174 <_InitOnce+0x5c>)
 800f148:	6405      	str	r5, [r0, #64]	; 0x40
 800f14a:	d1f6      	bne.n	800f13a <_InitOnce+0x22>
 800f14c:	6850      	ldr	r0, [r2, #4]
 800f14e:	6811      	ldr	r1, [r2, #0]
 800f150:	63a1      	str	r1, [r4, #56]	; 0x38
 800f152:	2302      	movs	r3, #2
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	f1a0 0314 	sub.w	r3, r0, #20
 800f15a:	440b      	add	r3, r1
 800f15c:	2501      	movs	r5, #1
 800f15e:	6363      	str	r3, [r4, #52]	; 0x34
 800f160:	60e0      	str	r0, [r4, #12]
 800f162:	605d      	str	r5, [r3, #4]
 800f164:	6265      	str	r5, [r4, #36]	; 0x24
 800f166:	6065      	str	r5, [r4, #4]
 800f168:	f7ff fe86 	bl	800ee78 <_AddFreeMemory>
 800f16c:	f7ff ff84 	bl	800f078 <_EnlargeBlocks>
 800f170:	6325      	str	r5, [r4, #48]	; 0x30
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	200056e4 	.word	0x200056e4
 800f178:	200055e8 	.word	0x200055e8

0800f17c <GUI_ALLOC_GetFixedBlock>:
 800f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f180:	4605      	mov	r5, r0
 800f182:	4e26      	ldr	r6, [pc, #152]	; (800f21c <GUI_ALLOC_GetFixedBlock+0xa0>)
 800f184:	3503      	adds	r5, #3
 800f186:	f7ff ffc7 	bl	800f118 <_InitOnce>
 800f18a:	f025 0503 	bic.w	r5, r5, #3
 800f18e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800f190:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800f192:	3504      	adds	r5, #4
 800f194:	429d      	cmp	r5, r3
 800f196:	bf38      	it	cc
 800f198:	461d      	movcc	r5, r3
 800f19a:	4614      	mov	r4, r2
 800f19c:	b12c      	cbz	r4, 800f1aa <GUI_ALLOC_GetFixedBlock+0x2e>
 800f19e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f1a2:	42ab      	cmp	r3, r5
 800f1a4:	d02c      	beq.n	800f200 <GUI_ALLOC_GetFixedBlock+0x84>
 800f1a6:	6824      	ldr	r4, [r4, #0]
 800f1a8:	e7f8      	b.n	800f19c <GUI_ALLOC_GetFixedBlock+0x20>
 800f1aa:	68f3      	ldr	r3, [r6, #12]
 800f1ac:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800f1ae:	eb02 0803 	add.w	r8, r2, r3
 800f1b2:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f1b6:	ebc7 0708 	rsb	r7, r7, r8
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	b133      	cbz	r3, 800f1cc <GUI_ALLOC_GetFixedBlock+0x50>
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f7ff feaa 	bl	800ef18 <_RemoveHoles>
 800f1c4:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f1c8:	ebc7 0708 	rsb	r7, r7, r8
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	bb13      	cbnz	r3, 800f216 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	42ab      	cmp	r3, r5
 800f1d4:	db1f      	blt.n	800f216 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	1d1c      	adds	r4, r3, #4
 800f1da:	f7ff fe2d 	bl	800ee38 <_RemoveFreeBlock>
 800f1de:	68f3      	ldr	r3, [r6, #12]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	1b5b      	subs	r3, r3, r5
 800f1e4:	60f3      	str	r3, [r6, #12]
 800f1e6:	6973      	ldr	r3, [r6, #20]
 800f1e8:	1b64      	subs	r4, r4, r5
 800f1ea:	442b      	add	r3, r5
 800f1ec:	1b40      	subs	r0, r0, r5
 800f1ee:	443c      	add	r4, r7
 800f1f0:	6173      	str	r3, [r6, #20]
 800f1f2:	d002      	beq.n	800f1fa <GUI_ALLOC_GetFixedBlock+0x7e>
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	f7ff fe3f 	bl	800ee78 <_AddFreeMemory>
 800f1fa:	f844 5c04 	str.w	r5, [r4, #-4]
 800f1fe:	e00a      	b.n	800f216 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	b10b      	cbz	r3, 800f208 <GUI_ALLOC_GetFixedBlock+0x8c>
 800f204:	6861      	ldr	r1, [r4, #4]
 800f206:	6059      	str	r1, [r3, #4]
 800f208:	6861      	ldr	r1, [r4, #4]
 800f20a:	b101      	cbz	r1, 800f20e <GUI_ALLOC_GetFixedBlock+0x92>
 800f20c:	600b      	str	r3, [r1, #0]
 800f20e:	42a2      	cmp	r2, r4
 800f210:	d101      	bne.n	800f216 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f216:	4620      	mov	r0, r4
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	200056e4 	.word	0x200056e4

0800f220 <GUI_ALLOC_GetMaxSize>:
 800f220:	b508      	push	{r3, lr}
 800f222:	f7ff ff79 	bl	800f118 <_InitOnce>
 800f226:	2200      	movs	r2, #0
 800f228:	4b0b      	ldr	r3, [pc, #44]	; (800f258 <GUI_ALLOC_GetMaxSize+0x38>)
 800f22a:	4413      	add	r3, r2
 800f22c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f230:	b113      	cbz	r3, 800f238 <GUI_ALLOC_GetMaxSize+0x18>
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	2000      	movs	r0, #0
 800f236:	e00b      	b.n	800f250 <GUI_ALLOC_GetMaxSize+0x30>
 800f238:	3a08      	subs	r2, #8
 800f23a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800f23e:	d1f3      	bne.n	800f228 <GUI_ALLOC_GetMaxSize+0x8>
 800f240:	e7f8      	b.n	800f234 <GUI_ALLOC_GetMaxSize+0x14>
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	4290      	cmp	r0, r2
 800f248:	bf38      	it	cc
 800f24a:	4610      	movcc	r0, r2
 800f24c:	b113      	cbz	r3, 800f254 <GUI_ALLOC_GetMaxSize+0x34>
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1f6      	bne.n	800f242 <GUI_ALLOC_GetMaxSize+0x22>
 800f254:	380c      	subs	r0, #12
 800f256:	bd08      	pop	{r3, pc}
 800f258:	200056e4 	.word	0x200056e4

0800f25c <GUI_ALLOC_RequestSize>:
 800f25c:	b508      	push	{r3, lr}
 800f25e:	f7ff ffdf 	bl	800f220 <GUI_ALLOC_GetMaxSize>
 800f262:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800f266:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f26a:	4a06      	ldr	r2, [pc, #24]	; (800f284 <GUI_ALLOC_RequestSize+0x28>)
 800f26c:	d904      	bls.n	800f278 <GUI_ALLOC_RequestSize+0x1c>
 800f26e:	fb90 f0f3 	sdiv	r0, r0, r3
 800f272:	6a13      	ldr	r3, [r2, #32]
 800f274:	4358      	muls	r0, r3
 800f276:	bd08      	pop	{r3, pc}
 800f278:	6a12      	ldr	r2, [r2, #32]
 800f27a:	4350      	muls	r0, r2
 800f27c:	fbb0 f0f3 	udiv	r0, r0, r3
 800f280:	bd08      	pop	{r3, pc}
 800f282:	bf00      	nop
 800f284:	200056e4 	.word	0x200056e4

0800f288 <_Alloc>:
 800f288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f28c:	4d38      	ldr	r5, [pc, #224]	; (800f370 <_Alloc+0xe8>)
 800f28e:	4604      	mov	r4, r0
 800f290:	f7ff ff42 	bl	800f118 <_InitOnce>
 800f294:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800f296:	682b      	ldr	r3, [r5, #0]
 800f298:	42bc      	cmp	r4, r7
 800f29a:	bf24      	itt	cs
 800f29c:	1ce7      	addcs	r7, r4, #3
 800f29e:	f027 0703 	biccs.w	r7, r7, #3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	429f      	cmp	r7, r3
 800f2a6:	4c32      	ldr	r4, [pc, #200]	; (800f370 <_Alloc+0xe8>)
 800f2a8:	d83e      	bhi.n	800f328 <_Alloc+0xa0>
 800f2aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2ac:	6862      	ldr	r2, [r4, #4]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d90f      	bls.n	800f2d2 <_Alloc+0x4a>
 800f2b2:	686b      	ldr	r3, [r5, #4]
 800f2b4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	606b      	str	r3, [r5, #4]
 800f2ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f2bc:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800f2c0:	eb03 0209 	add.w	r2, r3, r9
 800f2c4:	6852      	ldr	r2, [r2, #4]
 800f2c6:	626a      	str	r2, [r5, #36]	; 0x24
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800f2ce:	b956      	cbnz	r6, 800f2e6 <_Alloc+0x5e>
 800f2d0:	e02a      	b.n	800f328 <_Alloc+0xa0>
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	6323      	str	r3, [r4, #48]	; 0x30
 800f2d6:	f7ff fecf 	bl	800f078 <_EnlargeBlocks>
 800f2da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2dc:	3301      	adds	r3, #1
 800f2de:	6323      	str	r3, [r4, #48]	; 0x30
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d0e6      	beq.n	800f2b2 <_Alloc+0x2a>
 800f2e4:	e020      	b.n	800f328 <_Alloc+0xa0>
 800f2e6:	230f      	movs	r3, #15
 800f2e8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f2ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f2ee:	4297      	cmp	r7, r2
 800f2f0:	d20c      	bcs.n	800f30c <_Alloc+0x84>
 800f2f2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f2f6:	d2f7      	bcs.n	800f2e8 <_Alloc+0x60>
 800f2f8:	e008      	b.n	800f30c <_Alloc+0x84>
 800f2fa:	6894      	ldr	r4, [r2, #8]
 800f2fc:	b12c      	cbz	r4, 800f30a <_Alloc+0x82>
 800f2fe:	6862      	ldr	r2, [r4, #4]
 800f300:	4297      	cmp	r7, r2
 800f302:	d914      	bls.n	800f32e <_Alloc+0xa6>
 800f304:	68a2      	ldr	r2, [r4, #8]
 800f306:	2a00      	cmp	r2, #0
 800f308:	d1f7      	bne.n	800f2fa <_Alloc+0x72>
 800f30a:	3301      	adds	r3, #1
 800f30c:	2b0f      	cmp	r3, #15
 800f30e:	d803      	bhi.n	800f318 <_Alloc+0x90>
 800f310:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f314:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f316:	e7f6      	b.n	800f306 <_Alloc+0x7e>
 800f318:	4638      	mov	r0, r7
 800f31a:	f7ff fdfd 	bl	800ef18 <_RemoveHoles>
 800f31e:	2800      	cmp	r0, #0
 800f320:	d0e1      	beq.n	800f2e6 <_Alloc+0x5e>
 800f322:	4630      	mov	r0, r6
 800f324:	f7ff fd76 	bl	800ee14 <_PushFreeBlock>
 800f328:	2000      	movs	r0, #0
 800f32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f332:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f334:	ebc7 0208 	rsb	r2, r7, r8
 800f338:	330c      	adds	r3, #12
 800f33a:	4620      	mov	r0, r4
 800f33c:	429a      	cmp	r2, r3
 800f33e:	bf38      	it	cc
 800f340:	4647      	movcc	r7, r8
 800f342:	f7ff fd79 	bl	800ee38 <_RemoveFreeBlock>
 800f346:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f348:	444b      	add	r3, r9
 800f34a:	19e1      	adds	r1, r4, r7
 800f34c:	605c      	str	r4, [r3, #4]
 800f34e:	45b8      	cmp	r8, r7
 800f350:	f04f 0300 	mov.w	r3, #0
 800f354:	e884 00c0 	stmia.w	r4, {r6, r7}
 800f358:	60a3      	str	r3, [r4, #8]
 800f35a:	6124      	str	r4, [r4, #16]
 800f35c:	f841 7c04 	str.w	r7, [r1, #-4]
 800f360:	dd03      	ble.n	800f36a <_Alloc+0xe2>
 800f362:	ebc7 0008 	rsb	r0, r7, r8
 800f366:	f7ff fd87 	bl	800ee78 <_AddFreeMemory>
 800f36a:	4630      	mov	r0, r6
 800f36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f370:	200056e4 	.word	0x200056e4

0800f374 <GUI_ALLOC_AllocNoInit>:
 800f374:	b108      	cbz	r0, 800f37a <GUI_ALLOC_AllocNoInit+0x6>
 800f376:	f7ff bf87 	b.w	800f288 <_Alloc>
 800f37a:	4770      	bx	lr

0800f37c <GUI_ALLOC_FreePtr>:
 800f37c:	b510      	push	{r4, lr}
 800f37e:	4604      	mov	r4, r0
 800f380:	6800      	ldr	r0, [r0, #0]
 800f382:	f7ff fe65 	bl	800f050 <GUI_ALLOC_Free>
 800f386:	2300      	movs	r3, #0
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd10      	pop	{r4, pc}

0800f38c <GUI_ALLOC_AllocZero>:
 800f38c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f38e:	4605      	mov	r5, r0
 800f390:	f7ff fff0 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 800f394:	4606      	mov	r6, r0
 800f396:	b160      	cbz	r0, 800f3b2 <GUI_ALLOC_AllocZero+0x26>
 800f398:	f7ff fe20 	bl	800efdc <GUI_ALLOC_LockH>
 800f39c:	ac02      	add	r4, sp, #8
 800f39e:	4b06      	ldr	r3, [pc, #24]	; (800f3b8 <GUI_ALLOC_AllocZero+0x2c>)
 800f3a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	462a      	mov	r2, r5
 800f3aa:	4798      	blx	r3
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f7ff fe23 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	b002      	add	sp, #8
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	20000070 	.word	0x20000070

0800f3bc <LCD_Index2Color_M555>:
 800f3bc:	4b07      	ldr	r3, [pc, #28]	; (800f3dc <LCD_Index2Color_M555+0x20>)
 800f3be:	f000 021f 	and.w	r2, r0, #31
 800f3c2:	5c99      	ldrb	r1, [r3, r2]
 800f3c4:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800f3c8:	f3c0 1044 	ubfx	r0, r0, #5, #5
 800f3cc:	5c9a      	ldrb	r2, [r3, r2]
 800f3ce:	5c18      	ldrb	r0, [r3, r0]
 800f3d0:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800f3d4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	080159da 	.word	0x080159da

0800f3e0 <LCD_Index2Color_888>:
 800f3e0:	4770      	bx	lr

0800f3e2 <LCD_Index2Color_8888>:
 800f3e2:	4770      	bx	lr

0800f3e4 <_Color2Index_8888>:
 800f3e4:	4770      	bx	lr

0800f3e6 <_GetIndexMask_8888>:
 800f3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ea:	4770      	bx	lr

0800f3ec <_Color2IndexBulk>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	f850 4b04 	ldr.w	r4, [r0], #4
 800f3f2:	600c      	str	r4, [r1, #0]
 800f3f4:	3a01      	subs	r2, #1
 800f3f6:	4419      	add	r1, r3
 800f3f8:	d1f9      	bne.n	800f3ee <_Color2IndexBulk+0x2>
 800f3fa:	bd10      	pop	{r4, pc}

0800f3fc <_Index2ColorBulk>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	6804      	ldr	r4, [r0, #0]
 800f400:	f841 4b04 	str.w	r4, [r1], #4
 800f404:	3a01      	subs	r2, #1
 800f406:	4418      	add	r0, r3
 800f408:	d1f9      	bne.n	800f3fe <_Index2ColorBulk+0x2>
 800f40a:	bd10      	pop	{r4, pc}

0800f40c <LCD_Index2Color_565>:
 800f40c:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800f410:	4a06      	ldr	r2, [pc, #24]	; (800f42c <LCD_Index2Color_565+0x20>)
 800f412:	5cd1      	ldrb	r1, [r2, r3]
 800f414:	4b06      	ldr	r3, [pc, #24]	; (800f430 <LCD_Index2Color_565+0x24>)
 800f416:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800f41a:	f000 001f 	and.w	r0, r0, #31
 800f41e:	5c9a      	ldrb	r2, [r3, r2]
 800f420:	5c18      	ldrb	r0, [r3, r0]
 800f422:	0412      	lsls	r2, r2, #16
 800f424:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800f428:	4410      	add	r0, r2
 800f42a:	4770      	bx	lr
 800f42c:	080159fa 	.word	0x080159fa
 800f430:	080159da 	.word	0x080159da

0800f434 <_Color2Index_565>:
 800f434:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f438:	4a06      	ldr	r2, [pc, #24]	; (800f454 <_Color2Index_565+0x20>)
 800f43a:	5cd1      	ldrb	r1, [r2, r3]
 800f43c:	4b06      	ldr	r3, [pc, #24]	; (800f458 <_Color2Index_565+0x24>)
 800f43e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f442:	b2c0      	uxtb	r0, r0
 800f444:	5c9a      	ldrb	r2, [r3, r2]
 800f446:	5c18      	ldrb	r0, [r3, r0]
 800f448:	02d2      	lsls	r2, r2, #11
 800f44a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800f44e:	4410      	add	r0, r2
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	08015a3a 	.word	0x08015a3a
 800f458:	080158da 	.word	0x080158da

0800f45c <_GetIndexMask_565>:
 800f45c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f460:	4770      	bx	lr
	...

0800f464 <_Color2IndexBulk>:
 800f464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f466:	f850 4b04 	ldr.w	r4, [r0], #4
 800f46a:	4e0a      	ldr	r6, [pc, #40]	; (800f494 <_Color2IndexBulk+0x30>)
 800f46c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800f470:	3a01      	subs	r2, #1
 800f472:	5d77      	ldrb	r7, [r6, r5]
 800f474:	4d08      	ldr	r5, [pc, #32]	; (800f498 <_Color2IndexBulk+0x34>)
 800f476:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800f47a:	b2e4      	uxtb	r4, r4
 800f47c:	5dae      	ldrb	r6, [r5, r6]
 800f47e:	5d2c      	ldrb	r4, [r5, r4]
 800f480:	ea4f 26c6 	mov.w	r6, r6, lsl #11
 800f484:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800f488:	4434      	add	r4, r6
 800f48a:	800c      	strh	r4, [r1, #0]
 800f48c:	4419      	add	r1, r3
 800f48e:	d1ea      	bne.n	800f466 <_Color2IndexBulk+0x2>
 800f490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f492:	bf00      	nop
 800f494:	08015a3a 	.word	0x08015a3a
 800f498:	080158da 	.word	0x080158da

0800f49c <_Index2ColorBulk>:
 800f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f49e:	1e54      	subs	r4, r2, #1
 800f4a0:	fb03 0004 	mla	r0, r3, r4, r0
 800f4a4:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800f4a8:	3c01      	subs	r4, #1
 800f4aa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f4ae:	8805      	ldrh	r5, [r0, #0]
 800f4b0:	4c0a      	ldr	r4, [pc, #40]	; (800f4dc <_Index2ColorBulk+0x40>)
 800f4b2:	0aee      	lsrs	r6, r5, #11
 800f4b4:	f005 071f 	and.w	r7, r5, #31
 800f4b8:	5da6      	ldrb	r6, [r4, r6]
 800f4ba:	5de4      	ldrb	r4, [r4, r7]
 800f4bc:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800f4c0:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800f4c4:	4e06      	ldr	r6, [pc, #24]	; (800f4e0 <_Index2ColorBulk+0x44>)
 800f4c6:	5d75      	ldrb	r5, [r6, r5]
 800f4c8:	3a01      	subs	r2, #1
 800f4ca:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800f4ce:	f841 4904 	str.w	r4, [r1], #-4
 800f4d2:	ebc3 0000 	rsb	r0, r3, r0
 800f4d6:	d1ea      	bne.n	800f4ae <_Index2ColorBulk+0x12>
 800f4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	080159da 	.word	0x080159da
 800f4e0:	080159fa 	.word	0x080159fa

0800f4e4 <WIDGET__GetInsideRect>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	f7f9 fe55 	bl	8009198 <WM__GetClientRectWin>
 800f4ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4fa:	f7fd bae2 	b.w	800cac2 <GUI__ReduceRect>
	...

0800f500 <WIDGET__Init>:
 800f500:	4b02      	ldr	r3, [pc, #8]	; (800f50c <WIDGET__Init+0xc>)
 800f502:	8642      	strh	r2, [r0, #50]	; 0x32
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f508:	8601      	strh	r1, [r0, #48]	; 0x30
 800f50a:	4770      	bx	lr
 800f50c:	200000a8 	.word	0x200000a8

0800f510 <WIDGET_SetState>:
 800f510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f512:	460c      	mov	r4, r1
 800f514:	4605      	mov	r5, r0
 800f516:	f7ff fd61 	bl	800efdc <GUI_ALLOC_LockH>
 800f51a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f51c:	9001      	str	r0, [sp, #4]
 800f51e:	4294      	cmp	r4, r2
 800f520:	d003      	beq.n	800f52a <WIDGET_SetState+0x1a>
 800f522:	8644      	strh	r4, [r0, #50]	; 0x32
 800f524:	4628      	mov	r0, r5
 800f526:	f7f9 ff81 	bl	800942c <WM_InvalidateWindow>
 800f52a:	a801      	add	r0, sp, #4
 800f52c:	f7ff fd64 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f530:	b003      	add	sp, #12
 800f532:	bd30      	pop	{r4, r5, pc}

0800f534 <WIDGET_OrState>:
 800f534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f536:	460c      	mov	r4, r1
 800f538:	4605      	mov	r5, r0
 800f53a:	b178      	cbz	r0, 800f55c <WIDGET_OrState+0x28>
 800f53c:	f7ff fd4e 	bl	800efdc <GUI_ALLOC_LockH>
 800f540:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f542:	9001      	str	r0, [sp, #4]
 800f544:	ea04 0102 	and.w	r1, r4, r2
 800f548:	428c      	cmp	r4, r1
 800f54a:	d004      	beq.n	800f556 <WIDGET_OrState+0x22>
 800f54c:	4314      	orrs	r4, r2
 800f54e:	8644      	strh	r4, [r0, #50]	; 0x32
 800f550:	4628      	mov	r0, r5
 800f552:	f7f9 ff6b 	bl	800942c <WM_InvalidateWindow>
 800f556:	a801      	add	r0, sp, #4
 800f558:	f7ff fd4e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f55c:	b003      	add	sp, #12
 800f55e:	bd30      	pop	{r4, r5, pc}

0800f560 <WIDGET_HandleActive>:
 800f560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f562:	460d      	mov	r5, r1
 800f564:	b085      	sub	sp, #20
 800f566:	4606      	mov	r6, r0
 800f568:	2800      	cmp	r0, #0
 800f56a:	f000 8095 	beq.w	800f698 <WIDGET_HandleActive+0x138>
 800f56e:	f7ff fd35 	bl	800efdc <GUI_ALLOC_LockH>
 800f572:	682b      	ldr	r3, [r5, #0]
 800f574:	9002      	str	r0, [sp, #8]
 800f576:	2b16      	cmp	r3, #22
 800f578:	d054      	beq.n	800f624 <WIDGET_HandleActive+0xc4>
 800f57a:	dc0c      	bgt.n	800f596 <WIDGET_HandleActive+0x36>
 800f57c:	2b11      	cmp	r3, #17
 800f57e:	d033      	beq.n	800f5e8 <WIDGET_HandleActive+0x88>
 800f580:	dc02      	bgt.n	800f588 <WIDGET_HandleActive+0x28>
 800f582:	2b0d      	cmp	r3, #13
 800f584:	d040      	beq.n	800f608 <WIDGET_HandleActive+0xa8>
 800f586:	e080      	b.n	800f68a <WIDGET_HandleActive+0x12a>
 800f588:	2b14      	cmp	r3, #20
 800f58a:	d079      	beq.n	800f680 <WIDGET_HandleActive+0x120>
 800f58c:	2b15      	cmp	r3, #21
 800f58e:	d17c      	bne.n	800f68a <WIDGET_HandleActive+0x12a>
 800f590:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800f594:	e072      	b.n	800f67c <WIDGET_HandleActive+0x11c>
 800f596:	2b1f      	cmp	r3, #31
 800f598:	d06d      	beq.n	800f676 <WIDGET_HandleActive+0x116>
 800f59a:	dc02      	bgt.n	800f5a2 <WIDGET_HandleActive+0x42>
 800f59c:	2b1e      	cmp	r3, #30
 800f59e:	d044      	beq.n	800f62a <WIDGET_HandleActive+0xca>
 800f5a0:	e073      	b.n	800f68a <WIDGET_HandleActive+0x12a>
 800f5a2:	2b31      	cmp	r3, #49	; 0x31
 800f5a4:	d01e      	beq.n	800f5e4 <WIDGET_HandleActive+0x84>
 800f5a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5aa:	d16e      	bne.n	800f68a <WIDGET_HandleActive+0x12a>
 800f5ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f5ae:	6819      	ldr	r1, [r3, #0]
 800f5b0:	68eb      	ldr	r3, [r5, #12]
 800f5b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	a802      	add	r0, sp, #8
 800f5b8:	1acd      	subs	r5, r1, r3
 800f5ba:	f7ff fd1d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f7ff fd0c 	bl	800efdc <GUI_ALLOC_LockH>
 800f5c4:	ac04      	add	r4, sp, #16
 800f5c6:	4269      	negs	r1, r5
 800f5c8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f5cc:	460a      	mov	r2, r1
 800f5ce:	462b      	mov	r3, r5
 800f5d0:	9500      	str	r5, [sp, #0]
 800f5d2:	f7f8 fced 	bl	8007fb0 <WM__UpdateChildPositions>
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f7ff fd0e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f7f9 ff25 	bl	800942c <WM_InvalidateWindow>
 800f5e2:	e050      	b.n	800f686 <WIDGET_HandleActive+0x126>
 800f5e4:	2400      	movs	r4, #0
 800f5e6:	e041      	b.n	800f66c <WIDGET_HandleActive+0x10c>
 800f5e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f5ea:	06d9      	lsls	r1, r3, #27
 800f5ec:	d54d      	bpl.n	800f68a <WIDGET_HandleActive+0x12a>
 800f5ee:	68eb      	ldr	r3, [r5, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d04a      	beq.n	800f68a <WIDGET_HandleActive+0x12a>
 800f5f4:	7a1b      	ldrb	r3, [r3, #8]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d047      	beq.n	800f68a <WIDGET_HandleActive+0x12a>
 800f5fa:	a802      	add	r0, sp, #8
 800f5fc:	f7ff fcfc 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f600:	4630      	mov	r0, r6
 800f602:	f7f9 f8f7 	bl	80087f4 <WM_SetFocus>
 800f606:	e040      	b.n	800f68a <WIDGET_HandleActive+0x12a>
 800f608:	68eb      	ldr	r3, [r5, #12]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d03c      	beq.n	800f68a <WIDGET_HandleActive+0x12a>
 800f610:	7a1b      	ldrb	r3, [r3, #8]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d039      	beq.n	800f68a <WIDGET_HandleActive+0x12a>
 800f616:	a802      	add	r0, sp, #8
 800f618:	f7ff fcee 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7f9 f9e1 	bl	80089e4 <WM_BringToTop>
 800f622:	e030      	b.n	800f686 <WIDGET_HandleActive+0x126>
 800f624:	68eb      	ldr	r3, [r5, #12]
 800f626:	8603      	strh	r3, [r0, #48]	; 0x30
 800f628:	e02d      	b.n	800f686 <WIDGET_HandleActive+0x126>
 800f62a:	68eb      	ldr	r3, [r5, #12]
 800f62c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d108      	bne.n	800f644 <WIDGET_HandleActive+0xe4>
 800f632:	06ca      	lsls	r2, r1, #27
 800f634:	d50d      	bpl.n	800f652 <WIDGET_HandleActive+0xf2>
 800f636:	4630      	mov	r0, r6
 800f638:	f041 0101 	orr.w	r1, r1, #1
 800f63c:	f7ff ff68 	bl	800f510 <WIDGET_SetState>
 800f640:	2708      	movs	r7, #8
 800f642:	e008      	b.n	800f656 <WIDGET_HandleActive+0xf6>
 800f644:	f021 0101 	bic.w	r1, r1, #1
 800f648:	4630      	mov	r0, r6
 800f64a:	f7ff ff61 	bl	800f510 <WIDGET_SetState>
 800f64e:	2709      	movs	r7, #9
 800f650:	e001      	b.n	800f656 <WIDGET_HandleActive+0xf6>
 800f652:	f04f 37ff 	mov.w	r7, #4294967295
 800f656:	a802      	add	r0, sp, #8
 800f658:	f7ff fcce 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f65c:	1c7b      	adds	r3, r7, #1
 800f65e:	f04f 0400 	mov.w	r4, #0
 800f662:	d005      	beq.n	800f670 <WIDGET_HandleActive+0x110>
 800f664:	4630      	mov	r0, r6
 800f666:	4639      	mov	r1, r7
 800f668:	f7f9 f8b9 	bl	80087de <WM_NotifyParent>
 800f66c:	60ec      	str	r4, [r5, #12]
 800f66e:	e00d      	b.n	800f68c <WIDGET_HandleActive+0x12c>
 800f670:	2301      	movs	r3, #1
 800f672:	60eb      	str	r3, [r5, #12]
 800f674:	e00a      	b.n	800f68c <WIDGET_HandleActive+0x12c>
 800f676:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f678:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f67c:	60eb      	str	r3, [r5, #12]
 800f67e:	e002      	b.n	800f686 <WIDGET_HandleActive+0x126>
 800f680:	68e9      	ldr	r1, [r5, #12]
 800f682:	f7ff ff2f 	bl	800f4e4 <WIDGET__GetInsideRect>
 800f686:	2400      	movs	r4, #0
 800f688:	e000      	b.n	800f68c <WIDGET_HandleActive+0x12c>
 800f68a:	2401      	movs	r4, #1
 800f68c:	9b02      	ldr	r3, [sp, #8]
 800f68e:	b123      	cbz	r3, 800f69a <WIDGET_HandleActive+0x13a>
 800f690:	a802      	add	r0, sp, #8
 800f692:	f7ff fcb1 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f696:	e000      	b.n	800f69a <WIDGET_HandleActive+0x13a>
 800f698:	2401      	movs	r4, #1
 800f69a:	4620      	mov	r0, r4
 800f69c:	b005      	add	sp, #20
 800f69e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6a0 <FRAMEWIN_DrawSkinFlex>:
 800f6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	b090      	sub	sp, #64	; 0x40
 800f6a8:	6800      	ldr	r0, [r0, #0]
 800f6aa:	4d9b      	ldr	r5, [pc, #620]	; (800f918 <FRAMEWIN_DrawSkinFlex+0x278>)
 800f6ac:	f7f8 fb70 	bl	8007d90 <FRAMEWIN_GetActive>
 800f6b0:	4b9a      	ldr	r3, [pc, #616]	; (800f91c <FRAMEWIN_DrawSkinFlex+0x27c>)
 800f6b2:	6866      	ldr	r6, [r4, #4]
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	bf18      	it	ne
 800f6b8:	461d      	movne	r5, r3
 800f6ba:	2e1c      	cmp	r6, #28
 800f6bc:	f200 81a6 	bhi.w	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f6c0:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f6c4:	01a40191 	.word	0x01a40191
 800f6c8:	01a401a4 	.word	0x01a401a4
 800f6cc:	012e01a4 	.word	0x012e01a4
 800f6d0:	01a401a4 	.word	0x01a401a4
 800f6d4:	01a401a4 	.word	0x01a401a4
 800f6d8:	002701a4 	.word	0x002701a4
 800f6dc:	01a401a4 	.word	0x01a401a4
 800f6e0:	01a4017e 	.word	0x01a4017e
 800f6e4:	01a401a4 	.word	0x01a401a4
 800f6e8:	01a40145 	.word	0x01a40145
 800f6ec:	002301a4 	.word	0x002301a4
 800f6f0:	001f001d 	.word	0x001f001d
 800f6f4:	01a40021 	.word	0x01a40021
 800f6f8:	01a401a4 	.word	0x01a401a4
 800f6fc:	0025      	.short	0x0025
 800f6fe:	69ee      	ldr	r6, [r5, #28]
 800f700:	e189      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800f702:	6a2e      	ldr	r6, [r5, #32]
 800f704:	e187      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800f706:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f708:	e185      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800f70a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f70c:	e183      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800f70e:	696e      	ldr	r6, [r5, #20]
 800f710:	e181      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800f712:	231c      	movs	r3, #28
 800f714:	6820      	ldr	r0, [r4, #0]
 800f716:	9308      	str	r3, [sp, #32]
 800f718:	9007      	str	r0, [sp, #28]
 800f71a:	f7ff fc5f 	bl	800efdc <GUI_ALLOC_LockH>
 800f71e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f720:	9005      	str	r0, [sp, #20]
 800f722:	a807      	add	r0, sp, #28
 800f724:	4798      	blx	r3
 800f726:	4606      	mov	r6, r0
 800f728:	a805      	add	r0, sp, #20
 800f72a:	f7ff fc65 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f72e:	2e01      	cmp	r6, #1
 800f730:	dd11      	ble.n	800f756 <FRAMEWIN_DrawSkinFlex+0xb6>
 800f732:	682b      	ldr	r3, [r5, #0]
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	686b      	ldr	r3, [r5, #4]
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	68ab      	ldr	r3, [r5, #8]
 800f73c:	9302      	str	r3, [sp, #8]
 800f73e:	6920      	ldr	r0, [r4, #16]
 800f740:	69a1      	ldr	r1, [r4, #24]
 800f742:	6962      	ldr	r2, [r4, #20]
 800f744:	4633      	mov	r3, r6
 800f746:	f002 f8c7 	bl	80118d8 <GUI__DrawTwinArc2>
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	69a7      	ldr	r7, [r4, #24]
 800f74e:	eb06 0803 	add.w	r8, r6, r3
 800f752:	1bbf      	subs	r7, r7, r6
 800f754:	e02c      	b.n	800f7b0 <FRAMEWIN_DrawSkinFlex+0x110>
 800f756:	6828      	ldr	r0, [r5, #0]
 800f758:	f7fe f9eb 	bl	800db32 <GUI_SetColor>
 800f75c:	6921      	ldr	r1, [r4, #16]
 800f75e:	69ea      	ldr	r2, [r5, #28]
 800f760:	6960      	ldr	r0, [r4, #20]
 800f762:	440a      	add	r2, r1
 800f764:	3a01      	subs	r2, #1
 800f766:	f002 fb05 	bl	8011d74 <GUI_DrawHLine>
 800f76a:	69a2      	ldr	r2, [r4, #24]
 800f76c:	69e9      	ldr	r1, [r5, #28]
 800f76e:	6960      	ldr	r0, [r4, #20]
 800f770:	1a51      	subs	r1, r2, r1
 800f772:	3101      	adds	r1, #1
 800f774:	f002 fafe 	bl	8011d74 <GUI_DrawHLine>
 800f778:	6967      	ldr	r7, [r4, #20]
 800f77a:	6920      	ldr	r0, [r4, #16]
 800f77c:	3701      	adds	r7, #1
 800f77e:	4639      	mov	r1, r7
 800f780:	f002 fb1c 	bl	8011dbc <GUI_DrawPixel>
 800f784:	4639      	mov	r1, r7
 800f786:	69a0      	ldr	r0, [r4, #24]
 800f788:	f002 fb18 	bl	8011dbc <GUI_DrawPixel>
 800f78c:	6868      	ldr	r0, [r5, #4]
 800f78e:	f7fe f9d0 	bl	800db32 <GUI_SetColor>
 800f792:	6920      	ldr	r0, [r4, #16]
 800f794:	4639      	mov	r1, r7
 800f796:	3001      	adds	r0, #1
 800f798:	f002 fb10 	bl	8011dbc <GUI_DrawPixel>
 800f79c:	69a0      	ldr	r0, [r4, #24]
 800f79e:	4639      	mov	r1, r7
 800f7a0:	3801      	subs	r0, #1
 800f7a2:	f002 fb0b 	bl	8011dbc <GUI_DrawPixel>
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	69a7      	ldr	r7, [r4, #24]
 800f7aa:	f103 0802 	add.w	r8, r3, #2
 800f7ae:	3f02      	subs	r7, #2
 800f7b0:	6828      	ldr	r0, [r5, #0]
 800f7b2:	f7fe f9be 	bl	800db32 <GUI_SetColor>
 800f7b6:	4641      	mov	r1, r8
 800f7b8:	463a      	mov	r2, r7
 800f7ba:	6960      	ldr	r0, [r4, #20]
 800f7bc:	f002 fada 	bl	8011d74 <GUI_DrawHLine>
 800f7c0:	6868      	ldr	r0, [r5, #4]
 800f7c2:	f7fe f9b6 	bl	800db32 <GUI_SetColor>
 800f7c6:	6960      	ldr	r0, [r4, #20]
 800f7c8:	4641      	mov	r1, r8
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	463a      	mov	r2, r7
 800f7ce:	f002 fad1 	bl	8011d74 <GUI_DrawHLine>
 800f7d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	dd0a      	ble.n	800f7ee <FRAMEWIN_DrawSkinFlex+0x14e>
 800f7d8:	68a8      	ldr	r0, [r5, #8]
 800f7da:	f7fe f9aa 	bl	800db32 <GUI_SetColor>
 800f7de:	6961      	ldr	r1, [r4, #20]
 800f7e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7e2:	440b      	add	r3, r1
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	3102      	adds	r1, #2
 800f7e8:	463a      	mov	r2, r7
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	e01d      	b.n	800f82a <FRAMEWIN_DrawSkinFlex+0x18a>
 800f7ee:	6a2a      	ldr	r2, [r5, #32]
 800f7f0:	42b2      	cmp	r2, r6
 800f7f2:	dd1c      	ble.n	800f82e <FRAMEWIN_DrawSkinFlex+0x18e>
 800f7f4:	6967      	ldr	r7, [r4, #20]
 800f7f6:	6923      	ldr	r3, [r4, #16]
 800f7f8:	2e01      	cmp	r6, #1
 800f7fa:	f107 0802 	add.w	r8, r7, #2
 800f7fe:	f340 8107 	ble.w	800fa10 <FRAMEWIN_DrawSkinFlex+0x370>
 800f802:	4437      	add	r7, r6
 800f804:	18f0      	adds	r0, r6, r3
 800f806:	441a      	add	r2, r3
 800f808:	3a01      	subs	r2, #1
 800f80a:	4641      	mov	r1, r8
 800f80c:	463b      	mov	r3, r7
 800f80e:	f002 fb19 	bl	8011e44 <GUI_FillRect>
 800f812:	69a3      	ldr	r3, [r4, #24]
 800f814:	69e8      	ldr	r0, [r5, #28]
 800f816:	2e01      	cmp	r6, #1
 800f818:	ebc0 0003 	rsb	r0, r0, r3
 800f81c:	bfcc      	ite	gt
 800f81e:	ebc6 0203 	rsbgt	r2, r6, r3
 800f822:	1e9a      	suble	r2, r3, #2
 800f824:	3001      	adds	r0, #1
 800f826:	4641      	mov	r1, r8
 800f828:	463b      	mov	r3, r7
 800f82a:	f002 fb0b 	bl	8011e44 <GUI_FillRect>
 800f82e:	6963      	ldr	r3, [r4, #20]
 800f830:	69e7      	ldr	r7, [r4, #28]
 800f832:	6828      	ldr	r0, [r5, #0]
 800f834:	2e01      	cmp	r6, #1
 800f836:	bfcc      	ite	gt
 800f838:	18f6      	addgt	r6, r6, r3
 800f83a:	1c9e      	addle	r6, r3, #2
 800f83c:	3f01      	subs	r7, #1
 800f83e:	f7fe f978 	bl	800db32 <GUI_SetColor>
 800f842:	463a      	mov	r2, r7
 800f844:	6920      	ldr	r0, [r4, #16]
 800f846:	4631      	mov	r1, r6
 800f848:	f002 fada 	bl	8011e00 <GUI_DrawVLine>
 800f84c:	463a      	mov	r2, r7
 800f84e:	4631      	mov	r1, r6
 800f850:	69a0      	ldr	r0, [r4, #24]
 800f852:	f002 fad5 	bl	8011e00 <GUI_DrawVLine>
 800f856:	69e7      	ldr	r7, [r4, #28]
 800f858:	6868      	ldr	r0, [r5, #4]
 800f85a:	f7fe f96a 	bl	800db32 <GUI_SetColor>
 800f85e:	6920      	ldr	r0, [r4, #16]
 800f860:	3f02      	subs	r7, #2
 800f862:	3001      	adds	r0, #1
 800f864:	4631      	mov	r1, r6
 800f866:	463a      	mov	r2, r7
 800f868:	f002 faca 	bl	8011e00 <GUI_DrawVLine>
 800f86c:	69a0      	ldr	r0, [r4, #24]
 800f86e:	4631      	mov	r1, r6
 800f870:	3801      	subs	r0, #1
 800f872:	463a      	mov	r2, r7
 800f874:	f002 fac4 	bl	8011e00 <GUI_DrawVLine>
 800f878:	69eb      	ldr	r3, [r5, #28]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	dc02      	bgt.n	800f884 <FRAMEWIN_DrawSkinFlex+0x1e4>
 800f87e:	6a2b      	ldr	r3, [r5, #32]
 800f880:	2b02      	cmp	r3, #2
 800f882:	dd20      	ble.n	800f8c6 <FRAMEWIN_DrawSkinFlex+0x226>
 800f884:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f886:	69e7      	ldr	r7, [r4, #28]
 800f888:	68a8      	ldr	r0, [r5, #8]
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	bfcc      	ite	gt
 800f88e:	ebc3 0707 	rsbgt	r7, r3, r7
 800f892:	3f02      	suble	r7, #2
 800f894:	f7fe f94d 	bl	800db32 <GUI_SetColor>
 800f898:	69ea      	ldr	r2, [r5, #28]
 800f89a:	2a02      	cmp	r2, #2
 800f89c:	dd07      	ble.n	800f8ae <FRAMEWIN_DrawSkinFlex+0x20e>
 800f89e:	6920      	ldr	r0, [r4, #16]
 800f8a0:	4402      	add	r2, r0
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	3002      	adds	r0, #2
 800f8a6:	3a01      	subs	r2, #1
 800f8a8:	463b      	mov	r3, r7
 800f8aa:	f002 facb 	bl	8011e44 <GUI_FillRect>
 800f8ae:	6a2b      	ldr	r3, [r5, #32]
 800f8b0:	2b02      	cmp	r3, #2
 800f8b2:	dd08      	ble.n	800f8c6 <FRAMEWIN_DrawSkinFlex+0x226>
 800f8b4:	69a2      	ldr	r2, [r4, #24]
 800f8b6:	69e8      	ldr	r0, [r5, #28]
 800f8b8:	1a10      	subs	r0, r2, r0
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	4631      	mov	r1, r6
 800f8be:	3a02      	subs	r2, #2
 800f8c0:	463b      	mov	r3, r7
 800f8c2:	f002 fabf 	bl	8011e44 <GUI_FillRect>
 800f8c6:	6828      	ldr	r0, [r5, #0]
 800f8c8:	f7fe f933 	bl	800db32 <GUI_SetColor>
 800f8cc:	6921      	ldr	r1, [r4, #16]
 800f8ce:	69a2      	ldr	r2, [r4, #24]
 800f8d0:	69e0      	ldr	r0, [r4, #28]
 800f8d2:	f002 fa4f 	bl	8011d74 <GUI_DrawHLine>
 800f8d6:	6868      	ldr	r0, [r5, #4]
 800f8d8:	f7fe f92b 	bl	800db32 <GUI_SetColor>
 800f8dc:	69e0      	ldr	r0, [r4, #28]
 800f8de:	6921      	ldr	r1, [r4, #16]
 800f8e0:	69a2      	ldr	r2, [r4, #24]
 800f8e2:	3801      	subs	r0, #1
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	3a01      	subs	r2, #1
 800f8e8:	f002 fa44 	bl	8011d74 <GUI_DrawHLine>
 800f8ec:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f8ee:	2e02      	cmp	r6, #2
 800f8f0:	f340 808c 	ble.w	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f8f4:	6920      	ldr	r0, [r4, #16]
 800f8f6:	69a2      	ldr	r2, [r4, #24]
 800f8f8:	69e4      	ldr	r4, [r4, #28]
 800f8fa:	f100 0802 	add.w	r8, r0, #2
 800f8fe:	68a8      	ldr	r0, [r5, #8]
 800f900:	1e97      	subs	r7, r2, #2
 800f902:	f7fe f916 	bl	800db32 <GUI_SetColor>
 800f906:	1ba1      	subs	r1, r4, r6
 800f908:	4640      	mov	r0, r8
 800f90a:	3101      	adds	r1, #1
 800f90c:	463a      	mov	r2, r7
 800f90e:	1ea3      	subs	r3, r4, #2
 800f910:	f002 fa98 	bl	8011e44 <GUI_FillRect>
 800f914:	e07a      	b.n	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f916:	bf00      	nop
 800f918:	200000d8 	.word	0x200000d8
 800f91c:	200000ac 	.word	0x200000ac
 800f920:	8a20      	ldrh	r0, [r4, #16]
 800f922:	8aa1      	ldrh	r1, [r4, #20]
 800f924:	8b22      	ldrh	r2, [r4, #24]
 800f926:	8ba3      	ldrh	r3, [r4, #28]
 800f928:	68ec      	ldr	r4, [r5, #12]
 800f92a:	9400      	str	r4, [sp, #0]
 800f92c:	692c      	ldr	r4, [r5, #16]
 800f92e:	f8ad 001c 	strh.w	r0, [sp, #28]
 800f932:	f8ad 101e 	strh.w	r1, [sp, #30]
 800f936:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f93a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f93e:	9401      	str	r4, [sp, #4]
 800f940:	b200      	sxth	r0, r0
 800f942:	b209      	sxth	r1, r1
 800f944:	b212      	sxth	r2, r2
 800f946:	b21b      	sxth	r3, r3
 800f948:	f002 fb80 	bl	801204c <GUI_DrawGradientV>
 800f94c:	e05e      	b.n	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f94e:	8b2b      	ldrh	r3, [r5, #24]
 800f950:	6922      	ldr	r2, [r4, #16]
 800f952:	6820      	ldr	r0, [r4, #0]
 800f954:	441a      	add	r2, r3
 800f956:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f95a:	6962      	ldr	r2, [r4, #20]
 800f95c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800f960:	69a2      	ldr	r2, [r4, #24]
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f968:	69e3      	ldr	r3, [r4, #28]
 800f96a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f96e:	f7ff fb35 	bl	800efdc <GUI_ALLOC_LockH>
 800f972:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f974:	9005      	str	r0, [sp, #20]
 800f976:	b1fb      	cbz	r3, 800f9b8 <FRAMEWIN_DrawSkinFlex+0x318>
 800f978:	2002      	movs	r0, #2
 800f97a:	f7fe f915 	bl	800dba8 <GUI_SetTextMode>
 800f97e:	9b05      	ldr	r3, [sp, #20]
 800f980:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800f984:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800f988:	320e      	adds	r2, #14
 800f98a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f98e:	6898      	ldr	r0, [r3, #8]
 800f990:	f7fe f8cf 	bl	800db32 <GUI_SetColor>
 800f994:	9b05      	ldr	r3, [sp, #20]
 800f996:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f998:	f7fe f8d0 	bl	800db3c <GUI_SetFont>
 800f99c:	9b05      	ldr	r3, [sp, #20]
 800f99e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f9a0:	f7ff fb1c 	bl	800efdc <GUI_ALLOC_LockH>
 800f9a4:	9b05      	ldr	r3, [sp, #20]
 800f9a6:	9006      	str	r0, [sp, #24]
 800f9a8:	a907      	add	r1, sp, #28
 800f9aa:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800f9ae:	f7fd fd28 	bl	800d402 <GUI_DispStringInRect>
 800f9b2:	a806      	add	r0, sp, #24
 800f9b4:	f7ff fb20 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f9b8:	a805      	add	r0, sp, #20
 800f9ba:	f7ff fb1d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800f9be:	e025      	b.n	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f9c6:	6963      	ldr	r3, [r4, #20]
 800f9c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f9cc:	69a3      	ldr	r3, [r4, #24]
 800f9ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f9d2:	68a8      	ldr	r0, [r5, #8]
 800f9d4:	69e3      	ldr	r3, [r4, #28]
 800f9d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f9da:	f7fe f8aa 	bl	800db32 <GUI_SetColor>
 800f9de:	a807      	add	r0, sp, #28
 800f9e0:	f002 fa52 	bl	8011e88 <GUI_FillRectEx>
 800f9e4:	e012      	b.n	800fa0c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f9e6:	6820      	ldr	r0, [r4, #0]
 800f9e8:	f7ff faf8 	bl	800efdc <GUI_ALLOC_LockH>
 800f9ec:	ab10      	add	r3, sp, #64	; 0x40
 800f9ee:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800f9f2:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800f9f6:	f042 020c 	orr.w	r2, r2, #12
 800f9fa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7ff fafa 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	f7f8 fb67 	bl	80080d8 <WM_SetHasTrans>
 800fa0a:	e004      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800fa0c:	2600      	movs	r6, #0
 800fa0e:	e002      	b.n	800fa16 <FRAMEWIN_DrawSkinFlex+0x376>
 800fa10:	1c98      	adds	r0, r3, #2
 800fa12:	4647      	mov	r7, r8
 800fa14:	e6f7      	b.n	800f806 <FRAMEWIN_DrawSkinFlex+0x166>
 800fa16:	4630      	mov	r0, r6
 800fa18:	b010      	add	sp, #64	; 0x40
 800fa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa1e:	bf00      	nop

0800fa20 <_GetBorderSize>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	b08a      	sub	sp, #40	; 0x28
 800fa24:	4605      	mov	r5, r0
 800fa26:	460c      	mov	r4, r1
 800fa28:	f7ff fad8 	bl	800efdc <GUI_ALLOC_LockH>
 800fa2c:	ab0a      	add	r3, sp, #40	; 0x28
 800fa2e:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800fa30:	f843 0d28 	str.w	r0, [r3, #-40]!
 800fa34:	4668      	mov	r0, sp
 800fa36:	f7ff fadf 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fa3a:	9501      	str	r5, [sp, #4]
 800fa3c:	2c03      	cmp	r4, #3
 800fa3e:	d80b      	bhi.n	800fa58 <_GetBorderSize+0x38>
 800fa40:	e8df f004 	tbb	[pc, r4]
 800fa44:	08060402 	.word	0x08060402
 800fa48:	2318      	movs	r3, #24
 800fa4a:	e004      	b.n	800fa56 <_GetBorderSize+0x36>
 800fa4c:	2316      	movs	r3, #22
 800fa4e:	e002      	b.n	800fa56 <_GetBorderSize+0x36>
 800fa50:	2315      	movs	r3, #21
 800fa52:	e000      	b.n	800fa56 <_GetBorderSize+0x36>
 800fa54:	2317      	movs	r3, #23
 800fa56:	9302      	str	r3, [sp, #8]
 800fa58:	a801      	add	r0, sp, #4
 800fa5a:	47b0      	blx	r6
 800fa5c:	b00a      	add	sp, #40	; 0x28
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}

0800fa60 <_Create>:
 800fa60:	b530      	push	{r4, r5, lr}
 800fa62:	b08b      	sub	sp, #44	; 0x2c
 800fa64:	4605      	mov	r5, r0
 800fa66:	f7ff fab9 	bl	800efdc <GUI_ALLOC_LockH>
 800fa6a:	ab0a      	add	r3, sp, #40	; 0x28
 800fa6c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fa6e:	f843 0d28 	str.w	r0, [r3, #-40]!
 800fa72:	4668      	mov	r0, sp
 800fa74:	6894      	ldr	r4, [r2, #8]
 800fa76:	f7ff fabf 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fa7a:	a80a      	add	r0, sp, #40	; 0x28
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	9302      	str	r3, [sp, #8]
 800fa80:	f840 5d24 	str.w	r5, [r0, #-36]!
 800fa84:	6863      	ldr	r3, [r4, #4]
 800fa86:	4798      	blx	r3
 800fa88:	b00b      	add	sp, #44	; 0x2c
 800fa8a:	bd30      	pop	{r4, r5, pc}

0800fa8c <_Paint>:
 800fa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	b091      	sub	sp, #68	; 0x44
 800fa92:	4604      	mov	r4, r0
 800fa94:	f7ff faa2 	bl	800efdc <GUI_ALLOC_LockH>
 800fa98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fa9a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800fa9c:	9603      	str	r6, [sp, #12]
 800fa9e:	9006      	str	r0, [sp, #24]
 800faa0:	689e      	ldr	r6, [r3, #8]
 800faa2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800faa4:	f7f7 feaa 	bl	80077fc <FRAMEWIN__CalcTitleHeight>
 800faa8:	4683      	mov	fp, r0
 800faaa:	a810      	add	r0, sp, #64	; 0x40
 800faac:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 800fab0:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800fab4:	9204      	str	r2, [sp, #16]
 800fab6:	f7ff fa9f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800faba:	4620      	mov	r0, r4
 800fabc:	f7f8 ff66 	bl	800898c <WM_GetWindowSizeX>
 800fac0:	4681      	mov	r9, r0
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7f8 ff77 	bl	80089b6 <WM_GetWindowSizeY>
 800fac8:	6832      	ldr	r2, [r6, #0]
 800faca:	2101      	movs	r1, #1
 800facc:	4680      	mov	r8, r0
 800face:	4620      	mov	r0, r4
 800fad0:	4790      	blx	r2
 800fad2:	6832      	ldr	r2, [r6, #0]
 800fad4:	2103      	movs	r1, #3
 800fad6:	4607      	mov	r7, r0
 800fad8:	4620      	mov	r0, r4
 800fada:	4790      	blx	r2
 800fadc:	6832      	ldr	r2, [r6, #0]
 800fade:	2100      	movs	r1, #0
 800fae0:	4682      	mov	sl, r0
 800fae2:	4620      	mov	r0, r4
 800fae4:	4790      	blx	r2
 800fae6:	6833      	ldr	r3, [r6, #0]
 800fae8:	9002      	str	r0, [sp, #8]
 800faea:	2102      	movs	r1, #2
 800faec:	4620      	mov	r0, r4
 800faee:	4798      	blx	r3
 800faf0:	9005      	str	r0, [sp, #20]
 800faf2:	2000      	movs	r0, #0
 800faf4:	9407      	str	r4, [sp, #28]
 800faf6:	f7f9 ff05 	bl	8009904 <WM__InitIVRSearch>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d044      	beq.n	800fb88 <_Paint+0xfc>
 800fafe:	2300      	movs	r3, #0
 800fb00:	930c      	str	r3, [sp, #48]	; 0x30
 800fb02:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb04:	f109 33ff 	add.w	r3, r9, #4294967295
 800fb08:	930d      	str	r3, [sp, #52]	; 0x34
 800fb0a:	f108 33ff 	add.w	r3, r8, #4294967295
 800fb0e:	930e      	str	r3, [sp, #56]	; 0x38
 800fb10:	230b      	movs	r3, #11
 800fb12:	9308      	str	r3, [sp, #32]
 800fb14:	a807      	add	r0, sp, #28
 800fb16:	47a8      	blx	r5
 800fb18:	9b02      	ldr	r3, [sp, #8]
 800fb1a:	9e04      	ldr	r6, [sp, #16]
 800fb1c:	970b      	str	r7, [sp, #44]	; 0x2c
 800fb1e:	445b      	add	r3, fp
 800fb20:	fa03 f086 	sxtah	r0, r3, r6
 800fb24:	9e05      	ldr	r6, [sp, #20]
 800fb26:	930c      	str	r3, [sp, #48]	; 0x30
 800fb28:	ebc6 0108 	rsb	r1, r6, r8
 800fb2c:	ebca 0209 	rsb	r2, sl, r9
 800fb30:	3801      	subs	r0, #1
 800fb32:	3901      	subs	r1, #1
 800fb34:	3a01      	subs	r2, #1
 800fb36:	4288      	cmp	r0, r1
 800fb38:	bfd4      	ite	le
 800fb3a:	900e      	strle	r0, [sp, #56]	; 0x38
 800fb3c:	910e      	strgt	r1, [sp, #56]	; 0x38
 800fb3e:	210e      	movs	r1, #14
 800fb40:	9108      	str	r1, [sp, #32]
 800fb42:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fb46:	920d      	str	r2, [sp, #52]	; 0x34
 800fb48:	a807      	add	r0, sp, #28
 800fb4a:	47a8      	blx	r5
 800fb4c:	9b01      	ldr	r3, [sp, #4]
 800fb4e:	9a00      	ldr	r2, [sp, #0]
 800fb50:	9e02      	ldr	r6, [sp, #8]
 800fb52:	920d      	str	r2, [sp, #52]	; 0x34
 800fb54:	3b01      	subs	r3, #1
 800fb56:	930e      	str	r3, [sp, #56]	; 0x38
 800fb58:	2305      	movs	r3, #5
 800fb5a:	9308      	str	r3, [sp, #32]
 800fb5c:	970b      	str	r7, [sp, #44]	; 0x2c
 800fb5e:	960c      	str	r6, [sp, #48]	; 0x30
 800fb60:	a807      	add	r0, sp, #28
 800fb62:	47a8      	blx	r5
 800fb64:	a90b      	add	r1, sp, #44	; 0x2c
 800fb66:	aa0d      	add	r2, sp, #52	; 0x34
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f7f7 fe56 	bl	800781a <FRAMEWIN__GetTitleLimits>
 800fb6e:	2002      	movs	r0, #2
 800fb70:	f7fe f81a 	bl	800dba8 <GUI_SetTextMode>
 800fb74:	9803      	ldr	r0, [sp, #12]
 800fb76:	f7fd ffe1 	bl	800db3c <GUI_SetFont>
 800fb7a:	2312      	movs	r3, #18
 800fb7c:	9308      	str	r3, [sp, #32]
 800fb7e:	a807      	add	r0, sp, #28
 800fb80:	47a8      	blx	r5
 800fb82:	f7f9 fdfd 	bl	8009780 <WM__GetNextIVR>
 800fb86:	e7b8      	b.n	800fafa <_Paint+0x6e>
 800fb88:	b011      	add	sp, #68	; 0x44
 800fb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb8e <WM_DeleteTimer>:
 800fb8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb90:	4605      	mov	r5, r0
 800fb92:	b168      	cbz	r0, 800fbb0 <WM_DeleteTimer+0x22>
 800fb94:	f7ff fa22 	bl	800efdc <GUI_ALLOC_LockH>
 800fb98:	ac02      	add	r4, sp, #8
 800fb9a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800fb9e:	6800      	ldr	r0, [r0, #0]
 800fba0:	f7fd fad0 	bl	800d144 <GUI_TIMER_Delete>
 800fba4:	4620      	mov	r0, r4
 800fba6:	f7ff fa27 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f7ff fa50 	bl	800f050 <GUI_ALLOC_Free>
 800fbb0:	b003      	add	sp, #12
 800fbb2:	bd30      	pop	{r4, r5, pc}

0800fbb4 <WM__DeleteAssocTimer>:
 800fbb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	a801      	add	r0, sp, #4
 800fbba:	f7fd fa8f 	bl	800d0dc <GUI_TIMER__GetFirstTimer>
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	b1dc      	cbz	r4, 800fbfa <WM__DeleteAssocTimer+0x46>
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	f7fd faf1 	bl	800d1ac <GUI_TIMER_GetFlag>
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	b183      	cbz	r3, 800fbf0 <WM__DeleteAssocTimer+0x3c>
 800fbce:	b178      	cbz	r0, 800fbf0 <WM__DeleteAssocTimer+0x3c>
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff f9f9 	bl	800efc8 <GUI_ALLOC_h2p>
 800fbd6:	6843      	ldr	r3, [r0, #4]
 800fbd8:	42ab      	cmp	r3, r5
 800fbda:	d109      	bne.n	800fbf0 <WM__DeleteAssocTimer+0x3c>
 800fbdc:	4620      	mov	r0, r4
 800fbde:	a901      	add	r1, sp, #4
 800fbe0:	9e01      	ldr	r6, [sp, #4]
 800fbe2:	f7fd fa93 	bl	800d10c <GUI_TIMER__GetNextTimerLin>
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4630      	mov	r0, r6
 800fbea:	f7ff ffd0 	bl	800fb8e <WM_DeleteTimer>
 800fbee:	e7e7      	b.n	800fbc0 <WM__DeleteAssocTimer+0xc>
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	a901      	add	r1, sp, #4
 800fbf4:	f7fd fa8a 	bl	800d10c <GUI_TIMER__GetNextTimerLin>
 800fbf8:	e7e1      	b.n	800fbbe <WM__DeleteAssocTimer+0xa>
 800fbfa:	b002      	add	sp, #8
 800fbfc:	bd70      	pop	{r4, r5, r6, pc}

0800fbfe <_Convert16>:
 800fbfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fc06:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	460e      	mov	r6, r1
 800fc0e:	4690      	mov	r8, r2
 800fc10:	461f      	mov	r7, r3
 800fc12:	4614      	mov	r4, r2
 800fc14:	4689      	mov	r9, r1
 800fc16:	f835 0b02 	ldrh.w	r0, [r5], #2
 800fc1a:	47d8      	blx	fp
 800fc1c:	47d0      	blx	sl
 800fc1e:	3c01      	subs	r4, #1
 800fc20:	f849 0b04 	str.w	r0, [r9], #4
 800fc24:	d1f7      	bne.n	800fc16 <_Convert16+0x18>
 800fc26:	2f1f      	cmp	r7, #31
 800fc28:	d806      	bhi.n	800fc38 <_Convert16+0x3a>
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	4641      	mov	r1, r8
 800fc2e:	463a      	mov	r2, r7
 800fc30:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	f001 bf04 	b.w	8011a40 <GUI__CompactPixelIndices>
 800fc38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc3c <_Convert8>:
 800fc3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc40:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fc44:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fc48:	4605      	mov	r5, r0
 800fc4a:	460e      	mov	r6, r1
 800fc4c:	4690      	mov	r8, r2
 800fc4e:	461f      	mov	r7, r3
 800fc50:	4689      	mov	r9, r1
 800fc52:	4604      	mov	r4, r0
 800fc54:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fc58:	47d8      	blx	fp
 800fc5a:	47d0      	blx	sl
 800fc5c:	1b2b      	subs	r3, r5, r4
 800fc5e:	4443      	add	r3, r8
 800fc60:	f849 0b04 	str.w	r0, [r9], #4
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1f5      	bne.n	800fc54 <_Convert8+0x18>
 800fc68:	2f1f      	cmp	r7, #31
 800fc6a:	d806      	bhi.n	800fc7a <_Convert8+0x3e>
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	4641      	mov	r1, r8
 800fc70:	463a      	mov	r2, r7
 800fc72:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc76:	f001 bee3 	b.w	8011a40 <GUI__CompactPixelIndices>
 800fc7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fc80 <GUI_MEMDEV__WriteToActiveOpaque>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	b09d      	sub	sp, #116	; 0x74
 800fc86:	4606      	mov	r6, r0
 800fc88:	910f      	str	r1, [sp, #60]	; 0x3c
 800fc8a:	920d      	str	r2, [sp, #52]	; 0x34
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	f000 8386 	beq.w	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fc92:	f7ff f9a3 	bl	800efdc <GUI_ALLOC_LockH>
 800fc96:	ab1c      	add	r3, sp, #112	; 0x70
 800fc98:	6944      	ldr	r4, [r0, #20]
 800fc9a:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff f9aa 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fca4:	4630      	mov	r0, r6
 800fca6:	f7fb f823 	bl	800acf0 <GUI_MEMDEV_GetBitsPerPixel>
 800fcaa:	2808      	cmp	r0, #8
 800fcac:	4601      	mov	r1, r0
 800fcae:	dd02      	ble.n	800fcb6 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800fcb0:	2c00      	cmp	r4, #0
 800fcb2:	f000 81c3 	beq.w	801003c <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f04f 0800 	mov.w	r8, #0
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	921b      	str	r2, [sp, #108]	; 0x6c
 800fcc0:	920b      	str	r2, [sp, #44]	; 0x2c
 800fcc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fcc6:	f7ff f989 	bl	800efdc <GUI_ALLOC_LockH>
 800fcca:	6803      	ldr	r3, [r0, #0]
 800fccc:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 80102dc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	930e      	str	r3, [sp, #56]	; 0x38
 800fcda:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800fcde:	f8da 3000 	ldr.w	r3, [sl]
 800fce2:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800fce6:	6904      	ldr	r4, [r0, #16]
 800fce8:	6945      	ldr	r5, [r0, #20]
 800fcea:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800fcee:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800fcf2:	7c58      	ldrb	r0, [r3, #17]
 800fcf4:	9112      	str	r1, [sp, #72]	; 0x48
 800fcf6:	f7fc fa19 	bl	800c12c <GUI_GetBitsPerPixelEx>
 800fcfa:	f8da 3000 	ldr.w	r3, [sl]
 800fcfe:	9010      	str	r0, [sp, #64]	; 0x40
 800fd00:	7c58      	ldrb	r0, [r3, #17]
 800fd02:	f7fc fa31 	bl	800c168 <GUI_GetpfIndex2ColorEx>
 800fd06:	4603      	mov	r3, r0
 800fd08:	4658      	mov	r0, fp
 800fd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd0c:	f7ff f974 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fd10:	2c08      	cmp	r4, #8
 800fd12:	4651      	mov	r1, sl
 800fd14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd18:	d904      	bls.n	800fd24 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800fd1a:	2c10      	cmp	r4, #16
 800fd1c:	bf8c      	ite	hi
 800fd1e:	2204      	movhi	r2, #4
 800fd20:	2202      	movls	r2, #2
 800fd22:	e005      	b.n	800fd30 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fd24:	2c01      	cmp	r4, #1
 800fd26:	d103      	bne.n	800fd30 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fd28:	9411      	str	r4, [sp, #68]	; 0x44
 800fd2a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800fd2e:	e000      	b.n	800fd32 <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800fd30:	9211      	str	r2, [sp, #68]	; 0x44
 800fd32:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fd34:	4298      	cmp	r0, r3
 800fd36:	f000 80e2 	beq.w	800fefe <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800fd3a:	680b      	ldr	r3, [r1, #0]
 800fd3c:	7c58      	ldrb	r0, [r3, #17]
 800fd3e:	f7fc fa23 	bl	800c188 <GUI_GetpfColor2IndexEx>
 800fd42:	9013      	str	r0, [sp, #76]	; 0x4c
 800fd44:	00b8      	lsls	r0, r7, #2
 800fd46:	f7ff fb15 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 800fd4a:	900c      	str	r0, [sp, #48]	; 0x30
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	f000 8326 	beq.w	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7fa f964 	bl	800a020 <GUI_MEMDEV_GetDataPtr>
 800fd58:	4606      	mov	r6, r0
 800fd5a:	2d00      	cmp	r5, #0
 800fd5c:	f000 80be 	beq.w	800fedc <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800fd60:	4628      	mov	r0, r5
 800fd62:	f7ff f93b 	bl	800efdc <GUI_ALLOC_LockH>
 800fd66:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800fd6a:	9018      	str	r0, [sp, #96]	; 0x60
 800fd6c:	f04f 0a00 	mov.w	sl, #0
 800fd70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd72:	4592      	cmp	sl, r2
 800fd74:	f280 80ae 	bge.w	800fed4 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800fd78:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	9319      	str	r3, [sp, #100]	; 0x64
 800fd7e:	6883      	ldr	r3, [r0, #8]
 800fd80:	a919      	add	r1, sp, #100	; 0x64
 800fd82:	695b      	ldr	r3, [r3, #20]
 800fd84:	4652      	mov	r2, sl
 800fd86:	4798      	blx	r3
 800fd88:	42b8      	cmp	r0, r7
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	d12f      	bne.n	800fdee <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800fd8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fd90:	f7ff f924 	bl	800efdc <GUI_ALLOC_LockH>
 800fd94:	2c08      	cmp	r4, #8
 800fd96:	4601      	mov	r1, r0
 800fd98:	9016      	str	r0, [sp, #88]	; 0x58
 800fd9a:	d909      	bls.n	800fdb0 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800fd9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fda0:	9200      	str	r2, [sp, #0]
 800fda2:	9301      	str	r3, [sp, #4]
 800fda4:	4630      	mov	r0, r6
 800fda6:	463a      	mov	r2, r7
 800fda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdaa:	f7ff ff28 	bl	800fbfe <_Convert16>
 800fdae:	e008      	b.n	800fdc2 <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800fdb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fdb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fdb4:	9000      	str	r0, [sp, #0]
 800fdb6:	9201      	str	r2, [sp, #4]
 800fdb8:	4630      	mov	r0, r6
 800fdba:	463a      	mov	r2, r7
 800fdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdbe:	f7ff ff3d 	bl	800fc3c <_Convert8>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fdc6:	9002      	str	r0, [sp, #8]
 800fdc8:	ad1c      	add	r5, sp, #112	; 0x70
 800fdca:	2200      	movs	r2, #0
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	9301      	str	r3, [sp, #4]
 800fdd0:	9203      	str	r2, [sp, #12]
 800fdd2:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800fdd6:	9204      	str	r2, [sp, #16]
 800fdd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fdda:	f8cd 8014 	str.w	r8, [sp, #20]
 800fdde:	4659      	mov	r1, fp
 800fde0:	463a      	mov	r2, r7
 800fde2:	f7fc fbed 	bl	800c5c0 <LCD_DrawBitmap>
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7ff f906 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fdec:	e060      	b.n	800feb0 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800fdee:	2c01      	cmp	r4, #1
 800fdf0:	d15c      	bne.n	800feac <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800fdf2:	2d00      	cmp	r5, #0
 800fdf4:	d05c      	beq.n	800feb0 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800fdf6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fdf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fdfa:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdfe:	2208      	movs	r2, #8
 800fe00:	fb90 f2f2 	sdiv	r2, r0, r2
 800fe04:	4432      	add	r2, r6
 800fe06:	2301      	movs	r3, #1
 800fe08:	9204      	str	r2, [sp, #16]
 800fe0a:	f000 0207 	and.w	r2, r0, #7
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	4408      	add	r0, r1
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	9302      	str	r3, [sp, #8]
 800fe16:	9206      	str	r2, [sp, #24]
 800fe18:	4659      	mov	r1, fp
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe20:	f7fc faf2 	bl	800c408 <LCD__DrawBitmap_1bpp>
 800fe24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe26:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fe28:	441d      	add	r5, r3
 800fe2a:	6883      	ldr	r3, [r0, #8]
 800fe2c:	9519      	str	r5, [sp, #100]	; 0x64
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	a919      	add	r1, sp, #100	; 0x64
 800fe32:	4652      	mov	r2, sl
 800fe34:	4798      	blx	r3
 800fe36:	4605      	mov	r5, r0
 800fe38:	e7db      	b.n	800fdf2 <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800fe3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fe3c:	f7ff f8ce 	bl	800efdc <GUI_ALLOC_LockH>
 800fe40:	2c08      	cmp	r4, #8
 800fe42:	4601      	mov	r1, r0
 800fe44:	9016      	str	r0, [sp, #88]	; 0x58
 800fe46:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fe48:	d938      	bls.n	800febc <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800fe4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe4c:	9200      	str	r2, [sp, #0]
 800fe4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe52:	9301      	str	r3, [sp, #4]
 800fe54:	fb00 6002 	mla	r0, r0, r2, r6
 800fe58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe5a:	462a      	mov	r2, r5
 800fe5c:	f7ff fecf 	bl	800fbfe <_Convert16>
 800fe60:	2301      	movs	r3, #1
 800fe62:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800fe66:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	9002      	str	r0, [sp, #8]
 800fe70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fe72:	9203      	str	r2, [sp, #12]
 800fe74:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fe76:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800fe7a:	9204      	str	r2, [sp, #16]
 800fe7c:	4408      	add	r0, r1
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4659      	mov	r1, fp
 800fe82:	f8cd 8014 	str.w	r8, [sp, #20]
 800fe86:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800fe8a:	f7fc fb99 	bl	800c5c0 <LCD_DrawBitmap>
 800fe8e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800fe92:	4660      	mov	r0, ip
 800fe94:	f7ff f8b0 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800fe98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe9a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fe9c:	441d      	add	r5, r3
 800fe9e:	6883      	ldr	r3, [r0, #8]
 800fea0:	9519      	str	r5, [sp, #100]	; 0x64
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	a919      	add	r1, sp, #100	; 0x64
 800fea6:	4652      	mov	r2, sl
 800fea8:	4798      	blx	r3
 800feaa:	4605      	mov	r5, r0
 800feac:	2d00      	cmp	r5, #0
 800feae:	d1c4      	bne.n	800fe3a <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800feb0:	444e      	add	r6, r9
 800feb2:	f10a 0a01 	add.w	sl, sl, #1
 800feb6:	f10b 0b01 	add.w	fp, fp, #1
 800feba:	e759      	b.n	800fd70 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800febc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fec2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fec4:	9201      	str	r2, [sp, #4]
 800fec6:	fb00 6003 	mla	r0, r0, r3, r6
 800feca:	462a      	mov	r2, r5
 800fecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fece:	f7ff feb5 	bl	800fc3c <_Convert8>
 800fed2:	e7c5      	b.n	800fe60 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800fed4:	a818      	add	r0, sp, #96	; 0x60
 800fed6:	f7ff f88f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 800feda:	e00e      	b.n	800fefa <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800fedc:	2301      	movs	r3, #1
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	9004      	str	r0, [sp, #16]
 800fee4:	9402      	str	r4, [sp, #8]
 800fee6:	f8cd 900c 	str.w	r9, [sp, #12]
 800feea:	f8cd 8014 	str.w	r8, [sp, #20]
 800feee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fef0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fef4:	463a      	mov	r2, r7
 800fef6:	f7fc fb63 	bl	800c5c0 <LCD_DrawBitmap>
 800fefa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fefc:	e24d      	b.n	801039a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800fefe:	4630      	mov	r0, r6
 800ff00:	f7fa f88e 	bl	800a020 <GUI_MEMDEV_GetDataPtr>
 800ff04:	4606      	mov	r6, r0
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	f000 808a 	beq.w	8010020 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f7ff f865 	bl	800efdc <GUI_ALLOC_LockH>
 800ff12:	2500      	movs	r5, #0
 800ff14:	9018      	str	r0, [sp, #96]	; 0x60
 800ff16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff18:	429d      	cmp	r5, r3
 800ff1a:	da7d      	bge.n	8010018 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800ff1c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9319      	str	r3, [sp, #100]	; 0x64
 800ff22:	6883      	ldr	r3, [r0, #8]
 800ff24:	a919      	add	r1, sp, #100	; 0x64
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	462a      	mov	r2, r5
 800ff2a:	4798      	blx	r3
 800ff2c:	42b8      	cmp	r0, r7
 800ff2e:	4682      	mov	sl, r0
 800ff30:	d124      	bne.n	800ff7c <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800ff32:	46aa      	mov	sl, r5
 800ff34:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ff36:	6883      	ldr	r3, [r0, #8]
 800ff38:	f10a 0b01 	add.w	fp, sl, #1
 800ff3c:	695b      	ldr	r3, [r3, #20]
 800ff3e:	a919      	add	r1, sp, #100	; 0x64
 800ff40:	465a      	mov	r2, fp
 800ff42:	4798      	blx	r3
 800ff44:	42b8      	cmp	r0, r7
 800ff46:	d101      	bne.n	800ff4c <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800ff48:	46da      	mov	sl, fp
 800ff4a:	e7f3      	b.n	800ff34 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800ff4c:	ebc5 0b0a 	rsb	fp, r5, sl
 800ff50:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff52:	9604      	str	r6, [sp, #16]
 800ff54:	2301      	movs	r3, #1
 800ff56:	f10b 0b01 	add.w	fp, fp, #1
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	4429      	add	r1, r5
 800ff60:	9402      	str	r4, [sp, #8]
 800ff62:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff66:	f8cd 8014 	str.w	r8, [sp, #20]
 800ff6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ff6c:	463a      	mov	r2, r7
 800ff6e:	465b      	mov	r3, fp
 800ff70:	f7fc fb26 	bl	800c5c0 <LCD_DrawBitmap>
 800ff74:	fb09 660b 	mla	r6, r9, fp, r6
 800ff78:	4655      	mov	r5, sl
 800ff7a:	e04b      	b.n	8010014 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800ff7c:	2c01      	cmp	r4, #1
 800ff7e:	d127      	bne.n	800ffd0 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800ff80:	f1ba 0f00 	cmp.w	sl, #0
 800ff84:	d022      	beq.n	800ffcc <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800ff86:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ff88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ff8a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff8e:	2208      	movs	r2, #8
 800ff90:	fb90 f2f2 	sdiv	r2, r0, r2
 800ff94:	4432      	add	r2, r6
 800ff96:	9204      	str	r2, [sp, #16]
 800ff98:	f000 0207 	and.w	r2, r0, #7
 800ff9c:	4408      	add	r0, r1
 800ff9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ffa0:	9206      	str	r2, [sp, #24]
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	4652      	mov	r2, sl
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	9302      	str	r3, [sp, #8]
 800ffac:	4429      	add	r1, r5
 800ffae:	f8cd 8014 	str.w	r8, [sp, #20]
 800ffb2:	f7fc fa29 	bl	800c408 <LCD__DrawBitmap_1bpp>
 800ffb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffb8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ffba:	4453      	add	r3, sl
 800ffbc:	9319      	str	r3, [sp, #100]	; 0x64
 800ffbe:	6883      	ldr	r3, [r0, #8]
 800ffc0:	a919      	add	r1, sp, #100	; 0x64
 800ffc2:	695b      	ldr	r3, [r3, #20]
 800ffc4:	462a      	mov	r2, r5
 800ffc6:	4798      	blx	r3
 800ffc8:	4682      	mov	sl, r0
 800ffca:	e7d9      	b.n	800ff80 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800ffcc:	444e      	add	r6, r9
 800ffce:	e021      	b.n	8010014 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800ffd0:	f1ba 0f00 	cmp.w	sl, #0
 800ffd4:	d0fa      	beq.n	800ffcc <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800ffd6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ffd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ffda:	9402      	str	r4, [sp, #8]
 800ffdc:	fb00 6201 	mla	r2, r0, r1, r6
 800ffe0:	9204      	str	r2, [sp, #16]
 800ffe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ffe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffe6:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffea:	2301      	movs	r3, #1
 800ffec:	4410      	add	r0, r2
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	4652      	mov	r2, sl
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	4429      	add	r1, r5
 800fff6:	f8cd 8014 	str.w	r8, [sp, #20]
 800fffa:	f7fc fae1 	bl	800c5c0 <LCD_DrawBitmap>
 800fffe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010000:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010002:	4453      	add	r3, sl
 8010004:	9319      	str	r3, [sp, #100]	; 0x64
 8010006:	6883      	ldr	r3, [r0, #8]
 8010008:	a919      	add	r1, sp, #100	; 0x64
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	462a      	mov	r2, r5
 801000e:	4798      	blx	r3
 8010010:	4682      	mov	sl, r0
 8010012:	e7dd      	b.n	800ffd0 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8010014:	3501      	adds	r5, #1
 8010016:	e77e      	b.n	800ff16 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8010018:	a818      	add	r0, sp, #96	; 0x60
 801001a:	f7fe ffed 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801001e:	e1be      	b.n	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010020:	2301      	movs	r3, #1
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	9004      	str	r0, [sp, #16]
 8010028:	9402      	str	r4, [sp, #8]
 801002a:	f8cd 900c 	str.w	r9, [sp, #12]
 801002e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010032:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010034:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010036:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010038:	463a      	mov	r2, r7
 801003a:	e041      	b.n	80100c0 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 801003c:	4630      	mov	r0, r6
 801003e:	910a      	str	r1, [sp, #40]	; 0x28
 8010040:	f7fe ffcc 	bl	800efdc <GUI_ALLOC_LockH>
 8010044:	4682      	mov	sl, r0
 8010046:	a81c      	add	r0, sp, #112	; 0x70
 8010048:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801004c:	f840 ad10 	str.w	sl, [r0, #-16]!
 8010050:	f8da 4000 	ldr.w	r4, [sl]
 8010054:	9210      	str	r2, [sp, #64]	; 0x40
 8010056:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801005a:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 801005e:	4c9e      	ldr	r4, [pc, #632]	; (80102d8 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 8010060:	b213      	sxth	r3, r2
 8010062:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010066:	920b      	str	r2, [sp, #44]	; 0x2c
 8010068:	9309      	str	r3, [sp, #36]	; 0x24
 801006a:	f7fe ffc5 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801006e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010072:	900e      	str	r0, [sp, #56]	; 0x38
 8010074:	4899      	ldr	r0, [pc, #612]	; (80102dc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 8010076:	6800      	ldr	r0, [r0, #0]
 8010078:	7c40      	ldrb	r0, [r0, #17]
 801007a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 801007e:	6925      	ldr	r5, [r4, #16]
 8010080:	f8d5 8000 	ldr.w	r8, [r5]
 8010084:	f7fc f852 	bl	800c12c <GUI_GetBitsPerPixelEx>
 8010088:	2808      	cmp	r0, #8
 801008a:	fa0f fb87 	sxth.w	fp, r7
 801008e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010094:	d904      	bls.n	80100a0 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8010096:	2810      	cmp	r0, #16
 8010098:	bf8c      	ite	hi
 801009a:	2404      	movhi	r4, #4
 801009c:	2402      	movls	r4, #2
 801009e:	e000      	b.n	80100a2 <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 80100a0:	2401      	movs	r4, #1
 80100a2:	45a9      	cmp	r9, r5
 80100a4:	d10f      	bne.n	80100c6 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 80100a6:	2001      	movs	r0, #1
 80100a8:	9203      	str	r2, [sp, #12]
 80100aa:	f10a 0218 	add.w	r2, sl, #24
 80100ae:	9000      	str	r0, [sp, #0]
 80100b0:	9001      	str	r0, [sp, #4]
 80100b2:	9102      	str	r1, [sp, #8]
 80100b4:	9204      	str	r2, [sp, #16]
 80100b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80100b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80100ba:	2200      	movs	r2, #0
 80100bc:	9205      	str	r2, [sp, #20]
 80100be:	465a      	mov	r2, fp
 80100c0:	f7fc fa7e 	bl	800c5c0 <LCD_DrawBitmap>
 80100c4:	e16b      	b.n	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80100c6:	2920      	cmp	r1, #32
 80100c8:	f040 808e 	bne.w	80101e8 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 80100cc:	fb0b f004 	mul.w	r0, fp, r4
 80100d0:	f7ff f950 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 80100d4:	900e      	str	r0, [sp, #56]	; 0x38
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f000 8161 	beq.w	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80100dc:	f7fe ff7e 	bl	800efdc <GUI_ALLOC_LockH>
 80100e0:	901a      	str	r0, [sp, #104]	; 0x68
 80100e2:	4630      	mov	r0, r6
 80100e4:	f7fe ff7a 	bl	800efdc <GUI_ALLOC_LockH>
 80100e8:	9018      	str	r0, [sp, #96]	; 0x60
 80100ea:	692b      	ldr	r3, [r5, #16]
 80100ec:	f100 0a18 	add.w	sl, r0, #24
 80100f0:	ea4f 068b 	mov.w	r6, fp, lsl #2
 80100f4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d02f      	beq.n	801015c <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 80100fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8010100:	2c02      	cmp	r4, #2
 8010102:	d003      	beq.n	801010c <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8010104:	2c04      	cmp	r4, #4
 8010106:	d001      	beq.n	801010c <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8010108:	2c01      	cmp	r4, #1
 801010a:	d106      	bne.n	801011a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801010c:	4650      	mov	r0, sl
 801010e:	692f      	ldr	r7, [r5, #16]
 8010110:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010112:	465a      	mov	r2, fp
 8010114:	4623      	mov	r3, r4
 8010116:	47b8      	blx	r7
 8010118:	44b2      	add	sl, r6
 801011a:	2301      	movs	r3, #1
 801011c:	2200      	movs	r2, #0
 801011e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	9203      	str	r2, [sp, #12]
 8010126:	9104      	str	r1, [sp, #16]
 8010128:	9205      	str	r2, [sp, #20]
 801012a:	4641      	mov	r1, r8
 801012c:	465a      	mov	r2, fp
 801012e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010132:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010134:	f7fc fa44 	bl	800c5c0 <LCD_DrawBitmap>
 8010138:	9910      	ldr	r1, [sp, #64]	; 0x40
 801013a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801013c:	f108 0701 	add.w	r7, r8, #1
 8010140:	fa02 f381 	sxtah	r3, r2, r1
 8010144:	42bb      	cmp	r3, r7
 8010146:	d107      	bne.n	8010158 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8010148:	a818      	add	r0, sp, #96	; 0x60
 801014a:	f7fe ff55 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801014e:	a81a      	add	r0, sp, #104	; 0x68
 8010150:	f7fe ff52 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010154:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010156:	e120      	b.n	801039a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010158:	46b8      	mov	r8, r7
 801015a:	e7d1      	b.n	8010100 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 801015c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801015e:	2c02      	cmp	r4, #2
 8010160:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010162:	d00e      	beq.n	8010182 <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8010164:	2c04      	cmp	r4, #4
 8010166:	d018      	beq.n	801019a <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8010168:	2c01      	cmp	r4, #1
 801016a:	d125      	bne.n	80101b8 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 801016c:	2300      	movs	r3, #0
 801016e:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010172:	9309      	str	r3, [sp, #36]	; 0x24
 8010174:	47c0      	blx	r8
 8010176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010178:	54f8      	strb	r0, [r7, r3]
 801017a:	3301      	adds	r3, #1
 801017c:	459b      	cmp	fp, r3
 801017e:	d1f6      	bne.n	801016e <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 8010180:	e019      	b.n	80101b6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8010182:	2300      	movs	r3, #0
 8010184:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010188:	9309      	str	r3, [sp, #36]	; 0x24
 801018a:	47c0      	blx	r8
 801018c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018e:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 8010192:	3301      	adds	r3, #1
 8010194:	459b      	cmp	fp, r3
 8010196:	d1f5      	bne.n	8010184 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8010198:	e00d      	b.n	80101b6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 801019a:	465a      	mov	r2, fp
 801019c:	2300      	movs	r3, #0
 801019e:	f85a 0003 	ldr.w	r0, [sl, r3]
 80101a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80101a4:	9309      	str	r3, [sp, #36]	; 0x24
 80101a6:	47c0      	blx	r8
 80101a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ac:	3a01      	subs	r2, #1
 80101ae:	50f8      	str	r0, [r7, r3]
 80101b0:	f103 0304 	add.w	r3, r3, #4
 80101b4:	d1f3      	bne.n	801019e <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 80101b6:	44b2      	add	sl, r6
 80101b8:	2301      	movs	r3, #1
 80101ba:	2200      	movs	r2, #0
 80101bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	9301      	str	r3, [sp, #4]
 80101c2:	9203      	str	r2, [sp, #12]
 80101c4:	9104      	str	r1, [sp, #16]
 80101c6:	9205      	str	r2, [sp, #20]
 80101c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80101ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80101ce:	4629      	mov	r1, r5
 80101d0:	465a      	mov	r2, fp
 80101d2:	f7fc f9f5 	bl	800c5c0 <LCD_DrawBitmap>
 80101d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80101d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80101da:	1c6f      	adds	r7, r5, #1
 80101dc:	fa01 f380 	sxtah	r3, r1, r0
 80101e0:	42bb      	cmp	r3, r7
 80101e2:	d0b1      	beq.n	8010148 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 80101e4:	463d      	mov	r5, r7
 80101e6:	e7ba      	b.n	801015e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80101e8:	2910      	cmp	r1, #16
 80101ea:	f040 80d8 	bne.w	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80101ee:	fa0f fa87 	sxth.w	sl, r7
 80101f2:	fb0a f004 	mul.w	r0, sl, r4
 80101f6:	f7ff f8bd 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 80101fa:	9012      	str	r0, [sp, #72]	; 0x48
 80101fc:	2800      	cmp	r0, #0
 80101fe:	f000 80ce 	beq.w	801039e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010202:	f7fe feeb 	bl	800efdc <GUI_ALLOC_LockH>
 8010206:	901a      	str	r0, [sp, #104]	; 0x68
 8010208:	4630      	mov	r0, r6
 801020a:	f7fe fee7 	bl	800efdc <GUI_ALLOC_LockH>
 801020e:	9018      	str	r0, [sp, #96]	; 0x60
 8010210:	692b      	ldr	r3, [r5, #16]
 8010212:	f100 0618 	add.w	r6, r0, #24
 8010216:	b113      	cbz	r3, 801021e <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 8010218:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801021c:	b92b      	cbnz	r3, 801022a <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 801021e:	00e2      	lsls	r2, r4, #3
 8010220:	b23f      	sxth	r7, r7
 8010222:	9211      	str	r2, [sp, #68]	; 0x44
 8010224:	007f      	lsls	r7, r7, #1
 8010226:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010228:	e088      	b.n	801033c <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 801022a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801022e:	0080      	lsls	r0, r0, #2
 8010230:	f7ff f8a0 	bl	800f374 <GUI_ALLOC_AllocNoInit>
 8010234:	9011      	str	r0, [sp, #68]	; 0x44
 8010236:	b118      	cbz	r0, 8010240 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8010238:	f7fe fed0 	bl	800efdc <GUI_ALLOC_LockH>
 801023c:	9019      	str	r0, [sp, #100]	; 0x64
 801023e:	e001      	b.n	8010244 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8010240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010242:	9319      	str	r3, [sp, #100]	; 0x64
 8010244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80a0 	beq.w	801038c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 801024c:	b23f      	sxth	r7, r7
 801024e:	007f      	lsls	r7, r7, #1
 8010250:	970e      	str	r7, [sp, #56]	; 0x38
 8010252:	00e7      	lsls	r7, r4, #3
 8010254:	9713      	str	r7, [sp, #76]	; 0x4c
 8010256:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010258:	970c      	str	r7, [sp, #48]	; 0x30
 801025a:	2c02      	cmp	r4, #2
 801025c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010260:	d004      	beq.n	801026c <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 8010262:	2c04      	cmp	r4, #4
 8010264:	d007      	beq.n	8010276 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010266:	2c01      	cmp	r4, #1
 8010268:	d114      	bne.n	8010294 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 801026a:	e004      	b.n	8010276 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 801026c:	4630      	mov	r0, r6
 801026e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010270:	4652      	mov	r2, sl
 8010272:	4623      	mov	r3, r4
 8010274:	e003      	b.n	801027e <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8010276:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010278:	4630      	mov	r0, r6
 801027a:	4652      	mov	r2, sl
 801027c:	2302      	movs	r3, #2
 801027e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8010282:	47b8      	blx	r7
 8010284:	692f      	ldr	r7, [r5, #16]
 8010286:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010288:	4641      	mov	r1, r8
 801028a:	4652      	mov	r2, sl
 801028c:	4623      	mov	r3, r4
 801028e:	47b8      	blx	r7
 8010290:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010292:	443e      	add	r6, r7
 8010294:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010296:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010298:	9104      	str	r1, [sp, #16]
 801029a:	2301      	movs	r3, #1
 801029c:	2200      	movs	r2, #0
 801029e:	f107 0801 	add.w	r8, r7, #1
 80102a2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	9301      	str	r3, [sp, #4]
 80102a8:	9702      	str	r7, [sp, #8]
 80102aa:	9203      	str	r2, [sp, #12]
 80102ac:	9205      	str	r2, [sp, #20]
 80102ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80102b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102b2:	465a      	mov	r2, fp
 80102b4:	f7fc f984 	bl	800c5c0 <LCD_DrawBitmap>
 80102b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80102ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80102bc:	fa00 f387 	sxtah	r3, r0, r7
 80102c0:	4543      	cmp	r3, r8
 80102c2:	d002      	beq.n	80102ca <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 80102c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80102c8:	e7c7      	b.n	801025a <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 80102ca:	a819      	add	r0, sp, #100	; 0x64
 80102cc:	f7fe fe94 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80102d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80102d2:	f7fe febd 	bl	800f050 <GUI_ALLOC_Free>
 80102d6:	e059      	b.n	801038c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 80102d8:	200056d4 	.word	0x200056d4
 80102dc:	20000084 	.word	0x20000084
 80102e0:	2c04      	cmp	r4, #4
 80102e2:	d041      	beq.n	8010368 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 80102e4:	2c01      	cmp	r4, #1
 80102e6:	d111      	bne.n	801030c <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 80102e8:	464a      	mov	r2, r9
 80102ea:	4631      	mov	r1, r6
 80102ec:	f831 0b02 	ldrh.w	r0, [r1], #2
 80102f0:	910a      	str	r1, [sp, #40]	; 0x28
 80102f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80102f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102f6:	4798      	blx	r3
 80102f8:	47c0      	blx	r8
 80102fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102fc:	f802 0b01 	strb.w	r0, [r2], #1
 8010300:	eb09 000a 	add.w	r0, r9, sl
 8010304:	4282      	cmp	r2, r0
 8010306:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010308:	d1f0      	bne.n	80102ec <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 801030a:	443e      	add	r6, r7
 801030c:	2301      	movs	r3, #1
 801030e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010310:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	2200      	movs	r2, #0
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	9002      	str	r0, [sp, #8]
 801031a:	9203      	str	r2, [sp, #12]
 801031c:	9104      	str	r1, [sp, #16]
 801031e:	9205      	str	r2, [sp, #20]
 8010320:	4629      	mov	r1, r5
 8010322:	465a      	mov	r2, fp
 8010324:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010326:	f7fc f94b 	bl	800c5c0 <LCD_DrawBitmap>
 801032a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801032c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801032e:	f105 0901 	add.w	r9, r5, #1
 8010332:	fa02 f381 	sxtah	r3, r2, r1
 8010336:	454b      	cmp	r3, r9
 8010338:	d028      	beq.n	801038c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 801033a:	464d      	mov	r5, r9
 801033c:	2c02      	cmp	r4, #2
 801033e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010342:	d1cd      	bne.n	80102e0 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8010344:	464b      	mov	r3, r9
 8010346:	4631      	mov	r1, r6
 8010348:	46d9      	mov	r9, fp
 801034a:	f831 0b02 	ldrh.w	r0, [r1], #2
 801034e:	910a      	str	r1, [sp, #40]	; 0x28
 8010350:	9309      	str	r3, [sp, #36]	; 0x24
 8010352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010354:	4790      	blx	r2
 8010356:	47c0      	blx	r8
 8010358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801035c:	f823 0b02 	strh.w	r0, [r3], #2
 8010360:	f1b9 0901 	subs.w	r9, r9, #1
 8010364:	d1f1      	bne.n	801034a <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010366:	e7d0      	b.n	801030a <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010368:	464b      	mov	r3, r9
 801036a:	4631      	mov	r1, r6
 801036c:	46d9      	mov	r9, fp
 801036e:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010372:	910a      	str	r1, [sp, #40]	; 0x28
 8010374:	9309      	str	r3, [sp, #36]	; 0x24
 8010376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010378:	4790      	blx	r2
 801037a:	47c0      	blx	r8
 801037c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801037e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010380:	f843 0b04 	str.w	r0, [r3], #4
 8010384:	f1b9 0901 	subs.w	r9, r9, #1
 8010388:	d1f1      	bne.n	801036e <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 801038a:	e7be      	b.n	801030a <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 801038c:	a818      	add	r0, sp, #96	; 0x60
 801038e:	f7fe fe33 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010392:	a81a      	add	r0, sp, #104	; 0x68
 8010394:	f7fe fe30 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010398:	9812      	ldr	r0, [sp, #72]	; 0x48
 801039a:	f7fe fe59 	bl	800f050 <GUI_ALLOC_Free>
 801039e:	b01d      	add	sp, #116	; 0x74
 80103a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103a4 <GUI_MEMDEV__WriteToActiveAlpha>:
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	4d5f      	ldr	r5, [pc, #380]	; (8010528 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 80103aa:	4f60      	ldr	r7, [pc, #384]	; (801052c <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	7c5b      	ldrb	r3, [r3, #17]
 80103b0:	b091      	sub	sp, #68	; 0x44
 80103b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80103b6:	900d      	str	r0, [sp, #52]	; 0x34
 80103b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80103bc:	460e      	mov	r6, r1
 80103be:	4614      	mov	r4, r2
 80103c0:	f7fe fe0c 	bl	800efdc <GUI_ALLOC_LockH>
 80103c4:	4602      	mov	r2, r0
 80103c6:	a810      	add	r0, sp, #64	; 0x40
 80103c8:	6813      	ldr	r3, [r2, #0]
 80103ca:	f840 2d08 	str.w	r2, [r0, #-8]!
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 80103da:	9309      	str	r3, [sp, #36]	; 0x24
 80103dc:	f7fe fe0c 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	7c5b      	ldrb	r3, [r3, #17]
 80103e4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80103e8:	68c3      	ldr	r3, [r0, #12]
 80103ea:	2108      	movs	r1, #8
 80103ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ee:	4798      	blx	r3
 80103f0:	2817      	cmp	r0, #23
 80103f2:	bf88      	it	hi
 80103f4:	2020      	movhi	r0, #32
 80103f6:	9008      	str	r0, [sp, #32]
 80103f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80103fc:	f8d8 2000 	ldr.w	r2, [r8]
 8010400:	910a      	str	r1, [sp, #40]	; 0x28
 8010402:	2000      	movs	r0, #0
 8010404:	920b      	str	r2, [sp, #44]	; 0x2c
 8010406:	f7fc fe07 	bl	800d018 <GUI__AllocAlphaBuffer>
 801040a:	2800      	cmp	r0, #0
 801040c:	f040 8089 	bne.w	8010522 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010410:	682a      	ldr	r2, [r5, #0]
 8010412:	fa0f f78a 	sxth.w	r7, sl
 8010416:	19f5      	adds	r5, r6, r7
 8010418:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 801041c:	3d01      	subs	r5, #1
 801041e:	1aed      	subs	r5, r5, r3
 8010420:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8010424:	2d00      	cmp	r5, #0
 8010426:	bfcc      	ite	gt
 8010428:	ebc5 0507 	rsbgt	r5, r5, r7
 801042c:	463d      	movle	r5, r7
 801042e:	42b3      	cmp	r3, r6
 8010430:	bfc3      	ittte	gt
 8010432:	ebc6 0103 	rsbgt	r1, r6, r3
 8010436:	ebc1 0505 	rsbgt	r5, r1, r5
 801043a:	461e      	movgt	r6, r3
 801043c:	2100      	movle	r1, #0
 801043e:	2d00      	cmp	r5, #0
 8010440:	dd6f      	ble.n	8010522 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010442:	fa0f f389 	sxth.w	r3, r9
 8010446:	18e0      	adds	r0, r4, r3
 8010448:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 801044c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010450:	3801      	subs	r0, #1
 8010452:	ebcc 0000 	rsb	r0, ip, r0
 8010456:	2800      	cmp	r0, #0
 8010458:	bfc8      	it	gt
 801045a:	ebc0 0303 	rsbgt	r3, r0, r3
 801045e:	4294      	cmp	r4, r2
 8010460:	bfbd      	ittte	lt
 8010462:	ebc4 0b02 	rsblt	fp, r4, r2
 8010466:	ebcb 0303 	rsblt	r3, fp, r3
 801046a:	4614      	movlt	r4, r2
 801046c:	f04f 0b00 	movge.w	fp, #0
 8010470:	2b00      	cmp	r3, #0
 8010472:	dd56      	ble.n	8010522 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010474:	fb07 1b0b 	mla	fp, r7, fp, r1
 8010478:	18e3      	adds	r3, r4, r3
 801047a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801047e:	930c      	str	r3, [sp, #48]	; 0x30
 8010480:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010482:	f7f9 fdcd 	bl	800a020 <GUI_MEMDEV_GetDataPtr>
 8010486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	ab0f      	add	r3, sp, #60	; 0x3c
 801048c:	eb00 020b 	add.w	r2, r0, fp
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	4630      	mov	r0, r6
 8010494:	4621      	mov	r1, r4
 8010496:	462b      	mov	r3, r5
 8010498:	f7fc fcd4 	bl	800ce44 <GUI__DoAlphaBlending>
 801049c:	4681      	mov	r9, r0
 801049e:	2800      	cmp	r0, #0
 80104a0:	d03f      	beq.n	8010522 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80104a2:	4b23      	ldr	r3, [pc, #140]	; (8010530 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 80104a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104a6:	4299      	cmp	r1, r3
 80104a8:	d01e      	beq.n	80104e8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80104aa:	4629      	mov	r1, r5
 80104ac:	9a08      	ldr	r2, [sp, #32]
 80104ae:	4643      	mov	r3, r8
 80104b0:	f001 fc50 	bl	8011d54 <GUI__CompactPixelIndicesEx>
 80104b4:	b9c0      	cbnz	r0, 80104e8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80104b6:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80104ba:	f1bc 0f00 	cmp.w	ip, #0
 80104be:	d006      	beq.n	80104ce <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 80104c0:	4648      	mov	r0, r9
 80104c2:	4649      	mov	r1, r9
 80104c4:	fa0f f28a 	sxth.w	r2, sl
 80104c8:	2304      	movs	r3, #4
 80104ca:	47e0      	blx	ip
 80104cc:	e00c      	b.n	80104e8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80104ce:	464a      	mov	r2, r9
 80104d0:	463b      	mov	r3, r7
 80104d2:	6810      	ldr	r0, [r2, #0]
 80104d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104d6:	9206      	str	r2, [sp, #24]
 80104d8:	9307      	str	r3, [sp, #28]
 80104da:	4788      	blx	r1
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	9a06      	ldr	r2, [sp, #24]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	f842 0b04 	str.w	r0, [r2], #4
 80104e6:	d1f4      	bne.n	80104d2 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 80104e8:	9a08      	ldr	r2, [sp, #32]
 80104ea:	9202      	str	r2, [sp, #8]
 80104ec:	2301      	movs	r3, #1
 80104ee:	2200      	movs	r2, #0
 80104f0:	f104 0c01 	add.w	ip, r4, #1
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	9203      	str	r2, [sp, #12]
 80104fa:	9205      	str	r2, [sp, #20]
 80104fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8010500:	4630      	mov	r0, r6
 8010502:	4621      	mov	r1, r4
 8010504:	462a      	mov	r2, r5
 8010506:	f8cd c01c 	str.w	ip, [sp, #28]
 801050a:	f7fc f859 	bl	800c5c0 <LCD_DrawBitmap>
 801050e:	2304      	movs	r3, #4
 8010510:	fb1a bb03 	smlabb	fp, sl, r3, fp
 8010514:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801051a:	459c      	cmp	ip, r3
 801051c:	d001      	beq.n	8010522 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801051e:	4664      	mov	r4, ip
 8010520:	e7ae      	b.n	8010480 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8010522:	b011      	add	sp, #68	; 0x44
 8010524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010528:	20000084 	.word	0x20000084
 801052c:	200056d4 	.word	0x200056d4
 8010530:	0800f3e3 	.word	0x0800f3e3

08010534 <GUI_MEMDEV_WriteAt>:
 8010534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	4615      	mov	r5, r2
 801053a:	4606      	mov	r6, r0
 801053c:	b330      	cbz	r0, 801058c <GUI_MEMDEV_WriteAt+0x58>
 801053e:	f7fe fd4d 	bl	800efdc <GUI_ALLOC_LockH>
 8010542:	4a13      	ldr	r2, [pc, #76]	; (8010590 <GUI_MEMDEV_WriteAt+0x5c>)
 8010544:	8943      	ldrh	r3, [r0, #10]
 8010546:	9001      	str	r0, [sp, #4]
 8010548:	4294      	cmp	r4, r2
 801054a:	8902      	ldrh	r2, [r0, #8]
 801054c:	bf04      	itt	eq
 801054e:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8010552:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8010556:	f8ad 4008 	strh.w	r4, [sp, #8]
 801055a:	3a01      	subs	r2, #1
 801055c:	3b01      	subs	r3, #1
 801055e:	4422      	add	r2, r4
 8010560:	442b      	add	r3, r5
 8010562:	a801      	add	r0, sp, #4
 8010564:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010568:	f8ad 500a 	strh.w	r5, [sp, #10]
 801056c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010570:	f7fe fd42 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010574:	a802      	add	r0, sp, #8
 8010576:	f7f9 f9c5 	bl	8009904 <WM__InitIVRSearch>
 801057a:	b138      	cbz	r0, 801058c <GUI_MEMDEV_WriteAt+0x58>
 801057c:	4630      	mov	r0, r6
 801057e:	4621      	mov	r1, r4
 8010580:	462a      	mov	r2, r5
 8010582:	f7fa fb17 	bl	800abb4 <GUI_MEMDEV__WriteToActiveAt>
 8010586:	f7f9 f8fb 	bl	8009780 <WM__GetNextIVR>
 801058a:	e7f6      	b.n	801057a <GUI_MEMDEV_WriteAt+0x46>
 801058c:	b004      	add	sp, #16
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	fffff001 	.word	0xfffff001

08010594 <GUI_MEMDEV_Write>:
 8010594:	4901      	ldr	r1, [pc, #4]	; (801059c <GUI_MEMDEV_Write+0x8>)
 8010596:	460a      	mov	r2, r1
 8010598:	f7ff bfcc 	b.w	8010534 <GUI_MEMDEV_WriteAt>
 801059c:	fffff001 	.word	0xfffff001

080105a0 <GUI_USAGE_BM_AddPixel>:
 80105a0:	4603      	mov	r3, r0
 80105a2:	b510      	push	{r4, lr}
 80105a4:	f933 4b14 	ldrsh.w	r4, [r3], #20
 80105a8:	1b09      	subs	r1, r1, r4
 80105aa:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80105ae:	6900      	ldr	r0, [r0, #16]
 80105b0:	1b12      	subs	r2, r2, r4
 80105b2:	fb00 3302 	mla	r3, r0, r2, r3
 80105b6:	10c8      	asrs	r0, r1, #3
 80105b8:	2280      	movs	r2, #128	; 0x80
 80105ba:	f001 0107 	and.w	r1, r1, #7
 80105be:	fa42 f101 	asr.w	r1, r2, r1
 80105c2:	5c1a      	ldrb	r2, [r3, r0]
 80105c4:	4311      	orrs	r1, r2
 80105c6:	5419      	strb	r1, [r3, r0]
 80105c8:	bd10      	pop	{r4, pc}

080105ca <GUI_USAGE_BM_GetNextDirty>:
 80105ca:	b570      	push	{r4, r5, r6, lr}
 80105cc:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80105d0:	680b      	ldr	r3, [r1, #0]
 80105d2:	8886      	ldrh	r6, [r0, #4]
 80105d4:	42a2      	cmp	r2, r4
 80105d6:	da41      	bge.n	801065c <GUI_USAGE_BM_GetNextDirty+0x92>
 80105d8:	b236      	sxth	r6, r6
 80105da:	42b3      	cmp	r3, r6
 80105dc:	6904      	ldr	r4, [r0, #16]
 80105de:	da3d      	bge.n	801065c <GUI_USAGE_BM_GetNextDirty+0x92>
 80105e0:	3014      	adds	r0, #20
 80105e2:	fb04 0202 	mla	r2, r4, r2, r0
 80105e6:	10dd      	asrs	r5, r3, #3
 80105e8:	1e70      	subs	r0, r6, #1
 80105ea:	1954      	adds	r4, r2, r5
 80105ec:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 80105f0:	5d55      	ldrb	r5, [r2, r5]
 80105f2:	f003 0207 	and.w	r2, r3, #7
 80105f6:	fa05 f202 	lsl.w	r2, r5, r2
 80105fa:	3401      	adds	r4, #1
 80105fc:	b2d2      	uxtb	r2, r2
 80105fe:	b93a      	cbnz	r2, 8010610 <GUI_USAGE_BM_GetNextDirty+0x46>
 8010600:	b368      	cbz	r0, 801065e <GUI_USAGE_BM_GetNextDirty+0x94>
 8010602:	3308      	adds	r3, #8
 8010604:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010608:	3801      	subs	r0, #1
 801060a:	f023 0307 	bic.w	r3, r3, #7
 801060e:	e7f6      	b.n	80105fe <GUI_USAGE_BM_GetNextDirty+0x34>
 8010610:	0615      	lsls	r5, r2, #24
 8010612:	d403      	bmi.n	801061c <GUI_USAGE_BM_GetNextDirty+0x52>
 8010614:	0052      	lsls	r2, r2, #1
 8010616:	b2d2      	uxtb	r2, r2
 8010618:	3301      	adds	r3, #1
 801061a:	e7f9      	b.n	8010610 <GUI_USAGE_BM_GetNextDirty+0x46>
 801061c:	2aff      	cmp	r2, #255	; 0xff
 801061e:	461d      	mov	r5, r3
 8010620:	d005      	beq.n	801062e <GUI_USAGE_BM_GetNextDirty+0x64>
 8010622:	0656      	lsls	r6, r2, #25
 8010624:	d504      	bpl.n	8010630 <GUI_USAGE_BM_GetNextDirty+0x66>
 8010626:	0052      	lsls	r2, r2, #1
 8010628:	b2d2      	uxtb	r2, r2
 801062a:	3301      	adds	r3, #1
 801062c:	e7f9      	b.n	8010622 <GUI_USAGE_BM_GetNextDirty+0x58>
 801062e:	3307      	adds	r3, #7
 8010630:	f003 0207 	and.w	r2, r3, #7
 8010634:	2a07      	cmp	r2, #7
 8010636:	d10d      	bne.n	8010654 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8010638:	3801      	subs	r0, #1
 801063a:	d40b      	bmi.n	8010654 <GUI_USAGE_BM_GetNextDirty+0x8a>
 801063c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010640:	2aff      	cmp	r2, #255	; 0xff
 8010642:	d101      	bne.n	8010648 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010644:	3308      	adds	r3, #8
 8010646:	e7f7      	b.n	8010638 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8010648:	0610      	lsls	r0, r2, #24
 801064a:	d503      	bpl.n	8010654 <GUI_USAGE_BM_GetNextDirty+0x8a>
 801064c:	0052      	lsls	r2, r2, #1
 801064e:	b2d2      	uxtb	r2, r2
 8010650:	3301      	adds	r3, #1
 8010652:	e7f9      	b.n	8010648 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010654:	1b58      	subs	r0, r3, r5
 8010656:	600d      	str	r5, [r1, #0]
 8010658:	3001      	adds	r0, #1
 801065a:	bd70      	pop	{r4, r5, r6, pc}
 801065c:	2000      	movs	r0, #0
 801065e:	bd70      	pop	{r4, r5, r6, pc}

08010660 <_GUI_USAGE_BM_Delete>:
 8010660:	f7fe bcf6 	b.w	800f050 <GUI_ALLOC_Free>

08010664 <GUI_USAGE_BM_Clear>:
 8010664:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010668:	6902      	ldr	r2, [r0, #16]
 801066a:	2100      	movs	r1, #0
 801066c:	3014      	adds	r0, #20
 801066e:	435a      	muls	r2, r3
 8010670:	f001 be70 	b.w	8012354 <memset>

08010674 <GUI_USAGE_BM_AddHLine>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	f9b0 4000 	ldrsh.w	r4, [r0]
 801067a:	1b09      	subs	r1, r1, r4
 801067c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010680:	42a1      	cmp	r1, r4
 8010682:	da2f      	bge.n	80106e4 <GUI_USAGE_BM_AddHLine+0x70>
 8010684:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8010688:	440b      	add	r3, r1
 801068a:	f100 0414 	add.w	r4, r0, #20
 801068e:	3b01      	subs	r3, #1
 8010690:	6900      	ldr	r0, [r0, #16]
 8010692:	1b52      	subs	r2, r2, r5
 8010694:	43de      	mvns	r6, r3
 8010696:	fb00 4202 	mla	r2, r0, r2, r4
 801069a:	f001 0707 	and.w	r7, r1, #7
 801069e:	10cc      	asrs	r4, r1, #3
 80106a0:	f006 0607 	and.w	r6, r6, #7
 80106a4:	21ff      	movs	r1, #255	; 0xff
 80106a6:	fa41 f707 	asr.w	r7, r1, r7
 80106aa:	fa01 f606 	lsl.w	r6, r1, r6
 80106ae:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 80106b2:	eb02 0504 	add.w	r5, r2, r4
 80106b6:	b2ff      	uxtb	r7, r7
 80106b8:	b2f6      	uxtb	r6, r6
 80106ba:	5d10      	ldrb	r0, [r2, r4]
 80106bc:	d103      	bne.n	80106c6 <GUI_USAGE_BM_AddHLine+0x52>
 80106be:	403e      	ands	r6, r7
 80106c0:	4330      	orrs	r0, r6
 80106c2:	5510      	strb	r0, [r2, r4]
 80106c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c6:	4338      	orrs	r0, r7
 80106c8:	5510      	strb	r0, [r2, r4]
 80106ca:	1e5c      	subs	r4, r3, #1
 80106cc:	2c00      	cmp	r4, #0
 80106ce:	f105 0501 	add.w	r5, r5, #1
 80106d2:	dd04      	ble.n	80106de <GUI_USAGE_BM_AddHLine+0x6a>
 80106d4:	4628      	mov	r0, r5
 80106d6:	4622      	mov	r2, r4
 80106d8:	f001 fe3c 	bl	8012354 <memset>
 80106dc:	4425      	add	r5, r4
 80106de:	782b      	ldrb	r3, [r5, #0]
 80106e0:	431e      	orrs	r6, r3
 80106e2:	702e      	strb	r6, [r5, #0]
 80106e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106e8 <GUI_USAGE_BM_Create>:
 80106e8:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	f102 060f 	add.w	r6, r2, #15
 80106f0:	1136      	asrs	r6, r6, #4
 80106f2:	0076      	lsls	r6, r6, #1
 80106f4:	4682      	mov	sl, r0
 80106f6:	fb06 f003 	mul.w	r0, r6, r3
 80106fa:	3014      	adds	r0, #20
 80106fc:	4689      	mov	r9, r1
 80106fe:	4690      	mov	r8, r2
 8010700:	461f      	mov	r7, r3
 8010702:	f7fe fe43 	bl	800f38c <GUI_ALLOC_AllocZero>
 8010706:	4683      	mov	fp, r0
 8010708:	b198      	cbz	r0, 8010732 <GUI_USAGE_BM_Create+0x4a>
 801070a:	f7fe fc67 	bl	800efdc <GUI_ALLOC_LockH>
 801070e:	4604      	mov	r4, r0
 8010710:	4b0a      	ldr	r3, [pc, #40]	; (801073c <GUI_USAGE_BM_Create+0x54>)
 8010712:	60a3      	str	r3, [r4, #8]
 8010714:	a802      	add	r0, sp, #8
 8010716:	2301      	movs	r3, #1
 8010718:	f840 4d04 	str.w	r4, [r0, #-4]!
 801071c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8010720:	f8a4 a000 	strh.w	sl, [r4]
 8010724:	f8a4 9002 	strh.w	r9, [r4, #2]
 8010728:	80e7      	strh	r7, [r4, #6]
 801072a:	81a3      	strh	r3, [r4, #12]
 801072c:	6126      	str	r6, [r4, #16]
 801072e:	f7fe fc63 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010732:	4658      	mov	r0, fp
 8010734:	b002      	add	sp, #8
 8010736:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 801073a:	bf00      	nop
 801073c:	0801504c 	.word	0x0801504c

08010740 <GUI_USAGE_DecUseCnt>:
 8010740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010742:	4605      	mov	r5, r0
 8010744:	f7fe fc4a 	bl	800efdc <GUI_ALLOC_LockH>
 8010748:	4602      	mov	r2, r0
 801074a:	a802      	add	r0, sp, #8
 801074c:	8994      	ldrh	r4, [r2, #12]
 801074e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8010752:	3c01      	subs	r4, #1
 8010754:	b2a4      	uxth	r4, r4
 8010756:	8194      	strh	r4, [r2, #12]
 8010758:	f7fe fc4e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801075c:	b914      	cbnz	r4, 8010764 <GUI_USAGE_DecUseCnt+0x24>
 801075e:	4628      	mov	r0, r5
 8010760:	f7fe fc76 	bl	800f050 <GUI_ALLOC_Free>
 8010764:	b003      	add	sp, #12
 8010766:	bd30      	pop	{r4, r5, pc}

08010768 <GUI_USAGE_AddRect>:
 8010768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801076c:	4605      	mov	r5, r0
 801076e:	4688      	mov	r8, r1
 8010770:	4617      	mov	r7, r2
 8010772:	4699      	mov	r9, r3
 8010774:	68a8      	ldr	r0, [r5, #8]
 8010776:	464b      	mov	r3, r9
 8010778:	6846      	ldr	r6, [r0, #4]
 801077a:	4641      	mov	r1, r8
 801077c:	4628      	mov	r0, r5
 801077e:	1c54      	adds	r4, r2, #1
 8010780:	47b0      	blx	r6
 8010782:	9b08      	ldr	r3, [sp, #32]
 8010784:	443b      	add	r3, r7
 8010786:	42a3      	cmp	r3, r4
 8010788:	d001      	beq.n	801078e <GUI_USAGE_AddRect+0x26>
 801078a:	4622      	mov	r2, r4
 801078c:	e7f2      	b.n	8010774 <GUI_USAGE_AddRect+0xc>
 801078e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08010794 <GUI_MEMDEV_ReduceYSize>:
 8010794:	b513      	push	{r0, r1, r4, lr}
 8010796:	460c      	mov	r4, r1
 8010798:	b918      	cbnz	r0, 80107a2 <GUI_MEMDEV_ReduceYSize+0xe>
 801079a:	4b08      	ldr	r3, [pc, #32]	; (80107bc <GUI_MEMDEV_ReduceYSize+0x28>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80107a0:	b150      	cbz	r0, 80107b8 <GUI_MEMDEV_ReduceYSize+0x24>
 80107a2:	f7fe fc1b 	bl	800efdc <GUI_ALLOC_LockH>
 80107a6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80107aa:	9001      	str	r0, [sp, #4]
 80107ac:	429c      	cmp	r4, r3
 80107ae:	bfb8      	it	lt
 80107b0:	8144      	strhlt	r4, [r0, #10]
 80107b2:	a801      	add	r0, sp, #4
 80107b4:	f7fe fc20 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80107b8:	b002      	add	sp, #8
 80107ba:	bd10      	pop	{r4, pc}
 80107bc:	20000084 	.word	0x20000084

080107c0 <GUI_MEMDEV_Clear>:
 80107c0:	b513      	push	{r0, r1, r4, lr}
 80107c2:	b918      	cbnz	r0, 80107cc <GUI_MEMDEV_Clear+0xc>
 80107c4:	4b0d      	ldr	r3, [pc, #52]	; (80107fc <GUI_MEMDEV_Clear+0x3c>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80107ca:	b1a8      	cbz	r0, 80107f8 <GUI_MEMDEV_Clear+0x38>
 80107cc:	f7fe fc06 	bl	800efdc <GUI_ALLOC_LockH>
 80107d0:	ab02      	add	r3, sp, #8
 80107d2:	6944      	ldr	r4, [r0, #20]
 80107d4:	f843 0d08 	str.w	r0, [r3, #-8]!
 80107d8:	4668      	mov	r0, sp
 80107da:	f7fe fc0d 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80107de:	b15c      	cbz	r4, 80107f8 <GUI_MEMDEV_Clear+0x38>
 80107e0:	4620      	mov	r0, r4
 80107e2:	f7fe fbfb 	bl	800efdc <GUI_ALLOC_LockH>
 80107e6:	ac02      	add	r4, sp, #8
 80107e8:	6883      	ldr	r3, [r0, #8]
 80107ea:	f844 0d04 	str.w	r0, [r4, #-4]!
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	4798      	blx	r3
 80107f2:	4620      	mov	r0, r4
 80107f4:	f7fe fc00 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80107f8:	b002      	add	sp, #8
 80107fa:	bd10      	pop	{r4, pc}
 80107fc:	20000084 	.word	0x20000084

08010800 <_GetDevData>:
 8010800:	4802      	ldr	r0, [pc, #8]	; (801080c <_GetDevData+0xc>)
 8010802:	2901      	cmp	r1, #1
 8010804:	bf18      	it	ne
 8010806:	2000      	movne	r0, #0
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	080150a4 	.word	0x080150a4

08010810 <_GetDevFunc>:
 8010810:	4802      	ldr	r0, [pc, #8]	; (801081c <_GetDevFunc+0xc>)
 8010812:	2916      	cmp	r1, #22
 8010814:	bf18      	it	ne
 8010816:	2000      	movne	r0, #0
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	0800fc81 	.word	0x0800fc81

08010820 <_SetOrg>:
 8010820:	6800      	ldr	r0, [r0, #0]
 8010822:	b508      	push	{r3, lr}
 8010824:	b110      	cbz	r0, 801082c <_SetOrg+0xc>
 8010826:	68c3      	ldr	r3, [r0, #12]
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	4798      	blx	r3
 801082c:	bd08      	pop	{r3, pc}

0801082e <_GetRect>:
 801082e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010830:	6880      	ldr	r0, [r0, #8]
 8010832:	460c      	mov	r4, r1
 8010834:	f7fe fbd2 	bl	800efdc <GUI_ALLOC_LockH>
 8010838:	4603      	mov	r3, r0
 801083a:	a802      	add	r0, sp, #8
 801083c:	8899      	ldrh	r1, [r3, #4]
 801083e:	88da      	ldrh	r2, [r3, #6]
 8010840:	891d      	ldrh	r5, [r3, #8]
 8010842:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010846:	895b      	ldrh	r3, [r3, #10]
 8010848:	8021      	strh	r1, [r4, #0]
 801084a:	8062      	strh	r2, [r4, #2]
 801084c:	4429      	add	r1, r5
 801084e:	441a      	add	r2, r3
 8010850:	3901      	subs	r1, #1
 8010852:	3a01      	subs	r2, #1
 8010854:	80a1      	strh	r1, [r4, #4]
 8010856:	80e2      	strh	r2, [r4, #6]
 8010858:	f7fe fbce 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801085c:	b003      	add	sp, #12
 801085e:	bd30      	pop	{r4, r5, pc}

08010860 <_XY2PTR>:
 8010860:	4b0e      	ldr	r3, [pc, #56]	; (801089c <_XY2PTR+0x3c>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010866:	4605      	mov	r5, r0
 8010868:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801086a:	460e      	mov	r6, r1
 801086c:	f7fe fbb6 	bl	800efdc <GUI_ALLOC_LockH>
 8010870:	4603      	mov	r3, r0
 8010872:	a802      	add	r0, sp, #8
 8010874:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010878:	f840 3d04 	str.w	r3, [r0, #-4]!
 801087c:	f103 0118 	add.w	r1, r3, #24
 8010880:	1b36      	subs	r6, r6, r4
 8010882:	68dc      	ldr	r4, [r3, #12]
 8010884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010888:	fb04 1406 	mla	r4, r4, r6, r1
 801088c:	1aed      	subs	r5, r5, r3
 801088e:	f7fe fbb3 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010892:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010896:	4620      	mov	r0, r4
 8010898:	b002      	add	sp, #8
 801089a:	bd70      	pop	{r4, r5, r6, pc}
 801089c:	20000084 	.word	0x20000084

080108a0 <_GetPixelIndex>:
 80108a0:	b508      	push	{r3, lr}
 80108a2:	4608      	mov	r0, r1
 80108a4:	4611      	mov	r1, r2
 80108a6:	f7ff ffdb 	bl	8010860 <_XY2PTR>
 80108aa:	8800      	ldrh	r0, [r0, #0]
 80108ac:	bd08      	pop	{r3, pc}
	...

080108b0 <_XorPixel>:
 80108b0:	4b14      	ldr	r3, [pc, #80]	; (8010904 <_XorPixel+0x54>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108b6:	4607      	mov	r7, r0
 80108b8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80108ba:	4615      	mov	r5, r2
 80108bc:	460e      	mov	r6, r1
 80108be:	f7fe fb8d 	bl	800efdc <GUI_ALLOC_LockH>
 80108c2:	4629      	mov	r1, r5
 80108c4:	9000      	str	r0, [sp, #0]
 80108c6:	4630      	mov	r0, r6
 80108c8:	f7ff ffca 	bl	8010860 <_XY2PTR>
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	4604      	mov	r4, r0
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	4798      	blx	r3
 80108d4:	8823      	ldrh	r3, [r4, #0]
 80108d6:	4058      	eors	r0, r3
 80108d8:	9b00      	ldr	r3, [sp, #0]
 80108da:	8020      	strh	r0, [r4, #0]
 80108dc:	6958      	ldr	r0, [r3, #20]
 80108de:	b160      	cbz	r0, 80108fa <_XorPixel+0x4a>
 80108e0:	f7fe fb7c 	bl	800efdc <GUI_ALLOC_LockH>
 80108e4:	ac02      	add	r4, sp, #8
 80108e6:	6883      	ldr	r3, [r0, #8]
 80108e8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4631      	mov	r1, r6
 80108f0:	462a      	mov	r2, r5
 80108f2:	4798      	blx	r3
 80108f4:	4620      	mov	r0, r4
 80108f6:	f7fe fb7f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80108fa:	4668      	mov	r0, sp
 80108fc:	f7fe fb7c 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010900:	b003      	add	sp, #12
 8010902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010904:	20000084 	.word	0x20000084

08010908 <_SetPixelIndex>:
 8010908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801090a:	461c      	mov	r4, r3
 801090c:	4b10      	ldr	r3, [pc, #64]	; (8010950 <_SetPixelIndex+0x48>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010912:	460e      	mov	r6, r1
 8010914:	4615      	mov	r5, r2
 8010916:	f7fe fb61 	bl	800efdc <GUI_ALLOC_LockH>
 801091a:	4629      	mov	r1, r5
 801091c:	9000      	str	r0, [sp, #0]
 801091e:	4630      	mov	r0, r6
 8010920:	f7ff ff9e 	bl	8010860 <_XY2PTR>
 8010924:	9b00      	ldr	r3, [sp, #0]
 8010926:	8004      	strh	r4, [r0, #0]
 8010928:	6958      	ldr	r0, [r3, #20]
 801092a:	b160      	cbz	r0, 8010946 <_SetPixelIndex+0x3e>
 801092c:	f7fe fb56 	bl	800efdc <GUI_ALLOC_LockH>
 8010930:	ac02      	add	r4, sp, #8
 8010932:	6883      	ldr	r3, [r0, #8]
 8010934:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4631      	mov	r1, r6
 801093c:	462a      	mov	r2, r5
 801093e:	4798      	blx	r3
 8010940:	4620      	mov	r0, r4
 8010942:	f7fe fb59 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010946:	4668      	mov	r0, sp
 8010948:	f7fe fb56 	bl	800eff8 <GUI_ALLOC_UnlockH>
 801094c:	b002      	add	sp, #8
 801094e:	bd70      	pop	{r4, r5, r6, pc}
 8010950:	20000084 	.word	0x20000084

08010954 <_DrawVLine>:
 8010954:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010958:	4d2c      	ldr	r5, [pc, #176]	; (8010a0c <_DrawVLine+0xb8>)
 801095a:	461e      	mov	r6, r3
 801095c:	682b      	ldr	r3, [r5, #0]
 801095e:	4681      	mov	r9, r0
 8010960:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010962:	460f      	mov	r7, r1
 8010964:	4614      	mov	r4, r2
 8010966:	f7fe fb39 	bl	800efdc <GUI_ALLOC_LockH>
 801096a:	9000      	str	r0, [sp, #0]
 801096c:	6940      	ldr	r0, [r0, #20]
 801096e:	46aa      	mov	sl, r5
 8010970:	b108      	cbz	r0, 8010976 <_DrawVLine+0x22>
 8010972:	f7fe fb33 	bl	800efdc <GUI_ALLOC_LockH>
 8010976:	9001      	str	r0, [sp, #4]
 8010978:	4621      	mov	r1, r4
 801097a:	4638      	mov	r0, r7
 801097c:	f7ff ff70 	bl	8010860 <_XY2PTR>
 8010980:	9b00      	ldr	r3, [sp, #0]
 8010982:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010986:	f8da 3000 	ldr.w	r3, [sl]
 801098a:	7c1a      	ldrb	r2, [r3, #16]
 801098c:	07d2      	lsls	r2, r2, #31
 801098e:	4605      	mov	r5, r0
 8010990:	d51f      	bpl.n	80109d2 <_DrawVLine+0x7e>
 8010992:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	4798      	blx	r3
 801099a:	fa1f f880 	uxth.w	r8, r0
 801099e:	9801      	ldr	r0, [sp, #4]
 80109a0:	b120      	cbz	r0, 80109ac <_DrawVLine+0x58>
 80109a2:	6883      	ldr	r3, [r0, #8]
 80109a4:	4639      	mov	r1, r7
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4622      	mov	r2, r4
 80109aa:	4798      	blx	r3
 80109ac:	882b      	ldrh	r3, [r5, #0]
 80109ae:	ea88 0303 	eor.w	r3, r8, r3
 80109b2:	802b      	strh	r3, [r5, #0]
 80109b4:	9b00      	ldr	r3, [sp, #0]
 80109b6:	3401      	adds	r4, #1
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	42b4      	cmp	r4, r6
 80109bc:	441d      	add	r5, r3
 80109be:	ddee      	ble.n	801099e <_DrawVLine+0x4a>
 80109c0:	4668      	mov	r0, sp
 80109c2:	f7fe fb19 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80109c6:	9b01      	ldr	r3, [sp, #4]
 80109c8:	b1eb      	cbz	r3, 8010a06 <_DrawVLine+0xb2>
 80109ca:	a801      	add	r0, sp, #4
 80109cc:	f7fe fb14 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80109d0:	e019      	b.n	8010a06 <_DrawVLine+0xb2>
 80109d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109d4:	f8d3 9000 	ldr.w	r9, [r3]
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	b163      	cbz	r3, 80109f6 <_DrawVLine+0xa2>
 80109dc:	9801      	ldr	r0, [sp, #4]
 80109de:	6883      	ldr	r3, [r0, #8]
 80109e0:	4622      	mov	r2, r4
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4639      	mov	r1, r7
 80109e6:	3401      	adds	r4, #1
 80109e8:	4798      	blx	r3
 80109ea:	42b4      	cmp	r4, r6
 80109ec:	f8a5 9000 	strh.w	r9, [r5]
 80109f0:	4445      	add	r5, r8
 80109f2:	ddf3      	ble.n	80109dc <_DrawVLine+0x88>
 80109f4:	e7e4      	b.n	80109c0 <_DrawVLine+0x6c>
 80109f6:	1b34      	subs	r4, r6, r4
 80109f8:	3401      	adds	r4, #1
 80109fa:	3c01      	subs	r4, #1
 80109fc:	f8a5 9000 	strh.w	r9, [r5]
 8010a00:	4445      	add	r5, r8
 8010a02:	d1fa      	bne.n	80109fa <_DrawVLine+0xa6>
 8010a04:	e7dc      	b.n	80109c0 <_DrawVLine+0x6c>
 8010a06:	b002      	add	sp, #8
 8010a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a0c:	20000084 	.word	0x20000084

08010a10 <_FillRect>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	4f2a      	ldr	r7, [pc, #168]	; (8010ac0 <_FillRect+0xb0>)
 8010a16:	4614      	mov	r4, r2
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	4698      	mov	r8, r3
 8010a1c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010a1e:	b087      	sub	sp, #28
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	9302      	str	r3, [sp, #8]
 8010a24:	4682      	mov	sl, r0
 8010a26:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8010a28:	460e      	mov	r6, r1
 8010a2a:	f7fe fad7 	bl	800efdc <GUI_ALLOC_LockH>
 8010a2e:	4621      	mov	r1, r4
 8010a30:	9004      	str	r0, [sp, #16]
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7ff ff14 	bl	8010860 <_XY2PTR>
 8010a38:	9a04      	ldr	r2, [sp, #16]
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	6950      	ldr	r0, [r2, #20]
 8010a3e:	68d3      	ldr	r3, [r2, #12]
 8010a40:	9303      	str	r3, [sp, #12]
 8010a42:	ebc6 0908 	rsb	r9, r6, r8
 8010a46:	f109 0801 	add.w	r8, r9, #1
 8010a4a:	46bb      	mov	fp, r7
 8010a4c:	b180      	cbz	r0, 8010a70 <_FillRect+0x60>
 8010a4e:	f7fe fac5 	bl	800efdc <GUI_ALLOC_LockH>
 8010a52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a54:	af06      	add	r7, sp, #24
 8010a56:	1b13      	subs	r3, r2, r4
 8010a58:	f847 0d04 	str.w	r0, [r7, #-4]!
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	4631      	mov	r1, r6
 8010a62:	4622      	mov	r2, r4
 8010a64:	4643      	mov	r3, r8
 8010a66:	f7ff fe7f 	bl	8010768 <GUI_USAGE_AddRect>
 8010a6a:	4638      	mov	r0, r7
 8010a6c:	f7fe fac4 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010a70:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8010a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a76:	429c      	cmp	r4, r3
 8010a78:	dc1c      	bgt.n	8010ab4 <_FillRect+0xa4>
 8010a7a:	f8db 3000 	ldr.w	r3, [fp]
 8010a7e:	7c1b      	ldrb	r3, [r3, #16]
 8010a80:	07db      	lsls	r3, r3, #31
 8010a82:	d50d      	bpl.n	8010aa0 <_FillRect+0x90>
 8010a84:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	4798      	blx	r3
 8010a8c:	19aa      	adds	r2, r5, r6
 8010a8e:	b280      	uxth	r0, r0
 8010a90:	1eab      	subs	r3, r5, #2
 8010a92:	8859      	ldrh	r1, [r3, #2]
 8010a94:	4041      	eors	r1, r0
 8010a96:	f823 1f02 	strh.w	r1, [r3, #2]!
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d1f9      	bne.n	8010a92 <_FillRect+0x82>
 8010a9e:	e005      	b.n	8010aac <_FillRect+0x9c>
 8010aa0:	9b02      	ldr	r3, [sp, #8]
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	b299      	uxth	r1, r3
 8010aa6:	4642      	mov	r2, r8
 8010aa8:	f7fb ffc6 	bl	800ca38 <GUI__memset16>
 8010aac:	9a03      	ldr	r2, [sp, #12]
 8010aae:	3401      	adds	r4, #1
 8010ab0:	4415      	add	r5, r2
 8010ab2:	e7df      	b.n	8010a74 <_FillRect+0x64>
 8010ab4:	a804      	add	r0, sp, #16
 8010ab6:	f7fe fa9f 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010aba:	b007      	add	sp, #28
 8010abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac0:	20000084 	.word	0x20000084

08010ac4 <_DrawHLine>:
 8010ac4:	b507      	push	{r0, r1, r2, lr}
 8010ac6:	9200      	str	r2, [sp, #0]
 8010ac8:	f7ff ffa2 	bl	8010a10 <_FillRect>
 8010acc:	b003      	add	sp, #12
 8010ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010ad4 <_DrawBitmap>:
 8010ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4c8b      	ldr	r4, [pc, #556]	; (8010d08 <_DrawBitmap+0x234>)
 8010ada:	b093      	sub	sp, #76	; 0x4c
 8010adc:	469b      	mov	fp, r3
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	900d      	str	r0, [sp, #52]	; 0x34
 8010ae2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010ae4:	9207      	str	r2, [sp, #28]
 8010ae6:	460d      	mov	r5, r1
 8010ae8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8010aec:	f7fe fa76 	bl	800efdc <GUI_ALLOC_LockH>
 8010af0:	9010      	str	r0, [sp, #64]	; 0x40
 8010af2:	6940      	ldr	r0, [r0, #20]
 8010af4:	b108      	cbz	r0, 8010afa <_DrawBitmap+0x26>
 8010af6:	f7fe fa71 	bl	800efdc <GUI_ALLOC_LockH>
 8010afa:	9011      	str	r0, [sp, #68]	; 0x44
 8010afc:	a812      	add	r0, sp, #72	; 0x48
 8010afe:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	9308      	str	r3, [sp, #32]
 8010b06:	f7fe fa77 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010b0a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010b0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010b0e:	442e      	add	r6, r5
 8010b10:	9604      	str	r6, [sp, #16]
 8010b12:	b150      	cbz	r0, 8010b2a <_DrawBitmap+0x56>
 8010b14:	6823      	ldr	r3, [r4, #0]
 8010b16:	7c1b      	ldrb	r3, [r3, #16]
 8010b18:	0799      	lsls	r1, r3, #30
 8010b1a:	d106      	bne.n	8010b2a <_DrawBitmap+0x56>
 8010b1c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010b1e:	9700      	str	r7, [sp, #0]
 8010b20:	4631      	mov	r1, r6
 8010b22:	9a07      	ldr	r2, [sp, #28]
 8010b24:	465b      	mov	r3, fp
 8010b26:	f7ff fe1f 	bl	8010768 <GUI_USAGE_AddRect>
 8010b2a:	9804      	ldr	r0, [sp, #16]
 8010b2c:	9907      	ldr	r1, [sp, #28]
 8010b2e:	f7ff fe97 	bl	8010860 <_XY2PTR>
 8010b32:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010b34:	2e10      	cmp	r6, #16
 8010b36:	4604      	mov	r4, r0
 8010b38:	d13a      	bne.n	8010bb0 <_DrawBitmap+0xdc>
 8010b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b3c:	b11b      	cbz	r3, 8010b46 <_DrawBitmap+0x72>
 8010b3e:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8010b42:	2500      	movs	r5, #0
 8010b44:	e014      	b.n	8010b70 <_DrawBitmap+0x9c>
 8010b46:	4b71      	ldr	r3, [pc, #452]	; (8010d0c <_DrawBitmap+0x238>)
 8010b48:	681d      	ldr	r5, [r3, #0]
 8010b4a:	2d00      	cmp	r5, #0
 8010b4c:	d0f7      	beq.n	8010b3e <_DrawBitmap+0x6a>
 8010b4e:	9e08      	ldr	r6, [sp, #32]
 8010b50:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010b52:	9600      	str	r6, [sp, #0]
 8010b54:	9701      	str	r7, [sp, #4]
 8010b56:	4651      	mov	r1, sl
 8010b58:	465a      	mov	r2, fp
 8010b5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010b5c:	47a8      	blx	r5
 8010b5e:	e349      	b.n	80111f4 <_DrawBitmap+0x720>
 8010b60:	f1ba 0f00 	cmp.w	sl, #0
 8010b64:	d10a      	bne.n	8010b7c <_DrawBitmap+0xa8>
 8010b66:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010b68:	44ba      	add	sl, r7
 8010b6a:	9f08      	ldr	r7, [sp, #32]
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	443c      	add	r4, r7
 8010b70:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010b72:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8010b76:	42bd      	cmp	r5, r7
 8010b78:	dbf2      	blt.n	8010b60 <_DrawBitmap+0x8c>
 8010b7a:	e014      	b.n	8010ba6 <_DrawBitmap+0xd2>
 8010b7c:	2c00      	cmp	r4, #0
 8010b7e:	d0f2      	beq.n	8010b66 <_DrawBitmap+0x92>
 8010b80:	4b63      	ldr	r3, [pc, #396]	; (8010d10 <_DrawBitmap+0x23c>)
 8010b82:	4620      	mov	r0, r4
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4651      	mov	r1, sl
 8010b88:	4632      	mov	r2, r6
 8010b8a:	4798      	blx	r3
 8010b8c:	f1b8 0f00 	cmp.w	r8, #0
 8010b90:	d0e9      	beq.n	8010b66 <_DrawBitmap+0x92>
 8010b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b96:	9a07      	ldr	r2, [sp, #28]
 8010b98:	685f      	ldr	r7, [r3, #4]
 8010b9a:	9904      	ldr	r1, [sp, #16]
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	442a      	add	r2, r5
 8010ba0:	465b      	mov	r3, fp
 8010ba2:	47b8      	blx	r7
 8010ba4:	e7df      	b.n	8010b66 <_DrawBitmap+0x92>
 8010ba6:	f1b8 0f00 	cmp.w	r8, #0
 8010baa:	f040 8320 	bne.w	80111ee <_DrawBitmap+0x71a>
 8010bae:	e321      	b.n	80111f4 <_DrawBitmap+0x720>
 8010bb0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010bb2:	2e17      	cmp	r6, #23
 8010bb4:	dd38      	ble.n	8010c28 <_DrawBitmap+0x154>
 8010bb6:	2600      	movs	r6, #0
 8010bb8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010bba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010bbc:	42be      	cmp	r6, r7
 8010bbe:	f280 809e 	bge.w	8010cfe <_DrawBitmap+0x22a>
 8010bc2:	9f07      	ldr	r7, [sp, #28]
 8010bc4:	4437      	add	r7, r6
 8010bc6:	f1ba 0f00 	cmp.w	sl, #0
 8010bca:	d027      	beq.n	8010c1c <_DrawBitmap+0x148>
 8010bcc:	b334      	cbz	r4, 8010c1c <_DrawBitmap+0x148>
 8010bce:	b13d      	cbz	r5, 8010be0 <_DrawBitmap+0x10c>
 8010bd0:	68ab      	ldr	r3, [r5, #8]
 8010bd2:	9904      	ldr	r1, [sp, #16]
 8010bd4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8010bd8:	4628      	mov	r0, r5
 8010bda:	463a      	mov	r2, r7
 8010bdc:	465b      	mov	r3, fp
 8010bde:	47e0      	blx	ip
 8010be0:	1ea3      	subs	r3, r4, #2
 8010be2:	f1aa 0904 	sub.w	r9, sl, #4
 8010be6:	9303      	str	r3, [sp, #12]
 8010be8:	46d8      	mov	r8, fp
 8010bea:	9b04      	ldr	r3, [sp, #16]
 8010bec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010bee:	445b      	add	r3, fp
 8010bf0:	ebc8 0103 	rsb	r1, r8, r3
 8010bf4:	6903      	ldr	r3, [r0, #16]
 8010bf6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	9102      	str	r1, [sp, #8]
 8010bfe:	4798      	blx	r3
 8010c00:	9b03      	ldr	r3, [sp, #12]
 8010c02:	9902      	ldr	r1, [sp, #8]
 8010c04:	f823 0f02 	strh.w	r0, [r3, #2]!
 8010c08:	9303      	str	r3, [sp, #12]
 8010c0a:	b125      	cbz	r5, 8010c16 <_DrawBitmap+0x142>
 8010c0c:	68ab      	ldr	r3, [r5, #8]
 8010c0e:	4628      	mov	r0, r5
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	463a      	mov	r2, r7
 8010c14:	4798      	blx	r3
 8010c16:	f1b8 0801 	subs.w	r8, r8, #1
 8010c1a:	d1e6      	bne.n	8010bea <_DrawBitmap+0x116>
 8010c1c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010c1e:	44ba      	add	sl, r7
 8010c20:	9f08      	ldr	r7, [sp, #32]
 8010c22:	3601      	adds	r6, #1
 8010c24:	443c      	add	r4, r7
 8010c26:	e7c7      	b.n	8010bb8 <_DrawBitmap+0xe4>
 8010c28:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010c2a:	2e08      	cmp	r6, #8
 8010c2c:	f100 0402 	add.w	r4, r0, #2
 8010c30:	d170      	bne.n	8010d14 <_DrawBitmap+0x240>
 8010c32:	9e07      	ldr	r6, [sp, #28]
 8010c34:	9f07      	ldr	r7, [sp, #28]
 8010c36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010c38:	1bf3      	subs	r3, r6, r7
 8010c3a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010c3c:	42bb      	cmp	r3, r7
 8010c3e:	f1a4 0002 	sub.w	r0, r4, #2
 8010c42:	da5c      	bge.n	8010cfe <_DrawBitmap+0x22a>
 8010c44:	4b30      	ldr	r3, [pc, #192]	; (8010d08 <_DrawBitmap+0x234>)
 8010c46:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	7c1b      	ldrb	r3, [r3, #16]
 8010c4c:	b367      	cbz	r7, 8010ca8 <_DrawBitmap+0x1d4>
 8010c4e:	f013 0303 	ands.w	r3, r3, #3
 8010c52:	d004      	beq.n	8010c5e <_DrawBitmap+0x18a>
 8010c54:	2b02      	cmp	r3, #2
 8010c56:	d14c      	bne.n	8010cf2 <_DrawBitmap+0x21e>
 8010c58:	46a0      	mov	r8, r4
 8010c5a:	9f04      	ldr	r7, [sp, #16]
 8010c5c:	e01d      	b.n	8010c9a <_DrawBitmap+0x1c6>
 8010c5e:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010c62:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010c64:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8010c68:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	455b      	cmp	r3, fp
 8010c70:	d1f5      	bne.n	8010c5e <_DrawBitmap+0x18a>
 8010c72:	e03e      	b.n	8010cf2 <_DrawBitmap+0x21e>
 8010c74:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010c76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010c7a:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010c7e:	b12d      	cbz	r5, 8010c8c <_DrawBitmap+0x1b8>
 8010c80:	68ab      	ldr	r3, [r5, #8]
 8010c82:	4628      	mov	r0, r5
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4639      	mov	r1, r7
 8010c88:	4632      	mov	r2, r6
 8010c8a:	4798      	blx	r3
 8010c8c:	9b04      	ldr	r3, [sp, #16]
 8010c8e:	3701      	adds	r7, #1
 8010c90:	445b      	add	r3, fp
 8010c92:	42bb      	cmp	r3, r7
 8010c94:	f108 0802 	add.w	r8, r8, #2
 8010c98:	d02b      	beq.n	8010cf2 <_DrawBitmap+0x21e>
 8010c9a:	9804      	ldr	r0, [sp, #16]
 8010c9c:	ebc0 030a 	rsb	r3, r0, sl
 8010ca0:	5ddb      	ldrb	r3, [r3, r7]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d0f2      	beq.n	8010c8c <_DrawBitmap+0x1b8>
 8010ca6:	e7e5      	b.n	8010c74 <_DrawBitmap+0x1a0>
 8010ca8:	f013 0303 	ands.w	r3, r3, #3
 8010cac:	d004      	beq.n	8010cb8 <_DrawBitmap+0x1e4>
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d11f      	bne.n	8010cf2 <_DrawBitmap+0x21e>
 8010cb2:	46a0      	mov	r8, r4
 8010cb4:	9f04      	ldr	r7, [sp, #16]
 8010cb6:	e015      	b.n	8010ce4 <_DrawBitmap+0x210>
 8010cb8:	4b15      	ldr	r3, [pc, #84]	; (8010d10 <_DrawBitmap+0x23c>)
 8010cba:	4651      	mov	r1, sl
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	465a      	mov	r2, fp
 8010cc0:	4798      	blx	r3
 8010cc2:	e016      	b.n	8010cf2 <_DrawBitmap+0x21e>
 8010cc4:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010cc8:	b12d      	cbz	r5, 8010cd6 <_DrawBitmap+0x202>
 8010cca:	68ab      	ldr	r3, [r5, #8]
 8010ccc:	4628      	mov	r0, r5
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4639      	mov	r1, r7
 8010cd2:	4632      	mov	r2, r6
 8010cd4:	4798      	blx	r3
 8010cd6:	9b04      	ldr	r3, [sp, #16]
 8010cd8:	3701      	adds	r7, #1
 8010cda:	445b      	add	r3, fp
 8010cdc:	42bb      	cmp	r3, r7
 8010cde:	f108 0802 	add.w	r8, r8, #2
 8010ce2:	d006      	beq.n	8010cf2 <_DrawBitmap+0x21e>
 8010ce4:	9a04      	ldr	r2, [sp, #16]
 8010ce6:	ebc2 030a 	rsb	r3, r2, sl
 8010cea:	5ddb      	ldrb	r3, [r3, r7]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d0f2      	beq.n	8010cd6 <_DrawBitmap+0x202>
 8010cf0:	e7e8      	b.n	8010cc4 <_DrawBitmap+0x1f0>
 8010cf2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010cf4:	44ba      	add	sl, r7
 8010cf6:	9f08      	ldr	r7, [sp, #32]
 8010cf8:	3601      	adds	r6, #1
 8010cfa:	443c      	add	r4, r7
 8010cfc:	e79a      	b.n	8010c34 <_DrawBitmap+0x160>
 8010cfe:	2d00      	cmp	r5, #0
 8010d00:	f040 8275 	bne.w	80111ee <_DrawBitmap+0x71a>
 8010d04:	e276      	b.n	80111f4 <_DrawBitmap+0x720>
 8010d06:	bf00      	nop
 8010d08:	20000084 	.word	0x20000084
 8010d0c:	200055f4 	.word	0x200055f4
 8010d10:	20000074 	.word	0x20000074
 8010d14:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010d16:	4bab      	ldr	r3, [pc, #684]	; (8010fc4 <_DrawBitmap+0x4f0>)
 8010d18:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010d1a:	9409      	str	r4, [sp, #36]	; 0x24
 8010d1c:	2e00      	cmp	r6, #0
 8010d1e:	bf08      	it	eq
 8010d20:	461e      	moveq	r6, r3
 8010d22:	9621      	str	r6, [sp, #132]	; 0x84
 8010d24:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010d26:	0076      	lsls	r6, r6, #1
 8010d28:	960e      	str	r6, [sp, #56]	; 0x38
 8010d2a:	00bf      	lsls	r7, r7, #2
 8010d2c:	9e07      	ldr	r6, [sp, #28]
 8010d2e:	970f      	str	r7, [sp, #60]	; 0x3c
 8010d30:	9605      	str	r6, [sp, #20]
 8010d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d34:	9e05      	ldr	r6, [sp, #20]
 8010d36:	9f07      	ldr	r7, [sp, #28]
 8010d38:	1e9c      	subs	r4, r3, #2
 8010d3a:	1bf3      	subs	r3, r6, r7
 8010d3c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010d3e:	42b3      	cmp	r3, r6
 8010d40:	f280 8253 	bge.w	80111ea <_DrawBitmap+0x716>
 8010d44:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010d46:	2f02      	cmp	r7, #2
 8010d48:	f000 80d9 	beq.w	8010efe <_DrawBitmap+0x42a>
 8010d4c:	2f04      	cmp	r7, #4
 8010d4e:	f000 8178 	beq.w	8011042 <_DrawBitmap+0x56e>
 8010d52:	2f01      	cmp	r7, #1
 8010d54:	f040 823f 	bne.w	80111d6 <_DrawBitmap+0x702>
 8010d58:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8010fcc <_DrawBitmap+0x4f8>
 8010d5c:	f8d9 3000 	ldr.w	r3, [r9]
 8010d60:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010d62:	f7fe f93b 	bl	800efdc <GUI_ALLOC_LockH>
 8010d66:	f89a 3000 	ldrb.w	r3, [sl]
 8010d6a:	4a97      	ldr	r2, [pc, #604]	; (8010fc8 <_DrawBitmap+0x4f4>)
 8010d6c:	9010      	str	r0, [sp, #64]	; 0x40
 8010d6e:	5cd5      	ldrb	r5, [r2, r3]
 8010d70:	f8d9 3000 	ldr.w	r3, [r9]
 8010d74:	9820      	ldr	r0, [sp, #128]	; 0x80
 8010d76:	7c1b      	ldrb	r3, [r3, #16]
 8010d78:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010d7a:	f003 0303 	and.w	r3, r3, #3
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	465e      	mov	r6, fp
 8010d82:	f1c0 0808 	rsb	r8, r0, #8
 8010d86:	fa45 f500 	asr.w	r5, r5, r0
 8010d8a:	d022      	beq.n	8010dd2 <_DrawBitmap+0x2fe>
 8010d8c:	2b03      	cmp	r3, #3
 8010d8e:	d062      	beq.n	8010e56 <_DrawBitmap+0x382>
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d060      	beq.n	8010e56 <_DrawBitmap+0x382>
 8010d94:	4652      	mov	r2, sl
 8010d96:	4546      	cmp	r6, r8
 8010d98:	bf38      	it	cc
 8010d9a:	46b0      	movcc	r8, r6
 8010d9c:	ebc8 0606 	rsb	r6, r8, r6
 8010da0:	4643      	mov	r3, r8
 8010da2:	4621      	mov	r1, r4
 8010da4:	f005 0001 	and.w	r0, r5, #1
 8010da8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010daa:	3b01      	subs	r3, #1
 8010dac:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8010db0:	f821 0b02 	strh.w	r0, [r1], #2
 8010db4:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010db8:	d1f4      	bne.n	8010da4 <_DrawBitmap+0x2d0>
 8010dba:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010dbe:	2e00      	cmp	r6, #0
 8010dc0:	f000 8099 	beq.w	8010ef6 <_DrawBitmap+0x422>
 8010dc4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010dc8:	497f      	ldr	r1, [pc, #508]	; (8010fc8 <_DrawBitmap+0x4f4>)
 8010dca:	f04f 0808 	mov.w	r8, #8
 8010dce:	5ccd      	ldrb	r5, [r1, r3]
 8010dd0:	e7e1      	b.n	8010d96 <_DrawBitmap+0x2c2>
 8010dd2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010dd4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010dd8:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8010ddc:	f8cd a018 	str.w	sl, [sp, #24]
 8010de0:	4546      	cmp	r6, r8
 8010de2:	bf38      	it	cc
 8010de4:	46b0      	movcc	r8, r6
 8010de6:	ebc8 0606 	rsb	r6, r8, r6
 8010dea:	b32f      	cbz	r7, 8010e38 <_DrawBitmap+0x364>
 8010dec:	b91d      	cbnz	r5, 8010df6 <_DrawBitmap+0x322>
 8010dee:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010df2:	44c1      	add	r9, r8
 8010df4:	e024      	b.n	8010e40 <_DrawBitmap+0x36c>
 8010df6:	07ea      	lsls	r2, r5, #31
 8010df8:	d50b      	bpl.n	8010e12 <_DrawBitmap+0x33e>
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	9a05      	ldr	r2, [sp, #20]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f8cd c008 	str.w	ip, [sp, #8]
 8010e04:	4638      	mov	r0, r7
 8010e06:	4649      	mov	r1, r9
 8010e08:	4798      	blx	r3
 8010e0a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010e0e:	f8a4 c000 	strh.w	ip, [r4]
 8010e12:	f1b8 0801 	subs.w	r8, r8, #1
 8010e16:	f109 0901 	add.w	r9, r9, #1
 8010e1a:	f104 0402 	add.w	r4, r4, #2
 8010e1e:	d00f      	beq.n	8010e40 <_DrawBitmap+0x36c>
 8010e20:	086d      	lsrs	r5, r5, #1
 8010e22:	e7e3      	b.n	8010dec <_DrawBitmap+0x318>
 8010e24:	07eb      	lsls	r3, r5, #31
 8010e26:	bf48      	it	mi
 8010e28:	f8a4 c000 	strhmi.w	ip, [r4]
 8010e2c:	f1b8 0801 	subs.w	r8, r8, #1
 8010e30:	f104 0402 	add.w	r4, r4, #2
 8010e34:	d004      	beq.n	8010e40 <_DrawBitmap+0x36c>
 8010e36:	086d      	lsrs	r5, r5, #1
 8010e38:	2d00      	cmp	r5, #0
 8010e3a:	d1f3      	bne.n	8010e24 <_DrawBitmap+0x350>
 8010e3c:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010e40:	2e00      	cmp	r6, #0
 8010e42:	d058      	beq.n	8010ef6 <_DrawBitmap+0x422>
 8010e44:	9906      	ldr	r1, [sp, #24]
 8010e46:	4a60      	ldr	r2, [pc, #384]	; (8010fc8 <_DrawBitmap+0x4f4>)
 8010e48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e4c:	9106      	str	r1, [sp, #24]
 8010e4e:	5cd5      	ldrb	r5, [r2, r3]
 8010e50:	f04f 0808 	mov.w	r8, #8
 8010e54:	e7c4      	b.n	8010de0 <_DrawBitmap+0x30c>
 8010e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e58:	6913      	ldr	r3, [r2, #16]
 8010e5a:	689b      	ldr	r3, [r3, #8]
 8010e5c:	4798      	blx	r3
 8010e5e:	9b04      	ldr	r3, [sp, #16]
 8010e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e62:	b280      	uxth	r0, r0
 8010e64:	900a      	str	r0, [sp, #40]	; 0x28
 8010e66:	f10a 0901 	add.w	r9, sl, #1
 8010e6a:	4546      	cmp	r6, r8
 8010e6c:	bf38      	it	cc
 8010e6e:	46b0      	movcc	r8, r6
 8010e70:	ebc8 0606 	rsb	r6, r8, r6
 8010e74:	1ca3      	adds	r3, r4, #2
 8010e76:	b31f      	cbz	r7, 8010ec0 <_DrawBitmap+0x3ec>
 8010e78:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010e7e:	9a06      	ldr	r2, [sp, #24]
 8010e80:	4440      	add	r0, r8
 8010e82:	900c      	str	r0, [sp, #48]	; 0x30
 8010e84:	1a81      	subs	r1, r0, r2
 8010e86:	07e8      	lsls	r0, r5, #31
 8010e88:	d50d      	bpl.n	8010ea6 <_DrawBitmap+0x3d2>
 8010e8a:	68ba      	ldr	r2, [r7, #8]
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	f8d2 c000 	ldr.w	ip, [r2]
 8010e92:	9a05      	ldr	r2, [sp, #20]
 8010e94:	9302      	str	r3, [sp, #8]
 8010e96:	47e0      	blx	ip
 8010e98:	9b02      	ldr	r3, [sp, #8]
 8010e9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010e9c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8010ea0:	4042      	eors	r2, r0
 8010ea2:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010ea6:	9906      	ldr	r1, [sp, #24]
 8010ea8:	3901      	subs	r1, #1
 8010eaa:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010eae:	f103 0302 	add.w	r3, r3, #2
 8010eb2:	9106      	str	r1, [sp, #24]
 8010eb4:	d1e2      	bne.n	8010e7c <_DrawBitmap+0x3a8>
 8010eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eba:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010ebe:	e010      	b.n	8010ee2 <_DrawBitmap+0x40e>
 8010ec0:	4642      	mov	r2, r8
 8010ec2:	07e9      	lsls	r1, r5, #31
 8010ec4:	d505      	bpl.n	8010ed2 <_DrawBitmap+0x3fe>
 8010ec6:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8010eca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ecc:	4041      	eors	r1, r0
 8010ece:	f823 1c02 	strh.w	r1, [r3, #-2]
 8010ed2:	3a01      	subs	r2, #1
 8010ed4:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010ed8:	f103 0302 	add.w	r3, r3, #2
 8010edc:	d1f1      	bne.n	8010ec2 <_DrawBitmap+0x3ee>
 8010ede:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010ee2:	b146      	cbz	r6, 8010ef6 <_DrawBitmap+0x422>
 8010ee4:	f899 3000 	ldrb.w	r3, [r9]
 8010ee8:	4a37      	ldr	r2, [pc, #220]	; (8010fc8 <_DrawBitmap+0x4f4>)
 8010eea:	f109 0901 	add.w	r9, r9, #1
 8010eee:	5cd5      	ldrb	r5, [r2, r3]
 8010ef0:	f04f 0808 	mov.w	r8, #8
 8010ef4:	e7b9      	b.n	8010e6a <_DrawBitmap+0x396>
 8010ef6:	a810      	add	r0, sp, #64	; 0x40
 8010ef8:	f7fe f87e 	bl	800eff8 <GUI_ALLOC_UnlockH>
 8010efc:	e16b      	b.n	80111d6 <_DrawBitmap+0x702>
 8010efe:	4b33      	ldr	r3, [pc, #204]	; (8010fcc <_DrawBitmap+0x4f8>)
 8010f00:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010f06:	7c1b      	ldrb	r3, [r3, #16]
 8010f08:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010f0c:	f1c6 0504 	rsb	r5, r6, #4
 8010f10:	f89a 6000 	ldrb.w	r6, [sl]
 8010f14:	f003 0303 	and.w	r3, r3, #3
 8010f18:	40be      	lsls	r6, r7
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	b2ed      	uxtb	r5, r5
 8010f1e:	b2f6      	uxtb	r6, r6
 8010f20:	d06a      	beq.n	8010ff8 <_DrawBitmap+0x524>
 8010f22:	d308      	bcc.n	8010f36 <_DrawBitmap+0x462>
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	f040 8156 	bne.w	80111d6 <_DrawBitmap+0x702>
 8010f2a:	f8cd a018 	str.w	sl, [sp, #24]
 8010f2e:	465f      	mov	r7, fp
 8010f30:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010f34:	e03e      	b.n	8010fb4 <_DrawBitmap+0x4e0>
 8010f36:	4652      	mov	r2, sl
 8010f38:	465b      	mov	r3, fp
 8010f3a:	429d      	cmp	r5, r3
 8010f3c:	bfc8      	it	gt
 8010f3e:	b2dd      	uxtbgt	r5, r3
 8010f40:	1b5b      	subs	r3, r3, r5
 8010f42:	4629      	mov	r1, r5
 8010f44:	4620      	mov	r0, r4
 8010f46:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 8010f4a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010f4c:	3901      	subs	r1, #1
 8010f4e:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 8010f52:	f820 cb02 	strh.w	ip, [r0], #2
 8010f56:	00b6      	lsls	r6, r6, #2
 8010f58:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8010f5c:	b2f6      	uxtb	r6, r6
 8010f5e:	d1f2      	bne.n	8010f46 <_DrawBitmap+0x472>
 8010f60:	3d01      	subs	r5, #1
 8010f62:	b2ed      	uxtb	r5, r5
 8010f64:	3501      	adds	r5, #1
 8010f66:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 8133 	beq.w	80111d6 <_DrawBitmap+0x702>
 8010f70:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8010f74:	2504      	movs	r5, #4
 8010f76:	e7e0      	b.n	8010f3a <_DrawBitmap+0x466>
 8010f78:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8010f7c:	eb08 010c 	add.w	r1, r8, ip
 8010f80:	d126      	bne.n	8010fd0 <_DrawBitmap+0x4fc>
 8010f82:	f108 0801 	add.w	r8, r8, #1
 8010f86:	fa5f f388 	uxtb.w	r3, r8
 8010f8a:	00b6      	lsls	r6, r6, #2
 8010f8c:	429d      	cmp	r5, r3
 8010f8e:	b2f6      	uxtb	r6, r6
 8010f90:	d1f2      	bne.n	8010f78 <_DrawBitmap+0x4a4>
 8010f92:	3d01      	subs	r5, #1
 8010f94:	b2ed      	uxtb	r5, r5
 8010f96:	1c6b      	adds	r3, r5, #1
 8010f98:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010f9c:	f10c 0301 	add.w	r3, ip, #1
 8010fa0:	eb03 0c05 	add.w	ip, r3, r5
 8010fa4:	2f00      	cmp	r7, #0
 8010fa6:	f000 8116 	beq.w	80111d6 <_DrawBitmap+0x702>
 8010faa:	9b06      	ldr	r3, [sp, #24]
 8010fac:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8010fb0:	9306      	str	r3, [sp, #24]
 8010fb2:	2504      	movs	r5, #4
 8010fb4:	42bd      	cmp	r5, r7
 8010fb6:	bfc8      	it	gt
 8010fb8:	b2fd      	uxtbgt	r5, r7
 8010fba:	1b7f      	subs	r7, r7, r5
 8010fbc:	f04f 0800 	mov.w	r8, #0
 8010fc0:	e7da      	b.n	8010f78 <_DrawBitmap+0x4a4>
 8010fc2:	bf00      	nop
 8010fc4:	08015064 	.word	0x08015064
 8010fc8:	08014f08 	.word	0x08014f08
 8010fcc:	20000084 	.word	0x20000084
 8010fd0:	09b3      	lsrs	r3, r6, #6
 8010fd2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010fd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010fd8:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8010fdc:	f1b9 0f00 	cmp.w	r9, #0
 8010fe0:	d0cf      	beq.n	8010f82 <_DrawBitmap+0x4ae>
 8010fe2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010fe6:	9a05      	ldr	r2, [sp, #20]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f8cd c008 	str.w	ip, [sp, #8]
 8010fee:	4648      	mov	r0, r9
 8010ff0:	4798      	blx	r3
 8010ff2:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010ff6:	e7c4      	b.n	8010f82 <_DrawBitmap+0x4ae>
 8010ff8:	4651      	mov	r1, sl
 8010ffa:	465b      	mov	r3, fp
 8010ffc:	429d      	cmp	r5, r3
 8010ffe:	bfc8      	it	gt
 8011000:	b2dd      	uxtbgt	r5, r3
 8011002:	1b5b      	subs	r3, r3, r5
 8011004:	1ca2      	adds	r2, r4, #2
 8011006:	4628      	mov	r0, r5
 8011008:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 801100c:	d005      	beq.n	801101a <_DrawBitmap+0x546>
 801100e:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8011012:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8011016:	f822 7c02 	strh.w	r7, [r2, #-2]
 801101a:	3801      	subs	r0, #1
 801101c:	00b6      	lsls	r6, r6, #2
 801101e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8011022:	b2f6      	uxtb	r6, r6
 8011024:	f102 0202 	add.w	r2, r2, #2
 8011028:	d1ee      	bne.n	8011008 <_DrawBitmap+0x534>
 801102a:	3d01      	subs	r5, #1
 801102c:	b2ed      	uxtb	r5, r5
 801102e:	3501      	adds	r5, #1
 8011030:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8011034:	2b00      	cmp	r3, #0
 8011036:	f000 80ce 	beq.w	80111d6 <_DrawBitmap+0x702>
 801103a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801103e:	2504      	movs	r5, #4
 8011040:	e7dc      	b.n	8010ffc <_DrawBitmap+0x528>
 8011042:	4a6e      	ldr	r2, [pc, #440]	; (80111fc <_DrawBitmap+0x728>)
 8011044:	f89a 3000 	ldrb.w	r3, [sl]
 8011048:	6812      	ldr	r2, [r2, #0]
 801104a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801104c:	7c12      	ldrb	r2, [r2, #16]
 801104e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011050:	f002 0203 	and.w	r2, r2, #3
 8011054:	40bb      	lsls	r3, r7
 8011056:	2a01      	cmp	r2, #1
 8011058:	b2dd      	uxtb	r5, r3
 801105a:	f000 8095 	beq.w	8011188 <_DrawBitmap+0x6b4>
 801105e:	d302      	bcc.n	8011066 <_DrawBitmap+0x592>
 8011060:	2a02      	cmp	r2, #2
 8011062:	d036      	beq.n	80110d2 <_DrawBitmap+0x5fe>
 8011064:	e0b7      	b.n	80111d6 <_DrawBitmap+0x702>
 8011066:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011068:	b166      	cbz	r6, 8011084 <_DrawBitmap+0x5b0>
 801106a:	092d      	lsrs	r5, r5, #4
 801106c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801106e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8011072:	8023      	strh	r3, [r4, #0]
 8011074:	f10a 0201 	add.w	r2, sl, #1
 8011078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801107a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801107e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011082:	e001      	b.n	8011088 <_DrawBitmap+0x5b4>
 8011084:	465b      	mov	r3, fp
 8011086:	4652      	mov	r2, sl
 8011088:	2b01      	cmp	r3, #1
 801108a:	dd19      	ble.n	80110c0 <_DrawBitmap+0x5ec>
 801108c:	1058      	asrs	r0, r3, #1
 801108e:	1d21      	adds	r1, r4, #4
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	eb02 0c00 	add.w	ip, r2, r0
 8011098:	092f      	lsrs	r7, r5, #4
 801109a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801109c:	f005 050f 	and.w	r5, r5, #15
 80110a0:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80110a4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80110a8:	f821 7c04 	strh.w	r7, [r1, #-4]
 80110ac:	f821 5c02 	strh.w	r5, [r1, #-2]
 80110b0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80110b4:	4562      	cmp	r2, ip
 80110b6:	f101 0104 	add.w	r1, r1, #4
 80110ba:	d1ed      	bne.n	8011098 <_DrawBitmap+0x5c4>
 80110bc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 8088 	beq.w	80111d6 <_DrawBitmap+0x702>
 80110c6:	092d      	lsrs	r5, r5, #4
 80110c8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80110ca:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80110ce:	8023      	strh	r3, [r4, #0]
 80110d0:	e081      	b.n	80111d6 <_DrawBitmap+0x702>
 80110d2:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80110d4:	b1c7      	cbz	r7, 8011108 <_DrawBitmap+0x634>
 80110d6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80110da:	d00b      	beq.n	80110f4 <_DrawBitmap+0x620>
 80110dc:	092d      	lsrs	r5, r5, #4
 80110de:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80110e0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80110e4:	8023      	strh	r3, [r4, #0]
 80110e6:	b12e      	cbz	r6, 80110f4 <_DrawBitmap+0x620>
 80110e8:	68b3      	ldr	r3, [r6, #8]
 80110ea:	9904      	ldr	r1, [sp, #16]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	9a05      	ldr	r2, [sp, #20]
 80110f0:	4630      	mov	r0, r6
 80110f2:	4798      	blx	r3
 80110f4:	9804      	ldr	r0, [sp, #16]
 80110f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80110f8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80110fc:	1c47      	adds	r7, r0, #1
 80110fe:	f10b 39ff 	add.w	r9, fp, #4294967295
 8011102:	f10a 0801 	add.w	r8, sl, #1
 8011106:	e00f      	b.n	8011128 <_DrawBitmap+0x654>
 8011108:	46d9      	mov	r9, fp
 801110a:	46d0      	mov	r8, sl
 801110c:	9f04      	ldr	r7, [sp, #16]
 801110e:	e00b      	b.n	8011128 <_DrawBitmap+0x654>
 8011110:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8011114:	d10c      	bne.n	8011130 <_DrawBitmap+0x65c>
 8011116:	f015 050f 	ands.w	r5, r5, #15
 801111a:	d117      	bne.n	801114c <_DrawBitmap+0x678>
 801111c:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8011120:	3404      	adds	r4, #4
 8011122:	3702      	adds	r7, #2
 8011124:	f1a9 0902 	sub.w	r9, r9, #2
 8011128:	f1b9 0f01 	cmp.w	r9, #1
 801112c:	dcf0      	bgt.n	8011110 <_DrawBitmap+0x63c>
 801112e:	e01a      	b.n	8011166 <_DrawBitmap+0x692>
 8011130:	092b      	lsrs	r3, r5, #4
 8011132:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011134:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011138:	8023      	strh	r3, [r4, #0]
 801113a:	2e00      	cmp	r6, #0
 801113c:	d0eb      	beq.n	8011116 <_DrawBitmap+0x642>
 801113e:	68b3      	ldr	r3, [r6, #8]
 8011140:	9a05      	ldr	r2, [sp, #20]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4630      	mov	r0, r6
 8011146:	4639      	mov	r1, r7
 8011148:	4798      	blx	r3
 801114a:	e7e4      	b.n	8011116 <_DrawBitmap+0x642>
 801114c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801114e:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8011152:	8063      	strh	r3, [r4, #2]
 8011154:	2e00      	cmp	r6, #0
 8011156:	d0e1      	beq.n	801111c <_DrawBitmap+0x648>
 8011158:	68b3      	ldr	r3, [r6, #8]
 801115a:	9a05      	ldr	r2, [sp, #20]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4630      	mov	r0, r6
 8011160:	1c79      	adds	r1, r7, #1
 8011162:	4798      	blx	r3
 8011164:	e7da      	b.n	801111c <_DrawBitmap+0x648>
 8011166:	f1b9 0f00 	cmp.w	r9, #0
 801116a:	d034      	beq.n	80111d6 <_DrawBitmap+0x702>
 801116c:	092d      	lsrs	r5, r5, #4
 801116e:	d032      	beq.n	80111d6 <_DrawBitmap+0x702>
 8011170:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011172:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8011176:	8023      	strh	r3, [r4, #0]
 8011178:	b36e      	cbz	r6, 80111d6 <_DrawBitmap+0x702>
 801117a:	68b3      	ldr	r3, [r6, #8]
 801117c:	9a05      	ldr	r2, [sp, #20]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4630      	mov	r0, r6
 8011182:	4639      	mov	r1, r7
 8011184:	4798      	blx	r3
 8011186:	e026      	b.n	80111d6 <_DrawBitmap+0x702>
 8011188:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801118a:	f1c6 0302 	rsb	r3, r6, #2
 801118e:	b2db      	uxtb	r3, r3
 8011190:	4650      	mov	r0, sl
 8011192:	465a      	mov	r2, fp
 8011194:	4293      	cmp	r3, r2
 8011196:	bfc8      	it	gt
 8011198:	b2d3      	uxtbgt	r3, r2
 801119a:	1ad2      	subs	r2, r2, r3
 801119c:	1ca1      	adds	r1, r4, #2
 801119e:	461e      	mov	r6, r3
 80111a0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80111a4:	d005      	beq.n	80111b2 <_DrawBitmap+0x6de>
 80111a6:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 80111aa:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 80111ae:	f821 7c02 	strh.w	r7, [r1, #-2]
 80111b2:	3e01      	subs	r6, #1
 80111b4:	012d      	lsls	r5, r5, #4
 80111b6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80111ba:	b2ed      	uxtb	r5, r5
 80111bc:	f101 0102 	add.w	r1, r1, #2
 80111c0:	d1ee      	bne.n	80111a0 <_DrawBitmap+0x6cc>
 80111c2:	3b01      	subs	r3, #1
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	3301      	adds	r3, #1
 80111c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80111cc:	b11a      	cbz	r2, 80111d6 <_DrawBitmap+0x702>
 80111ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80111d2:	2302      	movs	r3, #2
 80111d4:	e7de      	b.n	8011194 <_DrawBitmap+0x6c0>
 80111d6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80111d8:	9b05      	ldr	r3, [sp, #20]
 80111da:	9e08      	ldr	r6, [sp, #32]
 80111dc:	44ba      	add	sl, r7
 80111de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80111e0:	3301      	adds	r3, #1
 80111e2:	4437      	add	r7, r6
 80111e4:	9305      	str	r3, [sp, #20]
 80111e6:	9709      	str	r7, [sp, #36]	; 0x24
 80111e8:	e5a3      	b.n	8010d32 <_DrawBitmap+0x25e>
 80111ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111ec:	b113      	cbz	r3, 80111f4 <_DrawBitmap+0x720>
 80111ee:	a811      	add	r0, sp, #68	; 0x44
 80111f0:	f7fd ff02 	bl	800eff8 <GUI_ALLOC_UnlockH>
 80111f4:	b013      	add	sp, #76	; 0x4c
 80111f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111fa:	bf00      	nop
 80111fc:	20000084 	.word	0x20000084

08011200 <_GetDevProp>:
 8011200:	2908      	cmp	r1, #8
 8011202:	b508      	push	{r3, lr}
 8011204:	d008      	beq.n	8011218 <_GetDevProp+0x18>
 8011206:	6800      	ldr	r0, [r0, #0]
 8011208:	b118      	cbz	r0, 8011212 <_GetDevProp+0x12>
 801120a:	68c3      	ldr	r3, [r0, #12]
 801120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120e:	4798      	blx	r3
 8011210:	bd08      	pop	{r3, pc}
 8011212:	f04f 30ff 	mov.w	r0, #4294967295
 8011216:	bd08      	pop	{r3, pc}
 8011218:	2010      	movs	r0, #16
 801121a:	bd08      	pop	{r3, pc}

0801121c <LCD_SelectLCD>:
 801121c:	b510      	push	{r4, lr}
 801121e:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <LCD_SelectLCD+0x38>)
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	7c51      	ldrb	r1, [r2, #17]
 8011224:	4a0c      	ldr	r2, [pc, #48]	; (8011258 <LCD_SelectLCD+0x3c>)
 8011226:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801122a:	461c      	mov	r4, r3
 801122c:	b140      	cbz	r0, 8011240 <LCD_SelectLCD+0x24>
 801122e:	68c3      	ldr	r3, [r0, #12]
 8011230:	b113      	cbz	r3, 8011238 <LCD_SelectLCD+0x1c>
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b04      	cmp	r3, #4
 8011236:	d001      	beq.n	801123c <LCD_SelectLCD+0x20>
 8011238:	6800      	ldr	r0, [r0, #0]
 801123a:	e7f7      	b.n	801122c <LCD_SelectLCD+0x10>
 801123c:	f7fc f9cc 	bl	800d5d8 <GUI_DEVICE_Unlink>
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	2200      	movs	r2, #0
 8011244:	661a      	str	r2, [r3, #96]	; 0x60
 8011246:	f103 0208 	add.w	r2, r3, #8
 801124a:	615a      	str	r2, [r3, #20]
 801124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011250:	f7fb bac2 	b.w	800c7d8 <LCD_SetClipRectMax>
 8011254:	20000084 	.word	0x20000084
 8011258:	200056d4 	.word	0x200056d4

0801125c <LCD_ReadRectEx>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	b087      	sub	sp, #28
 8011262:	4617      	mov	r7, r2
 8011264:	9304      	str	r3, [sp, #16]
 8011266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011268:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801126a:	68da      	ldr	r2, [r3, #12]
 801126c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801126e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8011272:	4606      	mov	r6, r0
 8011274:	460d      	mov	r5, r1
 8011276:	b973      	cbnz	r3, 8011296 <LCD_ReadRectEx+0x3a>
 8011278:	4b71      	ldr	r3, [pc, #452]	; (8011440 <LCD_ReadRectEx+0x1e4>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	7c58      	ldrb	r0, [r3, #17]
 801127e:	f7fa ff55 	bl	800c12c <GUI_GetBitsPerPixelEx>
 8011282:	2808      	cmp	r0, #8
 8011284:	4682      	mov	sl, r0
 8011286:	dd15      	ble.n	80112b4 <LCD_ReadRectEx+0x58>
 8011288:	2810      	cmp	r0, #16
 801128a:	bfcc      	ite	gt
 801128c:	f04f 0904 	movgt.w	r9, #4
 8011290:	f04f 0902 	movle.w	r9, #2
 8011294:	e010      	b.n	80112b8 <LCD_ReadRectEx+0x5c>
 8011296:	a811      	add	r0, sp, #68	; 0x44
 8011298:	2101      	movs	r1, #1
 801129a:	4798      	blx	r3
 801129c:	4684      	mov	ip, r0
 801129e:	2800      	cmp	r0, #0
 80112a0:	d0ea      	beq.n	8011278 <LCD_ReadRectEx+0x1c>
 80112a2:	9b04      	ldr	r3, [sp, #16]
 80112a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80112a6:	e88d 0018 	stmia.w	sp, {r3, r4}
 80112aa:	4631      	mov	r1, r6
 80112ac:	462a      	mov	r2, r5
 80112ae:	463b      	mov	r3, r7
 80112b0:	47e0      	blx	ip
 80112b2:	e0c1      	b.n	8011438 <LCD_ReadRectEx+0x1dc>
 80112b4:	f04f 0901 	mov.w	r9, #1
 80112b8:	f04f 0b00 	mov.w	fp, #0
 80112bc:	9b04      	ldr	r3, [sp, #16]
 80112be:	429d      	cmp	r5, r3
 80112c0:	f300 80ba 	bgt.w	8011438 <LCD_ReadRectEx+0x1dc>
 80112c4:	f1b9 0f02 	cmp.w	r9, #2
 80112c8:	d009      	beq.n	80112de <LCD_ReadRectEx+0x82>
 80112ca:	f1b9 0f04 	cmp.w	r9, #4
 80112ce:	d004      	beq.n	80112da <LCD_ReadRectEx+0x7e>
 80112d0:	f1b9 0f01 	cmp.w	r9, #1
 80112d4:	f040 80ae 	bne.w	8011434 <LCD_ReadRectEx+0x1d8>
 80112d8:	e003      	b.n	80112e2 <LCD_ReadRectEx+0x86>
 80112da:	46b4      	mov	ip, r6
 80112dc:	e09b      	b.n	8011416 <LCD_ReadRectEx+0x1ba>
 80112de:	46b4      	mov	ip, r6
 80112e0:	e08a      	b.n	80113f8 <LCD_ReadRectEx+0x19c>
 80112e2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80112e6:	2a07      	cmp	r2, #7
 80112e8:	f200 80a4 	bhi.w	8011434 <LCD_ReadRectEx+0x1d8>
 80112ec:	e8df f002 	tbb	[pc, r2]
 80112f0:	0606080a 	.word	0x0606080a
 80112f4:	04040404 	.word	0x04040404
 80112f8:	46b4      	mov	ip, r6
 80112fa:	e066      	b.n	80113ca <LCD_ReadRectEx+0x16e>
 80112fc:	46b4      	mov	ip, r6
 80112fe:	e047      	b.n	8011390 <LCD_ReadRectEx+0x134>
 8011300:	46b4      	mov	ip, r6
 8011302:	e022      	b.n	801134a <LCD_ReadRectEx+0xee>
 8011304:	46b4      	mov	ip, r6
 8011306:	45bc      	cmp	ip, r7
 8011308:	f300 8094 	bgt.w	8011434 <LCD_ReadRectEx+0x1d8>
 801130c:	4661      	mov	r1, ip
 801130e:	462a      	mov	r2, r5
 8011310:	f8cd c00c 	str.w	ip, [sp, #12]
 8011314:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011316:	47c0      	blx	r8
 8011318:	f1cb 0207 	rsb	r2, fp, #7
 801131c:	fa00 f202 	lsl.w	r2, r0, r2
 8011320:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8011324:	7820      	ldrb	r0, [r4, #0]
 8011326:	fa41 f10b 	asr.w	r1, r1, fp
 801132a:	4001      	ands	r1, r0
 801132c:	430a      	orrs	r2, r1
 801132e:	7022      	strb	r2, [r4, #0]
 8011330:	f10b 0301 	add.w	r3, fp, #1
 8011334:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011338:	f023 0207 	bic.w	r2, r3, #7
 801133c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8011340:	fa43 fb02 	asr.w	fp, r3, r2
 8011344:	f10c 0c01 	add.w	ip, ip, #1
 8011348:	e7dd      	b.n	8011306 <LCD_ReadRectEx+0xaa>
 801134a:	45bc      	cmp	ip, r7
 801134c:	dc72      	bgt.n	8011434 <LCD_ReadRectEx+0x1d8>
 801134e:	4661      	mov	r1, ip
 8011350:	462a      	mov	r2, r5
 8011352:	f8cd c00c 	str.w	ip, [sp, #12]
 8011356:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011358:	47c0      	blx	r8
 801135a:	ea4f 024b 	mov.w	r2, fp, lsl #1
 801135e:	f1c2 0106 	rsb	r1, r2, #6
 8011362:	fa00 f101 	lsl.w	r1, r0, r1
 8011366:	f64f 703f 	movw	r0, #65343	; 0xff3f
 801136a:	fa40 f202 	asr.w	r2, r0, r2
 801136e:	7820      	ldrb	r0, [r4, #0]
 8011370:	4002      	ands	r2, r0
 8011372:	4311      	orrs	r1, r2
 8011374:	7021      	strb	r1, [r4, #0]
 8011376:	f10b 0301 	add.w	r3, fp, #1
 801137a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801137e:	f023 0203 	bic.w	r2, r3, #3
 8011382:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8011386:	fa43 fb02 	asr.w	fp, r3, r2
 801138a:	f10c 0c01 	add.w	ip, ip, #1
 801138e:	e7dc      	b.n	801134a <LCD_ReadRectEx+0xee>
 8011390:	45bc      	cmp	ip, r7
 8011392:	dc4f      	bgt.n	8011434 <LCD_ReadRectEx+0x1d8>
 8011394:	4661      	mov	r1, ip
 8011396:	462a      	mov	r2, r5
 8011398:	f8cd c00c 	str.w	ip, [sp, #12]
 801139c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801139e:	47c0      	blx	r8
 80113a0:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80113a4:	f1c2 0104 	rsb	r1, r2, #4
 80113a8:	fa00 f101 	lsl.w	r1, r0, r1
 80113ac:	200f      	movs	r0, #15
 80113ae:	fa00 f202 	lsl.w	r2, r0, r2
 80113b2:	7820      	ldrb	r0, [r4, #0]
 80113b4:	4002      	ands	r2, r0
 80113b6:	4311      	orrs	r1, r2
 80113b8:	7021      	strb	r1, [r4, #0]
 80113ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80113be:	445c      	add	r4, fp
 80113c0:	f10c 0c01 	add.w	ip, ip, #1
 80113c4:	f08b 0b01 	eor.w	fp, fp, #1
 80113c8:	e7e2      	b.n	8011390 <LCD_ReadRectEx+0x134>
 80113ca:	4273      	negs	r3, r6
 80113cc:	1ba2      	subs	r2, r4, r6
 80113ce:	45bc      	cmp	ip, r7
 80113d0:	9305      	str	r3, [sp, #20]
 80113d2:	4462      	add	r2, ip
 80113d4:	dc0e      	bgt.n	80113f4 <LCD_ReadRectEx+0x198>
 80113d6:	4661      	mov	r1, ip
 80113d8:	462a      	mov	r2, r5
 80113da:	f8cd c00c 	str.w	ip, [sp, #12]
 80113de:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113e0:	47c0      	blx	r8
 80113e2:	9a05      	ldr	r2, [sp, #20]
 80113e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80113e8:	4422      	add	r2, r4
 80113ea:	f802 000c 	strb.w	r0, [r2, ip]
 80113ee:	f10c 0c01 	add.w	ip, ip, #1
 80113f2:	e7ea      	b.n	80113ca <LCD_ReadRectEx+0x16e>
 80113f4:	4614      	mov	r4, r2
 80113f6:	e01d      	b.n	8011434 <LCD_ReadRectEx+0x1d8>
 80113f8:	45bc      	cmp	ip, r7
 80113fa:	dc1b      	bgt.n	8011434 <LCD_ReadRectEx+0x1d8>
 80113fc:	4661      	mov	r1, ip
 80113fe:	f8cd c00c 	str.w	ip, [sp, #12]
 8011402:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011404:	462a      	mov	r2, r5
 8011406:	47c0      	blx	r8
 8011408:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801140c:	f824 0b02 	strh.w	r0, [r4], #2
 8011410:	f10c 0c01 	add.w	ip, ip, #1
 8011414:	e7f0      	b.n	80113f8 <LCD_ReadRectEx+0x19c>
 8011416:	45bc      	cmp	ip, r7
 8011418:	dc0c      	bgt.n	8011434 <LCD_ReadRectEx+0x1d8>
 801141a:	4661      	mov	r1, ip
 801141c:	f8cd c00c 	str.w	ip, [sp, #12]
 8011420:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011422:	462a      	mov	r2, r5
 8011424:	47c0      	blx	r8
 8011426:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801142a:	f844 0b04 	str.w	r0, [r4], #4
 801142e:	f10c 0c01 	add.w	ip, ip, #1
 8011432:	e7f0      	b.n	8011416 <LCD_ReadRectEx+0x1ba>
 8011434:	3501      	adds	r5, #1
 8011436:	e741      	b.n	80112bc <LCD_ReadRectEx+0x60>
 8011438:	b007      	add	sp, #28
 801143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143e:	bf00      	nop
 8011440:	20000084 	.word	0x20000084

08011444 <GUI_ReadRectEx>:
 8011444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011446:	4d16      	ldr	r5, [pc, #88]	; (80114a0 <GUI_ReadRectEx+0x5c>)
 8011448:	9e05      	ldr	r6, [sp, #20]
 801144a:	682d      	ldr	r5, [r5, #0]
 801144c:	9c06      	ldr	r4, [sp, #24]
 801144e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8011452:	42b8      	cmp	r0, r7
 8011454:	bfb8      	it	lt
 8011456:	4638      	movlt	r0, r7
 8011458:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 801145c:	42ba      	cmp	r2, r7
 801145e:	bfa8      	it	ge
 8011460:	463a      	movge	r2, r7
 8011462:	4282      	cmp	r2, r0
 8011464:	db1b      	blt.n	801149e <GUI_ReadRectEx+0x5a>
 8011466:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 801146a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801146e:	42b9      	cmp	r1, r7
 8011470:	bfb8      	it	lt
 8011472:	4639      	movlt	r1, r7
 8011474:	42ab      	cmp	r3, r5
 8011476:	bfa8      	it	ge
 8011478:	462b      	movge	r3, r5
 801147a:	428b      	cmp	r3, r1
 801147c:	db0f      	blt.n	801149e <GUI_ReadRectEx+0x5a>
 801147e:	68e5      	ldr	r5, [r4, #12]
 8011480:	682d      	ldr	r5, [r5, #0]
 8011482:	f035 0704 	bics.w	r7, r5, #4
 8011486:	d105      	bne.n	8011494 <GUI_ReadRectEx+0x50>
 8011488:	9605      	str	r6, [sp, #20]
 801148a:	9406      	str	r4, [sp, #24]
 801148c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011490:	f7ff bee4 	b.w	801125c <LCD_ReadRectEx>
 8011494:	6825      	ldr	r5, [r4, #0]
 8011496:	2d00      	cmp	r5, #0
 8011498:	d0f6      	beq.n	8011488 <GUI_ReadRectEx+0x44>
 801149a:	462c      	mov	r4, r5
 801149c:	e7ef      	b.n	801147e <GUI_ReadRectEx+0x3a>
 801149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a0:	20000084 	.word	0x20000084

080114a4 <LCD_GetBkColorIndex>:
 80114a4:	4b02      	ldr	r3, [pc, #8]	; (80114b0 <LCD_GetBkColorIndex+0xc>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114aa:	6818      	ldr	r0, [r3, #0]
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	20000084 	.word	0x20000084

080114b4 <LCD_GetColorIndex>:
 80114b4:	4b02      	ldr	r3, [pc, #8]	; (80114c0 <LCD_GetColorIndex+0xc>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ba:	6818      	ldr	r0, [r3, #0]
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	20000084 	.word	0x20000084

080114c4 <_OnExit>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	4c04      	ldr	r4, [pc, #16]	; (80114d8 <_OnExit+0x14>)
 80114c8:	6820      	ldr	r0, [r4, #0]
 80114ca:	f7fd fd73 	bl	800efb4 <GUI_ALLOC_FreeFixedBlock>
 80114ce:	4a03      	ldr	r2, [pc, #12]	; (80114dc <_OnExit+0x18>)
 80114d0:	2300      	movs	r3, #0
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	6013      	str	r3, [r2, #0]
 80114d6:	bd10      	pop	{r4, pc}
 80114d8:	200057d4 	.word	0x200057d4
 80114dc:	200055f8 	.word	0x200055f8

080114e0 <LCD_InitColors>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4d09      	ldr	r5, [pc, #36]	; (8011508 <LCD_InitColors+0x28>)
 80114e4:	682c      	ldr	r4, [r5, #0]
 80114e6:	b95c      	cbnz	r4, 8011500 <LCD_InitColors+0x20>
 80114e8:	4b08      	ldr	r3, [pc, #32]	; (801150c <LCD_InitColors+0x2c>)
 80114ea:	6818      	ldr	r0, [r3, #0]
 80114ec:	0080      	lsls	r0, r0, #2
 80114ee:	f7fd fe45 	bl	800f17c <GUI_ALLOC_GetFixedBlock>
 80114f2:	6028      	str	r0, [r5, #0]
 80114f4:	b130      	cbz	r0, 8011504 <LCD_InitColors+0x24>
 80114f6:	4806      	ldr	r0, [pc, #24]	; (8011510 <LCD_InitColors+0x30>)
 80114f8:	4b06      	ldr	r3, [pc, #24]	; (8011514 <LCD_InitColors+0x34>)
 80114fa:	6003      	str	r3, [r0, #0]
 80114fc:	f7fc f98e 	bl	800d81c <GUI__RegisterExit>
 8011500:	2000      	movs	r0, #0
 8011502:	bd38      	pop	{r3, r4, r5, pc}
 8011504:	2001      	movs	r0, #1
 8011506:	bd38      	pop	{r3, r4, r5, pc}
 8011508:	200057d4 	.word	0x200057d4
 801150c:	20000118 	.word	0x20000118
 8011510:	200055fc 	.word	0x200055fc
 8011514:	080114c5 	.word	0x080114c5

08011518 <LCD_InitLUT>:
 8011518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801151c:	f000 febe 	bl	801229c <LCD_GetNumLayers>
 8011520:	2400      	movs	r4, #0
 8011522:	4680      	mov	r8, r0
 8011524:	4544      	cmp	r4, r8
 8011526:	da2c      	bge.n	8011582 <LCD_InitLUT+0x6a>
 8011528:	4620      	mov	r0, r4
 801152a:	f7fc f81d 	bl	800d568 <GUI_DEVICE__GetpDriver>
 801152e:	b330      	cbz	r0, 801157e <LCD_InitLUT+0x66>
 8011530:	4e15      	ldr	r6, [pc, #84]	; (8011588 <LCD_InitLUT+0x70>)
 8011532:	6833      	ldr	r3, [r6, #0]
 8011534:	4620      	mov	r0, r4
 8011536:	f893 9011 	ldrb.w	r9, [r3, #17]
 801153a:	745c      	strb	r4, [r3, #17]
 801153c:	f7fa fdd8 	bl	800c0f0 <LCD_GetBitsPerPixelEx>
 8011540:	2808      	cmp	r0, #8
 8011542:	dd03      	ble.n	801154c <LCD_InitLUT+0x34>
 8011544:	6833      	ldr	r3, [r6, #0]
 8011546:	f883 9011 	strb.w	r9, [r3, #17]
 801154a:	e018      	b.n	801157e <LCD_InitLUT+0x66>
 801154c:	4b0f      	ldr	r3, [pc, #60]	; (801158c <LCD_InitLUT+0x74>)
 801154e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011552:	691a      	ldr	r2, [r3, #16]
 8011554:	4b0e      	ldr	r3, [pc, #56]	; (8011590 <LCD_InitLUT+0x78>)
 8011556:	429a      	cmp	r2, r3
 8011558:	d0f4      	beq.n	8011544 <LCD_InitLUT+0x2c>
 801155a:	4620      	mov	r0, r4
 801155c:	f7fa fdcb 	bl	800c0f6 <LCD_GetNumColorsEx>
 8011560:	2500      	movs	r5, #0
 8011562:	4682      	mov	sl, r0
 8011564:	4555      	cmp	r5, sl
 8011566:	daed      	bge.n	8011544 <LCD_InitLUT+0x2c>
 8011568:	b2ef      	uxtb	r7, r5
 801156a:	4638      	mov	r0, r7
 801156c:	f7fb f9a8 	bl	800c8c0 <LCD_Index2Color>
 8011570:	4639      	mov	r1, r7
 8011572:	4602      	mov	r2, r0
 8011574:	4620      	mov	r0, r4
 8011576:	f7fa fd77 	bl	800c068 <LCD_SetLUTEntryEx>
 801157a:	3501      	adds	r5, #1
 801157c:	e7f2      	b.n	8011564 <LCD_InitLUT+0x4c>
 801157e:	3401      	adds	r4, #1
 8011580:	e7d0      	b.n	8011524 <LCD_InitLUT+0xc>
 8011582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011586:	bf00      	nop
 8011588:	20000084 	.word	0x20000084
 801158c:	200056d4 	.word	0x200056d4
 8011590:	08015b4c 	.word	0x08015b4c

08011594 <LCD_AA_SetAndMask>:
 8011594:	4b02      	ldr	r3, [pc, #8]	; (80115a0 <LCD_AA_SetAndMask+0xc>)
 8011596:	681a      	ldr	r2, [r3, #0]
 8011598:	6018      	str	r0, [r3, #0]
 801159a:	4610      	mov	r0, r2
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	2000011c 	.word	0x2000011c

080115a4 <_GetWordWrap>:
 80115a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80115a8:	2500      	movs	r5, #0
 80115aa:	9001      	str	r0, [sp, #4]
 80115ac:	4689      	mov	r9, r1
 80115ae:	4690      	mov	r8, r2
 80115b0:	46aa      	mov	sl, r5
 80115b2:	462e      	mov	r6, r5
 80115b4:	462c      	mov	r4, r5
 80115b6:	462f      	mov	r7, r5
 80115b8:	a801      	add	r0, sp, #4
 80115ba:	f7fb fd43 	bl	800d044 <GUI_UC__GetCharCodeInc>
 80115be:	2d00      	cmp	r5, #0
 80115c0:	bf08      	it	eq
 80115c2:	4605      	moveq	r5, r0
 80115c4:	b108      	cbz	r0, 80115ca <_GetWordWrap+0x26>
 80115c6:	280a      	cmp	r0, #10
 80115c8:	d10b      	bne.n	80115e2 <_GetWordWrap+0x3e>
 80115ca:	4626      	mov	r6, r4
 80115cc:	2e00      	cmp	r6, #0
 80115ce:	bf18      	it	ne
 80115d0:	4634      	movne	r4, r6
 80115d2:	f1b8 0f00 	cmp.w	r8, #0
 80115d6:	d025      	beq.n	8011624 <_GetWordWrap+0x80>
 80115d8:	ebca 0707 	rsb	r7, sl, r7
 80115dc:	f8c8 7000 	str.w	r7, [r8]
 80115e0:	e020      	b.n	8011624 <_GetWordWrap+0x80>
 80115e2:	2820      	cmp	r0, #32
 80115e4:	d01c      	beq.n	8011620 <_GetWordWrap+0x7c>
 80115e6:	2d20      	cmp	r5, #32
 80115e8:	d00e      	beq.n	8011608 <_GetWordWrap+0x64>
 80115ea:	4b10      	ldr	r3, [pc, #64]	; (801162c <_GetWordWrap+0x88>)
 80115ec:	6819      	ldr	r1, [r3, #0]
 80115ee:	4b10      	ldr	r3, [pc, #64]	; (8011630 <_GetWordWrap+0x8c>)
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	2300      	movs	r3, #0
 80115f4:	4293      	cmp	r3, r2
 80115f6:	da09      	bge.n	801160c <_GetWordWrap+0x68>
 80115f8:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
 80115fc:	4586      	cmp	lr, r0
 80115fe:	d101      	bne.n	8011604 <_GetWordWrap+0x60>
 8011600:	1c66      	adds	r6, r4, #1
 8011602:	e003      	b.n	801160c <_GetWordWrap+0x68>
 8011604:	3301      	adds	r3, #1
 8011606:	e7f5      	b.n	80115f4 <_GetWordWrap+0x50>
 8011608:	4626      	mov	r6, r4
 801160a:	2500      	movs	r5, #0
 801160c:	f7fc fd80 	bl	800e110 <GUI_GetCharDistX>
 8011610:	4407      	add	r7, r0
 8011612:	454f      	cmp	r7, r9
 8011614:	4682      	mov	sl, r0
 8011616:	dd01      	ble.n	801161c <_GetWordWrap+0x78>
 8011618:	2c00      	cmp	r4, #0
 801161a:	d1d7      	bne.n	80115cc <_GetWordWrap+0x28>
 801161c:	3401      	adds	r4, #1
 801161e:	e7cb      	b.n	80115b8 <_GetWordWrap+0x14>
 8011620:	4626      	mov	r6, r4
 8011622:	e7f3      	b.n	801160c <_GetWordWrap+0x68>
 8011624:	4620      	mov	r0, r4
 8011626:	b002      	add	sp, #8
 8011628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801162c:	20005604 	.word	0x20005604
 8011630:	20005608 	.word	0x20005608

08011634 <_GetCharWrap>:
 8011634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011636:	2400      	movs	r4, #0
 8011638:	9001      	str	r0, [sp, #4]
 801163a:	460e      	mov	r6, r1
 801163c:	4625      	mov	r5, r4
 801163e:	a801      	add	r0, sp, #4
 8011640:	f7fb fd00 	bl	800d044 <GUI_UC__GetCharCodeInc>
 8011644:	4607      	mov	r7, r0
 8011646:	b148      	cbz	r0, 801165c <_GetCharWrap+0x28>
 8011648:	f7fc fd62 	bl	800e110 <GUI_GetCharDistX>
 801164c:	4405      	add	r5, r0
 801164e:	b10c      	cbz	r4, 8011654 <_GetCharWrap+0x20>
 8011650:	42b5      	cmp	r5, r6
 8011652:	dc03      	bgt.n	801165c <_GetCharWrap+0x28>
 8011654:	2f0a      	cmp	r7, #10
 8011656:	d001      	beq.n	801165c <_GetCharWrap+0x28>
 8011658:	3401      	adds	r4, #1
 801165a:	e7f0      	b.n	801163e <_GetCharWrap+0xa>
 801165c:	4620      	mov	r0, r4
 801165e:	b003      	add	sp, #12
 8011660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011664 <_WrapGetNumCharsDisp>:
 8011664:	2a01      	cmp	r2, #1
 8011666:	b510      	push	{r4, lr}
 8011668:	d005      	beq.n	8011676 <_WrapGetNumCharsDisp+0x12>
 801166a:	2a02      	cmp	r2, #2
 801166c:	d108      	bne.n	8011680 <_WrapGetNumCharsDisp+0x1c>
 801166e:	4b07      	ldr	r3, [pc, #28]	; (801168c <_WrapGetNumCharsDisp+0x28>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4798      	blx	r3
 8011674:	bd10      	pop	{r4, pc}
 8011676:	4a06      	ldr	r2, [pc, #24]	; (8011690 <_WrapGetNumCharsDisp+0x2c>)
 8011678:	6814      	ldr	r4, [r2, #0]
 801167a:	461a      	mov	r2, r3
 801167c:	47a0      	blx	r4
 801167e:	bd10      	pop	{r4, pc}
 8011680:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011688:	f7fc bc88 	b.w	800df9c <GUI__GetLineNumChars>
 801168c:	20000120 	.word	0x20000120
 8011690:	20000124 	.word	0x20000124

08011694 <GUI__WrapGetNumCharsDisp>:
 8011694:	2300      	movs	r3, #0
 8011696:	f7ff bfe5 	b.w	8011664 <_WrapGetNumCharsDisp>

0801169a <GUI__WrapGetNumCharsToNextLine>:
 801169a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169c:	b085      	sub	sp, #20
 801169e:	ab03      	add	r3, sp, #12
 80116a0:	4617      	mov	r7, r2
 80116a2:	460e      	mov	r6, r1
 80116a4:	9001      	str	r0, [sp, #4]
 80116a6:	f7ff ffdd 	bl	8011664 <_WrapGetNumCharsDisp>
 80116aa:	9d01      	ldr	r5, [sp, #4]
 80116ac:	4604      	mov	r4, r0
 80116ae:	4621      	mov	r1, r4
 80116b0:	4628      	mov	r0, r5
 80116b2:	f7fb fcdb 	bl	800d06c <GUI_UC__NumChars2NumBytes>
 80116b6:	4428      	add	r0, r5
 80116b8:	ad04      	add	r5, sp, #16
 80116ba:	f845 0d0c 	str.w	r0, [r5, #-12]!
 80116be:	4628      	mov	r0, r5
 80116c0:	f7fb fcc0 	bl	800d044 <GUI_UC__GetCharCodeInc>
 80116c4:	280a      	cmp	r0, #10
 80116c6:	d101      	bne.n	80116cc <GUI__WrapGetNumCharsToNextLine+0x32>
 80116c8:	3401      	adds	r4, #1
 80116ca:	e012      	b.n	80116f2 <GUI__WrapGetNumCharsToNextLine+0x58>
 80116cc:	2f01      	cmp	r7, #1
 80116ce:	d110      	bne.n	80116f2 <GUI__WrapGetNumCharsToNextLine+0x58>
 80116d0:	2820      	cmp	r0, #32
 80116d2:	d10e      	bne.n	80116f2 <GUI__WrapGetNumCharsToNextLine+0x58>
 80116d4:	f7fc fd1c 	bl	800e110 <GUI_GetCharDistX>
 80116d8:	4607      	mov	r7, r0
 80116da:	9b03      	ldr	r3, [sp, #12]
 80116dc:	429e      	cmp	r6, r3
 80116de:	db08      	blt.n	80116f2 <GUI__WrapGetNumCharsToNextLine+0x58>
 80116e0:	443b      	add	r3, r7
 80116e2:	4628      	mov	r0, r5
 80116e4:	9303      	str	r3, [sp, #12]
 80116e6:	f7fb fcad 	bl	800d044 <GUI_UC__GetCharCodeInc>
 80116ea:	2820      	cmp	r0, #32
 80116ec:	f104 0401 	add.w	r4, r4, #1
 80116f0:	d0f3      	beq.n	80116da <GUI__WrapGetNumCharsToNextLine+0x40>
 80116f2:	4620      	mov	r0, r4
 80116f4:	b005      	add	sp, #20
 80116f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116f8 <GUI__WrapGetNumBytesToNextLine>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	4604      	mov	r4, r0
 80116fc:	f7ff ffcd 	bl	801169a <GUI__WrapGetNumCharsToNextLine>
 8011700:	4601      	mov	r1, r0
 8011702:	4620      	mov	r0, r4
 8011704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011708:	f7fb bcb0 	b.w	800d06c <GUI_UC__NumChars2NumBytes>

0801170c <GUI__ExpandPixelIndicesEx>:
 801170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011710:	1e0c      	subs	r4, r1, #0
 8011712:	4605      	mov	r5, r0
 8011714:	f340 80b3 	ble.w	801187e <GUI__ExpandPixelIndicesEx+0x172>
 8011718:	2a08      	cmp	r2, #8
 801171a:	685f      	ldr	r7, [r3, #4]
 801171c:	dd04      	ble.n	8011728 <GUI__ExpandPixelIndicesEx+0x1c>
 801171e:	2a10      	cmp	r2, #16
 8011720:	f340 8098 	ble.w	8011854 <GUI__ExpandPixelIndicesEx+0x148>
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	3a01      	subs	r2, #1
 801172a:	2a07      	cmp	r2, #7
 801172c:	f200 80a7 	bhi.w	801187e <GUI__ExpandPixelIndicesEx+0x172>
 8011730:	e8df f002 	tbb	[pc, r2]
 8011734:	58a52d04 	.word	0x58a52d04
 8011738:	83a5a5a5 	.word	0x83a5a5a5
 801173c:	1e66      	subs	r6, r4, #1
 801173e:	10f2      	asrs	r2, r6, #3
 8011740:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011744:	3b01      	subs	r3, #1
 8011746:	eb05 0802 	add.w	r8, r5, r2
 801174a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801174e:	f006 0607 	and.w	r6, r6, #7
 8011752:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011756:	2580      	movs	r5, #128	; 0x80
 8011758:	4135      	asrs	r5, r6
 801175a:	f108 38ff 	add.w	r8, r8, #4294967295
 801175e:	b2ed      	uxtb	r5, r5
 8011760:	f1c6 0307 	rsb	r3, r6, #7
 8011764:	ea0a 0005 	and.w	r0, sl, r5
 8011768:	4118      	asrs	r0, r3
 801176a:	47b8      	blx	r7
 801176c:	f849 0904 	str.w	r0, [r9], #-4
 8011770:	b936      	cbnz	r6, 8011780 <GUI__ExpandPixelIndicesEx+0x74>
 8011772:	f898 a000 	ldrb.w	sl, [r8]
 8011776:	2501      	movs	r5, #1
 8011778:	f108 38ff 	add.w	r8, r8, #4294967295
 801177c:	2607      	movs	r6, #7
 801177e:	e002      	b.n	8011786 <GUI__ExpandPixelIndicesEx+0x7a>
 8011780:	006d      	lsls	r5, r5, #1
 8011782:	3e01      	subs	r6, #1
 8011784:	b2ed      	uxtb	r5, r5
 8011786:	3c01      	subs	r4, #1
 8011788:	d1ea      	bne.n	8011760 <GUI__ExpandPixelIndicesEx+0x54>
 801178a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178e:	1e66      	subs	r6, r4, #1
 8011790:	10b2      	asrs	r2, r6, #2
 8011792:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011796:	3b01      	subs	r3, #1
 8011798:	f006 0603 	and.w	r6, r6, #3
 801179c:	eb05 0802 	add.w	r8, r5, r2
 80117a0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80117a4:	f815 a002 	ldrb.w	sl, [r5, r2]
 80117a8:	0073      	lsls	r3, r6, #1
 80117aa:	25c0      	movs	r5, #192	; 0xc0
 80117ac:	411d      	asrs	r5, r3
 80117ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80117b2:	b2ed      	uxtb	r5, r5
 80117b4:	0073      	lsls	r3, r6, #1
 80117b6:	f1c3 0306 	rsb	r3, r3, #6
 80117ba:	ea0a 0005 	and.w	r0, sl, r5
 80117be:	4118      	asrs	r0, r3
 80117c0:	47b8      	blx	r7
 80117c2:	f849 0904 	str.w	r0, [r9], #-4
 80117c6:	b936      	cbnz	r6, 80117d6 <GUI__ExpandPixelIndicesEx+0xca>
 80117c8:	2503      	movs	r5, #3
 80117ca:	f898 a000 	ldrb.w	sl, [r8]
 80117ce:	462e      	mov	r6, r5
 80117d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80117d4:	e002      	b.n	80117dc <GUI__ExpandPixelIndicesEx+0xd0>
 80117d6:	00ad      	lsls	r5, r5, #2
 80117d8:	3e01      	subs	r6, #1
 80117da:	b2ed      	uxtb	r5, r5
 80117dc:	3c01      	subs	r4, #1
 80117de:	d1e9      	bne.n	80117b4 <GUI__ExpandPixelIndicesEx+0xa8>
 80117e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e4:	1e66      	subs	r6, r4, #1
 80117e6:	1072      	asrs	r2, r6, #1
 80117e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80117ec:	3b01      	subs	r3, #1
 80117ee:	f006 0601 	and.w	r6, r6, #1
 80117f2:	eb05 0802 	add.w	r8, r5, r2
 80117f6:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80117fa:	f815 a002 	ldrb.w	sl, [r5, r2]
 80117fe:	00b3      	lsls	r3, r6, #2
 8011800:	25f0      	movs	r5, #240	; 0xf0
 8011802:	411d      	asrs	r5, r3
 8011804:	f108 38ff 	add.w	r8, r8, #4294967295
 8011808:	b2ed      	uxtb	r5, r5
 801180a:	00b3      	lsls	r3, r6, #2
 801180c:	f1c3 0304 	rsb	r3, r3, #4
 8011810:	ea0a 0005 	and.w	r0, sl, r5
 8011814:	4118      	asrs	r0, r3
 8011816:	47b8      	blx	r7
 8011818:	f849 0904 	str.w	r0, [r9], #-4
 801181c:	b936      	cbnz	r6, 801182c <GUI__ExpandPixelIndicesEx+0x120>
 801181e:	f898 a000 	ldrb.w	sl, [r8]
 8011822:	250f      	movs	r5, #15
 8011824:	f108 38ff 	add.w	r8, r8, #4294967295
 8011828:	2601      	movs	r6, #1
 801182a:	e002      	b.n	8011832 <GUI__ExpandPixelIndicesEx+0x126>
 801182c:	012d      	lsls	r5, r5, #4
 801182e:	b2ed      	uxtb	r5, r5
 8011830:	2600      	movs	r6, #0
 8011832:	3c01      	subs	r4, #1
 8011834:	d1e9      	bne.n	801180a <GUI__ExpandPixelIndicesEx+0xfe>
 8011836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183a:	192e      	adds	r6, r5, r4
 801183c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8011840:	1b34      	subs	r4, r6, r4
 8011842:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8011846:	47b8      	blx	r7
 8011848:	42a6      	cmp	r6, r4
 801184a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801184e:	d1f8      	bne.n	8011842 <GUI__ExpandPixelIndicesEx+0x136>
 8011850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011854:	695e      	ldr	r6, [r3, #20]
 8011856:	b12e      	cbz	r6, 8011864 <GUI__ExpandPixelIndicesEx+0x158>
 8011858:	4629      	mov	r1, r5
 801185a:	4622      	mov	r2, r4
 801185c:	2302      	movs	r3, #2
 801185e:	47b0      	blx	r6
 8011860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011864:	0064      	lsls	r4, r4, #1
 8011866:	4425      	add	r5, r4
 8011868:	192e      	adds	r6, r5, r4
 801186a:	1b2c      	subs	r4, r5, r4
 801186c:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8011870:	47b8      	blx	r7
 8011872:	42a5      	cmp	r5, r4
 8011874:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011878:	d1f8      	bne.n	801186c <GUI__ExpandPixelIndicesEx+0x160>
 801187a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011882 <_GetTwinArcPara>:
 8011882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011886:	fb01 f901 	mul.w	r9, r1, r1
 801188a:	1e47      	subs	r7, r0, #1
 801188c:	4604      	mov	r4, r0
 801188e:	4340      	muls	r0, r0
 8011890:	ebc9 0000 	rsb	r0, r9, r0
 8011894:	460d      	mov	r5, r1
 8011896:	4692      	mov	sl, r2
 8011898:	4698      	mov	r8, r3
 801189a:	9e08      	ldr	r6, [sp, #32]
 801189c:	f7fb f91f 	bl	800cade <GUI__sqrt32>
 80118a0:	42bd      	cmp	r5, r7
 80118a2:	f8ca 0000 	str.w	r0, [sl]
 80118a6:	da10      	bge.n	80118ca <_GetTwinArcPara+0x48>
 80118a8:	fb07 f007 	mul.w	r0, r7, r7
 80118ac:	ebc9 0000 	rsb	r0, r9, r0
 80118b0:	f7fb f915 	bl	800cade <GUI__sqrt32>
 80118b4:	3c02      	subs	r4, #2
 80118b6:	42a5      	cmp	r5, r4
 80118b8:	f8c8 0000 	str.w	r0, [r8]
 80118bc:	da03      	bge.n	80118c6 <_GetTwinArcPara+0x44>
 80118be:	3801      	subs	r0, #1
 80118c0:	6030      	str	r0, [r6, #0]
 80118c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c6:	2300      	movs	r3, #0
 80118c8:	e002      	b.n	80118d0 <_GetTwinArcPara+0x4e>
 80118ca:	2300      	movs	r3, #0
 80118cc:	f8c8 3000 	str.w	r3, [r8]
 80118d0:	6033      	str	r3, [r6, #0]
 80118d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080118d8 <GUI__DrawTwinArc2>:
 80118d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118dc:	461c      	mov	r4, r3
 80118de:	4b57      	ldr	r3, [pc, #348]	; (8011a3c <GUI__DrawTwinArc2+0x164>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80118e4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80118e6:	b08b      	sub	sp, #44	; 0x2c
 80118e8:	4415      	add	r5, r2
 80118ea:	1e63      	subs	r3, r4, #1
 80118ec:	19c6      	adds	r6, r0, r7
 80118ee:	442b      	add	r3, r5
 80118f0:	440f      	add	r7, r1
 80118f2:	a808      	add	r0, sp, #32
 80118f4:	f8ad 6020 	strh.w	r6, [sp, #32]
 80118f8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80118fc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8011900:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011904:	f7f7 fffe 	bl	8009904 <WM__InitIVRSearch>
 8011908:	2800      	cmp	r0, #0
 801190a:	f000 8094 	beq.w	8011a36 <GUI__DrawTwinArc2+0x15e>
 801190e:	2c00      	cmp	r4, #0
 8011910:	dc02      	bgt.n	8011918 <GUI__DrawTwinArc2+0x40>
 8011912:	f7f7 ff35 	bl	8009780 <WM__GetNextIVR>
 8011916:	e7f7      	b.n	8011908 <GUI__DrawTwinArc2+0x30>
 8011918:	9814      	ldr	r0, [sp, #80]	; 0x50
 801191a:	f7fc f90a 	bl	800db32 <GUI_SetColor>
 801191e:	f104 38ff 	add.w	r8, r4, #4294967295
 8011922:	4641      	mov	r1, r8
 8011924:	f118 38ff 	adds.w	r8, r8, #4294967295
 8011928:	d324      	bcc.n	8011974 <GUI__DrawTwinArc2+0x9c>
 801192a:	ab07      	add	r3, sp, #28
 801192c:	9300      	str	r3, [sp, #0]
 801192e:	4620      	mov	r0, r4
 8011930:	aa05      	add	r2, sp, #20
 8011932:	ab06      	add	r3, sp, #24
 8011934:	f7ff ffa5 	bl	8011882 <_GetTwinArcPara>
 8011938:	f104 39ff 	add.w	r9, r4, #4294967295
 801193c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011940:	9905      	ldr	r1, [sp, #20]
 8011942:	1930      	adds	r0, r6, r4
 8011944:	44a9      	add	r9, r5
 8011946:	ebc8 0909 	rsb	r9, r8, r9
 801194a:	ebc4 0b07 	rsb	fp, r4, r7
 801194e:	ebca 0200 	rsb	r2, sl, r0
 8011952:	eb0b 0301 	add.w	r3, fp, r1
 8011956:	1a40      	subs	r0, r0, r1
 8011958:	3a01      	subs	r2, #1
 801195a:	4649      	mov	r1, r9
 801195c:	9302      	str	r3, [sp, #8]
 801195e:	f7fa fcdb 	bl	800c318 <LCD_DrawHLine>
 8011962:	9b02      	ldr	r3, [sp, #8]
 8011964:	eb0b 000a 	add.w	r0, fp, sl
 8011968:	3001      	adds	r0, #1
 801196a:	4649      	mov	r1, r9
 801196c:	461a      	mov	r2, r3
 801196e:	f7fa fcd3 	bl	800c318 <LCD_DrawHLine>
 8011972:	e7d6      	b.n	8011922 <GUI__DrawTwinArc2+0x4a>
 8011974:	2c01      	cmp	r4, #1
 8011976:	d0cc      	beq.n	8011912 <GUI__DrawTwinArc2+0x3a>
 8011978:	9815      	ldr	r0, [sp, #84]	; 0x54
 801197a:	f7fc f8da 	bl	800db32 <GUI_SetColor>
 801197e:	f1a4 0902 	sub.w	r9, r4, #2
 8011982:	eb05 0b04 	add.w	fp, r5, r4
 8011986:	f105 0802 	add.w	r8, r5, #2
 801198a:	f1b9 0f00 	cmp.w	r9, #0
 801198e:	d027      	beq.n	80119e0 <GUI__DrawTwinArc2+0x108>
 8011990:	ab07      	add	r3, sp, #28
 8011992:	4649      	mov	r1, r9
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	4620      	mov	r0, r4
 8011998:	aa05      	add	r2, sp, #20
 801199a:	ab06      	add	r3, sp, #24
 801199c:	f7ff ff71 	bl	8011882 <_GetTwinArcPara>
 80119a0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80119a4:	9906      	ldr	r1, [sp, #24]
 80119a6:	1930      	adds	r0, r6, r4
 80119a8:	1b3b      	subs	r3, r7, r4
 80119aa:	ebca 0200 	rsb	r2, sl, r0
 80119ae:	eb03 0c01 	add.w	ip, r3, r1
 80119b2:	1a40      	subs	r0, r0, r1
 80119b4:	3a01      	subs	r2, #1
 80119b6:	4641      	mov	r1, r8
 80119b8:	9302      	str	r3, [sp, #8]
 80119ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80119be:	f7fa fcab 	bl	800c318 <LCD_DrawHLine>
 80119c2:	9b02      	ldr	r3, [sp, #8]
 80119c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80119c8:	eb03 000a 	add.w	r0, r3, sl
 80119cc:	4641      	mov	r1, r8
 80119ce:	3001      	adds	r0, #1
 80119d0:	4662      	mov	r2, ip
 80119d2:	f7fa fca1 	bl	800c318 <LCD_DrawHLine>
 80119d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80119da:	f108 0801 	add.w	r8, r8, #1
 80119de:	e7d4      	b.n	801198a <GUI__DrawTwinArc2+0xb2>
 80119e0:	2c02      	cmp	r4, #2
 80119e2:	d096      	beq.n	8011912 <GUI__DrawTwinArc2+0x3a>
 80119e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80119e6:	f7fc f8a4 	bl	800db32 <GUI_SetColor>
 80119ea:	f1c4 0303 	rsb	r3, r4, #3
 80119ee:	f1a4 0803 	sub.w	r8, r4, #3
 80119f2:	449b      	add	fp, r3
 80119f4:	f1b8 0f00 	cmp.w	r8, #0
 80119f8:	d08b      	beq.n	8011912 <GUI__DrawTwinArc2+0x3a>
 80119fa:	ab07      	add	r3, sp, #28
 80119fc:	4641      	mov	r1, r8
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	4620      	mov	r0, r4
 8011a02:	ab06      	add	r3, sp, #24
 8011a04:	aa05      	add	r2, sp, #20
 8011a06:	f7ff ff3c 	bl	8011882 <_GetTwinArcPara>
 8011a0a:	9807      	ldr	r0, [sp, #28]
 8011a0c:	1932      	adds	r2, r6, r4
 8011a0e:	ebc4 0907 	rsb	r9, r4, r7
 8011a12:	4659      	mov	r1, fp
 8011a14:	eb09 0a00 	add.w	sl, r9, r0
 8011a18:	1a10      	subs	r0, r2, r0
 8011a1a:	3a01      	subs	r2, #1
 8011a1c:	f7fa fc7c 	bl	800c318 <LCD_DrawHLine>
 8011a20:	4659      	mov	r1, fp
 8011a22:	f109 0001 	add.w	r0, r9, #1
 8011a26:	4652      	mov	r2, sl
 8011a28:	f7fa fc76 	bl	800c318 <LCD_DrawHLine>
 8011a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a30:	f10b 0b01 	add.w	fp, fp, #1
 8011a34:	e7de      	b.n	80119f4 <GUI__DrawTwinArc2+0x11c>
 8011a36:	b00b      	add	sp, #44	; 0x2c
 8011a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3c:	20000084 	.word	0x20000084

08011a40 <GUI__CompactPixelIndices>:
 8011a40:	2a08      	cmp	r2, #8
 8011a42:	b510      	push	{r4, lr}
 8011a44:	dd0e      	ble.n	8011a64 <GUI__CompactPixelIndices+0x24>
 8011a46:	2a10      	cmp	r2, #16
 8011a48:	dc0a      	bgt.n	8011a60 <GUI__CompactPixelIndices+0x20>
 8011a4a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011a4e:	4603      	mov	r3, r0
 8011a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a54:	f823 2b02 	strh.w	r2, [r3], #2
 8011a58:	428b      	cmp	r3, r1
 8011a5a:	d1f9      	bne.n	8011a50 <GUI__CompactPixelIndices+0x10>
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	2000      	movs	r0, #0
 8011a62:	bd10      	pop	{r4, pc}
 8011a64:	2a02      	cmp	r2, #2
 8011a66:	d06d      	beq.n	8011b44 <GUI__CompactPixelIndices+0x104>
 8011a68:	2a04      	cmp	r2, #4
 8011a6a:	d054      	beq.n	8011b16 <GUI__CompactPixelIndices+0xd6>
 8011a6c:	2a01      	cmp	r2, #1
 8011a6e:	f040 8095 	bne.w	8011b9c <GUI__CompactPixelIndices+0x15c>
 8011a72:	4604      	mov	r4, r0
 8011a74:	6803      	ldr	r3, [r0, #0]
 8011a76:	2901      	cmp	r1, #1
 8011a78:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	d047      	beq.n	8011b10 <GUI__CompactPixelIndices+0xd0>
 8011a80:	6842      	ldr	r2, [r0, #4]
 8011a82:	2902      	cmp	r1, #2
 8011a84:	f002 0201 	and.w	r2, r2, #1
 8011a88:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011a8c:	d102      	bne.n	8011a94 <GUI__CompactPixelIndices+0x54>
 8011a8e:	f100 0208 	add.w	r2, r0, #8
 8011a92:	e03e      	b.n	8011b12 <GUI__CompactPixelIndices+0xd2>
 8011a94:	6882      	ldr	r2, [r0, #8]
 8011a96:	2903      	cmp	r1, #3
 8011a98:	f002 0201 	and.w	r2, r2, #1
 8011a9c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8011aa0:	d102      	bne.n	8011aa8 <GUI__CompactPixelIndices+0x68>
 8011aa2:	f100 020c 	add.w	r2, r0, #12
 8011aa6:	e034      	b.n	8011b12 <GUI__CompactPixelIndices+0xd2>
 8011aa8:	68c2      	ldr	r2, [r0, #12]
 8011aaa:	2904      	cmp	r1, #4
 8011aac:	f002 0201 	and.w	r2, r2, #1
 8011ab0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011ab4:	d102      	bne.n	8011abc <GUI__CompactPixelIndices+0x7c>
 8011ab6:	f100 0210 	add.w	r2, r0, #16
 8011aba:	e02a      	b.n	8011b12 <GUI__CompactPixelIndices+0xd2>
 8011abc:	6902      	ldr	r2, [r0, #16]
 8011abe:	2905      	cmp	r1, #5
 8011ac0:	f002 0201 	and.w	r2, r2, #1
 8011ac4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011ac8:	d102      	bne.n	8011ad0 <GUI__CompactPixelIndices+0x90>
 8011aca:	f100 0214 	add.w	r2, r0, #20
 8011ace:	e020      	b.n	8011b12 <GUI__CompactPixelIndices+0xd2>
 8011ad0:	6942      	ldr	r2, [r0, #20]
 8011ad2:	2906      	cmp	r1, #6
 8011ad4:	f002 0201 	and.w	r2, r2, #1
 8011ad8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011adc:	d102      	bne.n	8011ae4 <GUI__CompactPixelIndices+0xa4>
 8011ade:	f100 0218 	add.w	r2, r0, #24
 8011ae2:	e016      	b.n	8011b12 <GUI__CompactPixelIndices+0xd2>
 8011ae4:	6982      	ldr	r2, [r0, #24]
 8011ae6:	3907      	subs	r1, #7
 8011ae8:	f002 0201 	and.w	r2, r2, #1
 8011aec:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8011af0:	d102      	bne.n	8011af8 <GUI__CompactPixelIndices+0xb8>
 8011af2:	f100 021c 	add.w	r2, r0, #28
 8011af6:	e005      	b.n	8011b04 <GUI__CompactPixelIndices+0xc4>
 8011af8:	f100 0220 	add.w	r2, r0, #32
 8011afc:	69c0      	ldr	r0, [r0, #28]
 8011afe:	f000 0001 	and.w	r0, r0, #1
 8011b02:	4303      	orrs	r3, r0
 8011b04:	f804 3b01 	strb.w	r3, [r4], #1
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	d0a7      	beq.n	8011a5c <GUI__CompactPixelIndices+0x1c>
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	e7b1      	b.n	8011a74 <GUI__CompactPixelIndices+0x34>
 8011b10:	1d02      	adds	r2, r0, #4
 8011b12:	2100      	movs	r1, #0
 8011b14:	e7f6      	b.n	8011b04 <GUI__CompactPixelIndices+0xc4>
 8011b16:	4602      	mov	r2, r0
 8011b18:	6803      	ldr	r3, [r0, #0]
 8011b1a:	2901      	cmp	r1, #1
 8011b1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	d102      	bne.n	8011b2a <GUI__CompactPixelIndices+0xea>
 8011b24:	1d04      	adds	r4, r0, #4
 8011b26:	2100      	movs	r1, #0
 8011b28:	e006      	b.n	8011b38 <GUI__CompactPixelIndices+0xf8>
 8011b2a:	f100 0408 	add.w	r4, r0, #8
 8011b2e:	6840      	ldr	r0, [r0, #4]
 8011b30:	f000 000f 	and.w	r0, r0, #15
 8011b34:	4303      	orrs	r3, r0
 8011b36:	3902      	subs	r1, #2
 8011b38:	f802 3b01 	strb.w	r3, [r2], #1
 8011b3c:	2900      	cmp	r1, #0
 8011b3e:	d08d      	beq.n	8011a5c <GUI__CompactPixelIndices+0x1c>
 8011b40:	4620      	mov	r0, r4
 8011b42:	e7e9      	b.n	8011b18 <GUI__CompactPixelIndices+0xd8>
 8011b44:	4604      	mov	r4, r0
 8011b46:	6803      	ldr	r3, [r0, #0]
 8011b48:	2901      	cmp	r1, #1
 8011b4a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	d021      	beq.n	8011b96 <GUI__CompactPixelIndices+0x156>
 8011b52:	6842      	ldr	r2, [r0, #4]
 8011b54:	2902      	cmp	r1, #2
 8011b56:	f002 0203 	and.w	r2, r2, #3
 8011b5a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011b5e:	d102      	bne.n	8011b66 <GUI__CompactPixelIndices+0x126>
 8011b60:	f100 0208 	add.w	r2, r0, #8
 8011b64:	e018      	b.n	8011b98 <GUI__CompactPixelIndices+0x158>
 8011b66:	6882      	ldr	r2, [r0, #8]
 8011b68:	2903      	cmp	r1, #3
 8011b6a:	f002 0203 	and.w	r2, r2, #3
 8011b6e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011b72:	d102      	bne.n	8011b7a <GUI__CompactPixelIndices+0x13a>
 8011b74:	f100 020c 	add.w	r2, r0, #12
 8011b78:	e00e      	b.n	8011b98 <GUI__CompactPixelIndices+0x158>
 8011b7a:	f100 0210 	add.w	r2, r0, #16
 8011b7e:	68c0      	ldr	r0, [r0, #12]
 8011b80:	f000 0003 	and.w	r0, r0, #3
 8011b84:	4303      	orrs	r3, r0
 8011b86:	3904      	subs	r1, #4
 8011b88:	f804 3b01 	strb.w	r3, [r4], #1
 8011b8c:	2900      	cmp	r1, #0
 8011b8e:	f43f af65 	beq.w	8011a5c <GUI__CompactPixelIndices+0x1c>
 8011b92:	4610      	mov	r0, r2
 8011b94:	e7d7      	b.n	8011b46 <GUI__CompactPixelIndices+0x106>
 8011b96:	1d02      	adds	r2, r0, #4
 8011b98:	2100      	movs	r1, #0
 8011b9a:	e7f5      	b.n	8011b88 <GUI__CompactPixelIndices+0x148>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8011ba2:	54c2      	strb	r2, [r0, r3]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	428b      	cmp	r3, r1
 8011ba8:	d1f9      	bne.n	8011b9e <GUI__CompactPixelIndices+0x15e>
 8011baa:	e757      	b.n	8011a5c <GUI__CompactPixelIndices+0x1c>

08011bac <GUI__ConvertColor2Index>:
 8011bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011bb4:	681e      	ldr	r6, [r3, #0]
 8011bb6:	f1b8 0f00 	cmp.w	r8, #0
 8011bba:	bf08      	it	eq
 8011bbc:	4680      	moveq	r8, r0
 8011bbe:	2a08      	cmp	r2, #8
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	460d      	mov	r5, r1
 8011bc4:	dd05      	ble.n	8011bd2 <GUI__ConvertColor2Index+0x26>
 8011bc6:	2a10      	cmp	r2, #16
 8011bc8:	f340 80b6 	ble.w	8011d38 <GUI__ConvertColor2Index+0x18c>
 8011bcc:	2000      	movs	r0, #0
 8011bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd2:	3a01      	subs	r2, #1
 8011bd4:	2a07      	cmp	r2, #7
 8011bd6:	f200 80a4 	bhi.w	8011d22 <GUI__ConvertColor2Index+0x176>
 8011bda:	e8df f002 	tbb	[pc, r2]
 8011bde:	6111      	.short	0x6111
 8011be0:	a2a287a2 	.word	0xa2a287a2
 8011be4:	92a2      	.short	0x92a2
 8011be6:	69e0      	ldr	r0, [r4, #28]
 8011be8:	47b0      	blx	r6
 8011bea:	4338      	orrs	r0, r7
 8011bec:	f104 0920 	add.w	r9, r4, #32
 8011bf0:	b2c7      	uxtb	r7, r0
 8011bf2:	3d08      	subs	r5, #8
 8011bf4:	f808 7b01 	strb.w	r7, [r8], #1
 8011bf8:	2d00      	cmp	r5, #0
 8011bfa:	f000 8092 	beq.w	8011d22 <GUI__ConvertColor2Index+0x176>
 8011bfe:	464c      	mov	r4, r9
 8011c00:	6820      	ldr	r0, [r4, #0]
 8011c02:	47b0      	blx	r6
 8011c04:	2d01      	cmp	r5, #1
 8011c06:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011c0a:	b2c7      	uxtb	r7, r0
 8011c0c:	f000 808c 	beq.w	8011d28 <GUI__ConvertColor2Index+0x17c>
 8011c10:	6860      	ldr	r0, [r4, #4]
 8011c12:	47b0      	blx	r6
 8011c14:	2d02      	cmp	r5, #2
 8011c16:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8011c1a:	b2c7      	uxtb	r7, r0
 8011c1c:	d102      	bne.n	8011c24 <GUI__ConvertColor2Index+0x78>
 8011c1e:	f104 0908 	add.w	r9, r4, #8
 8011c22:	e083      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c24:	68a0      	ldr	r0, [r4, #8]
 8011c26:	47b0      	blx	r6
 8011c28:	2d03      	cmp	r5, #3
 8011c2a:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8011c2e:	b2c7      	uxtb	r7, r0
 8011c30:	d102      	bne.n	8011c38 <GUI__ConvertColor2Index+0x8c>
 8011c32:	f104 090c 	add.w	r9, r4, #12
 8011c36:	e079      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c38:	68e0      	ldr	r0, [r4, #12]
 8011c3a:	47b0      	blx	r6
 8011c3c:	2d04      	cmp	r5, #4
 8011c3e:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011c42:	b2c7      	uxtb	r7, r0
 8011c44:	d102      	bne.n	8011c4c <GUI__ConvertColor2Index+0xa0>
 8011c46:	f104 0910 	add.w	r9, r4, #16
 8011c4a:	e06f      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c4c:	6920      	ldr	r0, [r4, #16]
 8011c4e:	47b0      	blx	r6
 8011c50:	2d05      	cmp	r5, #5
 8011c52:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8011c56:	b2c7      	uxtb	r7, r0
 8011c58:	d102      	bne.n	8011c60 <GUI__ConvertColor2Index+0xb4>
 8011c5a:	f104 0914 	add.w	r9, r4, #20
 8011c5e:	e065      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c60:	6960      	ldr	r0, [r4, #20]
 8011c62:	47b0      	blx	r6
 8011c64:	2d06      	cmp	r5, #6
 8011c66:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011c6a:	b2c7      	uxtb	r7, r0
 8011c6c:	d102      	bne.n	8011c74 <GUI__ConvertColor2Index+0xc8>
 8011c6e:	f104 0918 	add.w	r9, r4, #24
 8011c72:	e05b      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c74:	69a0      	ldr	r0, [r4, #24]
 8011c76:	47b0      	blx	r6
 8011c78:	2d07      	cmp	r5, #7
 8011c7a:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8011c7e:	b2c7      	uxtb	r7, r0
 8011c80:	d1b1      	bne.n	8011be6 <GUI__ConvertColor2Index+0x3a>
 8011c82:	f104 091c 	add.w	r9, r4, #28
 8011c86:	e051      	b.n	8011d2c <GUI__ConvertColor2Index+0x180>
 8011c88:	68e0      	ldr	r0, [r4, #12]
 8011c8a:	47b0      	blx	r6
 8011c8c:	4338      	orrs	r0, r7
 8011c8e:	f104 0910 	add.w	r9, r4, #16
 8011c92:	b2c7      	uxtb	r7, r0
 8011c94:	3d04      	subs	r5, #4
 8011c96:	f808 7b01 	strb.w	r7, [r8], #1
 8011c9a:	2d00      	cmp	r5, #0
 8011c9c:	d041      	beq.n	8011d22 <GUI__ConvertColor2Index+0x176>
 8011c9e:	464c      	mov	r4, r9
 8011ca0:	6820      	ldr	r0, [r4, #0]
 8011ca2:	47b0      	blx	r6
 8011ca4:	2d01      	cmp	r5, #1
 8011ca6:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011caa:	b2c7      	uxtb	r7, r0
 8011cac:	d040      	beq.n	8011d30 <GUI__ConvertColor2Index+0x184>
 8011cae:	6860      	ldr	r0, [r4, #4]
 8011cb0:	47b0      	blx	r6
 8011cb2:	2d02      	cmp	r5, #2
 8011cb4:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011cb8:	b2c7      	uxtb	r7, r0
 8011cba:	d102      	bne.n	8011cc2 <GUI__ConvertColor2Index+0x116>
 8011cbc:	f104 0908 	add.w	r9, r4, #8
 8011cc0:	e038      	b.n	8011d34 <GUI__ConvertColor2Index+0x188>
 8011cc2:	68a0      	ldr	r0, [r4, #8]
 8011cc4:	47b0      	blx	r6
 8011cc6:	2d03      	cmp	r5, #3
 8011cc8:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011ccc:	b2c7      	uxtb	r7, r0
 8011cce:	d1db      	bne.n	8011c88 <GUI__ConvertColor2Index+0xdc>
 8011cd0:	f104 090c 	add.w	r9, r4, #12
 8011cd4:	e02e      	b.n	8011d34 <GUI__ConvertColor2Index+0x188>
 8011cd6:	6860      	ldr	r0, [r4, #4]
 8011cd8:	47b0      	blx	r6
 8011cda:	4338      	orrs	r0, r7
 8011cdc:	f104 0908 	add.w	r9, r4, #8
 8011ce0:	b2c7      	uxtb	r7, r0
 8011ce2:	3d02      	subs	r5, #2
 8011ce4:	f808 7b01 	strb.w	r7, [r8], #1
 8011ce8:	b1dd      	cbz	r5, 8011d22 <GUI__ConvertColor2Index+0x176>
 8011cea:	464c      	mov	r4, r9
 8011cec:	6820      	ldr	r0, [r4, #0]
 8011cee:	47b0      	blx	r6
 8011cf0:	2d01      	cmp	r5, #1
 8011cf2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011cf6:	b2c7      	uxtb	r7, r0
 8011cf8:	d1ed      	bne.n	8011cd6 <GUI__ConvertColor2Index+0x12a>
 8011cfa:	f104 0904 	add.w	r9, r4, #4
 8011cfe:	2500      	movs	r5, #0
 8011d00:	e7f0      	b.n	8011ce4 <GUI__ConvertColor2Index+0x138>
 8011d02:	691f      	ldr	r7, [r3, #16]
 8011d04:	b12f      	cbz	r7, 8011d12 <GUI__ConvertColor2Index+0x166>
 8011d06:	4620      	mov	r0, r4
 8011d08:	4641      	mov	r1, r8
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	47b8      	blx	r7
 8011d10:	e007      	b.n	8011d22 <GUI__ConvertColor2Index+0x176>
 8011d12:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8011d16:	47b0      	blx	r6
 8011d18:	f808 0007 	strb.w	r0, [r8, r7]
 8011d1c:	3701      	adds	r7, #1
 8011d1e:	42bd      	cmp	r5, r7
 8011d20:	d1f7      	bne.n	8011d12 <GUI__ConvertColor2Index+0x166>
 8011d22:	2001      	movs	r0, #1
 8011d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d28:	f104 0904 	add.w	r9, r4, #4
 8011d2c:	2500      	movs	r5, #0
 8011d2e:	e761      	b.n	8011bf4 <GUI__ConvertColor2Index+0x48>
 8011d30:	f104 0904 	add.w	r9, r4, #4
 8011d34:	2500      	movs	r5, #0
 8011d36:	e7ae      	b.n	8011c96 <GUI__ConvertColor2Index+0xea>
 8011d38:	691f      	ldr	r7, [r3, #16]
 8011d3a:	b11f      	cbz	r7, 8011d44 <GUI__ConvertColor2Index+0x198>
 8011d3c:	4641      	mov	r1, r8
 8011d3e:	462a      	mov	r2, r5
 8011d40:	2302      	movs	r3, #2
 8011d42:	e7e4      	b.n	8011d0e <GUI__ConvertColor2Index+0x162>
 8011d44:	f854 0b04 	ldr.w	r0, [r4], #4
 8011d48:	47b0      	blx	r6
 8011d4a:	3d01      	subs	r5, #1
 8011d4c:	f828 0b02 	strh.w	r0, [r8], #2
 8011d50:	d1f8      	bne.n	8011d44 <GUI__ConvertColor2Index+0x198>
 8011d52:	e7e6      	b.n	8011d22 <GUI__ConvertColor2Index+0x176>

08011d54 <GUI__CompactPixelIndicesEx>:
 8011d54:	b513      	push	{r0, r1, r4, lr}
 8011d56:	2400      	movs	r4, #0
 8011d58:	9400      	str	r4, [sp, #0]
 8011d5a:	f7ff ff27 	bl	8011bac <GUI__ConvertColor2Index>
 8011d5e:	b002      	add	sp, #8
 8011d60:	bd10      	pop	{r4, pc}

08011d62 <_GetCharCode>:
 8011d62:	7800      	ldrb	r0, [r0, #0]
 8011d64:	4770      	bx	lr

08011d66 <_GetCharSize>:
 8011d66:	2001      	movs	r0, #1
 8011d68:	4770      	bx	lr

08011d6a <_CalcSizeOfChar>:
 8011d6a:	2001      	movs	r0, #1
 8011d6c:	4770      	bx	lr

08011d6e <_Encode>:
 8011d6e:	7001      	strb	r1, [r0, #0]
 8011d70:	2001      	movs	r0, #1
 8011d72:	4770      	bx	lr

08011d74 <GUI_DrawHLine>:
 8011d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d76:	4f10      	ldr	r7, [pc, #64]	; (8011db8 <GUI_DrawHLine+0x44>)
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011d7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011d7e:	4405      	add	r5, r0
 8011d80:	190e      	adds	r6, r1, r4
 8011d82:	b2ab      	uxth	r3, r5
 8011d84:	4414      	add	r4, r2
 8011d86:	4668      	mov	r0, sp
 8011d88:	f8ad 6000 	strh.w	r6, [sp]
 8011d8c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8011d90:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011d94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011d98:	f7f7 fdb4 	bl	8009904 <WM__InitIVRSearch>
 8011d9c:	b148      	cbz	r0, 8011db2 <GUI_DrawHLine+0x3e>
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011da2:	4630      	mov	r0, r6
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4629      	mov	r1, r5
 8011da8:	4622      	mov	r2, r4
 8011daa:	4798      	blx	r3
 8011dac:	f7f7 fce8 	bl	8009780 <WM__GetNextIVR>
 8011db0:	e7f4      	b.n	8011d9c <GUI_DrawHLine+0x28>
 8011db2:	b003      	add	sp, #12
 8011db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011db6:	bf00      	nop
 8011db8:	20000084 	.word	0x20000084

08011dbc <GUI_DrawPixel>:
 8011dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dbe:	4e0f      	ldr	r6, [pc, #60]	; (8011dfc <GUI_DrawPixel+0x40>)
 8011dc0:	6833      	ldr	r3, [r6, #0]
 8011dc2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8011dc4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011dc6:	4405      	add	r5, r0
 8011dc8:	b2ab      	uxth	r3, r5
 8011dca:	440c      	add	r4, r1
 8011dcc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011dd0:	f8ad 3000 	strh.w	r3, [sp]
 8011dd4:	4668      	mov	r0, sp
 8011dd6:	b2a3      	uxth	r3, r4
 8011dd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ddc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011de0:	f7f7 fd90 	bl	8009904 <WM__InitIVRSearch>
 8011de4:	b140      	cbz	r0, 8011df8 <GUI_DrawPixel+0x3c>
 8011de6:	6833      	ldr	r3, [r6, #0]
 8011de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dea:	4628      	mov	r0, r5
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	4621      	mov	r1, r4
 8011df0:	4798      	blx	r3
 8011df2:	f7f7 fcc5 	bl	8009780 <WM__GetNextIVR>
 8011df6:	e7f5      	b.n	8011de4 <GUI_DrawPixel+0x28>
 8011df8:	b002      	add	sp, #8
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
 8011dfc:	20000084 	.word	0x20000084

08011e00 <GUI_DrawVLine>:
 8011e00:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <GUI_DrawVLine+0x40>)
 8011e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8011e08:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011e0a:	4406      	add	r6, r0
 8011e0c:	190d      	adds	r5, r1, r4
 8011e0e:	b2b3      	uxth	r3, r6
 8011e10:	4414      	add	r4, r2
 8011e12:	4668      	mov	r0, sp
 8011e14:	f8ad 3000 	strh.w	r3, [sp]
 8011e18:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011e1c:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011e20:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011e24:	f7f7 fd6e 	bl	8009904 <WM__InitIVRSearch>
 8011e28:	b138      	cbz	r0, 8011e3a <GUI_DrawVLine+0x3a>
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	4622      	mov	r2, r4
 8011e30:	f7fa fa98 	bl	800c364 <LCD_DrawVLine>
 8011e34:	f7f7 fca4 	bl	8009780 <WM__GetNextIVR>
 8011e38:	e7f6      	b.n	8011e28 <GUI_DrawVLine+0x28>
 8011e3a:	b002      	add	sp, #8
 8011e3c:	bd70      	pop	{r4, r5, r6, pc}
 8011e3e:	bf00      	nop
 8011e40:	20000084 	.word	0x20000084

08011e44 <GUI_FillRect>:
 8011e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e46:	4c0f      	ldr	r4, [pc, #60]	; (8011e84 <GUI_FillRect+0x40>)
 8011e48:	6824      	ldr	r4, [r4, #0]
 8011e4a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011e4c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8011e4e:	1947      	adds	r7, r0, r5
 8011e50:	190e      	adds	r6, r1, r4
 8011e52:	4415      	add	r5, r2
 8011e54:	441c      	add	r4, r3
 8011e56:	4668      	mov	r0, sp
 8011e58:	f8ad 7000 	strh.w	r7, [sp]
 8011e5c:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011e60:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011e64:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011e68:	f7f7 fd4c 	bl	8009904 <WM__InitIVRSearch>
 8011e6c:	b140      	cbz	r0, 8011e80 <GUI_FillRect+0x3c>
 8011e6e:	4638      	mov	r0, r7
 8011e70:	4631      	mov	r1, r6
 8011e72:	462a      	mov	r2, r5
 8011e74:	4623      	mov	r3, r4
 8011e76:	f7fa fa9b 	bl	800c3b0 <LCD_FillRect>
 8011e7a:	f7f7 fc81 	bl	8009780 <WM__GetNextIVR>
 8011e7e:	e7f5      	b.n	8011e6c <GUI_FillRect+0x28>
 8011e80:	b003      	add	sp, #12
 8011e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e84:	20000084 	.word	0x20000084

08011e88 <GUI_FillRectEx>:
 8011e88:	4603      	mov	r3, r0
 8011e8a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011e8e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8011e92:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011e96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011e9a:	f7ff bfd3 	b.w	8011e44 <GUI_FillRect>

08011e9e <_DrawGradient>:
 8011e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea2:	b08f      	sub	sp, #60	; 0x3c
 8011ea4:	4688      	mov	r8, r1
 8011ea6:	4614      	mov	r4, r2
 8011ea8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011eaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011eac:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8011eb0:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8011eb4:	9104      	str	r1, [sp, #16]
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	461e      	mov	r6, r3
 8011eba:	9203      	str	r2, [sp, #12]
 8011ebc:	f7fb fd6d 	bl	800d99a <GUI_GetColor>
 8011ec0:	45da      	cmp	sl, fp
 8011ec2:	9009      	str	r0, [sp, #36]	; 0x24
 8011ec4:	d109      	bne.n	8011eda <_DrawGradient+0x3c>
 8011ec6:	4650      	mov	r0, sl
 8011ec8:	f7fa fd4a 	bl	800c960 <LCD_SetColor>
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	b113      	cbz	r3, 8011ed6 <_DrawGradient+0x38>
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	4641      	mov	r1, r8
 8011ed4:	e09d      	b.n	8012012 <_DrawGradient+0x174>
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	e0a1      	b.n	801201e <_DrawGradient+0x180>
 8011eda:	ebb6 0708 	subs.w	r7, r6, r8
 8011ede:	f000 80b2 	beq.w	8012046 <_DrawGradient+0x1a8>
 8011ee2:	fa5f f28a 	uxtb.w	r2, sl
 8011ee6:	fa5f f38b 	uxtb.w	r3, fp
 8011eea:	1a9b      	subs	r3, r3, r2
 8011eec:	930a      	str	r3, [sp, #40]	; 0x28
 8011eee:	2302      	movs	r3, #2
 8011ef0:	fb97 f3f3 	sdiv	r3, r7, r3
 8011ef4:	fb02 3207 	mla	r2, r2, r7, r3
 8011ef8:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8011efc:	9205      	str	r2, [sp, #20]
 8011efe:	f3ca 2207 	ubfx	r2, sl, #8, #8
 8011f02:	1a89      	subs	r1, r1, r2
 8011f04:	fb02 3207 	mla	r2, r2, r7, r3
 8011f08:	910b      	str	r1, [sp, #44]	; 0x2c
 8011f0a:	9206      	str	r2, [sp, #24]
 8011f0c:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8011f10:	f3ca 4207 	ubfx	r2, sl, #16, #8
 8011f14:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8011f18:	1a89      	subs	r1, r1, r2
 8011f1a:	ebca 6b1b 	rsb	fp, sl, fp, lsr #24
 8011f1e:	fb02 3207 	mla	r2, r2, r7, r3
 8011f22:	fb0a 3a07 	mla	sl, sl, r7, r3
 8011f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f28:	910c      	str	r1, [sp, #48]	; 0x30
 8011f2a:	9207      	str	r2, [sp, #28]
 8011f2c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8011f30:	f8cd a020 	str.w	sl, [sp, #32]
 8011f34:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f38:	f04f 0901 	mov.w	r9, #1
 8011f3c:	f103 0a01 	add.w	sl, r3, #1
 8011f40:	45b2      	cmp	sl, r6
 8011f42:	dc5b      	bgt.n	8011ffc <_DrawGradient+0x15e>
 8011f44:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011f48:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8011f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f4e:	fb9c fcf7 	sdiv	ip, ip, r7
 8011f52:	f8cd c004 	str.w	ip, [sp, #4]
 8011f56:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011f5a:	44f4      	add	ip, lr
 8011f5c:	f8cd c014 	str.w	ip, [sp, #20]
 8011f60:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8011f64:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011f68:	fb9c f1f7 	sdiv	r1, ip, r7
 8011f6c:	44f4      	add	ip, lr
 8011f6e:	f8cd c018 	str.w	ip, [sp, #24]
 8011f72:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8011f76:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011f7a:	fb9c fbf7 	sdiv	fp, ip, r7
 8011f7e:	44f4      	add	ip, lr
 8011f80:	f8cd c01c 	str.w	ip, [sp, #28]
 8011f84:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011f88:	fb9c fef7 	sdiv	lr, ip, r7
 8011f8c:	4494      	add	ip, r2
 8011f8e:	f8cd c020 	str.w	ip, [sp, #32]
 8011f92:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011f96:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8011f9a:	ea4b 6b0e 	orr.w	fp, fp, lr, lsl #24
 8011f9e:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8011fa2:	45c2      	cmp	sl, r8
 8011fa4:	ea4b 0b02 	orr.w	fp, fp, r2
 8011fa8:	dd25      	ble.n	8011ff6 <_DrawGradient+0x158>
 8011faa:	4583      	cmp	fp, r0
 8011fac:	d102      	bne.n	8011fb4 <_DrawGradient+0x116>
 8011fae:	f109 0901 	add.w	r9, r9, #1
 8011fb2:	e020      	b.n	8011ff6 <_DrawGradient+0x158>
 8011fb4:	9302      	str	r3, [sp, #8]
 8011fb6:	f7fa fcd3 	bl	800c960 <LCD_SetColor>
 8011fba:	f1b9 0f01 	cmp.w	r9, #1
 8011fbe:	9b02      	ldr	r3, [sp, #8]
 8011fc0:	d00f      	beq.n	8011fe2 <_DrawGradient+0x144>
 8011fc2:	9a03      	ldr	r2, [sp, #12]
 8011fc4:	ebc9 010a 	rsb	r1, r9, sl
 8011fc8:	b112      	cbz	r2, 8011fd0 <_DrawGradient+0x132>
 8011fca:	4628      	mov	r0, r5
 8011fcc:	4622      	mov	r2, r4
 8011fce:	e003      	b.n	8011fd8 <_DrawGradient+0x13a>
 8011fd0:	4608      	mov	r0, r1
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	4623      	mov	r3, r4
 8011fd8:	f7fa f9ea 	bl	800c3b0 <LCD_FillRect>
 8011fdc:	f04f 0901 	mov.w	r9, #1
 8011fe0:	e009      	b.n	8011ff6 <_DrawGradient+0x158>
 8011fe2:	9903      	ldr	r1, [sp, #12]
 8011fe4:	b111      	cbz	r1, 8011fec <_DrawGradient+0x14e>
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	4619      	mov	r1, r3
 8011fea:	e001      	b.n	8011ff0 <_DrawGradient+0x152>
 8011fec:	4618      	mov	r0, r3
 8011fee:	4629      	mov	r1, r5
 8011ff0:	4622      	mov	r2, r4
 8011ff2:	9b04      	ldr	r3, [sp, #16]
 8011ff4:	4798      	blx	r3
 8011ff6:	4653      	mov	r3, sl
 8011ff8:	4658      	mov	r0, fp
 8011ffa:	e79f      	b.n	8011f3c <_DrawGradient+0x9e>
 8011ffc:	f7fa fcb0 	bl	800c960 <LCD_SetColor>
 8012000:	f1b9 0f01 	cmp.w	r9, #1
 8012004:	d00f      	beq.n	8012026 <_DrawGradient+0x188>
 8012006:	9a03      	ldr	r2, [sp, #12]
 8012008:	ebc9 0106 	rsb	r1, r9, r6
 801200c:	b132      	cbz	r2, 801201c <_DrawGradient+0x17e>
 801200e:	4628      	mov	r0, r5
 8012010:	3101      	adds	r1, #1
 8012012:	4622      	mov	r2, r4
 8012014:	4633      	mov	r3, r6
 8012016:	f7fa f9cb 	bl	800c3b0 <LCD_FillRect>
 801201a:	e00e      	b.n	801203a <_DrawGradient+0x19c>
 801201c:	1c48      	adds	r0, r1, #1
 801201e:	4629      	mov	r1, r5
 8012020:	4632      	mov	r2, r6
 8012022:	4623      	mov	r3, r4
 8012024:	e7f7      	b.n	8012016 <_DrawGradient+0x178>
 8012026:	9b03      	ldr	r3, [sp, #12]
 8012028:	b113      	cbz	r3, 8012030 <_DrawGradient+0x192>
 801202a:	4628      	mov	r0, r5
 801202c:	4631      	mov	r1, r6
 801202e:	e001      	b.n	8012034 <_DrawGradient+0x196>
 8012030:	4630      	mov	r0, r6
 8012032:	4629      	mov	r1, r5
 8012034:	4622      	mov	r2, r4
 8012036:	9b04      	ldr	r3, [sp, #16]
 8012038:	4798      	blx	r3
 801203a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801203c:	b00f      	add	sp, #60	; 0x3c
 801203e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012042:	f7fa bc8d 	b.w	800c960 <LCD_SetColor>
 8012046:	b00f      	add	sp, #60	; 0x3c
 8012048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801204c <GUI_DrawGradientV>:
 801204c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012050:	4c15      	ldr	r4, [pc, #84]	; (80120a8 <GUI_DrawGradientV+0x5c>)
 8012052:	6824      	ldr	r4, [r4, #0]
 8012054:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012056:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8012058:	b087      	sub	sp, #28
 801205a:	eb00 0905 	add.w	r9, r0, r5
 801205e:	eb01 0804 	add.w	r8, r1, r4
 8012062:	4415      	add	r5, r2
 8012064:	441c      	add	r4, r3
 8012066:	a804      	add	r0, sp, #16
 8012068:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801206a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801206c:	f8ad 9010 	strh.w	r9, [sp, #16]
 8012070:	f8ad 5014 	strh.w	r5, [sp, #20]
 8012074:	f8ad 8012 	strh.w	r8, [sp, #18]
 8012078:	f8ad 4016 	strh.w	r4, [sp, #22]
 801207c:	f7f7 fc42 	bl	8009904 <WM__InitIVRSearch>
 8012080:	b170      	cbz	r0, 80120a0 <GUI_DrawGradientV+0x54>
 8012082:	4b0a      	ldr	r3, [pc, #40]	; (80120ac <GUI_DrawGradientV+0x60>)
 8012084:	9302      	str	r3, [sp, #8]
 8012086:	2301      	movs	r3, #1
 8012088:	9303      	str	r3, [sp, #12]
 801208a:	4648      	mov	r0, r9
 801208c:	4641      	mov	r1, r8
 801208e:	462a      	mov	r2, r5
 8012090:	4623      	mov	r3, r4
 8012092:	9700      	str	r7, [sp, #0]
 8012094:	9601      	str	r6, [sp, #4]
 8012096:	f7ff ff02 	bl	8011e9e <_DrawGradient>
 801209a:	f7f7 fb71 	bl	8009780 <WM__GetNextIVR>
 801209e:	e7ef      	b.n	8012080 <GUI_DrawGradientV+0x34>
 80120a0:	b007      	add	sp, #28
 80120a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a6:	bf00      	nop
 80120a8:	20000084 	.word	0x20000084
 80120ac:	0800c319 	.word	0x0800c319

080120b0 <GUI_DrawRect>:
 80120b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120b4:	4c1e      	ldr	r4, [pc, #120]	; (8012130 <GUI_DrawRect+0x80>)
 80120b6:	f8d4 e000 	ldr.w	lr, [r4]
 80120ba:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 80120be:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 80120c2:	1905      	adds	r5, r0, r4
 80120c4:	4414      	add	r4, r2
 80120c6:	f89e 2018 	ldrb.w	r2, [lr, #24]
 80120ca:	3a01      	subs	r2, #1
 80120cc:	b292      	uxth	r2, r2
 80120ce:	198f      	adds	r7, r1, r6
 80120d0:	441e      	add	r6, r3
 80120d2:	1aab      	subs	r3, r5, r2
 80120d4:	f8ad 3000 	strh.w	r3, [sp]
 80120d8:	1913      	adds	r3, r2, r4
 80120da:	f8ad 3004 	strh.w	r3, [sp, #4]
 80120de:	4668      	mov	r0, sp
 80120e0:	1abb      	subs	r3, r7, r2
 80120e2:	4432      	add	r2, r6
 80120e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80120e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80120ec:	f7f7 fc0a 	bl	8009904 <WM__InitIVRSearch>
 80120f0:	b1d0      	cbz	r0, 8012128 <GUI_DrawRect+0x78>
 80120f2:	4628      	mov	r0, r5
 80120f4:	4639      	mov	r1, r7
 80120f6:	4622      	mov	r2, r4
 80120f8:	f7fa f90e 	bl	800c318 <LCD_DrawHLine>
 80120fc:	f107 0901 	add.w	r9, r7, #1
 8012100:	4628      	mov	r0, r5
 8012102:	4631      	mov	r1, r6
 8012104:	4622      	mov	r2, r4
 8012106:	f106 38ff 	add.w	r8, r6, #4294967295
 801210a:	f7fa f905 	bl	800c318 <LCD_DrawHLine>
 801210e:	4628      	mov	r0, r5
 8012110:	4649      	mov	r1, r9
 8012112:	4642      	mov	r2, r8
 8012114:	f7fa f926 	bl	800c364 <LCD_DrawVLine>
 8012118:	4620      	mov	r0, r4
 801211a:	4649      	mov	r1, r9
 801211c:	4642      	mov	r2, r8
 801211e:	f7fa f921 	bl	800c364 <LCD_DrawVLine>
 8012122:	f7f7 fb2d 	bl	8009780 <WM__GetNextIVR>
 8012126:	e7e3      	b.n	80120f0 <GUI_DrawRect+0x40>
 8012128:	b003      	add	sp, #12
 801212a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801212e:	bf00      	nop
 8012130:	20000084 	.word	0x20000084

08012134 <_GetIndexMask_0>:
 8012134:	b508      	push	{r3, lr}
 8012136:	f7f9 fff1 	bl	800c11c <LCD_GetNumColors>
 801213a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801213e:	d010      	beq.n	8012162 <_GetIndexMask_0+0x2e>
 8012140:	287f      	cmp	r0, #127	; 0x7f
 8012142:	d810      	bhi.n	8012166 <_GetIndexMask_0+0x32>
 8012144:	283f      	cmp	r0, #63	; 0x3f
 8012146:	d810      	bhi.n	801216a <_GetIndexMask_0+0x36>
 8012148:	281f      	cmp	r0, #31
 801214a:	d810      	bhi.n	801216e <_GetIndexMask_0+0x3a>
 801214c:	280f      	cmp	r0, #15
 801214e:	d810      	bhi.n	8012172 <_GetIndexMask_0+0x3e>
 8012150:	2807      	cmp	r0, #7
 8012152:	d810      	bhi.n	8012176 <_GetIndexMask_0+0x42>
 8012154:	2803      	cmp	r0, #3
 8012156:	d810      	bhi.n	801217a <_GetIndexMask_0+0x46>
 8012158:	2801      	cmp	r0, #1
 801215a:	bf94      	ite	ls
 801215c:	2000      	movls	r0, #0
 801215e:	2001      	movhi	r0, #1
 8012160:	e00c      	b.n	801217c <_GetIndexMask_0+0x48>
 8012162:	2008      	movs	r0, #8
 8012164:	e00a      	b.n	801217c <_GetIndexMask_0+0x48>
 8012166:	2007      	movs	r0, #7
 8012168:	e008      	b.n	801217c <_GetIndexMask_0+0x48>
 801216a:	2006      	movs	r0, #6
 801216c:	e006      	b.n	801217c <_GetIndexMask_0+0x48>
 801216e:	2005      	movs	r0, #5
 8012170:	e004      	b.n	801217c <_GetIndexMask_0+0x48>
 8012172:	2004      	movs	r0, #4
 8012174:	e002      	b.n	801217c <_GetIndexMask_0+0x48>
 8012176:	2003      	movs	r0, #3
 8012178:	e000      	b.n	801217c <_GetIndexMask_0+0x48>
 801217a:	2002      	movs	r0, #2
 801217c:	2301      	movs	r3, #1
 801217e:	fa03 f000 	lsl.w	r0, r3, r0
 8012182:	3801      	subs	r0, #1
 8012184:	bd08      	pop	{r3, pc}

08012186 <_Index2Color_0>:
 8012186:	b538      	push	{r3, r4, r5, lr}
 8012188:	4604      	mov	r4, r0
 801218a:	f7f9 ffc7 	bl	800c11c <LCD_GetNumColors>
 801218e:	4605      	mov	r5, r0
 8012190:	f7f9 ffe2 	bl	800c158 <LCD_GetPalette>
 8012194:	42ac      	cmp	r4, r5
 8012196:	d203      	bcs.n	80121a0 <_Index2Color_0+0x1a>
 8012198:	b118      	cbz	r0, 80121a2 <_Index2Color_0+0x1c>
 801219a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	2000      	movs	r0, #0
 80121a2:	bd38      	pop	{r3, r4, r5, pc}

080121a4 <_Color2Index_0>:
 80121a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121a8:	4682      	mov	sl, r0
 80121aa:	f7f9 ffb7 	bl	800c11c <LCD_GetNumColors>
 80121ae:	4681      	mov	r9, r0
 80121b0:	f7f9 ffd2 	bl	800c158 <LCD_GetPalette>
 80121b4:	4605      	mov	r5, r0
 80121b6:	b1e0      	cbz	r0, 80121f2 <_Color2Index_0+0x4e>
 80121b8:	2300      	movs	r3, #0
 80121ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80121be:	4592      	cmp	sl, r2
 80121c0:	d019      	beq.n	80121f6 <_Color2Index_0+0x52>
 80121c2:	3301      	adds	r3, #1
 80121c4:	454b      	cmp	r3, r9
 80121c6:	dbf8      	blt.n	80121ba <_Color2Index_0+0x16>
 80121c8:	2700      	movs	r7, #0
 80121ca:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 80121ce:	463c      	mov	r4, r7
 80121d0:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 80121d4:	4650      	mov	r0, sl
 80121d6:	f7fb fbad 	bl	800d934 <GUI_CalcColorDist>
 80121da:	4626      	mov	r6, r4
 80121dc:	4540      	cmp	r0, r8
 80121de:	f104 0401 	add.w	r4, r4, #1
 80121e2:	bf24      	itt	cs
 80121e4:	4640      	movcs	r0, r8
 80121e6:	463e      	movcs	r6, r7
 80121e8:	454c      	cmp	r4, r9
 80121ea:	da07      	bge.n	80121fc <_Color2Index_0+0x58>
 80121ec:	4680      	mov	r8, r0
 80121ee:	4637      	mov	r7, r6
 80121f0:	e7ee      	b.n	80121d0 <_Color2Index_0+0x2c>
 80121f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f6:	4618      	mov	r0, r3
 80121f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fc:	4630      	mov	r0, r6
 80121fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012204 <_DrawDownRect>:
 8012204:	b510      	push	{r4, lr}
 8012206:	b09c      	sub	sp, #112	; 0x70
 8012208:	4604      	mov	r4, r0
 801220a:	4668      	mov	r0, sp
 801220c:	f7fb fc72 	bl	800daf4 <GUI_SaveContext_W>
 8012210:	4b09      	ldr	r3, [pc, #36]	; (8012238 <_DrawDownRect+0x34>)
 8012212:	6818      	ldr	r0, [r3, #0]
 8012214:	f7fa fba4 	bl	800c960 <LCD_SetColor>
 8012218:	f9b4 0000 	ldrsh.w	r0, [r4]
 801221c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012220:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012224:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012228:	f7ff ff42 	bl	80120b0 <GUI_DrawRect>
 801222c:	4668      	mov	r0, sp
 801222e:	f7fb fc6b 	bl	800db08 <GUI_RestoreContext>
 8012232:	b01c      	add	sp, #112	; 0x70
 8012234:	bd10      	pop	{r4, pc}
 8012236:	bf00      	nop
 8012238:	2000560c 	.word	0x2000560c

0801223c <_DrawUpRect>:
 801223c:	b510      	push	{r4, lr}
 801223e:	b09c      	sub	sp, #112	; 0x70
 8012240:	4604      	mov	r4, r0
 8012242:	4668      	mov	r0, sp
 8012244:	f7fb fc56 	bl	800daf4 <GUI_SaveContext_W>
 8012248:	4b09      	ldr	r3, [pc, #36]	; (8012270 <_DrawUpRect+0x34>)
 801224a:	6818      	ldr	r0, [r3, #0]
 801224c:	f7fa fb88 	bl	800c960 <LCD_SetColor>
 8012250:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012254:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012258:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801225c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012260:	f7ff ff26 	bl	80120b0 <GUI_DrawRect>
 8012264:	4668      	mov	r0, sp
 8012266:	f7fb fc4f 	bl	800db08 <GUI_RestoreContext>
 801226a:	b01c      	add	sp, #112	; 0x70
 801226c:	bd10      	pop	{r4, pc}
 801226e:	bf00      	nop
 8012270:	2000560c 	.word	0x2000560c

08012274 <_DrawDown>:
 8012274:	b507      	push	{r0, r1, r2, lr}
 8012276:	4668      	mov	r0, sp
 8012278:	f7f6 f8e0 	bl	800843c <WM_GetClientRect>
 801227c:	4668      	mov	r0, sp
 801227e:	f7ff ffc1 	bl	8012204 <_DrawDownRect>
 8012282:	b003      	add	sp, #12
 8012284:	f85d fb04 	ldr.w	pc, [sp], #4

08012288 <_DrawUp>:
 8012288:	b507      	push	{r0, r1, r2, lr}
 801228a:	4668      	mov	r0, sp
 801228c:	f7f6 f8d6 	bl	800843c <WM_GetClientRect>
 8012290:	4668      	mov	r0, sp
 8012292:	f7ff ffd3 	bl	801223c <_DrawUpRect>
 8012296:	b003      	add	sp, #12
 8012298:	f85d fb04 	ldr.w	pc, [sp], #4

0801229c <LCD_GetNumLayers>:
 801229c:	b510      	push	{r4, lr}
 801229e:	2000      	movs	r0, #0
 80122a0:	f7fb f962 	bl	800d568 <GUI_DEVICE__GetpDriver>
 80122a4:	1c04      	adds	r4, r0, #0
 80122a6:	f04f 0001 	mov.w	r0, #1
 80122aa:	bf18      	it	ne
 80122ac:	2401      	movne	r4, #1
 80122ae:	f7fb f95b 	bl	800d568 <GUI_DEVICE__GetpDriver>
 80122b2:	b100      	cbz	r0, 80122b6 <LCD_GetNumLayers+0x1a>
 80122b4:	3401      	adds	r4, #1
 80122b6:	4620      	mov	r0, r4
 80122b8:	bd10      	pop	{r4, pc}
	...

080122bc <__libc_init_array>:
 80122bc:	b570      	push	{r4, r5, r6, lr}
 80122be:	4d0d      	ldr	r5, [pc, #52]	; (80122f4 <__libc_init_array+0x38>)
 80122c0:	4c0d      	ldr	r4, [pc, #52]	; (80122f8 <__libc_init_array+0x3c>)
 80122c2:	1b64      	subs	r4, r4, r5
 80122c4:	10a4      	asrs	r4, r4, #2
 80122c6:	2600      	movs	r6, #0
 80122c8:	42a6      	cmp	r6, r4
 80122ca:	d109      	bne.n	80122e0 <__libc_init_array+0x24>
 80122cc:	4d0b      	ldr	r5, [pc, #44]	; (80122fc <__libc_init_array+0x40>)
 80122ce:	4c0c      	ldr	r4, [pc, #48]	; (8012300 <__libc_init_array+0x44>)
 80122d0:	f001 face 	bl	8013870 <_init>
 80122d4:	1b64      	subs	r4, r4, r5
 80122d6:	10a4      	asrs	r4, r4, #2
 80122d8:	2600      	movs	r6, #0
 80122da:	42a6      	cmp	r6, r4
 80122dc:	d105      	bne.n	80122ea <__libc_init_array+0x2e>
 80122de:	bd70      	pop	{r4, r5, r6, pc}
 80122e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80122e4:	4798      	blx	r3
 80122e6:	3601      	adds	r6, #1
 80122e8:	e7ee      	b.n	80122c8 <__libc_init_array+0xc>
 80122ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80122ee:	4798      	blx	r3
 80122f0:	3601      	adds	r6, #1
 80122f2:	e7f2      	b.n	80122da <__libc_init_array+0x1e>
 80122f4:	08015cd0 	.word	0x08015cd0
 80122f8:	08015cd0 	.word	0x08015cd0
 80122fc:	08015cd0 	.word	0x08015cd0
 8012300:	08015cd4 	.word	0x08015cd4

08012304 <memcpy>:
 8012304:	440a      	add	r2, r1
 8012306:	4291      	cmp	r1, r2
 8012308:	f100 33ff 	add.w	r3, r0, #4294967295
 801230c:	d100      	bne.n	8012310 <memcpy+0xc>
 801230e:	4770      	bx	lr
 8012310:	b510      	push	{r4, lr}
 8012312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012316:	f803 4f01 	strb.w	r4, [r3, #1]!
 801231a:	4291      	cmp	r1, r2
 801231c:	d1f9      	bne.n	8012312 <memcpy+0xe>
 801231e:	bd10      	pop	{r4, pc}

08012320 <memmove>:
 8012320:	4288      	cmp	r0, r1
 8012322:	b510      	push	{r4, lr}
 8012324:	eb01 0402 	add.w	r4, r1, r2
 8012328:	d902      	bls.n	8012330 <memmove+0x10>
 801232a:	4284      	cmp	r4, r0
 801232c:	4623      	mov	r3, r4
 801232e:	d807      	bhi.n	8012340 <memmove+0x20>
 8012330:	1e43      	subs	r3, r0, #1
 8012332:	42a1      	cmp	r1, r4
 8012334:	d008      	beq.n	8012348 <memmove+0x28>
 8012336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801233a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801233e:	e7f8      	b.n	8012332 <memmove+0x12>
 8012340:	4402      	add	r2, r0
 8012342:	4601      	mov	r1, r0
 8012344:	428a      	cmp	r2, r1
 8012346:	d100      	bne.n	801234a <memmove+0x2a>
 8012348:	bd10      	pop	{r4, pc}
 801234a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801234e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012352:	e7f7      	b.n	8012344 <memmove+0x24>

08012354 <memset>:
 8012354:	4402      	add	r2, r0
 8012356:	4603      	mov	r3, r0
 8012358:	4293      	cmp	r3, r2
 801235a:	d100      	bne.n	801235e <memset+0xa>
 801235c:	4770      	bx	lr
 801235e:	f803 1b01 	strb.w	r1, [r3], #1
 8012362:	e7f9      	b.n	8012358 <memset+0x4>

08012364 <siprintf>:
 8012364:	b40e      	push	{r1, r2, r3}
 8012366:	b500      	push	{lr}
 8012368:	b09c      	sub	sp, #112	; 0x70
 801236a:	ab1d      	add	r3, sp, #116	; 0x74
 801236c:	9002      	str	r0, [sp, #8]
 801236e:	9006      	str	r0, [sp, #24]
 8012370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012374:	4809      	ldr	r0, [pc, #36]	; (801239c <siprintf+0x38>)
 8012376:	9107      	str	r1, [sp, #28]
 8012378:	9104      	str	r1, [sp, #16]
 801237a:	4909      	ldr	r1, [pc, #36]	; (80123a0 <siprintf+0x3c>)
 801237c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012380:	9105      	str	r1, [sp, #20]
 8012382:	6800      	ldr	r0, [r0, #0]
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	a902      	add	r1, sp, #8
 8012388:	f000 fa08 	bl	801279c <_svfiprintf_r>
 801238c:	9b02      	ldr	r3, [sp, #8]
 801238e:	2200      	movs	r2, #0
 8012390:	701a      	strb	r2, [r3, #0]
 8012392:	b01c      	add	sp, #112	; 0x70
 8012394:	f85d eb04 	ldr.w	lr, [sp], #4
 8012398:	b003      	add	sp, #12
 801239a:	4770      	bx	lr
 801239c:	20000128 	.word	0x20000128
 80123a0:	ffff0208 	.word	0xffff0208

080123a4 <strchr>:
 80123a4:	b2c9      	uxtb	r1, r1
 80123a6:	4603      	mov	r3, r0
 80123a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ac:	b11a      	cbz	r2, 80123b6 <strchr+0x12>
 80123ae:	428a      	cmp	r2, r1
 80123b0:	d1f9      	bne.n	80123a6 <strchr+0x2>
 80123b2:	4618      	mov	r0, r3
 80123b4:	4770      	bx	lr
 80123b6:	2900      	cmp	r1, #0
 80123b8:	bf18      	it	ne
 80123ba:	2300      	movne	r3, #0
 80123bc:	e7f9      	b.n	80123b2 <strchr+0xe>

080123be <strcpy>:
 80123be:	4603      	mov	r3, r0
 80123c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123c4:	f803 2b01 	strb.w	r2, [r3], #1
 80123c8:	2a00      	cmp	r2, #0
 80123ca:	d1f9      	bne.n	80123c0 <strcpy+0x2>
 80123cc:	4770      	bx	lr

080123ce <strstr>:
 80123ce:	780a      	ldrb	r2, [r1, #0]
 80123d0:	b570      	push	{r4, r5, r6, lr}
 80123d2:	b96a      	cbnz	r2, 80123f0 <strstr+0x22>
 80123d4:	bd70      	pop	{r4, r5, r6, pc}
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d109      	bne.n	80123ee <strstr+0x20>
 80123da:	460c      	mov	r4, r1
 80123dc:	4605      	mov	r5, r0
 80123de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d0f6      	beq.n	80123d4 <strstr+0x6>
 80123e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80123ea:	429e      	cmp	r6, r3
 80123ec:	d0f7      	beq.n	80123de <strstr+0x10>
 80123ee:	3001      	adds	r0, #1
 80123f0:	7803      	ldrb	r3, [r0, #0]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1ef      	bne.n	80123d6 <strstr+0x8>
 80123f6:	4618      	mov	r0, r3
 80123f8:	e7ec      	b.n	80123d4 <strstr+0x6>
	...

080123fc <strtok>:
 80123fc:	4b16      	ldr	r3, [pc, #88]	; (8012458 <strtok+0x5c>)
 80123fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012400:	681e      	ldr	r6, [r3, #0]
 8012402:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012404:	4605      	mov	r5, r0
 8012406:	b9fc      	cbnz	r4, 8012448 <strtok+0x4c>
 8012408:	2050      	movs	r0, #80	; 0x50
 801240a:	9101      	str	r1, [sp, #4]
 801240c:	f000 f882 	bl	8012514 <malloc>
 8012410:	9901      	ldr	r1, [sp, #4]
 8012412:	65b0      	str	r0, [r6, #88]	; 0x58
 8012414:	4602      	mov	r2, r0
 8012416:	b920      	cbnz	r0, 8012422 <strtok+0x26>
 8012418:	4b10      	ldr	r3, [pc, #64]	; (801245c <strtok+0x60>)
 801241a:	4811      	ldr	r0, [pc, #68]	; (8012460 <strtok+0x64>)
 801241c:	2157      	movs	r1, #87	; 0x57
 801241e:	f000 f849 	bl	80124b4 <__assert_func>
 8012422:	e9c0 4400 	strd	r4, r4, [r0]
 8012426:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801242a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801242e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012432:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012436:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801243a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801243e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012442:	6184      	str	r4, [r0, #24]
 8012444:	7704      	strb	r4, [r0, #28]
 8012446:	6244      	str	r4, [r0, #36]	; 0x24
 8012448:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801244a:	2301      	movs	r3, #1
 801244c:	4628      	mov	r0, r5
 801244e:	b002      	add	sp, #8
 8012450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012454:	f000 b806 	b.w	8012464 <__strtok_r>
 8012458:	20000128 	.word	0x20000128
 801245c:	08015b84 	.word	0x08015b84
 8012460:	08015b9b 	.word	0x08015b9b

08012464 <__strtok_r>:
 8012464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012466:	b908      	cbnz	r0, 801246c <__strtok_r+0x8>
 8012468:	6810      	ldr	r0, [r2, #0]
 801246a:	b188      	cbz	r0, 8012490 <__strtok_r+0x2c>
 801246c:	4604      	mov	r4, r0
 801246e:	4620      	mov	r0, r4
 8012470:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012474:	460f      	mov	r7, r1
 8012476:	f817 6b01 	ldrb.w	r6, [r7], #1
 801247a:	b91e      	cbnz	r6, 8012484 <__strtok_r+0x20>
 801247c:	b965      	cbnz	r5, 8012498 <__strtok_r+0x34>
 801247e:	6015      	str	r5, [r2, #0]
 8012480:	4628      	mov	r0, r5
 8012482:	e005      	b.n	8012490 <__strtok_r+0x2c>
 8012484:	42b5      	cmp	r5, r6
 8012486:	d1f6      	bne.n	8012476 <__strtok_r+0x12>
 8012488:	2b00      	cmp	r3, #0
 801248a:	d1f0      	bne.n	801246e <__strtok_r+0xa>
 801248c:	6014      	str	r4, [r2, #0]
 801248e:	7003      	strb	r3, [r0, #0]
 8012490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012492:	461c      	mov	r4, r3
 8012494:	e00c      	b.n	80124b0 <__strtok_r+0x4c>
 8012496:	b915      	cbnz	r5, 801249e <__strtok_r+0x3a>
 8012498:	f814 3b01 	ldrb.w	r3, [r4], #1
 801249c:	460e      	mov	r6, r1
 801249e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80124a2:	42ab      	cmp	r3, r5
 80124a4:	d1f7      	bne.n	8012496 <__strtok_r+0x32>
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d0f3      	beq.n	8012492 <__strtok_r+0x2e>
 80124aa:	2300      	movs	r3, #0
 80124ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 80124b0:	6014      	str	r4, [r2, #0]
 80124b2:	e7ed      	b.n	8012490 <__strtok_r+0x2c>

080124b4 <__assert_func>:
 80124b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124b6:	4614      	mov	r4, r2
 80124b8:	461a      	mov	r2, r3
 80124ba:	4b09      	ldr	r3, [pc, #36]	; (80124e0 <__assert_func+0x2c>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4605      	mov	r5, r0
 80124c0:	68d8      	ldr	r0, [r3, #12]
 80124c2:	b14c      	cbz	r4, 80124d8 <__assert_func+0x24>
 80124c4:	4b07      	ldr	r3, [pc, #28]	; (80124e4 <__assert_func+0x30>)
 80124c6:	9100      	str	r1, [sp, #0]
 80124c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124cc:	4906      	ldr	r1, [pc, #24]	; (80124e8 <__assert_func+0x34>)
 80124ce:	462b      	mov	r3, r5
 80124d0:	f000 f80e 	bl	80124f0 <fiprintf>
 80124d4:	f000 fe20 	bl	8013118 <abort>
 80124d8:	4b04      	ldr	r3, [pc, #16]	; (80124ec <__assert_func+0x38>)
 80124da:	461c      	mov	r4, r3
 80124dc:	e7f3      	b.n	80124c6 <__assert_func+0x12>
 80124de:	bf00      	nop
 80124e0:	20000128 	.word	0x20000128
 80124e4:	08015bf8 	.word	0x08015bf8
 80124e8:	08015c05 	.word	0x08015c05
 80124ec:	08015c33 	.word	0x08015c33

080124f0 <fiprintf>:
 80124f0:	b40e      	push	{r1, r2, r3}
 80124f2:	b503      	push	{r0, r1, lr}
 80124f4:	4601      	mov	r1, r0
 80124f6:	ab03      	add	r3, sp, #12
 80124f8:	4805      	ldr	r0, [pc, #20]	; (8012510 <fiprintf+0x20>)
 80124fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80124fe:	6800      	ldr	r0, [r0, #0]
 8012500:	9301      	str	r3, [sp, #4]
 8012502:	f000 fa75 	bl	80129f0 <_vfiprintf_r>
 8012506:	b002      	add	sp, #8
 8012508:	f85d eb04 	ldr.w	lr, [sp], #4
 801250c:	b003      	add	sp, #12
 801250e:	4770      	bx	lr
 8012510:	20000128 	.word	0x20000128

08012514 <malloc>:
 8012514:	4b02      	ldr	r3, [pc, #8]	; (8012520 <malloc+0xc>)
 8012516:	4601      	mov	r1, r0
 8012518:	6818      	ldr	r0, [r3, #0]
 801251a:	f000 b86f 	b.w	80125fc <_malloc_r>
 801251e:	bf00      	nop
 8012520:	20000128 	.word	0x20000128

08012524 <_free_r>:
 8012524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012526:	2900      	cmp	r1, #0
 8012528:	d044      	beq.n	80125b4 <_free_r+0x90>
 801252a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801252e:	9001      	str	r0, [sp, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	f1a1 0404 	sub.w	r4, r1, #4
 8012536:	bfb8      	it	lt
 8012538:	18e4      	addlt	r4, r4, r3
 801253a:	f001 f815 	bl	8013568 <__malloc_lock>
 801253e:	4a1e      	ldr	r2, [pc, #120]	; (80125b8 <_free_r+0x94>)
 8012540:	9801      	ldr	r0, [sp, #4]
 8012542:	6813      	ldr	r3, [r2, #0]
 8012544:	b933      	cbnz	r3, 8012554 <_free_r+0x30>
 8012546:	6063      	str	r3, [r4, #4]
 8012548:	6014      	str	r4, [r2, #0]
 801254a:	b003      	add	sp, #12
 801254c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012550:	f001 b810 	b.w	8013574 <__malloc_unlock>
 8012554:	42a3      	cmp	r3, r4
 8012556:	d908      	bls.n	801256a <_free_r+0x46>
 8012558:	6825      	ldr	r5, [r4, #0]
 801255a:	1961      	adds	r1, r4, r5
 801255c:	428b      	cmp	r3, r1
 801255e:	bf01      	itttt	eq
 8012560:	6819      	ldreq	r1, [r3, #0]
 8012562:	685b      	ldreq	r3, [r3, #4]
 8012564:	1949      	addeq	r1, r1, r5
 8012566:	6021      	streq	r1, [r4, #0]
 8012568:	e7ed      	b.n	8012546 <_free_r+0x22>
 801256a:	461a      	mov	r2, r3
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	b10b      	cbz	r3, 8012574 <_free_r+0x50>
 8012570:	42a3      	cmp	r3, r4
 8012572:	d9fa      	bls.n	801256a <_free_r+0x46>
 8012574:	6811      	ldr	r1, [r2, #0]
 8012576:	1855      	adds	r5, r2, r1
 8012578:	42a5      	cmp	r5, r4
 801257a:	d10b      	bne.n	8012594 <_free_r+0x70>
 801257c:	6824      	ldr	r4, [r4, #0]
 801257e:	4421      	add	r1, r4
 8012580:	1854      	adds	r4, r2, r1
 8012582:	42a3      	cmp	r3, r4
 8012584:	6011      	str	r1, [r2, #0]
 8012586:	d1e0      	bne.n	801254a <_free_r+0x26>
 8012588:	681c      	ldr	r4, [r3, #0]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	6053      	str	r3, [r2, #4]
 801258e:	4421      	add	r1, r4
 8012590:	6011      	str	r1, [r2, #0]
 8012592:	e7da      	b.n	801254a <_free_r+0x26>
 8012594:	d902      	bls.n	801259c <_free_r+0x78>
 8012596:	230c      	movs	r3, #12
 8012598:	6003      	str	r3, [r0, #0]
 801259a:	e7d6      	b.n	801254a <_free_r+0x26>
 801259c:	6825      	ldr	r5, [r4, #0]
 801259e:	1961      	adds	r1, r4, r5
 80125a0:	428b      	cmp	r3, r1
 80125a2:	bf04      	itt	eq
 80125a4:	6819      	ldreq	r1, [r3, #0]
 80125a6:	685b      	ldreq	r3, [r3, #4]
 80125a8:	6063      	str	r3, [r4, #4]
 80125aa:	bf04      	itt	eq
 80125ac:	1949      	addeq	r1, r1, r5
 80125ae:	6021      	streq	r1, [r4, #0]
 80125b0:	6054      	str	r4, [r2, #4]
 80125b2:	e7ca      	b.n	801254a <_free_r+0x26>
 80125b4:	b003      	add	sp, #12
 80125b6:	bd30      	pop	{r4, r5, pc}
 80125b8:	20005610 	.word	0x20005610

080125bc <sbrk_aligned>:
 80125bc:	b570      	push	{r4, r5, r6, lr}
 80125be:	4e0e      	ldr	r6, [pc, #56]	; (80125f8 <sbrk_aligned+0x3c>)
 80125c0:	460c      	mov	r4, r1
 80125c2:	6831      	ldr	r1, [r6, #0]
 80125c4:	4605      	mov	r5, r0
 80125c6:	b911      	cbnz	r1, 80125ce <sbrk_aligned+0x12>
 80125c8:	f000 fcd6 	bl	8012f78 <_sbrk_r>
 80125cc:	6030      	str	r0, [r6, #0]
 80125ce:	4621      	mov	r1, r4
 80125d0:	4628      	mov	r0, r5
 80125d2:	f000 fcd1 	bl	8012f78 <_sbrk_r>
 80125d6:	1c43      	adds	r3, r0, #1
 80125d8:	d00a      	beq.n	80125f0 <sbrk_aligned+0x34>
 80125da:	1cc4      	adds	r4, r0, #3
 80125dc:	f024 0403 	bic.w	r4, r4, #3
 80125e0:	42a0      	cmp	r0, r4
 80125e2:	d007      	beq.n	80125f4 <sbrk_aligned+0x38>
 80125e4:	1a21      	subs	r1, r4, r0
 80125e6:	4628      	mov	r0, r5
 80125e8:	f000 fcc6 	bl	8012f78 <_sbrk_r>
 80125ec:	3001      	adds	r0, #1
 80125ee:	d101      	bne.n	80125f4 <sbrk_aligned+0x38>
 80125f0:	f04f 34ff 	mov.w	r4, #4294967295
 80125f4:	4620      	mov	r0, r4
 80125f6:	bd70      	pop	{r4, r5, r6, pc}
 80125f8:	20005614 	.word	0x20005614

080125fc <_malloc_r>:
 80125fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012600:	1ccd      	adds	r5, r1, #3
 8012602:	f025 0503 	bic.w	r5, r5, #3
 8012606:	3508      	adds	r5, #8
 8012608:	2d0c      	cmp	r5, #12
 801260a:	bf38      	it	cc
 801260c:	250c      	movcc	r5, #12
 801260e:	2d00      	cmp	r5, #0
 8012610:	4607      	mov	r7, r0
 8012612:	db01      	blt.n	8012618 <_malloc_r+0x1c>
 8012614:	42a9      	cmp	r1, r5
 8012616:	d905      	bls.n	8012624 <_malloc_r+0x28>
 8012618:	230c      	movs	r3, #12
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	2600      	movs	r6, #0
 801261e:	4630      	mov	r0, r6
 8012620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012624:	4e2e      	ldr	r6, [pc, #184]	; (80126e0 <_malloc_r+0xe4>)
 8012626:	f000 ff9f 	bl	8013568 <__malloc_lock>
 801262a:	6833      	ldr	r3, [r6, #0]
 801262c:	461c      	mov	r4, r3
 801262e:	bb34      	cbnz	r4, 801267e <_malloc_r+0x82>
 8012630:	4629      	mov	r1, r5
 8012632:	4638      	mov	r0, r7
 8012634:	f7ff ffc2 	bl	80125bc <sbrk_aligned>
 8012638:	1c43      	adds	r3, r0, #1
 801263a:	4604      	mov	r4, r0
 801263c:	d14d      	bne.n	80126da <_malloc_r+0xde>
 801263e:	6834      	ldr	r4, [r6, #0]
 8012640:	4626      	mov	r6, r4
 8012642:	2e00      	cmp	r6, #0
 8012644:	d140      	bne.n	80126c8 <_malloc_r+0xcc>
 8012646:	6823      	ldr	r3, [r4, #0]
 8012648:	4631      	mov	r1, r6
 801264a:	4638      	mov	r0, r7
 801264c:	eb04 0803 	add.w	r8, r4, r3
 8012650:	f000 fc92 	bl	8012f78 <_sbrk_r>
 8012654:	4580      	cmp	r8, r0
 8012656:	d13a      	bne.n	80126ce <_malloc_r+0xd2>
 8012658:	6821      	ldr	r1, [r4, #0]
 801265a:	3503      	adds	r5, #3
 801265c:	1a6d      	subs	r5, r5, r1
 801265e:	f025 0503 	bic.w	r5, r5, #3
 8012662:	3508      	adds	r5, #8
 8012664:	2d0c      	cmp	r5, #12
 8012666:	bf38      	it	cc
 8012668:	250c      	movcc	r5, #12
 801266a:	4629      	mov	r1, r5
 801266c:	4638      	mov	r0, r7
 801266e:	f7ff ffa5 	bl	80125bc <sbrk_aligned>
 8012672:	3001      	adds	r0, #1
 8012674:	d02b      	beq.n	80126ce <_malloc_r+0xd2>
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	442b      	add	r3, r5
 801267a:	6023      	str	r3, [r4, #0]
 801267c:	e00e      	b.n	801269c <_malloc_r+0xa0>
 801267e:	6822      	ldr	r2, [r4, #0]
 8012680:	1b52      	subs	r2, r2, r5
 8012682:	d41e      	bmi.n	80126c2 <_malloc_r+0xc6>
 8012684:	2a0b      	cmp	r2, #11
 8012686:	d916      	bls.n	80126b6 <_malloc_r+0xba>
 8012688:	1961      	adds	r1, r4, r5
 801268a:	42a3      	cmp	r3, r4
 801268c:	6025      	str	r5, [r4, #0]
 801268e:	bf18      	it	ne
 8012690:	6059      	strne	r1, [r3, #4]
 8012692:	6863      	ldr	r3, [r4, #4]
 8012694:	bf08      	it	eq
 8012696:	6031      	streq	r1, [r6, #0]
 8012698:	5162      	str	r2, [r4, r5]
 801269a:	604b      	str	r3, [r1, #4]
 801269c:	4638      	mov	r0, r7
 801269e:	f104 060b 	add.w	r6, r4, #11
 80126a2:	f000 ff67 	bl	8013574 <__malloc_unlock>
 80126a6:	f026 0607 	bic.w	r6, r6, #7
 80126aa:	1d23      	adds	r3, r4, #4
 80126ac:	1af2      	subs	r2, r6, r3
 80126ae:	d0b6      	beq.n	801261e <_malloc_r+0x22>
 80126b0:	1b9b      	subs	r3, r3, r6
 80126b2:	50a3      	str	r3, [r4, r2]
 80126b4:	e7b3      	b.n	801261e <_malloc_r+0x22>
 80126b6:	6862      	ldr	r2, [r4, #4]
 80126b8:	42a3      	cmp	r3, r4
 80126ba:	bf0c      	ite	eq
 80126bc:	6032      	streq	r2, [r6, #0]
 80126be:	605a      	strne	r2, [r3, #4]
 80126c0:	e7ec      	b.n	801269c <_malloc_r+0xa0>
 80126c2:	4623      	mov	r3, r4
 80126c4:	6864      	ldr	r4, [r4, #4]
 80126c6:	e7b2      	b.n	801262e <_malloc_r+0x32>
 80126c8:	4634      	mov	r4, r6
 80126ca:	6876      	ldr	r6, [r6, #4]
 80126cc:	e7b9      	b.n	8012642 <_malloc_r+0x46>
 80126ce:	230c      	movs	r3, #12
 80126d0:	603b      	str	r3, [r7, #0]
 80126d2:	4638      	mov	r0, r7
 80126d4:	f000 ff4e 	bl	8013574 <__malloc_unlock>
 80126d8:	e7a1      	b.n	801261e <_malloc_r+0x22>
 80126da:	6025      	str	r5, [r4, #0]
 80126dc:	e7de      	b.n	801269c <_malloc_r+0xa0>
 80126de:	bf00      	nop
 80126e0:	20005610 	.word	0x20005610

080126e4 <__ssputs_r>:
 80126e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e8:	688e      	ldr	r6, [r1, #8]
 80126ea:	429e      	cmp	r6, r3
 80126ec:	4682      	mov	sl, r0
 80126ee:	460c      	mov	r4, r1
 80126f0:	4690      	mov	r8, r2
 80126f2:	461f      	mov	r7, r3
 80126f4:	d838      	bhi.n	8012768 <__ssputs_r+0x84>
 80126f6:	898a      	ldrh	r2, [r1, #12]
 80126f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80126fc:	d032      	beq.n	8012764 <__ssputs_r+0x80>
 80126fe:	6825      	ldr	r5, [r4, #0]
 8012700:	6909      	ldr	r1, [r1, #16]
 8012702:	eba5 0901 	sub.w	r9, r5, r1
 8012706:	6965      	ldr	r5, [r4, #20]
 8012708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801270c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012710:	3301      	adds	r3, #1
 8012712:	444b      	add	r3, r9
 8012714:	106d      	asrs	r5, r5, #1
 8012716:	429d      	cmp	r5, r3
 8012718:	bf38      	it	cc
 801271a:	461d      	movcc	r5, r3
 801271c:	0553      	lsls	r3, r2, #21
 801271e:	d531      	bpl.n	8012784 <__ssputs_r+0xa0>
 8012720:	4629      	mov	r1, r5
 8012722:	f7ff ff6b 	bl	80125fc <_malloc_r>
 8012726:	4606      	mov	r6, r0
 8012728:	b950      	cbnz	r0, 8012740 <__ssputs_r+0x5c>
 801272a:	230c      	movs	r3, #12
 801272c:	f8ca 3000 	str.w	r3, [sl]
 8012730:	89a3      	ldrh	r3, [r4, #12]
 8012732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012736:	81a3      	strh	r3, [r4, #12]
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012740:	6921      	ldr	r1, [r4, #16]
 8012742:	464a      	mov	r2, r9
 8012744:	f7ff fdde 	bl	8012304 <memcpy>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801274e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012752:	81a3      	strh	r3, [r4, #12]
 8012754:	6126      	str	r6, [r4, #16]
 8012756:	6165      	str	r5, [r4, #20]
 8012758:	444e      	add	r6, r9
 801275a:	eba5 0509 	sub.w	r5, r5, r9
 801275e:	6026      	str	r6, [r4, #0]
 8012760:	60a5      	str	r5, [r4, #8]
 8012762:	463e      	mov	r6, r7
 8012764:	42be      	cmp	r6, r7
 8012766:	d900      	bls.n	801276a <__ssputs_r+0x86>
 8012768:	463e      	mov	r6, r7
 801276a:	6820      	ldr	r0, [r4, #0]
 801276c:	4632      	mov	r2, r6
 801276e:	4641      	mov	r1, r8
 8012770:	f7ff fdd6 	bl	8012320 <memmove>
 8012774:	68a3      	ldr	r3, [r4, #8]
 8012776:	1b9b      	subs	r3, r3, r6
 8012778:	60a3      	str	r3, [r4, #8]
 801277a:	6823      	ldr	r3, [r4, #0]
 801277c:	4433      	add	r3, r6
 801277e:	6023      	str	r3, [r4, #0]
 8012780:	2000      	movs	r0, #0
 8012782:	e7db      	b.n	801273c <__ssputs_r+0x58>
 8012784:	462a      	mov	r2, r5
 8012786:	f000 fefb 	bl	8013580 <_realloc_r>
 801278a:	4606      	mov	r6, r0
 801278c:	2800      	cmp	r0, #0
 801278e:	d1e1      	bne.n	8012754 <__ssputs_r+0x70>
 8012790:	6921      	ldr	r1, [r4, #16]
 8012792:	4650      	mov	r0, sl
 8012794:	f7ff fec6 	bl	8012524 <_free_r>
 8012798:	e7c7      	b.n	801272a <__ssputs_r+0x46>
	...

0801279c <_svfiprintf_r>:
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a0:	4698      	mov	r8, r3
 80127a2:	898b      	ldrh	r3, [r1, #12]
 80127a4:	061b      	lsls	r3, r3, #24
 80127a6:	b09d      	sub	sp, #116	; 0x74
 80127a8:	4607      	mov	r7, r0
 80127aa:	460d      	mov	r5, r1
 80127ac:	4614      	mov	r4, r2
 80127ae:	d50e      	bpl.n	80127ce <_svfiprintf_r+0x32>
 80127b0:	690b      	ldr	r3, [r1, #16]
 80127b2:	b963      	cbnz	r3, 80127ce <_svfiprintf_r+0x32>
 80127b4:	2140      	movs	r1, #64	; 0x40
 80127b6:	f7ff ff21 	bl	80125fc <_malloc_r>
 80127ba:	6028      	str	r0, [r5, #0]
 80127bc:	6128      	str	r0, [r5, #16]
 80127be:	b920      	cbnz	r0, 80127ca <_svfiprintf_r+0x2e>
 80127c0:	230c      	movs	r3, #12
 80127c2:	603b      	str	r3, [r7, #0]
 80127c4:	f04f 30ff 	mov.w	r0, #4294967295
 80127c8:	e0d1      	b.n	801296e <_svfiprintf_r+0x1d2>
 80127ca:	2340      	movs	r3, #64	; 0x40
 80127cc:	616b      	str	r3, [r5, #20]
 80127ce:	2300      	movs	r3, #0
 80127d0:	9309      	str	r3, [sp, #36]	; 0x24
 80127d2:	2320      	movs	r3, #32
 80127d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80127dc:	2330      	movs	r3, #48	; 0x30
 80127de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012988 <_svfiprintf_r+0x1ec>
 80127e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127e6:	f04f 0901 	mov.w	r9, #1
 80127ea:	4623      	mov	r3, r4
 80127ec:	469a      	mov	sl, r3
 80127ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127f2:	b10a      	cbz	r2, 80127f8 <_svfiprintf_r+0x5c>
 80127f4:	2a25      	cmp	r2, #37	; 0x25
 80127f6:	d1f9      	bne.n	80127ec <_svfiprintf_r+0x50>
 80127f8:	ebba 0b04 	subs.w	fp, sl, r4
 80127fc:	d00b      	beq.n	8012816 <_svfiprintf_r+0x7a>
 80127fe:	465b      	mov	r3, fp
 8012800:	4622      	mov	r2, r4
 8012802:	4629      	mov	r1, r5
 8012804:	4638      	mov	r0, r7
 8012806:	f7ff ff6d 	bl	80126e4 <__ssputs_r>
 801280a:	3001      	adds	r0, #1
 801280c:	f000 80aa 	beq.w	8012964 <_svfiprintf_r+0x1c8>
 8012810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012812:	445a      	add	r2, fp
 8012814:	9209      	str	r2, [sp, #36]	; 0x24
 8012816:	f89a 3000 	ldrb.w	r3, [sl]
 801281a:	2b00      	cmp	r3, #0
 801281c:	f000 80a2 	beq.w	8012964 <_svfiprintf_r+0x1c8>
 8012820:	2300      	movs	r3, #0
 8012822:	f04f 32ff 	mov.w	r2, #4294967295
 8012826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801282a:	f10a 0a01 	add.w	sl, sl, #1
 801282e:	9304      	str	r3, [sp, #16]
 8012830:	9307      	str	r3, [sp, #28]
 8012832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012836:	931a      	str	r3, [sp, #104]	; 0x68
 8012838:	4654      	mov	r4, sl
 801283a:	2205      	movs	r2, #5
 801283c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012840:	4851      	ldr	r0, [pc, #324]	; (8012988 <_svfiprintf_r+0x1ec>)
 8012842:	f7ed fccd 	bl	80001e0 <memchr>
 8012846:	9a04      	ldr	r2, [sp, #16]
 8012848:	b9d8      	cbnz	r0, 8012882 <_svfiprintf_r+0xe6>
 801284a:	06d0      	lsls	r0, r2, #27
 801284c:	bf44      	itt	mi
 801284e:	2320      	movmi	r3, #32
 8012850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012854:	0711      	lsls	r1, r2, #28
 8012856:	bf44      	itt	mi
 8012858:	232b      	movmi	r3, #43	; 0x2b
 801285a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801285e:	f89a 3000 	ldrb.w	r3, [sl]
 8012862:	2b2a      	cmp	r3, #42	; 0x2a
 8012864:	d015      	beq.n	8012892 <_svfiprintf_r+0xf6>
 8012866:	9a07      	ldr	r2, [sp, #28]
 8012868:	4654      	mov	r4, sl
 801286a:	2000      	movs	r0, #0
 801286c:	f04f 0c0a 	mov.w	ip, #10
 8012870:	4621      	mov	r1, r4
 8012872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012876:	3b30      	subs	r3, #48	; 0x30
 8012878:	2b09      	cmp	r3, #9
 801287a:	d94e      	bls.n	801291a <_svfiprintf_r+0x17e>
 801287c:	b1b0      	cbz	r0, 80128ac <_svfiprintf_r+0x110>
 801287e:	9207      	str	r2, [sp, #28]
 8012880:	e014      	b.n	80128ac <_svfiprintf_r+0x110>
 8012882:	eba0 0308 	sub.w	r3, r0, r8
 8012886:	fa09 f303 	lsl.w	r3, r9, r3
 801288a:	4313      	orrs	r3, r2
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	46a2      	mov	sl, r4
 8012890:	e7d2      	b.n	8012838 <_svfiprintf_r+0x9c>
 8012892:	9b03      	ldr	r3, [sp, #12]
 8012894:	1d19      	adds	r1, r3, #4
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	9103      	str	r1, [sp, #12]
 801289a:	2b00      	cmp	r3, #0
 801289c:	bfbb      	ittet	lt
 801289e:	425b      	neglt	r3, r3
 80128a0:	f042 0202 	orrlt.w	r2, r2, #2
 80128a4:	9307      	strge	r3, [sp, #28]
 80128a6:	9307      	strlt	r3, [sp, #28]
 80128a8:	bfb8      	it	lt
 80128aa:	9204      	strlt	r2, [sp, #16]
 80128ac:	7823      	ldrb	r3, [r4, #0]
 80128ae:	2b2e      	cmp	r3, #46	; 0x2e
 80128b0:	d10c      	bne.n	80128cc <_svfiprintf_r+0x130>
 80128b2:	7863      	ldrb	r3, [r4, #1]
 80128b4:	2b2a      	cmp	r3, #42	; 0x2a
 80128b6:	d135      	bne.n	8012924 <_svfiprintf_r+0x188>
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	1d1a      	adds	r2, r3, #4
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	9203      	str	r2, [sp, #12]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bfb8      	it	lt
 80128c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80128c8:	3402      	adds	r4, #2
 80128ca:	9305      	str	r3, [sp, #20]
 80128cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012998 <_svfiprintf_r+0x1fc>
 80128d0:	7821      	ldrb	r1, [r4, #0]
 80128d2:	2203      	movs	r2, #3
 80128d4:	4650      	mov	r0, sl
 80128d6:	f7ed fc83 	bl	80001e0 <memchr>
 80128da:	b140      	cbz	r0, 80128ee <_svfiprintf_r+0x152>
 80128dc:	2340      	movs	r3, #64	; 0x40
 80128de:	eba0 000a 	sub.w	r0, r0, sl
 80128e2:	fa03 f000 	lsl.w	r0, r3, r0
 80128e6:	9b04      	ldr	r3, [sp, #16]
 80128e8:	4303      	orrs	r3, r0
 80128ea:	3401      	adds	r4, #1
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128f2:	4826      	ldr	r0, [pc, #152]	; (801298c <_svfiprintf_r+0x1f0>)
 80128f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128f8:	2206      	movs	r2, #6
 80128fa:	f7ed fc71 	bl	80001e0 <memchr>
 80128fe:	2800      	cmp	r0, #0
 8012900:	d038      	beq.n	8012974 <_svfiprintf_r+0x1d8>
 8012902:	4b23      	ldr	r3, [pc, #140]	; (8012990 <_svfiprintf_r+0x1f4>)
 8012904:	bb1b      	cbnz	r3, 801294e <_svfiprintf_r+0x1b2>
 8012906:	9b03      	ldr	r3, [sp, #12]
 8012908:	3307      	adds	r3, #7
 801290a:	f023 0307 	bic.w	r3, r3, #7
 801290e:	3308      	adds	r3, #8
 8012910:	9303      	str	r3, [sp, #12]
 8012912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012914:	4433      	add	r3, r6
 8012916:	9309      	str	r3, [sp, #36]	; 0x24
 8012918:	e767      	b.n	80127ea <_svfiprintf_r+0x4e>
 801291a:	fb0c 3202 	mla	r2, ip, r2, r3
 801291e:	460c      	mov	r4, r1
 8012920:	2001      	movs	r0, #1
 8012922:	e7a5      	b.n	8012870 <_svfiprintf_r+0xd4>
 8012924:	2300      	movs	r3, #0
 8012926:	3401      	adds	r4, #1
 8012928:	9305      	str	r3, [sp, #20]
 801292a:	4619      	mov	r1, r3
 801292c:	f04f 0c0a 	mov.w	ip, #10
 8012930:	4620      	mov	r0, r4
 8012932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012936:	3a30      	subs	r2, #48	; 0x30
 8012938:	2a09      	cmp	r2, #9
 801293a:	d903      	bls.n	8012944 <_svfiprintf_r+0x1a8>
 801293c:	2b00      	cmp	r3, #0
 801293e:	d0c5      	beq.n	80128cc <_svfiprintf_r+0x130>
 8012940:	9105      	str	r1, [sp, #20]
 8012942:	e7c3      	b.n	80128cc <_svfiprintf_r+0x130>
 8012944:	fb0c 2101 	mla	r1, ip, r1, r2
 8012948:	4604      	mov	r4, r0
 801294a:	2301      	movs	r3, #1
 801294c:	e7f0      	b.n	8012930 <_svfiprintf_r+0x194>
 801294e:	ab03      	add	r3, sp, #12
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	462a      	mov	r2, r5
 8012954:	4b0f      	ldr	r3, [pc, #60]	; (8012994 <_svfiprintf_r+0x1f8>)
 8012956:	a904      	add	r1, sp, #16
 8012958:	4638      	mov	r0, r7
 801295a:	f3af 8000 	nop.w
 801295e:	1c42      	adds	r2, r0, #1
 8012960:	4606      	mov	r6, r0
 8012962:	d1d6      	bne.n	8012912 <_svfiprintf_r+0x176>
 8012964:	89ab      	ldrh	r3, [r5, #12]
 8012966:	065b      	lsls	r3, r3, #25
 8012968:	f53f af2c 	bmi.w	80127c4 <_svfiprintf_r+0x28>
 801296c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801296e:	b01d      	add	sp, #116	; 0x74
 8012970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012974:	ab03      	add	r3, sp, #12
 8012976:	9300      	str	r3, [sp, #0]
 8012978:	462a      	mov	r2, r5
 801297a:	4b06      	ldr	r3, [pc, #24]	; (8012994 <_svfiprintf_r+0x1f8>)
 801297c:	a904      	add	r1, sp, #16
 801297e:	4638      	mov	r0, r7
 8012980:	f000 f9d4 	bl	8012d2c <_printf_i>
 8012984:	e7eb      	b.n	801295e <_svfiprintf_r+0x1c2>
 8012986:	bf00      	nop
 8012988:	08015c34 	.word	0x08015c34
 801298c:	08015c3e 	.word	0x08015c3e
 8012990:	00000000 	.word	0x00000000
 8012994:	080126e5 	.word	0x080126e5
 8012998:	08015c3a 	.word	0x08015c3a

0801299c <__sfputc_r>:
 801299c:	6893      	ldr	r3, [r2, #8]
 801299e:	3b01      	subs	r3, #1
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	b410      	push	{r4}
 80129a4:	6093      	str	r3, [r2, #8]
 80129a6:	da08      	bge.n	80129ba <__sfputc_r+0x1e>
 80129a8:	6994      	ldr	r4, [r2, #24]
 80129aa:	42a3      	cmp	r3, r4
 80129ac:	db01      	blt.n	80129b2 <__sfputc_r+0x16>
 80129ae:	290a      	cmp	r1, #10
 80129b0:	d103      	bne.n	80129ba <__sfputc_r+0x1e>
 80129b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129b6:	f000 baef 	b.w	8012f98 <__swbuf_r>
 80129ba:	6813      	ldr	r3, [r2, #0]
 80129bc:	1c58      	adds	r0, r3, #1
 80129be:	6010      	str	r0, [r2, #0]
 80129c0:	7019      	strb	r1, [r3, #0]
 80129c2:	4608      	mov	r0, r1
 80129c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <__sfputs_r>:
 80129ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129cc:	4606      	mov	r6, r0
 80129ce:	460f      	mov	r7, r1
 80129d0:	4614      	mov	r4, r2
 80129d2:	18d5      	adds	r5, r2, r3
 80129d4:	42ac      	cmp	r4, r5
 80129d6:	d101      	bne.n	80129dc <__sfputs_r+0x12>
 80129d8:	2000      	movs	r0, #0
 80129da:	e007      	b.n	80129ec <__sfputs_r+0x22>
 80129dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e0:	463a      	mov	r2, r7
 80129e2:	4630      	mov	r0, r6
 80129e4:	f7ff ffda 	bl	801299c <__sfputc_r>
 80129e8:	1c43      	adds	r3, r0, #1
 80129ea:	d1f3      	bne.n	80129d4 <__sfputs_r+0xa>
 80129ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129f0 <_vfiprintf_r>:
 80129f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	460d      	mov	r5, r1
 80129f6:	b09d      	sub	sp, #116	; 0x74
 80129f8:	4614      	mov	r4, r2
 80129fa:	4698      	mov	r8, r3
 80129fc:	4606      	mov	r6, r0
 80129fe:	b118      	cbz	r0, 8012a08 <_vfiprintf_r+0x18>
 8012a00:	6983      	ldr	r3, [r0, #24]
 8012a02:	b90b      	cbnz	r3, 8012a08 <_vfiprintf_r+0x18>
 8012a04:	f000 fcaa 	bl	801335c <__sinit>
 8012a08:	4b89      	ldr	r3, [pc, #548]	; (8012c30 <_vfiprintf_r+0x240>)
 8012a0a:	429d      	cmp	r5, r3
 8012a0c:	d11b      	bne.n	8012a46 <_vfiprintf_r+0x56>
 8012a0e:	6875      	ldr	r5, [r6, #4]
 8012a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a12:	07d9      	lsls	r1, r3, #31
 8012a14:	d405      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a16:	89ab      	ldrh	r3, [r5, #12]
 8012a18:	059a      	lsls	r2, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a1e:	f000 fd3b 	bl	8013498 <__retarget_lock_acquire_recursive>
 8012a22:	89ab      	ldrh	r3, [r5, #12]
 8012a24:	071b      	lsls	r3, r3, #28
 8012a26:	d501      	bpl.n	8012a2c <_vfiprintf_r+0x3c>
 8012a28:	692b      	ldr	r3, [r5, #16]
 8012a2a:	b9eb      	cbnz	r3, 8012a68 <_vfiprintf_r+0x78>
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f000 fb04 	bl	801303c <__swsetup_r>
 8012a34:	b1c0      	cbz	r0, 8012a68 <_vfiprintf_r+0x78>
 8012a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a38:	07dc      	lsls	r4, r3, #31
 8012a3a:	d50e      	bpl.n	8012a5a <_vfiprintf_r+0x6a>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	b01d      	add	sp, #116	; 0x74
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	4b7b      	ldr	r3, [pc, #492]	; (8012c34 <_vfiprintf_r+0x244>)
 8012a48:	429d      	cmp	r5, r3
 8012a4a:	d101      	bne.n	8012a50 <_vfiprintf_r+0x60>
 8012a4c:	68b5      	ldr	r5, [r6, #8]
 8012a4e:	e7df      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a50:	4b79      	ldr	r3, [pc, #484]	; (8012c38 <_vfiprintf_r+0x248>)
 8012a52:	429d      	cmp	r5, r3
 8012a54:	bf08      	it	eq
 8012a56:	68f5      	ldreq	r5, [r6, #12]
 8012a58:	e7da      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	0598      	lsls	r0, r3, #22
 8012a5e:	d4ed      	bmi.n	8012a3c <_vfiprintf_r+0x4c>
 8012a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a62:	f000 fd1a 	bl	801349a <__retarget_lock_release_recursive>
 8012a66:	e7e9      	b.n	8012a3c <_vfiprintf_r+0x4c>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a6c:	2320      	movs	r3, #32
 8012a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a76:	2330      	movs	r3, #48	; 0x30
 8012a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c3c <_vfiprintf_r+0x24c>
 8012a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a80:	f04f 0901 	mov.w	r9, #1
 8012a84:	4623      	mov	r3, r4
 8012a86:	469a      	mov	sl, r3
 8012a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a8c:	b10a      	cbz	r2, 8012a92 <_vfiprintf_r+0xa2>
 8012a8e:	2a25      	cmp	r2, #37	; 0x25
 8012a90:	d1f9      	bne.n	8012a86 <_vfiprintf_r+0x96>
 8012a92:	ebba 0b04 	subs.w	fp, sl, r4
 8012a96:	d00b      	beq.n	8012ab0 <_vfiprintf_r+0xc0>
 8012a98:	465b      	mov	r3, fp
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	4629      	mov	r1, r5
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff ff93 	bl	80129ca <__sfputs_r>
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	f000 80aa 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aac:	445a      	add	r2, fp
 8012aae:	9209      	str	r2, [sp, #36]	; 0x24
 8012ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 80a2 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ac4:	f10a 0a01 	add.w	sl, sl, #1
 8012ac8:	9304      	str	r3, [sp, #16]
 8012aca:	9307      	str	r3, [sp, #28]
 8012acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8012ad2:	4654      	mov	r4, sl
 8012ad4:	2205      	movs	r2, #5
 8012ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ada:	4858      	ldr	r0, [pc, #352]	; (8012c3c <_vfiprintf_r+0x24c>)
 8012adc:	f7ed fb80 	bl	80001e0 <memchr>
 8012ae0:	9a04      	ldr	r2, [sp, #16]
 8012ae2:	b9d8      	cbnz	r0, 8012b1c <_vfiprintf_r+0x12c>
 8012ae4:	06d1      	lsls	r1, r2, #27
 8012ae6:	bf44      	itt	mi
 8012ae8:	2320      	movmi	r3, #32
 8012aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aee:	0713      	lsls	r3, r2, #28
 8012af0:	bf44      	itt	mi
 8012af2:	232b      	movmi	r3, #43	; 0x2b
 8012af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012af8:	f89a 3000 	ldrb.w	r3, [sl]
 8012afc:	2b2a      	cmp	r3, #42	; 0x2a
 8012afe:	d015      	beq.n	8012b2c <_vfiprintf_r+0x13c>
 8012b00:	9a07      	ldr	r2, [sp, #28]
 8012b02:	4654      	mov	r4, sl
 8012b04:	2000      	movs	r0, #0
 8012b06:	f04f 0c0a 	mov.w	ip, #10
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b10:	3b30      	subs	r3, #48	; 0x30
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	d94e      	bls.n	8012bb4 <_vfiprintf_r+0x1c4>
 8012b16:	b1b0      	cbz	r0, 8012b46 <_vfiprintf_r+0x156>
 8012b18:	9207      	str	r2, [sp, #28]
 8012b1a:	e014      	b.n	8012b46 <_vfiprintf_r+0x156>
 8012b1c:	eba0 0308 	sub.w	r3, r0, r8
 8012b20:	fa09 f303 	lsl.w	r3, r9, r3
 8012b24:	4313      	orrs	r3, r2
 8012b26:	9304      	str	r3, [sp, #16]
 8012b28:	46a2      	mov	sl, r4
 8012b2a:	e7d2      	b.n	8012ad2 <_vfiprintf_r+0xe2>
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	1d19      	adds	r1, r3, #4
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	9103      	str	r1, [sp, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	bfbb      	ittet	lt
 8012b38:	425b      	neglt	r3, r3
 8012b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b3e:	9307      	strge	r3, [sp, #28]
 8012b40:	9307      	strlt	r3, [sp, #28]
 8012b42:	bfb8      	it	lt
 8012b44:	9204      	strlt	r2, [sp, #16]
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	d10c      	bne.n	8012b66 <_vfiprintf_r+0x176>
 8012b4c:	7863      	ldrb	r3, [r4, #1]
 8012b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b50:	d135      	bne.n	8012bbe <_vfiprintf_r+0x1ce>
 8012b52:	9b03      	ldr	r3, [sp, #12]
 8012b54:	1d1a      	adds	r2, r3, #4
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	9203      	str	r2, [sp, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	bfb8      	it	lt
 8012b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b62:	3402      	adds	r4, #2
 8012b64:	9305      	str	r3, [sp, #20]
 8012b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c4c <_vfiprintf_r+0x25c>
 8012b6a:	7821      	ldrb	r1, [r4, #0]
 8012b6c:	2203      	movs	r2, #3
 8012b6e:	4650      	mov	r0, sl
 8012b70:	f7ed fb36 	bl	80001e0 <memchr>
 8012b74:	b140      	cbz	r0, 8012b88 <_vfiprintf_r+0x198>
 8012b76:	2340      	movs	r3, #64	; 0x40
 8012b78:	eba0 000a 	sub.w	r0, r0, sl
 8012b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8012b80:	9b04      	ldr	r3, [sp, #16]
 8012b82:	4303      	orrs	r3, r0
 8012b84:	3401      	adds	r4, #1
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b8c:	482c      	ldr	r0, [pc, #176]	; (8012c40 <_vfiprintf_r+0x250>)
 8012b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b92:	2206      	movs	r2, #6
 8012b94:	f7ed fb24 	bl	80001e0 <memchr>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d03f      	beq.n	8012c1c <_vfiprintf_r+0x22c>
 8012b9c:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <_vfiprintf_r+0x254>)
 8012b9e:	bb1b      	cbnz	r3, 8012be8 <_vfiprintf_r+0x1f8>
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	3307      	adds	r3, #7
 8012ba4:	f023 0307 	bic.w	r3, r3, #7
 8012ba8:	3308      	adds	r3, #8
 8012baa:	9303      	str	r3, [sp, #12]
 8012bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bae:	443b      	add	r3, r7
 8012bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8012bb2:	e767      	b.n	8012a84 <_vfiprintf_r+0x94>
 8012bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bb8:	460c      	mov	r4, r1
 8012bba:	2001      	movs	r0, #1
 8012bbc:	e7a5      	b.n	8012b0a <_vfiprintf_r+0x11a>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	3401      	adds	r4, #1
 8012bc2:	9305      	str	r3, [sp, #20]
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	f04f 0c0a 	mov.w	ip, #10
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bd0:	3a30      	subs	r2, #48	; 0x30
 8012bd2:	2a09      	cmp	r2, #9
 8012bd4:	d903      	bls.n	8012bde <_vfiprintf_r+0x1ee>
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d0c5      	beq.n	8012b66 <_vfiprintf_r+0x176>
 8012bda:	9105      	str	r1, [sp, #20]
 8012bdc:	e7c3      	b.n	8012b66 <_vfiprintf_r+0x176>
 8012bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8012be2:	4604      	mov	r4, r0
 8012be4:	2301      	movs	r3, #1
 8012be6:	e7f0      	b.n	8012bca <_vfiprintf_r+0x1da>
 8012be8:	ab03      	add	r3, sp, #12
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	462a      	mov	r2, r5
 8012bee:	4b16      	ldr	r3, [pc, #88]	; (8012c48 <_vfiprintf_r+0x258>)
 8012bf0:	a904      	add	r1, sp, #16
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	4607      	mov	r7, r0
 8012bfa:	1c78      	adds	r0, r7, #1
 8012bfc:	d1d6      	bne.n	8012bac <_vfiprintf_r+0x1bc>
 8012bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c00:	07d9      	lsls	r1, r3, #31
 8012c02:	d405      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c04:	89ab      	ldrh	r3, [r5, #12]
 8012c06:	059a      	lsls	r2, r3, #22
 8012c08:	d402      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c0c:	f000 fc45 	bl	801349a <__retarget_lock_release_recursive>
 8012c10:	89ab      	ldrh	r3, [r5, #12]
 8012c12:	065b      	lsls	r3, r3, #25
 8012c14:	f53f af12 	bmi.w	8012a3c <_vfiprintf_r+0x4c>
 8012c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c1a:	e711      	b.n	8012a40 <_vfiprintf_r+0x50>
 8012c1c:	ab03      	add	r3, sp, #12
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	462a      	mov	r2, r5
 8012c22:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <_vfiprintf_r+0x258>)
 8012c24:	a904      	add	r1, sp, #16
 8012c26:	4630      	mov	r0, r6
 8012c28:	f000 f880 	bl	8012d2c <_printf_i>
 8012c2c:	e7e4      	b.n	8012bf8 <_vfiprintf_r+0x208>
 8012c2e:	bf00      	nop
 8012c30:	08015c88 	.word	0x08015c88
 8012c34:	08015ca8 	.word	0x08015ca8
 8012c38:	08015c68 	.word	0x08015c68
 8012c3c:	08015c34 	.word	0x08015c34
 8012c40:	08015c3e 	.word	0x08015c3e
 8012c44:	00000000 	.word	0x00000000
 8012c48:	080129cb 	.word	0x080129cb
 8012c4c:	08015c3a 	.word	0x08015c3a

08012c50 <_printf_common>:
 8012c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c54:	4616      	mov	r6, r2
 8012c56:	4699      	mov	r9, r3
 8012c58:	688a      	ldr	r2, [r1, #8]
 8012c5a:	690b      	ldr	r3, [r1, #16]
 8012c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c60:	4293      	cmp	r3, r2
 8012c62:	bfb8      	it	lt
 8012c64:	4613      	movlt	r3, r2
 8012c66:	6033      	str	r3, [r6, #0]
 8012c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	460c      	mov	r4, r1
 8012c70:	b10a      	cbz	r2, 8012c76 <_printf_common+0x26>
 8012c72:	3301      	adds	r3, #1
 8012c74:	6033      	str	r3, [r6, #0]
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	0699      	lsls	r1, r3, #26
 8012c7a:	bf42      	ittt	mi
 8012c7c:	6833      	ldrmi	r3, [r6, #0]
 8012c7e:	3302      	addmi	r3, #2
 8012c80:	6033      	strmi	r3, [r6, #0]
 8012c82:	6825      	ldr	r5, [r4, #0]
 8012c84:	f015 0506 	ands.w	r5, r5, #6
 8012c88:	d106      	bne.n	8012c98 <_printf_common+0x48>
 8012c8a:	f104 0a19 	add.w	sl, r4, #25
 8012c8e:	68e3      	ldr	r3, [r4, #12]
 8012c90:	6832      	ldr	r2, [r6, #0]
 8012c92:	1a9b      	subs	r3, r3, r2
 8012c94:	42ab      	cmp	r3, r5
 8012c96:	dc26      	bgt.n	8012ce6 <_printf_common+0x96>
 8012c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c9c:	1e13      	subs	r3, r2, #0
 8012c9e:	6822      	ldr	r2, [r4, #0]
 8012ca0:	bf18      	it	ne
 8012ca2:	2301      	movne	r3, #1
 8012ca4:	0692      	lsls	r2, r2, #26
 8012ca6:	d42b      	bmi.n	8012d00 <_printf_common+0xb0>
 8012ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cac:	4649      	mov	r1, r9
 8012cae:	4638      	mov	r0, r7
 8012cb0:	47c0      	blx	r8
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	d01e      	beq.n	8012cf4 <_printf_common+0xa4>
 8012cb6:	6823      	ldr	r3, [r4, #0]
 8012cb8:	68e5      	ldr	r5, [r4, #12]
 8012cba:	6832      	ldr	r2, [r6, #0]
 8012cbc:	f003 0306 	and.w	r3, r3, #6
 8012cc0:	2b04      	cmp	r3, #4
 8012cc2:	bf08      	it	eq
 8012cc4:	1aad      	subeq	r5, r5, r2
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	6922      	ldr	r2, [r4, #16]
 8012cca:	bf0c      	ite	eq
 8012ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cd0:	2500      	movne	r5, #0
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	bfc4      	itt	gt
 8012cd6:	1a9b      	subgt	r3, r3, r2
 8012cd8:	18ed      	addgt	r5, r5, r3
 8012cda:	2600      	movs	r6, #0
 8012cdc:	341a      	adds	r4, #26
 8012cde:	42b5      	cmp	r5, r6
 8012ce0:	d11a      	bne.n	8012d18 <_printf_common+0xc8>
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	e008      	b.n	8012cf8 <_printf_common+0xa8>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	4652      	mov	r2, sl
 8012cea:	4649      	mov	r1, r9
 8012cec:	4638      	mov	r0, r7
 8012cee:	47c0      	blx	r8
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d103      	bne.n	8012cfc <_printf_common+0xac>
 8012cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfc:	3501      	adds	r5, #1
 8012cfe:	e7c6      	b.n	8012c8e <_printf_common+0x3e>
 8012d00:	18e1      	adds	r1, r4, r3
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	2030      	movs	r0, #48	; 0x30
 8012d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d0a:	4422      	add	r2, r4
 8012d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d14:	3302      	adds	r3, #2
 8012d16:	e7c7      	b.n	8012ca8 <_printf_common+0x58>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	4622      	mov	r2, r4
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	4638      	mov	r0, r7
 8012d20:	47c0      	blx	r8
 8012d22:	3001      	adds	r0, #1
 8012d24:	d0e6      	beq.n	8012cf4 <_printf_common+0xa4>
 8012d26:	3601      	adds	r6, #1
 8012d28:	e7d9      	b.n	8012cde <_printf_common+0x8e>
	...

08012d2c <_printf_i>:
 8012d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d30:	7e0f      	ldrb	r7, [r1, #24]
 8012d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d34:	2f78      	cmp	r7, #120	; 0x78
 8012d36:	4691      	mov	r9, r2
 8012d38:	4680      	mov	r8, r0
 8012d3a:	460c      	mov	r4, r1
 8012d3c:	469a      	mov	sl, r3
 8012d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d42:	d807      	bhi.n	8012d54 <_printf_i+0x28>
 8012d44:	2f62      	cmp	r7, #98	; 0x62
 8012d46:	d80a      	bhi.n	8012d5e <_printf_i+0x32>
 8012d48:	2f00      	cmp	r7, #0
 8012d4a:	f000 80d8 	beq.w	8012efe <_printf_i+0x1d2>
 8012d4e:	2f58      	cmp	r7, #88	; 0x58
 8012d50:	f000 80a3 	beq.w	8012e9a <_printf_i+0x16e>
 8012d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d5c:	e03a      	b.n	8012dd4 <_printf_i+0xa8>
 8012d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d62:	2b15      	cmp	r3, #21
 8012d64:	d8f6      	bhi.n	8012d54 <_printf_i+0x28>
 8012d66:	a101      	add	r1, pc, #4	; (adr r1, 8012d6c <_printf_i+0x40>)
 8012d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d6c:	08012dc5 	.word	0x08012dc5
 8012d70:	08012dd9 	.word	0x08012dd9
 8012d74:	08012d55 	.word	0x08012d55
 8012d78:	08012d55 	.word	0x08012d55
 8012d7c:	08012d55 	.word	0x08012d55
 8012d80:	08012d55 	.word	0x08012d55
 8012d84:	08012dd9 	.word	0x08012dd9
 8012d88:	08012d55 	.word	0x08012d55
 8012d8c:	08012d55 	.word	0x08012d55
 8012d90:	08012d55 	.word	0x08012d55
 8012d94:	08012d55 	.word	0x08012d55
 8012d98:	08012ee5 	.word	0x08012ee5
 8012d9c:	08012e09 	.word	0x08012e09
 8012da0:	08012ec7 	.word	0x08012ec7
 8012da4:	08012d55 	.word	0x08012d55
 8012da8:	08012d55 	.word	0x08012d55
 8012dac:	08012f07 	.word	0x08012f07
 8012db0:	08012d55 	.word	0x08012d55
 8012db4:	08012e09 	.word	0x08012e09
 8012db8:	08012d55 	.word	0x08012d55
 8012dbc:	08012d55 	.word	0x08012d55
 8012dc0:	08012ecf 	.word	0x08012ecf
 8012dc4:	682b      	ldr	r3, [r5, #0]
 8012dc6:	1d1a      	adds	r2, r3, #4
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	602a      	str	r2, [r5, #0]
 8012dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	e0a3      	b.n	8012f20 <_printf_i+0x1f4>
 8012dd8:	6820      	ldr	r0, [r4, #0]
 8012dda:	6829      	ldr	r1, [r5, #0]
 8012ddc:	0606      	lsls	r6, r0, #24
 8012dde:	f101 0304 	add.w	r3, r1, #4
 8012de2:	d50a      	bpl.n	8012dfa <_printf_i+0xce>
 8012de4:	680e      	ldr	r6, [r1, #0]
 8012de6:	602b      	str	r3, [r5, #0]
 8012de8:	2e00      	cmp	r6, #0
 8012dea:	da03      	bge.n	8012df4 <_printf_i+0xc8>
 8012dec:	232d      	movs	r3, #45	; 0x2d
 8012dee:	4276      	negs	r6, r6
 8012df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df4:	485e      	ldr	r0, [pc, #376]	; (8012f70 <_printf_i+0x244>)
 8012df6:	230a      	movs	r3, #10
 8012df8:	e019      	b.n	8012e2e <_printf_i+0x102>
 8012dfa:	680e      	ldr	r6, [r1, #0]
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e02:	bf18      	it	ne
 8012e04:	b236      	sxthne	r6, r6
 8012e06:	e7ef      	b.n	8012de8 <_printf_i+0xbc>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	6820      	ldr	r0, [r4, #0]
 8012e0c:	1d19      	adds	r1, r3, #4
 8012e0e:	6029      	str	r1, [r5, #0]
 8012e10:	0601      	lsls	r1, r0, #24
 8012e12:	d501      	bpl.n	8012e18 <_printf_i+0xec>
 8012e14:	681e      	ldr	r6, [r3, #0]
 8012e16:	e002      	b.n	8012e1e <_printf_i+0xf2>
 8012e18:	0646      	lsls	r6, r0, #25
 8012e1a:	d5fb      	bpl.n	8012e14 <_printf_i+0xe8>
 8012e1c:	881e      	ldrh	r6, [r3, #0]
 8012e1e:	4854      	ldr	r0, [pc, #336]	; (8012f70 <_printf_i+0x244>)
 8012e20:	2f6f      	cmp	r7, #111	; 0x6f
 8012e22:	bf0c      	ite	eq
 8012e24:	2308      	moveq	r3, #8
 8012e26:	230a      	movne	r3, #10
 8012e28:	2100      	movs	r1, #0
 8012e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e2e:	6865      	ldr	r5, [r4, #4]
 8012e30:	60a5      	str	r5, [r4, #8]
 8012e32:	2d00      	cmp	r5, #0
 8012e34:	bfa2      	ittt	ge
 8012e36:	6821      	ldrge	r1, [r4, #0]
 8012e38:	f021 0104 	bicge.w	r1, r1, #4
 8012e3c:	6021      	strge	r1, [r4, #0]
 8012e3e:	b90e      	cbnz	r6, 8012e44 <_printf_i+0x118>
 8012e40:	2d00      	cmp	r5, #0
 8012e42:	d04d      	beq.n	8012ee0 <_printf_i+0x1b4>
 8012e44:	4615      	mov	r5, r2
 8012e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8012e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8012e4e:	5dc7      	ldrb	r7, [r0, r7]
 8012e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e54:	4637      	mov	r7, r6
 8012e56:	42bb      	cmp	r3, r7
 8012e58:	460e      	mov	r6, r1
 8012e5a:	d9f4      	bls.n	8012e46 <_printf_i+0x11a>
 8012e5c:	2b08      	cmp	r3, #8
 8012e5e:	d10b      	bne.n	8012e78 <_printf_i+0x14c>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	07de      	lsls	r6, r3, #31
 8012e64:	d508      	bpl.n	8012e78 <_printf_i+0x14c>
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	6861      	ldr	r1, [r4, #4]
 8012e6a:	4299      	cmp	r1, r3
 8012e6c:	bfde      	ittt	le
 8012e6e:	2330      	movle	r3, #48	; 0x30
 8012e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e78:	1b52      	subs	r2, r2, r5
 8012e7a:	6122      	str	r2, [r4, #16]
 8012e7c:	f8cd a000 	str.w	sl, [sp]
 8012e80:	464b      	mov	r3, r9
 8012e82:	aa03      	add	r2, sp, #12
 8012e84:	4621      	mov	r1, r4
 8012e86:	4640      	mov	r0, r8
 8012e88:	f7ff fee2 	bl	8012c50 <_printf_common>
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	d14c      	bne.n	8012f2a <_printf_i+0x1fe>
 8012e90:	f04f 30ff 	mov.w	r0, #4294967295
 8012e94:	b004      	add	sp, #16
 8012e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e9a:	4835      	ldr	r0, [pc, #212]	; (8012f70 <_printf_i+0x244>)
 8012e9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ea0:	6829      	ldr	r1, [r5, #0]
 8012ea2:	6823      	ldr	r3, [r4, #0]
 8012ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ea8:	6029      	str	r1, [r5, #0]
 8012eaa:	061d      	lsls	r5, r3, #24
 8012eac:	d514      	bpl.n	8012ed8 <_printf_i+0x1ac>
 8012eae:	07df      	lsls	r7, r3, #31
 8012eb0:	bf44      	itt	mi
 8012eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8012eb6:	6023      	strmi	r3, [r4, #0]
 8012eb8:	b91e      	cbnz	r6, 8012ec2 <_printf_i+0x196>
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	f023 0320 	bic.w	r3, r3, #32
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	2310      	movs	r3, #16
 8012ec4:	e7b0      	b.n	8012e28 <_printf_i+0xfc>
 8012ec6:	6823      	ldr	r3, [r4, #0]
 8012ec8:	f043 0320 	orr.w	r3, r3, #32
 8012ecc:	6023      	str	r3, [r4, #0]
 8012ece:	2378      	movs	r3, #120	; 0x78
 8012ed0:	4828      	ldr	r0, [pc, #160]	; (8012f74 <_printf_i+0x248>)
 8012ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ed6:	e7e3      	b.n	8012ea0 <_printf_i+0x174>
 8012ed8:	0659      	lsls	r1, r3, #25
 8012eda:	bf48      	it	mi
 8012edc:	b2b6      	uxthmi	r6, r6
 8012ede:	e7e6      	b.n	8012eae <_printf_i+0x182>
 8012ee0:	4615      	mov	r5, r2
 8012ee2:	e7bb      	b.n	8012e5c <_printf_i+0x130>
 8012ee4:	682b      	ldr	r3, [r5, #0]
 8012ee6:	6826      	ldr	r6, [r4, #0]
 8012ee8:	6961      	ldr	r1, [r4, #20]
 8012eea:	1d18      	adds	r0, r3, #4
 8012eec:	6028      	str	r0, [r5, #0]
 8012eee:	0635      	lsls	r5, r6, #24
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	d501      	bpl.n	8012ef8 <_printf_i+0x1cc>
 8012ef4:	6019      	str	r1, [r3, #0]
 8012ef6:	e002      	b.n	8012efe <_printf_i+0x1d2>
 8012ef8:	0670      	lsls	r0, r6, #25
 8012efa:	d5fb      	bpl.n	8012ef4 <_printf_i+0x1c8>
 8012efc:	8019      	strh	r1, [r3, #0]
 8012efe:	2300      	movs	r3, #0
 8012f00:	6123      	str	r3, [r4, #16]
 8012f02:	4615      	mov	r5, r2
 8012f04:	e7ba      	b.n	8012e7c <_printf_i+0x150>
 8012f06:	682b      	ldr	r3, [r5, #0]
 8012f08:	1d1a      	adds	r2, r3, #4
 8012f0a:	602a      	str	r2, [r5, #0]
 8012f0c:	681d      	ldr	r5, [r3, #0]
 8012f0e:	6862      	ldr	r2, [r4, #4]
 8012f10:	2100      	movs	r1, #0
 8012f12:	4628      	mov	r0, r5
 8012f14:	f7ed f964 	bl	80001e0 <memchr>
 8012f18:	b108      	cbz	r0, 8012f1e <_printf_i+0x1f2>
 8012f1a:	1b40      	subs	r0, r0, r5
 8012f1c:	6060      	str	r0, [r4, #4]
 8012f1e:	6863      	ldr	r3, [r4, #4]
 8012f20:	6123      	str	r3, [r4, #16]
 8012f22:	2300      	movs	r3, #0
 8012f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f28:	e7a8      	b.n	8012e7c <_printf_i+0x150>
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	462a      	mov	r2, r5
 8012f2e:	4649      	mov	r1, r9
 8012f30:	4640      	mov	r0, r8
 8012f32:	47d0      	blx	sl
 8012f34:	3001      	adds	r0, #1
 8012f36:	d0ab      	beq.n	8012e90 <_printf_i+0x164>
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	079b      	lsls	r3, r3, #30
 8012f3c:	d413      	bmi.n	8012f66 <_printf_i+0x23a>
 8012f3e:	68e0      	ldr	r0, [r4, #12]
 8012f40:	9b03      	ldr	r3, [sp, #12]
 8012f42:	4298      	cmp	r0, r3
 8012f44:	bfb8      	it	lt
 8012f46:	4618      	movlt	r0, r3
 8012f48:	e7a4      	b.n	8012e94 <_printf_i+0x168>
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	4632      	mov	r2, r6
 8012f4e:	4649      	mov	r1, r9
 8012f50:	4640      	mov	r0, r8
 8012f52:	47d0      	blx	sl
 8012f54:	3001      	adds	r0, #1
 8012f56:	d09b      	beq.n	8012e90 <_printf_i+0x164>
 8012f58:	3501      	adds	r5, #1
 8012f5a:	68e3      	ldr	r3, [r4, #12]
 8012f5c:	9903      	ldr	r1, [sp, #12]
 8012f5e:	1a5b      	subs	r3, r3, r1
 8012f60:	42ab      	cmp	r3, r5
 8012f62:	dcf2      	bgt.n	8012f4a <_printf_i+0x21e>
 8012f64:	e7eb      	b.n	8012f3e <_printf_i+0x212>
 8012f66:	2500      	movs	r5, #0
 8012f68:	f104 0619 	add.w	r6, r4, #25
 8012f6c:	e7f5      	b.n	8012f5a <_printf_i+0x22e>
 8012f6e:	bf00      	nop
 8012f70:	08015c45 	.word	0x08015c45
 8012f74:	08015c56 	.word	0x08015c56

08012f78 <_sbrk_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d06      	ldr	r5, [pc, #24]	; (8012f94 <_sbrk_r+0x1c>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	602b      	str	r3, [r5, #0]
 8012f84:	f000 fc5c 	bl	8013840 <_sbrk>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_sbrk_r+0x1a>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_sbrk_r+0x1a>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	2000561c 	.word	0x2000561c

08012f98 <__swbuf_r>:
 8012f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f9a:	460e      	mov	r6, r1
 8012f9c:	4614      	mov	r4, r2
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	b118      	cbz	r0, 8012faa <__swbuf_r+0x12>
 8012fa2:	6983      	ldr	r3, [r0, #24]
 8012fa4:	b90b      	cbnz	r3, 8012faa <__swbuf_r+0x12>
 8012fa6:	f000 f9d9 	bl	801335c <__sinit>
 8012faa:	4b21      	ldr	r3, [pc, #132]	; (8013030 <__swbuf_r+0x98>)
 8012fac:	429c      	cmp	r4, r3
 8012fae:	d12b      	bne.n	8013008 <__swbuf_r+0x70>
 8012fb0:	686c      	ldr	r4, [r5, #4]
 8012fb2:	69a3      	ldr	r3, [r4, #24]
 8012fb4:	60a3      	str	r3, [r4, #8]
 8012fb6:	89a3      	ldrh	r3, [r4, #12]
 8012fb8:	071a      	lsls	r2, r3, #28
 8012fba:	d52f      	bpl.n	801301c <__swbuf_r+0x84>
 8012fbc:	6923      	ldr	r3, [r4, #16]
 8012fbe:	b36b      	cbz	r3, 801301c <__swbuf_r+0x84>
 8012fc0:	6923      	ldr	r3, [r4, #16]
 8012fc2:	6820      	ldr	r0, [r4, #0]
 8012fc4:	1ac0      	subs	r0, r0, r3
 8012fc6:	6963      	ldr	r3, [r4, #20]
 8012fc8:	b2f6      	uxtb	r6, r6
 8012fca:	4283      	cmp	r3, r0
 8012fcc:	4637      	mov	r7, r6
 8012fce:	dc04      	bgt.n	8012fda <__swbuf_r+0x42>
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	f000 f92e 	bl	8013234 <_fflush_r>
 8012fd8:	bb30      	cbnz	r0, 8013028 <__swbuf_r+0x90>
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	60a3      	str	r3, [r4, #8]
 8012fe0:	6823      	ldr	r3, [r4, #0]
 8012fe2:	1c5a      	adds	r2, r3, #1
 8012fe4:	6022      	str	r2, [r4, #0]
 8012fe6:	701e      	strb	r6, [r3, #0]
 8012fe8:	6963      	ldr	r3, [r4, #20]
 8012fea:	3001      	adds	r0, #1
 8012fec:	4283      	cmp	r3, r0
 8012fee:	d004      	beq.n	8012ffa <__swbuf_r+0x62>
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	07db      	lsls	r3, r3, #31
 8012ff4:	d506      	bpl.n	8013004 <__swbuf_r+0x6c>
 8012ff6:	2e0a      	cmp	r6, #10
 8012ff8:	d104      	bne.n	8013004 <__swbuf_r+0x6c>
 8012ffa:	4621      	mov	r1, r4
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f000 f919 	bl	8013234 <_fflush_r>
 8013002:	b988      	cbnz	r0, 8013028 <__swbuf_r+0x90>
 8013004:	4638      	mov	r0, r7
 8013006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013008:	4b0a      	ldr	r3, [pc, #40]	; (8013034 <__swbuf_r+0x9c>)
 801300a:	429c      	cmp	r4, r3
 801300c:	d101      	bne.n	8013012 <__swbuf_r+0x7a>
 801300e:	68ac      	ldr	r4, [r5, #8]
 8013010:	e7cf      	b.n	8012fb2 <__swbuf_r+0x1a>
 8013012:	4b09      	ldr	r3, [pc, #36]	; (8013038 <__swbuf_r+0xa0>)
 8013014:	429c      	cmp	r4, r3
 8013016:	bf08      	it	eq
 8013018:	68ec      	ldreq	r4, [r5, #12]
 801301a:	e7ca      	b.n	8012fb2 <__swbuf_r+0x1a>
 801301c:	4621      	mov	r1, r4
 801301e:	4628      	mov	r0, r5
 8013020:	f000 f80c 	bl	801303c <__swsetup_r>
 8013024:	2800      	cmp	r0, #0
 8013026:	d0cb      	beq.n	8012fc0 <__swbuf_r+0x28>
 8013028:	f04f 37ff 	mov.w	r7, #4294967295
 801302c:	e7ea      	b.n	8013004 <__swbuf_r+0x6c>
 801302e:	bf00      	nop
 8013030:	08015c88 	.word	0x08015c88
 8013034:	08015ca8 	.word	0x08015ca8
 8013038:	08015c68 	.word	0x08015c68

0801303c <__swsetup_r>:
 801303c:	4b32      	ldr	r3, [pc, #200]	; (8013108 <__swsetup_r+0xcc>)
 801303e:	b570      	push	{r4, r5, r6, lr}
 8013040:	681d      	ldr	r5, [r3, #0]
 8013042:	4606      	mov	r6, r0
 8013044:	460c      	mov	r4, r1
 8013046:	b125      	cbz	r5, 8013052 <__swsetup_r+0x16>
 8013048:	69ab      	ldr	r3, [r5, #24]
 801304a:	b913      	cbnz	r3, 8013052 <__swsetup_r+0x16>
 801304c:	4628      	mov	r0, r5
 801304e:	f000 f985 	bl	801335c <__sinit>
 8013052:	4b2e      	ldr	r3, [pc, #184]	; (801310c <__swsetup_r+0xd0>)
 8013054:	429c      	cmp	r4, r3
 8013056:	d10f      	bne.n	8013078 <__swsetup_r+0x3c>
 8013058:	686c      	ldr	r4, [r5, #4]
 801305a:	89a3      	ldrh	r3, [r4, #12]
 801305c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013060:	0719      	lsls	r1, r3, #28
 8013062:	d42c      	bmi.n	80130be <__swsetup_r+0x82>
 8013064:	06dd      	lsls	r5, r3, #27
 8013066:	d411      	bmi.n	801308c <__swsetup_r+0x50>
 8013068:	2309      	movs	r3, #9
 801306a:	6033      	str	r3, [r6, #0]
 801306c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013070:	81a3      	strh	r3, [r4, #12]
 8013072:	f04f 30ff 	mov.w	r0, #4294967295
 8013076:	e03e      	b.n	80130f6 <__swsetup_r+0xba>
 8013078:	4b25      	ldr	r3, [pc, #148]	; (8013110 <__swsetup_r+0xd4>)
 801307a:	429c      	cmp	r4, r3
 801307c:	d101      	bne.n	8013082 <__swsetup_r+0x46>
 801307e:	68ac      	ldr	r4, [r5, #8]
 8013080:	e7eb      	b.n	801305a <__swsetup_r+0x1e>
 8013082:	4b24      	ldr	r3, [pc, #144]	; (8013114 <__swsetup_r+0xd8>)
 8013084:	429c      	cmp	r4, r3
 8013086:	bf08      	it	eq
 8013088:	68ec      	ldreq	r4, [r5, #12]
 801308a:	e7e6      	b.n	801305a <__swsetup_r+0x1e>
 801308c:	0758      	lsls	r0, r3, #29
 801308e:	d512      	bpl.n	80130b6 <__swsetup_r+0x7a>
 8013090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013092:	b141      	cbz	r1, 80130a6 <__swsetup_r+0x6a>
 8013094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013098:	4299      	cmp	r1, r3
 801309a:	d002      	beq.n	80130a2 <__swsetup_r+0x66>
 801309c:	4630      	mov	r0, r6
 801309e:	f7ff fa41 	bl	8012524 <_free_r>
 80130a2:	2300      	movs	r3, #0
 80130a4:	6363      	str	r3, [r4, #52]	; 0x34
 80130a6:	89a3      	ldrh	r3, [r4, #12]
 80130a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130ac:	81a3      	strh	r3, [r4, #12]
 80130ae:	2300      	movs	r3, #0
 80130b0:	6063      	str	r3, [r4, #4]
 80130b2:	6923      	ldr	r3, [r4, #16]
 80130b4:	6023      	str	r3, [r4, #0]
 80130b6:	89a3      	ldrh	r3, [r4, #12]
 80130b8:	f043 0308 	orr.w	r3, r3, #8
 80130bc:	81a3      	strh	r3, [r4, #12]
 80130be:	6923      	ldr	r3, [r4, #16]
 80130c0:	b94b      	cbnz	r3, 80130d6 <__swsetup_r+0x9a>
 80130c2:	89a3      	ldrh	r3, [r4, #12]
 80130c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130cc:	d003      	beq.n	80130d6 <__swsetup_r+0x9a>
 80130ce:	4621      	mov	r1, r4
 80130d0:	4630      	mov	r0, r6
 80130d2:	f000 fa09 	bl	80134e8 <__smakebuf_r>
 80130d6:	89a0      	ldrh	r0, [r4, #12]
 80130d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130dc:	f010 0301 	ands.w	r3, r0, #1
 80130e0:	d00a      	beq.n	80130f8 <__swsetup_r+0xbc>
 80130e2:	2300      	movs	r3, #0
 80130e4:	60a3      	str	r3, [r4, #8]
 80130e6:	6963      	ldr	r3, [r4, #20]
 80130e8:	425b      	negs	r3, r3
 80130ea:	61a3      	str	r3, [r4, #24]
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	b943      	cbnz	r3, 8013102 <__swsetup_r+0xc6>
 80130f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80130f4:	d1ba      	bne.n	801306c <__swsetup_r+0x30>
 80130f6:	bd70      	pop	{r4, r5, r6, pc}
 80130f8:	0781      	lsls	r1, r0, #30
 80130fa:	bf58      	it	pl
 80130fc:	6963      	ldrpl	r3, [r4, #20]
 80130fe:	60a3      	str	r3, [r4, #8]
 8013100:	e7f4      	b.n	80130ec <__swsetup_r+0xb0>
 8013102:	2000      	movs	r0, #0
 8013104:	e7f7      	b.n	80130f6 <__swsetup_r+0xba>
 8013106:	bf00      	nop
 8013108:	20000128 	.word	0x20000128
 801310c:	08015c88 	.word	0x08015c88
 8013110:	08015ca8 	.word	0x08015ca8
 8013114:	08015c68 	.word	0x08015c68

08013118 <abort>:
 8013118:	b508      	push	{r3, lr}
 801311a:	2006      	movs	r0, #6
 801311c:	f000 fa88 	bl	8013630 <raise>
 8013120:	2001      	movs	r0, #1
 8013122:	f000 fba3 	bl	801386c <_exit>
	...

08013128 <__sflush_r>:
 8013128:	898a      	ldrh	r2, [r1, #12]
 801312a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801312e:	4605      	mov	r5, r0
 8013130:	0710      	lsls	r0, r2, #28
 8013132:	460c      	mov	r4, r1
 8013134:	d458      	bmi.n	80131e8 <__sflush_r+0xc0>
 8013136:	684b      	ldr	r3, [r1, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	dc05      	bgt.n	8013148 <__sflush_r+0x20>
 801313c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801313e:	2b00      	cmp	r3, #0
 8013140:	dc02      	bgt.n	8013148 <__sflush_r+0x20>
 8013142:	2000      	movs	r0, #0
 8013144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801314a:	2e00      	cmp	r6, #0
 801314c:	d0f9      	beq.n	8013142 <__sflush_r+0x1a>
 801314e:	2300      	movs	r3, #0
 8013150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013154:	682f      	ldr	r7, [r5, #0]
 8013156:	602b      	str	r3, [r5, #0]
 8013158:	d032      	beq.n	80131c0 <__sflush_r+0x98>
 801315a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	075a      	lsls	r2, r3, #29
 8013160:	d505      	bpl.n	801316e <__sflush_r+0x46>
 8013162:	6863      	ldr	r3, [r4, #4]
 8013164:	1ac0      	subs	r0, r0, r3
 8013166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013168:	b10b      	cbz	r3, 801316e <__sflush_r+0x46>
 801316a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801316c:	1ac0      	subs	r0, r0, r3
 801316e:	2300      	movs	r3, #0
 8013170:	4602      	mov	r2, r0
 8013172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013174:	6a21      	ldr	r1, [r4, #32]
 8013176:	4628      	mov	r0, r5
 8013178:	47b0      	blx	r6
 801317a:	1c43      	adds	r3, r0, #1
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	d106      	bne.n	801318e <__sflush_r+0x66>
 8013180:	6829      	ldr	r1, [r5, #0]
 8013182:	291d      	cmp	r1, #29
 8013184:	d82c      	bhi.n	80131e0 <__sflush_r+0xb8>
 8013186:	4a2a      	ldr	r2, [pc, #168]	; (8013230 <__sflush_r+0x108>)
 8013188:	40ca      	lsrs	r2, r1
 801318a:	07d6      	lsls	r6, r2, #31
 801318c:	d528      	bpl.n	80131e0 <__sflush_r+0xb8>
 801318e:	2200      	movs	r2, #0
 8013190:	6062      	str	r2, [r4, #4]
 8013192:	04d9      	lsls	r1, r3, #19
 8013194:	6922      	ldr	r2, [r4, #16]
 8013196:	6022      	str	r2, [r4, #0]
 8013198:	d504      	bpl.n	80131a4 <__sflush_r+0x7c>
 801319a:	1c42      	adds	r2, r0, #1
 801319c:	d101      	bne.n	80131a2 <__sflush_r+0x7a>
 801319e:	682b      	ldr	r3, [r5, #0]
 80131a0:	b903      	cbnz	r3, 80131a4 <__sflush_r+0x7c>
 80131a2:	6560      	str	r0, [r4, #84]	; 0x54
 80131a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131a6:	602f      	str	r7, [r5, #0]
 80131a8:	2900      	cmp	r1, #0
 80131aa:	d0ca      	beq.n	8013142 <__sflush_r+0x1a>
 80131ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131b0:	4299      	cmp	r1, r3
 80131b2:	d002      	beq.n	80131ba <__sflush_r+0x92>
 80131b4:	4628      	mov	r0, r5
 80131b6:	f7ff f9b5 	bl	8012524 <_free_r>
 80131ba:	2000      	movs	r0, #0
 80131bc:	6360      	str	r0, [r4, #52]	; 0x34
 80131be:	e7c1      	b.n	8013144 <__sflush_r+0x1c>
 80131c0:	6a21      	ldr	r1, [r4, #32]
 80131c2:	2301      	movs	r3, #1
 80131c4:	4628      	mov	r0, r5
 80131c6:	47b0      	blx	r6
 80131c8:	1c41      	adds	r1, r0, #1
 80131ca:	d1c7      	bne.n	801315c <__sflush_r+0x34>
 80131cc:	682b      	ldr	r3, [r5, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d0c4      	beq.n	801315c <__sflush_r+0x34>
 80131d2:	2b1d      	cmp	r3, #29
 80131d4:	d001      	beq.n	80131da <__sflush_r+0xb2>
 80131d6:	2b16      	cmp	r3, #22
 80131d8:	d101      	bne.n	80131de <__sflush_r+0xb6>
 80131da:	602f      	str	r7, [r5, #0]
 80131dc:	e7b1      	b.n	8013142 <__sflush_r+0x1a>
 80131de:	89a3      	ldrh	r3, [r4, #12]
 80131e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131e4:	81a3      	strh	r3, [r4, #12]
 80131e6:	e7ad      	b.n	8013144 <__sflush_r+0x1c>
 80131e8:	690f      	ldr	r7, [r1, #16]
 80131ea:	2f00      	cmp	r7, #0
 80131ec:	d0a9      	beq.n	8013142 <__sflush_r+0x1a>
 80131ee:	0793      	lsls	r3, r2, #30
 80131f0:	680e      	ldr	r6, [r1, #0]
 80131f2:	bf08      	it	eq
 80131f4:	694b      	ldreq	r3, [r1, #20]
 80131f6:	600f      	str	r7, [r1, #0]
 80131f8:	bf18      	it	ne
 80131fa:	2300      	movne	r3, #0
 80131fc:	eba6 0807 	sub.w	r8, r6, r7
 8013200:	608b      	str	r3, [r1, #8]
 8013202:	f1b8 0f00 	cmp.w	r8, #0
 8013206:	dd9c      	ble.n	8013142 <__sflush_r+0x1a>
 8013208:	6a21      	ldr	r1, [r4, #32]
 801320a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801320c:	4643      	mov	r3, r8
 801320e:	463a      	mov	r2, r7
 8013210:	4628      	mov	r0, r5
 8013212:	47b0      	blx	r6
 8013214:	2800      	cmp	r0, #0
 8013216:	dc06      	bgt.n	8013226 <__sflush_r+0xfe>
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801321e:	81a3      	strh	r3, [r4, #12]
 8013220:	f04f 30ff 	mov.w	r0, #4294967295
 8013224:	e78e      	b.n	8013144 <__sflush_r+0x1c>
 8013226:	4407      	add	r7, r0
 8013228:	eba8 0800 	sub.w	r8, r8, r0
 801322c:	e7e9      	b.n	8013202 <__sflush_r+0xda>
 801322e:	bf00      	nop
 8013230:	20400001 	.word	0x20400001

08013234 <_fflush_r>:
 8013234:	b538      	push	{r3, r4, r5, lr}
 8013236:	690b      	ldr	r3, [r1, #16]
 8013238:	4605      	mov	r5, r0
 801323a:	460c      	mov	r4, r1
 801323c:	b913      	cbnz	r3, 8013244 <_fflush_r+0x10>
 801323e:	2500      	movs	r5, #0
 8013240:	4628      	mov	r0, r5
 8013242:	bd38      	pop	{r3, r4, r5, pc}
 8013244:	b118      	cbz	r0, 801324e <_fflush_r+0x1a>
 8013246:	6983      	ldr	r3, [r0, #24]
 8013248:	b90b      	cbnz	r3, 801324e <_fflush_r+0x1a>
 801324a:	f000 f887 	bl	801335c <__sinit>
 801324e:	4b14      	ldr	r3, [pc, #80]	; (80132a0 <_fflush_r+0x6c>)
 8013250:	429c      	cmp	r4, r3
 8013252:	d11b      	bne.n	801328c <_fflush_r+0x58>
 8013254:	686c      	ldr	r4, [r5, #4]
 8013256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d0ef      	beq.n	801323e <_fflush_r+0xa>
 801325e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013260:	07d0      	lsls	r0, r2, #31
 8013262:	d404      	bmi.n	801326e <_fflush_r+0x3a>
 8013264:	0599      	lsls	r1, r3, #22
 8013266:	d402      	bmi.n	801326e <_fflush_r+0x3a>
 8013268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801326a:	f000 f915 	bl	8013498 <__retarget_lock_acquire_recursive>
 801326e:	4628      	mov	r0, r5
 8013270:	4621      	mov	r1, r4
 8013272:	f7ff ff59 	bl	8013128 <__sflush_r>
 8013276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013278:	07da      	lsls	r2, r3, #31
 801327a:	4605      	mov	r5, r0
 801327c:	d4e0      	bmi.n	8013240 <_fflush_r+0xc>
 801327e:	89a3      	ldrh	r3, [r4, #12]
 8013280:	059b      	lsls	r3, r3, #22
 8013282:	d4dd      	bmi.n	8013240 <_fflush_r+0xc>
 8013284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013286:	f000 f908 	bl	801349a <__retarget_lock_release_recursive>
 801328a:	e7d9      	b.n	8013240 <_fflush_r+0xc>
 801328c:	4b05      	ldr	r3, [pc, #20]	; (80132a4 <_fflush_r+0x70>)
 801328e:	429c      	cmp	r4, r3
 8013290:	d101      	bne.n	8013296 <_fflush_r+0x62>
 8013292:	68ac      	ldr	r4, [r5, #8]
 8013294:	e7df      	b.n	8013256 <_fflush_r+0x22>
 8013296:	4b04      	ldr	r3, [pc, #16]	; (80132a8 <_fflush_r+0x74>)
 8013298:	429c      	cmp	r4, r3
 801329a:	bf08      	it	eq
 801329c:	68ec      	ldreq	r4, [r5, #12]
 801329e:	e7da      	b.n	8013256 <_fflush_r+0x22>
 80132a0:	08015c88 	.word	0x08015c88
 80132a4:	08015ca8 	.word	0x08015ca8
 80132a8:	08015c68 	.word	0x08015c68

080132ac <std>:
 80132ac:	2300      	movs	r3, #0
 80132ae:	b510      	push	{r4, lr}
 80132b0:	4604      	mov	r4, r0
 80132b2:	e9c0 3300 	strd	r3, r3, [r0]
 80132b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132ba:	6083      	str	r3, [r0, #8]
 80132bc:	8181      	strh	r1, [r0, #12]
 80132be:	6643      	str	r3, [r0, #100]	; 0x64
 80132c0:	81c2      	strh	r2, [r0, #14]
 80132c2:	6183      	str	r3, [r0, #24]
 80132c4:	4619      	mov	r1, r3
 80132c6:	2208      	movs	r2, #8
 80132c8:	305c      	adds	r0, #92	; 0x5c
 80132ca:	f7ff f843 	bl	8012354 <memset>
 80132ce:	4b05      	ldr	r3, [pc, #20]	; (80132e4 <std+0x38>)
 80132d0:	6263      	str	r3, [r4, #36]	; 0x24
 80132d2:	4b05      	ldr	r3, [pc, #20]	; (80132e8 <std+0x3c>)
 80132d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <std+0x40>)
 80132d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132da:	4b05      	ldr	r3, [pc, #20]	; (80132f0 <std+0x44>)
 80132dc:	6224      	str	r4, [r4, #32]
 80132de:	6323      	str	r3, [r4, #48]	; 0x30
 80132e0:	bd10      	pop	{r4, pc}
 80132e2:	bf00      	nop
 80132e4:	08013669 	.word	0x08013669
 80132e8:	0801368b 	.word	0x0801368b
 80132ec:	080136c3 	.word	0x080136c3
 80132f0:	080136e7 	.word	0x080136e7

080132f4 <_cleanup_r>:
 80132f4:	4901      	ldr	r1, [pc, #4]	; (80132fc <_cleanup_r+0x8>)
 80132f6:	f000 b8af 	b.w	8013458 <_fwalk_reent>
 80132fa:	bf00      	nop
 80132fc:	08013235 	.word	0x08013235

08013300 <__sfmoreglue>:
 8013300:	b570      	push	{r4, r5, r6, lr}
 8013302:	2268      	movs	r2, #104	; 0x68
 8013304:	1e4d      	subs	r5, r1, #1
 8013306:	4355      	muls	r5, r2
 8013308:	460e      	mov	r6, r1
 801330a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801330e:	f7ff f975 	bl	80125fc <_malloc_r>
 8013312:	4604      	mov	r4, r0
 8013314:	b140      	cbz	r0, 8013328 <__sfmoreglue+0x28>
 8013316:	2100      	movs	r1, #0
 8013318:	e9c0 1600 	strd	r1, r6, [r0]
 801331c:	300c      	adds	r0, #12
 801331e:	60a0      	str	r0, [r4, #8]
 8013320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013324:	f7ff f816 	bl	8012354 <memset>
 8013328:	4620      	mov	r0, r4
 801332a:	bd70      	pop	{r4, r5, r6, pc}

0801332c <__sfp_lock_acquire>:
 801332c:	4801      	ldr	r0, [pc, #4]	; (8013334 <__sfp_lock_acquire+0x8>)
 801332e:	f000 b8b3 	b.w	8013498 <__retarget_lock_acquire_recursive>
 8013332:	bf00      	nop
 8013334:	20005619 	.word	0x20005619

08013338 <__sfp_lock_release>:
 8013338:	4801      	ldr	r0, [pc, #4]	; (8013340 <__sfp_lock_release+0x8>)
 801333a:	f000 b8ae 	b.w	801349a <__retarget_lock_release_recursive>
 801333e:	bf00      	nop
 8013340:	20005619 	.word	0x20005619

08013344 <__sinit_lock_acquire>:
 8013344:	4801      	ldr	r0, [pc, #4]	; (801334c <__sinit_lock_acquire+0x8>)
 8013346:	f000 b8a7 	b.w	8013498 <__retarget_lock_acquire_recursive>
 801334a:	bf00      	nop
 801334c:	2000561a 	.word	0x2000561a

08013350 <__sinit_lock_release>:
 8013350:	4801      	ldr	r0, [pc, #4]	; (8013358 <__sinit_lock_release+0x8>)
 8013352:	f000 b8a2 	b.w	801349a <__retarget_lock_release_recursive>
 8013356:	bf00      	nop
 8013358:	2000561a 	.word	0x2000561a

0801335c <__sinit>:
 801335c:	b510      	push	{r4, lr}
 801335e:	4604      	mov	r4, r0
 8013360:	f7ff fff0 	bl	8013344 <__sinit_lock_acquire>
 8013364:	69a3      	ldr	r3, [r4, #24]
 8013366:	b11b      	cbz	r3, 8013370 <__sinit+0x14>
 8013368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801336c:	f7ff bff0 	b.w	8013350 <__sinit_lock_release>
 8013370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013374:	6523      	str	r3, [r4, #80]	; 0x50
 8013376:	4b13      	ldr	r3, [pc, #76]	; (80133c4 <__sinit+0x68>)
 8013378:	4a13      	ldr	r2, [pc, #76]	; (80133c8 <__sinit+0x6c>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	62a2      	str	r2, [r4, #40]	; 0x28
 801337e:	42a3      	cmp	r3, r4
 8013380:	bf04      	itt	eq
 8013382:	2301      	moveq	r3, #1
 8013384:	61a3      	streq	r3, [r4, #24]
 8013386:	4620      	mov	r0, r4
 8013388:	f000 f820 	bl	80133cc <__sfp>
 801338c:	6060      	str	r0, [r4, #4]
 801338e:	4620      	mov	r0, r4
 8013390:	f000 f81c 	bl	80133cc <__sfp>
 8013394:	60a0      	str	r0, [r4, #8]
 8013396:	4620      	mov	r0, r4
 8013398:	f000 f818 	bl	80133cc <__sfp>
 801339c:	2200      	movs	r2, #0
 801339e:	60e0      	str	r0, [r4, #12]
 80133a0:	2104      	movs	r1, #4
 80133a2:	6860      	ldr	r0, [r4, #4]
 80133a4:	f7ff ff82 	bl	80132ac <std>
 80133a8:	68a0      	ldr	r0, [r4, #8]
 80133aa:	2201      	movs	r2, #1
 80133ac:	2109      	movs	r1, #9
 80133ae:	f7ff ff7d 	bl	80132ac <std>
 80133b2:	68e0      	ldr	r0, [r4, #12]
 80133b4:	2202      	movs	r2, #2
 80133b6:	2112      	movs	r1, #18
 80133b8:	f7ff ff78 	bl	80132ac <std>
 80133bc:	2301      	movs	r3, #1
 80133be:	61a3      	str	r3, [r4, #24]
 80133c0:	e7d2      	b.n	8013368 <__sinit+0xc>
 80133c2:	bf00      	nop
 80133c4:	08015b80 	.word	0x08015b80
 80133c8:	080132f5 	.word	0x080132f5

080133cc <__sfp>:
 80133cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ce:	4607      	mov	r7, r0
 80133d0:	f7ff ffac 	bl	801332c <__sfp_lock_acquire>
 80133d4:	4b1e      	ldr	r3, [pc, #120]	; (8013450 <__sfp+0x84>)
 80133d6:	681e      	ldr	r6, [r3, #0]
 80133d8:	69b3      	ldr	r3, [r6, #24]
 80133da:	b913      	cbnz	r3, 80133e2 <__sfp+0x16>
 80133dc:	4630      	mov	r0, r6
 80133de:	f7ff ffbd 	bl	801335c <__sinit>
 80133e2:	3648      	adds	r6, #72	; 0x48
 80133e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133e8:	3b01      	subs	r3, #1
 80133ea:	d503      	bpl.n	80133f4 <__sfp+0x28>
 80133ec:	6833      	ldr	r3, [r6, #0]
 80133ee:	b30b      	cbz	r3, 8013434 <__sfp+0x68>
 80133f0:	6836      	ldr	r6, [r6, #0]
 80133f2:	e7f7      	b.n	80133e4 <__sfp+0x18>
 80133f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133f8:	b9d5      	cbnz	r5, 8013430 <__sfp+0x64>
 80133fa:	4b16      	ldr	r3, [pc, #88]	; (8013454 <__sfp+0x88>)
 80133fc:	60e3      	str	r3, [r4, #12]
 80133fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013402:	6665      	str	r5, [r4, #100]	; 0x64
 8013404:	f000 f847 	bl	8013496 <__retarget_lock_init_recursive>
 8013408:	f7ff ff96 	bl	8013338 <__sfp_lock_release>
 801340c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013414:	6025      	str	r5, [r4, #0]
 8013416:	61a5      	str	r5, [r4, #24]
 8013418:	2208      	movs	r2, #8
 801341a:	4629      	mov	r1, r5
 801341c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013420:	f7fe ff98 	bl	8012354 <memset>
 8013424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801342c:	4620      	mov	r0, r4
 801342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013430:	3468      	adds	r4, #104	; 0x68
 8013432:	e7d9      	b.n	80133e8 <__sfp+0x1c>
 8013434:	2104      	movs	r1, #4
 8013436:	4638      	mov	r0, r7
 8013438:	f7ff ff62 	bl	8013300 <__sfmoreglue>
 801343c:	4604      	mov	r4, r0
 801343e:	6030      	str	r0, [r6, #0]
 8013440:	2800      	cmp	r0, #0
 8013442:	d1d5      	bne.n	80133f0 <__sfp+0x24>
 8013444:	f7ff ff78 	bl	8013338 <__sfp_lock_release>
 8013448:	230c      	movs	r3, #12
 801344a:	603b      	str	r3, [r7, #0]
 801344c:	e7ee      	b.n	801342c <__sfp+0x60>
 801344e:	bf00      	nop
 8013450:	08015b80 	.word	0x08015b80
 8013454:	ffff0001 	.word	0xffff0001

08013458 <_fwalk_reent>:
 8013458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801345c:	4606      	mov	r6, r0
 801345e:	4688      	mov	r8, r1
 8013460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013464:	2700      	movs	r7, #0
 8013466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801346a:	f1b9 0901 	subs.w	r9, r9, #1
 801346e:	d505      	bpl.n	801347c <_fwalk_reent+0x24>
 8013470:	6824      	ldr	r4, [r4, #0]
 8013472:	2c00      	cmp	r4, #0
 8013474:	d1f7      	bne.n	8013466 <_fwalk_reent+0xe>
 8013476:	4638      	mov	r0, r7
 8013478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801347c:	89ab      	ldrh	r3, [r5, #12]
 801347e:	2b01      	cmp	r3, #1
 8013480:	d907      	bls.n	8013492 <_fwalk_reent+0x3a>
 8013482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013486:	3301      	adds	r3, #1
 8013488:	d003      	beq.n	8013492 <_fwalk_reent+0x3a>
 801348a:	4629      	mov	r1, r5
 801348c:	4630      	mov	r0, r6
 801348e:	47c0      	blx	r8
 8013490:	4307      	orrs	r7, r0
 8013492:	3568      	adds	r5, #104	; 0x68
 8013494:	e7e9      	b.n	801346a <_fwalk_reent+0x12>

08013496 <__retarget_lock_init_recursive>:
 8013496:	4770      	bx	lr

08013498 <__retarget_lock_acquire_recursive>:
 8013498:	4770      	bx	lr

0801349a <__retarget_lock_release_recursive>:
 801349a:	4770      	bx	lr

0801349c <__swhatbuf_r>:
 801349c:	b570      	push	{r4, r5, r6, lr}
 801349e:	460e      	mov	r6, r1
 80134a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a4:	2900      	cmp	r1, #0
 80134a6:	b096      	sub	sp, #88	; 0x58
 80134a8:	4614      	mov	r4, r2
 80134aa:	461d      	mov	r5, r3
 80134ac:	da08      	bge.n	80134c0 <__swhatbuf_r+0x24>
 80134ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80134b2:	2200      	movs	r2, #0
 80134b4:	602a      	str	r2, [r5, #0]
 80134b6:	061a      	lsls	r2, r3, #24
 80134b8:	d410      	bmi.n	80134dc <__swhatbuf_r+0x40>
 80134ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134be:	e00e      	b.n	80134de <__swhatbuf_r+0x42>
 80134c0:	466a      	mov	r2, sp
 80134c2:	f000 f937 	bl	8013734 <_fstat_r>
 80134c6:	2800      	cmp	r0, #0
 80134c8:	dbf1      	blt.n	80134ae <__swhatbuf_r+0x12>
 80134ca:	9a01      	ldr	r2, [sp, #4]
 80134cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134d4:	425a      	negs	r2, r3
 80134d6:	415a      	adcs	r2, r3
 80134d8:	602a      	str	r2, [r5, #0]
 80134da:	e7ee      	b.n	80134ba <__swhatbuf_r+0x1e>
 80134dc:	2340      	movs	r3, #64	; 0x40
 80134de:	2000      	movs	r0, #0
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	b016      	add	sp, #88	; 0x58
 80134e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080134e8 <__smakebuf_r>:
 80134e8:	898b      	ldrh	r3, [r1, #12]
 80134ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134ec:	079d      	lsls	r5, r3, #30
 80134ee:	4606      	mov	r6, r0
 80134f0:	460c      	mov	r4, r1
 80134f2:	d507      	bpl.n	8013504 <__smakebuf_r+0x1c>
 80134f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	6123      	str	r3, [r4, #16]
 80134fc:	2301      	movs	r3, #1
 80134fe:	6163      	str	r3, [r4, #20]
 8013500:	b002      	add	sp, #8
 8013502:	bd70      	pop	{r4, r5, r6, pc}
 8013504:	ab01      	add	r3, sp, #4
 8013506:	466a      	mov	r2, sp
 8013508:	f7ff ffc8 	bl	801349c <__swhatbuf_r>
 801350c:	9900      	ldr	r1, [sp, #0]
 801350e:	4605      	mov	r5, r0
 8013510:	4630      	mov	r0, r6
 8013512:	f7ff f873 	bl	80125fc <_malloc_r>
 8013516:	b948      	cbnz	r0, 801352c <__smakebuf_r+0x44>
 8013518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801351c:	059a      	lsls	r2, r3, #22
 801351e:	d4ef      	bmi.n	8013500 <__smakebuf_r+0x18>
 8013520:	f023 0303 	bic.w	r3, r3, #3
 8013524:	f043 0302 	orr.w	r3, r3, #2
 8013528:	81a3      	strh	r3, [r4, #12]
 801352a:	e7e3      	b.n	80134f4 <__smakebuf_r+0xc>
 801352c:	4b0d      	ldr	r3, [pc, #52]	; (8013564 <__smakebuf_r+0x7c>)
 801352e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013530:	89a3      	ldrh	r3, [r4, #12]
 8013532:	6020      	str	r0, [r4, #0]
 8013534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013538:	81a3      	strh	r3, [r4, #12]
 801353a:	9b00      	ldr	r3, [sp, #0]
 801353c:	6163      	str	r3, [r4, #20]
 801353e:	9b01      	ldr	r3, [sp, #4]
 8013540:	6120      	str	r0, [r4, #16]
 8013542:	b15b      	cbz	r3, 801355c <__smakebuf_r+0x74>
 8013544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013548:	4630      	mov	r0, r6
 801354a:	f000 f905 	bl	8013758 <_isatty_r>
 801354e:	b128      	cbz	r0, 801355c <__smakebuf_r+0x74>
 8013550:	89a3      	ldrh	r3, [r4, #12]
 8013552:	f023 0303 	bic.w	r3, r3, #3
 8013556:	f043 0301 	orr.w	r3, r3, #1
 801355a:	81a3      	strh	r3, [r4, #12]
 801355c:	89a0      	ldrh	r0, [r4, #12]
 801355e:	4305      	orrs	r5, r0
 8013560:	81a5      	strh	r5, [r4, #12]
 8013562:	e7cd      	b.n	8013500 <__smakebuf_r+0x18>
 8013564:	080132f5 	.word	0x080132f5

08013568 <__malloc_lock>:
 8013568:	4801      	ldr	r0, [pc, #4]	; (8013570 <__malloc_lock+0x8>)
 801356a:	f7ff bf95 	b.w	8013498 <__retarget_lock_acquire_recursive>
 801356e:	bf00      	nop
 8013570:	20005618 	.word	0x20005618

08013574 <__malloc_unlock>:
 8013574:	4801      	ldr	r0, [pc, #4]	; (801357c <__malloc_unlock+0x8>)
 8013576:	f7ff bf90 	b.w	801349a <__retarget_lock_release_recursive>
 801357a:	bf00      	nop
 801357c:	20005618 	.word	0x20005618

08013580 <_realloc_r>:
 8013580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013584:	4680      	mov	r8, r0
 8013586:	4614      	mov	r4, r2
 8013588:	460e      	mov	r6, r1
 801358a:	b921      	cbnz	r1, 8013596 <_realloc_r+0x16>
 801358c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	4611      	mov	r1, r2
 8013592:	f7ff b833 	b.w	80125fc <_malloc_r>
 8013596:	b92a      	cbnz	r2, 80135a4 <_realloc_r+0x24>
 8013598:	f7fe ffc4 	bl	8012524 <_free_r>
 801359c:	4625      	mov	r5, r4
 801359e:	4628      	mov	r0, r5
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	f000 f8fa 	bl	801379c <_malloc_usable_size_r>
 80135a8:	4284      	cmp	r4, r0
 80135aa:	4607      	mov	r7, r0
 80135ac:	d802      	bhi.n	80135b4 <_realloc_r+0x34>
 80135ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80135b2:	d812      	bhi.n	80135da <_realloc_r+0x5a>
 80135b4:	4621      	mov	r1, r4
 80135b6:	4640      	mov	r0, r8
 80135b8:	f7ff f820 	bl	80125fc <_malloc_r>
 80135bc:	4605      	mov	r5, r0
 80135be:	2800      	cmp	r0, #0
 80135c0:	d0ed      	beq.n	801359e <_realloc_r+0x1e>
 80135c2:	42bc      	cmp	r4, r7
 80135c4:	4622      	mov	r2, r4
 80135c6:	4631      	mov	r1, r6
 80135c8:	bf28      	it	cs
 80135ca:	463a      	movcs	r2, r7
 80135cc:	f7fe fe9a 	bl	8012304 <memcpy>
 80135d0:	4631      	mov	r1, r6
 80135d2:	4640      	mov	r0, r8
 80135d4:	f7fe ffa6 	bl	8012524 <_free_r>
 80135d8:	e7e1      	b.n	801359e <_realloc_r+0x1e>
 80135da:	4635      	mov	r5, r6
 80135dc:	e7df      	b.n	801359e <_realloc_r+0x1e>

080135de <_raise_r>:
 80135de:	291f      	cmp	r1, #31
 80135e0:	b538      	push	{r3, r4, r5, lr}
 80135e2:	4604      	mov	r4, r0
 80135e4:	460d      	mov	r5, r1
 80135e6:	d904      	bls.n	80135f2 <_raise_r+0x14>
 80135e8:	2316      	movs	r3, #22
 80135ea:	6003      	str	r3, [r0, #0]
 80135ec:	f04f 30ff 	mov.w	r0, #4294967295
 80135f0:	bd38      	pop	{r3, r4, r5, pc}
 80135f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135f4:	b112      	cbz	r2, 80135fc <_raise_r+0x1e>
 80135f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135fa:	b94b      	cbnz	r3, 8013610 <_raise_r+0x32>
 80135fc:	4620      	mov	r0, r4
 80135fe:	f000 f831 	bl	8013664 <_getpid_r>
 8013602:	462a      	mov	r2, r5
 8013604:	4601      	mov	r1, r0
 8013606:	4620      	mov	r0, r4
 8013608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801360c:	f000 b818 	b.w	8013640 <_kill_r>
 8013610:	2b01      	cmp	r3, #1
 8013612:	d00a      	beq.n	801362a <_raise_r+0x4c>
 8013614:	1c59      	adds	r1, r3, #1
 8013616:	d103      	bne.n	8013620 <_raise_r+0x42>
 8013618:	2316      	movs	r3, #22
 801361a:	6003      	str	r3, [r0, #0]
 801361c:	2001      	movs	r0, #1
 801361e:	e7e7      	b.n	80135f0 <_raise_r+0x12>
 8013620:	2400      	movs	r4, #0
 8013622:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013626:	4628      	mov	r0, r5
 8013628:	4798      	blx	r3
 801362a:	2000      	movs	r0, #0
 801362c:	e7e0      	b.n	80135f0 <_raise_r+0x12>
	...

08013630 <raise>:
 8013630:	4b02      	ldr	r3, [pc, #8]	; (801363c <raise+0xc>)
 8013632:	4601      	mov	r1, r0
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	f7ff bfd2 	b.w	80135de <_raise_r>
 801363a:	bf00      	nop
 801363c:	20000128 	.word	0x20000128

08013640 <_kill_r>:
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4d07      	ldr	r5, [pc, #28]	; (8013660 <_kill_r+0x20>)
 8013644:	2300      	movs	r3, #0
 8013646:	4604      	mov	r4, r0
 8013648:	4608      	mov	r0, r1
 801364a:	4611      	mov	r1, r2
 801364c:	602b      	str	r3, [r5, #0]
 801364e:	f000 f8df 	bl	8013810 <_kill>
 8013652:	1c43      	adds	r3, r0, #1
 8013654:	d102      	bne.n	801365c <_kill_r+0x1c>
 8013656:	682b      	ldr	r3, [r5, #0]
 8013658:	b103      	cbz	r3, 801365c <_kill_r+0x1c>
 801365a:	6023      	str	r3, [r4, #0]
 801365c:	bd38      	pop	{r3, r4, r5, pc}
 801365e:	bf00      	nop
 8013660:	2000561c 	.word	0x2000561c

08013664 <_getpid_r>:
 8013664:	f000 b8c4 	b.w	80137f0 <_getpid>

08013668 <__sread>:
 8013668:	b510      	push	{r4, lr}
 801366a:	460c      	mov	r4, r1
 801366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013670:	f000 f89c 	bl	80137ac <_read_r>
 8013674:	2800      	cmp	r0, #0
 8013676:	bfab      	itete	ge
 8013678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801367a:	89a3      	ldrhlt	r3, [r4, #12]
 801367c:	181b      	addge	r3, r3, r0
 801367e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013682:	bfac      	ite	ge
 8013684:	6563      	strge	r3, [r4, #84]	; 0x54
 8013686:	81a3      	strhlt	r3, [r4, #12]
 8013688:	bd10      	pop	{r4, pc}

0801368a <__swrite>:
 801368a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801368e:	461f      	mov	r7, r3
 8013690:	898b      	ldrh	r3, [r1, #12]
 8013692:	05db      	lsls	r3, r3, #23
 8013694:	4605      	mov	r5, r0
 8013696:	460c      	mov	r4, r1
 8013698:	4616      	mov	r6, r2
 801369a:	d505      	bpl.n	80136a8 <__swrite+0x1e>
 801369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a0:	2302      	movs	r3, #2
 80136a2:	2200      	movs	r2, #0
 80136a4:	f000 f868 	bl	8013778 <_lseek_r>
 80136a8:	89a3      	ldrh	r3, [r4, #12]
 80136aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136b2:	81a3      	strh	r3, [r4, #12]
 80136b4:	4632      	mov	r2, r6
 80136b6:	463b      	mov	r3, r7
 80136b8:	4628      	mov	r0, r5
 80136ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136be:	f000 b817 	b.w	80136f0 <_write_r>

080136c2 <__sseek>:
 80136c2:	b510      	push	{r4, lr}
 80136c4:	460c      	mov	r4, r1
 80136c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ca:	f000 f855 	bl	8013778 <_lseek_r>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	89a3      	ldrh	r3, [r4, #12]
 80136d2:	bf15      	itete	ne
 80136d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80136d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80136da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80136de:	81a3      	strheq	r3, [r4, #12]
 80136e0:	bf18      	it	ne
 80136e2:	81a3      	strhne	r3, [r4, #12]
 80136e4:	bd10      	pop	{r4, pc}

080136e6 <__sclose>:
 80136e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ea:	f000 b813 	b.w	8013714 <_close_r>
	...

080136f0 <_write_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4d07      	ldr	r5, [pc, #28]	; (8013710 <_write_r+0x20>)
 80136f4:	4604      	mov	r4, r0
 80136f6:	4608      	mov	r0, r1
 80136f8:	4611      	mov	r1, r2
 80136fa:	2200      	movs	r2, #0
 80136fc:	602a      	str	r2, [r5, #0]
 80136fe:	461a      	mov	r2, r3
 8013700:	f000 f8ac 	bl	801385c <_write>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d102      	bne.n	801370e <_write_r+0x1e>
 8013708:	682b      	ldr	r3, [r5, #0]
 801370a:	b103      	cbz	r3, 801370e <_write_r+0x1e>
 801370c:	6023      	str	r3, [r4, #0]
 801370e:	bd38      	pop	{r3, r4, r5, pc}
 8013710:	2000561c 	.word	0x2000561c

08013714 <_close_r>:
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	4d06      	ldr	r5, [pc, #24]	; (8013730 <_close_r+0x1c>)
 8013718:	2300      	movs	r3, #0
 801371a:	4604      	mov	r4, r0
 801371c:	4608      	mov	r0, r1
 801371e:	602b      	str	r3, [r5, #0]
 8013720:	f000 f856 	bl	80137d0 <_close>
 8013724:	1c43      	adds	r3, r0, #1
 8013726:	d102      	bne.n	801372e <_close_r+0x1a>
 8013728:	682b      	ldr	r3, [r5, #0]
 801372a:	b103      	cbz	r3, 801372e <_close_r+0x1a>
 801372c:	6023      	str	r3, [r4, #0]
 801372e:	bd38      	pop	{r3, r4, r5, pc}
 8013730:	2000561c 	.word	0x2000561c

08013734 <_fstat_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4d07      	ldr	r5, [pc, #28]	; (8013754 <_fstat_r+0x20>)
 8013738:	2300      	movs	r3, #0
 801373a:	4604      	mov	r4, r0
 801373c:	4608      	mov	r0, r1
 801373e:	4611      	mov	r1, r2
 8013740:	602b      	str	r3, [r5, #0]
 8013742:	f000 f84d 	bl	80137e0 <_fstat>
 8013746:	1c43      	adds	r3, r0, #1
 8013748:	d102      	bne.n	8013750 <_fstat_r+0x1c>
 801374a:	682b      	ldr	r3, [r5, #0]
 801374c:	b103      	cbz	r3, 8013750 <_fstat_r+0x1c>
 801374e:	6023      	str	r3, [r4, #0]
 8013750:	bd38      	pop	{r3, r4, r5, pc}
 8013752:	bf00      	nop
 8013754:	2000561c 	.word	0x2000561c

08013758 <_isatty_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4d06      	ldr	r5, [pc, #24]	; (8013774 <_isatty_r+0x1c>)
 801375c:	2300      	movs	r3, #0
 801375e:	4604      	mov	r4, r0
 8013760:	4608      	mov	r0, r1
 8013762:	602b      	str	r3, [r5, #0]
 8013764:	f000 f84c 	bl	8013800 <_isatty>
 8013768:	1c43      	adds	r3, r0, #1
 801376a:	d102      	bne.n	8013772 <_isatty_r+0x1a>
 801376c:	682b      	ldr	r3, [r5, #0]
 801376e:	b103      	cbz	r3, 8013772 <_isatty_r+0x1a>
 8013770:	6023      	str	r3, [r4, #0]
 8013772:	bd38      	pop	{r3, r4, r5, pc}
 8013774:	2000561c 	.word	0x2000561c

08013778 <_lseek_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4d07      	ldr	r5, [pc, #28]	; (8013798 <_lseek_r+0x20>)
 801377c:	4604      	mov	r4, r0
 801377e:	4608      	mov	r0, r1
 8013780:	4611      	mov	r1, r2
 8013782:	2200      	movs	r2, #0
 8013784:	602a      	str	r2, [r5, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	f000 f84a 	bl	8013820 <_lseek>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_lseek_r+0x1e>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	b103      	cbz	r3, 8013796 <_lseek_r+0x1e>
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	2000561c 	.word	0x2000561c

0801379c <_malloc_usable_size_r>:
 801379c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137a0:	1f18      	subs	r0, r3, #4
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	bfbc      	itt	lt
 80137a6:	580b      	ldrlt	r3, [r1, r0]
 80137a8:	18c0      	addlt	r0, r0, r3
 80137aa:	4770      	bx	lr

080137ac <_read_r>:
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	4d07      	ldr	r5, [pc, #28]	; (80137cc <_read_r+0x20>)
 80137b0:	4604      	mov	r4, r0
 80137b2:	4608      	mov	r0, r1
 80137b4:	4611      	mov	r1, r2
 80137b6:	2200      	movs	r2, #0
 80137b8:	602a      	str	r2, [r5, #0]
 80137ba:	461a      	mov	r2, r3
 80137bc:	f000 f838 	bl	8013830 <_read>
 80137c0:	1c43      	adds	r3, r0, #1
 80137c2:	d102      	bne.n	80137ca <_read_r+0x1e>
 80137c4:	682b      	ldr	r3, [r5, #0]
 80137c6:	b103      	cbz	r3, 80137ca <_read_r+0x1e>
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	bd38      	pop	{r3, r4, r5, pc}
 80137cc:	2000561c 	.word	0x2000561c

080137d0 <_close>:
 80137d0:	4b02      	ldr	r3, [pc, #8]	; (80137dc <_close+0xc>)
 80137d2:	2258      	movs	r2, #88	; 0x58
 80137d4:	601a      	str	r2, [r3, #0]
 80137d6:	f04f 30ff 	mov.w	r0, #4294967295
 80137da:	4770      	bx	lr
 80137dc:	2000561c 	.word	0x2000561c

080137e0 <_fstat>:
 80137e0:	4b02      	ldr	r3, [pc, #8]	; (80137ec <_fstat+0xc>)
 80137e2:	2258      	movs	r2, #88	; 0x58
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	f04f 30ff 	mov.w	r0, #4294967295
 80137ea:	4770      	bx	lr
 80137ec:	2000561c 	.word	0x2000561c

080137f0 <_getpid>:
 80137f0:	4b02      	ldr	r3, [pc, #8]	; (80137fc <_getpid+0xc>)
 80137f2:	2258      	movs	r2, #88	; 0x58
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	f04f 30ff 	mov.w	r0, #4294967295
 80137fa:	4770      	bx	lr
 80137fc:	2000561c 	.word	0x2000561c

08013800 <_isatty>:
 8013800:	4b02      	ldr	r3, [pc, #8]	; (801380c <_isatty+0xc>)
 8013802:	2258      	movs	r2, #88	; 0x58
 8013804:	601a      	str	r2, [r3, #0]
 8013806:	2000      	movs	r0, #0
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	2000561c 	.word	0x2000561c

08013810 <_kill>:
 8013810:	4b02      	ldr	r3, [pc, #8]	; (801381c <_kill+0xc>)
 8013812:	2258      	movs	r2, #88	; 0x58
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	f04f 30ff 	mov.w	r0, #4294967295
 801381a:	4770      	bx	lr
 801381c:	2000561c 	.word	0x2000561c

08013820 <_lseek>:
 8013820:	4b02      	ldr	r3, [pc, #8]	; (801382c <_lseek+0xc>)
 8013822:	2258      	movs	r2, #88	; 0x58
 8013824:	601a      	str	r2, [r3, #0]
 8013826:	f04f 30ff 	mov.w	r0, #4294967295
 801382a:	4770      	bx	lr
 801382c:	2000561c 	.word	0x2000561c

08013830 <_read>:
 8013830:	4b02      	ldr	r3, [pc, #8]	; (801383c <_read+0xc>)
 8013832:	2258      	movs	r2, #88	; 0x58
 8013834:	601a      	str	r2, [r3, #0]
 8013836:	f04f 30ff 	mov.w	r0, #4294967295
 801383a:	4770      	bx	lr
 801383c:	2000561c 	.word	0x2000561c

08013840 <_sbrk>:
 8013840:	4a04      	ldr	r2, [pc, #16]	; (8013854 <_sbrk+0x14>)
 8013842:	6811      	ldr	r1, [r2, #0]
 8013844:	4603      	mov	r3, r0
 8013846:	b909      	cbnz	r1, 801384c <_sbrk+0xc>
 8013848:	4903      	ldr	r1, [pc, #12]	; (8013858 <_sbrk+0x18>)
 801384a:	6011      	str	r1, [r2, #0]
 801384c:	6810      	ldr	r0, [r2, #0]
 801384e:	4403      	add	r3, r0
 8013850:	6013      	str	r3, [r2, #0]
 8013852:	4770      	bx	lr
 8013854:	20005620 	.word	0x20005620
 8013858:	200057d8 	.word	0x200057d8

0801385c <_write>:
 801385c:	4b02      	ldr	r3, [pc, #8]	; (8013868 <_write+0xc>)
 801385e:	2258      	movs	r2, #88	; 0x58
 8013860:	601a      	str	r2, [r3, #0]
 8013862:	f04f 30ff 	mov.w	r0, #4294967295
 8013866:	4770      	bx	lr
 8013868:	2000561c 	.word	0x2000561c

0801386c <_exit>:
 801386c:	e7fe      	b.n	801386c <_exit>
	...

08013870 <_init>:
 8013870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013872:	bf00      	nop
 8013874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013876:	bc08      	pop	{r3}
 8013878:	469e      	mov	lr, r3
 801387a:	4770      	bx	lr

0801387c <_fini>:
 801387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387e:	bf00      	nop
 8013880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013882:	bc08      	pop	{r3}
 8013884:	469e      	mov	lr, r3
 8013886:	4770      	bx	lr
