
008_2_PWM_ILE_LED_F030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e6c  08001e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  08001e80  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08001e80  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005e4d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ffc  00000000  00000000  00025e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000740  00000000  00000000  00026e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a8  00000000  00000000  000275c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035f4  00000000  00000000  00027c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000229a  00000000  00000000  0002b25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002d4f6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001970  00000000  00000000  0002d574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e24 	.word	0x08001e24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e24 	.word	0x08001e24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9c2 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ca 	bl	80003c4 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000230:	f000 f86e 	bl	8000310 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0x50>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f971 	bl	8001520 <HAL_TIM_PWM_Start>
	  	      {
	  	        __HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1, x);
	  	        HAL_Delay(100);
	  	      }
	  	      */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800023e:	2390      	movs	r3, #144	; 0x90
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	2201      	movs	r2, #1
 8000244:	2110      	movs	r1, #16
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fc5c 	bl	8000b04 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800024c:	23fa      	movs	r3, #250	; 0xfa
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fa0f 	bl	8000674 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000256:	2390      	movs	r3, #144	; 0x90
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2200      	movs	r2, #0
 800025c:	2110      	movs	r1, #16
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fc50 	bl	8000b04 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000264:	23fa      	movs	r3, #250	; 0xfa
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fa03 	bl	8000674 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800026e:	e7e6      	b.n	800023e <main+0x1e>
 8000270:	2000002c 	.word	0x2000002c

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2310      	movs	r3, #16
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	0018      	movs	r0, r3
 8000280:	2330      	movs	r3, #48	; 0x30
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f001 fdc5 	bl	8001e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	003b      	movs	r3, r7
 800028c:	0018      	movs	r0, r3
 800028e:	2310      	movs	r3, #16
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f001 fdbe 	bl	8001e14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000298:	2310      	movs	r3, #16
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	2310      	movs	r3, #16
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	2201      	movs	r2, #1
 80002a6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2310      	movs	r3, #16
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	2202      	movs	r2, #2
 80002ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	2310      	movs	r3, #16
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	0252      	lsls	r2, r2, #9
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ba:	2310      	movs	r3, #16
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0312      	lsls	r2, r2, #12
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c4:	2310      	movs	r3, #16
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	2200      	movs	r2, #0
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	2310      	movs	r3, #16
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fc35 	bl	8000b40 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002da:	f000 f8bf 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	003b      	movs	r3, r7
 80002e0:	2207      	movs	r2, #7
 80002e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2202      	movs	r2, #2
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f6:	003b      	movs	r3, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 ff3a 	bl	8001174 <HAL_RCC_ClockConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000304:	f000 f8aa 	bl	800045c <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b010      	add	sp, #64	; 0x40
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	231c      	movs	r3, #28
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f001 fd78 	bl	8001e14 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_TIM14_Init+0xa8>)
 8000326:	4a25      	ldr	r2, [pc, #148]	; (80003bc <MX_TIM14_Init+0xac>)
 8000328:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6399;
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_TIM14_Init+0xa8>)
 800032c:	4a24      	ldr	r2, [pc, #144]	; (80003c0 <MX_TIM14_Init+0xb0>)
 800032e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_TIM14_Init+0xa8>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_TIM14_Init+0xa8>)
 8000338:	2263      	movs	r2, #99	; 0x63
 800033a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_TIM14_Init+0xa8>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_TIM14_Init+0xa8>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_TIM14_Init+0xa8>)
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f840 	bl	80013d0 <HAL_TIM_Base_Init>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000354:	f000 f882 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_TIM14_Init+0xa8>)
 800035a:	0018      	movs	r0, r3
 800035c:	f001 f888 	bl	8001470 <HAL_TIM_PWM_Init>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000364:	f000 f87a 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_TIM14_Init+0xa8>)
 800036a:	2108      	movs	r1, #8
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f97d 	bl	800166c <HAL_TIM_OnePulse_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_TIM14_Init+0x6a>
  {
    Error_Handler();
 8000376:	f000 f871 	bl	800045c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2260      	movs	r2, #96	; 0x60
 800037e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000392:	1d39      	adds	r1, r7, #4
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_TIM14_Init+0xa8>)
 8000396:	2200      	movs	r2, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f001 f9c1 	bl	8001720 <HAL_TIM_PWM_ConfigChannel>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM14_Init+0x96>
  {
    Error_Handler();
 80003a2:	f000 f85b 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <MX_TIM14_Init+0xa8>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 f89f 	bl	80004ec <HAL_TIM_MspPostInit>

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b008      	add	sp, #32
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	2000002c 	.word	0x2000002c
 80003bc:	40002000 	.word	0x40002000
 80003c0:	000018ff 	.word	0x000018ff

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	230c      	movs	r3, #12
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	2314      	movs	r3, #20
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f001 fd1d 	bl	8001e14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_GPIO_Init+0x94>)
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_GPIO_Init+0x94>)
 80003de:	6952      	ldr	r2, [r2, #20]
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	03c9      	lsls	r1, r1, #15
 80003e4:	430a      	orrs	r2, r1
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_GPIO_Init+0x94>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	03db      	lsls	r3, r3, #15
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_GPIO_Init+0x94>)
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <MX_GPIO_Init+0x94>)
 80003fa:	6952      	ldr	r2, [r2, #20]
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_GPIO_Init+0x94>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fb72 	bl	8000b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000420:	230c      	movs	r3, #12
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	2210      	movs	r2, #16
 8000426:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	230c      	movs	r3, #12
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	2201      	movs	r2, #1
 800042e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	230c      	movs	r3, #12
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000438:	230c      	movs	r3, #12
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	2201      	movs	r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	230c      	movs	r3, #12
 8000442:	18fa      	adds	r2, r7, r3
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 f9ea 	bl	8000824 <HAL_GPIO_Init>

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b008      	add	sp, #32
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000462:	e7fe      	b.n	8000462 <Error_Handler+0x6>

08000464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x44>)
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x44>)
 800046e:	6992      	ldr	r2, [r2, #24]
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	619a      	str	r2, [r3, #24]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x44>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_MspInit+0x44>)
 8000484:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_MspInit+0x44>)
 8000486:	69d2      	ldr	r2, [r2, #28]
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0549      	lsls	r1, r1, #21
 800048c:	430a      	orrs	r2, r1
 800048e:	61da      	str	r2, [r3, #28]
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_MspInit+0x44>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	055b      	lsls	r3, r3, #21
 8000498:	4013      	ands	r3, r2
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <HAL_TIM_Base_MspInit+0x38>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d10d      	bne.n	80004da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_TIM_Base_MspInit+0x3c>)
 80004c0:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <HAL_TIM_Base_MspInit+0x3c>)
 80004c2:	69d2      	ldr	r2, [r2, #28]
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0049      	lsls	r1, r1, #1
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <HAL_TIM_Base_MspInit+0x3c>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40002000 	.word	0x40002000
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	230c      	movs	r3, #12
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f001 fc88 	bl	8001e14 <memset>
  if(htim->Instance==TIM14)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a18      	ldr	r2, [pc, #96]	; (800056c <HAL_TIM_MspPostInit+0x80>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d129      	bne.n	8000562 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_TIM_MspPostInit+0x84>)
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_TIM_MspPostInit+0x84>)
 8000512:	6952      	ldr	r2, [r2, #20]
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0289      	lsls	r1, r1, #10
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_TIM_MspPostInit+0x84>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	029b      	lsls	r3, r3, #10
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052a:	230c      	movs	r3, #12
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	230c      	movs	r3, #12
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	2202      	movs	r2, #2
 8000538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	230c      	movs	r3, #12
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000542:	230c      	movs	r3, #12
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2201      	movs	r2, #1
 8000548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800054a:	230c      	movs	r3, #12
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	2204      	movs	r2, #4
 8000550:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	230c      	movs	r3, #12
 8000554:	18fa      	adds	r2, r7, r3
 8000556:	2390      	movs	r3, #144	; 0x90
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 f961 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b008      	add	sp, #32
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40002000 	.word	0x40002000
 8000570:	40021000 	.word	0x40021000

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f850 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_Init+0x24>)
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x24>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	2110      	movs	r1, #16
 80005b8:	430a      	orrs	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f809 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c2:	f7ff ff4f 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_InitTick+0x5c>)
 80005de:	681c      	ldr	r4, [r3, #0]
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_InitTick+0x60>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	0019      	movs	r1, r3
 80005e6:	23fa      	movs	r3, #250	; 0xfa
 80005e8:	0098      	lsls	r0, r3, #2
 80005ea:	f7ff fd8d 	bl	8000108 <__udivsi3>
 80005ee:	0003      	movs	r3, r0
 80005f0:	0019      	movs	r1, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f7ff fd88 	bl	8000108 <__udivsi3>
 80005f8:	0003      	movs	r3, r0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f904 	bl	8000808 <HAL_SYSTICK_Config>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e00f      	b.n	8000628 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d80b      	bhi.n	8000626 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	2301      	movs	r3, #1
 8000612:	425b      	negs	r3, r3
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f8e0 	bl	80007dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_InitTick+0x64>)
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b003      	add	sp, #12
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	001a      	movs	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	18d2      	adds	r2, r2, r3
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000008 	.word	0x20000008
 800065c:	20000074 	.word	0x20000074

08000660 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	20000074 	.word	0x20000074

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	0003      	movs	r3, r0
 8000682:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	001a      	movs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	189b      	adds	r3, r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	0002      	movs	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000008 	.word	0x20000008

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b7f      	cmp	r3, #127	; 0x7f
 80006cc:	d828      	bhi.n	8000720 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ce:	4c2f      	ldr	r4, [pc, #188]	; (800078c <__NVIC_SetPriority+0xd4>)
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	492c      	ldr	r1, [pc, #176]	; (800078c <__NVIC_SetPriority+0xd4>)
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	b252      	sxtb	r2, r2
 80006e0:	0892      	lsrs	r2, r2, #2
 80006e2:	32c0      	adds	r2, #192	; 0xc0
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	5852      	ldr	r2, [r2, r1]
 80006e8:	1df9      	adds	r1, r7, #7
 80006ea:	7809      	ldrb	r1, [r1, #0]
 80006ec:	0008      	movs	r0, r1
 80006ee:	2103      	movs	r1, #3
 80006f0:	4001      	ands	r1, r0
 80006f2:	00c9      	lsls	r1, r1, #3
 80006f4:	20ff      	movs	r0, #255	; 0xff
 80006f6:	4088      	lsls	r0, r1
 80006f8:	0001      	movs	r1, r0
 80006fa:	43c9      	mvns	r1, r1
 80006fc:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	0192      	lsls	r2, r2, #6
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	4010      	ands	r0, r2
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	0015      	movs	r5, r2
 800070c:	2203      	movs	r2, #3
 800070e:	402a      	ands	r2, r5
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	4090      	lsls	r0, r2
 8000714:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000716:	430a      	orrs	r2, r1
 8000718:	33c0      	adds	r3, #192	; 0xc0
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800071e:	e031      	b.n	8000784 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000720:	4c1b      	ldr	r4, [pc, #108]	; (8000790 <__NVIC_SetPriority+0xd8>)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	001a      	movs	r2, r3
 8000728:	230f      	movs	r3, #15
 800072a:	4013      	ands	r3, r2
 800072c:	3b08      	subs	r3, #8
 800072e:	0899      	lsrs	r1, r3, #2
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <__NVIC_SetPriority+0xd8>)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0018      	movs	r0, r3
 8000738:	230f      	movs	r3, #15
 800073a:	4003      	ands	r3, r0
 800073c:	3b08      	subs	r3, #8
 800073e:	089b      	lsrs	r3, r3, #2
 8000740:	3306      	adds	r3, #6
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	3304      	adds	r3, #4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1dfa      	adds	r2, r7, #7
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	0010      	movs	r0, r2
 8000750:	2203      	movs	r2, #3
 8000752:	4002      	ands	r2, r0
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	20ff      	movs	r0, #255	; 0xff
 8000758:	4090      	lsls	r0, r2
 800075a:	0002      	movs	r2, r0
 800075c:	43d2      	mvns	r2, r2
 800075e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	019b      	lsls	r3, r3, #6
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	4018      	ands	r0, r3
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	001d      	movs	r5, r3
 800076e:	2303      	movs	r3, #3
 8000770:	402b      	ands	r3, r5
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	4098      	lsls	r0, r3
 8000776:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	431a      	orrs	r2, r3
 800077a:	1d8b      	adds	r3, r1, #6
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	18e3      	adds	r3, r4, r3
 8000780:	3304      	adds	r3, #4
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <SysTick_Config+0x40>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d901      	bls.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e010      	b.n	80007cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <SysTick_Config+0x44>)
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	3a01      	subs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	2301      	movs	r3, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	2103      	movs	r1, #3
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff ff7d 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <SysTick_Config+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x44>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	00ffffff 	.word	0x00ffffff
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	230f      	movs	r3, #15
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	1c02      	adds	r2, r0, #0
 80007ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff ff5c 	bl	80006b8 <__NVIC_SetPriority>
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b004      	add	sp, #16
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ffbe 	bl	8000794 <SysTick_Config>
 8000818:	0003      	movs	r3, r0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e14f      	b.n	8000ad4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2101      	movs	r1, #1
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4091      	lsls	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d100      	bne.n	800084c <HAL_GPIO_Init+0x28>
 800084a:	e140      	b.n	8000ace <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	2203      	movs	r2, #3
 8000852:	4013      	ands	r3, r2
 8000854:	2b01      	cmp	r3, #1
 8000856:	d005      	beq.n	8000864 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2203      	movs	r2, #3
 800085e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000860:	2b02      	cmp	r3, #2
 8000862:	d130      	bne.n	80008c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2203      	movs	r2, #3
 8000870:	409a      	lsls	r2, r3
 8000872:	0013      	movs	r3, r2
 8000874:	43da      	mvns	r2, r3
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	4013      	ands	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	409a      	lsls	r2, r3
 8000886:	0013      	movs	r3, r2
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089a:	2201      	movs	r2, #1
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
 80008a0:	0013      	movs	r3, r2
 80008a2:	43da      	mvns	r2, r3
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	091b      	lsrs	r3, r3, #4
 80008b0:	2201      	movs	r2, #1
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2203      	movs	r2, #3
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d017      	beq.n	8000902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	43da      	mvns	r2, r3
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	409a      	lsls	r2, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2203      	movs	r2, #3
 8000908:	4013      	ands	r3, r2
 800090a:	2b02      	cmp	r3, #2
 800090c:	d123      	bne.n	8000956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	08da      	lsrs	r2, r3, #3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3208      	adds	r2, #8
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	58d3      	ldr	r3, [r2, r3]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2207      	movs	r2, #7
 8000920:	4013      	ands	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	43da      	mvns	r2, r3
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	2107      	movs	r1, #7
 800093a:	400b      	ands	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	08da      	lsrs	r2, r3, #3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3208      	adds	r2, #8
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	6939      	ldr	r1, [r7, #16]
 8000954:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	43da      	mvns	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2203      	movs	r2, #3
 8000974:	401a      	ands	r2, r3
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	23c0      	movs	r3, #192	; 0xc0
 8000990:	029b      	lsls	r3, r3, #10
 8000992:	4013      	ands	r3, r2
 8000994:	d100      	bne.n	8000998 <HAL_GPIO_Init+0x174>
 8000996:	e09a      	b.n	8000ace <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000998:	4b54      	ldr	r3, [pc, #336]	; (8000aec <HAL_GPIO_Init+0x2c8>)
 800099a:	4a54      	ldr	r2, [pc, #336]	; (8000aec <HAL_GPIO_Init+0x2c8>)
 800099c:	6992      	ldr	r2, [r2, #24]
 800099e:	2101      	movs	r1, #1
 80009a0:	430a      	orrs	r2, r1
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	4b51      	ldr	r3, [pc, #324]	; (8000aec <HAL_GPIO_Init+0x2c8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	2201      	movs	r2, #1
 80009aa:	4013      	ands	r3, r2
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b0:	4a4f      	ldr	r2, [pc, #316]	; (8000af0 <HAL_GPIO_Init+0x2cc>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	589b      	ldr	r3, [r3, r2]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	2203      	movs	r2, #3
 80009c2:	4013      	ands	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	43da      	mvns	r2, r3
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	2390      	movs	r3, #144	; 0x90
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	429a      	cmp	r2, r3
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x1e2>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x1de>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a43      	ldr	r2, [pc, #268]	; (8000af8 <HAL_GPIO_Init+0x2d4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x1da>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a42      	ldr	r2, [pc, #264]	; (8000afc <HAL_GPIO_Init+0x2d8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x1d6>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e006      	b.n	8000a08 <HAL_GPIO_Init+0x1e4>
 80009fa:	2305      	movs	r3, #5
 80009fc:	e004      	b.n	8000a08 <HAL_GPIO_Init+0x1e4>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e002      	b.n	8000a08 <HAL_GPIO_Init+0x1e4>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <HAL_GPIO_Init+0x1e4>
 8000a06:	2300      	movs	r3, #0
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	4093      	lsls	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a18:	4935      	ldr	r1, [pc, #212]	; (8000af0 <HAL_GPIO_Init+0x2cc>)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a26:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	035b      	lsls	r3, r3, #13
 8000a92:	4013      	ands	r3, r2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	4013      	ands	r3, r2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_GPIO_Init+0x2dc>)
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	40da      	lsrs	r2, r3
 8000adc:	1e13      	subs	r3, r2, #0
 8000ade:	d000      	beq.n	8000ae2 <HAL_GPIO_Init+0x2be>
 8000ae0:	e6a8      	b.n	8000834 <HAL_GPIO_Init+0x10>
  } 
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b006      	add	sp, #24
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	0011      	movs	r1, r2
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	801a      	strh	r2, [r3, #0]
 8000b16:	1c7b      	adds	r3, r7, #1
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b1c:	1c7b      	adds	r3, r7, #1
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b24:	1cbb      	adds	r3, r7, #2
 8000b26:	881a      	ldrh	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2c:	e003      	b.n	8000b36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2e:	1cbb      	adds	r3, r7, #2
 8000b30:	881a      	ldrh	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e302      	b.n	8001158 <HAL_RCC_OscConfig+0x618>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2201      	movs	r2, #1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d100      	bne.n	8000b5e <HAL_RCC_OscConfig+0x1e>
 8000b5c:	e08d      	b.n	8000c7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b5e:	4bc4      	ldr	r3, [pc, #784]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	220c      	movs	r2, #12
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d00e      	beq.n	8000b88 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6a:	4bc1      	ldr	r3, [pc, #772]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	220c      	movs	r2, #12
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d116      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x64>
 8000b76:	4bbe      	ldr	r3, [pc, #760]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	401a      	ands	r2, r3
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	025b      	lsls	r3, r3, #9
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d10d      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	4bb9      	ldr	r3, [pc, #740]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	029b      	lsls	r3, r3, #10
 8000b90:	4013      	ands	r3, r2
 8000b92:	d100      	bne.n	8000b96 <HAL_RCC_OscConfig+0x56>
 8000b94:	e070      	b.n	8000c78 <HAL_RCC_OscConfig+0x138>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d000      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x60>
 8000b9e:	e06b      	b.n	8000c78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e2d9      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d107      	bne.n	8000bbc <HAL_RCC_OscConfig+0x7c>
 8000bac:	4bb0      	ldr	r3, [pc, #704]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bae:	4ab0      	ldr	r2, [pc, #704]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0249      	lsls	r1, r1, #9
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e02f      	b.n	8000c1c <HAL_RCC_OscConfig+0xdc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10c      	bne.n	8000bde <HAL_RCC_OscConfig+0x9e>
 8000bc4:	4baa      	ldr	r3, [pc, #680]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bc6:	4aaa      	ldr	r2, [pc, #680]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	49aa      	ldr	r1, [pc, #680]	; (8000e74 <HAL_RCC_OscConfig+0x334>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	4ba7      	ldr	r3, [pc, #668]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bd2:	4aa7      	ldr	r2, [pc, #668]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	49a8      	ldr	r1, [pc, #672]	; (8000e78 <HAL_RCC_OscConfig+0x338>)
 8000bd8:	400a      	ands	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e01e      	b.n	8000c1c <HAL_RCC_OscConfig+0xdc>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d10e      	bne.n	8000c04 <HAL_RCC_OscConfig+0xc4>
 8000be6:	4ba2      	ldr	r3, [pc, #648]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000be8:	4aa1      	ldr	r2, [pc, #644]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	02c9      	lsls	r1, r1, #11
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	4b9e      	ldr	r3, [pc, #632]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bf6:	4a9e      	ldr	r2, [pc, #632]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0249      	lsls	r1, r1, #9
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e00b      	b.n	8000c1c <HAL_RCC_OscConfig+0xdc>
 8000c04:	4b9a      	ldr	r3, [pc, #616]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c06:	4a9a      	ldr	r2, [pc, #616]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	499a      	ldr	r1, [pc, #616]	; (8000e74 <HAL_RCC_OscConfig+0x334>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c12:	4a97      	ldr	r2, [pc, #604]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4998      	ldr	r1, [pc, #608]	; (8000e78 <HAL_RCC_OscConfig+0x338>)
 8000c18:	400a      	ands	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d014      	beq.n	8000c4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c24:	f7ff fd1c 	bl	8000660 <HAL_GetTick>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	e008      	b.n	8000c40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fd17 	bl	8000660 <HAL_GetTick>
 8000c32:	0002      	movs	r2, r0
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b64      	cmp	r3, #100	; 0x64
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e28b      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c40:	4b8b      	ldr	r3, [pc, #556]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d0f0      	beq.n	8000c2e <HAL_RCC_OscConfig+0xee>
 8000c4c:	e015      	b.n	8000c7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fd07 	bl	8000660 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff fd02 	bl	8000660 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e276      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	029b      	lsls	r3, r3, #10
 8000c72:	4013      	ands	r3, r2
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0x118>
 8000c76:	e000      	b.n	8000c7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2202      	movs	r2, #2
 8000c80:	4013      	ands	r3, r2
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x146>
 8000c84:	e069      	b.n	8000d5a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c86:	4b7a      	ldr	r3, [pc, #488]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d00b      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c90:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	220c      	movs	r2, #12
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d11c      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x196>
 8000c9c:	4b74      	ldr	r3, [pc, #464]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	025b      	lsls	r3, r3, #9
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d116      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca8:	4b71      	ldr	r3, [pc, #452]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2202      	movs	r2, #2
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d005      	beq.n	8000cbe <HAL_RCC_OscConfig+0x17e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d001      	beq.n	8000cbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e24c      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbe:	4a6c      	ldr	r2, [pc, #432]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000cc0:	4b6b      	ldr	r3, [pc, #428]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	21f8      	movs	r1, #248	; 0xf8
 8000cc6:	438b      	bics	r3, r1
 8000cc8:	0019      	movs	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd4:	e041      	b.n	8000d5a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d024      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cde:	4b64      	ldr	r3, [pc, #400]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	4a63      	ldr	r2, [pc, #396]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cea:	f7ff fcb9 	bl	8000660 <HAL_GetTick>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fcb4 	bl	8000660 <HAL_GetTick>
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e228      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d06:	4b5a      	ldr	r3, [pc, #360]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d0f1      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d10:	4a57      	ldr	r2, [pc, #348]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	21f8      	movs	r1, #248	; 0xf8
 8000d18:	438b      	bics	r3, r1
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	430b      	orrs	r3, r1
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e018      	b.n	8000d5a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d28:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	4a51      	ldr	r2, [pc, #324]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	438a      	bics	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fc94 	bl	8000660 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc8f 	bl	8000660 <HAL_GetTick>
 8000d42:	0002      	movs	r2, r0
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e203      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2202      	movs	r2, #2
 8000d56:	4013      	ands	r3, r2
 8000d58:	d1f1      	bne.n	8000d3e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2208      	movs	r2, #8
 8000d60:	4013      	ands	r3, r2
 8000d62:	d036      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d019      	beq.n	8000da0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc72 	bl	8000660 <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d82:	f7ff fc6d 	bl	8000660 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e1e1      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d94:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d0f1      	beq.n	8000d82 <HAL_RCC_OscConfig+0x242>
 8000d9e:	e018      	b.n	8000dd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000da2:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000da6:	2101      	movs	r1, #1
 8000da8:	438a      	bics	r2, r1
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc58 	bl	8000660 <HAL_GetTick>
 8000db0:	0003      	movs	r3, r0
 8000db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db6:	f7ff fc53 	bl	8000660 <HAL_GetTick>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e1c7      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d1f1      	bne.n	8000db6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x29e>
 8000ddc:	e0b6      	b.n	8000f4c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dde:	231f      	movs	r3, #31
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000de8:	69da      	ldr	r2, [r3, #28]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	4013      	ands	r3, r2
 8000df0:	d111      	bne.n	8000e16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000df6:	69d2      	ldr	r2, [r2, #28]
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0549      	lsls	r1, r1, #21
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	055b      	lsls	r3, r3, #21
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e0e:	231f      	movs	r3, #31
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_RCC_OscConfig+0x33c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d11a      	bne.n	8000e58 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_RCC_OscConfig+0x33c>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_RCC_OscConfig+0x33c>)
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0049      	lsls	r1, r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fc16 	bl	8000660 <HAL_GetTick>
 8000e34:	0003      	movs	r3, r0
 8000e36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3a:	f7ff fc11 	bl	8000660 <HAL_GetTick>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e185      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_RCC_OscConfig+0x33c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10f      	bne.n	8000e80 <HAL_RCC_OscConfig+0x340>
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <HAL_RCC_OscConfig+0x330>)
 8000e64:	6a12      	ldr	r2, [r2, #32]
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	621a      	str	r2, [r3, #32]
 8000e6c:	e036      	b.n	8000edc <HAL_RCC_OscConfig+0x39c>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40021000 	.word	0x40021000
 8000e74:	fffeffff 	.word	0xfffeffff
 8000e78:	fffbffff 	.word	0xfffbffff
 8000e7c:	40007000 	.word	0x40007000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x362>
 8000e88:	4bb5      	ldr	r3, [pc, #724]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000e8a:	4ab5      	ldr	r2, [pc, #724]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000e8c:	6a12      	ldr	r2, [r2, #32]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	438a      	bics	r2, r1
 8000e92:	621a      	str	r2, [r3, #32]
 8000e94:	4bb2      	ldr	r3, [pc, #712]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000e96:	4ab2      	ldr	r2, [pc, #712]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000e98:	6a12      	ldr	r2, [r2, #32]
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	621a      	str	r2, [r3, #32]
 8000ea0:	e01c      	b.n	8000edc <HAL_RCC_OscConfig+0x39c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x384>
 8000eaa:	4bad      	ldr	r3, [pc, #692]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000eac:	4aac      	ldr	r2, [pc, #688]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000eae:	6a12      	ldr	r2, [r2, #32]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	621a      	str	r2, [r3, #32]
 8000eb6:	4baa      	ldr	r3, [pc, #680]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000eb8:	4aa9      	ldr	r2, [pc, #676]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000eba:	6a12      	ldr	r2, [r2, #32]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	621a      	str	r2, [r3, #32]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0x39c>
 8000ec4:	4ba6      	ldr	r3, [pc, #664]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000ec6:	4aa6      	ldr	r2, [pc, #664]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000ec8:	6a12      	ldr	r2, [r2, #32]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	438a      	bics	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]
 8000ed0:	4ba3      	ldr	r3, [pc, #652]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000ed2:	4aa3      	ldr	r2, [pc, #652]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000ed4:	6a12      	ldr	r2, [r2, #32]
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	438a      	bics	r2, r1
 8000eda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fbbc 	bl	8000660 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	e009      	b.n	8000f02 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fbb7 	bl	8000660 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	4a9a      	ldr	r2, [pc, #616]	; (8001164 <HAL_RCC_OscConfig+0x624>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e12a      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f02:	4b97      	ldr	r3, [pc, #604]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	2202      	movs	r2, #2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x3ae>
 8000f0c:	e013      	b.n	8000f36 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fba7 	bl	8000660 <HAL_GetTick>
 8000f12:	0003      	movs	r3, r0
 8000f14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f16:	e009      	b.n	8000f2c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f18:	f7ff fba2 	bl	8000660 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a90      	ldr	r2, [pc, #576]	; (8001164 <HAL_RCC_OscConfig+0x624>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e115      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f36:	231f      	movs	r3, #31
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d105      	bne.n	8000f4c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f40:	4b87      	ldr	r3, [pc, #540]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f42:	4a87      	ldr	r2, [pc, #540]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f44:	69d2      	ldr	r2, [r2, #28]
 8000f46:	4988      	ldr	r1, [pc, #544]	; (8001168 <HAL_RCC_OscConfig+0x628>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2210      	movs	r2, #16
 8000f52:	4013      	ands	r3, r2
 8000f54:	d063      	beq.n	800101e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d12a      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f5e:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f64:	2104      	movs	r1, #4
 8000f66:	430a      	orrs	r2, r1
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f6a:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f6c:	4a7c      	ldr	r2, [pc, #496]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fb73 	bl	8000660 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f80:	f7ff fb6e 	bl	8000660 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e0e2      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f1      	beq.n	8000f80 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f9c:	4a70      	ldr	r2, [pc, #448]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	21f8      	movs	r1, #248	; 0xf8
 8000fa4:	438b      	bics	r3, r1
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb2:	e034      	b.n	800101e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	3305      	adds	r3, #5
 8000fba:	d111      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fbe:	4a68      	ldr	r2, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fc8:	4a65      	ldr	r2, [pc, #404]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fca:	4b65      	ldr	r3, [pc, #404]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fce:	21f8      	movs	r1, #248	; 0xf8
 8000fd0:	438b      	bics	r3, r1
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	6353      	str	r3, [r2, #52]	; 0x34
 8000fde:	e01e      	b.n	800101e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fe2:	4a5f      	ldr	r2, [pc, #380]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fe4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000fee:	4a5c      	ldr	r2, [pc, #368]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8000ff0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fb32 	bl	8000660 <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001002:	f7ff fb2d 	bl	8000660 <HAL_GetTick>
 8001006:	0002      	movs	r2, r0
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e0a1      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001014:	4b52      	ldr	r3, [pc, #328]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	2202      	movs	r2, #2
 800101a:	4013      	ands	r3, r2
 800101c:	d1f1      	bne.n	8001002 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <HAL_RCC_OscConfig+0x4e8>
 8001026:	e096      	b.n	8001156 <HAL_RCC_OscConfig+0x616>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	220c      	movs	r2, #12
 800102e:	4013      	ands	r3, r2
 8001030:	2b08      	cmp	r3, #8
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x4f6>
 8001034:	e06a      	b.n	800110c <HAL_RCC_OscConfig+0x5cc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d14b      	bne.n	80010d6 <HAL_RCC_OscConfig+0x596>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	4949      	ldr	r1, [pc, #292]	; (800116c <HAL_RCC_OscConfig+0x62c>)
 8001046:	400a      	ands	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fb09 	bl	8000660 <HAL_GetTick>
 800104e:	0003      	movs	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fb04 	bl	8000660 <HAL_GetTick>
 8001058:	0002      	movs	r2, r0
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e078      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	049b      	lsls	r3, r3, #18
 800106e:	4013      	ands	r3, r2
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001072:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	210f      	movs	r1, #15
 800107a:	438b      	bics	r3, r1
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	430b      	orrs	r3, r1
 8001084:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001088:	4b35      	ldr	r3, [pc, #212]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4938      	ldr	r1, [pc, #224]	; (8001170 <HAL_RCC_OscConfig+0x630>)
 800108e:	4019      	ands	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	4303      	orrs	r3, r0
 800109a:	430b      	orrs	r3, r1
 800109c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 80010a0:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0449      	lsls	r1, r1, #17
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fad8 	bl	8000660 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fad3 	bl	8000660 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x588>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e047      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	049b      	lsls	r3, r3, #18
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x576>
 80010d4:	e03f      	b.n	8001156 <HAL_RCC_OscConfig+0x616>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	4923      	ldr	r1, [pc, #140]	; (800116c <HAL_RCC_OscConfig+0x62c>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fabd 	bl	8000660 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x5be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fab8 	bl	8000660 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x5be>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e02c      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	049b      	lsls	r3, r3, #18
 8001106:	4013      	ands	r3, r2
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x5ac>
 800110a:	e024      	b.n	8001156 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_RCC_OscConfig+0x5d8>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e01f      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_RCC_OscConfig+0x620>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	429a      	cmp	r2, r3
 8001132:	d10e      	bne.n	8001152 <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	220f      	movs	r2, #15
 8001138:	401a      	ands	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	429a      	cmp	r2, r3
 8001140:	d107      	bne.n	8001152 <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	23f0      	movs	r3, #240	; 0xf0
 8001146:	039b      	lsls	r3, r3, #14
 8001148:	401a      	ands	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x616>
        {
          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x618>
        }
      }
    }
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b008      	add	sp, #32
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	00001388 	.word	0x00001388
 8001168:	efffffff 	.word	0xefffffff
 800116c:	feffffff 	.word	0xfeffffff
 8001170:	ffc2ffff 	.word	0xffc2ffff

08001174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b2      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	401a      	ands	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d211      	bcs.n	80011ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 8001198:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	438a      	bics	r2, r1
 80011a0:	0011      	movs	r1, r2
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e099      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d015      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2204      	movs	r2, #4
 80011ca:	4013      	ands	r3, r2
 80011cc:	d006      	beq.n	80011dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80011d2:	6852      	ldr	r2, [r2, #4]
 80011d4:	21e0      	movs	r1, #224	; 0xe0
 80011d6:	00c9      	lsls	r1, r1, #3
 80011d8:	430a      	orrs	r2, r1
 80011da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	21f0      	movs	r1, #240	; 0xf0
 80011e4:	438b      	bics	r3, r1
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	d040      	beq.n	800127c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d114      	bne.n	8001238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e06d      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	049b      	lsls	r3, r3, #18
 8001222:	4013      	ands	r3, r2
 8001224:	d108      	bne.n	8001238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e061      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e05a      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001238:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2103      	movs	r1, #3
 8001240:	438b      	bics	r3, r1
 8001242:	0019      	movs	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	430b      	orrs	r3, r1
 800124a:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fa08 	bl	8000660 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001254:	e009      	b.n	800126a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001256:	f7ff fa03 	bl	8000660 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_RCC_ClockConfig+0x18c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e041      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	220c      	movs	r2, #12
 8001270:	401a      	ands	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	429a      	cmp	r2, r3
 800127a:	d1ec      	bne.n	8001256 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	401a      	ands	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d911      	bls.n	80012ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	438a      	bics	r2, r1
 8001294:	0011      	movs	r1, r2
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_RCC_ClockConfig+0x184>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	401a      	ands	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e01f      	b.n	80012ee <HAL_RCC_ClockConfig+0x17a>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4911      	ldr	r1, [pc, #68]	; (8001304 <HAL_RCC_ClockConfig+0x190>)
 80012c0:	4019      	ands	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	430b      	orrs	r3, r1
 80012c8:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012ca:	f000 f821 	bl	8001310 <HAL_RCC_GetSysClockFreq>
 80012ce:	0001      	movs	r1, r0
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x188>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	220f      	movs	r2, #15
 80012d8:	4013      	ands	r3, r2
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x194>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	000a      	movs	r2, r1
 80012e0:	40da      	lsrs	r2, r3
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_ClockConfig+0x198>)
 80012e4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff f974 	bl	80005d4 <HAL_InitTick>
  
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	00001388 	.word	0x00001388
 8001304:	fffff8ff 	.word	0xfffff8ff
 8001308:	08001e5c 	.word	0x08001e5c
 800130c:	20000000 	.word	0x20000000

08001310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08f      	sub	sp, #60	; 0x3c
 8001314:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001316:	2314      	movs	r3, #20
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_RCC_GetSysClockFreq+0xac>)
 800131c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800131e:	c313      	stmia	r3!, {r0, r1, r4}
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001328:	ca13      	ldmia	r2!, {r0, r1, r4}
 800132a:	c313      	stmia	r3!, {r0, r1, r4}
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134c:	220c      	movs	r2, #12
 800134e:	4013      	ands	r3, r2
 8001350:	2b04      	cmp	r3, #4
 8001352:	d002      	beq.n	800135a <HAL_RCC_GetSysClockFreq+0x4a>
 8001354:	2b08      	cmp	r3, #8
 8001356:	d003      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x50>
 8001358:	e027      	b.n	80013aa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800135e:	e027      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	220f      	movs	r2, #15
 8001366:	4013      	ands	r3, r2
 8001368:	2214      	movs	r2, #20
 800136a:	18ba      	adds	r2, r7, r2
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	220f      	movs	r2, #15
 8001376:	4013      	ands	r3, r2
 8001378:	1d3a      	adds	r2, r7, #4
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800137e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	025b      	lsls	r3, r3, #9
 8001384:	4013      	ands	r3, r2
 8001386:	d009      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800138c:	f7fe febc 	bl	8000108 <__udivsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	001a      	movs	r2, r3
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	4353      	muls	r3, r2
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
 800139a:	e003      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80013a0:	4353      	muls	r3, r2
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013a8:	e002      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b00f      	add	sp, #60	; 0x3c
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	08001e3c 	.word	0x08001e3c
 80013c0:	08001e4c 	.word	0x08001e4c
 80013c4:	40021000 	.word	0x40021000
 80013c8:	007a1200 	.word	0x007a1200
 80013cc:	003d0900 	.word	0x003d0900

080013d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e042      	b.n	8001468 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	223d      	movs	r2, #61	; 0x3d
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d107      	bne.n	80013fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	223c      	movs	r2, #60	; 0x3c
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff f857 	bl	80004ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	223d      	movs	r2, #61	; 0x3d
 8001402:	2102      	movs	r1, #2
 8001404:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	0019      	movs	r1, r3
 8001410:	0010      	movs	r0, r2
 8001412:	f000 fa41 	bl	8001898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2246      	movs	r2, #70	; 0x46
 800141a:	2101      	movs	r1, #1
 800141c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	223e      	movs	r2, #62	; 0x3e
 8001422:	2101      	movs	r1, #1
 8001424:	5499      	strb	r1, [r3, r2]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	2101      	movs	r1, #1
 800142c:	5499      	strb	r1, [r3, r2]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2240      	movs	r2, #64	; 0x40
 8001432:	2101      	movs	r1, #1
 8001434:	5499      	strb	r1, [r3, r2]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2241      	movs	r2, #65	; 0x41
 800143a:	2101      	movs	r1, #1
 800143c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2242      	movs	r2, #66	; 0x42
 8001442:	2101      	movs	r1, #1
 8001444:	5499      	strb	r1, [r3, r2]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2243      	movs	r2, #67	; 0x43
 800144a:	2101      	movs	r1, #1
 800144c:	5499      	strb	r1, [r3, r2]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2244      	movs	r2, #68	; 0x44
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2245      	movs	r2, #69	; 0x45
 800145a:	2101      	movs	r1, #1
 800145c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	223d      	movs	r2, #61	; 0x3d
 8001462:	2101      	movs	r1, #1
 8001464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e042      	b.n	8001508 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	223d      	movs	r2, #61	; 0x3d
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	223c      	movs	r2, #60	; 0x3c
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f000 f839 	bl	8001510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	223d      	movs	r2, #61	; 0x3d
 80014a2:	2102      	movs	r1, #2
 80014a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	0019      	movs	r1, r3
 80014b0:	0010      	movs	r0, r2
 80014b2:	f000 f9f1 	bl	8001898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2246      	movs	r2, #70	; 0x46
 80014ba:	2101      	movs	r1, #1
 80014bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	223e      	movs	r2, #62	; 0x3e
 80014c2:	2101      	movs	r1, #1
 80014c4:	5499      	strb	r1, [r3, r2]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	223f      	movs	r2, #63	; 0x3f
 80014ca:	2101      	movs	r1, #1
 80014cc:	5499      	strb	r1, [r3, r2]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	2101      	movs	r1, #1
 80014d4:	5499      	strb	r1, [r3, r2]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2241      	movs	r2, #65	; 0x41
 80014da:	2101      	movs	r1, #1
 80014dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2242      	movs	r2, #66	; 0x42
 80014e2:	2101      	movs	r1, #1
 80014e4:	5499      	strb	r1, [r3, r2]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2243      	movs	r2, #67	; 0x43
 80014ea:	2101      	movs	r1, #1
 80014ec:	5499      	strb	r1, [r3, r2]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2244      	movs	r2, #68	; 0x44
 80014f2:	2101      	movs	r1, #1
 80014f4:	5499      	strb	r1, [r3, r2]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2245      	movs	r2, #69	; 0x45
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	223d      	movs	r2, #61	; 0x3d
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d108      	bne.n	8001542 <HAL_TIM_PWM_Start+0x22>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	223e      	movs	r2, #62	; 0x3e
 8001534:	5c9b      	ldrb	r3, [r3, r2]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4193      	sbcs	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	e01f      	b.n	8001582 <HAL_TIM_PWM_Start+0x62>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d108      	bne.n	800155a <HAL_TIM_PWM_Start+0x3a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	223f      	movs	r2, #63	; 0x3f
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	4193      	sbcs	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	e013      	b.n	8001582 <HAL_TIM_PWM_Start+0x62>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d108      	bne.n	8001572 <HAL_TIM_PWM_Start+0x52>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	4193      	sbcs	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	e007      	b.n	8001582 <HAL_TIM_PWM_Start+0x62>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2241      	movs	r2, #65	; 0x41
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	4193      	sbcs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e064      	b.n	8001654 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_TIM_PWM_Start+0x7a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	223e      	movs	r2, #62	; 0x3e
 8001594:	2102      	movs	r1, #2
 8001596:	5499      	strb	r1, [r3, r2]
 8001598:	e013      	b.n	80015c2 <HAL_TIM_PWM_Start+0xa2>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d104      	bne.n	80015aa <HAL_TIM_PWM_Start+0x8a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	223f      	movs	r2, #63	; 0x3f
 80015a4:	2102      	movs	r1, #2
 80015a6:	5499      	strb	r1, [r3, r2]
 80015a8:	e00b      	b.n	80015c2 <HAL_TIM_PWM_Start+0xa2>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d104      	bne.n	80015ba <HAL_TIM_PWM_Start+0x9a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	2102      	movs	r1, #2
 80015b6:	5499      	strb	r1, [r3, r2]
 80015b8:	e003      	b.n	80015c2 <HAL_TIM_PWM_Start+0xa2>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2241      	movs	r2, #65	; 0x41
 80015be:	2102      	movs	r1, #2
 80015c0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 fbb0 	bl	8001d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_TIM_PWM_Start+0x13c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d009      	beq.n	80015ee <HAL_TIM_PWM_Start+0xce>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_TIM_PWM_Start+0x140>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d004      	beq.n	80015ee <HAL_TIM_PWM_Start+0xce>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_TIM_PWM_Start+0x144>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_TIM_PWM_Start+0xd2>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_TIM_PWM_Start+0xd4>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0209      	lsls	r1, r1, #8
 8001606:	430a      	orrs	r2, r1
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_TIM_PWM_Start+0x13c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d004      	beq.n	800161e <HAL_TIM_PWM_Start+0xfe>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <HAL_TIM_PWM_Start+0x148>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2207      	movs	r2, #7
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b06      	cmp	r3, #6
 800162e:	d010      	beq.n	8001652 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001640:	e007      	b.n	8001652 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40014400 	.word	0x40014400
 8001664:	40014800 	.word	0x40014800
 8001668:	40000400 	.word	0x40000400

0800166c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e042      	b.n	8001706 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	223d      	movs	r2, #61	; 0x3d
 8001684:	5c9b      	ldrb	r3, [r3, r2]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	223c      	movs	r2, #60	; 0x3c
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0018      	movs	r0, r3
 8001698:	f000 f839 	bl	800170e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	223d      	movs	r2, #61	; 0x3d
 80016a0:	2102      	movs	r1, #2
 80016a2:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3304      	adds	r3, #4
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f000 f8f2 	bl	8001898 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	2108      	movs	r1, #8
 80016c0:	438a      	bics	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	6811      	ldr	r1, [r2, #0]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2246      	movs	r2, #70	; 0x46
 80016d8:	2101      	movs	r1, #1
 80016da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	223e      	movs	r2, #62	; 0x3e
 80016e0:	2101      	movs	r1, #1
 80016e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	223f      	movs	r2, #63	; 0x3f
 80016e8:	2101      	movs	r1, #1
 80016ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2242      	movs	r2, #66	; 0x42
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2243      	movs	r2, #67	; 0x43
 80016f8:	2101      	movs	r1, #1
 80016fa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	223d      	movs	r2, #61	; 0x3d
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	2317      	movs	r3, #23
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	223c      	movs	r2, #60	; 0x3c
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_TIM_PWM_ConfigChannel+0x22>
 800173e:	2302      	movs	r3, #2
 8001740:	e0a3      	b.n	800188a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	223c      	movs	r2, #60	; 0x3c
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d029      	beq.n	80017a4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001750:	d802      	bhi.n	8001758 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_TIM_PWM_ConfigChannel+0x42>
 8001756:	e08c      	b.n	8001872 <HAL_TIM_PWM_ConfigChannel+0x152>
 8001758:	2b08      	cmp	r3, #8
 800175a:	d046      	beq.n	80017ea <HAL_TIM_PWM_ConfigChannel+0xca>
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d065      	beq.n	800182c <HAL_TIM_PWM_ConfigChannel+0x10c>
 8001760:	e087      	b.n	8001872 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 f900 	bl	8001970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	6992      	ldr	r2, [r2, #24]
 800177a:	2108      	movs	r1, #8
 800177c:	430a      	orrs	r2, r1
 800177e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	6992      	ldr	r2, [r2, #24]
 800178a:	2104      	movs	r1, #4
 800178c:	438a      	bics	r2, r1
 800178e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	6991      	ldr	r1, [r2, #24]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	6912      	ldr	r2, [r2, #16]
 800179e:	430a      	orrs	r2, r1
 80017a0:	619a      	str	r2, [r3, #24]
      break;
 80017a2:	e06b      	b.n	800187c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 f95d 	bl	8001a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	6992      	ldr	r2, [r2, #24]
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0109      	lsls	r1, r1, #4
 80017c0:	430a      	orrs	r2, r1
 80017c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	6992      	ldr	r2, [r2, #24]
 80017ce:	4931      	ldr	r1, [pc, #196]	; (8001894 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	6991      	ldr	r1, [r2, #24]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	6912      	ldr	r2, [r2, #16]
 80017e2:	0212      	lsls	r2, r2, #8
 80017e4:	430a      	orrs	r2, r1
 80017e6:	619a      	str	r2, [r3, #24]
      break;
 80017e8:	e048      	b.n	800187c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	0011      	movs	r1, r2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f9b8 	bl	8001b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	69d2      	ldr	r2, [r2, #28]
 8001802:	2108      	movs	r1, #8
 8001804:	430a      	orrs	r2, r1
 8001806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	69d2      	ldr	r2, [r2, #28]
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69d1      	ldr	r1, [r2, #28]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	6912      	ldr	r2, [r2, #16]
 8001826:	430a      	orrs	r2, r1
 8001828:	61da      	str	r2, [r3, #28]
      break;
 800182a:	e027      	b.n	800187c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	0011      	movs	r1, r2
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fa17 	bl	8001c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	69d2      	ldr	r2, [r2, #28]
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0109      	lsls	r1, r1, #4
 8001848:	430a      	orrs	r2, r1
 800184a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	69d2      	ldr	r2, [r2, #28]
 8001856:	490f      	ldr	r1, [pc, #60]	; (8001894 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001858:	400a      	ands	r2, r1
 800185a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	69d1      	ldr	r1, [r2, #28]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	6912      	ldr	r2, [r2, #16]
 800186a:	0212      	lsls	r2, r2, #8
 800186c:	430a      	orrs	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
      break;
 8001870:	e004      	b.n	800187c <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8001872:	2317      	movs	r3, #23
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
      break;
 800187a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	223c      	movs	r2, #60	; 0x3c
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

  return status;
 8001884:	2317      	movs	r3, #23
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b006      	add	sp, #24
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	fffffbff 	.word	0xfffffbff

08001898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <TIM_Base_SetConfig+0xc0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <TIM_Base_SetConfig+0x20>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a2a      	ldr	r2, [pc, #168]	; (800195c <TIM_Base_SetConfig+0xc4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d108      	bne.n	80018ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2270      	movs	r2, #112	; 0x70
 80018bc:	4393      	bics	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <TIM_Base_SetConfig+0xc0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00f      	beq.n	80018f2 <TIM_Base_SetConfig+0x5a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a21      	ldr	r2, [pc, #132]	; (800195c <TIM_Base_SetConfig+0xc4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00b      	beq.n	80018f2 <TIM_Base_SetConfig+0x5a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <TIM_Base_SetConfig+0xc8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <TIM_Base_SetConfig+0x5a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <TIM_Base_SetConfig+0xcc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d003      	beq.n	80018f2 <TIM_Base_SetConfig+0x5a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <TIM_Base_SetConfig+0xd0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d108      	bne.n	8001904 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <TIM_Base_SetConfig+0xd4>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	4393      	bics	r3, r2
 800190a:	001a      	movs	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <TIM_Base_SetConfig+0xc0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <TIM_Base_SetConfig+0xaa>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <TIM_Base_SetConfig+0xcc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d003      	beq.n	8001942 <TIM_Base_SetConfig+0xaa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <TIM_Base_SetConfig+0xd0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d103      	bne.n	800194a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	615a      	str	r2, [r3, #20]
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40000400 	.word	0x40000400
 8001960:	40002000 	.word	0x40002000
 8001964:	40014400 	.word	0x40014400
 8001968:	40014800 	.word	0x40014800
 800196c:	fffffcff 	.word	0xfffffcff

08001970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2201      	movs	r2, #1
 8001980:	4393      	bics	r3, r2
 8001982:	001a      	movs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2270      	movs	r2, #112	; 0x70
 800199e:	4393      	bics	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4393      	bics	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4393      	bics	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <TIM_OC1_SetConfig+0xe8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <TIM_OC1_SetConfig+0x6e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <TIM_OC1_SetConfig+0xec>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <TIM_OC1_SetConfig+0x6e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <TIM_OC1_SetConfig+0xf0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10c      	bne.n	80019f8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2208      	movs	r2, #8
 80019e2:	4393      	bics	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4393      	bics	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <TIM_OC1_SetConfig+0xe8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <TIM_OC1_SetConfig+0xa0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <TIM_OC1_SetConfig+0xec>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d003      	beq.n	8001a10 <TIM_OC1_SetConfig+0xa0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <TIM_OC1_SetConfig+0xf0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d111      	bne.n	8001a34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <TIM_OC1_SetConfig+0xf4>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <TIM_OC1_SetConfig+0xf8>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	621a      	str	r2, [r3, #32]
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b006      	add	sp, #24
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40014400 	.word	0x40014400
 8001a60:	40014800 	.word	0x40014800
 8001a64:	fffffeff 	.word	0xfffffeff
 8001a68:	fffffdff 	.word	0xfffffdff

08001a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	001a      	movs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a2c      	ldr	r2, [pc, #176]	; (8001b4c <TIM_OC2_SetConfig+0xe0>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <TIM_OC2_SetConfig+0xe4>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <TIM_OC2_SetConfig+0xe8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10d      	bne.n	8001aea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <TIM_OC2_SetConfig+0xe8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <TIM_OC2_SetConfig+0x96>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <TIM_OC2_SetConfig+0xec>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d003      	beq.n	8001b02 <TIM_OC2_SetConfig+0x96>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <TIM_OC2_SetConfig+0xf0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d113      	bne.n	8001b2a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <TIM_OC2_SetConfig+0xf4>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <TIM_OC2_SetConfig+0xf8>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	621a      	str	r2, [r3, #32]
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b006      	add	sp, #24
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	ffff8fff 	.word	0xffff8fff
 8001b50:	fffffcff 	.word	0xfffffcff
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40014400 	.word	0x40014400
 8001b5c:	40014800 	.word	0x40014800
 8001b60:	fffffbff 	.word	0xfffffbff
 8001b64:	fffff7ff 	.word	0xfffff7ff

08001b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <TIM_OC3_SetConfig+0xdc>)
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2270      	movs	r2, #112	; 0x70
 8001b94:	4393      	bics	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <TIM_OC3_SetConfig+0xe0>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <TIM_OC3_SetConfig+0xe4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10d      	bne.n	8001be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <TIM_OC3_SetConfig+0xe8>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <TIM_OC3_SetConfig+0xec>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <TIM_OC3_SetConfig+0xe4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <TIM_OC3_SetConfig+0x92>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <TIM_OC3_SetConfig+0xf0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <TIM_OC3_SetConfig+0x92>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <TIM_OC3_SetConfig+0xf4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d113      	bne.n	8001c22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <TIM_OC3_SetConfig+0xf8>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <TIM_OC3_SetConfig+0xfc>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	621a      	str	r2, [r3, #32]
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b006      	add	sp, #24
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	fffffeff 	.word	0xfffffeff
 8001c48:	fffffdff 	.word	0xfffffdff
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	fffff7ff 	.word	0xfffff7ff
 8001c54:	fffffbff 	.word	0xfffffbff
 8001c58:	40014400 	.word	0x40014400
 8001c5c:	40014800 	.word	0x40014800
 8001c60:	ffffefff 	.word	0xffffefff
 8001c64:	ffffdfff 	.word	0xffffdfff

08001c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <TIM_OC4_SetConfig+0xa8>)
 8001c78:	401a      	ands	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <TIM_OC4_SetConfig+0xac>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <TIM_OC4_SetConfig+0xb0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <TIM_OC4_SetConfig+0xb4>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	031b      	lsls	r3, r3, #12
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <TIM_OC4_SetConfig+0xb8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <TIM_OC4_SetConfig+0x70>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <TIM_OC4_SetConfig+0xbc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <TIM_OC4_SetConfig+0x70>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <TIM_OC4_SetConfig+0xc0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d109      	bne.n	8001cec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <TIM_OC4_SetConfig+0xc4>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	621a      	str	r2, [r3, #32]
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	ffffefff 	.word	0xffffefff
 8001d14:	ffff8fff 	.word	0xffff8fff
 8001d18:	fffffcff 	.word	0xfffffcff
 8001d1c:	ffffdfff 	.word	0xffffdfff
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40014400 	.word	0x40014400
 8001d28:	40014800 	.word	0x40014800
 8001d2c:	ffffbfff 	.word	0xffffbfff

08001d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	221f      	movs	r2, #31
 8001d40:	4013      	ands	r3, r2
 8001d42:	2201      	movs	r2, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	43d2      	mvns	r2, r2
 8001d52:	401a      	ands	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a1a      	ldr	r2, [r3, #32]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	211f      	movs	r1, #31
 8001d60:	400b      	ands	r3, r1
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4099      	lsls	r1, r3
 8001d66:	000b      	movs	r3, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	621a      	str	r2, [r3, #32]
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d78:	480d      	ldr	r0, [pc, #52]	; (8001db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001da2:	f7fe fbfe 	bl	80005a2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001da6:	f000 f811 	bl	8001dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001daa:	f7fe fa39 	bl	8000220 <main>

08001dae <LoopForever>:

LoopForever:
    b LoopForever
 8001dae:	e7fe      	b.n	8001dae <LoopForever>
  ldr   r0, =_estack
 8001db0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dbc:	08001e74 	.word	0x08001e74
  ldr r2, =_sbss
 8001dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dc4:	20000078 	.word	0x20000078

08001dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC1_IRQHandler>
	...

08001dcc <__libc_init_array>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	2600      	movs	r6, #0
 8001dd0:	4d0c      	ldr	r5, [pc, #48]	; (8001e04 <__libc_init_array+0x38>)
 8001dd2:	4c0d      	ldr	r4, [pc, #52]	; (8001e08 <__libc_init_array+0x3c>)
 8001dd4:	1b64      	subs	r4, r4, r5
 8001dd6:	10a4      	asrs	r4, r4, #2
 8001dd8:	42a6      	cmp	r6, r4
 8001dda:	d109      	bne.n	8001df0 <__libc_init_array+0x24>
 8001ddc:	2600      	movs	r6, #0
 8001dde:	f000 f821 	bl	8001e24 <_init>
 8001de2:	4d0a      	ldr	r5, [pc, #40]	; (8001e0c <__libc_init_array+0x40>)
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <__libc_init_array+0x44>)
 8001de6:	1b64      	subs	r4, r4, r5
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	42a6      	cmp	r6, r4
 8001dec:	d105      	bne.n	8001dfa <__libc_init_array+0x2e>
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	00b3      	lsls	r3, r6, #2
 8001df2:	58eb      	ldr	r3, [r5, r3]
 8001df4:	4798      	blx	r3
 8001df6:	3601      	adds	r6, #1
 8001df8:	e7ee      	b.n	8001dd8 <__libc_init_array+0xc>
 8001dfa:	00b3      	lsls	r3, r6, #2
 8001dfc:	58eb      	ldr	r3, [r5, r3]
 8001dfe:	4798      	blx	r3
 8001e00:	3601      	adds	r6, #1
 8001e02:	e7f2      	b.n	8001dea <__libc_init_array+0x1e>
 8001e04:	08001e6c 	.word	0x08001e6c
 8001e08:	08001e6c 	.word	0x08001e6c
 8001e0c:	08001e6c 	.word	0x08001e6c
 8001e10:	08001e70 	.word	0x08001e70

08001e14 <memset>:
 8001e14:	0003      	movs	r3, r0
 8001e16:	1882      	adds	r2, r0, r2
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <memset+0xa>
 8001e1c:	4770      	bx	lr
 8001e1e:	7019      	strb	r1, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	e7f9      	b.n	8001e18 <memset+0x4>

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
